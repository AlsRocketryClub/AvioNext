
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017cf8  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  08017fc8  08017fc8  00027fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080183bc  080183bc  000283bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080183c4  080183c4  000283c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080183c8  080183c8  000283c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000164  24000000  080183cc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003070  24000164  08018530  00030164  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  240031d4  08018530  000331d4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030164  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003775d  00000000  00000000  00030192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005f95  00000000  00000000  000678ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002ac8  00000000  00000000  0006d888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002860  00000000  00000000  00070350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e5df  00000000  00000000  00072bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000395ee  00000000  00000000  000b118f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017d904  00000000  00000000  000ea77d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00268081  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c268  00000000  00000000  002680d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000164 	.word	0x24000164
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08017fb0 	.word	0x08017fb0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000168 	.word	0x24000168
 800030c:	08017fb0 	.word	0x08017fb0

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b974 	b.w	80006e0 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9d08      	ldr	r5, [sp, #32]
 8000416:	4604      	mov	r4, r0
 8000418:	468e      	mov	lr, r1
 800041a:	2b00      	cmp	r3, #0
 800041c:	d14d      	bne.n	80004ba <__udivmoddi4+0xaa>
 800041e:	428a      	cmp	r2, r1
 8000420:	4694      	mov	ip, r2
 8000422:	d969      	bls.n	80004f8 <__udivmoddi4+0xe8>
 8000424:	fab2 f282 	clz	r2, r2
 8000428:	b152      	cbz	r2, 8000440 <__udivmoddi4+0x30>
 800042a:	fa01 f302 	lsl.w	r3, r1, r2
 800042e:	f1c2 0120 	rsb	r1, r2, #32
 8000432:	fa20 f101 	lsr.w	r1, r0, r1
 8000436:	fa0c fc02 	lsl.w	ip, ip, r2
 800043a:	ea41 0e03 	orr.w	lr, r1, r3
 800043e:	4094      	lsls	r4, r2
 8000440:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000444:	0c21      	lsrs	r1, r4, #16
 8000446:	fbbe f6f8 	udiv	r6, lr, r8
 800044a:	fa1f f78c 	uxth.w	r7, ip
 800044e:	fb08 e316 	mls	r3, r8, r6, lr
 8000452:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000456:	fb06 f107 	mul.w	r1, r6, r7
 800045a:	4299      	cmp	r1, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x64>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f106 30ff 	add.w	r0, r6, #4294967295
 8000466:	f080 811f 	bcs.w	80006a8 <__udivmoddi4+0x298>
 800046a:	4299      	cmp	r1, r3
 800046c:	f240 811c 	bls.w	80006a8 <__udivmoddi4+0x298>
 8000470:	3e02      	subs	r6, #2
 8000472:	4463      	add	r3, ip
 8000474:	1a5b      	subs	r3, r3, r1
 8000476:	b2a4      	uxth	r4, r4
 8000478:	fbb3 f0f8 	udiv	r0, r3, r8
 800047c:	fb08 3310 	mls	r3, r8, r0, r3
 8000480:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000484:	fb00 f707 	mul.w	r7, r0, r7
 8000488:	42a7      	cmp	r7, r4
 800048a:	d90a      	bls.n	80004a2 <__udivmoddi4+0x92>
 800048c:	eb1c 0404 	adds.w	r4, ip, r4
 8000490:	f100 33ff 	add.w	r3, r0, #4294967295
 8000494:	f080 810a 	bcs.w	80006ac <__udivmoddi4+0x29c>
 8000498:	42a7      	cmp	r7, r4
 800049a:	f240 8107 	bls.w	80006ac <__udivmoddi4+0x29c>
 800049e:	4464      	add	r4, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004a6:	1be4      	subs	r4, r4, r7
 80004a8:	2600      	movs	r6, #0
 80004aa:	b11d      	cbz	r5, 80004b4 <__udivmoddi4+0xa4>
 80004ac:	40d4      	lsrs	r4, r2
 80004ae:	2300      	movs	r3, #0
 80004b0:	e9c5 4300 	strd	r4, r3, [r5]
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d909      	bls.n	80004d2 <__udivmoddi4+0xc2>
 80004be:	2d00      	cmp	r5, #0
 80004c0:	f000 80ef 	beq.w	80006a2 <__udivmoddi4+0x292>
 80004c4:	2600      	movs	r6, #0
 80004c6:	e9c5 0100 	strd	r0, r1, [r5]
 80004ca:	4630      	mov	r0, r6
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	fab3 f683 	clz	r6, r3
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	d14a      	bne.n	8000570 <__udivmoddi4+0x160>
 80004da:	428b      	cmp	r3, r1
 80004dc:	d302      	bcc.n	80004e4 <__udivmoddi4+0xd4>
 80004de:	4282      	cmp	r2, r0
 80004e0:	f200 80f9 	bhi.w	80006d6 <__udivmoddi4+0x2c6>
 80004e4:	1a84      	subs	r4, r0, r2
 80004e6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ea:	2001      	movs	r0, #1
 80004ec:	469e      	mov	lr, r3
 80004ee:	2d00      	cmp	r5, #0
 80004f0:	d0e0      	beq.n	80004b4 <__udivmoddi4+0xa4>
 80004f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004f6:	e7dd      	b.n	80004b4 <__udivmoddi4+0xa4>
 80004f8:	b902      	cbnz	r2, 80004fc <__udivmoddi4+0xec>
 80004fa:	deff      	udf	#255	; 0xff
 80004fc:	fab2 f282 	clz	r2, r2
 8000500:	2a00      	cmp	r2, #0
 8000502:	f040 8092 	bne.w	800062a <__udivmoddi4+0x21a>
 8000506:	eba1 010c 	sub.w	r1, r1, ip
 800050a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800050e:	fa1f fe8c 	uxth.w	lr, ip
 8000512:	2601      	movs	r6, #1
 8000514:	0c20      	lsrs	r0, r4, #16
 8000516:	fbb1 f3f7 	udiv	r3, r1, r7
 800051a:	fb07 1113 	mls	r1, r7, r3, r1
 800051e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000522:	fb0e f003 	mul.w	r0, lr, r3
 8000526:	4288      	cmp	r0, r1
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x12c>
 800052a:	eb1c 0101 	adds.w	r1, ip, r1
 800052e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000532:	d202      	bcs.n	800053a <__udivmoddi4+0x12a>
 8000534:	4288      	cmp	r0, r1
 8000536:	f200 80cb 	bhi.w	80006d0 <__udivmoddi4+0x2c0>
 800053a:	4643      	mov	r3, r8
 800053c:	1a09      	subs	r1, r1, r0
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb1 f0f7 	udiv	r0, r1, r7
 8000544:	fb07 1110 	mls	r1, r7, r0, r1
 8000548:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800054c:	fb0e fe00 	mul.w	lr, lr, r0
 8000550:	45a6      	cmp	lr, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x156>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f100 31ff 	add.w	r1, r0, #4294967295
 800055c:	d202      	bcs.n	8000564 <__udivmoddi4+0x154>
 800055e:	45a6      	cmp	lr, r4
 8000560:	f200 80bb 	bhi.w	80006da <__udivmoddi4+0x2ca>
 8000564:	4608      	mov	r0, r1
 8000566:	eba4 040e 	sub.w	r4, r4, lr
 800056a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800056e:	e79c      	b.n	80004aa <__udivmoddi4+0x9a>
 8000570:	f1c6 0720 	rsb	r7, r6, #32
 8000574:	40b3      	lsls	r3, r6
 8000576:	fa22 fc07 	lsr.w	ip, r2, r7
 800057a:	ea4c 0c03 	orr.w	ip, ip, r3
 800057e:	fa20 f407 	lsr.w	r4, r0, r7
 8000582:	fa01 f306 	lsl.w	r3, r1, r6
 8000586:	431c      	orrs	r4, r3
 8000588:	40f9      	lsrs	r1, r7
 800058a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800058e:	fa00 f306 	lsl.w	r3, r0, r6
 8000592:	fbb1 f8f9 	udiv	r8, r1, r9
 8000596:	0c20      	lsrs	r0, r4, #16
 8000598:	fa1f fe8c 	uxth.w	lr, ip
 800059c:	fb09 1118 	mls	r1, r9, r8, r1
 80005a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005a4:	fb08 f00e 	mul.w	r0, r8, lr
 80005a8:	4288      	cmp	r0, r1
 80005aa:	fa02 f206 	lsl.w	r2, r2, r6
 80005ae:	d90b      	bls.n	80005c8 <__udivmoddi4+0x1b8>
 80005b0:	eb1c 0101 	adds.w	r1, ip, r1
 80005b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80005b8:	f080 8088 	bcs.w	80006cc <__udivmoddi4+0x2bc>
 80005bc:	4288      	cmp	r0, r1
 80005be:	f240 8085 	bls.w	80006cc <__udivmoddi4+0x2bc>
 80005c2:	f1a8 0802 	sub.w	r8, r8, #2
 80005c6:	4461      	add	r1, ip
 80005c8:	1a09      	subs	r1, r1, r0
 80005ca:	b2a4      	uxth	r4, r4
 80005cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80005d0:	fb09 1110 	mls	r1, r9, r0, r1
 80005d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005dc:	458e      	cmp	lr, r1
 80005de:	d908      	bls.n	80005f2 <__udivmoddi4+0x1e2>
 80005e0:	eb1c 0101 	adds.w	r1, ip, r1
 80005e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005e8:	d26c      	bcs.n	80006c4 <__udivmoddi4+0x2b4>
 80005ea:	458e      	cmp	lr, r1
 80005ec:	d96a      	bls.n	80006c4 <__udivmoddi4+0x2b4>
 80005ee:	3802      	subs	r0, #2
 80005f0:	4461      	add	r1, ip
 80005f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005f6:	fba0 9402 	umull	r9, r4, r0, r2
 80005fa:	eba1 010e 	sub.w	r1, r1, lr
 80005fe:	42a1      	cmp	r1, r4
 8000600:	46c8      	mov	r8, r9
 8000602:	46a6      	mov	lr, r4
 8000604:	d356      	bcc.n	80006b4 <__udivmoddi4+0x2a4>
 8000606:	d053      	beq.n	80006b0 <__udivmoddi4+0x2a0>
 8000608:	b15d      	cbz	r5, 8000622 <__udivmoddi4+0x212>
 800060a:	ebb3 0208 	subs.w	r2, r3, r8
 800060e:	eb61 010e 	sbc.w	r1, r1, lr
 8000612:	fa01 f707 	lsl.w	r7, r1, r7
 8000616:	fa22 f306 	lsr.w	r3, r2, r6
 800061a:	40f1      	lsrs	r1, r6
 800061c:	431f      	orrs	r7, r3
 800061e:	e9c5 7100 	strd	r7, r1, [r5]
 8000622:	2600      	movs	r6, #0
 8000624:	4631      	mov	r1, r6
 8000626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	40d8      	lsrs	r0, r3
 8000630:	fa0c fc02 	lsl.w	ip, ip, r2
 8000634:	fa21 f303 	lsr.w	r3, r1, r3
 8000638:	4091      	lsls	r1, r2
 800063a:	4301      	orrs	r1, r0
 800063c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000640:	fa1f fe8c 	uxth.w	lr, ip
 8000644:	fbb3 f0f7 	udiv	r0, r3, r7
 8000648:	fb07 3610 	mls	r6, r7, r0, r3
 800064c:	0c0b      	lsrs	r3, r1, #16
 800064e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000652:	fb00 f60e 	mul.w	r6, r0, lr
 8000656:	429e      	cmp	r6, r3
 8000658:	fa04 f402 	lsl.w	r4, r4, r2
 800065c:	d908      	bls.n	8000670 <__udivmoddi4+0x260>
 800065e:	eb1c 0303 	adds.w	r3, ip, r3
 8000662:	f100 38ff 	add.w	r8, r0, #4294967295
 8000666:	d22f      	bcs.n	80006c8 <__udivmoddi4+0x2b8>
 8000668:	429e      	cmp	r6, r3
 800066a:	d92d      	bls.n	80006c8 <__udivmoddi4+0x2b8>
 800066c:	3802      	subs	r0, #2
 800066e:	4463      	add	r3, ip
 8000670:	1b9b      	subs	r3, r3, r6
 8000672:	b289      	uxth	r1, r1
 8000674:	fbb3 f6f7 	udiv	r6, r3, r7
 8000678:	fb07 3316 	mls	r3, r7, r6, r3
 800067c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000680:	fb06 f30e 	mul.w	r3, r6, lr
 8000684:	428b      	cmp	r3, r1
 8000686:	d908      	bls.n	800069a <__udivmoddi4+0x28a>
 8000688:	eb1c 0101 	adds.w	r1, ip, r1
 800068c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000690:	d216      	bcs.n	80006c0 <__udivmoddi4+0x2b0>
 8000692:	428b      	cmp	r3, r1
 8000694:	d914      	bls.n	80006c0 <__udivmoddi4+0x2b0>
 8000696:	3e02      	subs	r6, #2
 8000698:	4461      	add	r1, ip
 800069a:	1ac9      	subs	r1, r1, r3
 800069c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80006a0:	e738      	b.n	8000514 <__udivmoddi4+0x104>
 80006a2:	462e      	mov	r6, r5
 80006a4:	4628      	mov	r0, r5
 80006a6:	e705      	b.n	80004b4 <__udivmoddi4+0xa4>
 80006a8:	4606      	mov	r6, r0
 80006aa:	e6e3      	b.n	8000474 <__udivmoddi4+0x64>
 80006ac:	4618      	mov	r0, r3
 80006ae:	e6f8      	b.n	80004a2 <__udivmoddi4+0x92>
 80006b0:	454b      	cmp	r3, r9
 80006b2:	d2a9      	bcs.n	8000608 <__udivmoddi4+0x1f8>
 80006b4:	ebb9 0802 	subs.w	r8, r9, r2
 80006b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80006bc:	3801      	subs	r0, #1
 80006be:	e7a3      	b.n	8000608 <__udivmoddi4+0x1f8>
 80006c0:	4646      	mov	r6, r8
 80006c2:	e7ea      	b.n	800069a <__udivmoddi4+0x28a>
 80006c4:	4620      	mov	r0, r4
 80006c6:	e794      	b.n	80005f2 <__udivmoddi4+0x1e2>
 80006c8:	4640      	mov	r0, r8
 80006ca:	e7d1      	b.n	8000670 <__udivmoddi4+0x260>
 80006cc:	46d0      	mov	r8, sl
 80006ce:	e77b      	b.n	80005c8 <__udivmoddi4+0x1b8>
 80006d0:	3b02      	subs	r3, #2
 80006d2:	4461      	add	r1, ip
 80006d4:	e732      	b.n	800053c <__udivmoddi4+0x12c>
 80006d6:	4630      	mov	r0, r6
 80006d8:	e709      	b.n	80004ee <__udivmoddi4+0xde>
 80006da:	4464      	add	r4, ip
 80006dc:	3802      	subs	r0, #2
 80006de:	e742      	b.n	8000566 <__udivmoddi4+0x156>

080006e0 <__aeabi_idiv0>:
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop

080006e4 <HG2_Write_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);

	return reg_value;
}

void HG2_Write_Register(uint8_t addr, uint8_t data){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	460a      	mov	r2, r1
 80006ee:	71fb      	strb	r3, [r7, #7]
 80006f0:	4613      	mov	r3, r2
 80006f2:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 80006f4:	2200      	movs	r2, #0
 80006f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006fa:	480c      	ldr	r0, [pc, #48]	; (800072c <HG2_Write_Register+0x48>)
 80006fc:	f007 fb1e 	bl	8007d3c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000700:	1df9      	adds	r1, r7, #7
 8000702:	2364      	movs	r3, #100	; 0x64
 8000704:	2201      	movs	r2, #1
 8000706:	480a      	ldr	r0, [pc, #40]	; (8000730 <HG2_Write_Register+0x4c>)
 8000708:	f00e f89a 	bl	800e840 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 800070c:	1db9      	adds	r1, r7, #6
 800070e:	2364      	movs	r3, #100	; 0x64
 8000710:	2201      	movs	r2, #1
 8000712:	4807      	ldr	r0, [pc, #28]	; (8000730 <HG2_Write_Register+0x4c>)
 8000714:	f00e f894 	bl	800e840 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800071e:	4803      	ldr	r0, [pc, #12]	; (800072c <HG2_Write_Register+0x48>)
 8000720:	f007 fb0c 	bl	8007d3c <HAL_GPIO_WritePin>

}
 8000724:	bf00      	nop
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	58020c00 	.word	0x58020c00
 8000730:	24000fd4 	.word	0x24000fd4

08000734 <LG2_Read_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
}



uint8_t LG2_Read_Register(uint8_t addr){
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	addr |= (1<<7);
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000744:	b2db      	uxtb	r3, r3
 8000746:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000748:	2200      	movs	r2, #0
 800074a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800074e:	480d      	ldr	r0, [pc, #52]	; (8000784 <LG2_Read_Register+0x50>)
 8000750:	f007 faf4 	bl	8007d3c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000754:	1df9      	adds	r1, r7, #7
 8000756:	2364      	movs	r3, #100	; 0x64
 8000758:	2201      	movs	r2, #1
 800075a:	480b      	ldr	r0, [pc, #44]	; (8000788 <LG2_Read_Register+0x54>)
 800075c:	f00e f870 	bl	800e840 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &reg_value, 1, 100);
 8000760:	f107 010f 	add.w	r1, r7, #15
 8000764:	2364      	movs	r3, #100	; 0x64
 8000766:	2201      	movs	r2, #1
 8000768:	4807      	ldr	r0, [pc, #28]	; (8000788 <LG2_Read_Register+0x54>)
 800076a:	f00e fa65 	bl	800ec38 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 800076e:	2201      	movs	r2, #1
 8000770:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000774:	4803      	ldr	r0, [pc, #12]	; (8000784 <LG2_Read_Register+0x50>)
 8000776:	f007 fae1 	bl	8007d3c <HAL_GPIO_WritePin>

	return reg_value;
 800077a:	7bfb      	ldrb	r3, [r7, #15]
}
 800077c:	4618      	mov	r0, r3
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	58020c00 	.word	0x58020c00
 8000788:	24000fd4 	.word	0x24000fd4

0800078c <LG2_Write_Register>:

void LG2_Write_Register(uint8_t addr, uint8_t data){
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	460a      	mov	r2, r1
 8000796:	71fb      	strb	r3, [r7, #7]
 8000798:	4613      	mov	r3, r2
 800079a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 800079c:	2200      	movs	r2, #0
 800079e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a2:	480c      	ldr	r0, [pc, #48]	; (80007d4 <LG2_Write_Register+0x48>)
 80007a4:	f007 faca 	bl	8007d3c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80007a8:	1df9      	adds	r1, r7, #7
 80007aa:	2364      	movs	r3, #100	; 0x64
 80007ac:	2201      	movs	r2, #1
 80007ae:	480a      	ldr	r0, [pc, #40]	; (80007d8 <LG2_Write_Register+0x4c>)
 80007b0:	f00e f846 	bl	800e840 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 80007b4:	1db9      	adds	r1, r7, #6
 80007b6:	2364      	movs	r3, #100	; 0x64
 80007b8:	2201      	movs	r2, #1
 80007ba:	4807      	ldr	r0, [pc, #28]	; (80007d8 <LG2_Write_Register+0x4c>)
 80007bc:	f00e f840 	bl	800e840 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 80007c0:	2201      	movs	r2, #1
 80007c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c6:	4803      	ldr	r0, [pc, #12]	; (80007d4 <LG2_Write_Register+0x48>)
 80007c8:	f007 fab8 	bl	8007d3c <HAL_GPIO_WritePin>

}
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	58020c00 	.word	0x58020c00
 80007d8:	24000fd4 	.word	0x24000fd4

080007dc <LG2_Get_Gyro_X>:

float LG2_Get_Gyro_X(){
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x22);
 80007e2:	2022      	movs	r0, #34	; 0x22
 80007e4:	f7ff ffa6 	bl	8000734 <LG2_Read_Register>
 80007e8:	4603      	mov	r3, r0
 80007ea:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x23);
 80007ec:	2023      	movs	r0, #35	; 0x23
 80007ee:	f7ff ffa1 	bl	8000734 <LG2_Read_Register>
 80007f2:	4603      	mov	r3, r0
 80007f4:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80007f6:	79bb      	ldrb	r3, [r7, #6]
 80007f8:	021b      	lsls	r3, r3, #8
 80007fa:	b21a      	sxth	r2, r3
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	b21b      	sxth	r3, r3
 8000800:	4313      	orrs	r3, r2
 8000802:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 8000804:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000808:	ee07 3a90 	vmov	s15, r3
 800080c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000810:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000834 <LG2_Get_Gyro_X+0x58>
 8000814:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000818:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000838 <LG2_Get_Gyro_X+0x5c>
 800081c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000820:	edc7 7a00 	vstr	s15, [r7]
	return omega;
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	ee07 3a90 	vmov	s15, r3
}
 800082a:	eeb0 0a67 	vmov.f32	s0, s15
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	46fffe00 	.word	0x46fffe00
 8000838:	437a0000 	.word	0x437a0000

0800083c <LG2_Get_Gyro_Y>:

float LG2_Get_Gyro_Y(){
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x24);
 8000842:	2024      	movs	r0, #36	; 0x24
 8000844:	f7ff ff76 	bl	8000734 <LG2_Read_Register>
 8000848:	4603      	mov	r3, r0
 800084a:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x25);
 800084c:	2025      	movs	r0, #37	; 0x25
 800084e:	f7ff ff71 	bl	8000734 <LG2_Read_Register>
 8000852:	4603      	mov	r3, r0
 8000854:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 8000856:	79bb      	ldrb	r3, [r7, #6]
 8000858:	021b      	lsls	r3, r3, #8
 800085a:	b21a      	sxth	r2, r3
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	b21b      	sxth	r3, r3
 8000860:	4313      	orrs	r3, r2
 8000862:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 8000864:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000868:	ee07 3a90 	vmov	s15, r3
 800086c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000870:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000894 <LG2_Get_Gyro_Y+0x58>
 8000874:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000878:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000898 <LG2_Get_Gyro_Y+0x5c>
 800087c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000880:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	ee07 3a90 	vmov	s15, r3
}
 800088a:	eeb0 0a67 	vmov.f32	s0, s15
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	46fffe00 	.word	0x46fffe00
 8000898:	437a0000 	.word	0x437a0000
 800089c:	00000000 	.word	0x00000000

080008a0 <LG2_Get_Gyro_Z>:

float LG2_Get_Gyro_Z(){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x26);
 80008a6:	2026      	movs	r0, #38	; 0x26
 80008a8:	f7ff ff44 	bl	8000734 <LG2_Read_Register>
 80008ac:	4603      	mov	r3, r0
 80008ae:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x27);
 80008b0:	2027      	movs	r0, #39	; 0x27
 80008b2:	f7ff ff3f 	bl	8000734 <LG2_Read_Register>
 80008b6:	4603      	mov	r3, r0
 80008b8:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80008ba:	79bb      	ldrb	r3, [r7, #6]
 80008bc:	021b      	lsls	r3, r3, #8
 80008be:	b21a      	sxth	r2, r3
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	b21b      	sxth	r3, r3
 80008c4:	4313      	orrs	r3, r2
 80008c6:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767.0) * 250.0;
 80008c8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008cc:	ee07 3a90 	vmov	s15, r3
 80008d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008d4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80008d8:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000900 <LG2_Get_Gyro_Z+0x60>
 80008dc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008e0:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000908 <LG2_Get_Gyro_Z+0x68>
 80008e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008e8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008ec:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	ee07 3a90 	vmov	s15, r3
}
 80008f6:	eeb0 0a67 	vmov.f32	s0, s15
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	00000000 	.word	0x00000000
 8000904:	40dfffc0 	.word	0x40dfffc0
 8000908:	00000000 	.word	0x00000000
 800090c:	406f4000 	.word	0x406f4000

08000910 <setServo>:
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;


void setServo(int servoNum, float angle){
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal =(int)( 3000 + (4000 * (angle/180)));
 800091c:	ed97 7a00 	vldr	s14, [r7]
 8000920:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000990 <setServo+0x80>
 8000924:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000928:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000994 <setServo+0x84>
 800092c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000930:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000998 <setServo+0x88>
 8000934:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000938:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800093c:	ee17 3a90 	vmov	r3, s15
 8000940:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	3b01      	subs	r3, #1
 8000946:	2b03      	cmp	r3, #3
 8000948:	d81a      	bhi.n	8000980 <setServo+0x70>
 800094a:	a201      	add	r2, pc, #4	; (adr r2, 8000950 <setServo+0x40>)
 800094c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000950:	08000961 	.word	0x08000961
 8000954:	08000969 	.word	0x08000969
 8000958:	08000971 	.word	0x08000971
 800095c:	08000979 	.word	0x08000979
		case 1:
			TIM4->CCR4 = timerVal;
 8000960:	4a0e      	ldr	r2, [pc, #56]	; (800099c <setServo+0x8c>)
 8000962:	89fb      	ldrh	r3, [r7, #14]
 8000964:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 8000966:	e00c      	b.n	8000982 <setServo+0x72>
		case 2:
			TIM4->CCR3 = timerVal;
 8000968:	4a0c      	ldr	r2, [pc, #48]	; (800099c <setServo+0x8c>)
 800096a:	89fb      	ldrh	r3, [r7, #14]
 800096c:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 800096e:	e008      	b.n	8000982 <setServo+0x72>
		case 3:
			TIM4->CCR2 = timerVal;
 8000970:	4a0a      	ldr	r2, [pc, #40]	; (800099c <setServo+0x8c>)
 8000972:	89fb      	ldrh	r3, [r7, #14]
 8000974:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 8000976:	e004      	b.n	8000982 <setServo+0x72>
		case 4:
			TIM4->CCR1 = timerVal;
 8000978:	4a08      	ldr	r2, [pc, #32]	; (800099c <setServo+0x8c>)
 800097a:	89fb      	ldrh	r3, [r7, #14]
 800097c:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 800097e:	e000      	b.n	8000982 <setServo+0x72>

		default:
			break;
 8000980:	bf00      	nop
	}
}
 8000982:	bf00      	nop
 8000984:	3714      	adds	r7, #20
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	43340000 	.word	0x43340000
 8000994:	457a0000 	.word	0x457a0000
 8000998:	453b8000 	.word	0x453b8000
 800099c:	40000800 	.word	0x40000800

080009a0 <setLEDs>:

void setLEDs(void) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08e      	sub	sp, #56	; 0x38
 80009a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 80009a6:	2300      	movs	r3, #0
 80009a8:	637b      	str	r3, [r7, #52]	; 0x34
 80009aa:	e181      	b.n	8000cb0 <setLEDs+0x310>
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 80009ac:	4aa1      	ldr	r2, [pc, #644]	; (8000c34 <setLEDs+0x294>)
 80009ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80009b4:	2b03      	cmp	r3, #3
 80009b6:	f200 8177 	bhi.w	8000ca8 <setLEDs+0x308>
 80009ba:	a201      	add	r2, pc, #4	; (adr r2, 80009c0 <setLEDs+0x20>)
 80009bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009c0:	080009d1 	.word	0x080009d1
 80009c4:	08000a81 	.word	0x08000a81
 80009c8:	08000b31 	.word	0x08000b31
 80009cc:	08000be1 	.word	0x08000be1
		case 0:
			for (int j = 0; j < 3; j++) {
 80009d0:	2300      	movs	r3, #0
 80009d2:	633b      	str	r3, [r7, #48]	; 0x30
 80009d4:	e042      	b.n	8000a5c <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 80009d6:	2300      	movs	r3, #0
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009da:	e039      	b.n	8000a50 <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 80009dc:	4996      	ldr	r1, [pc, #600]	; (8000c38 <setLEDs+0x298>)
 80009de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009e0:	4613      	mov	r3, r2
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	4413      	add	r3, r2
 80009e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80009e8:	4413      	add	r3, r2
 80009ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009ee:	2180      	movs	r1, #128	; 0x80
 80009f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009f2:	fa41 f202 	asr.w	r2, r1, r2
 80009f6:	4013      	ands	r3, r2
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d013      	beq.n	8000a24 <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 80009fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009fe:	00da      	lsls	r2, r3, #3
 8000a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a02:	18d1      	adds	r1, r2, r3
 8000a04:	4a8b      	ldr	r2, [pc, #556]	; (8000c34 <setLEDs+0x294>)
 8000a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a08:	00db      	lsls	r3, r3, #3
 8000a0a:	4413      	add	r3, r2
 8000a0c:	685a      	ldr	r2, [r3, #4]
 8000a0e:	4613      	mov	r3, r2
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	4413      	add	r3, r2
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	440b      	add	r3, r1
 8000a18:	3308      	adds	r3, #8
 8000a1a:	4a88      	ldr	r2, [pc, #544]	; (8000c3c <setLEDs+0x29c>)
 8000a1c:	213c      	movs	r1, #60	; 0x3c
 8000a1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a22:	e012      	b.n	8000a4a <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a26:	00da      	lsls	r2, r3, #3
 8000a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a2a:	18d1      	adds	r1, r2, r3
 8000a2c:	4a81      	ldr	r2, [pc, #516]	; (8000c34 <setLEDs+0x294>)
 8000a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a30:	00db      	lsls	r3, r3, #3
 8000a32:	4413      	add	r3, r2
 8000a34:	685a      	ldr	r2, [r3, #4]
 8000a36:	4613      	mov	r3, r2
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	4413      	add	r3, r2
 8000a3c:	00db      	lsls	r3, r3, #3
 8000a3e:	440b      	add	r3, r1
 8000a40:	3308      	adds	r3, #8
 8000a42:	4a7e      	ldr	r2, [pc, #504]	; (8000c3c <setLEDs+0x29c>)
 8000a44:	211e      	movs	r1, #30
 8000a46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a52:	2b07      	cmp	r3, #7
 8000a54:	ddc2      	ble.n	80009dc <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 8000a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a58:	3301      	adds	r3, #1
 8000a5a:	633b      	str	r3, [r7, #48]	; 0x30
 8000a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a5e:	2b02      	cmp	r3, #2
 8000a60:	ddb9      	ble.n	80009d6 <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000a62:	2380      	movs	r3, #128	; 0x80
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a66:	e007      	b.n	8000a78 <setLEDs+0xd8>
				LED_PWM_Data_0[i] = 0;
 8000a68:	4a74      	ldr	r2, [pc, #464]	; (8000c3c <setLEDs+0x29c>)
 8000a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a74:	3301      	adds	r3, #1
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a7a:	2bb1      	cmp	r3, #177	; 0xb1
 8000a7c:	ddf4      	ble.n	8000a68 <setLEDs+0xc8>
			}
			break;
 8000a7e:	e114      	b.n	8000caa <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
 8000a84:	e042      	b.n	8000b0c <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 8000a86:	2300      	movs	r3, #0
 8000a88:	623b      	str	r3, [r7, #32]
 8000a8a:	e039      	b.n	8000b00 <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000a8c:	496a      	ldr	r1, [pc, #424]	; (8000c38 <setLEDs+0x298>)
 8000a8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a90:	4613      	mov	r3, r2
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	4413      	add	r3, r2
 8000a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a98:	4413      	add	r3, r2
 8000a9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a9e:	2180      	movs	r1, #128	; 0x80
 8000aa0:	6a3a      	ldr	r2, [r7, #32]
 8000aa2:	fa41 f202 	asr.w	r2, r1, r2
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d013      	beq.n	8000ad4 <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aae:	00da      	lsls	r2, r3, #3
 8000ab0:	6a3b      	ldr	r3, [r7, #32]
 8000ab2:	18d1      	adds	r1, r2, r3
 8000ab4:	4a5f      	ldr	r2, [pc, #380]	; (8000c34 <setLEDs+0x294>)
 8000ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ab8:	00db      	lsls	r3, r3, #3
 8000aba:	4413      	add	r3, r2
 8000abc:	685a      	ldr	r2, [r3, #4]
 8000abe:	4613      	mov	r3, r2
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	4413      	add	r3, r2
 8000ac4:	00db      	lsls	r3, r3, #3
 8000ac6:	440b      	add	r3, r1
 8000ac8:	3308      	adds	r3, #8
 8000aca:	4a5d      	ldr	r2, [pc, #372]	; (8000c40 <setLEDs+0x2a0>)
 8000acc:	213c      	movs	r1, #60	; 0x3c
 8000ace:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000ad2:	e012      	b.n	8000afa <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad6:	00da      	lsls	r2, r3, #3
 8000ad8:	6a3b      	ldr	r3, [r7, #32]
 8000ada:	18d1      	adds	r1, r2, r3
 8000adc:	4a55      	ldr	r2, [pc, #340]	; (8000c34 <setLEDs+0x294>)
 8000ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ae0:	00db      	lsls	r3, r3, #3
 8000ae2:	4413      	add	r3, r2
 8000ae4:	685a      	ldr	r2, [r3, #4]
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	4413      	add	r3, r2
 8000aec:	00db      	lsls	r3, r3, #3
 8000aee:	440b      	add	r3, r1
 8000af0:	3308      	adds	r3, #8
 8000af2:	4a53      	ldr	r2, [pc, #332]	; (8000c40 <setLEDs+0x2a0>)
 8000af4:	211e      	movs	r1, #30
 8000af6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000afa:	6a3b      	ldr	r3, [r7, #32]
 8000afc:	3301      	adds	r3, #1
 8000afe:	623b      	str	r3, [r7, #32]
 8000b00:	6a3b      	ldr	r3, [r7, #32]
 8000b02:	2b07      	cmp	r3, #7
 8000b04:	ddc2      	ble.n	8000a8c <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 8000b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b08:	3301      	adds	r3, #1
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8000b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0e:	2b02      	cmp	r3, #2
 8000b10:	ddb9      	ble.n	8000a86 <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000b12:	2380      	movs	r3, #128	; 0x80
 8000b14:	61fb      	str	r3, [r7, #28]
 8000b16:	e007      	b.n	8000b28 <setLEDs+0x188>
				LED_PWM_Data_1[i] = 0;
 8000b18:	4a49      	ldr	r2, [pc, #292]	; (8000c40 <setLEDs+0x2a0>)
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	3301      	adds	r3, #1
 8000b26:	61fb      	str	r3, [r7, #28]
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	2bb1      	cmp	r3, #177	; 0xb1
 8000b2c:	ddf4      	ble.n	8000b18 <setLEDs+0x178>
			}
			break;
 8000b2e:	e0bc      	b.n	8000caa <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 8000b30:	2300      	movs	r3, #0
 8000b32:	61bb      	str	r3, [r7, #24]
 8000b34:	e042      	b.n	8000bbc <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]
 8000b3a:	e039      	b.n	8000bb0 <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000b3c:	493e      	ldr	r1, [pc, #248]	; (8000c38 <setLEDs+0x298>)
 8000b3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b40:	4613      	mov	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	4413      	add	r3, r2
 8000b46:	69ba      	ldr	r2, [r7, #24]
 8000b48:	4413      	add	r3, r2
 8000b4a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b4e:	2180      	movs	r1, #128	; 0x80
 8000b50:	697a      	ldr	r2, [r7, #20]
 8000b52:	fa41 f202 	asr.w	r2, r1, r2
 8000b56:	4013      	ands	r3, r2
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d013      	beq.n	8000b84 <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	00da      	lsls	r2, r3, #3
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	18d1      	adds	r1, r2, r3
 8000b64:	4a33      	ldr	r2, [pc, #204]	; (8000c34 <setLEDs+0x294>)
 8000b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b68:	00db      	lsls	r3, r3, #3
 8000b6a:	4413      	add	r3, r2
 8000b6c:	685a      	ldr	r2, [r3, #4]
 8000b6e:	4613      	mov	r3, r2
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	4413      	add	r3, r2
 8000b74:	00db      	lsls	r3, r3, #3
 8000b76:	440b      	add	r3, r1
 8000b78:	3308      	adds	r3, #8
 8000b7a:	4a32      	ldr	r2, [pc, #200]	; (8000c44 <setLEDs+0x2a4>)
 8000b7c:	213c      	movs	r1, #60	; 0x3c
 8000b7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000b82:	e012      	b.n	8000baa <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	00da      	lsls	r2, r3, #3
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	18d1      	adds	r1, r2, r3
 8000b8c:	4a29      	ldr	r2, [pc, #164]	; (8000c34 <setLEDs+0x294>)
 8000b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b90:	00db      	lsls	r3, r3, #3
 8000b92:	4413      	add	r3, r2
 8000b94:	685a      	ldr	r2, [r3, #4]
 8000b96:	4613      	mov	r3, r2
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	4413      	add	r3, r2
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	440b      	add	r3, r1
 8000ba0:	3308      	adds	r3, #8
 8000ba2:	4a28      	ldr	r2, [pc, #160]	; (8000c44 <setLEDs+0x2a4>)
 8000ba4:	211e      	movs	r1, #30
 8000ba6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	3301      	adds	r3, #1
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	2b07      	cmp	r3, #7
 8000bb4:	ddc2      	ble.n	8000b3c <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 8000bb6:	69bb      	ldr	r3, [r7, #24]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	61bb      	str	r3, [r7, #24]
 8000bbc:	69bb      	ldr	r3, [r7, #24]
 8000bbe:	2b02      	cmp	r3, #2
 8000bc0:	ddb9      	ble.n	8000b36 <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000bc2:	2338      	movs	r3, #56	; 0x38
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	e007      	b.n	8000bd8 <setLEDs+0x238>
				LED_PWM_Data_2[i] = 0;
 8000bc8:	4a1e      	ldr	r2, [pc, #120]	; (8000c44 <setLEDs+0x2a4>)
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	2100      	movs	r1, #0
 8000bce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	2b69      	cmp	r3, #105	; 0x69
 8000bdc:	ddf4      	ble.n	8000bc8 <setLEDs+0x228>
			}
			break;
 8000bde:	e064      	b.n	8000caa <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	e04e      	b.n	8000c84 <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 8000be6:	2300      	movs	r3, #0
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	e045      	b.n	8000c78 <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000bec:	4912      	ldr	r1, [pc, #72]	; (8000c38 <setLEDs+0x298>)
 8000bee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	4413      	add	r3, r2
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bfe:	2180      	movs	r1, #128	; 0x80
 8000c00:	68ba      	ldr	r2, [r7, #8]
 8000c02:	fa41 f202 	asr.w	r2, r1, r2
 8000c06:	4013      	ands	r3, r2
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d01f      	beq.n	8000c4c <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	00da      	lsls	r2, r3, #3
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	18d1      	adds	r1, r2, r3
 8000c14:	4a07      	ldr	r2, [pc, #28]	; (8000c34 <setLEDs+0x294>)
 8000c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c18:	00db      	lsls	r3, r3, #3
 8000c1a:	4413      	add	r3, r2
 8000c1c:	685a      	ldr	r2, [r3, #4]
 8000c1e:	4613      	mov	r3, r2
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	4413      	add	r3, r2
 8000c24:	00db      	lsls	r3, r3, #3
 8000c26:	440b      	add	r3, r1
 8000c28:	3308      	adds	r3, #8
 8000c2a:	4a07      	ldr	r2, [pc, #28]	; (8000c48 <setLEDs+0x2a8>)
 8000c2c:	213c      	movs	r1, #60	; 0x3c
 8000c2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000c32:	e01e      	b.n	8000c72 <setLEDs+0x2d2>
 8000c34:	08018148 	.word	0x08018148
 8000c38:	24000b64 	.word	0x24000b64
 8000c3c:	24000284 	.word	0x24000284
 8000c40:	2400054c 	.word	0x2400054c
 8000c44:	24000814 	.word	0x24000814
 8000c48:	240009bc 	.word	0x240009bc
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	00da      	lsls	r2, r3, #3
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	18d1      	adds	r1, r2, r3
 8000c54:	4a26      	ldr	r2, [pc, #152]	; (8000cf0 <setLEDs+0x350>)
 8000c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	4413      	add	r3, r2
 8000c5c:	685a      	ldr	r2, [r3, #4]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	4413      	add	r3, r2
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	440b      	add	r3, r1
 8000c68:	3308      	adds	r3, #8
 8000c6a:	4a22      	ldr	r2, [pc, #136]	; (8000cf4 <setLEDs+0x354>)
 8000c6c:	211e      	movs	r1, #30
 8000c6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	3301      	adds	r3, #1
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	2b07      	cmp	r3, #7
 8000c7c:	ddb6      	ble.n	8000bec <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	3301      	adds	r3, #1
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	ddad      	ble.n	8000be6 <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000c8a:	2338      	movs	r3, #56	; 0x38
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	e007      	b.n	8000ca0 <setLEDs+0x300>
				LED_PWM_Data_3[i] = 0;
 8000c90:	4a18      	ldr	r2, [pc, #96]	; (8000cf4 <setLEDs+0x354>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2100      	movs	r1, #0
 8000c96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b69      	cmp	r3, #105	; 0x69
 8000ca4:	ddf4      	ble.n	8000c90 <setLEDs+0x2f0>
			}
			break;
 8000ca6:	e000      	b.n	8000caa <setLEDs+0x30a>
		default:
			break;
 8000ca8:	bf00      	nop
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 8000caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cac:	3301      	adds	r3, #1
 8000cae:	637b      	str	r3, [r7, #52]	; 0x34
 8000cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cb2:	2b0d      	cmp	r3, #13
 8000cb4:	f77f ae7a 	ble.w	80009ac <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0, (NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
 8000cb8:	23b2      	movs	r3, #178	; 0xb2
 8000cba:	4a0f      	ldr	r2, [pc, #60]	; (8000cf8 <setLEDs+0x358>)
 8000cbc:	210c      	movs	r1, #12
 8000cbe:	480f      	ldr	r0, [pc, #60]	; (8000cfc <setLEDs+0x35c>)
 8000cc0:	f00e fba6 	bl	800f410 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1, (NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
 8000cc4:	23b2      	movs	r3, #178	; 0xb2
 8000cc6:	4a0e      	ldr	r2, [pc, #56]	; (8000d00 <setLEDs+0x360>)
 8000cc8:	2108      	movs	r1, #8
 8000cca:	480e      	ldr	r0, [pc, #56]	; (8000d04 <setLEDs+0x364>)
 8000ccc:	f00e fba0 	bl	800f410 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2, (NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
 8000cd0:	236a      	movs	r3, #106	; 0x6a
 8000cd2:	4a0d      	ldr	r2, [pc, #52]	; (8000d08 <setLEDs+0x368>)
 8000cd4:	2104      	movs	r1, #4
 8000cd6:	480d      	ldr	r0, [pc, #52]	; (8000d0c <setLEDs+0x36c>)
 8000cd8:	f00e fb9a 	bl	800f410 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3, (NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3
 8000cdc:	236a      	movs	r3, #106	; 0x6a
 8000cde:	4a05      	ldr	r2, [pc, #20]	; (8000cf4 <setLEDs+0x354>)
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	480a      	ldr	r0, [pc, #40]	; (8000d0c <setLEDs+0x36c>)
 8000ce4:	f00e fb94 	bl	800f410 <HAL_TIM_PWM_Start_DMA>

}
 8000ce8:	bf00      	nop
 8000cea:	3738      	adds	r7, #56	; 0x38
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	08018148 	.word	0x08018148
 8000cf4:	240009bc 	.word	0x240009bc
 8000cf8:	24000284 	.word	0x24000284
 8000cfc:	240011c8 	.word	0x240011c8
 8000d00:	2400054c 	.word	0x2400054c
 8000d04:	240010e4 	.word	0x240010e4
 8000d08:	24000814 	.word	0x24000814
 8000d0c:	24001130 	.word	0x24001130

08000d10 <LoRA_Read_Register>:
	}
}



uint8_t LoRA_Read_Register(uint8_t addr){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d20:	480d      	ldr	r0, [pc, #52]	; (8000d58 <LoRA_Read_Register+0x48>)
 8000d22:	f007 f80b 	bl	8007d3c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000d26:	1df9      	adds	r1, r7, #7
 8000d28:	2364      	movs	r3, #100	; 0x64
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	480b      	ldr	r0, [pc, #44]	; (8000d5c <LoRA_Read_Register+0x4c>)
 8000d2e:	f00d fd87 	bl	800e840 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 8000d32:	f107 010f 	add.w	r1, r7, #15
 8000d36:	2364      	movs	r3, #100	; 0x64
 8000d38:	2201      	movs	r2, #1
 8000d3a:	4808      	ldr	r0, [pc, #32]	; (8000d5c <LoRA_Read_Register+0x4c>)
 8000d3c:	f00d ff7c 	bl	800ec38 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d40:	2201      	movs	r2, #1
 8000d42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d46:	4804      	ldr	r0, [pc, #16]	; (8000d58 <LoRA_Read_Register+0x48>)
 8000d48:	f006 fff8 	bl	8007d3c <HAL_GPIO_WritePin>

	return reg_value;
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	58020000 	.word	0x58020000
 8000d5c:	2400105c 	.word	0x2400105c

08000d60 <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	460a      	mov	r2, r1
 8000d6a:	71fb      	strb	r3, [r7, #7]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	71bb      	strb	r3, [r7, #6]
	addr |= (1<<7);
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d80:	480c      	ldr	r0, [pc, #48]	; (8000db4 <LoRA_Write_Register+0x54>)
 8000d82:	f006 ffdb 	bl	8007d3c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000d86:	1df9      	adds	r1, r7, #7
 8000d88:	2364      	movs	r3, #100	; 0x64
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	480a      	ldr	r0, [pc, #40]	; (8000db8 <LoRA_Write_Register+0x58>)
 8000d8e:	f00d fd57 	bl	800e840 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8000d92:	1db9      	adds	r1, r7, #6
 8000d94:	2364      	movs	r3, #100	; 0x64
 8000d96:	2201      	movs	r2, #1
 8000d98:	4807      	ldr	r0, [pc, #28]	; (8000db8 <LoRA_Write_Register+0x58>)
 8000d9a:	f00d fd51 	bl	800e840 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000da4:	4803      	ldr	r0, [pc, #12]	; (8000db4 <LoRA_Write_Register+0x54>)
 8000da6:	f006 ffc9 	bl	8007d3c <HAL_GPIO_WritePin>

}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	58020000 	.word	0x58020000
 8000db8:	2400105c 	.word	0x2400105c

08000dbc <LoRA_sleep>:


void LoRA_sleep(void){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000dc0:	2180      	movs	r1, #128	; 0x80
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	f7ff ffcc 	bl	8000d60 <LoRA_Write_Register>
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency){
 8000dcc:	b5b0      	push	{r4, r5, r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8000dd4:	6879      	ldr	r1, [r7, #4]
 8000dd6:	17c8      	asrs	r0, r1, #31
 8000dd8:	460a      	mov	r2, r1
 8000dda:	4603      	mov	r3, r0
 8000ddc:	1355      	asrs	r5, r2, #13
 8000dde:	04d4      	lsls	r4, r2, #19
 8000de0:	4a18      	ldr	r2, [pc, #96]	; (8000e44 <LoRA_set_frequency+0x78>)
 8000de2:	f04f 0300 	mov.w	r3, #0
 8000de6:	4620      	mov	r0, r4
 8000de8:	4629      	mov	r1, r5
 8000dea:	f7ff faf9 	bl	80003e0 <__aeabi_uldivmod>
 8000dee:	4602      	mov	r2, r0
 8000df0:	460b      	mov	r3, r1
 8000df2:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8000df6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000dfa:	f04f 0200 	mov.w	r2, #0
 8000dfe:	f04f 0300 	mov.w	r3, #0
 8000e02:	0c02      	lsrs	r2, r0, #16
 8000e04:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e08:	0c0b      	lsrs	r3, r1, #16
 8000e0a:	b2d3      	uxtb	r3, r2
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	2006      	movs	r0, #6
 8000e10:	f7ff ffa6 	bl	8000d60 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t)(frf >> 8));
 8000e14:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e18:	f04f 0200 	mov.w	r2, #0
 8000e1c:	f04f 0300 	mov.w	r3, #0
 8000e20:	0a02      	lsrs	r2, r0, #8
 8000e22:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000e26:	0a0b      	lsrs	r3, r1, #8
 8000e28:	b2d3      	uxtb	r3, r2
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	2007      	movs	r0, #7
 8000e2e:	f7ff ff97 	bl	8000d60 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8000e32:	7a3b      	ldrb	r3, [r7, #8]
 8000e34:	4619      	mov	r1, r3
 8000e36:	2008      	movs	r0, #8
 8000e38:	f7ff ff92 	bl	8000d60 <LoRA_Write_Register>
}
 8000e3c:	bf00      	nop
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bdb0      	pop	{r4, r5, r7, pc}
 8000e44:	01e84800 	.word	0x01e84800

08000e48 <LoRA_idle>:

void LoRA_idle(){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8000e4c:	2181      	movs	r1, #129	; 0x81
 8000e4e:	2001      	movs	r0, #1
 8000e50:	f7ff ff86 	bl	8000d60 <LoRA_Write_Register>
}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <LoRA_setOCP>:

void LoRA_setOCP(uint8_t mA){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
	  uint8_t ocpTrim = 27;
 8000e62:	231b      	movs	r3, #27
 8000e64:	73fb      	strb	r3, [r7, #15]

	  if (mA <= 120) {
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	2b78      	cmp	r3, #120	; 0x78
 8000e6a:	d809      	bhi.n	8000e80 <LoRA_setOCP+0x28>
	    ocpTrim = (mA - 45) / 5;
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	3b2d      	subs	r3, #45	; 0x2d
 8000e70:	4a11      	ldr	r2, [pc, #68]	; (8000eb8 <LoRA_setOCP+0x60>)
 8000e72:	fb82 1203 	smull	r1, r2, r2, r3
 8000e76:	1052      	asrs	r2, r2, #1
 8000e78:	17db      	asrs	r3, r3, #31
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	73fb      	strb	r3, [r7, #15]
 8000e7e:	e00b      	b.n	8000e98 <LoRA_setOCP+0x40>
	  } else if (mA <=240) {
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	2bf0      	cmp	r3, #240	; 0xf0
 8000e84:	d808      	bhi.n	8000e98 <LoRA_setOCP+0x40>
	    ocpTrim = (mA + 30) / 10;
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	331e      	adds	r3, #30
 8000e8a:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <LoRA_setOCP+0x60>)
 8000e8c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e90:	1092      	asrs	r2, r2, #2
 8000e92:	17db      	asrs	r3, r3, #31
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	73fb      	strb	r3, [r7, #15]
	  }

	  LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8000e98:	7bfb      	ldrb	r3, [r7, #15]
 8000e9a:	f003 031f 	and.w	r3, r3, #31
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	f043 0320 	orr.w	r3, r3, #32
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	200b      	movs	r0, #11
 8000eaa:	f7ff ff59 	bl	8000d60 <LoRA_Write_Register>
}
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	66666667 	.word	0x66666667

08000ebc <LoRA_setTxPower>:

void LoRA_setTxPower(int level){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
    // PA BOOST
    if (level > 17) {
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b11      	cmp	r3, #17
 8000ec8:	dd0f      	ble.n	8000eea <LoRA_setTxPower+0x2e>
      if (level > 20) {
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b14      	cmp	r3, #20
 8000ece:	dd01      	ble.n	8000ed4 <LoRA_setTxPower+0x18>
        level = 20;
 8000ed0:	2314      	movs	r3, #20
 8000ed2:	607b      	str	r3, [r7, #4]
      }

      // subtract 3 from level, so 18 - 20 maps to 15 - 17
      level -= 3;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b03      	subs	r3, #3
 8000ed8:	607b      	str	r3, [r7, #4]

      // High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
      LoRA_Write_Register(REG_PA_DAC, 0x87);
 8000eda:	2187      	movs	r1, #135	; 0x87
 8000edc:	204d      	movs	r0, #77	; 0x4d
 8000ede:	f7ff ff3f 	bl	8000d60 <LoRA_Write_Register>
      LoRA_setOCP(140);
 8000ee2:	208c      	movs	r0, #140	; 0x8c
 8000ee4:	f7ff ffb8 	bl	8000e58 <LoRA_setOCP>
 8000ee8:	e00b      	b.n	8000f02 <LoRA_setTxPower+0x46>
    } else {
      if (level < 2) {
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	dc01      	bgt.n	8000ef4 <LoRA_setTxPower+0x38>
        level = 2;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	607b      	str	r3, [r7, #4]
      }
      //Default value PA_HF/LF or +17dBm
      LoRA_Write_Register(REG_PA_DAC, 0x84);
 8000ef4:	2184      	movs	r1, #132	; 0x84
 8000ef6:	204d      	movs	r0, #77	; 0x4d
 8000ef8:	f7ff ff32 	bl	8000d60 <LoRA_Write_Register>
      LoRA_setOCP(100);
 8000efc:	2064      	movs	r0, #100	; 0x64
 8000efe:	f7ff ffab 	bl	8000e58 <LoRA_setOCP>
    }

    LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	3b02      	subs	r3, #2
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	b25b      	sxtb	r3, r3
 8000f0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f10:	b25b      	sxtb	r3, r3
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	4619      	mov	r1, r3
 8000f16:	2009      	movs	r0, #9
 8000f18:	f7ff ff22 	bl	8000d60 <LoRA_Write_Register>
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode(){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1, LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 8000f28:	201d      	movs	r0, #29
 8000f2a:	f7ff fef1 	bl	8000d10 <LoRA_Read_Register>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	f023 0301 	bic.w	r3, r3, #1
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	4619      	mov	r1, r3
 8000f38:	201d      	movs	r0, #29
 8000f3a:	f7ff ff11 	bl	8000d60 <LoRA_Write_Register>
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <LoRA_begin>:

void LoRA_begin(long frequency){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b09c      	sub	sp, #112	; 0x70
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	2101      	movs	r1, #1
 8000f50:	4822      	ldr	r0, [pc, #136]	; (8000fdc <LoRA_begin+0x98>)
 8000f52:	f006 fef3 	bl	8007d3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000f56:	2201      	movs	r2, #1
 8000f58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f5c:	4820      	ldr	r0, [pc, #128]	; (8000fe0 <LoRA_begin+0x9c>)
 8000f5e:	f006 feed 	bl	8007d3c <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 8000f62:	2042      	movs	r0, #66	; 0x42
 8000f64:	f7ff fed4 	bl	8000d10 <LoRA_Read_Register>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    char data_debug[100];
	sprintf( data_debug,  "%x\n", version);
 8000f6e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000f72:	f107 0308 	add.w	r3, r7, #8
 8000f76:	491b      	ldr	r1, [pc, #108]	; (8000fe4 <LoRA_begin+0xa0>)
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f015 fef5 	bl	8016d68 <siprintf>
	CDC_Transmit_HS(data_debug, strlen(data_debug));
 8000f7e:	f107 0308 	add.w	r3, r7, #8
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff f9ce 	bl	8000324 <strlen>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	f107 0308 	add.w	r3, r7, #8
 8000f8e:	4611      	mov	r1, r2
 8000f90:	4618      	mov	r0, r3
 8000f92:	f015 fa55 	bl	8016440 <CDC_Transmit_HS>

	LoRA_sleep();
 8000f96:	f7ff ff11 	bl	8000dbc <LoRA_sleep>
	LoRA_set_frequency(868000000);
 8000f9a:	4813      	ldr	r0, [pc, #76]	; (8000fe8 <LoRA_begin+0xa4>)
 8000f9c:	f7ff ff16 	bl	8000dcc <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	200f      	movs	r0, #15
 8000fa4:	f7ff fedc 	bl	8000d60 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 8000fa8:	2100      	movs	r1, #0
 8000faa:	200e      	movs	r0, #14
 8000fac:	f7ff fed8 	bl	8000d60 <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 8000fb0:	200c      	movs	r0, #12
 8000fb2:	f7ff fead 	bl	8000d10 <LoRA_Read_Register>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	f043 0303 	orr.w	r3, r3, #3
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	200c      	movs	r0, #12
 8000fc2:	f7ff fecd 	bl	8000d60 <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8000fc6:	2104      	movs	r1, #4
 8000fc8:	2026      	movs	r0, #38	; 0x26
 8000fca:	f7ff fec9 	bl	8000d60 <LoRA_Write_Register>

	LoRA_setTxPower(17);
 8000fce:	2011      	movs	r0, #17
 8000fd0:	f7ff ff74 	bl	8000ebc <LoRA_setTxPower>

}
 8000fd4:	bf00      	nop
 8000fd6:	3770      	adds	r7, #112	; 0x70
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	58020c00 	.word	0x58020c00
 8000fe0:	58020000 	.word	0x58020000
 8000fe4:	08017fc8 	.word	0x08017fc8
 8000fe8:	33bca100 	.word	0x33bca100

08000fec <LoRA_beginPacket>:


void LoRA_beginPacket(){
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
	LoRA_explicit_header_mode();
 8000ff0:	f7ff ff98 	bl	8000f24 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	200d      	movs	r0, #13
 8000ff8:	f7ff feb2 	bl	8000d60 <LoRA_Write_Register>
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, 0);
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	2022      	movs	r0, #34	; 0x22
 8001000:	f7ff feae 	bl	8000d60 <LoRA_Write_Register>
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}

08001008 <LoRA_endPacket>:

void LoRA_endPacket(){
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 800100e:	2183      	movs	r1, #131	; 0x83
 8001010:	2001      	movs	r0, #1
 8001012:	f7ff fea5 	bl	8000d60 <LoRA_Write_Register>

	while((LoRA_Read_Register(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0){
 8001016:	bf00      	nop
 8001018:	2012      	movs	r0, #18
 800101a:	f7ff fe79 	bl	8000d10 <LoRA_Read_Register>
 800101e:	4603      	mov	r3, r0
 8001020:	f003 0308 	and.w	r3, r3, #8
 8001024:	2b00      	cmp	r3, #0
 8001026:	d0f7      	beq.n	8001018 <LoRA_endPacket+0x10>

	}

	LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8001028:	2108      	movs	r1, #8
 800102a:	2012      	movs	r0, #18
 800102c:	f7ff fe98 	bl	8000d60 <LoRA_Write_Register>

	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 8001030:	2012      	movs	r0, #18
 8001032:	f7ff fe6d 	bl	8000d10 <LoRA_Read_Register>
 8001036:	4603      	mov	r3, r0
 8001038:	607b      	str	r3, [r7, #4]

	LoRA_explicit_header_mode();
 800103a:	f7ff ff73 	bl	8000f24 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	4619      	mov	r1, r3
 8001044:	2012      	movs	r0, #18
 8001046:	f7ff fe8b 	bl	8000d60 <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001050:	2b00      	cmp	r3, #0
 8001052:	d00f      	beq.n	8001074 <LoRA_endPacket+0x6c>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f003 0320 	and.w	r3, r3, #32
 800105a:	2b00      	cmp	r3, #0
 800105c:	d10a      	bne.n	8001074 <LoRA_endPacket+0x6c>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 800105e:	2010      	movs	r0, #16
 8001060:	f7ff fe56 	bl	8000d10 <LoRA_Read_Register>
 8001064:	4603      	mov	r3, r0
 8001066:	4619      	mov	r1, r3
 8001068:	200d      	movs	r0, #13
 800106a:	f7ff fe79 	bl	8000d60 <LoRA_Write_Register>
		LoRA_idle();
 800106e:	f7ff feeb 	bl	8000e48 <LoRA_idle>
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)){
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
	}
}
 8001072:	e00d      	b.n	8001090 <LoRA_endPacket+0x88>
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)){
 8001074:	2001      	movs	r0, #1
 8001076:	f7ff fe4b 	bl	8000d10 <LoRA_Read_Register>
 800107a:	4603      	mov	r3, r0
 800107c:	2b86      	cmp	r3, #134	; 0x86
 800107e:	d007      	beq.n	8001090 <LoRA_endPacket+0x88>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8001080:	2100      	movs	r1, #0
 8001082:	200d      	movs	r0, #13
 8001084:	f7ff fe6c 	bl	8000d60 <LoRA_Write_Register>
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 8001088:	2186      	movs	r1, #134	; 0x86
 800108a:	2001      	movs	r0, #1
 800108c:	f7ff fe68 	bl	8000d60 <LoRA_Write_Register>
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <LoRA_parsePacket>:


int LoRA_parsePacket(){
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
	int packetLenght = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 80010a2:	2012      	movs	r0, #18
 80010a4:	f7ff fe34 	bl	8000d10 <LoRA_Read_Register>
 80010a8:	4603      	mov	r3, r0
 80010aa:	603b      	str	r3, [r7, #0]

	LoRA_explicit_header_mode();
 80010ac:	f7ff ff3a 	bl	8000f24 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	4619      	mov	r1, r3
 80010b6:	2012      	movs	r0, #18
 80010b8:	f7ff fe52 	bl	8000d60 <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d014      	beq.n	80010f0 <LoRA_parsePacket+0x58>
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	f003 0320 	and.w	r3, r3, #32
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d10f      	bne.n	80010f0 <LoRA_parsePacket+0x58>
		packetLenght = LoRA_Read_Register(REG_RX_NB_BYTES);
 80010d0:	2013      	movs	r0, #19
 80010d2:	f7ff fe1d 	bl	8000d10 <LoRA_Read_Register>
 80010d6:	4603      	mov	r3, r0
 80010d8:	607b      	str	r3, [r7, #4]
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 80010da:	2010      	movs	r0, #16
 80010dc:	f7ff fe18 	bl	8000d10 <LoRA_Read_Register>
 80010e0:	4603      	mov	r3, r0
 80010e2:	4619      	mov	r1, r3
 80010e4:	200d      	movs	r0, #13
 80010e6:	f7ff fe3b 	bl	8000d60 <LoRA_Write_Register>
		LoRA_idle();
 80010ea:	f7ff fead 	bl	8000e48 <LoRA_idle>
 80010ee:	e00d      	b.n	800110c <LoRA_parsePacket+0x74>
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)){
 80010f0:	2001      	movs	r0, #1
 80010f2:	f7ff fe0d 	bl	8000d10 <LoRA_Read_Register>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b86      	cmp	r3, #134	; 0x86
 80010fa:	d007      	beq.n	800110c <LoRA_parsePacket+0x74>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 80010fc:	2100      	movs	r1, #0
 80010fe:	200d      	movs	r0, #13
 8001100:	f7ff fe2e 	bl	8000d60 <LoRA_Write_Register>

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 8001104:	2186      	movs	r1, #134	; 0x86
 8001106:	2001      	movs	r0, #1
 8001108:	f7ff fe2a 	bl	8000d60 <LoRA_Write_Register>
	}
	return packetLenght;
 800110c:	687b      	ldr	r3, [r7, #4]

}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <LoRA_sendPacket>:

void LoRA_sendPacket(char * data){
 8001116:	b580      	push	{r7, lr}
 8001118:	b084      	sub	sp, #16
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
    LoRA_beginPacket();
 800111e:	f7ff ff65 	bl	8000fec <LoRA_beginPacket>
    for(int i = 0; i < strlen(data); i++){
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	e00a      	b.n	800113e <LoRA_sendPacket+0x28>
    	LoRA_Write_Register(REG_FIFO, data[i]);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	4413      	add	r3, r2
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	4619      	mov	r1, r3
 8001132:	2000      	movs	r0, #0
 8001134:	f7ff fe14 	bl	8000d60 <LoRA_Write_Register>
    for(int i = 0; i < strlen(data); i++){
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	3301      	adds	r3, #1
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff f8f0 	bl	8000324 <strlen>
 8001144:	4602      	mov	r2, r0
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	429a      	cmp	r2, r3
 800114a:	d8ed      	bhi.n	8001128 <LoRA_sendPacket+0x12>
    }
    LoRA_Write_Register(REG_PAYLOAD_LENGTH, strlen(data));
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff f8e9 	bl	8000324 <strlen>
 8001152:	4603      	mov	r3, r0
 8001154:	b2db      	uxtb	r3, r3
 8001156:	4619      	mov	r1, r3
 8001158:	2022      	movs	r0, #34	; 0x22
 800115a:	f7ff fe01 	bl	8000d60 <LoRA_Write_Register>
    LoRA_endPacket();
 800115e:	f7ff ff53 	bl	8001008 <LoRA_endPacket>
}
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <disarm>:
	int status = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
	return status;
}

int disarm(char* state)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 8001174:	2200      	movs	r2, #0
 8001176:	2102      	movs	r1, #2
 8001178:	4827      	ldr	r0, [pc, #156]	; (8001218 <disarm+0xac>)
 800117a:	f006 fddf 	bl	8007d3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2104      	movs	r1, #4
 8001182:	4825      	ldr	r0, [pc, #148]	; (8001218 <disarm+0xac>)
 8001184:	f006 fdda 	bl	8007d3c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 8001188:	2200      	movs	r2, #0
 800118a:	2102      	movs	r1, #2
 800118c:	4823      	ldr	r0, [pc, #140]	; (800121c <disarm+0xb0>)
 800118e:	f006 fdd5 	bl	8007d3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 8001192:	2200      	movs	r2, #0
 8001194:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001198:	4821      	ldr	r0, [pc, #132]	; (8001220 <disarm+0xb4>)
 800119a:	f006 fdcf 	bl	8007d3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011a4:	481e      	ldr	r0, [pc, #120]	; (8001220 <disarm+0xb4>)
 80011a6:	f006 fdc9 	bl	8007d3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011b0:	481b      	ldr	r0, [pc, #108]	; (8001220 <disarm+0xb4>)
 80011b2:	f006 fdc3 	bl	8007d3c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2102      	movs	r1, #2
 80011ba:	481a      	ldr	r0, [pc, #104]	; (8001224 <disarm+0xb8>)
 80011bc:	f006 fdbe 	bl	8007d3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 80011c0:	2200      	movs	r2, #0
 80011c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011c6:	4818      	ldr	r0, [pc, #96]	; (8001228 <disarm+0xbc>)
 80011c8:	f006 fdb8 	bl	8007d3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 80011cc:	2200      	movs	r2, #0
 80011ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011d2:	4815      	ldr	r0, [pc, #84]	; (8001228 <disarm+0xbc>)
 80011d4:	f006 fdb2 	bl	8007d3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 80011d8:	2200      	movs	r2, #0
 80011da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011de:	4812      	ldr	r0, [pc, #72]	; (8001228 <disarm+0xbc>)
 80011e0:	f006 fdac 	bl	8007d3c <HAL_GPIO_WritePin>

  LED_Color_Data[7][0] = 255;
 80011e4:	4b11      	ldr	r3, [pc, #68]	; (800122c <disarm+0xc0>)
 80011e6:	22ff      	movs	r2, #255	; 0xff
 80011e8:	655a      	str	r2, [r3, #84]	; 0x54
  LED_Color_Data[7][1] = 0;
 80011ea:	4b10      	ldr	r3, [pc, #64]	; (800122c <disarm+0xc0>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	659a      	str	r2, [r3, #88]	; 0x58
  LED_Color_Data[7][2] = 0;
 80011f0:	4b0e      	ldr	r3, [pc, #56]	; (800122c <disarm+0xc0>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	65da      	str	r2, [r3, #92]	; 0x5c
  setLEDs();
 80011f6:	f7ff fbd3 	bl	80009a0 <setLEDs>

  strcpy(state,"DISARMED");
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	490c      	ldr	r1, [pc, #48]	; (8001230 <disarm+0xc4>)
 80011fe:	461a      	mov	r2, r3
 8001200:	460b      	mov	r3, r1
 8001202:	cb03      	ldmia	r3!, {r0, r1}
 8001204:	6010      	str	r0, [r2, #0]
 8001206:	6051      	str	r1, [r2, #4]
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	7213      	strb	r3, [r2, #8]
  return 0;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	58020000 	.word	0x58020000
 800121c:	58020400 	.word	0x58020400
 8001220:	58021400 	.word	0x58021400
 8001224:	58021800 	.word	0x58021800
 8001228:	58021000 	.word	0x58021000
 800122c:	24000b64 	.word	0x24000b64
 8001230:	08017fcc 	.word	0x08017fcc

08001234 <recv_packet>:
  setLEDs();
  return 0;
}

int recv_packet(char* LoRA_data, int max_length)
{
 8001234:	b590      	push	{r4, r7, lr}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  int packet_length = LoRA_parsePacket();
 800123e:	f7ff ff2b 	bl	8001098 <LoRA_parsePacket>
 8001242:	60b8      	str	r0, [r7, #8]
  if(max_length-1 < packet_length) //-1 for the null terminator
 8001244:	683a      	ldr	r2, [r7, #0]
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	429a      	cmp	r2, r3
 800124a:	dc01      	bgt.n	8001250 <recv_packet+0x1c>
  {
    return 0;
 800124c:	2300      	movs	r3, #0
 800124e:	e01c      	b.n	800128a <recv_packet+0x56>
  }
  if(packet_length){
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d018      	beq.n	8001288 <recv_packet+0x54>
    for(int i = 0; i < packet_length; i++){
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	e00a      	b.n	8001272 <recv_packet+0x3e>
      LoRA_data[i] = LoRA_Read_Register(0x00);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	18d4      	adds	r4, r2, r3
 8001262:	2000      	movs	r0, #0
 8001264:	f7ff fd54 	bl	8000d10 <LoRA_Read_Register>
 8001268:	4603      	mov	r3, r0
 800126a:	7023      	strb	r3, [r4, #0]
    for(int i = 0; i < packet_length; i++){
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	3301      	adds	r3, #1
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	429a      	cmp	r2, r3
 8001278:	dbf0      	blt.n	800125c <recv_packet+0x28>
    }
    LoRA_data[packet_length] = '\0';
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	4413      	add	r3, r2
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
    return packet_length;
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	e000      	b.n	800128a <recv_packet+0x56>
  }
  else{
    return 0;
 8001288:	2300      	movs	r3, #0
  }
}
 800128a:	4618      	mov	r0, r3
 800128c:	3714      	adds	r7, #20
 800128e:	46bd      	mov	sp, r7
 8001290:	bd90      	pop	{r4, r7, pc}

08001292 <reliable_send_packet>:

void reliable_send_packet(char* LoRA_data)
{
 8001292:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001296:	b087      	sub	sp, #28
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	466b      	mov	r3, sp
 800129e:	461e      	mov	r6, r3
  uint16_t length = strlen(LoRA_data)+1; //+1 for the \0
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff f83f 	bl	8000324 <strlen>
 80012a6:	4603      	mov	r3, r0
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	3301      	adds	r3, #1
 80012ac:	82fb      	strh	r3, [r7, #22]
  char acknowledge[length]; 
 80012ae:	8af9      	ldrh	r1, [r7, #22]
 80012b0:	460b      	mov	r3, r1
 80012b2:	3b01      	subs	r3, #1
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	b28b      	uxth	r3, r1
 80012b8:	2200      	movs	r2, #0
 80012ba:	4698      	mov	r8, r3
 80012bc:	4691      	mov	r9, r2
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	f04f 0300 	mov.w	r3, #0
 80012c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80012ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80012ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80012d2:	b28b      	uxth	r3, r1
 80012d4:	2200      	movs	r2, #0
 80012d6:	461c      	mov	r4, r3
 80012d8:	4615      	mov	r5, r2
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	f04f 0300 	mov.w	r3, #0
 80012e2:	00eb      	lsls	r3, r5, #3
 80012e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012e8:	00e2      	lsls	r2, r4, #3
 80012ea:	460b      	mov	r3, r1
 80012ec:	3307      	adds	r3, #7
 80012ee:	08db      	lsrs	r3, r3, #3
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	ebad 0d03 	sub.w	sp, sp, r3
 80012f6:	466b      	mov	r3, sp
 80012f8:	3300      	adds	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]
  LoRA_sendPacket(LoRA_data);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff ff0a 	bl	8001116 <LoRA_sendPacket>
  while(1)
  {
    
    if(recv_packet(acknowledge, length))
 8001302:	8afb      	ldrh	r3, [r7, #22]
 8001304:	4619      	mov	r1, r3
 8001306:	68f8      	ldr	r0, [r7, #12]
 8001308:	f7ff ff94 	bl	8001234 <recv_packet>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0f7      	beq.n	8001302 <reliable_send_packet+0x70>
    {
      //cehck crc
      if(strcmp(acknowledge, LoRA_data) != 0)
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	68f8      	ldr	r0, [r7, #12]
 8001316:	f7fe fffb 	bl	8000310 <strcmp>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <reliable_send_packet+0x96>
      {
        LoRA_sendPacket(LoRA_data);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff fef8 	bl	8001116 <LoRA_sendPacket>
    if(recv_packet(acknowledge, length))
 8001326:	e7ec      	b.n	8001302 <reliable_send_packet+0x70>
      }
      else
      {
        break;
 8001328:	bf00      	nop
 800132a:	46b5      	mov	sp, r6
      }
    }

    //delay
  }
}
 800132c:	bf00      	nop
 800132e:	371c      	adds	r7, #28
 8001330:	46bd      	mov	sp, r7
 8001332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08001338 <usbReceiveHandle>:

		reliable_send_packet(message);
	}
}

int usbReceiveHandle(char* output){
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	uint32_t temp = usbBytesReady;
 8001340:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <usbReceiveHandle+0x40>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	60fb      	str	r3, [r7, #12]
	if(usbBytesReady > 0){
 8001346:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <usbReceiveHandle+0x40>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00f      	beq.n	800136e <usbReceiveHandle+0x36>
		if(usbBytesReady > 256){
			//crash(2);
		}
		memcpy(output, usbDataBuffer, usbBytesReady);
 800134e:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <usbReceiveHandle+0x40>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	461a      	mov	r2, r3
 8001354:	4909      	ldr	r1, [pc, #36]	; (800137c <usbReceiveHandle+0x44>)
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f015 fcf0 	bl	8016d3c <memcpy>
		output[usbBytesReady] = '\0';
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <usbReceiveHandle+0x40>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	4413      	add	r3, r2
 8001364:	2200      	movs	r2, #0
 8001366:	701a      	strb	r2, [r3, #0]
		usbBytesReady = 0;
 8001368:	4b03      	ldr	r3, [pc, #12]	; (8001378 <usbReceiveHandle+0x40>)
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
	}
	return temp;
 800136e:	68fb      	ldr	r3, [r7, #12]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	24000280 	.word	0x24000280
 800137c:	24000180 	.word	0x24000180

08001380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001380:	b5b0      	push	{r4, r5, r7, lr}
 8001382:	f5ad 6dd1 	sub.w	sp, sp, #1672	; 0x688
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 8001388:	4be1      	ldr	r3, [pc, #900]	; (8001710 <main+0x390>)
 800138a:	f507 64c2 	add.w	r4, r7, #1552	; 0x610
 800138e:	461d      	mov	r5, r3
 8001390:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001392:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001394:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001398:	c403      	stmia	r4!, {r0, r1}
 800139a:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800139c:	f002 f988 	bl	80036b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a0:	f000 fa58 	bl	8001854 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80013a4:	f000 fad2 	bl	800194c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a8:	f001 f836 	bl	8002418 <MX_GPIO_Init>
  MX_DMA_Init();
 80013ac:	f000 ffd4 	bl	8002358 <MX_DMA_Init>
  MX_SPI3_Init();
 80013b0:	f000 fd52 	bl	8001e58 <MX_SPI3_Init>
  MX_FDCAN3_Init();
 80013b4:	f000 fbe2 	bl	8001b7c <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 80013b8:	f000 ff82 	bl	80022c0 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80013bc:	f000 faf8 	bl	80019b0 <MX_ADC1_Init>
  MX_TIM4_Init();
 80013c0:	f000 fe5c 	bl	800207c <MX_TIM4_Init>
  MX_ADC3_Init();
 80013c4:	f000 fb6c 	bl	8001aa0 <MX_ADC3_Init>
  MX_SPI2_Init();
 80013c8:	f000 fcf0 	bl	8001dac <MX_SPI2_Init>
  MX_I2C2_Init();
 80013cc:	f000 fc3a 	bl	8001c44 <MX_I2C2_Init>
  MX_TIM2_Init();
 80013d0:	f000 fd98 	bl	8001f04 <MX_TIM2_Init>
  MX_TIM5_Init();
 80013d4:	f000 fece 	bl	8002174 <MX_TIM5_Init>
  MX_TIM3_Init();
 80013d8:	f000 fdec 	bl	8001fb4 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80013dc:	f014 ff5a 	bl	8016294 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80013e0:	f000 fc8e 	bl	8001d00 <MX_SPI1_Init>
  MX_UART4_Init();
 80013e4:	f000 ff20 	bl	8002228 <MX_UART4_Init>
  MX_FATFS_Init();
 80013e8:	f012 fce8 	bl	8013dbc <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 80013ec:	f000 fc6a 	bl	8001cc4 <MX_SDMMC2_SD_Init>
  /* USER CODE BEGIN 2 */

	const int MAX = 50;
 80013f0:	2332      	movs	r3, #50	; 0x32
 80013f2:	f8c7 366c 	str.w	r3, [r7, #1644]	; 0x66c
	const double SPEED = 2.0/2000;
 80013f6:	a3c4      	add	r3, pc, #784	; (adr r3, 8001708 <main+0x388>)
 80013f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fc:	f507 61cc 	add.w	r1, r7, #1632	; 0x660
 8001400:	e9c1 2300 	strd	r2, r3, [r1]
	const double r_offset = 0;
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	f04f 0300 	mov.w	r3, #0
 800140c:	f507 61cb 	add.w	r1, r7, #1624	; 0x658
 8001410:	e9c1 2300 	strd	r2, r3, [r1]
	const double g_offset = 1;
 8001414:	f04f 0200 	mov.w	r2, #0
 8001418:	4bbe      	ldr	r3, [pc, #760]	; (8001714 <main+0x394>)
 800141a:	f507 61ca 	add.w	r1, r7, #1616	; 0x650
 800141e:	e9c1 2300 	strd	r2, r3, [r1]
	const double b_offset = 2;
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800142a:	f507 61c9 	add.w	r1, r7, #1608	; 0x648
 800142e:	e9c1 2300 	strd	r2, r3, [r1]

	LG2_Write_Register(0x10, 0b00111100); //Accelerometer setup - CTRL1_XL
 8001432:	213c      	movs	r1, #60	; 0x3c
 8001434:	2010      	movs	r0, #16
 8001436:	f7ff f9a9 	bl	800078c <LG2_Write_Register>
	LG2_Write_Register(0x11, 0b00110000); //Gyroscope setup - CTRL2_G
 800143a:	2130      	movs	r1, #48	; 0x30
 800143c:	2011      	movs	r0, #17
 800143e:	f7ff f9a5 	bl	800078c <LG2_Write_Register>
	LG2_Write_Register(0x13, 0b00000100); //disables I2C - CTRL4_C
 8001442:	2104      	movs	r1, #4
 8001444:	2013      	movs	r0, #19
 8001446:	f7ff f9a1 	bl	800078c <LG2_Write_Register>

	HAL_Delay(3000);
 800144a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800144e:	f002 f9c1 	bl	80037d4 <HAL_Delay>
	HG2_Write_Register(0x1C, 0b10111111);
 8001452:	21bf      	movs	r1, #191	; 0xbf
 8001454:	201c      	movs	r0, #28
 8001456:	f7ff f945 	bl	80006e4 <HG2_Write_Register>
	HAL_Delay(2);
 800145a:	2002      	movs	r0, #2
 800145c:	f002 f9ba 	bl	80037d4 <HAL_Delay>

	HG2_Write_Register(0x1B, 0b01011000);
 8001460:	2158      	movs	r1, #88	; 0x58
 8001462:	201b      	movs	r0, #27
 8001464:	f7ff f93e 	bl	80006e4 <HG2_Write_Register>
	HG2_Write_Register(0x1B, 0b11011000);
 8001468:	21d8      	movs	r1, #216	; 0xd8
 800146a:	201b      	movs	r0, #27
 800146c:	f7ff f93a 	bl	80006e4 <HG2_Write_Register>

	float rotZ = 0;
 8001470:	f04f 0300 	mov.w	r3, #0
 8001474:	f207 6244 	addw	r2, r7, #1604	; 0x644
 8001478:	6013      	str	r3, [r2, #0]
	uint32_t lastTime = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	f8c7 3684 	str.w	r3, [r7, #1668]	; 0x684

	float calOmegaX = 0;
 8001480:	f04f 0300 	mov.w	r3, #0
 8001484:	f507 62d0 	add.w	r2, r7, #1664	; 0x680
 8001488:	6013      	str	r3, [r2, #0]
	float calOmegaY = 0;
 800148a:	f04f 0300 	mov.w	r3, #0
 800148e:	f207 627c 	addw	r2, r7, #1660	; 0x67c
 8001492:	6013      	str	r3, [r2, #0]
	float calOmegaZ = 0;
 8001494:	f04f 0300 	mov.w	r3, #0
 8001498:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 800149c:	6013      	str	r3, [r2, #0]
	//HAL_Delay(2000);
	for(int i = 0; i < 500; i++){
 800149e:	2300      	movs	r3, #0
 80014a0:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
 80014a4:	e02e      	b.n	8001504 <main+0x184>
		calOmegaX += LG2_Get_Gyro_X();
 80014a6:	f7ff f999 	bl	80007dc <LG2_Get_Gyro_X>
 80014aa:	eeb0 7a40 	vmov.f32	s14, s0
 80014ae:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 80014b2:	edd3 7a00 	vldr	s15, [r3]
 80014b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014ba:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 80014be:	edc3 7a00 	vstr	s15, [r3]
		calOmegaY += LG2_Get_Gyro_Y();
 80014c2:	f7ff f9bb 	bl	800083c <LG2_Get_Gyro_Y>
 80014c6:	eeb0 7a40 	vmov.f32	s14, s0
 80014ca:	f207 637c 	addw	r3, r7, #1660	; 0x67c
 80014ce:	edd3 7a00 	vldr	s15, [r3]
 80014d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014d6:	f207 637c 	addw	r3, r7, #1660	; 0x67c
 80014da:	edc3 7a00 	vstr	s15, [r3]
		calOmegaZ += LG2_Get_Gyro_Z();
 80014de:	f7ff f9df 	bl	80008a0 <LG2_Get_Gyro_Z>
 80014e2:	eeb0 7a40 	vmov.f32	s14, s0
 80014e6:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80014ea:	edd3 7a00 	vldr	s15, [r3]
 80014ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014f2:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80014f6:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < 500; i++){
 80014fa:	f8d7 3674 	ldr.w	r3, [r7, #1652]	; 0x674
 80014fe:	3301      	adds	r3, #1
 8001500:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
 8001504:	f8d7 3674 	ldr.w	r3, [r7, #1652]	; 0x674
 8001508:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800150c:	dbcb      	blt.n	80014a6 <main+0x126>

		//HAL_Delay(20);
	}
	calOmegaX /= 500;
 800150e:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 8001512:	ed93 7a00 	vldr	s14, [r3]
 8001516:	eddf 6a80 	vldr	s13, [pc, #512]	; 8001718 <main+0x398>
 800151a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800151e:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 8001522:	edc3 7a00 	vstr	s15, [r3]
	calOmegaY /= 500;
 8001526:	f207 637c 	addw	r3, r7, #1660	; 0x67c
 800152a:	ed93 7a00 	vldr	s14, [r3]
 800152e:	eddf 6a7a 	vldr	s13, [pc, #488]	; 8001718 <main+0x398>
 8001532:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001536:	f207 637c 	addw	r3, r7, #1660	; 0x67c
 800153a:	edc3 7a00 	vstr	s15, [r3]
	calOmegaZ /= 500;
 800153e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8001542:	ed93 7a00 	vldr	s14, [r3]
 8001546:	eddf 6a74 	vldr	s13, [pc, #464]	; 8001718 <main+0x398>
 800154a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800154e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8001552:	edc3 7a00 	vstr	s15, [r3]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001556:	2201      	movs	r2, #1
 8001558:	2101      	movs	r1, #1
 800155a:	4870      	ldr	r0, [pc, #448]	; (800171c <main+0x39c>)
 800155c:	f006 fbee 	bl	8007d3c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001560:	20c8      	movs	r0, #200	; 0xc8
 8001562:	f002 f937 	bl	80037d4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);
 8001566:	2200      	movs	r2, #0
 8001568:	2101      	movs	r1, #1
 800156a:	486c      	ldr	r0, [pc, #432]	; (800171c <main+0x39c>)
 800156c:	f006 fbe6 	bl	8007d3c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001570:	20c8      	movs	r0, #200	; 0xc8
 8001572:	f002 f92f 	bl	80037d4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001576:	2201      	movs	r2, #1
 8001578:	2101      	movs	r1, #1
 800157a:	4868      	ldr	r0, [pc, #416]	; (800171c <main+0x39c>)
 800157c:	f006 fbde 	bl	8007d3c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001580:	20c8      	movs	r0, #200	; 0xc8
 8001582:	f002 f927 	bl	80037d4 <HAL_Delay>


	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 8001586:	2201      	movs	r2, #1
 8001588:	2104      	movs	r1, #4
 800158a:	4865      	ldr	r0, [pc, #404]	; (8001720 <main+0x3a0>)
 800158c:	f006 fbd6 	bl	8007d3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 8001590:	2201      	movs	r2, #1
 8001592:	2108      	movs	r1, #8
 8001594:	4862      	ldr	r0, [pc, #392]	; (8001720 <main+0x3a0>)
 8001596:	f006 fbd1 	bl	8007d3c <HAL_GPIO_WritePin>


    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800159a:	2100      	movs	r1, #0
 800159c:	4861      	ldr	r0, [pc, #388]	; (8001724 <main+0x3a4>)
 800159e:	f00d fe1b 	bl	800f1d8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80015a2:	2104      	movs	r1, #4
 80015a4:	485f      	ldr	r0, [pc, #380]	; (8001724 <main+0x3a4>)
 80015a6:	f00d fe17 	bl	800f1d8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80015aa:	2108      	movs	r1, #8
 80015ac:	485d      	ldr	r0, [pc, #372]	; (8001724 <main+0x3a4>)
 80015ae:	f00d fe13 	bl	800f1d8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80015b2:	210c      	movs	r1, #12
 80015b4:	485b      	ldr	r0, [pc, #364]	; (8001724 <main+0x3a4>)
 80015b6:	f00d fe0f 	bl	800f1d8 <HAL_TIM_PWM_Start>

    setServo(1, 90);
 80015ba:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 8001728 <main+0x3a8>
 80015be:	2001      	movs	r0, #1
 80015c0:	f7ff f9a6 	bl	8000910 <setServo>
    setServo(2, 180);
 80015c4:	ed9f 0a59 	vldr	s0, [pc, #356]	; 800172c <main+0x3ac>
 80015c8:	2002      	movs	r0, #2
 80015ca:	f7ff f9a1 	bl	8000910 <setServo>
    setServo(3, 0);
 80015ce:	ed9f 0a58 	vldr	s0, [pc, #352]	; 8001730 <main+0x3b0>
 80015d2:	2003      	movs	r0, #3
 80015d4:	f7ff f99c 	bl	8000910 <setServo>
    setServo(4, 45);
 80015d8:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8001734 <main+0x3b4>
 80015dc:	2004      	movs	r0, #4
 80015de:	f7ff f997 	bl	8000910 <setServo>

    LoRA_begin(868000000);
 80015e2:	4855      	ldr	r0, [pc, #340]	; (8001738 <main+0x3b8>)
 80015e4:	f7ff fcae 	bl	8000f44 <LoRA_begin>
//    		}
//    	}
//    	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);


	int connected = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	f8c7 3640 	str.w	r3, [r7, #1600]	; 0x640
	long last_packet = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
	int ARMED = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	f8c7 3638 	str.w	r3, [r7, #1592]	; 0x638

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//HAL_ADC_Start_DMA(&hadc3, &read_Data, 1);

  int stream_counter = 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634
  char state[50] = "";
 8001600:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 8001604:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	3304      	adds	r3, #4
 800160e:	222e      	movs	r2, #46	; 0x2e
 8001610:	2100      	movs	r1, #0
 8001612:	4618      	mov	r0, r3
 8001614:	f015 fba0 	bl	8016d58 <memset>
  char acknowledge[50];
  char previous_packet[50];
  char recieved_packet[50];
  char response_packet[50];
  char sendMessage[50];
  int last = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	f8c7 3630 	str.w	r3, [r7, #1584]	; 0x630
  int packetId;
  char communication_state[50] = "MASTER";
 800161e:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 8001622:	f2a3 427c 	subw	r2, r3, #1148	; 0x47c
 8001626:	4945      	ldr	r1, [pc, #276]	; (800173c <main+0x3bc>)
 8001628:	4613      	mov	r3, r2
 800162a:	c903      	ldmia	r1, {r0, r1}
 800162c:	6018      	str	r0, [r3, #0]
 800162e:	3304      	adds	r3, #4
 8001630:	8019      	strh	r1, [r3, #0]
 8001632:	3302      	adds	r3, #2
 8001634:	0c09      	lsrs	r1, r1, #16
 8001636:	7019      	strb	r1, [r3, #0]
 8001638:	1dd3      	adds	r3, r2, #7
 800163a:	222b      	movs	r2, #43	; 0x2b
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f015 fb8a 	bl	8016d58 <memset>
  uint32_t previousTime = HAL_GetTick();
 8001644:	f002 f8ba 	bl	80037bc <HAL_GetTick>
 8001648:	f8c7 0670 	str.w	r0, [r7, #1648]	; 0x670
  disarm(state);
 800164c:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fd8b 	bl	800116c <disarm>


while (1) {
    if(strcmp(communication_state,"RECIEVING") == 0)
 8001656:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 800165a:	4939      	ldr	r1, [pc, #228]	; (8001740 <main+0x3c0>)
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe fe57 	bl	8000310 <strcmp>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	f040 8082 	bne.w	800176e <main+0x3ee>
    {
      if(recv_packet(recieved_packet, 50))
 800166a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800166e:	2132      	movs	r1, #50	; 0x32
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff fddf 	bl	8001234 <recv_packet>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d067      	beq.n	800174c <main+0x3cc>
      {
        previousTime = HAL_GetTick();
 800167c:	f002 f89e 	bl	80037bc <HAL_GetTick>
 8001680:	f8c7 0670 	str.w	r0, [r7, #1648]	; 0x670
        if(sscanf(recieved_packet, "$ %s", state) == 1)
 8001684:	f507 725e 	add.w	r2, r7, #888	; 0x378
 8001688:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800168c:	492d      	ldr	r1, [pc, #180]	; (8001744 <main+0x3c4>)
 800168e:	4618      	mov	r0, r3
 8001690:	f015 fb8a 	bl	8016da8 <siscanf>
 8001694:	4603      	mov	r3, r0
 8001696:	2b01      	cmp	r3, #1
 8001698:	d10b      	bne.n	80016b2 <main+0x332>
        {
          strcpy(communication_state,"MASTER");
 800169a:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 800169e:	4a2a      	ldr	r2, [pc, #168]	; (8001748 <main+0x3c8>)
 80016a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016a4:	6018      	str	r0, [r3, #0]
 80016a6:	3304      	adds	r3, #4
 80016a8:	8019      	strh	r1, [r3, #0]
 80016aa:	3302      	adds	r3, #2
 80016ac:	0c0a      	lsrs	r2, r1, #16
 80016ae:	701a      	strb	r2, [r3, #0]
 80016b0:	e0ab      	b.n	800180a <main+0x48a>
        }
        else if(strcmp(recieved_packet, previous_packet))
 80016b2:	f507 7237 	add.w	r2, r7, #732	; 0x2dc
 80016b6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80016ba:	4611      	mov	r1, r2
 80016bc:	4618      	mov	r0, r3
 80016be:	f7fe fe27 	bl	8000310 <strcmp>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d005      	beq.n	80016d4 <main+0x354>
        {
          //send acknowledge again
          LoRA_sendPacket(recieved_packet);
 80016c8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff fd22 	bl	8001116 <LoRA_sendPacket>
 80016d2:	e09a      	b.n	800180a <main+0x48a>
        }
        else
        {
          strcpy(previous_packet, recieved_packet);
 80016d4:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80016d8:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80016dc:	4611      	mov	r1, r2
 80016de:	4618      	mov	r0, r3
 80016e0:	f015 fb90 	bl	8016e04 <strcpy>
          LoRA_sendPacket(recieved_packet);
 80016e4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fd14 	bl	8001116 <LoRA_sendPacket>
          CDC_Transmit_HS(recieved_packet, strlen(recieved_packet));
 80016ee:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7fe fe16 	bl	8000324 <strlen>
 80016f8:	4602      	mov	r2, r0
 80016fa:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80016fe:	4611      	mov	r1, r2
 8001700:	4618      	mov	r0, r3
 8001702:	f014 fe9d 	bl	8016440 <CDC_Transmit_HS>
 8001706:	e080      	b.n	800180a <main+0x48a>
 8001708:	d2f1a9fc 	.word	0xd2f1a9fc
 800170c:	3f50624d 	.word	0x3f50624d
 8001710:	08018060 	.word	0x08018060
 8001714:	3ff00000 	.word	0x3ff00000
 8001718:	43fa0000 	.word	0x43fa0000
 800171c:	58020c00 	.word	0x58020c00
 8001720:	58021800 	.word	0x58021800
 8001724:	2400117c 	.word	0x2400117c
 8001728:	42b40000 	.word	0x42b40000
 800172c:	43340000 	.word	0x43340000
 8001730:	00000000 	.word	0x00000000
 8001734:	42340000 	.word	0x42340000
 8001738:	33bca100 	.word	0x33bca100
 800173c:	0801807c 	.word	0x0801807c
 8001740:	08018018 	.word	0x08018018
 8001744:	08018024 	.word	0x08018024
 8001748:	0801802c 	.word	0x0801802c
        }
      }
      else if(HAL_GetTick()-previousTime > 1000)
 800174c:	f002 f836 	bl	80037bc <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800175c:	d955      	bls.n	800180a <main+0x48a>
      {
        previousTime = HAL_GetTick();
 800175e:	f002 f82d 	bl	80037bc <HAL_GetTick>
 8001762:	f8c7 0670 	str.w	r0, [r7, #1648]	; 0x670
        //give up SENDING
        LoRA_sendPacket("$");
 8001766:	4834      	ldr	r0, [pc, #208]	; (8001838 <main+0x4b8>)
 8001768:	f7ff fcd5 	bl	8001116 <LoRA_sendPacket>
 800176c:	e04d      	b.n	800180a <main+0x48a>
      }
    }
    else if(strcmp(communication_state,"MASTER") == 0)
 800176e:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001772:	4932      	ldr	r1, [pc, #200]	; (800183c <main+0x4bc>)
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe fdcb 	bl	8000310 <strcmp>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d144      	bne.n	800180a <main+0x48a>
    {
    	//get input
    	char input[usbBufferLen];
    	usbReceiveHandle(input);
 8001780:	463b      	mov	r3, r7
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fdd8 	bl	8001338 <usbReceiveHandle>


    	if(strcmp(state, "STATIC_FIRE_LOGGING") == 0)
 8001788:	f507 735e 	add.w	r3, r7, #888	; 0x378
 800178c:	492c      	ldr	r1, [pc, #176]	; (8001840 <main+0x4c0>)
 800178e:	4618      	mov	r0, r3
 8001790:	f7fe fdbe 	bl	8000310 <strcmp>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d10f      	bne.n	80017ba <main+0x43a>
      {

        if(!usbReceiveHandle(input))
 800179a:	463b      	mov	r3, r7
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff fdcb 	bl	8001338 <usbReceiveHandle>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d103      	bne.n	80017b0 <main+0x430>
        {
          reliable_send_packet("DATA");
 80017a8:	4826      	ldr	r0, [pc, #152]	; (8001844 <main+0x4c4>)
 80017aa:	f7ff fd72 	bl	8001292 <reliable_send_packet>
 80017ae:	e023      	b.n	80017f8 <main+0x478>
        }
        else
        {
          reliable_send_packet(input);
 80017b0:	463b      	mov	r3, r7
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fd6d 	bl	8001292 <reliable_send_packet>
 80017b8:	e01e      	b.n	80017f8 <main+0x478>
        }
      }
      else {

    	  while(!usbReceiveHandle(input))
 80017ba:	bf00      	nop
 80017bc:	463b      	mov	r3, r7
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff fdba 	bl	8001338 <usbReceiveHandle>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0f8      	beq.n	80017bc <main+0x43c>
    	  {}

        reliable_send_packet(input);
 80017ca:	463b      	mov	r3, r7
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff fd60 	bl	8001292 <reliable_send_packet>

	  	  char debug[usbBufferLen+10];
	  	  sprintf(debug, "Debug: %s", input);
 80017d2:	463a      	mov	r2, r7
 80017d4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80017d8:	491b      	ldr	r1, [pc, #108]	; (8001848 <main+0x4c8>)
 80017da:	4618      	mov	r0, r3
 80017dc:	f015 fac4 	bl	8016d68 <siprintf>
	  	  CDC_Transmit_HS(debug, strlen(debug));
 80017e0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7fe fd9d 	bl	8000324 <strlen>
 80017ea:	4602      	mov	r2, r0
 80017ec:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80017f0:	4611      	mov	r1, r2
 80017f2:	4618      	mov	r0, r3
 80017f4:	f014 fe24 	bl	8016440 <CDC_Transmit_HS>
      }

      strcpy(communication_state,"RECIEVING");
 80017f8:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80017fc:	4a13      	ldr	r2, [pc, #76]	; (800184c <main+0x4cc>)
 80017fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001800:	c303      	stmia	r3!, {r0, r1}
 8001802:	801a      	strh	r2, [r3, #0]
      LoRA_sendPacket("$");
 8001804:	480c      	ldr	r0, [pc, #48]	; (8001838 <main+0x4b8>)
 8001806:	f7ff fc86 	bl	8001116 <LoRA_sendPacket>
//			LED_Color_Data[i][0] = (uint32_t)MAX*triangle_space(color_offset+r_offset);
//			LED_Color_Data[i][1] = (uint32_t)MAX*triangle_space(color_offset+g_offset);
//			LED_Color_Data[i][2] = (uint32_t)MAX*triangle_space(color_offset+b_offset);
//		}

		float timeElapsed = ((float)(HAL_GetTick() - lastTime)) / 1000;
 800180a:	f001 ffd7 	bl	80037bc <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	f8d7 3684 	ldr.w	r3, [r7, #1668]	; 0x684
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	ee07 3a90 	vmov	s15, r3
 800181a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800181e:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001850 <main+0x4d0>
 8001822:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001826:	f207 632c 	addw	r3, r7, #1580	; 0x62c
 800182a:	edc3 7a00 	vstr	s15, [r3]

		//float GyroX = LG2_Get_Gyro_X() - calOmegaX;
		//float GyroY = LG2_Get_Gyro_Y() - calOmegaY;
		//float GyroZ = LG2_Get_Gyro_Z() - calOmegaZ;

		lastTime = HAL_GetTick();
 800182e:	f001 ffc5 	bl	80037bc <HAL_GetTick>
 8001832:	f8c7 0684 	str.w	r0, [r7, #1668]	; 0x684
while (1) {
 8001836:	e70e      	b.n	8001656 <main+0x2d6>
 8001838:	08018034 	.word	0x08018034
 800183c:	0801802c 	.word	0x0801802c
 8001840:	08018038 	.word	0x08018038
 8001844:	0801804c 	.word	0x0801804c
 8001848:	08018054 	.word	0x08018054
 800184c:	08018018 	.word	0x08018018
 8001850:	447a0000 	.word	0x447a0000

08001854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b09c      	sub	sp, #112	; 0x70
 8001858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800185a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800185e:	224c      	movs	r2, #76	; 0x4c
 8001860:	2100      	movs	r1, #0
 8001862:	4618      	mov	r0, r3
 8001864:	f015 fa78 	bl	8016d58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	2220      	movs	r2, #32
 800186c:	2100      	movs	r1, #0
 800186e:	4618      	mov	r0, r3
 8001870:	f015 fa72 	bl	8016d58 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001874:	2002      	movs	r0, #2
 8001876:	f007 fe5b 	bl	8009530 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800187a:	2300      	movs	r3, #0
 800187c:	603b      	str	r3, [r7, #0]
 800187e:	4b32      	ldr	r3, [pc, #200]	; (8001948 <SystemClock_Config+0xf4>)
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001886:	4a30      	ldr	r2, [pc, #192]	; (8001948 <SystemClock_Config+0xf4>)
 8001888:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800188c:	6193      	str	r3, [r2, #24]
 800188e:	4b2e      	ldr	r3, [pc, #184]	; (8001948 <SystemClock_Config+0xf4>)
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001896:	603b      	str	r3, [r7, #0]
 8001898:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800189a:	bf00      	nop
 800189c:	4b2a      	ldr	r3, [pc, #168]	; (8001948 <SystemClock_Config+0xf4>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018a8:	d1f8      	bne.n	800189c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80018aa:	2323      	movs	r3, #35	; 0x23
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80018b4:	2301      	movs	r3, #1
 80018b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80018b8:	2340      	movs	r3, #64	; 0x40
 80018ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80018bc:	2301      	movs	r3, #1
 80018be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018c0:	2302      	movs	r3, #2
 80018c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018c4:	2300      	movs	r3, #0
 80018c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018c8:	2304      	movs	r3, #4
 80018ca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80018cc:	230c      	movs	r3, #12
 80018ce:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80018d0:	2301      	movs	r3, #1
 80018d2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 80018d4:	230c      	movs	r3, #12
 80018d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80018d8:	2302      	movs	r3, #2
 80018da:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80018dc:	230c      	movs	r3, #12
 80018de:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80018e0:	2300      	movs	r3, #0
 80018e2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ec:	4618      	mov	r0, r3
 80018ee:	f007 fe69 	bl	80095c4 <HAL_RCC_OscConfig>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80018f8:	f000 ff02 	bl	8002700 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018fc:	233f      	movs	r3, #63	; 0x3f
 80018fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001900:	2303      	movs	r3, #3
 8001902:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001904:	2300      	movs	r3, #0
 8001906:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001908:	2308      	movs	r3, #8
 800190a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800190c:	2340      	movs	r3, #64	; 0x40
 800190e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001910:	2340      	movs	r3, #64	; 0x40
 8001912:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001918:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800191a:	2340      	movs	r3, #64	; 0x40
 800191c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800191e:	1d3b      	adds	r3, r7, #4
 8001920:	2101      	movs	r1, #1
 8001922:	4618      	mov	r0, r3
 8001924:	f008 fa28 	bl	8009d78 <HAL_RCC_ClockConfig>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <SystemClock_Config+0xde>
  {
    Error_Handler();
 800192e:	f000 fee7 	bl	8002700 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001932:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001936:	2100      	movs	r1, #0
 8001938:	2000      	movs	r0, #0
 800193a:	f008 fbd3 	bl	800a0e4 <HAL_RCC_MCOConfig>
}
 800193e:	bf00      	nop
 8001940:	3770      	adds	r7, #112	; 0x70
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	58024800 	.word	0x58024800

0800194c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b0ae      	sub	sp, #184	; 0xb8
 8001950:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001952:	463b      	mov	r3, r7
 8001954:	22b8      	movs	r2, #184	; 0xb8
 8001956:	2100      	movs	r1, #0
 8001958:	4618      	mov	r0, r3
 800195a:	f015 f9fd 	bl	8016d58 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 800195e:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8001962:	f04f 0300 	mov.w	r3, #0
 8001966:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800196a:	2304      	movs	r3, #4
 800196c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 800196e:	230c      	movs	r3, #12
 8001970:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001972:	2304      	movs	r3, #4
 8001974:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001976:	2302      	movs	r3, #2
 8001978:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800197a:	2302      	movs	r3, #2
 800197c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800197e:	23c0      	movs	r3, #192	; 0xc0
 8001980:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001982:	2300      	movs	r3, #0
 8001984:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800198a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800198e:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001990:	2300      	movs	r3, #0
 8001992:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001996:	463b      	mov	r3, r7
 8001998:	4618      	mov	r0, r3
 800199a:	f008 fde3 	bl	800a564 <HAL_RCCEx_PeriphCLKConfig>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 80019a4:	f000 feac 	bl	8002700 <Error_Handler>
  }
}
 80019a8:	bf00      	nop
 80019aa:	37b8      	adds	r7, #184	; 0xb8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08c      	sub	sp, #48	; 0x30
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80019b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]
 80019c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80019c2:	463b      	mov	r3, r7
 80019c4:	2224      	movs	r2, #36	; 0x24
 80019c6:	2100      	movs	r1, #0
 80019c8:	4618      	mov	r0, r3
 80019ca:	f015 f9c5 	bl	8016d58 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80019ce:	4b31      	ldr	r3, [pc, #196]	; (8001a94 <MX_ADC1_Init+0xe4>)
 80019d0:	4a31      	ldr	r2, [pc, #196]	; (8001a98 <MX_ADC1_Init+0xe8>)
 80019d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80019d4:	4b2f      	ldr	r3, [pc, #188]	; (8001a94 <MX_ADC1_Init+0xe4>)
 80019d6:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 80019da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80019dc:	4b2d      	ldr	r3, [pc, #180]	; (8001a94 <MX_ADC1_Init+0xe4>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80019e2:	4b2c      	ldr	r3, [pc, #176]	; (8001a94 <MX_ADC1_Init+0xe4>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019e8:	4b2a      	ldr	r3, [pc, #168]	; (8001a94 <MX_ADC1_Init+0xe4>)
 80019ea:	2204      	movs	r2, #4
 80019ec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80019ee:	4b29      	ldr	r3, [pc, #164]	; (8001a94 <MX_ADC1_Init+0xe4>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019f4:	4b27      	ldr	r3, [pc, #156]	; (8001a94 <MX_ADC1_Init+0xe4>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80019fa:	4b26      	ldr	r3, [pc, #152]	; (8001a94 <MX_ADC1_Init+0xe4>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a00:	4b24      	ldr	r3, [pc, #144]	; (8001a94 <MX_ADC1_Init+0xe4>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a08:	4b22      	ldr	r3, [pc, #136]	; (8001a94 <MX_ADC1_Init+0xe4>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a0e:	4b21      	ldr	r3, [pc, #132]	; (8001a94 <MX_ADC1_Init+0xe4>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001a14:	4b1f      	ldr	r3, [pc, #124]	; (8001a94 <MX_ADC1_Init+0xe4>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a1a:	4b1e      	ldr	r3, [pc, #120]	; (8001a94 <MX_ADC1_Init+0xe4>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001a20:	4b1c      	ldr	r3, [pc, #112]	; (8001a94 <MX_ADC1_Init+0xe4>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001a26:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <MX_ADC1_Init+0xe4>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a2e:	4819      	ldr	r0, [pc, #100]	; (8001a94 <MX_ADC1_Init+0xe4>)
 8001a30:	f002 f950 	bl	8003cd4 <HAL_ADC_Init>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001a3a:	f000 fe61 	bl	8002700 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001a42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a46:	4619      	mov	r1, r3
 8001a48:	4812      	ldr	r0, [pc, #72]	; (8001a94 <MX_ADC1_Init+0xe4>)
 8001a4a:	f003 f98b 	bl	8004d64 <HAL_ADCEx_MultiModeConfigChannel>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001a54:	f000 fe54 	bl	8002700 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001a58:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <MX_ADC1_Init+0xec>)
 8001a5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a5c:	2306      	movs	r3, #6
 8001a5e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8001a60:	2303      	movs	r3, #3
 8001a62:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a64:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001a68:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a6a:	2304      	movs	r3, #4
 8001a6c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001a72:	2300      	movs	r3, #0
 8001a74:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a78:	463b      	mov	r3, r7
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4805      	ldr	r0, [pc, #20]	; (8001a94 <MX_ADC1_Init+0xe4>)
 8001a7e:	f002 fb31 	bl	80040e4 <HAL_ADC_ConfigChannel>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001a88:	f000 fe3a 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a8c:	bf00      	nop
 8001a8e:	3730      	adds	r7, #48	; 0x30
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	24000c0c 	.word	0x24000c0c
 8001a98:	40022000 	.word	0x40022000
 8001a9c:	2a000400 	.word	0x2a000400

08001aa0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08a      	sub	sp, #40	; 0x28
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001aa6:	1d3b      	adds	r3, r7, #4
 8001aa8:	2224      	movs	r2, #36	; 0x24
 8001aaa:	2100      	movs	r1, #0
 8001aac:	4618      	mov	r0, r3
 8001aae:	f015 f953 	bl	8016d58 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001ab2:	4b2f      	ldr	r3, [pc, #188]	; (8001b70 <MX_ADC3_Init+0xd0>)
 8001ab4:	4a2f      	ldr	r2, [pc, #188]	; (8001b74 <MX_ADC3_Init+0xd4>)
 8001ab6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001ab8:	4b2d      	ldr	r3, [pc, #180]	; (8001b70 <MX_ADC3_Init+0xd0>)
 8001aba:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001abe:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001ac0:	4b2b      	ldr	r3, [pc, #172]	; (8001b70 <MX_ADC3_Init+0xd0>)
 8001ac2:	2208      	movs	r2, #8
 8001ac4:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001ac6:	4b2a      	ldr	r3, [pc, #168]	; (8001b70 <MX_ADC3_Init+0xd0>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001acc:	4b28      	ldr	r3, [pc, #160]	; (8001b70 <MX_ADC3_Init+0xd0>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ad2:	4b27      	ldr	r3, [pc, #156]	; (8001b70 <MX_ADC3_Init+0xd0>)
 8001ad4:	2204      	movs	r2, #4
 8001ad6:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001ad8:	4b25      	ldr	r3, [pc, #148]	; (8001b70 <MX_ADC3_Init+0xd0>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001ade:	4b24      	ldr	r3, [pc, #144]	; (8001b70 <MX_ADC3_Init+0xd0>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001ae4:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <MX_ADC3_Init+0xd0>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001aea:	4b21      	ldr	r3, [pc, #132]	; (8001b70 <MX_ADC3_Init+0xd0>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001af2:	4b1f      	ldr	r3, [pc, #124]	; (8001b70 <MX_ADC3_Init+0xd0>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001af8:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <MX_ADC3_Init+0xd0>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001afe:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <MX_ADC3_Init+0xd0>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001b06:	4b1a      	ldr	r3, [pc, #104]	; (8001b70 <MX_ADC3_Init+0xd0>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001b0c:	4b18      	ldr	r3, [pc, #96]	; (8001b70 <MX_ADC3_Init+0xd0>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001b12:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <MX_ADC3_Init+0xd0>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001b18:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <MX_ADC3_Init+0xd0>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001b1e:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <MX_ADC3_Init+0xd0>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001b26:	4812      	ldr	r0, [pc, #72]	; (8001b70 <MX_ADC3_Init+0xd0>)
 8001b28:	f002 f8d4 	bl	8003cd4 <HAL_ADC_Init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001b32:	f000 fde5 	bl	8002700 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b36:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <MX_ADC3_Init+0xd8>)
 8001b38:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b3a:	2306      	movs	r3, #6
 8001b3c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b42:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001b46:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b48:	2304      	movs	r3, #4
 8001b4a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001b54:	1d3b      	adds	r3, r7, #4
 8001b56:	4619      	mov	r1, r3
 8001b58:	4805      	ldr	r0, [pc, #20]	; (8001b70 <MX_ADC3_Init+0xd0>)
 8001b5a:	f002 fac3 	bl	80040e4 <HAL_ADC_ConfigChannel>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8001b64:	f000 fdcc 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001b68:	bf00      	nop
 8001b6a:	3728      	adds	r7, #40	; 0x28
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	24000c7c 	.word	0x24000c7c
 8001b74:	58026000 	.word	0x58026000
 8001b78:	04300002 	.word	0x04300002

08001b7c <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001b80:	4b2e      	ldr	r3, [pc, #184]	; (8001c3c <MX_FDCAN3_Init+0xc0>)
 8001b82:	4a2f      	ldr	r2, [pc, #188]	; (8001c40 <MX_FDCAN3_Init+0xc4>)
 8001b84:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001b86:	4b2d      	ldr	r3, [pc, #180]	; (8001c3c <MX_FDCAN3_Init+0xc0>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001b8c:	4b2b      	ldr	r3, [pc, #172]	; (8001c3c <MX_FDCAN3_Init+0xc0>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8001b92:	4b2a      	ldr	r3, [pc, #168]	; (8001c3c <MX_FDCAN3_Init+0xc0>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001b98:	4b28      	ldr	r3, [pc, #160]	; (8001c3c <MX_FDCAN3_Init+0xc0>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001b9e:	4b27      	ldr	r3, [pc, #156]	; (8001c3c <MX_FDCAN3_Init+0xc0>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8001ba4:	4b25      	ldr	r3, [pc, #148]	; (8001c3c <MX_FDCAN3_Init+0xc0>)
 8001ba6:	2210      	movs	r2, #16
 8001ba8:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001baa:	4b24      	ldr	r3, [pc, #144]	; (8001c3c <MX_FDCAN3_Init+0xc0>)
 8001bac:	2201      	movs	r2, #1
 8001bae:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8001bb0:	4b22      	ldr	r3, [pc, #136]	; (8001c3c <MX_FDCAN3_Init+0xc0>)
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8001bb6:	4b21      	ldr	r3, [pc, #132]	; (8001c3c <MX_FDCAN3_Init+0xc0>)
 8001bb8:	2202      	movs	r2, #2
 8001bba:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8001bbc:	4b1f      	ldr	r3, [pc, #124]	; (8001c3c <MX_FDCAN3_Init+0xc0>)
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8001bc2:	4b1e      	ldr	r3, [pc, #120]	; (8001c3c <MX_FDCAN3_Init+0xc0>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8001bc8:	4b1c      	ldr	r3, [pc, #112]	; (8001c3c <MX_FDCAN3_Init+0xc0>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8001bce:	4b1b      	ldr	r3, [pc, #108]	; (8001c3c <MX_FDCAN3_Init+0xc0>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8001bd4:	4b19      	ldr	r3, [pc, #100]	; (8001c3c <MX_FDCAN3_Init+0xc0>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8001bda:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <MX_FDCAN3_Init+0xc0>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8001be0:	4b16      	ldr	r3, [pc, #88]	; (8001c3c <MX_FDCAN3_Init+0xc0>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8001be6:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <MX_FDCAN3_Init+0xc0>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001bec:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <MX_FDCAN3_Init+0xc0>)
 8001bee:	2204      	movs	r2, #4
 8001bf0:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8001bf2:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <MX_FDCAN3_Init+0xc0>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001bf8:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <MX_FDCAN3_Init+0xc0>)
 8001bfa:	2204      	movs	r2, #4
 8001bfc:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8001bfe:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <MX_FDCAN3_Init+0xc0>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001c04:	4b0d      	ldr	r3, [pc, #52]	; (8001c3c <MX_FDCAN3_Init+0xc0>)
 8001c06:	2204      	movs	r2, #4
 8001c08:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <MX_FDCAN3_Init+0xc0>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8001c10:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <MX_FDCAN3_Init+0xc0>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8001c16:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <MX_FDCAN3_Init+0xc0>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001c1c:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <MX_FDCAN3_Init+0xc0>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001c22:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <MX_FDCAN3_Init+0xc0>)
 8001c24:	2204      	movs	r2, #4
 8001c26:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001c28:	4804      	ldr	r0, [pc, #16]	; (8001c3c <MX_FDCAN3_Init+0xc0>)
 8001c2a:	f005 fb63 	bl	80072f4 <HAL_FDCAN_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8001c34:	f000 fd64 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	24000ddc 	.word	0x24000ddc
 8001c40:	4000d400 	.word	0x4000d400

08001c44 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c48:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <MX_I2C2_Init+0x74>)
 8001c4a:	4a1c      	ldr	r2, [pc, #112]	; (8001cbc <MX_I2C2_Init+0x78>)
 8001c4c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001c4e:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <MX_I2C2_Init+0x74>)
 8001c50:	4a1b      	ldr	r2, [pc, #108]	; (8001cc0 <MX_I2C2_Init+0x7c>)
 8001c52:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001c54:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <MX_I2C2_Init+0x74>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c5a:	4b17      	ldr	r3, [pc, #92]	; (8001cb8 <MX_I2C2_Init+0x74>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c60:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <MX_I2C2_Init+0x74>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001c66:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <MX_I2C2_Init+0x74>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c6c:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <MX_I2C2_Init+0x74>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c72:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <MX_I2C2_Init+0x74>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c78:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <MX_I2C2_Init+0x74>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c7e:	480e      	ldr	r0, [pc, #56]	; (8001cb8 <MX_I2C2_Init+0x74>)
 8001c80:	f006 f876 	bl	8007d70 <HAL_I2C_Init>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001c8a:	f000 fd39 	bl	8002700 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c8e:	2100      	movs	r1, #0
 8001c90:	4809      	ldr	r0, [pc, #36]	; (8001cb8 <MX_I2C2_Init+0x74>)
 8001c92:	f006 f8fd 	bl	8007e90 <HAL_I2CEx_ConfigAnalogFilter>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001c9c:	f000 fd30 	bl	8002700 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4805      	ldr	r0, [pc, #20]	; (8001cb8 <MX_I2C2_Init+0x74>)
 8001ca4:	f006 f93f 	bl	8007f26 <HAL_I2CEx_ConfigDigitalFilter>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001cae:	f000 fd27 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	24000e7c 	.word	0x24000e7c
 8001cbc:	40005800 	.word	0x40005800
 8001cc0:	20303e5d 	.word	0x20303e5d

08001cc4 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <MX_SDMMC2_SD_Init+0x34>)
 8001cca:	4a0c      	ldr	r2, [pc, #48]	; (8001cfc <MX_SDMMC2_SD_Init+0x38>)
 8001ccc:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001cce:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <MX_SDMMC2_SD_Init+0x34>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001cd4:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <MX_SDMMC2_SD_Init+0x34>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001cda:	4b07      	ldr	r3, [pc, #28]	; (8001cf8 <MX_SDMMC2_SD_Init+0x34>)
 8001cdc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ce0:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001ce2:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <MX_SDMMC2_SD_Init+0x34>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 8001ce8:	4b03      	ldr	r3, [pc, #12]	; (8001cf8 <MX_SDMMC2_SD_Init+0x34>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8001cee:	bf00      	nop
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	24000ed0 	.word	0x24000ed0
 8001cfc:	48022400 	.word	0x48022400

08001d00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d04:	4b27      	ldr	r3, [pc, #156]	; (8001da4 <MX_SPI1_Init+0xa4>)
 8001d06:	4a28      	ldr	r2, [pc, #160]	; (8001da8 <MX_SPI1_Init+0xa8>)
 8001d08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d0a:	4b26      	ldr	r3, [pc, #152]	; (8001da4 <MX_SPI1_Init+0xa4>)
 8001d0c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001d10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d12:	4b24      	ldr	r3, [pc, #144]	; (8001da4 <MX_SPI1_Init+0xa4>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d18:	4b22      	ldr	r3, [pc, #136]	; (8001da4 <MX_SPI1_Init+0xa4>)
 8001d1a:	2207      	movs	r2, #7
 8001d1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d1e:	4b21      	ldr	r3, [pc, #132]	; (8001da4 <MX_SPI1_Init+0xa4>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d24:	4b1f      	ldr	r3, [pc, #124]	; (8001da4 <MX_SPI1_Init+0xa4>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d2a:	4b1e      	ldr	r3, [pc, #120]	; (8001da4 <MX_SPI1_Init+0xa4>)
 8001d2c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001d32:	4b1c      	ldr	r3, [pc, #112]	; (8001da4 <MX_SPI1_Init+0xa4>)
 8001d34:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001d38:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d3a:	4b1a      	ldr	r3, [pc, #104]	; (8001da4 <MX_SPI1_Init+0xa4>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d40:	4b18      	ldr	r3, [pc, #96]	; (8001da4 <MX_SPI1_Init+0xa4>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d46:	4b17      	ldr	r3, [pc, #92]	; (8001da4 <MX_SPI1_Init+0xa4>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001d4c:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <MX_SPI1_Init+0xa4>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d52:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <MX_SPI1_Init+0xa4>)
 8001d54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d58:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001d5a:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <MX_SPI1_Init+0xa4>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001d60:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <MX_SPI1_Init+0xa4>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d66:	4b0f      	ldr	r3, [pc, #60]	; (8001da4 <MX_SPI1_Init+0xa4>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d6c:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <MX_SPI1_Init+0xa4>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001d72:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <MX_SPI1_Init+0xa4>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001d78:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <MX_SPI1_Init+0xa4>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001d7e:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <MX_SPI1_Init+0xa4>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001d84:	4b07      	ldr	r3, [pc, #28]	; (8001da4 <MX_SPI1_Init+0xa4>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001d8a:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <MX_SPI1_Init+0xa4>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d90:	4804      	ldr	r0, [pc, #16]	; (8001da4 <MX_SPI1_Init+0xa4>)
 8001d92:	f00c fc31 	bl	800e5f8 <HAL_SPI_Init>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001d9c:	f000 fcb0 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	24000f4c 	.word	0x24000f4c
 8001da8:	40013000 	.word	0x40013000

08001dac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001db0:	4b27      	ldr	r3, [pc, #156]	; (8001e50 <MX_SPI2_Init+0xa4>)
 8001db2:	4a28      	ldr	r2, [pc, #160]	; (8001e54 <MX_SPI2_Init+0xa8>)
 8001db4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001db6:	4b26      	ldr	r3, [pc, #152]	; (8001e50 <MX_SPI2_Init+0xa4>)
 8001db8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001dbc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001dbe:	4b24      	ldr	r3, [pc, #144]	; (8001e50 <MX_SPI2_Init+0xa4>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dc4:	4b22      	ldr	r3, [pc, #136]	; (8001e50 <MX_SPI2_Init+0xa4>)
 8001dc6:	2207      	movs	r2, #7
 8001dc8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dca:	4b21      	ldr	r3, [pc, #132]	; (8001e50 <MX_SPI2_Init+0xa4>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dd0:	4b1f      	ldr	r3, [pc, #124]	; (8001e50 <MX_SPI2_Init+0xa4>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001dd6:	4b1e      	ldr	r3, [pc, #120]	; (8001e50 <MX_SPI2_Init+0xa4>)
 8001dd8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ddc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001dde:	4b1c      	ldr	r3, [pc, #112]	; (8001e50 <MX_SPI2_Init+0xa4>)
 8001de0:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001de4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001de6:	4b1a      	ldr	r3, [pc, #104]	; (8001e50 <MX_SPI2_Init+0xa4>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dec:	4b18      	ldr	r3, [pc, #96]	; (8001e50 <MX_SPI2_Init+0xa4>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001df2:	4b17      	ldr	r3, [pc, #92]	; (8001e50 <MX_SPI2_Init+0xa4>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001df8:	4b15      	ldr	r3, [pc, #84]	; (8001e50 <MX_SPI2_Init+0xa4>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001dfe:	4b14      	ldr	r3, [pc, #80]	; (8001e50 <MX_SPI2_Init+0xa4>)
 8001e00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e04:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001e06:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <MX_SPI2_Init+0xa4>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001e0c:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <MX_SPI2_Init+0xa4>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001e12:	4b0f      	ldr	r3, [pc, #60]	; (8001e50 <MX_SPI2_Init+0xa4>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001e18:	4b0d      	ldr	r3, [pc, #52]	; (8001e50 <MX_SPI2_Init+0xa4>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001e1e:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <MX_SPI2_Init+0xa4>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001e24:	4b0a      	ldr	r3, [pc, #40]	; (8001e50 <MX_SPI2_Init+0xa4>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001e2a:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <MX_SPI2_Init+0xa4>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001e30:	4b07      	ldr	r3, [pc, #28]	; (8001e50 <MX_SPI2_Init+0xa4>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001e36:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <MX_SPI2_Init+0xa4>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e3c:	4804      	ldr	r0, [pc, #16]	; (8001e50 <MX_SPI2_Init+0xa4>)
 8001e3e:	f00c fbdb 	bl	800e5f8 <HAL_SPI_Init>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001e48:	f000 fc5a 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e4c:	bf00      	nop
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	24000fd4 	.word	0x24000fd4
 8001e54:	40003800 	.word	0x40003800

08001e58 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001e5c:	4b27      	ldr	r3, [pc, #156]	; (8001efc <MX_SPI3_Init+0xa4>)
 8001e5e:	4a28      	ldr	r2, [pc, #160]	; (8001f00 <MX_SPI3_Init+0xa8>)
 8001e60:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001e62:	4b26      	ldr	r3, [pc, #152]	; (8001efc <MX_SPI3_Init+0xa4>)
 8001e64:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001e68:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001e6a:	4b24      	ldr	r3, [pc, #144]	; (8001efc <MX_SPI3_Init+0xa4>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e70:	4b22      	ldr	r3, [pc, #136]	; (8001efc <MX_SPI3_Init+0xa4>)
 8001e72:	2207      	movs	r2, #7
 8001e74:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e76:	4b21      	ldr	r3, [pc, #132]	; (8001efc <MX_SPI3_Init+0xa4>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e7c:	4b1f      	ldr	r3, [pc, #124]	; (8001efc <MX_SPI3_Init+0xa4>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001e82:	4b1e      	ldr	r3, [pc, #120]	; (8001efc <MX_SPI3_Init+0xa4>)
 8001e84:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e88:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001e8a:	4b1c      	ldr	r3, [pc, #112]	; (8001efc <MX_SPI3_Init+0xa4>)
 8001e8c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001e90:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e92:	4b1a      	ldr	r3, [pc, #104]	; (8001efc <MX_SPI3_Init+0xa4>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e98:	4b18      	ldr	r3, [pc, #96]	; (8001efc <MX_SPI3_Init+0xa4>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e9e:	4b17      	ldr	r3, [pc, #92]	; (8001efc <MX_SPI3_Init+0xa4>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001ea4:	4b15      	ldr	r3, [pc, #84]	; (8001efc <MX_SPI3_Init+0xa4>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001eaa:	4b14      	ldr	r3, [pc, #80]	; (8001efc <MX_SPI3_Init+0xa4>)
 8001eac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001eb0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001eb2:	4b12      	ldr	r3, [pc, #72]	; (8001efc <MX_SPI3_Init+0xa4>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001eb8:	4b10      	ldr	r3, [pc, #64]	; (8001efc <MX_SPI3_Init+0xa4>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001ebe:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <MX_SPI3_Init+0xa4>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001ec4:	4b0d      	ldr	r3, [pc, #52]	; (8001efc <MX_SPI3_Init+0xa4>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001eca:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <MX_SPI3_Init+0xa4>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001ed0:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <MX_SPI3_Init+0xa4>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001ed6:	4b09      	ldr	r3, [pc, #36]	; (8001efc <MX_SPI3_Init+0xa4>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001edc:	4b07      	ldr	r3, [pc, #28]	; (8001efc <MX_SPI3_Init+0xa4>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <MX_SPI3_Init+0xa4>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001ee8:	4804      	ldr	r0, [pc, #16]	; (8001efc <MX_SPI3_Init+0xa4>)
 8001eea:	f00c fb85 	bl	800e5f8 <HAL_SPI_Init>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8001ef4:	f000 fc04 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001ef8:	bf00      	nop
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	2400105c 	.word	0x2400105c
 8001f00:	40003c00 	.word	0x40003c00

08001f04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08a      	sub	sp, #40	; 0x28
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f0a:	f107 031c 	add.w	r3, r7, #28
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f16:	463b      	mov	r3, r7
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	60da      	str	r2, [r3, #12]
 8001f22:	611a      	str	r2, [r3, #16]
 8001f24:	615a      	str	r2, [r3, #20]
 8001f26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f28:	4b21      	ldr	r3, [pc, #132]	; (8001fb0 <MX_TIM2_Init+0xac>)
 8001f2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f30:	4b1f      	ldr	r3, [pc, #124]	; (8001fb0 <MX_TIM2_Init+0xac>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f36:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <MX_TIM2_Init+0xac>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 8001f3c:	4b1c      	ldr	r3, [pc, #112]	; (8001fb0 <MX_TIM2_Init+0xac>)
 8001f3e:	225a      	movs	r2, #90	; 0x5a
 8001f40:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f42:	4b1b      	ldr	r3, [pc, #108]	; (8001fb0 <MX_TIM2_Init+0xac>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f48:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <MX_TIM2_Init+0xac>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f4e:	4818      	ldr	r0, [pc, #96]	; (8001fb0 <MX_TIM2_Init+0xac>)
 8001f50:	f00d f8eb 	bl	800f12a <HAL_TIM_PWM_Init>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001f5a:	f000 fbd1 	bl	8002700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f62:	2300      	movs	r3, #0
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f66:	f107 031c 	add.w	r3, r7, #28
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4810      	ldr	r0, [pc, #64]	; (8001fb0 <MX_TIM2_Init+0xac>)
 8001f6e:	f00e fb71 	bl	8010654 <HAL_TIMEx_MasterConfigSynchronization>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001f78:	f000 fbc2 	bl	8002700 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f7c:	2360      	movs	r3, #96	; 0x60
 8001f7e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f8c:	463b      	mov	r3, r7
 8001f8e:	2208      	movs	r2, #8
 8001f90:	4619      	mov	r1, r3
 8001f92:	4807      	ldr	r0, [pc, #28]	; (8001fb0 <MX_TIM2_Init+0xac>)
 8001f94:	f00d fd90 	bl	800fab8 <HAL_TIM_PWM_ConfigChannel>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001f9e:	f000 fbaf 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001fa2:	4803      	ldr	r0, [pc, #12]	; (8001fb0 <MX_TIM2_Init+0xac>)
 8001fa4:	f001 f8a0 	bl	80030e8 <HAL_TIM_MspPostInit>

}
 8001fa8:	bf00      	nop
 8001faa:	3728      	adds	r7, #40	; 0x28
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	240010e4 	.word	0x240010e4

08001fb4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08a      	sub	sp, #40	; 0x28
 8001fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fba:	f107 031c 	add.w	r3, r7, #28
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]
 8001fc4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fc6:	463b      	mov	r3, r7
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
 8001fd4:	615a      	str	r2, [r3, #20]
 8001fd6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fd8:	4b26      	ldr	r3, [pc, #152]	; (8002074 <MX_TIM3_Init+0xc0>)
 8001fda:	4a27      	ldr	r2, [pc, #156]	; (8002078 <MX_TIM3_Init+0xc4>)
 8001fdc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001fde:	4b25      	ldr	r3, [pc, #148]	; (8002074 <MX_TIM3_Init+0xc0>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe4:	4b23      	ldr	r3, [pc, #140]	; (8002074 <MX_TIM3_Init+0xc0>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 8001fea:	4b22      	ldr	r3, [pc, #136]	; (8002074 <MX_TIM3_Init+0xc0>)
 8001fec:	225a      	movs	r2, #90	; 0x5a
 8001fee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff0:	4b20      	ldr	r3, [pc, #128]	; (8002074 <MX_TIM3_Init+0xc0>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ff6:	4b1f      	ldr	r3, [pc, #124]	; (8002074 <MX_TIM3_Init+0xc0>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ffc:	481d      	ldr	r0, [pc, #116]	; (8002074 <MX_TIM3_Init+0xc0>)
 8001ffe:	f00d f894 	bl	800f12a <HAL_TIM_PWM_Init>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002008:	f000 fb7a 	bl	8002700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800200c:	2300      	movs	r3, #0
 800200e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002010:	2300      	movs	r3, #0
 8002012:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002014:	f107 031c 	add.w	r3, r7, #28
 8002018:	4619      	mov	r1, r3
 800201a:	4816      	ldr	r0, [pc, #88]	; (8002074 <MX_TIM3_Init+0xc0>)
 800201c:	f00e fb1a 	bl	8010654 <HAL_TIMEx_MasterConfigSynchronization>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002026:	f000 fb6b 	bl	8002700 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800202a:	2360      	movs	r3, #96	; 0x60
 800202c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002032:	2300      	movs	r3, #0
 8002034:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002036:	2300      	movs	r3, #0
 8002038:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800203a:	463b      	mov	r3, r7
 800203c:	2200      	movs	r2, #0
 800203e:	4619      	mov	r1, r3
 8002040:	480c      	ldr	r0, [pc, #48]	; (8002074 <MX_TIM3_Init+0xc0>)
 8002042:	f00d fd39 	bl	800fab8 <HAL_TIM_PWM_ConfigChannel>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800204c:	f000 fb58 	bl	8002700 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002050:	463b      	mov	r3, r7
 8002052:	2204      	movs	r2, #4
 8002054:	4619      	mov	r1, r3
 8002056:	4807      	ldr	r0, [pc, #28]	; (8002074 <MX_TIM3_Init+0xc0>)
 8002058:	f00d fd2e 	bl	800fab8 <HAL_TIM_PWM_ConfigChannel>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002062:	f000 fb4d 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002066:	4803      	ldr	r0, [pc, #12]	; (8002074 <MX_TIM3_Init+0xc0>)
 8002068:	f001 f83e 	bl	80030e8 <HAL_TIM_MspPostInit>

}
 800206c:	bf00      	nop
 800206e:	3728      	adds	r7, #40	; 0x28
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	24001130 	.word	0x24001130
 8002078:	40000400 	.word	0x40000400

0800207c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08a      	sub	sp, #40	; 0x28
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002082:	f107 031c 	add.w	r3, r7, #28
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	605a      	str	r2, [r3, #4]
 800208c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800208e:	463b      	mov	r3, r7
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	611a      	str	r2, [r3, #16]
 800209c:	615a      	str	r2, [r3, #20]
 800209e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80020a0:	4b32      	ldr	r3, [pc, #200]	; (800216c <MX_TIM4_Init+0xf0>)
 80020a2:	4a33      	ldr	r2, [pc, #204]	; (8002170 <MX_TIM4_Init+0xf4>)
 80020a4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 28;
 80020a6:	4b31      	ldr	r3, [pc, #196]	; (800216c <MX_TIM4_Init+0xf0>)
 80020a8:	221c      	movs	r2, #28
 80020aa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ac:	4b2f      	ldr	r3, [pc, #188]	; (800216c <MX_TIM4_Init+0xf0>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80020b2:	4b2e      	ldr	r3, [pc, #184]	; (800216c <MX_TIM4_Init+0xf0>)
 80020b4:	f242 720f 	movw	r2, #9999	; 0x270f
 80020b8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ba:	4b2c      	ldr	r3, [pc, #176]	; (800216c <MX_TIM4_Init+0xf0>)
 80020bc:	2200      	movs	r2, #0
 80020be:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020c0:	4b2a      	ldr	r3, [pc, #168]	; (800216c <MX_TIM4_Init+0xf0>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80020c6:	4829      	ldr	r0, [pc, #164]	; (800216c <MX_TIM4_Init+0xf0>)
 80020c8:	f00d f82f 	bl	800f12a <HAL_TIM_PWM_Init>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80020d2:	f000 fb15 	bl	8002700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d6:	2300      	movs	r3, #0
 80020d8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020da:	2300      	movs	r3, #0
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80020de:	f107 031c 	add.w	r3, r7, #28
 80020e2:	4619      	mov	r1, r3
 80020e4:	4821      	ldr	r0, [pc, #132]	; (800216c <MX_TIM4_Init+0xf0>)
 80020e6:	f00e fab5 	bl	8010654 <HAL_TIMEx_MasterConfigSynchronization>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80020f0:	f000 fb06 	bl	8002700 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020f4:	2360      	movs	r3, #96	; 0x60
 80020f6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020fc:	2300      	movs	r3, #0
 80020fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002100:	2300      	movs	r3, #0
 8002102:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002104:	463b      	mov	r3, r7
 8002106:	2200      	movs	r2, #0
 8002108:	4619      	mov	r1, r3
 800210a:	4818      	ldr	r0, [pc, #96]	; (800216c <MX_TIM4_Init+0xf0>)
 800210c:	f00d fcd4 	bl	800fab8 <HAL_TIM_PWM_ConfigChannel>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002116:	f000 faf3 	bl	8002700 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800211a:	463b      	mov	r3, r7
 800211c:	2204      	movs	r2, #4
 800211e:	4619      	mov	r1, r3
 8002120:	4812      	ldr	r0, [pc, #72]	; (800216c <MX_TIM4_Init+0xf0>)
 8002122:	f00d fcc9 	bl	800fab8 <HAL_TIM_PWM_ConfigChannel>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 800212c:	f000 fae8 	bl	8002700 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002130:	463b      	mov	r3, r7
 8002132:	2208      	movs	r2, #8
 8002134:	4619      	mov	r1, r3
 8002136:	480d      	ldr	r0, [pc, #52]	; (800216c <MX_TIM4_Init+0xf0>)
 8002138:	f00d fcbe 	bl	800fab8 <HAL_TIM_PWM_ConfigChannel>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8002142:	f000 fadd 	bl	8002700 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002146:	463b      	mov	r3, r7
 8002148:	220c      	movs	r2, #12
 800214a:	4619      	mov	r1, r3
 800214c:	4807      	ldr	r0, [pc, #28]	; (800216c <MX_TIM4_Init+0xf0>)
 800214e:	f00d fcb3 	bl	800fab8 <HAL_TIM_PWM_ConfigChannel>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8002158:	f000 fad2 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800215c:	4803      	ldr	r0, [pc, #12]	; (800216c <MX_TIM4_Init+0xf0>)
 800215e:	f000 ffc3 	bl	80030e8 <HAL_TIM_MspPostInit>

}
 8002162:	bf00      	nop
 8002164:	3728      	adds	r7, #40	; 0x28
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	2400117c 	.word	0x2400117c
 8002170:	40000800 	.word	0x40000800

08002174 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08a      	sub	sp, #40	; 0x28
 8002178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800217a:	f107 031c 	add.w	r3, r7, #28
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	605a      	str	r2, [r3, #4]
 8002184:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002186:	463b      	mov	r3, r7
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	60da      	str	r2, [r3, #12]
 8002192:	611a      	str	r2, [r3, #16]
 8002194:	615a      	str	r2, [r3, #20]
 8002196:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002198:	4b21      	ldr	r3, [pc, #132]	; (8002220 <MX_TIM5_Init+0xac>)
 800219a:	4a22      	ldr	r2, [pc, #136]	; (8002224 <MX_TIM5_Init+0xb0>)
 800219c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800219e:	4b20      	ldr	r3, [pc, #128]	; (8002220 <MX_TIM5_Init+0xac>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a4:	4b1e      	ldr	r3, [pc, #120]	; (8002220 <MX_TIM5_Init+0xac>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 80021aa:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <MX_TIM5_Init+0xac>)
 80021ac:	225a      	movs	r2, #90	; 0x5a
 80021ae:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021b0:	4b1b      	ldr	r3, [pc, #108]	; (8002220 <MX_TIM5_Init+0xac>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021b6:	4b1a      	ldr	r3, [pc, #104]	; (8002220 <MX_TIM5_Init+0xac>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80021bc:	4818      	ldr	r0, [pc, #96]	; (8002220 <MX_TIM5_Init+0xac>)
 80021be:	f00c ffb4 	bl	800f12a <HAL_TIM_PWM_Init>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80021c8:	f000 fa9a 	bl	8002700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021cc:	2300      	movs	r3, #0
 80021ce:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021d0:	2300      	movs	r3, #0
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80021d4:	f107 031c 	add.w	r3, r7, #28
 80021d8:	4619      	mov	r1, r3
 80021da:	4811      	ldr	r0, [pc, #68]	; (8002220 <MX_TIM5_Init+0xac>)
 80021dc:	f00e fa3a 	bl	8010654 <HAL_TIMEx_MasterConfigSynchronization>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80021e6:	f000 fa8b 	bl	8002700 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021ea:	2360      	movs	r3, #96	; 0x60
 80021ec:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021f2:	2300      	movs	r3, #0
 80021f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021f6:	2300      	movs	r3, #0
 80021f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021fa:	463b      	mov	r3, r7
 80021fc:	220c      	movs	r2, #12
 80021fe:	4619      	mov	r1, r3
 8002200:	4807      	ldr	r0, [pc, #28]	; (8002220 <MX_TIM5_Init+0xac>)
 8002202:	f00d fc59 	bl	800fab8 <HAL_TIM_PWM_ConfigChannel>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 800220c:	f000 fa78 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002210:	4803      	ldr	r0, [pc, #12]	; (8002220 <MX_TIM5_Init+0xac>)
 8002212:	f000 ff69 	bl	80030e8 <HAL_TIM_MspPostInit>

}
 8002216:	bf00      	nop
 8002218:	3728      	adds	r7, #40	; 0x28
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	240011c8 	.word	0x240011c8
 8002224:	40000c00 	.word	0x40000c00

08002228 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800222c:	4b22      	ldr	r3, [pc, #136]	; (80022b8 <MX_UART4_Init+0x90>)
 800222e:	4a23      	ldr	r2, [pc, #140]	; (80022bc <MX_UART4_Init+0x94>)
 8002230:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002232:	4b21      	ldr	r3, [pc, #132]	; (80022b8 <MX_UART4_Init+0x90>)
 8002234:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002238:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800223a:	4b1f      	ldr	r3, [pc, #124]	; (80022b8 <MX_UART4_Init+0x90>)
 800223c:	2200      	movs	r2, #0
 800223e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002240:	4b1d      	ldr	r3, [pc, #116]	; (80022b8 <MX_UART4_Init+0x90>)
 8002242:	2200      	movs	r2, #0
 8002244:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002246:	4b1c      	ldr	r3, [pc, #112]	; (80022b8 <MX_UART4_Init+0x90>)
 8002248:	2200      	movs	r2, #0
 800224a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800224c:	4b1a      	ldr	r3, [pc, #104]	; (80022b8 <MX_UART4_Init+0x90>)
 800224e:	220c      	movs	r2, #12
 8002250:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002252:	4b19      	ldr	r3, [pc, #100]	; (80022b8 <MX_UART4_Init+0x90>)
 8002254:	2200      	movs	r2, #0
 8002256:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002258:	4b17      	ldr	r3, [pc, #92]	; (80022b8 <MX_UART4_Init+0x90>)
 800225a:	2200      	movs	r2, #0
 800225c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800225e:	4b16      	ldr	r3, [pc, #88]	; (80022b8 <MX_UART4_Init+0x90>)
 8002260:	2200      	movs	r2, #0
 8002262:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002264:	4b14      	ldr	r3, [pc, #80]	; (80022b8 <MX_UART4_Init+0x90>)
 8002266:	2200      	movs	r2, #0
 8002268:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800226a:	4b13      	ldr	r3, [pc, #76]	; (80022b8 <MX_UART4_Init+0x90>)
 800226c:	2200      	movs	r2, #0
 800226e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002270:	4811      	ldr	r0, [pc, #68]	; (80022b8 <MX_UART4_Init+0x90>)
 8002272:	f00e faa9 	bl	80107c8 <HAL_UART_Init>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800227c:	f000 fa40 	bl	8002700 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002280:	2100      	movs	r1, #0
 8002282:	480d      	ldr	r0, [pc, #52]	; (80022b8 <MX_UART4_Init+0x90>)
 8002284:	f00f fbaf 	bl	80119e6 <HAL_UARTEx_SetTxFifoThreshold>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800228e:	f000 fa37 	bl	8002700 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002292:	2100      	movs	r1, #0
 8002294:	4808      	ldr	r0, [pc, #32]	; (80022b8 <MX_UART4_Init+0x90>)
 8002296:	f00f fbe4 	bl	8011a62 <HAL_UARTEx_SetRxFifoThreshold>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80022a0:	f000 fa2e 	bl	8002700 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80022a4:	4804      	ldr	r0, [pc, #16]	; (80022b8 <MX_UART4_Init+0x90>)
 80022a6:	f00f fb65 	bl	8011974 <HAL_UARTEx_DisableFifoMode>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80022b0:	f000 fa26 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80022b4:	bf00      	nop
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	2400146c 	.word	0x2400146c
 80022bc:	40004c00 	.word	0x40004c00

080022c0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80022c4:	4b22      	ldr	r3, [pc, #136]	; (8002350 <MX_USART6_UART_Init+0x90>)
 80022c6:	4a23      	ldr	r2, [pc, #140]	; (8002354 <MX_USART6_UART_Init+0x94>)
 80022c8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80022ca:	4b21      	ldr	r3, [pc, #132]	; (8002350 <MX_USART6_UART_Init+0x90>)
 80022cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022d0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80022d2:	4b1f      	ldr	r3, [pc, #124]	; (8002350 <MX_USART6_UART_Init+0x90>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80022d8:	4b1d      	ldr	r3, [pc, #116]	; (8002350 <MX_USART6_UART_Init+0x90>)
 80022da:	2200      	movs	r2, #0
 80022dc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80022de:	4b1c      	ldr	r3, [pc, #112]	; (8002350 <MX_USART6_UART_Init+0x90>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80022e4:	4b1a      	ldr	r3, [pc, #104]	; (8002350 <MX_USART6_UART_Init+0x90>)
 80022e6:	220c      	movs	r2, #12
 80022e8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ea:	4b19      	ldr	r3, [pc, #100]	; (8002350 <MX_USART6_UART_Init+0x90>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80022f0:	4b17      	ldr	r3, [pc, #92]	; (8002350 <MX_USART6_UART_Init+0x90>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022f6:	4b16      	ldr	r3, [pc, #88]	; (8002350 <MX_USART6_UART_Init+0x90>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022fc:	4b14      	ldr	r3, [pc, #80]	; (8002350 <MX_USART6_UART_Init+0x90>)
 80022fe:	2200      	movs	r2, #0
 8002300:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002302:	4b13      	ldr	r3, [pc, #76]	; (8002350 <MX_USART6_UART_Init+0x90>)
 8002304:	2200      	movs	r2, #0
 8002306:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002308:	4811      	ldr	r0, [pc, #68]	; (8002350 <MX_USART6_UART_Init+0x90>)
 800230a:	f00e fa5d 	bl	80107c8 <HAL_UART_Init>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002314:	f000 f9f4 	bl	8002700 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002318:	2100      	movs	r1, #0
 800231a:	480d      	ldr	r0, [pc, #52]	; (8002350 <MX_USART6_UART_Init+0x90>)
 800231c:	f00f fb63 	bl	80119e6 <HAL_UARTEx_SetTxFifoThreshold>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8002326:	f000 f9eb 	bl	8002700 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800232a:	2100      	movs	r1, #0
 800232c:	4808      	ldr	r0, [pc, #32]	; (8002350 <MX_USART6_UART_Init+0x90>)
 800232e:	f00f fb98 	bl	8011a62 <HAL_UARTEx_SetRxFifoThreshold>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002338:	f000 f9e2 	bl	8002700 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 800233c:	4804      	ldr	r0, [pc, #16]	; (8002350 <MX_USART6_UART_Init+0x90>)
 800233e:	f00f fb19 	bl	8011974 <HAL_UARTEx_DisableFifoMode>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002348:	f000 f9da 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800234c:	bf00      	nop
 800234e:	bd80      	pop	{r7, pc}
 8002350:	24001500 	.word	0x24001500
 8002354:	40011400 	.word	0x40011400

08002358 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800235e:	4b2d      	ldr	r3, [pc, #180]	; (8002414 <MX_DMA_Init+0xbc>)
 8002360:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002364:	4a2b      	ldr	r2, [pc, #172]	; (8002414 <MX_DMA_Init+0xbc>)
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800236e:	4b29      	ldr	r3, [pc, #164]	; (8002414 <MX_DMA_Init+0xbc>)
 8002370:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	607b      	str	r3, [r7, #4]
 800237a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800237c:	4b25      	ldr	r3, [pc, #148]	; (8002414 <MX_DMA_Init+0xbc>)
 800237e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002382:	4a24      	ldr	r2, [pc, #144]	; (8002414 <MX_DMA_Init+0xbc>)
 8002384:	f043 0302 	orr.w	r3, r3, #2
 8002388:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800238c:	4b21      	ldr	r3, [pc, #132]	; (8002414 <MX_DMA_Init+0xbc>)
 800238e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	603b      	str	r3, [r7, #0]
 8002398:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800239a:	2200      	movs	r2, #0
 800239c:	2100      	movs	r1, #0
 800239e:	200b      	movs	r0, #11
 80023a0:	f002 fe9d 	bl	80050de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80023a4:	200b      	movs	r0, #11
 80023a6:	f002 feb4 	bl	8005112 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80023aa:	2200      	movs	r2, #0
 80023ac:	2100      	movs	r1, #0
 80023ae:	200c      	movs	r0, #12
 80023b0:	f002 fe95 	bl	80050de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80023b4:	200c      	movs	r0, #12
 80023b6:	f002 feac 	bl	8005112 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80023ba:	2200      	movs	r2, #0
 80023bc:	2100      	movs	r1, #0
 80023be:	200d      	movs	r0, #13
 80023c0:	f002 fe8d 	bl	80050de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80023c4:	200d      	movs	r0, #13
 80023c6:	f002 fea4 	bl	8005112 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80023ca:	2200      	movs	r2, #0
 80023cc:	2100      	movs	r1, #0
 80023ce:	200e      	movs	r0, #14
 80023d0:	f002 fe85 	bl	80050de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80023d4:	200e      	movs	r0, #14
 80023d6:	f002 fe9c 	bl	8005112 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80023da:	2200      	movs	r2, #0
 80023dc:	2100      	movs	r1, #0
 80023de:	200f      	movs	r0, #15
 80023e0:	f002 fe7d 	bl	80050de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80023e4:	200f      	movs	r0, #15
 80023e6:	f002 fe94 	bl	8005112 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80023ea:	2200      	movs	r2, #0
 80023ec:	2100      	movs	r1, #0
 80023ee:	2010      	movs	r0, #16
 80023f0:	f002 fe75 	bl	80050de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80023f4:	2010      	movs	r0, #16
 80023f6:	f002 fe8c 	bl	8005112 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80023fa:	2200      	movs	r2, #0
 80023fc:	2100      	movs	r1, #0
 80023fe:	2046      	movs	r0, #70	; 0x46
 8002400:	f002 fe6d 	bl	80050de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002404:	2046      	movs	r0, #70	; 0x46
 8002406:	f002 fe84 	bl	8005112 <HAL_NVIC_EnableIRQ>

}
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	58024400 	.word	0x58024400

08002418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b08e      	sub	sp, #56	; 0x38
 800241c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	605a      	str	r2, [r3, #4]
 8002428:	609a      	str	r2, [r3, #8]
 800242a:	60da      	str	r2, [r3, #12]
 800242c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800242e:	4bac      	ldr	r3, [pc, #688]	; (80026e0 <MX_GPIO_Init+0x2c8>)
 8002430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002434:	4aaa      	ldr	r2, [pc, #680]	; (80026e0 <MX_GPIO_Init+0x2c8>)
 8002436:	f043 0310 	orr.w	r3, r3, #16
 800243a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800243e:	4ba8      	ldr	r3, [pc, #672]	; (80026e0 <MX_GPIO_Init+0x2c8>)
 8002440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002444:	f003 0310 	and.w	r3, r3, #16
 8002448:	623b      	str	r3, [r7, #32]
 800244a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800244c:	4ba4      	ldr	r3, [pc, #656]	; (80026e0 <MX_GPIO_Init+0x2c8>)
 800244e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002452:	4aa3      	ldr	r2, [pc, #652]	; (80026e0 <MX_GPIO_Init+0x2c8>)
 8002454:	f043 0320 	orr.w	r3, r3, #32
 8002458:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800245c:	4ba0      	ldr	r3, [pc, #640]	; (80026e0 <MX_GPIO_Init+0x2c8>)
 800245e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002462:	f003 0320 	and.w	r3, r3, #32
 8002466:	61fb      	str	r3, [r7, #28]
 8002468:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800246a:	4b9d      	ldr	r3, [pc, #628]	; (80026e0 <MX_GPIO_Init+0x2c8>)
 800246c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002470:	4a9b      	ldr	r2, [pc, #620]	; (80026e0 <MX_GPIO_Init+0x2c8>)
 8002472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002476:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800247a:	4b99      	ldr	r3, [pc, #612]	; (80026e0 <MX_GPIO_Init+0x2c8>)
 800247c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002484:	61bb      	str	r3, [r7, #24]
 8002486:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002488:	4b95      	ldr	r3, [pc, #596]	; (80026e0 <MX_GPIO_Init+0x2c8>)
 800248a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800248e:	4a94      	ldr	r2, [pc, #592]	; (80026e0 <MX_GPIO_Init+0x2c8>)
 8002490:	f043 0304 	orr.w	r3, r3, #4
 8002494:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002498:	4b91      	ldr	r3, [pc, #580]	; (80026e0 <MX_GPIO_Init+0x2c8>)
 800249a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	617b      	str	r3, [r7, #20]
 80024a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a6:	4b8e      	ldr	r3, [pc, #568]	; (80026e0 <MX_GPIO_Init+0x2c8>)
 80024a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ac:	4a8c      	ldr	r2, [pc, #560]	; (80026e0 <MX_GPIO_Init+0x2c8>)
 80024ae:	f043 0301 	orr.w	r3, r3, #1
 80024b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024b6:	4b8a      	ldr	r3, [pc, #552]	; (80026e0 <MX_GPIO_Init+0x2c8>)
 80024b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	613b      	str	r3, [r7, #16]
 80024c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024c4:	4b86      	ldr	r3, [pc, #536]	; (80026e0 <MX_GPIO_Init+0x2c8>)
 80024c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ca:	4a85      	ldr	r2, [pc, #532]	; (80026e0 <MX_GPIO_Init+0x2c8>)
 80024cc:	f043 0302 	orr.w	r3, r3, #2
 80024d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024d4:	4b82      	ldr	r3, [pc, #520]	; (80026e0 <MX_GPIO_Init+0x2c8>)
 80024d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80024e2:	4b7f      	ldr	r3, [pc, #508]	; (80026e0 <MX_GPIO_Init+0x2c8>)
 80024e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024e8:	4a7d      	ldr	r2, [pc, #500]	; (80026e0 <MX_GPIO_Init+0x2c8>)
 80024ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024f2:	4b7b      	ldr	r3, [pc, #492]	; (80026e0 <MX_GPIO_Init+0x2c8>)
 80024f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024fc:	60bb      	str	r3, [r7, #8]
 80024fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002500:	4b77      	ldr	r3, [pc, #476]	; (80026e0 <MX_GPIO_Init+0x2c8>)
 8002502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002506:	4a76      	ldr	r2, [pc, #472]	; (80026e0 <MX_GPIO_Init+0x2c8>)
 8002508:	f043 0308 	orr.w	r3, r3, #8
 800250c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002510:	4b73      	ldr	r3, [pc, #460]	; (80026e0 <MX_GPIO_Init+0x2c8>)
 8002512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	607b      	str	r3, [r7, #4]
 800251c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 800251e:	2200      	movs	r2, #0
 8002520:	f241 5104 	movw	r1, #5380	; 0x1504
 8002524:	486f      	ldr	r0, [pc, #444]	; (80026e4 <MX_GPIO_Init+0x2cc>)
 8002526:	f005 fc09 	bl	8007d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|ARM2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 800252a:	2200      	movs	r2, #0
 800252c:	f248 0106 	movw	r1, #32774	; 0x8006
 8002530:	486d      	ldr	r0, [pc, #436]	; (80026e8 <MX_GPIO_Init+0x2d0>)
 8002532:	f005 fc03 	bl	8007d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002536:	2200      	movs	r2, #0
 8002538:	2130      	movs	r1, #48	; 0x30
 800253a:	486c      	ldr	r0, [pc, #432]	; (80026ec <MX_GPIO_Init+0x2d4>)
 800253c:	f005 fbfe 	bl	8007d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, GPIO_PIN_RESET);
 8002540:	2200      	movs	r2, #0
 8002542:	2102      	movs	r1, #2
 8002544:	486a      	ldr	r0, [pc, #424]	; (80026f0 <MX_GPIO_Init+0x2d8>)
 8002546:	f005 fbf9 	bl	8007d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 800254a:	2200      	movs	r2, #0
 800254c:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8002550:	4868      	ldr	r0, [pc, #416]	; (80026f4 <MX_GPIO_Init+0x2dc>)
 8002552:	f005 fbf3 	bl	8007d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8002556:	2200      	movs	r2, #0
 8002558:	210e      	movs	r1, #14
 800255a:	4867      	ldr	r0, [pc, #412]	; (80026f8 <MX_GPIO_Init+0x2e0>)
 800255c:	f005 fbee 	bl	8007d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0, GPIO_PIN_RESET);
 8002560:	2200      	movs	r2, #0
 8002562:	f240 3101 	movw	r1, #769	; 0x301
 8002566:	4865      	ldr	r0, [pc, #404]	; (80026fc <MX_GPIO_Init+0x2e4>)
 8002568:	f005 fbe8 	bl	8007d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 800256c:	f241 5304 	movw	r3, #5380	; 0x1504
 8002570:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002572:	2301      	movs	r3, #1
 8002574:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002576:	2300      	movs	r3, #0
 8002578:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257a:	2300      	movs	r3, #0
 800257c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800257e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002582:	4619      	mov	r1, r3
 8002584:	4857      	ldr	r0, [pc, #348]	; (80026e4 <MX_GPIO_Init+0x2cc>)
 8002586:	f005 fa19 	bl	80079bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin ARM2_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|ARM2_Pin|GPIO_PIN_15;
 800258a:	f248 0306 	movw	r3, #32774	; 0x8006
 800258e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002590:	2301      	movs	r3, #1
 8002592:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002594:	2300      	movs	r3, #0
 8002596:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002598:	2300      	movs	r3, #0
 800259a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025a0:	4619      	mov	r1, r3
 80025a2:	4851      	ldr	r0, [pc, #324]	; (80026e8 <MX_GPIO_Init+0x2d0>)
 80025a4:	f005 fa0a 	bl	80079bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80025a8:	2330      	movs	r3, #48	; 0x30
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ac:	2301      	movs	r3, #1
 80025ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b4:	2300      	movs	r3, #0
 80025b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025bc:	4619      	mov	r1, r3
 80025be:	484b      	ldr	r0, [pc, #300]	; (80026ec <MX_GPIO_Init+0x2d4>)
 80025c0:	f005 f9fc 	bl	80079bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PYRO1_Pin */
  GPIO_InitStruct.Pin = PYRO1_Pin;
 80025c4:	2302      	movs	r3, #2
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025c8:	2301      	movs	r3, #1
 80025ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025cc:	2300      	movs	r3, #0
 80025ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d0:	2300      	movs	r3, #0
 80025d2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PYRO1_GPIO_Port, &GPIO_InitStruct);
 80025d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025d8:	4619      	mov	r1, r3
 80025da:	4845      	ldr	r0, [pc, #276]	; (80026f0 <MX_GPIO_Init+0x2d8>)
 80025dc:	f005 f9ee 	bl	80079bc <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 80025e0:	2304      	movs	r3, #4
 80025e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025e4:	2300      	movs	r3, #0
 80025e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025e8:	2301      	movs	r3, #1
 80025ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 80025ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025f0:	4619      	mov	r1, r3
 80025f2:	483f      	ldr	r0, [pc, #252]	; (80026f0 <MX_GPIO_Init+0x2d8>)
 80025f4:	f005 f9e2 	bl	80079bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 80025f8:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 80025fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025fe:	2301      	movs	r3, #1
 8002600:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002602:	2300      	movs	r3, #0
 8002604:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002606:	2300      	movs	r3, #0
 8002608:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800260a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800260e:	4619      	mov	r1, r3
 8002610:	4838      	ldr	r0, [pc, #224]	; (80026f4 <MX_GPIO_Init+0x2dc>)
 8002612:	f005 f9d3 	bl	80079bc <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 8002616:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800261a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800261c:	2300      	movs	r3, #0
 800261e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002620:	2301      	movs	r3, #1
 8002622:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002628:	4619      	mov	r1, r3
 800262a:	4832      	ldr	r0, [pc, #200]	; (80026f4 <MX_GPIO_Init+0x2dc>)
 800262c:	f005 f9c6 	bl	80079bc <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 8002630:	2301      	movs	r3, #1
 8002632:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002634:	2300      	movs	r3, #0
 8002636:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002638:	2301      	movs	r3, #1
 800263a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 800263c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002640:	4619      	mov	r1, r3
 8002642:	482d      	ldr	r0, [pc, #180]	; (80026f8 <MX_GPIO_Init+0x2e0>)
 8002644:	f005 f9ba 	bl	80079bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 8002648:	230e      	movs	r3, #14
 800264a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800264c:	2301      	movs	r3, #1
 800264e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002650:	2300      	movs	r3, #0
 8002652:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002654:	2300      	movs	r3, #0
 8002656:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800265c:	4619      	mov	r1, r3
 800265e:	4826      	ldr	r0, [pc, #152]	; (80026f8 <MX_GPIO_Init+0x2e0>)
 8002660:	f005 f9ac 	bl	80079bc <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 8002664:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800266a:	2300      	movs	r3, #0
 800266c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800266e:	2301      	movs	r3, #1
 8002670:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002672:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002676:	4619      	mov	r1, r3
 8002678:	481a      	ldr	r0, [pc, #104]	; (80026e4 <MX_GPIO_Init+0x2cc>)
 800267a:	f005 f99f 	bl	80079bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0;
 800267e:	f240 3301 	movw	r3, #769	; 0x301
 8002682:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002684:	2301      	movs	r3, #1
 8002686:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002688:	2300      	movs	r3, #0
 800268a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268c:	2300      	movs	r3, #0
 800268e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002694:	4619      	mov	r1, r3
 8002696:	4819      	ldr	r0, [pc, #100]	; (80026fc <MX_GPIO_Init+0x2e4>)
 8002698:	f005 f990 	bl	80079bc <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 800269c:	2310      	movs	r3, #16
 800269e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026a0:	2300      	movs	r3, #0
 80026a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 80026a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ac:	4619      	mov	r1, r3
 80026ae:	4812      	ldr	r0, [pc, #72]	; (80026f8 <MX_GPIO_Init+0x2e0>)
 80026b0:	f005 f984 	bl	80079bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80026b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ba:	2302      	movs	r3, #2
 80026bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026be:	2300      	movs	r3, #0
 80026c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c2:	2300      	movs	r3, #0
 80026c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80026c6:	2300      	movs	r3, #0
 80026c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ce:	4619      	mov	r1, r3
 80026d0:	4805      	ldr	r0, [pc, #20]	; (80026e8 <MX_GPIO_Init+0x2d0>)
 80026d2:	f005 f973 	bl	80079bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80026d6:	bf00      	nop
 80026d8:	3738      	adds	r7, #56	; 0x38
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	58024400 	.word	0x58024400
 80026e4:	58021000 	.word	0x58021000
 80026e8:	58020000 	.word	0x58020000
 80026ec:	58020800 	.word	0x58020800
 80026f0:	58020400 	.word	0x58020400
 80026f4:	58021400 	.word	0x58021400
 80026f8:	58021800 	.word	0x58021800
 80026fc:	58020c00 	.word	0x58020c00

08002700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002704:	b672      	cpsid	i
}
 8002706:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002708:	e7fe      	b.n	8002708 <Error_Handler+0x8>
	...

0800270c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002712:	4b0a      	ldr	r3, [pc, #40]	; (800273c <HAL_MspInit+0x30>)
 8002714:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002718:	4a08      	ldr	r2, [pc, #32]	; (800273c <HAL_MspInit+0x30>)
 800271a:	f043 0302 	orr.w	r3, r3, #2
 800271e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002722:	4b06      	ldr	r3, [pc, #24]	; (800273c <HAL_MspInit+0x30>)
 8002724:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	607b      	str	r3, [r7, #4]
 800272e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	58024400 	.word	0x58024400

08002740 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b08c      	sub	sp, #48	; 0x30
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002748:	f107 031c 	add.w	r3, r7, #28
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	60da      	str	r2, [r3, #12]
 8002756:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a5d      	ldr	r2, [pc, #372]	; (80028d4 <HAL_ADC_MspInit+0x194>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d159      	bne.n	8002816 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002762:	4b5d      	ldr	r3, [pc, #372]	; (80028d8 <HAL_ADC_MspInit+0x198>)
 8002764:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002768:	4a5b      	ldr	r2, [pc, #364]	; (80028d8 <HAL_ADC_MspInit+0x198>)
 800276a:	f043 0320 	orr.w	r3, r3, #32
 800276e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002772:	4b59      	ldr	r3, [pc, #356]	; (80028d8 <HAL_ADC_MspInit+0x198>)
 8002774:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002778:	f003 0320 	and.w	r3, r3, #32
 800277c:	61bb      	str	r3, [r7, #24]
 800277e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002780:	4b55      	ldr	r3, [pc, #340]	; (80028d8 <HAL_ADC_MspInit+0x198>)
 8002782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002786:	4a54      	ldr	r2, [pc, #336]	; (80028d8 <HAL_ADC_MspInit+0x198>)
 8002788:	f043 0304 	orr.w	r3, r3, #4
 800278c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002790:	4b51      	ldr	r3, [pc, #324]	; (80028d8 <HAL_ADC_MspInit+0x198>)
 8002792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002796:	f003 0304 	and.w	r3, r3, #4
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = ARM_CHECK_Pin;
 800279e:	2301      	movs	r3, #1
 80027a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027a2:	2303      	movs	r3, #3
 80027a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 80027aa:	f107 031c 	add.w	r3, r7, #28
 80027ae:	4619      	mov	r1, r3
 80027b0:	484a      	ldr	r0, [pc, #296]	; (80028dc <HAL_ADC_MspInit+0x19c>)
 80027b2:	f005 f903 	bl	80079bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 80027b6:	4b4a      	ldr	r3, [pc, #296]	; (80028e0 <HAL_ADC_MspInit+0x1a0>)
 80027b8:	4a4a      	ldr	r2, [pc, #296]	; (80028e4 <HAL_ADC_MspInit+0x1a4>)
 80027ba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80027bc:	4b48      	ldr	r3, [pc, #288]	; (80028e0 <HAL_ADC_MspInit+0x1a0>)
 80027be:	2209      	movs	r2, #9
 80027c0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027c2:	4b47      	ldr	r3, [pc, #284]	; (80028e0 <HAL_ADC_MspInit+0x1a0>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80027c8:	4b45      	ldr	r3, [pc, #276]	; (80028e0 <HAL_ADC_MspInit+0x1a0>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80027ce:	4b44      	ldr	r3, [pc, #272]	; (80028e0 <HAL_ADC_MspInit+0x1a0>)
 80027d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027d4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027d6:	4b42      	ldr	r3, [pc, #264]	; (80028e0 <HAL_ADC_MspInit+0x1a0>)
 80027d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027dc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027de:	4b40      	ldr	r3, [pc, #256]	; (80028e0 <HAL_ADC_MspInit+0x1a0>)
 80027e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027e4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80027e6:	4b3e      	ldr	r3, [pc, #248]	; (80028e0 <HAL_ADC_MspInit+0x1a0>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80027ec:	4b3c      	ldr	r3, [pc, #240]	; (80028e0 <HAL_ADC_MspInit+0x1a0>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027f2:	4b3b      	ldr	r3, [pc, #236]	; (80028e0 <HAL_ADC_MspInit+0x1a0>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80027f8:	4839      	ldr	r0, [pc, #228]	; (80028e0 <HAL_ADC_MspInit+0x1a0>)
 80027fa:	f002 fca5 	bl	8005148 <HAL_DMA_Init>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002804:	f7ff ff7c 	bl	8002700 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a35      	ldr	r2, [pc, #212]	; (80028e0 <HAL_ADC_MspInit+0x1a0>)
 800280c:	659a      	str	r2, [r3, #88]	; 0x58
 800280e:	4a34      	ldr	r2, [pc, #208]	; (80028e0 <HAL_ADC_MspInit+0x1a0>)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002814:	e059      	b.n	80028ca <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a33      	ldr	r2, [pc, #204]	; (80028e8 <HAL_ADC_MspInit+0x1a8>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d154      	bne.n	80028ca <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002820:	4b2d      	ldr	r3, [pc, #180]	; (80028d8 <HAL_ADC_MspInit+0x198>)
 8002822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002826:	4a2c      	ldr	r2, [pc, #176]	; (80028d8 <HAL_ADC_MspInit+0x198>)
 8002828:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800282c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002830:	4b29      	ldr	r3, [pc, #164]	; (80028d8 <HAL_ADC_MspInit+0x198>)
 8002832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002836:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800283a:	613b      	str	r3, [r7, #16]
 800283c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800283e:	4b26      	ldr	r3, [pc, #152]	; (80028d8 <HAL_ADC_MspInit+0x198>)
 8002840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002844:	4a24      	ldr	r2, [pc, #144]	; (80028d8 <HAL_ADC_MspInit+0x198>)
 8002846:	f043 0304 	orr.w	r3, r3, #4
 800284a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800284e:	4b22      	ldr	r3, [pc, #136]	; (80028d8 <HAL_ADC_MspInit+0x198>)
 8002850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800285c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002860:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002864:	f000 ffda 	bl	800381c <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8002868:	4b20      	ldr	r3, [pc, #128]	; (80028ec <HAL_ADC_MspInit+0x1ac>)
 800286a:	4a21      	ldr	r2, [pc, #132]	; (80028f0 <HAL_ADC_MspInit+0x1b0>)
 800286c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800286e:	4b1f      	ldr	r3, [pc, #124]	; (80028ec <HAL_ADC_MspInit+0x1ac>)
 8002870:	2273      	movs	r2, #115	; 0x73
 8002872:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002874:	4b1d      	ldr	r3, [pc, #116]	; (80028ec <HAL_ADC_MspInit+0x1ac>)
 8002876:	2200      	movs	r2, #0
 8002878:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800287a:	4b1c      	ldr	r3, [pc, #112]	; (80028ec <HAL_ADC_MspInit+0x1ac>)
 800287c:	2200      	movs	r2, #0
 800287e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002880:	4b1a      	ldr	r3, [pc, #104]	; (80028ec <HAL_ADC_MspInit+0x1ac>)
 8002882:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002886:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002888:	4b18      	ldr	r3, [pc, #96]	; (80028ec <HAL_ADC_MspInit+0x1ac>)
 800288a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800288e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002890:	4b16      	ldr	r3, [pc, #88]	; (80028ec <HAL_ADC_MspInit+0x1ac>)
 8002892:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002896:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002898:	4b14      	ldr	r3, [pc, #80]	; (80028ec <HAL_ADC_MspInit+0x1ac>)
 800289a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800289e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 80028a0:	4b12      	ldr	r3, [pc, #72]	; (80028ec <HAL_ADC_MspInit+0x1ac>)
 80028a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028a6:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028a8:	4b10      	ldr	r3, [pc, #64]	; (80028ec <HAL_ADC_MspInit+0x1ac>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80028ae:	480f      	ldr	r0, [pc, #60]	; (80028ec <HAL_ADC_MspInit+0x1ac>)
 80028b0:	f002 fc4a 	bl	8005148 <HAL_DMA_Init>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 80028ba:	f7ff ff21 	bl	8002700 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a0a      	ldr	r2, [pc, #40]	; (80028ec <HAL_ADC_MspInit+0x1ac>)
 80028c2:	659a      	str	r2, [r3, #88]	; 0x58
 80028c4:	4a09      	ldr	r2, [pc, #36]	; (80028ec <HAL_ADC_MspInit+0x1ac>)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80028ca:	bf00      	nop
 80028cc:	3730      	adds	r7, #48	; 0x30
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40022000 	.word	0x40022000
 80028d8:	58024400 	.word	0x58024400
 80028dc:	58020800 	.word	0x58020800
 80028e0:	24000cec 	.word	0x24000cec
 80028e4:	40020088 	.word	0x40020088
 80028e8:	58026000 	.word	0x58026000
 80028ec:	24000d64 	.word	0x24000d64
 80028f0:	400204b8 	.word	0x400204b8

080028f4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b0b8      	sub	sp, #224	; 0xe0
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	60da      	str	r2, [r3, #12]
 800290a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800290c:	f107 0310 	add.w	r3, r7, #16
 8002910:	22b8      	movs	r2, #184	; 0xb8
 8002912:	2100      	movs	r1, #0
 8002914:	4618      	mov	r0, r3
 8002916:	f014 fa1f 	bl	8016d58 <memset>
  if(hfdcan->Instance==FDCAN3)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a26      	ldr	r2, [pc, #152]	; (80029b8 <HAL_FDCAN_MspInit+0xc4>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d144      	bne.n	80029ae <HAL_FDCAN_MspInit+0xba>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002924:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002928:	f04f 0300 	mov.w	r3, #0
 800292c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002930:	2300      	movs	r3, #0
 8002932:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002934:	f107 0310 	add.w	r3, r7, #16
 8002938:	4618      	mov	r0, r3
 800293a:	f007 fe13 	bl	800a564 <HAL_RCCEx_PeriphCLKConfig>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <HAL_FDCAN_MspInit+0x54>
    {
      Error_Handler();
 8002944:	f7ff fedc 	bl	8002700 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002948:	4b1c      	ldr	r3, [pc, #112]	; (80029bc <HAL_FDCAN_MspInit+0xc8>)
 800294a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800294e:	4a1b      	ldr	r2, [pc, #108]	; (80029bc <HAL_FDCAN_MspInit+0xc8>)
 8002950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002954:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002958:	4b18      	ldr	r3, [pc, #96]	; (80029bc <HAL_FDCAN_MspInit+0xc8>)
 800295a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800295e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002966:	4b15      	ldr	r3, [pc, #84]	; (80029bc <HAL_FDCAN_MspInit+0xc8>)
 8002968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800296c:	4a13      	ldr	r2, [pc, #76]	; (80029bc <HAL_FDCAN_MspInit+0xc8>)
 800296e:	f043 0320 	orr.w	r3, r3, #32
 8002972:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002976:	4b11      	ldr	r3, [pc, #68]	; (80029bc <HAL_FDCAN_MspInit+0xc8>)
 8002978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800297c:	f003 0320 	and.w	r3, r3, #32
 8002980:	60bb      	str	r3, [r7, #8]
 8002982:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002984:	23c0      	movs	r3, #192	; 0xc0
 8002986:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298a:	2302      	movs	r3, #2
 800298c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002990:	2300      	movs	r3, #0
 8002992:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002996:	2300      	movs	r3, #0
 8002998:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 800299c:	2302      	movs	r3, #2
 800299e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80029a2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029a6:	4619      	mov	r1, r3
 80029a8:	4805      	ldr	r0, [pc, #20]	; (80029c0 <HAL_FDCAN_MspInit+0xcc>)
 80029aa:	f005 f807 	bl	80079bc <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 80029ae:	bf00      	nop
 80029b0:	37e0      	adds	r7, #224	; 0xe0
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	4000d400 	.word	0x4000d400
 80029bc:	58024400 	.word	0x58024400
 80029c0:	58021400 	.word	0x58021400

080029c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b0b8      	sub	sp, #224	; 0xe0
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	605a      	str	r2, [r3, #4]
 80029d6:	609a      	str	r2, [r3, #8]
 80029d8:	60da      	str	r2, [r3, #12]
 80029da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029dc:	f107 0310 	add.w	r3, r7, #16
 80029e0:	22b8      	movs	r2, #184	; 0xb8
 80029e2:	2100      	movs	r1, #0
 80029e4:	4618      	mov	r0, r3
 80029e6:	f014 f9b7 	bl	8016d58 <memset>
  if(hi2c->Instance==I2C2)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a26      	ldr	r2, [pc, #152]	; (8002a88 <HAL_I2C_MspInit+0xc4>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d145      	bne.n	8002a80 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80029f4:	f04f 0208 	mov.w	r2, #8
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002a00:	2300      	movs	r3, #0
 8002a02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a06:	f107 0310 	add.w	r3, r7, #16
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f007 fdaa 	bl	800a564 <HAL_RCCEx_PeriphCLKConfig>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002a16:	f7ff fe73 	bl	8002700 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a1a:	4b1c      	ldr	r3, [pc, #112]	; (8002a8c <HAL_I2C_MspInit+0xc8>)
 8002a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a20:	4a1a      	ldr	r2, [pc, #104]	; (8002a8c <HAL_I2C_MspInit+0xc8>)
 8002a22:	f043 0320 	orr.w	r3, r3, #32
 8002a26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a2a:	4b18      	ldr	r3, [pc, #96]	; (8002a8c <HAL_I2C_MspInit+0xc8>)
 8002a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a30:	f003 0320 	and.w	r3, r3, #32
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a3e:	2312      	movs	r3, #18
 8002a40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002a50:	2304      	movs	r3, #4
 8002a52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a56:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	480c      	ldr	r0, [pc, #48]	; (8002a90 <HAL_I2C_MspInit+0xcc>)
 8002a5e:	f004 ffad 	bl	80079bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002a62:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <HAL_I2C_MspInit+0xc8>)
 8002a64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a68:	4a08      	ldr	r2, [pc, #32]	; (8002a8c <HAL_I2C_MspInit+0xc8>)
 8002a6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a6e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a72:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <HAL_I2C_MspInit+0xc8>)
 8002a74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a7c:	60bb      	str	r3, [r7, #8]
 8002a7e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002a80:	bf00      	nop
 8002a82:	37e0      	adds	r7, #224	; 0xe0
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40005800 	.word	0x40005800
 8002a8c:	58024400 	.word	0x58024400
 8002a90:	58021400 	.word	0x58021400

08002a94 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b0ba      	sub	sp, #232	; 0xe8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a9c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	605a      	str	r2, [r3, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	60da      	str	r2, [r3, #12]
 8002aaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002aac:	f107 0318 	add.w	r3, r7, #24
 8002ab0:	22b8      	movs	r2, #184	; 0xb8
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f014 f94f 	bl	8016d58 <memset>
  if(hsd->Instance==SDMMC2)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a5d      	ldr	r2, [pc, #372]	; (8002c34 <HAL_SD_MspInit+0x1a0>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	f040 80b3 	bne.w	8002c2c <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002ac6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002aca:	f04f 0300 	mov.w	r3, #0
 8002ace:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ad6:	f107 0318 	add.w	r3, r7, #24
 8002ada:	4618      	mov	r0, r3
 8002adc:	f007 fd42 	bl	800a564 <HAL_RCCEx_PeriphCLKConfig>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8002ae6:	f7ff fe0b 	bl	8002700 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8002aea:	4b53      	ldr	r3, [pc, #332]	; (8002c38 <HAL_SD_MspInit+0x1a4>)
 8002aec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002af0:	4a51      	ldr	r2, [pc, #324]	; (8002c38 <HAL_SD_MspInit+0x1a4>)
 8002af2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002af6:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002afa:	4b4f      	ldr	r3, [pc, #316]	; (8002c38 <HAL_SD_MspInit+0x1a4>)
 8002afc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002b00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b04:	617b      	str	r3, [r7, #20]
 8002b06:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b08:	4b4b      	ldr	r3, [pc, #300]	; (8002c38 <HAL_SD_MspInit+0x1a4>)
 8002b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b0e:	4a4a      	ldr	r2, [pc, #296]	; (8002c38 <HAL_SD_MspInit+0x1a4>)
 8002b10:	f043 0308 	orr.w	r3, r3, #8
 8002b14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b18:	4b47      	ldr	r3, [pc, #284]	; (8002c38 <HAL_SD_MspInit+0x1a4>)
 8002b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b1e:	f003 0308 	and.w	r3, r3, #8
 8002b22:	613b      	str	r3, [r7, #16]
 8002b24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b26:	4b44      	ldr	r3, [pc, #272]	; (8002c38 <HAL_SD_MspInit+0x1a4>)
 8002b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b2c:	4a42      	ldr	r2, [pc, #264]	; (8002c38 <HAL_SD_MspInit+0x1a4>)
 8002b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b36:	4b40      	ldr	r3, [pc, #256]	; (8002c38 <HAL_SD_MspInit+0x1a4>)
 8002b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b44:	2340      	movs	r3, #64	; 0x40
 8002b46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b56:	2303      	movs	r3, #3
 8002b58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002b5c:	230b      	movs	r3, #11
 8002b5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b62:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b66:	4619      	mov	r1, r3
 8002b68:	4834      	ldr	r0, [pc, #208]	; (8002c3c <HAL_SD_MspInit+0x1a8>)
 8002b6a:	f004 ff27 	bl	80079bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002b6e:	2380      	movs	r3, #128	; 0x80
 8002b70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b74:	2302      	movs	r3, #2
 8002b76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b80:	2303      	movs	r3, #3
 8002b82:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002b86:	230b      	movs	r3, #11
 8002b88:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b8c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b90:	4619      	mov	r1, r3
 8002b92:	482a      	ldr	r0, [pc, #168]	; (8002c3c <HAL_SD_MspInit+0x1a8>)
 8002b94:	f004 ff12 	bl	80079bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bac:	2303      	movs	r3, #3
 8002bae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002bb2:	230b      	movs	r3, #11
 8002bb4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002bb8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4820      	ldr	r0, [pc, #128]	; (8002c40 <HAL_SD_MspInit+0x1ac>)
 8002bc0:	f004 fefc 	bl	80079bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002bc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bc8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bcc:	2302      	movs	r3, #2
 8002bce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002bde:	230b      	movs	r3, #11
 8002be0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002be4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002be8:	4619      	mov	r1, r3
 8002bea:	4815      	ldr	r0, [pc, #84]	; (8002c40 <HAL_SD_MspInit+0x1ac>)
 8002bec:	f004 fee6 	bl	80079bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002bf0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002bf4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c04:	2303      	movs	r3, #3
 8002c06:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8002c0a:	230a      	movs	r3, #10
 8002c0c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c10:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c14:	4619      	mov	r1, r3
 8002c16:	480a      	ldr	r0, [pc, #40]	; (8002c40 <HAL_SD_MspInit+0x1ac>)
 8002c18:	f004 fed0 	bl	80079bc <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	2100      	movs	r1, #0
 8002c20:	207c      	movs	r0, #124	; 0x7c
 8002c22:	f002 fa5c 	bl	80050de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8002c26:	207c      	movs	r0, #124	; 0x7c
 8002c28:	f002 fa73 	bl	8005112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8002c2c:	bf00      	nop
 8002c2e:	37e8      	adds	r7, #232	; 0xe8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	48022400 	.word	0x48022400
 8002c38:	58024400 	.word	0x58024400
 8002c3c:	58020c00 	.word	0x58020c00
 8002c40:	58021800 	.word	0x58021800

08002c44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b08e      	sub	sp, #56	; 0x38
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	605a      	str	r2, [r3, #4]
 8002c56:	609a      	str	r2, [r3, #8]
 8002c58:	60da      	str	r2, [r3, #12]
 8002c5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a4f      	ldr	r2, [pc, #316]	; (8002da0 <HAL_SPI_MspInit+0x15c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d12e      	bne.n	8002cc4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c66:	4b4f      	ldr	r3, [pc, #316]	; (8002da4 <HAL_SPI_MspInit+0x160>)
 8002c68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c6c:	4a4d      	ldr	r2, [pc, #308]	; (8002da4 <HAL_SPI_MspInit+0x160>)
 8002c6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c72:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002c76:	4b4b      	ldr	r3, [pc, #300]	; (8002da4 <HAL_SPI_MspInit+0x160>)
 8002c78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c80:	623b      	str	r3, [r7, #32]
 8002c82:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c84:	4b47      	ldr	r3, [pc, #284]	; (8002da4 <HAL_SPI_MspInit+0x160>)
 8002c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c8a:	4a46      	ldr	r2, [pc, #280]	; (8002da4 <HAL_SPI_MspInit+0x160>)
 8002c8c:	f043 0301 	orr.w	r3, r3, #1
 8002c90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c94:	4b43      	ldr	r3, [pc, #268]	; (8002da4 <HAL_SPI_MspInit+0x160>)
 8002c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	61fb      	str	r3, [r7, #28]
 8002ca0:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002ca2:	23e0      	movs	r3, #224	; 0xe0
 8002ca4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cb2:	2305      	movs	r3, #5
 8002cb4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cba:	4619      	mov	r1, r3
 8002cbc:	483a      	ldr	r0, [pc, #232]	; (8002da8 <HAL_SPI_MspInit+0x164>)
 8002cbe:	f004 fe7d 	bl	80079bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002cc2:	e068      	b.n	8002d96 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a38      	ldr	r2, [pc, #224]	; (8002dac <HAL_SPI_MspInit+0x168>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d12f      	bne.n	8002d2e <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002cce:	4b35      	ldr	r3, [pc, #212]	; (8002da4 <HAL_SPI_MspInit+0x160>)
 8002cd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cd4:	4a33      	ldr	r2, [pc, #204]	; (8002da4 <HAL_SPI_MspInit+0x160>)
 8002cd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cda:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002cde:	4b31      	ldr	r3, [pc, #196]	; (8002da4 <HAL_SPI_MspInit+0x160>)
 8002ce0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ce4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ce8:	61bb      	str	r3, [r7, #24]
 8002cea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cec:	4b2d      	ldr	r3, [pc, #180]	; (8002da4 <HAL_SPI_MspInit+0x160>)
 8002cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cf2:	4a2c      	ldr	r2, [pc, #176]	; (8002da4 <HAL_SPI_MspInit+0x160>)
 8002cf4:	f043 0302 	orr.w	r3, r3, #2
 8002cf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cfc:	4b29      	ldr	r3, [pc, #164]	; (8002da4 <HAL_SPI_MspInit+0x160>)
 8002cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	617b      	str	r3, [r7, #20]
 8002d08:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002d0a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002d0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d10:	2302      	movs	r3, #2
 8002d12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002d1c:	2305      	movs	r3, #5
 8002d1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d24:	4619      	mov	r1, r3
 8002d26:	4822      	ldr	r0, [pc, #136]	; (8002db0 <HAL_SPI_MspInit+0x16c>)
 8002d28:	f004 fe48 	bl	80079bc <HAL_GPIO_Init>
}
 8002d2c:	e033      	b.n	8002d96 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a20      	ldr	r2, [pc, #128]	; (8002db4 <HAL_SPI_MspInit+0x170>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d12e      	bne.n	8002d96 <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002d38:	4b1a      	ldr	r3, [pc, #104]	; (8002da4 <HAL_SPI_MspInit+0x160>)
 8002d3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d3e:	4a19      	ldr	r2, [pc, #100]	; (8002da4 <HAL_SPI_MspInit+0x160>)
 8002d40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d44:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d48:	4b16      	ldr	r3, [pc, #88]	; (8002da4 <HAL_SPI_MspInit+0x160>)
 8002d4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d52:	613b      	str	r3, [r7, #16]
 8002d54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d56:	4b13      	ldr	r3, [pc, #76]	; (8002da4 <HAL_SPI_MspInit+0x160>)
 8002d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d5c:	4a11      	ldr	r2, [pc, #68]	; (8002da4 <HAL_SPI_MspInit+0x160>)
 8002d5e:	f043 0304 	orr.w	r3, r3, #4
 8002d62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d66:	4b0f      	ldr	r3, [pc, #60]	; (8002da4 <HAL_SPI_MspInit+0x160>)
 8002d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002d74:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002d78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d82:	2300      	movs	r3, #0
 8002d84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002d86:	2306      	movs	r3, #6
 8002d88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4809      	ldr	r0, [pc, #36]	; (8002db8 <HAL_SPI_MspInit+0x174>)
 8002d92:	f004 fe13 	bl	80079bc <HAL_GPIO_Init>
}
 8002d96:	bf00      	nop
 8002d98:	3738      	adds	r7, #56	; 0x38
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	40013000 	.word	0x40013000
 8002da4:	58024400 	.word	0x58024400
 8002da8:	58020000 	.word	0x58020000
 8002dac:	40003800 	.word	0x40003800
 8002db0:	58020400 	.word	0x58020400
 8002db4:	40003c00 	.word	0x40003c00
 8002db8:	58020800 	.word	0x58020800

08002dbc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b08c      	sub	sp, #48	; 0x30
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc4:	f107 031c 	add.w	r3, r7, #28
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	605a      	str	r2, [r3, #4]
 8002dce:	609a      	str	r2, [r3, #8]
 8002dd0:	60da      	str	r2, [r3, #12]
 8002dd2:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ddc:	d15d      	bne.n	8002e9a <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002dde:	4b8e      	ldr	r3, [pc, #568]	; (8003018 <HAL_TIM_PWM_MspInit+0x25c>)
 8002de0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002de4:	4a8c      	ldr	r2, [pc, #560]	; (8003018 <HAL_TIM_PWM_MspInit+0x25c>)
 8002de6:	f043 0301 	orr.w	r3, r3, #1
 8002dea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002dee:	4b8a      	ldr	r3, [pc, #552]	; (8003018 <HAL_TIM_PWM_MspInit+0x25c>)
 8002df0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	61bb      	str	r3, [r7, #24]
 8002dfa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dfc:	4b86      	ldr	r3, [pc, #536]	; (8003018 <HAL_TIM_PWM_MspInit+0x25c>)
 8002dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e02:	4a85      	ldr	r2, [pc, #532]	; (8003018 <HAL_TIM_PWM_MspInit+0x25c>)
 8002e04:	f043 0301 	orr.w	r3, r3, #1
 8002e08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e0c:	4b82      	ldr	r3, [pc, #520]	; (8003018 <HAL_TIM_PWM_MspInit+0x25c>)
 8002e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1e:	2302      	movs	r3, #2
 8002e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e22:	2300      	movs	r3, #0
 8002e24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e26:	2300      	movs	r3, #0
 8002e28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e2e:	f107 031c 	add.w	r3, r7, #28
 8002e32:	4619      	mov	r1, r3
 8002e34:	4879      	ldr	r0, [pc, #484]	; (800301c <HAL_TIM_PWM_MspInit+0x260>)
 8002e36:	f004 fdc1 	bl	80079bc <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 8002e3a:	4b79      	ldr	r3, [pc, #484]	; (8003020 <HAL_TIM_PWM_MspInit+0x264>)
 8002e3c:	4a79      	ldr	r2, [pc, #484]	; (8003024 <HAL_TIM_PWM_MspInit+0x268>)
 8002e3e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 8002e40:	4b77      	ldr	r3, [pc, #476]	; (8003020 <HAL_TIM_PWM_MspInit+0x264>)
 8002e42:	2214      	movs	r2, #20
 8002e44:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e46:	4b76      	ldr	r3, [pc, #472]	; (8003020 <HAL_TIM_PWM_MspInit+0x264>)
 8002e48:	2240      	movs	r2, #64	; 0x40
 8002e4a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e4c:	4b74      	ldr	r3, [pc, #464]	; (8003020 <HAL_TIM_PWM_MspInit+0x264>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002e52:	4b73      	ldr	r3, [pc, #460]	; (8003020 <HAL_TIM_PWM_MspInit+0x264>)
 8002e54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e58:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002e5a:	4b71      	ldr	r3, [pc, #452]	; (8003020 <HAL_TIM_PWM_MspInit+0x264>)
 8002e5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e60:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002e62:	4b6f      	ldr	r3, [pc, #444]	; (8003020 <HAL_TIM_PWM_MspInit+0x264>)
 8002e64:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e68:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8002e6a:	4b6d      	ldr	r3, [pc, #436]	; (8003020 <HAL_TIM_PWM_MspInit+0x264>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002e70:	4b6b      	ldr	r3, [pc, #428]	; (8003020 <HAL_TIM_PWM_MspInit+0x264>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e76:	4b6a      	ldr	r3, [pc, #424]	; (8003020 <HAL_TIM_PWM_MspInit+0x264>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8002e7c:	4868      	ldr	r0, [pc, #416]	; (8003020 <HAL_TIM_PWM_MspInit+0x264>)
 8002e7e:	f002 f963 	bl	8005148 <HAL_DMA_Init>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 8002e88:	f7ff fc3a 	bl	8002700 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a64      	ldr	r2, [pc, #400]	; (8003020 <HAL_TIM_PWM_MspInit+0x264>)
 8002e90:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e92:	4a63      	ldr	r2, [pc, #396]	; (8003020 <HAL_TIM_PWM_MspInit+0x264>)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002e98:	e119      	b.n	80030ce <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a62      	ldr	r2, [pc, #392]	; (8003028 <HAL_TIM_PWM_MspInit+0x26c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d16d      	bne.n	8002f80 <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ea4:	4b5c      	ldr	r3, [pc, #368]	; (8003018 <HAL_TIM_PWM_MspInit+0x25c>)
 8002ea6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002eaa:	4a5b      	ldr	r2, [pc, #364]	; (8003018 <HAL_TIM_PWM_MspInit+0x25c>)
 8002eac:	f043 0302 	orr.w	r3, r3, #2
 8002eb0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002eb4:	4b58      	ldr	r3, [pc, #352]	; (8003018 <HAL_TIM_PWM_MspInit+0x25c>)
 8002eb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	613b      	str	r3, [r7, #16]
 8002ec0:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 8002ec2:	4b5a      	ldr	r3, [pc, #360]	; (800302c <HAL_TIM_PWM_MspInit+0x270>)
 8002ec4:	4a5a      	ldr	r2, [pc, #360]	; (8003030 <HAL_TIM_PWM_MspInit+0x274>)
 8002ec6:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8002ec8:	4b58      	ldr	r3, [pc, #352]	; (800302c <HAL_TIM_PWM_MspInit+0x270>)
 8002eca:	2218      	movs	r2, #24
 8002ecc:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ece:	4b57      	ldr	r3, [pc, #348]	; (800302c <HAL_TIM_PWM_MspInit+0x270>)
 8002ed0:	2240      	movs	r2, #64	; 0x40
 8002ed2:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ed4:	4b55      	ldr	r3, [pc, #340]	; (800302c <HAL_TIM_PWM_MspInit+0x270>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002eda:	4b54      	ldr	r3, [pc, #336]	; (800302c <HAL_TIM_PWM_MspInit+0x270>)
 8002edc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ee0:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ee2:	4b52      	ldr	r3, [pc, #328]	; (800302c <HAL_TIM_PWM_MspInit+0x270>)
 8002ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ee8:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002eea:	4b50      	ldr	r3, [pc, #320]	; (800302c <HAL_TIM_PWM_MspInit+0x270>)
 8002eec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ef0:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8002ef2:	4b4e      	ldr	r3, [pc, #312]	; (800302c <HAL_TIM_PWM_MspInit+0x270>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002ef8:	4b4c      	ldr	r3, [pc, #304]	; (800302c <HAL_TIM_PWM_MspInit+0x270>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002efe:	4b4b      	ldr	r3, [pc, #300]	; (800302c <HAL_TIM_PWM_MspInit+0x270>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8002f04:	4849      	ldr	r0, [pc, #292]	; (800302c <HAL_TIM_PWM_MspInit+0x270>)
 8002f06:	f002 f91f 	bl	8005148 <HAL_DMA_Init>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 8002f10:	f7ff fbf6 	bl	8002700 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a45      	ldr	r2, [pc, #276]	; (800302c <HAL_TIM_PWM_MspInit+0x270>)
 8002f18:	629a      	str	r2, [r3, #40]	; 0x28
 8002f1a:	4a44      	ldr	r2, [pc, #272]	; (800302c <HAL_TIM_PWM_MspInit+0x270>)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 8002f20:	4b44      	ldr	r3, [pc, #272]	; (8003034 <HAL_TIM_PWM_MspInit+0x278>)
 8002f22:	4a45      	ldr	r2, [pc, #276]	; (8003038 <HAL_TIM_PWM_MspInit+0x27c>)
 8002f24:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8002f26:	4b43      	ldr	r3, [pc, #268]	; (8003034 <HAL_TIM_PWM_MspInit+0x278>)
 8002f28:	2217      	movs	r2, #23
 8002f2a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f2c:	4b41      	ldr	r3, [pc, #260]	; (8003034 <HAL_TIM_PWM_MspInit+0x278>)
 8002f2e:	2240      	movs	r2, #64	; 0x40
 8002f30:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f32:	4b40      	ldr	r3, [pc, #256]	; (8003034 <HAL_TIM_PWM_MspInit+0x278>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002f38:	4b3e      	ldr	r3, [pc, #248]	; (8003034 <HAL_TIM_PWM_MspInit+0x278>)
 8002f3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f3e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f40:	4b3c      	ldr	r3, [pc, #240]	; (8003034 <HAL_TIM_PWM_MspInit+0x278>)
 8002f42:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f46:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002f48:	4b3a      	ldr	r3, [pc, #232]	; (8003034 <HAL_TIM_PWM_MspInit+0x278>)
 8002f4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f4e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8002f50:	4b38      	ldr	r3, [pc, #224]	; (8003034 <HAL_TIM_PWM_MspInit+0x278>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002f56:	4b37      	ldr	r3, [pc, #220]	; (8003034 <HAL_TIM_PWM_MspInit+0x278>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f5c:	4b35      	ldr	r3, [pc, #212]	; (8003034 <HAL_TIM_PWM_MspInit+0x278>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8002f62:	4834      	ldr	r0, [pc, #208]	; (8003034 <HAL_TIM_PWM_MspInit+0x278>)
 8002f64:	f002 f8f0 	bl	8005148 <HAL_DMA_Init>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 8002f6e:	f7ff fbc7 	bl	8002700 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a2f      	ldr	r2, [pc, #188]	; (8003034 <HAL_TIM_PWM_MspInit+0x278>)
 8002f76:	625a      	str	r2, [r3, #36]	; 0x24
 8002f78:	4a2e      	ldr	r2, [pc, #184]	; (8003034 <HAL_TIM_PWM_MspInit+0x278>)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002f7e:	e0a6      	b.n	80030ce <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a2d      	ldr	r2, [pc, #180]	; (800303c <HAL_TIM_PWM_MspInit+0x280>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d15e      	bne.n	8003048 <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f8a:	4b23      	ldr	r3, [pc, #140]	; (8003018 <HAL_TIM_PWM_MspInit+0x25c>)
 8002f8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f90:	4a21      	ldr	r2, [pc, #132]	; (8003018 <HAL_TIM_PWM_MspInit+0x25c>)
 8002f92:	f043 0304 	orr.w	r3, r3, #4
 8002f96:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f9a:	4b1f      	ldr	r3, [pc, #124]	; (8003018 <HAL_TIM_PWM_MspInit+0x25c>)
 8002f9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fa0:	f003 0304 	and.w	r3, r3, #4
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 8002fa8:	4b25      	ldr	r3, [pc, #148]	; (8003040 <HAL_TIM_PWM_MspInit+0x284>)
 8002faa:	4a26      	ldr	r2, [pc, #152]	; (8003044 <HAL_TIM_PWM_MspInit+0x288>)
 8002fac:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 8002fae:	4b24      	ldr	r3, [pc, #144]	; (8003040 <HAL_TIM_PWM_MspInit+0x284>)
 8002fb0:	221f      	movs	r2, #31
 8002fb2:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fb4:	4b22      	ldr	r3, [pc, #136]	; (8003040 <HAL_TIM_PWM_MspInit+0x284>)
 8002fb6:	2240      	movs	r2, #64	; 0x40
 8002fb8:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fba:	4b21      	ldr	r3, [pc, #132]	; (8003040 <HAL_TIM_PWM_MspInit+0x284>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002fc0:	4b1f      	ldr	r3, [pc, #124]	; (8003040 <HAL_TIM_PWM_MspInit+0x284>)
 8002fc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fc6:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002fc8:	4b1d      	ldr	r3, [pc, #116]	; (8003040 <HAL_TIM_PWM_MspInit+0x284>)
 8002fca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002fce:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002fd0:	4b1b      	ldr	r3, [pc, #108]	; (8003040 <HAL_TIM_PWM_MspInit+0x284>)
 8002fd2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002fd6:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8002fd8:	4b19      	ldr	r3, [pc, #100]	; (8003040 <HAL_TIM_PWM_MspInit+0x284>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002fde:	4b18      	ldr	r3, [pc, #96]	; (8003040 <HAL_TIM_PWM_MspInit+0x284>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fe4:	4b16      	ldr	r3, [pc, #88]	; (8003040 <HAL_TIM_PWM_MspInit+0x284>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8002fea:	4815      	ldr	r0, [pc, #84]	; (8003040 <HAL_TIM_PWM_MspInit+0x284>)
 8002fec:	f002 f8ac 	bl	8005148 <HAL_DMA_Init>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 8002ff6:	f7ff fb83 	bl	8002700 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a10      	ldr	r2, [pc, #64]	; (8003040 <HAL_TIM_PWM_MspInit+0x284>)
 8002ffe:	62da      	str	r2, [r3, #44]	; 0x2c
 8003000:	4a0f      	ldr	r2, [pc, #60]	; (8003040 <HAL_TIM_PWM_MspInit+0x284>)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003006:	2200      	movs	r2, #0
 8003008:	2100      	movs	r1, #0
 800300a:	201e      	movs	r0, #30
 800300c:	f002 f867 	bl	80050de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003010:	201e      	movs	r0, #30
 8003012:	f002 f87e 	bl	8005112 <HAL_NVIC_EnableIRQ>
}
 8003016:	e05a      	b.n	80030ce <HAL_TIM_PWM_MspInit+0x312>
 8003018:	58024400 	.word	0x58024400
 800301c:	58020000 	.word	0x58020000
 8003020:	24001214 	.word	0x24001214
 8003024:	40020028 	.word	0x40020028
 8003028:	40000400 	.word	0x40000400
 800302c:	2400128c 	.word	0x2400128c
 8003030:	40020058 	.word	0x40020058
 8003034:	24001304 	.word	0x24001304
 8003038:	40020070 	.word	0x40020070
 800303c:	40000800 	.word	0x40000800
 8003040:	2400137c 	.word	0x2400137c
 8003044:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a22      	ldr	r2, [pc, #136]	; (80030d8 <HAL_TIM_PWM_MspInit+0x31c>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d13d      	bne.n	80030ce <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003052:	4b22      	ldr	r3, [pc, #136]	; (80030dc <HAL_TIM_PWM_MspInit+0x320>)
 8003054:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003058:	4a20      	ldr	r2, [pc, #128]	; (80030dc <HAL_TIM_PWM_MspInit+0x320>)
 800305a:	f043 0308 	orr.w	r3, r3, #8
 800305e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003062:	4b1e      	ldr	r3, [pc, #120]	; (80030dc <HAL_TIM_PWM_MspInit+0x320>)
 8003064:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	60bb      	str	r3, [r7, #8]
 800306e:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 8003070:	4b1b      	ldr	r3, [pc, #108]	; (80030e0 <HAL_TIM_PWM_MspInit+0x324>)
 8003072:	4a1c      	ldr	r2, [pc, #112]	; (80030e4 <HAL_TIM_PWM_MspInit+0x328>)
 8003074:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 8003076:	4b1a      	ldr	r3, [pc, #104]	; (80030e0 <HAL_TIM_PWM_MspInit+0x324>)
 8003078:	223a      	movs	r2, #58	; 0x3a
 800307a:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800307c:	4b18      	ldr	r3, [pc, #96]	; (80030e0 <HAL_TIM_PWM_MspInit+0x324>)
 800307e:	2240      	movs	r2, #64	; 0x40
 8003080:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8003082:	4b17      	ldr	r3, [pc, #92]	; (80030e0 <HAL_TIM_PWM_MspInit+0x324>)
 8003084:	2200      	movs	r2, #0
 8003086:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8003088:	4b15      	ldr	r3, [pc, #84]	; (80030e0 <HAL_TIM_PWM_MspInit+0x324>)
 800308a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800308e:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003090:	4b13      	ldr	r3, [pc, #76]	; (80030e0 <HAL_TIM_PWM_MspInit+0x324>)
 8003092:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003096:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003098:	4b11      	ldr	r3, [pc, #68]	; (80030e0 <HAL_TIM_PWM_MspInit+0x324>)
 800309a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800309e:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 80030a0:	4b0f      	ldr	r3, [pc, #60]	; (80030e0 <HAL_TIM_PWM_MspInit+0x324>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80030a6:	4b0e      	ldr	r3, [pc, #56]	; (80030e0 <HAL_TIM_PWM_MspInit+0x324>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030ac:	4b0c      	ldr	r3, [pc, #48]	; (80030e0 <HAL_TIM_PWM_MspInit+0x324>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 80030b2:	480b      	ldr	r0, [pc, #44]	; (80030e0 <HAL_TIM_PWM_MspInit+0x324>)
 80030b4:	f002 f848 	bl	8005148 <HAL_DMA_Init>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 80030be:	f7ff fb1f 	bl	8002700 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a06      	ldr	r2, [pc, #24]	; (80030e0 <HAL_TIM_PWM_MspInit+0x324>)
 80030c6:	631a      	str	r2, [r3, #48]	; 0x30
 80030c8:	4a05      	ldr	r2, [pc, #20]	; (80030e0 <HAL_TIM_PWM_MspInit+0x324>)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6393      	str	r3, [r2, #56]	; 0x38
}
 80030ce:	bf00      	nop
 80030d0:	3730      	adds	r7, #48	; 0x30
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40000c00 	.word	0x40000c00
 80030dc:	58024400 	.word	0x58024400
 80030e0:	240013f4 	.word	0x240013f4
 80030e4:	40020040 	.word	0x40020040

080030e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08c      	sub	sp, #48	; 0x30
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f0:	f107 031c 	add.w	r3, r7, #28
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	605a      	str	r2, [r3, #4]
 80030fa:	609a      	str	r2, [r3, #8]
 80030fc:	60da      	str	r2, [r3, #12]
 80030fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003108:	d120      	bne.n	800314c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800310a:	4b52      	ldr	r3, [pc, #328]	; (8003254 <HAL_TIM_MspPostInit+0x16c>)
 800310c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003110:	4a50      	ldr	r2, [pc, #320]	; (8003254 <HAL_TIM_MspPostInit+0x16c>)
 8003112:	f043 0302 	orr.w	r3, r3, #2
 8003116:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800311a:	4b4e      	ldr	r3, [pc, #312]	; (8003254 <HAL_TIM_MspPostInit+0x16c>)
 800311c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	61bb      	str	r3, [r7, #24]
 8003126:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003128:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800312c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312e:	2302      	movs	r3, #2
 8003130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003132:	2302      	movs	r3, #2
 8003134:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003136:	2300      	movs	r3, #0
 8003138:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800313a:	2301      	movs	r3, #1
 800313c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800313e:	f107 031c 	add.w	r3, r7, #28
 8003142:	4619      	mov	r1, r3
 8003144:	4844      	ldr	r0, [pc, #272]	; (8003258 <HAL_TIM_MspPostInit+0x170>)
 8003146:	f004 fc39 	bl	80079bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800314a:	e07f      	b.n	800324c <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a42      	ldr	r2, [pc, #264]	; (800325c <HAL_TIM_MspPostInit+0x174>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d11f      	bne.n	8003196 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003156:	4b3f      	ldr	r3, [pc, #252]	; (8003254 <HAL_TIM_MspPostInit+0x16c>)
 8003158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800315c:	4a3d      	ldr	r2, [pc, #244]	; (8003254 <HAL_TIM_MspPostInit+0x16c>)
 800315e:	f043 0302 	orr.w	r3, r3, #2
 8003162:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003166:	4b3b      	ldr	r3, [pc, #236]	; (8003254 <HAL_TIM_MspPostInit+0x16c>)
 8003168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	617b      	str	r3, [r7, #20]
 8003172:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003174:	2330      	movs	r3, #48	; 0x30
 8003176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003178:	2302      	movs	r3, #2
 800317a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800317c:	2302      	movs	r3, #2
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003180:	2300      	movs	r3, #0
 8003182:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003184:	2302      	movs	r3, #2
 8003186:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003188:	f107 031c 	add.w	r3, r7, #28
 800318c:	4619      	mov	r1, r3
 800318e:	4832      	ldr	r0, [pc, #200]	; (8003258 <HAL_TIM_MspPostInit+0x170>)
 8003190:	f004 fc14 	bl	80079bc <HAL_GPIO_Init>
}
 8003194:	e05a      	b.n	800324c <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a31      	ldr	r2, [pc, #196]	; (8003260 <HAL_TIM_MspPostInit+0x178>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d131      	bne.n	8003204 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031a0:	4b2c      	ldr	r3, [pc, #176]	; (8003254 <HAL_TIM_MspPostInit+0x16c>)
 80031a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031a6:	4a2b      	ldr	r2, [pc, #172]	; (8003254 <HAL_TIM_MspPostInit+0x16c>)
 80031a8:	f043 0308 	orr.w	r3, r3, #8
 80031ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031b0:	4b28      	ldr	r3, [pc, #160]	; (8003254 <HAL_TIM_MspPostInit+0x16c>)
 80031b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	613b      	str	r3, [r7, #16]
 80031bc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80031be:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80031c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c4:	2302      	movs	r3, #2
 80031c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c8:	2300      	movs	r3, #0
 80031ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031cc:	2300      	movs	r3, #0
 80031ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80031d0:	2302      	movs	r3, #2
 80031d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031d4:	f107 031c 	add.w	r3, r7, #28
 80031d8:	4619      	mov	r1, r3
 80031da:	4822      	ldr	r0, [pc, #136]	; (8003264 <HAL_TIM_MspPostInit+0x17c>)
 80031dc:	f004 fbee 	bl	80079bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80031e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80031e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e6:	2302      	movs	r3, #2
 80031e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80031ea:	2302      	movs	r3, #2
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ee:	2300      	movs	r3, #0
 80031f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80031f2:	2302      	movs	r3, #2
 80031f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031f6:	f107 031c 	add.w	r3, r7, #28
 80031fa:	4619      	mov	r1, r3
 80031fc:	4819      	ldr	r0, [pc, #100]	; (8003264 <HAL_TIM_MspPostInit+0x17c>)
 80031fe:	f004 fbdd 	bl	80079bc <HAL_GPIO_Init>
}
 8003202:	e023      	b.n	800324c <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a17      	ldr	r2, [pc, #92]	; (8003268 <HAL_TIM_MspPostInit+0x180>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d11e      	bne.n	800324c <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800320e:	4b11      	ldr	r3, [pc, #68]	; (8003254 <HAL_TIM_MspPostInit+0x16c>)
 8003210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003214:	4a0f      	ldr	r2, [pc, #60]	; (8003254 <HAL_TIM_MspPostInit+0x16c>)
 8003216:	f043 0301 	orr.w	r3, r3, #1
 800321a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800321e:	4b0d      	ldr	r3, [pc, #52]	; (8003254 <HAL_TIM_MspPostInit+0x16c>)
 8003220:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800322c:	2308      	movs	r3, #8
 800322e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003230:	2302      	movs	r3, #2
 8003232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003234:	2302      	movs	r3, #2
 8003236:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003238:	2300      	movs	r3, #0
 800323a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800323c:	2302      	movs	r3, #2
 800323e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003240:	f107 031c 	add.w	r3, r7, #28
 8003244:	4619      	mov	r1, r3
 8003246:	4809      	ldr	r0, [pc, #36]	; (800326c <HAL_TIM_MspPostInit+0x184>)
 8003248:	f004 fbb8 	bl	80079bc <HAL_GPIO_Init>
}
 800324c:	bf00      	nop
 800324e:	3730      	adds	r7, #48	; 0x30
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	58024400 	.word	0x58024400
 8003258:	58020400 	.word	0x58020400
 800325c:	40000400 	.word	0x40000400
 8003260:	40000800 	.word	0x40000800
 8003264:	58020c00 	.word	0x58020c00
 8003268:	40000c00 	.word	0x40000c00
 800326c:	58020000 	.word	0x58020000

08003270 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b0ba      	sub	sp, #232	; 0xe8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003278:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	605a      	str	r2, [r3, #4]
 8003282:	609a      	str	r2, [r3, #8]
 8003284:	60da      	str	r2, [r3, #12]
 8003286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003288:	f107 0318 	add.w	r3, r7, #24
 800328c:	22b8      	movs	r2, #184	; 0xb8
 800328e:	2100      	movs	r1, #0
 8003290:	4618      	mov	r0, r3
 8003292:	f013 fd61 	bl	8016d58 <memset>
  if(huart->Instance==UART4)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a4d      	ldr	r2, [pc, #308]	; (80033d0 <HAL_UART_MspInit+0x160>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d147      	bne.n	8003330 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80032a0:	f04f 0202 	mov.w	r2, #2
 80032a4:	f04f 0300 	mov.w	r3, #0
 80032a8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80032ac:	2300      	movs	r3, #0
 80032ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032b2:	f107 0318 	add.w	r3, r7, #24
 80032b6:	4618      	mov	r0, r3
 80032b8:	f007 f954 	bl	800a564 <HAL_RCCEx_PeriphCLKConfig>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80032c2:	f7ff fa1d 	bl	8002700 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80032c6:	4b43      	ldr	r3, [pc, #268]	; (80033d4 <HAL_UART_MspInit+0x164>)
 80032c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032cc:	4a41      	ldr	r2, [pc, #260]	; (80033d4 <HAL_UART_MspInit+0x164>)
 80032ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80032d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80032d6:	4b3f      	ldr	r3, [pc, #252]	; (80033d4 <HAL_UART_MspInit+0x164>)
 80032d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032e0:	617b      	str	r3, [r7, #20]
 80032e2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032e4:	4b3b      	ldr	r3, [pc, #236]	; (80033d4 <HAL_UART_MspInit+0x164>)
 80032e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032ea:	4a3a      	ldr	r2, [pc, #232]	; (80033d4 <HAL_UART_MspInit+0x164>)
 80032ec:	f043 0302 	orr.w	r3, r3, #2
 80032f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032f4:	4b37      	ldr	r3, [pc, #220]	; (80033d4 <HAL_UART_MspInit+0x164>)
 80032f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	613b      	str	r3, [r7, #16]
 8003300:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003302:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003306:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330a:	2302      	movs	r3, #2
 800330c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003310:	2300      	movs	r3, #0
 8003312:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003316:	2300      	movs	r3, #0
 8003318:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800331c:	2308      	movs	r3, #8
 800331e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003322:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003326:	4619      	mov	r1, r3
 8003328:	482b      	ldr	r0, [pc, #172]	; (80033d8 <HAL_UART_MspInit+0x168>)
 800332a:	f004 fb47 	bl	80079bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800332e:	e04a      	b.n	80033c6 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a29      	ldr	r2, [pc, #164]	; (80033dc <HAL_UART_MspInit+0x16c>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d145      	bne.n	80033c6 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800333a:	f04f 0201 	mov.w	r2, #1
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003346:	2300      	movs	r3, #0
 8003348:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800334c:	f107 0318 	add.w	r3, r7, #24
 8003350:	4618      	mov	r0, r3
 8003352:	f007 f907 	bl	800a564 <HAL_RCCEx_PeriphCLKConfig>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 800335c:	f7ff f9d0 	bl	8002700 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003360:	4b1c      	ldr	r3, [pc, #112]	; (80033d4 <HAL_UART_MspInit+0x164>)
 8003362:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003366:	4a1b      	ldr	r2, [pc, #108]	; (80033d4 <HAL_UART_MspInit+0x164>)
 8003368:	f043 0320 	orr.w	r3, r3, #32
 800336c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003370:	4b18      	ldr	r3, [pc, #96]	; (80033d4 <HAL_UART_MspInit+0x164>)
 8003372:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003376:	f003 0320 	and.w	r3, r3, #32
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800337e:	4b15      	ldr	r3, [pc, #84]	; (80033d4 <HAL_UART_MspInit+0x164>)
 8003380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003384:	4a13      	ldr	r2, [pc, #76]	; (80033d4 <HAL_UART_MspInit+0x164>)
 8003386:	f043 0304 	orr.w	r3, r3, #4
 800338a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800338e:	4b11      	ldr	r3, [pc, #68]	; (80033d4 <HAL_UART_MspInit+0x164>)
 8003390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	60bb      	str	r3, [r7, #8]
 800339a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800339c:	23c0      	movs	r3, #192	; 0xc0
 800339e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a2:	2302      	movs	r3, #2
 80033a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a8:	2300      	movs	r3, #0
 80033aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ae:	2300      	movs	r3, #0
 80033b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80033b4:	2307      	movs	r3, #7
 80033b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033ba:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80033be:	4619      	mov	r1, r3
 80033c0:	4807      	ldr	r0, [pc, #28]	; (80033e0 <HAL_UART_MspInit+0x170>)
 80033c2:	f004 fafb 	bl	80079bc <HAL_GPIO_Init>
}
 80033c6:	bf00      	nop
 80033c8:	37e8      	adds	r7, #232	; 0xe8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	40004c00 	.word	0x40004c00
 80033d4:	58024400 	.word	0x58024400
 80033d8:	58020400 	.word	0x58020400
 80033dc:	40011400 	.word	0x40011400
 80033e0:	58020800 	.word	0x58020800

080033e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033e8:	e7fe      	b.n	80033e8 <NMI_Handler+0x4>

080033ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033ea:	b480      	push	{r7}
 80033ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033ee:	e7fe      	b.n	80033ee <HardFault_Handler+0x4>

080033f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033f4:	e7fe      	b.n	80033f4 <MemManage_Handler+0x4>

080033f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033f6:	b480      	push	{r7}
 80033f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033fa:	e7fe      	b.n	80033fa <BusFault_Handler+0x4>

080033fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003400:	e7fe      	b.n	8003400 <UsageFault_Handler+0x4>

08003402 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003402:	b480      	push	{r7}
 8003404:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003406:	bf00      	nop
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003414:	bf00      	nop
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800341e:	b480      	push	{r7}
 8003420:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003422:	bf00      	nop
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003430:	f000 f9b0 	bl	8003794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003434:	bf00      	nop
 8003436:	bd80      	pop	{r7, pc}

08003438 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 800343c:	4802      	ldr	r0, [pc, #8]	; (8003448 <DMA1_Stream0_IRQHandler+0x10>)
 800343e:	f002 fc47 	bl	8005cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003442:	bf00      	nop
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	2400137c 	.word	0x2400137c

0800344c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8003450:	4802      	ldr	r0, [pc, #8]	; (800345c <DMA1_Stream1_IRQHandler+0x10>)
 8003452:	f002 fc3d 	bl	8005cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003456:	bf00      	nop
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	24001214 	.word	0x24001214

08003460 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8003464:	4802      	ldr	r0, [pc, #8]	; (8003470 <DMA1_Stream2_IRQHandler+0x10>)
 8003466:	f002 fc33 	bl	8005cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800346a:	bf00      	nop
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	240013f4 	.word	0x240013f4

08003474 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003478:	4802      	ldr	r0, [pc, #8]	; (8003484 <DMA1_Stream3_IRQHandler+0x10>)
 800347a:	f002 fc29 	bl	8005cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800347e:	bf00      	nop
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	2400128c 	.word	0x2400128c

08003488 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 800348c:	4802      	ldr	r0, [pc, #8]	; (8003498 <DMA1_Stream4_IRQHandler+0x10>)
 800348e:	f002 fc1f 	bl	8005cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003492:	bf00      	nop
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	24001304 	.word	0x24001304

0800349c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80034a0:	4802      	ldr	r0, [pc, #8]	; (80034ac <DMA1_Stream5_IRQHandler+0x10>)
 80034a2:	f002 fc15 	bl	8005cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80034a6:	bf00      	nop
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	24000cec 	.word	0x24000cec

080034b0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80034b4:	4802      	ldr	r0, [pc, #8]	; (80034c0 <TIM4_IRQHandler+0x10>)
 80034b6:	f00c f9df 	bl	800f878 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80034ba:	bf00      	nop
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	2400117c 	.word	0x2400117c

080034c4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80034c8:	4802      	ldr	r0, [pc, #8]	; (80034d4 <DMA2_Stream7_IRQHandler+0x10>)
 80034ca:	f002 fc01 	bl	8005cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80034ce:	bf00      	nop
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	24000d64 	.word	0x24000d64

080034d8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80034dc:	4802      	ldr	r0, [pc, #8]	; (80034e8 <OTG_HS_IRQHandler+0x10>)
 80034de:	f004 fec7 	bl	8008270 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80034e2:	bf00      	nop
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	24002a98 	.word	0x24002a98

080034ec <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 80034f0:	4802      	ldr	r0, [pc, #8]	; (80034fc <SDMMC2_IRQHandler+0x10>)
 80034f2:	f009 fe8d 	bl	800d210 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 80034f6:	bf00      	nop
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	24000ed0 	.word	0x24000ed0

08003500 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003508:	4a14      	ldr	r2, [pc, #80]	; (800355c <_sbrk+0x5c>)
 800350a:	4b15      	ldr	r3, [pc, #84]	; (8003560 <_sbrk+0x60>)
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003514:	4b13      	ldr	r3, [pc, #76]	; (8003564 <_sbrk+0x64>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d102      	bne.n	8003522 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800351c:	4b11      	ldr	r3, [pc, #68]	; (8003564 <_sbrk+0x64>)
 800351e:	4a12      	ldr	r2, [pc, #72]	; (8003568 <_sbrk+0x68>)
 8003520:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003522:	4b10      	ldr	r3, [pc, #64]	; (8003564 <_sbrk+0x64>)
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4413      	add	r3, r2
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	429a      	cmp	r2, r3
 800352e:	d207      	bcs.n	8003540 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003530:	f013 fbda 	bl	8016ce8 <__errno>
 8003534:	4603      	mov	r3, r0
 8003536:	220c      	movs	r2, #12
 8003538:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800353a:	f04f 33ff 	mov.w	r3, #4294967295
 800353e:	e009      	b.n	8003554 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003540:	4b08      	ldr	r3, [pc, #32]	; (8003564 <_sbrk+0x64>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003546:	4b07      	ldr	r3, [pc, #28]	; (8003564 <_sbrk+0x64>)
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4413      	add	r3, r2
 800354e:	4a05      	ldr	r2, [pc, #20]	; (8003564 <_sbrk+0x64>)
 8003550:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003552:	68fb      	ldr	r3, [r7, #12]
}
 8003554:	4618      	mov	r0, r3
 8003556:	3718      	adds	r7, #24
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	24050000 	.word	0x24050000
 8003560:	00000800 	.word	0x00000800
 8003564:	24001594 	.word	0x24001594
 8003568:	240031d8 	.word	0x240031d8

0800356c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003570:	4b32      	ldr	r3, [pc, #200]	; (800363c <SystemInit+0xd0>)
 8003572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003576:	4a31      	ldr	r2, [pc, #196]	; (800363c <SystemInit+0xd0>)
 8003578:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800357c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003580:	4b2f      	ldr	r3, [pc, #188]	; (8003640 <SystemInit+0xd4>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 030f 	and.w	r3, r3, #15
 8003588:	2b06      	cmp	r3, #6
 800358a:	d807      	bhi.n	800359c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800358c:	4b2c      	ldr	r3, [pc, #176]	; (8003640 <SystemInit+0xd4>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f023 030f 	bic.w	r3, r3, #15
 8003594:	4a2a      	ldr	r2, [pc, #168]	; (8003640 <SystemInit+0xd4>)
 8003596:	f043 0307 	orr.w	r3, r3, #7
 800359a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800359c:	4b29      	ldr	r3, [pc, #164]	; (8003644 <SystemInit+0xd8>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a28      	ldr	r2, [pc, #160]	; (8003644 <SystemInit+0xd8>)
 80035a2:	f043 0301 	orr.w	r3, r3, #1
 80035a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80035a8:	4b26      	ldr	r3, [pc, #152]	; (8003644 <SystemInit+0xd8>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80035ae:	4b25      	ldr	r3, [pc, #148]	; (8003644 <SystemInit+0xd8>)
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	4924      	ldr	r1, [pc, #144]	; (8003644 <SystemInit+0xd8>)
 80035b4:	4b24      	ldr	r3, [pc, #144]	; (8003648 <SystemInit+0xdc>)
 80035b6:	4013      	ands	r3, r2
 80035b8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80035ba:	4b21      	ldr	r3, [pc, #132]	; (8003640 <SystemInit+0xd4>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0308 	and.w	r3, r3, #8
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d007      	beq.n	80035d6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80035c6:	4b1e      	ldr	r3, [pc, #120]	; (8003640 <SystemInit+0xd4>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f023 030f 	bic.w	r3, r3, #15
 80035ce:	4a1c      	ldr	r2, [pc, #112]	; (8003640 <SystemInit+0xd4>)
 80035d0:	f043 0307 	orr.w	r3, r3, #7
 80035d4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80035d6:	4b1b      	ldr	r3, [pc, #108]	; (8003644 <SystemInit+0xd8>)
 80035d8:	2200      	movs	r2, #0
 80035da:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80035dc:	4b19      	ldr	r3, [pc, #100]	; (8003644 <SystemInit+0xd8>)
 80035de:	2200      	movs	r2, #0
 80035e0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80035e2:	4b18      	ldr	r3, [pc, #96]	; (8003644 <SystemInit+0xd8>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80035e8:	4b16      	ldr	r3, [pc, #88]	; (8003644 <SystemInit+0xd8>)
 80035ea:	4a18      	ldr	r2, [pc, #96]	; (800364c <SystemInit+0xe0>)
 80035ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80035ee:	4b15      	ldr	r3, [pc, #84]	; (8003644 <SystemInit+0xd8>)
 80035f0:	4a17      	ldr	r2, [pc, #92]	; (8003650 <SystemInit+0xe4>)
 80035f2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80035f4:	4b13      	ldr	r3, [pc, #76]	; (8003644 <SystemInit+0xd8>)
 80035f6:	4a17      	ldr	r2, [pc, #92]	; (8003654 <SystemInit+0xe8>)
 80035f8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80035fa:	4b12      	ldr	r3, [pc, #72]	; (8003644 <SystemInit+0xd8>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003600:	4b10      	ldr	r3, [pc, #64]	; (8003644 <SystemInit+0xd8>)
 8003602:	4a14      	ldr	r2, [pc, #80]	; (8003654 <SystemInit+0xe8>)
 8003604:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003606:	4b0f      	ldr	r3, [pc, #60]	; (8003644 <SystemInit+0xd8>)
 8003608:	2200      	movs	r2, #0
 800360a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800360c:	4b0d      	ldr	r3, [pc, #52]	; (8003644 <SystemInit+0xd8>)
 800360e:	4a11      	ldr	r2, [pc, #68]	; (8003654 <SystemInit+0xe8>)
 8003610:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003612:	4b0c      	ldr	r3, [pc, #48]	; (8003644 <SystemInit+0xd8>)
 8003614:	2200      	movs	r2, #0
 8003616:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003618:	4b0a      	ldr	r3, [pc, #40]	; (8003644 <SystemInit+0xd8>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a09      	ldr	r2, [pc, #36]	; (8003644 <SystemInit+0xd8>)
 800361e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003622:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003624:	4b07      	ldr	r3, [pc, #28]	; (8003644 <SystemInit+0xd8>)
 8003626:	2200      	movs	r2, #0
 8003628:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800362a:	4b0b      	ldr	r3, [pc, #44]	; (8003658 <SystemInit+0xec>)
 800362c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003630:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003632:	bf00      	nop
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	e000ed00 	.word	0xe000ed00
 8003640:	52002000 	.word	0x52002000
 8003644:	58024400 	.word	0x58024400
 8003648:	eaf6ed7f 	.word	0xeaf6ed7f
 800364c:	02020200 	.word	0x02020200
 8003650:	01ff0000 	.word	0x01ff0000
 8003654:	01010280 	.word	0x01010280
 8003658:	52004000 	.word	0x52004000

0800365c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800365c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003694 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003660:	f7ff ff84 	bl	800356c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003664:	480c      	ldr	r0, [pc, #48]	; (8003698 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003666:	490d      	ldr	r1, [pc, #52]	; (800369c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003668:	4a0d      	ldr	r2, [pc, #52]	; (80036a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800366a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800366c:	e002      	b.n	8003674 <LoopCopyDataInit>

0800366e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800366e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003672:	3304      	adds	r3, #4

08003674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003678:	d3f9      	bcc.n	800366e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800367a:	4a0a      	ldr	r2, [pc, #40]	; (80036a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800367c:	4c0a      	ldr	r4, [pc, #40]	; (80036a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800367e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003680:	e001      	b.n	8003686 <LoopFillZerobss>

08003682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003684:	3204      	adds	r2, #4

08003686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003688:	d3fb      	bcc.n	8003682 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800368a:	f013 fb33 	bl	8016cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800368e:	f7fd fe77 	bl	8001380 <main>
  bx  lr
 8003692:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003694:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003698:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800369c:	24000164 	.word	0x24000164
  ldr r2, =_sidata
 80036a0:	080183cc 	.word	0x080183cc
  ldr r2, =_sbss
 80036a4:	24000164 	.word	0x24000164
  ldr r4, =_ebss
 80036a8:	240031d4 	.word	0x240031d4

080036ac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036ac:	e7fe      	b.n	80036ac <ADC3_IRQHandler>
	...

080036b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036b6:	2003      	movs	r0, #3
 80036b8:	f001 fd06 	bl	80050c8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80036bc:	f006 fd7c 	bl	800a1b8 <HAL_RCC_GetSysClockFreq>
 80036c0:	4602      	mov	r2, r0
 80036c2:	4b15      	ldr	r3, [pc, #84]	; (8003718 <HAL_Init+0x68>)
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	0a1b      	lsrs	r3, r3, #8
 80036c8:	f003 030f 	and.w	r3, r3, #15
 80036cc:	4913      	ldr	r1, [pc, #76]	; (800371c <HAL_Init+0x6c>)
 80036ce:	5ccb      	ldrb	r3, [r1, r3]
 80036d0:	f003 031f 	and.w	r3, r3, #31
 80036d4:	fa22 f303 	lsr.w	r3, r2, r3
 80036d8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036da:	4b0f      	ldr	r3, [pc, #60]	; (8003718 <HAL_Init+0x68>)
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	4a0e      	ldr	r2, [pc, #56]	; (800371c <HAL_Init+0x6c>)
 80036e4:	5cd3      	ldrb	r3, [r2, r3]
 80036e6:	f003 031f 	and.w	r3, r3, #31
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	fa22 f303 	lsr.w	r3, r2, r3
 80036f0:	4a0b      	ldr	r2, [pc, #44]	; (8003720 <HAL_Init+0x70>)
 80036f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80036f4:	4a0b      	ldr	r2, [pc, #44]	; (8003724 <HAL_Init+0x74>)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80036fa:	200f      	movs	r0, #15
 80036fc:	f000 f814 	bl	8003728 <HAL_InitTick>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e002      	b.n	8003710 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800370a:	f7fe ffff 	bl	800270c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	58024400 	.word	0x58024400
 800371c:	080181b8 	.word	0x080181b8
 8003720:	24000004 	.word	0x24000004
 8003724:	24000000 	.word	0x24000000

08003728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003730:	4b15      	ldr	r3, [pc, #84]	; (8003788 <HAL_InitTick+0x60>)
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e021      	b.n	8003780 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800373c:	4b13      	ldr	r3, [pc, #76]	; (800378c <HAL_InitTick+0x64>)
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	4b11      	ldr	r3, [pc, #68]	; (8003788 <HAL_InitTick+0x60>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	4619      	mov	r1, r3
 8003746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800374a:	fbb3 f3f1 	udiv	r3, r3, r1
 800374e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003752:	4618      	mov	r0, r3
 8003754:	f001 fceb 	bl	800512e <HAL_SYSTICK_Config>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e00e      	b.n	8003780 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b0f      	cmp	r3, #15
 8003766:	d80a      	bhi.n	800377e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003768:	2200      	movs	r2, #0
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	f04f 30ff 	mov.w	r0, #4294967295
 8003770:	f001 fcb5 	bl	80050de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003774:	4a06      	ldr	r2, [pc, #24]	; (8003790 <HAL_InitTick+0x68>)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800377a:	2300      	movs	r3, #0
 800377c:	e000      	b.n	8003780 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
}
 8003780:	4618      	mov	r0, r3
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	2400000c 	.word	0x2400000c
 800378c:	24000000 	.word	0x24000000
 8003790:	24000008 	.word	0x24000008

08003794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003798:	4b06      	ldr	r3, [pc, #24]	; (80037b4 <HAL_IncTick+0x20>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	461a      	mov	r2, r3
 800379e:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <HAL_IncTick+0x24>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4413      	add	r3, r2
 80037a4:	4a04      	ldr	r2, [pc, #16]	; (80037b8 <HAL_IncTick+0x24>)
 80037a6:	6013      	str	r3, [r2, #0]
}
 80037a8:	bf00      	nop
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	2400000c 	.word	0x2400000c
 80037b8:	24001598 	.word	0x24001598

080037bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  return uwTick;
 80037c0:	4b03      	ldr	r3, [pc, #12]	; (80037d0 <HAL_GetTick+0x14>)
 80037c2:	681b      	ldr	r3, [r3, #0]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	24001598 	.word	0x24001598

080037d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037dc:	f7ff ffee 	bl	80037bc <HAL_GetTick>
 80037e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ec:	d005      	beq.n	80037fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037ee:	4b0a      	ldr	r3, [pc, #40]	; (8003818 <HAL_Delay+0x44>)
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	461a      	mov	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4413      	add	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037fa:	bf00      	nop
 80037fc:	f7ff ffde 	bl	80037bc <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	429a      	cmp	r2, r3
 800380a:	d8f7      	bhi.n	80037fc <HAL_Delay+0x28>
  {
  }
}
 800380c:	bf00      	nop
 800380e:	bf00      	nop
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	2400000c 	.word	0x2400000c

0800381c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003826:	4b07      	ldr	r3, [pc, #28]	; (8003844 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	43db      	mvns	r3, r3
 800382e:	401a      	ands	r2, r3
 8003830:	4904      	ldr	r1, [pc, #16]	; (8003844 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	4313      	orrs	r3, r2
 8003836:	604b      	str	r3, [r1, #4]
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	58000400 	.word	0x58000400

08003848 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	431a      	orrs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	609a      	str	r2, [r3, #8]
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
 8003876:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	609a      	str	r2, [r3, #8]
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
 80038bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	3360      	adds	r3, #96	; 0x60
 80038c2:	461a      	mov	r2, r3
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4413      	add	r3, r2
 80038ca:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4a10      	ldr	r2, [pc, #64]	; (8003910 <LL_ADC_SetOffset+0x60>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d10b      	bne.n	80038ec <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80038ea:	e00b      	b.n	8003904 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	430b      	orrs	r3, r1
 80038fe:	431a      	orrs	r2, r3
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	601a      	str	r2, [r3, #0]
}
 8003904:	bf00      	nop
 8003906:	371c      	adds	r7, #28
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	58026000 	.word	0x58026000

08003914 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	3360      	adds	r3, #96	; 0x60
 8003922:	461a      	mov	r2, r3
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003934:	4618      	mov	r0, r3
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	f003 031f 	and.w	r3, r3, #31
 800395a:	6879      	ldr	r1, [r7, #4]
 800395c:	fa01 f303 	lsl.w	r3, r1, r3
 8003960:	431a      	orrs	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	611a      	str	r2, [r3, #16]
}
 8003966:	bf00      	nop
 8003968:	3714      	adds	r7, #20
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
	...

08003974 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003974:	b480      	push	{r7}
 8003976:	b087      	sub	sp, #28
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	4a0c      	ldr	r2, [pc, #48]	; (80039b4 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d00e      	beq.n	80039a6 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	3360      	adds	r3, #96	; 0x60
 800398c:	461a      	mov	r2, r3
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4413      	add	r3, r2
 8003994:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	431a      	orrs	r2, r3
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	601a      	str	r2, [r3, #0]
  }
}
 80039a6:	bf00      	nop
 80039a8:	371c      	adds	r7, #28
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	58026000 	.word	0x58026000

080039b8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b087      	sub	sp, #28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4a0c      	ldr	r2, [pc, #48]	; (80039f8 <LL_ADC_SetOffsetSaturation+0x40>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d10e      	bne.n	80039ea <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	3360      	adds	r3, #96	; 0x60
 80039d0:	461a      	mov	r2, r3
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4413      	add	r3, r2
 80039d8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	431a      	orrs	r2, r3
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80039ea:	bf00      	nop
 80039ec:	371c      	adds	r7, #28
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	58026000 	.word	0x58026000

080039fc <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b087      	sub	sp, #28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4a0c      	ldr	r2, [pc, #48]	; (8003a3c <LL_ADC_SetOffsetSign+0x40>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d10e      	bne.n	8003a2e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	3360      	adds	r3, #96	; 0x60
 8003a14:	461a      	mov	r2, r3
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003a2e:	bf00      	nop
 8003a30:	371c      	adds	r7, #28
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	58026000 	.word	0x58026000

08003a40 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b087      	sub	sp, #28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	3360      	adds	r3, #96	; 0x60
 8003a50:	461a      	mov	r2, r3
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	4a0c      	ldr	r2, [pc, #48]	; (8003a90 <LL_ADC_SetOffsetState+0x50>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d108      	bne.n	8003a74 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003a72:	e007      	b.n	8003a84 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	601a      	str	r2, [r3, #0]
}
 8003a84:	bf00      	nop
 8003a86:	371c      	adds	r7, #28
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	58026000 	.word	0x58026000

08003a94 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	3330      	adds	r3, #48	; 0x30
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	0a1b      	lsrs	r3, r3, #8
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	f003 030c 	and.w	r3, r3, #12
 8003ab0:	4413      	add	r3, r2
 8003ab2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	f003 031f 	and.w	r3, r3, #31
 8003abe:	211f      	movs	r1, #31
 8003ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	401a      	ands	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	0e9b      	lsrs	r3, r3, #26
 8003acc:	f003 011f 	and.w	r1, r3, #31
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f003 031f 	and.w	r3, r3, #31
 8003ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8003ada:	431a      	orrs	r2, r3
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003ae0:	bf00      	nop
 8003ae2:	371c      	adds	r7, #28
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b087      	sub	sp, #28
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	3314      	adds	r3, #20
 8003afc:	461a      	mov	r2, r3
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	0e5b      	lsrs	r3, r3, #25
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	4413      	add	r3, r2
 8003b0a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	0d1b      	lsrs	r3, r3, #20
 8003b14:	f003 031f 	and.w	r3, r3, #31
 8003b18:	2107      	movs	r1, #7
 8003b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b1e:	43db      	mvns	r3, r3
 8003b20:	401a      	ands	r2, r3
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	0d1b      	lsrs	r3, r3, #20
 8003b26:	f003 031f 	and.w	r3, r3, #31
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b30:	431a      	orrs	r2, r3
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003b36:	bf00      	nop
 8003b38:	371c      	adds	r7, #28
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
	...

08003b44 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4a1a      	ldr	r2, [pc, #104]	; (8003bbc <LL_ADC_SetChannelSingleDiff+0x78>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d115      	bne.n	8003b84 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b64:	43db      	mvns	r3, r3
 8003b66:	401a      	ands	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f003 0318 	and.w	r3, r3, #24
 8003b6e:	4914      	ldr	r1, [pc, #80]	; (8003bc0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003b70:	40d9      	lsrs	r1, r3
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	400b      	ands	r3, r1
 8003b76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003b82:	e014      	b.n	8003bae <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b90:	43db      	mvns	r3, r3
 8003b92:	401a      	ands	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f003 0318 	and.w	r3, r3, #24
 8003b9a:	4909      	ldr	r1, [pc, #36]	; (8003bc0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003b9c:	40d9      	lsrs	r1, r3
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	400b      	ands	r3, r1
 8003ba2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003bae:	bf00      	nop
 8003bb0:	3714      	adds	r7, #20
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	58026000 	.word	0x58026000
 8003bc0:	000fffff 	.word	0x000fffff

08003bc4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	4b04      	ldr	r3, [pc, #16]	; (8003be4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6093      	str	r3, [r2, #8]
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	5fffffc0 	.word	0x5fffffc0

08003be8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bfc:	d101      	bne.n	8003c02 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e000      	b.n	8003c04 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	4b05      	ldr	r3, [pc, #20]	; (8003c34 <LL_ADC_EnableInternalRegulator+0x24>)
 8003c1e:	4013      	ands	r3, r2
 8003c20:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	6fffffc0 	.word	0x6fffffc0

08003c38 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c4c:	d101      	bne.n	8003c52 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e000      	b.n	8003c54 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d101      	bne.n	8003c78 <LL_ADC_IsEnabled+0x18>
 8003c74:	2301      	movs	r3, #1
 8003c76:	e000      	b.n	8003c7a <LL_ADC_IsEnabled+0x1a>
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 0304 	and.w	r3, r3, #4
 8003c96:	2b04      	cmp	r3, #4
 8003c98:	d101      	bne.n	8003c9e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e000      	b.n	8003ca0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f003 0308 	and.w	r3, r3, #8
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d101      	bne.n	8003cc4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e000      	b.n	8003cc6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
	...

08003cd4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003cd4:	b590      	push	{r4, r7, lr}
 8003cd6:	b089      	sub	sp, #36	; 0x24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e1ee      	b.n	80040cc <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d109      	bne.n	8003d10 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f7fe fd1f 	bl	8002740 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff ff67 	bl	8003be8 <LL_ADC_IsDeepPowerDownEnabled>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d004      	beq.n	8003d2a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7ff ff4d 	bl	8003bc4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff ff82 	bl	8003c38 <LL_ADC_IsInternalRegulatorEnabled>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d114      	bne.n	8003d64 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7ff ff66 	bl	8003c10 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d44:	4b8e      	ldr	r3, [pc, #568]	; (8003f80 <HAL_ADC_Init+0x2ac>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	099b      	lsrs	r3, r3, #6
 8003d4a:	4a8e      	ldr	r2, [pc, #568]	; (8003f84 <HAL_ADC_Init+0x2b0>)
 8003d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d50:	099b      	lsrs	r3, r3, #6
 8003d52:	3301      	adds	r3, #1
 8003d54:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003d56:	e002      	b.n	8003d5e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1f9      	bne.n	8003d58 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff ff65 	bl	8003c38 <LL_ADC_IsInternalRegulatorEnabled>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10d      	bne.n	8003d90 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d78:	f043 0210 	orr.w	r2, r3, #16
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d84:	f043 0201 	orr.w	r2, r3, #1
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7ff ff76 	bl	8003c86 <LL_ADC_REG_IsConversionOngoing>
 8003d9a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da0:	f003 0310 	and.w	r3, r3, #16
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f040 8188 	bne.w	80040ba <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f040 8184 	bne.w	80040ba <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003db6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003dba:	f043 0202 	orr.w	r2, r3, #2
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7ff ff4a 	bl	8003c60 <LL_ADC_IsEnabled>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d136      	bne.n	8003e40 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a6c      	ldr	r2, [pc, #432]	; (8003f88 <HAL_ADC_Init+0x2b4>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d004      	beq.n	8003de6 <HAL_ADC_Init+0x112>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a6a      	ldr	r2, [pc, #424]	; (8003f8c <HAL_ADC_Init+0x2b8>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d10e      	bne.n	8003e04 <HAL_ADC_Init+0x130>
 8003de6:	4868      	ldr	r0, [pc, #416]	; (8003f88 <HAL_ADC_Init+0x2b4>)
 8003de8:	f7ff ff3a 	bl	8003c60 <LL_ADC_IsEnabled>
 8003dec:	4604      	mov	r4, r0
 8003dee:	4867      	ldr	r0, [pc, #412]	; (8003f8c <HAL_ADC_Init+0x2b8>)
 8003df0:	f7ff ff36 	bl	8003c60 <LL_ADC_IsEnabled>
 8003df4:	4603      	mov	r3, r0
 8003df6:	4323      	orrs	r3, r4
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	bf0c      	ite	eq
 8003dfc:	2301      	moveq	r3, #1
 8003dfe:	2300      	movne	r3, #0
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	e008      	b.n	8003e16 <HAL_ADC_Init+0x142>
 8003e04:	4862      	ldr	r0, [pc, #392]	; (8003f90 <HAL_ADC_Init+0x2bc>)
 8003e06:	f7ff ff2b 	bl	8003c60 <LL_ADC_IsEnabled>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	bf0c      	ite	eq
 8003e10:	2301      	moveq	r3, #1
 8003e12:	2300      	movne	r3, #0
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d012      	beq.n	8003e40 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a5a      	ldr	r2, [pc, #360]	; (8003f88 <HAL_ADC_Init+0x2b4>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d004      	beq.n	8003e2e <HAL_ADC_Init+0x15a>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a58      	ldr	r2, [pc, #352]	; (8003f8c <HAL_ADC_Init+0x2b8>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d101      	bne.n	8003e32 <HAL_ADC_Init+0x15e>
 8003e2e:	4a59      	ldr	r2, [pc, #356]	; (8003f94 <HAL_ADC_Init+0x2c0>)
 8003e30:	e000      	b.n	8003e34 <HAL_ADC_Init+0x160>
 8003e32:	4a59      	ldr	r2, [pc, #356]	; (8003f98 <HAL_ADC_Init+0x2c4>)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	4619      	mov	r1, r3
 8003e3a:	4610      	mov	r0, r2
 8003e3c:	f7ff fd04 	bl	8003848 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a52      	ldr	r2, [pc, #328]	; (8003f90 <HAL_ADC_Init+0x2bc>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d129      	bne.n	8003e9e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	7e5b      	ldrb	r3, [r3, #25]
 8003e4e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003e54:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003e5a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	2b08      	cmp	r3, #8
 8003e62:	d013      	beq.n	8003e8c <HAL_ADC_Init+0x1b8>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	2b0c      	cmp	r3, #12
 8003e6a:	d00d      	beq.n	8003e88 <HAL_ADC_Init+0x1b4>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	2b1c      	cmp	r3, #28
 8003e72:	d007      	beq.n	8003e84 <HAL_ADC_Init+0x1b0>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	2b18      	cmp	r3, #24
 8003e7a:	d101      	bne.n	8003e80 <HAL_ADC_Init+0x1ac>
 8003e7c:	2318      	movs	r3, #24
 8003e7e:	e006      	b.n	8003e8e <HAL_ADC_Init+0x1ba>
 8003e80:	2300      	movs	r3, #0
 8003e82:	e004      	b.n	8003e8e <HAL_ADC_Init+0x1ba>
 8003e84:	2310      	movs	r3, #16
 8003e86:	e002      	b.n	8003e8e <HAL_ADC_Init+0x1ba>
 8003e88:	2308      	movs	r3, #8
 8003e8a:	e000      	b.n	8003e8e <HAL_ADC_Init+0x1ba>
 8003e8c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003e8e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e96:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	61bb      	str	r3, [r7, #24]
 8003e9c:	e00e      	b.n	8003ebc <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	7e5b      	ldrb	r3, [r3, #25]
 8003ea2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003ea8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003eae:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003eb6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d106      	bne.n	8003ed4 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	045b      	lsls	r3, r3, #17
 8003ece:	69ba      	ldr	r2, [r7, #24]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d009      	beq.n	8003ef0 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a26      	ldr	r2, [pc, #152]	; (8003f90 <HAL_ADC_Init+0x2bc>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d115      	bne.n	8003f26 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68da      	ldr	r2, [r3, #12]
 8003f00:	4b26      	ldr	r3, [pc, #152]	; (8003f9c <HAL_ADC_Init+0x2c8>)
 8003f02:	4013      	ands	r3, r2
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	6812      	ldr	r2, [r2, #0]
 8003f08:	69b9      	ldr	r1, [r7, #24]
 8003f0a:	430b      	orrs	r3, r1
 8003f0c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	611a      	str	r2, [r3, #16]
 8003f24:	e009      	b.n	8003f3a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68da      	ldr	r2, [r3, #12]
 8003f2c:	4b1c      	ldr	r3, [pc, #112]	; (8003fa0 <HAL_ADC_Init+0x2cc>)
 8003f2e:	4013      	ands	r3, r2
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	6812      	ldr	r2, [r2, #0]
 8003f34:	69b9      	ldr	r1, [r7, #24]
 8003f36:	430b      	orrs	r3, r1
 8003f38:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff fea1 	bl	8003c86 <LL_ADC_REG_IsConversionOngoing>
 8003f44:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff feae 	bl	8003cac <LL_ADC_INJ_IsConversionOngoing>
 8003f50:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f040 808e 	bne.w	8004076 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f040 808a 	bne.w	8004076 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a0a      	ldr	r2, [pc, #40]	; (8003f90 <HAL_ADC_Init+0x2bc>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d11b      	bne.n	8003fa4 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	7e1b      	ldrb	r3, [r3, #24]
 8003f70:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f78:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	61bb      	str	r3, [r7, #24]
 8003f7e:	e018      	b.n	8003fb2 <HAL_ADC_Init+0x2de>
 8003f80:	24000000 	.word	0x24000000
 8003f84:	053e2d63 	.word	0x053e2d63
 8003f88:	40022000 	.word	0x40022000
 8003f8c:	40022100 	.word	0x40022100
 8003f90:	58026000 	.word	0x58026000
 8003f94:	40022300 	.word	0x40022300
 8003f98:	58026300 	.word	0x58026300
 8003f9c:	fff04007 	.word	0xfff04007
 8003fa0:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	7e1b      	ldrb	r3, [r3, #24]
 8003fa8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68da      	ldr	r2, [r3, #12]
 8003fb8:	4b46      	ldr	r3, [pc, #280]	; (80040d4 <HAL_ADC_Init+0x400>)
 8003fba:	4013      	ands	r3, r2
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	6812      	ldr	r2, [r2, #0]
 8003fc0:	69b9      	ldr	r1, [r7, #24]
 8003fc2:	430b      	orrs	r3, r1
 8003fc4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d137      	bne.n	8004040 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd4:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a3f      	ldr	r2, [pc, #252]	; (80040d8 <HAL_ADC_Init+0x404>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d116      	bne.n	800400e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	691a      	ldr	r2, [r3, #16]
 8003fe6:	4b3d      	ldr	r3, [pc, #244]	; (80040dc <HAL_ADC_Init+0x408>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003ff2:	4311      	orrs	r1, r2
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ff8:	4311      	orrs	r1, r2
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003ffe:	430a      	orrs	r2, r1
 8004000:	431a      	orrs	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0201 	orr.w	r2, r2, #1
 800400a:	611a      	str	r2, [r3, #16]
 800400c:	e020      	b.n	8004050 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	4b32      	ldr	r3, [pc, #200]	; (80040e0 <HAL_ADC_Init+0x40c>)
 8004016:	4013      	ands	r3, r2
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800401c:	3a01      	subs	r2, #1
 800401e:	0411      	lsls	r1, r2, #16
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004024:	4311      	orrs	r1, r2
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800402a:	4311      	orrs	r1, r2
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004030:	430a      	orrs	r2, r1
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f042 0201 	orr.w	r2, r2, #1
 800403c:	611a      	str	r2, [r3, #16]
 800403e:	e007      	b.n	8004050 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	691a      	ldr	r2, [r3, #16]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 0201 	bic.w	r2, r2, #1
 800404e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a1b      	ldr	r2, [pc, #108]	; (80040d8 <HAL_ADC_Init+0x404>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d002      	beq.n	8004076 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 fd63 	bl	8004b3c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d10c      	bne.n	8004098 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004084:	f023 010f 	bic.w	r1, r3, #15
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	69db      	ldr	r3, [r3, #28]
 800408c:	1e5a      	subs	r2, r3, #1
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	631a      	str	r2, [r3, #48]	; 0x30
 8004096:	e007      	b.n	80040a8 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 020f 	bic.w	r2, r2, #15
 80040a6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ac:	f023 0303 	bic.w	r3, r3, #3
 80040b0:	f043 0201 	orr.w	r2, r3, #1
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	661a      	str	r2, [r3, #96]	; 0x60
 80040b8:	e007      	b.n	80040ca <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040be:	f043 0210 	orr.w	r2, r3, #16
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80040ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3724      	adds	r7, #36	; 0x24
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd90      	pop	{r4, r7, pc}
 80040d4:	ffffbffc 	.word	0xffffbffc
 80040d8:	58026000 	.word	0x58026000
 80040dc:	fc00f81f 	.word	0xfc00f81f
 80040e0:	fc00f81e 	.word	0xfc00f81e

080040e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80040e4:	b590      	push	{r4, r7, lr}
 80040e6:	b0b9      	sub	sp, #228	; 0xe4
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80040f4:	2300      	movs	r3, #0
 80040f6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040fe:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	4aa9      	ldr	r2, [pc, #676]	; (80043ac <HAL_ADC_ConfigChannel+0x2c8>)
 8004106:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800410e:	2b01      	cmp	r3, #1
 8004110:	d102      	bne.n	8004118 <HAL_ADC_ConfigChannel+0x34>
 8004112:	2302      	movs	r3, #2
 8004114:	f000 bcfa 	b.w	8004b0c <HAL_ADC_ConfigChannel+0xa28>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4618      	mov	r0, r3
 8004126:	f7ff fdae 	bl	8003c86 <LL_ADC_REG_IsConversionOngoing>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	f040 84de 	bne.w	8004aee <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a9e      	ldr	r2, [pc, #632]	; (80043b0 <HAL_ADC_ConfigChannel+0x2cc>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d033      	beq.n	80041a4 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004144:	2b00      	cmp	r3, #0
 8004146:	d108      	bne.n	800415a <HAL_ADC_ConfigChannel+0x76>
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	0e9b      	lsrs	r3, r3, #26
 800414e:	f003 031f 	and.w	r3, r3, #31
 8004152:	2201      	movs	r2, #1
 8004154:	fa02 f303 	lsl.w	r3, r2, r3
 8004158:	e01d      	b.n	8004196 <HAL_ADC_ConfigChannel+0xb2>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004162:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004166:	fa93 f3a3 	rbit	r3, r3
 800416a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800416e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004172:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004176:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 800417e:	2320      	movs	r3, #32
 8004180:	e004      	b.n	800418c <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8004182:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004186:	fab3 f383 	clz	r3, r3
 800418a:	b2db      	uxtb	r3, r3
 800418c:	f003 031f 	and.w	r3, r3, #31
 8004190:	2201      	movs	r2, #1
 8004192:	fa02 f303 	lsl.w	r3, r2, r3
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	6812      	ldr	r2, [r2, #0]
 800419a:	69d1      	ldr	r1, [r2, #28]
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	6812      	ldr	r2, [r2, #0]
 80041a0:	430b      	orrs	r3, r1
 80041a2:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6818      	ldr	r0, [r3, #0]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	6859      	ldr	r1, [r3, #4]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	461a      	mov	r2, r3
 80041b2:	f7ff fc6f 	bl	8003a94 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7ff fd63 	bl	8003c86 <LL_ADC_REG_IsConversionOngoing>
 80041c0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7ff fd6f 	bl	8003cac <LL_ADC_INJ_IsConversionOngoing>
 80041ce:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80041d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f040 8270 	bne.w	80046bc <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80041dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f040 826b 	bne.w	80046bc <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6818      	ldr	r0, [r3, #0]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	6819      	ldr	r1, [r3, #0]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	461a      	mov	r2, r3
 80041f4:	f7ff fc7a 	bl	8003aec <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a6c      	ldr	r2, [pc, #432]	; (80043b0 <HAL_ADC_ConfigChannel+0x2cc>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d10d      	bne.n	800421e <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	695a      	ldr	r2, [r3, #20]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	08db      	lsrs	r3, r3, #3
 800420e:	f003 0303 	and.w	r3, r3, #3
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	fa02 f303 	lsl.w	r3, r2, r3
 8004218:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800421c:	e032      	b.n	8004284 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800421e:	4b65      	ldr	r3, [pc, #404]	; (80043b4 <HAL_ADC_ConfigChannel+0x2d0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004226:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800422a:	d10b      	bne.n	8004244 <HAL_ADC_ConfigChannel+0x160>
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	695a      	ldr	r2, [r3, #20]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	089b      	lsrs	r3, r3, #2
 8004238:	f003 0307 	and.w	r3, r3, #7
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	fa02 f303 	lsl.w	r3, r2, r3
 8004242:	e01d      	b.n	8004280 <HAL_ADC_ConfigChannel+0x19c>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f003 0310 	and.w	r3, r3, #16
 800424e:	2b00      	cmp	r3, #0
 8004250:	d10b      	bne.n	800426a <HAL_ADC_ConfigChannel+0x186>
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	695a      	ldr	r2, [r3, #20]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	089b      	lsrs	r3, r3, #2
 800425e:	f003 0307 	and.w	r3, r3, #7
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	fa02 f303 	lsl.w	r3, r2, r3
 8004268:	e00a      	b.n	8004280 <HAL_ADC_ConfigChannel+0x19c>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	695a      	ldr	r2, [r3, #20]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	089b      	lsrs	r3, r3, #2
 8004276:	f003 0304 	and.w	r3, r3, #4
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	fa02 f303 	lsl.w	r3, r2, r3
 8004280:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	2b04      	cmp	r3, #4
 800428a:	d048      	beq.n	800431e <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6818      	ldr	r0, [r3, #0]
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	6919      	ldr	r1, [r3, #16]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800429c:	f7ff fb08 	bl	80038b0 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a42      	ldr	r2, [pc, #264]	; (80043b0 <HAL_ADC_ConfigChannel+0x2cc>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d119      	bne.n	80042de <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	6919      	ldr	r1, [r3, #16]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	461a      	mov	r2, r3
 80042b8:	f7ff fba0 	bl	80039fc <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6818      	ldr	r0, [r3, #0]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	6919      	ldr	r1, [r3, #16]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d102      	bne.n	80042d4 <HAL_ADC_ConfigChannel+0x1f0>
 80042ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042d2:	e000      	b.n	80042d6 <HAL_ADC_ConfigChannel+0x1f2>
 80042d4:	2300      	movs	r3, #0
 80042d6:	461a      	mov	r2, r3
 80042d8:	f7ff fb6e 	bl	80039b8 <LL_ADC_SetOffsetSaturation>
 80042dc:	e1ee      	b.n	80046bc <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6818      	ldr	r0, [r3, #0]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	6919      	ldr	r1, [r3, #16]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d102      	bne.n	80042f6 <HAL_ADC_ConfigChannel+0x212>
 80042f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80042f4:	e000      	b.n	80042f8 <HAL_ADC_ConfigChannel+0x214>
 80042f6:	2300      	movs	r3, #0
 80042f8:	461a      	mov	r2, r3
 80042fa:	f7ff fb3b 	bl	8003974 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6818      	ldr	r0, [r3, #0]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	6919      	ldr	r1, [r3, #16]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	7e1b      	ldrb	r3, [r3, #24]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d102      	bne.n	8004314 <HAL_ADC_ConfigChannel+0x230>
 800430e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004312:	e000      	b.n	8004316 <HAL_ADC_ConfigChannel+0x232>
 8004314:	2300      	movs	r3, #0
 8004316:	461a      	mov	r2, r3
 8004318:	f7ff fb12 	bl	8003940 <LL_ADC_SetDataRightShift>
 800431c:	e1ce      	b.n	80046bc <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a23      	ldr	r2, [pc, #140]	; (80043b0 <HAL_ADC_ConfigChannel+0x2cc>)
 8004324:	4293      	cmp	r3, r2
 8004326:	f040 8181 	bne.w	800462c <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2100      	movs	r1, #0
 8004330:	4618      	mov	r0, r3
 8004332:	f7ff faef 	bl	8003914 <LL_ADC_GetOffsetChannel>
 8004336:	4603      	mov	r3, r0
 8004338:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10a      	bne.n	8004356 <HAL_ADC_ConfigChannel+0x272>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2100      	movs	r1, #0
 8004346:	4618      	mov	r0, r3
 8004348:	f7ff fae4 	bl	8003914 <LL_ADC_GetOffsetChannel>
 800434c:	4603      	mov	r3, r0
 800434e:	0e9b      	lsrs	r3, r3, #26
 8004350:	f003 021f 	and.w	r2, r3, #31
 8004354:	e01e      	b.n	8004394 <HAL_ADC_ConfigChannel+0x2b0>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2100      	movs	r1, #0
 800435c:	4618      	mov	r0, r3
 800435e:	f7ff fad9 	bl	8003914 <LL_ADC_GetOffsetChannel>
 8004362:	4603      	mov	r3, r0
 8004364:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004368:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800436c:	fa93 f3a3 	rbit	r3, r3
 8004370:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8004374:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004378:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 800437c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004380:	2b00      	cmp	r3, #0
 8004382:	d101      	bne.n	8004388 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8004384:	2320      	movs	r3, #32
 8004386:	e004      	b.n	8004392 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8004388:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800438c:	fab3 f383 	clz	r3, r3
 8004390:	b2db      	uxtb	r3, r3
 8004392:	461a      	mov	r2, r3
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10b      	bne.n	80043b8 <HAL_ADC_ConfigChannel+0x2d4>
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	0e9b      	lsrs	r3, r3, #26
 80043a6:	f003 031f 	and.w	r3, r3, #31
 80043aa:	e01e      	b.n	80043ea <HAL_ADC_ConfigChannel+0x306>
 80043ac:	47ff0000 	.word	0x47ff0000
 80043b0:	58026000 	.word	0x58026000
 80043b4:	5c001000 	.word	0x5c001000
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043c4:	fa93 f3a3 	rbit	r3, r3
 80043c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80043cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80043d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80043d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d101      	bne.n	80043e0 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 80043dc:	2320      	movs	r3, #32
 80043de:	e004      	b.n	80043ea <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 80043e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80043e4:	fab3 f383 	clz	r3, r3
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d106      	bne.n	80043fc <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2200      	movs	r2, #0
 80043f4:	2100      	movs	r1, #0
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7ff fb22 	bl	8003a40 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2101      	movs	r1, #1
 8004402:	4618      	mov	r0, r3
 8004404:	f7ff fa86 	bl	8003914 <LL_ADC_GetOffsetChannel>
 8004408:	4603      	mov	r3, r0
 800440a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10a      	bne.n	8004428 <HAL_ADC_ConfigChannel+0x344>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2101      	movs	r1, #1
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff fa7b 	bl	8003914 <LL_ADC_GetOffsetChannel>
 800441e:	4603      	mov	r3, r0
 8004420:	0e9b      	lsrs	r3, r3, #26
 8004422:	f003 021f 	and.w	r2, r3, #31
 8004426:	e01e      	b.n	8004466 <HAL_ADC_ConfigChannel+0x382>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2101      	movs	r1, #1
 800442e:	4618      	mov	r0, r3
 8004430:	f7ff fa70 	bl	8003914 <LL_ADC_GetOffsetChannel>
 8004434:	4603      	mov	r3, r0
 8004436:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800443a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800443e:	fa93 f3a3 	rbit	r3, r3
 8004442:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004446:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800444a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800444e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8004456:	2320      	movs	r3, #32
 8004458:	e004      	b.n	8004464 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800445a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800445e:	fab3 f383 	clz	r3, r3
 8004462:	b2db      	uxtb	r3, r3
 8004464:	461a      	mov	r2, r3
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800446e:	2b00      	cmp	r3, #0
 8004470:	d105      	bne.n	800447e <HAL_ADC_ConfigChannel+0x39a>
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	0e9b      	lsrs	r3, r3, #26
 8004478:	f003 031f 	and.w	r3, r3, #31
 800447c:	e018      	b.n	80044b0 <HAL_ADC_ConfigChannel+0x3cc>
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004486:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800448a:	fa93 f3a3 	rbit	r3, r3
 800448e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004492:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004496:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800449a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80044a2:	2320      	movs	r3, #32
 80044a4:	e004      	b.n	80044b0 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80044a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044aa:	fab3 f383 	clz	r3, r3
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d106      	bne.n	80044c2 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2200      	movs	r2, #0
 80044ba:	2101      	movs	r1, #1
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff fabf 	bl	8003a40 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2102      	movs	r1, #2
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7ff fa23 	bl	8003914 <LL_ADC_GetOffsetChannel>
 80044ce:	4603      	mov	r3, r0
 80044d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d10a      	bne.n	80044ee <HAL_ADC_ConfigChannel+0x40a>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2102      	movs	r1, #2
 80044de:	4618      	mov	r0, r3
 80044e0:	f7ff fa18 	bl	8003914 <LL_ADC_GetOffsetChannel>
 80044e4:	4603      	mov	r3, r0
 80044e6:	0e9b      	lsrs	r3, r3, #26
 80044e8:	f003 021f 	and.w	r2, r3, #31
 80044ec:	e01e      	b.n	800452c <HAL_ADC_ConfigChannel+0x448>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2102      	movs	r1, #2
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7ff fa0d 	bl	8003914 <LL_ADC_GetOffsetChannel>
 80044fa:	4603      	mov	r3, r0
 80044fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004500:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004504:	fa93 f3a3 	rbit	r3, r3
 8004508:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800450c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004510:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004514:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 800451c:	2320      	movs	r3, #32
 800451e:	e004      	b.n	800452a <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8004520:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004524:	fab3 f383 	clz	r3, r3
 8004528:	b2db      	uxtb	r3, r3
 800452a:	461a      	mov	r2, r3
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004534:	2b00      	cmp	r3, #0
 8004536:	d105      	bne.n	8004544 <HAL_ADC_ConfigChannel+0x460>
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	0e9b      	lsrs	r3, r3, #26
 800453e:	f003 031f 	and.w	r3, r3, #31
 8004542:	e014      	b.n	800456e <HAL_ADC_ConfigChannel+0x48a>
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800454c:	fa93 f3a3 	rbit	r3, r3
 8004550:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004552:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004554:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004558:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8004560:	2320      	movs	r3, #32
 8004562:	e004      	b.n	800456e <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004564:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004568:	fab3 f383 	clz	r3, r3
 800456c:	b2db      	uxtb	r3, r3
 800456e:	429a      	cmp	r2, r3
 8004570:	d106      	bne.n	8004580 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2200      	movs	r2, #0
 8004578:	2102      	movs	r1, #2
 800457a:	4618      	mov	r0, r3
 800457c:	f7ff fa60 	bl	8003a40 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2103      	movs	r1, #3
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff f9c4 	bl	8003914 <LL_ADC_GetOffsetChannel>
 800458c:	4603      	mov	r3, r0
 800458e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10a      	bne.n	80045ac <HAL_ADC_ConfigChannel+0x4c8>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2103      	movs	r1, #3
 800459c:	4618      	mov	r0, r3
 800459e:	f7ff f9b9 	bl	8003914 <LL_ADC_GetOffsetChannel>
 80045a2:	4603      	mov	r3, r0
 80045a4:	0e9b      	lsrs	r3, r3, #26
 80045a6:	f003 021f 	and.w	r2, r3, #31
 80045aa:	e017      	b.n	80045dc <HAL_ADC_ConfigChannel+0x4f8>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2103      	movs	r1, #3
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7ff f9ae 	bl	8003914 <LL_ADC_GetOffsetChannel>
 80045b8:	4603      	mov	r3, r0
 80045ba:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045be:	fa93 f3a3 	rbit	r3, r3
 80045c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80045c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045c6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80045c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80045ce:	2320      	movs	r3, #32
 80045d0:	e003      	b.n	80045da <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80045d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045d4:	fab3 f383 	clz	r3, r3
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	461a      	mov	r2, r3
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d105      	bne.n	80045f4 <HAL_ADC_ConfigChannel+0x510>
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	0e9b      	lsrs	r3, r3, #26
 80045ee:	f003 031f 	and.w	r3, r3, #31
 80045f2:	e011      	b.n	8004618 <HAL_ADC_ConfigChannel+0x534>
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045fc:	fa93 f3a3 	rbit	r3, r3
 8004600:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004602:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004604:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004606:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004608:	2b00      	cmp	r3, #0
 800460a:	d101      	bne.n	8004610 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 800460c:	2320      	movs	r3, #32
 800460e:	e003      	b.n	8004618 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8004610:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004612:	fab3 f383 	clz	r3, r3
 8004616:	b2db      	uxtb	r3, r3
 8004618:	429a      	cmp	r2, r3
 800461a:	d14f      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2200      	movs	r2, #0
 8004622:	2103      	movs	r1, #3
 8004624:	4618      	mov	r0, r3
 8004626:	f7ff fa0b 	bl	8003a40 <LL_ADC_SetOffsetState>
 800462a:	e047      	b.n	80046bc <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004632:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	069b      	lsls	r3, r3, #26
 800463c:	429a      	cmp	r2, r3
 800463e:	d107      	bne.n	8004650 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800464e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004656:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	069b      	lsls	r3, r3, #26
 8004660:	429a      	cmp	r2, r3
 8004662:	d107      	bne.n	8004674 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004672:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800467a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	069b      	lsls	r3, r3, #26
 8004684:	429a      	cmp	r2, r3
 8004686:	d107      	bne.n	8004698 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004696:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800469e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	069b      	lsls	r3, r3, #26
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d107      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80046ba:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7ff facd 	bl	8003c60 <LL_ADC_IsEnabled>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f040 8219 	bne.w	8004b00 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6818      	ldr	r0, [r3, #0]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	6819      	ldr	r1, [r3, #0]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	461a      	mov	r2, r3
 80046dc:	f7ff fa32 	bl	8003b44 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	4aa1      	ldr	r2, [pc, #644]	; (800496c <HAL_ADC_ConfigChannel+0x888>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	f040 812e 	bne.w	8004948 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10b      	bne.n	8004714 <HAL_ADC_ConfigChannel+0x630>
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	0e9b      	lsrs	r3, r3, #26
 8004702:	3301      	adds	r3, #1
 8004704:	f003 031f 	and.w	r3, r3, #31
 8004708:	2b09      	cmp	r3, #9
 800470a:	bf94      	ite	ls
 800470c:	2301      	movls	r3, #1
 800470e:	2300      	movhi	r3, #0
 8004710:	b2db      	uxtb	r3, r3
 8004712:	e019      	b.n	8004748 <HAL_ADC_ConfigChannel+0x664>
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800471c:	fa93 f3a3 	rbit	r3, r3
 8004720:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004722:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004724:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004726:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 800472c:	2320      	movs	r3, #32
 800472e:	e003      	b.n	8004738 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8004730:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004732:	fab3 f383 	clz	r3, r3
 8004736:	b2db      	uxtb	r3, r3
 8004738:	3301      	adds	r3, #1
 800473a:	f003 031f 	and.w	r3, r3, #31
 800473e:	2b09      	cmp	r3, #9
 8004740:	bf94      	ite	ls
 8004742:	2301      	movls	r3, #1
 8004744:	2300      	movhi	r3, #0
 8004746:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004748:	2b00      	cmp	r3, #0
 800474a:	d079      	beq.n	8004840 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004754:	2b00      	cmp	r3, #0
 8004756:	d107      	bne.n	8004768 <HAL_ADC_ConfigChannel+0x684>
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	0e9b      	lsrs	r3, r3, #26
 800475e:	3301      	adds	r3, #1
 8004760:	069b      	lsls	r3, r3, #26
 8004762:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004766:	e015      	b.n	8004794 <HAL_ADC_ConfigChannel+0x6b0>
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800476e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004770:	fa93 f3a3 	rbit	r3, r3
 8004774:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004776:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004778:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800477a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004780:	2320      	movs	r3, #32
 8004782:	e003      	b.n	800478c <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004786:	fab3 f383 	clz	r3, r3
 800478a:	b2db      	uxtb	r3, r3
 800478c:	3301      	adds	r3, #1
 800478e:	069b      	lsls	r3, r3, #26
 8004790:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800479c:	2b00      	cmp	r3, #0
 800479e:	d109      	bne.n	80047b4 <HAL_ADC_ConfigChannel+0x6d0>
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	0e9b      	lsrs	r3, r3, #26
 80047a6:	3301      	adds	r3, #1
 80047a8:	f003 031f 	and.w	r3, r3, #31
 80047ac:	2101      	movs	r1, #1
 80047ae:	fa01 f303 	lsl.w	r3, r1, r3
 80047b2:	e017      	b.n	80047e4 <HAL_ADC_ConfigChannel+0x700>
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047bc:	fa93 f3a3 	rbit	r3, r3
 80047c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80047c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047c4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80047c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 80047cc:	2320      	movs	r3, #32
 80047ce:	e003      	b.n	80047d8 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 80047d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047d2:	fab3 f383 	clz	r3, r3
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	3301      	adds	r3, #1
 80047da:	f003 031f 	and.w	r3, r3, #31
 80047de:	2101      	movs	r1, #1
 80047e0:	fa01 f303 	lsl.w	r3, r1, r3
 80047e4:	ea42 0103 	orr.w	r1, r2, r3
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10a      	bne.n	800480a <HAL_ADC_ConfigChannel+0x726>
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	0e9b      	lsrs	r3, r3, #26
 80047fa:	3301      	adds	r3, #1
 80047fc:	f003 021f 	and.w	r2, r3, #31
 8004800:	4613      	mov	r3, r2
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	4413      	add	r3, r2
 8004806:	051b      	lsls	r3, r3, #20
 8004808:	e018      	b.n	800483c <HAL_ADC_ConfigChannel+0x758>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004812:	fa93 f3a3 	rbit	r3, r3
 8004816:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800481c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8004822:	2320      	movs	r3, #32
 8004824:	e003      	b.n	800482e <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8004826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004828:	fab3 f383 	clz	r3, r3
 800482c:	b2db      	uxtb	r3, r3
 800482e:	3301      	adds	r3, #1
 8004830:	f003 021f 	and.w	r2, r3, #31
 8004834:	4613      	mov	r3, r2
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	4413      	add	r3, r2
 800483a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800483c:	430b      	orrs	r3, r1
 800483e:	e07e      	b.n	800493e <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004848:	2b00      	cmp	r3, #0
 800484a:	d107      	bne.n	800485c <HAL_ADC_ConfigChannel+0x778>
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	0e9b      	lsrs	r3, r3, #26
 8004852:	3301      	adds	r3, #1
 8004854:	069b      	lsls	r3, r3, #26
 8004856:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800485a:	e015      	b.n	8004888 <HAL_ADC_ConfigChannel+0x7a4>
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004864:	fa93 f3a3 	rbit	r3, r3
 8004868:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800486e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004870:	2b00      	cmp	r3, #0
 8004872:	d101      	bne.n	8004878 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004874:	2320      	movs	r3, #32
 8004876:	e003      	b.n	8004880 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800487a:	fab3 f383 	clz	r3, r3
 800487e:	b2db      	uxtb	r3, r3
 8004880:	3301      	adds	r3, #1
 8004882:	069b      	lsls	r3, r3, #26
 8004884:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004890:	2b00      	cmp	r3, #0
 8004892:	d109      	bne.n	80048a8 <HAL_ADC_ConfigChannel+0x7c4>
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	0e9b      	lsrs	r3, r3, #26
 800489a:	3301      	adds	r3, #1
 800489c:	f003 031f 	and.w	r3, r3, #31
 80048a0:	2101      	movs	r1, #1
 80048a2:	fa01 f303 	lsl.w	r3, r1, r3
 80048a6:	e017      	b.n	80048d8 <HAL_ADC_ConfigChannel+0x7f4>
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	fa93 f3a3 	rbit	r3, r3
 80048b4:	61bb      	str	r3, [r7, #24]
  return result;
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80048ba:	6a3b      	ldr	r3, [r7, #32]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d101      	bne.n	80048c4 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 80048c0:	2320      	movs	r3, #32
 80048c2:	e003      	b.n	80048cc <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 80048c4:	6a3b      	ldr	r3, [r7, #32]
 80048c6:	fab3 f383 	clz	r3, r3
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	3301      	adds	r3, #1
 80048ce:	f003 031f 	and.w	r3, r3, #31
 80048d2:	2101      	movs	r1, #1
 80048d4:	fa01 f303 	lsl.w	r3, r1, r3
 80048d8:	ea42 0103 	orr.w	r1, r2, r3
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10d      	bne.n	8004904 <HAL_ADC_ConfigChannel+0x820>
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	0e9b      	lsrs	r3, r3, #26
 80048ee:	3301      	adds	r3, #1
 80048f0:	f003 021f 	and.w	r2, r3, #31
 80048f4:	4613      	mov	r3, r2
 80048f6:	005b      	lsls	r3, r3, #1
 80048f8:	4413      	add	r3, r2
 80048fa:	3b1e      	subs	r3, #30
 80048fc:	051b      	lsls	r3, r3, #20
 80048fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004902:	e01b      	b.n	800493c <HAL_ADC_ConfigChannel+0x858>
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	fa93 f3a3 	rbit	r3, r3
 8004910:	60fb      	str	r3, [r7, #12]
  return result;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 800491c:	2320      	movs	r3, #32
 800491e:	e003      	b.n	8004928 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	fab3 f383 	clz	r3, r3
 8004926:	b2db      	uxtb	r3, r3
 8004928:	3301      	adds	r3, #1
 800492a:	f003 021f 	and.w	r2, r3, #31
 800492e:	4613      	mov	r3, r2
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	4413      	add	r3, r2
 8004934:	3b1e      	subs	r3, #30
 8004936:	051b      	lsls	r3, r3, #20
 8004938:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800493c:	430b      	orrs	r3, r1
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	6892      	ldr	r2, [r2, #8]
 8004942:	4619      	mov	r1, r3
 8004944:	f7ff f8d2 	bl	8003aec <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	f280 80d7 	bge.w	8004b00 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a06      	ldr	r2, [pc, #24]	; (8004970 <HAL_ADC_ConfigChannel+0x88c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d004      	beq.n	8004966 <HAL_ADC_ConfigChannel+0x882>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a04      	ldr	r2, [pc, #16]	; (8004974 <HAL_ADC_ConfigChannel+0x890>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d10a      	bne.n	800497c <HAL_ADC_ConfigChannel+0x898>
 8004966:	4b04      	ldr	r3, [pc, #16]	; (8004978 <HAL_ADC_ConfigChannel+0x894>)
 8004968:	e009      	b.n	800497e <HAL_ADC_ConfigChannel+0x89a>
 800496a:	bf00      	nop
 800496c:	47ff0000 	.word	0x47ff0000
 8004970:	40022000 	.word	0x40022000
 8004974:	40022100 	.word	0x40022100
 8004978:	40022300 	.word	0x40022300
 800497c:	4b65      	ldr	r3, [pc, #404]	; (8004b14 <HAL_ADC_ConfigChannel+0xa30>)
 800497e:	4618      	mov	r0, r3
 8004980:	f7fe ff88 	bl	8003894 <LL_ADC_GetCommonPathInternalCh>
 8004984:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a62      	ldr	r2, [pc, #392]	; (8004b18 <HAL_ADC_ConfigChannel+0xa34>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d004      	beq.n	800499c <HAL_ADC_ConfigChannel+0x8b8>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a61      	ldr	r2, [pc, #388]	; (8004b1c <HAL_ADC_ConfigChannel+0xa38>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d10e      	bne.n	80049ba <HAL_ADC_ConfigChannel+0x8d6>
 800499c:	485e      	ldr	r0, [pc, #376]	; (8004b18 <HAL_ADC_ConfigChannel+0xa34>)
 800499e:	f7ff f95f 	bl	8003c60 <LL_ADC_IsEnabled>
 80049a2:	4604      	mov	r4, r0
 80049a4:	485d      	ldr	r0, [pc, #372]	; (8004b1c <HAL_ADC_ConfigChannel+0xa38>)
 80049a6:	f7ff f95b 	bl	8003c60 <LL_ADC_IsEnabled>
 80049aa:	4603      	mov	r3, r0
 80049ac:	4323      	orrs	r3, r4
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	bf0c      	ite	eq
 80049b2:	2301      	moveq	r3, #1
 80049b4:	2300      	movne	r3, #0
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	e008      	b.n	80049cc <HAL_ADC_ConfigChannel+0x8e8>
 80049ba:	4859      	ldr	r0, [pc, #356]	; (8004b20 <HAL_ADC_ConfigChannel+0xa3c>)
 80049bc:	f7ff f950 	bl	8003c60 <LL_ADC_IsEnabled>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	bf0c      	ite	eq
 80049c6:	2301      	moveq	r3, #1
 80049c8:	2300      	movne	r3, #0
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 8084 	beq.w	8004ada <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a53      	ldr	r2, [pc, #332]	; (8004b24 <HAL_ADC_ConfigChannel+0xa40>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d132      	bne.n	8004a42 <HAL_ADC_ConfigChannel+0x95e>
 80049dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80049e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d12c      	bne.n	8004a42 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a4c      	ldr	r2, [pc, #304]	; (8004b20 <HAL_ADC_ConfigChannel+0xa3c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	f040 8086 	bne.w	8004b00 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a47      	ldr	r2, [pc, #284]	; (8004b18 <HAL_ADC_ConfigChannel+0xa34>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d004      	beq.n	8004a08 <HAL_ADC_ConfigChannel+0x924>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a46      	ldr	r2, [pc, #280]	; (8004b1c <HAL_ADC_ConfigChannel+0xa38>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d101      	bne.n	8004a0c <HAL_ADC_ConfigChannel+0x928>
 8004a08:	4a47      	ldr	r2, [pc, #284]	; (8004b28 <HAL_ADC_ConfigChannel+0xa44>)
 8004a0a:	e000      	b.n	8004a0e <HAL_ADC_ConfigChannel+0x92a>
 8004a0c:	4a41      	ldr	r2, [pc, #260]	; (8004b14 <HAL_ADC_ConfigChannel+0xa30>)
 8004a0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a16:	4619      	mov	r1, r3
 8004a18:	4610      	mov	r0, r2
 8004a1a:	f7fe ff28 	bl	800386e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a1e:	4b43      	ldr	r3, [pc, #268]	; (8004b2c <HAL_ADC_ConfigChannel+0xa48>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	099b      	lsrs	r3, r3, #6
 8004a24:	4a42      	ldr	r2, [pc, #264]	; (8004b30 <HAL_ADC_ConfigChannel+0xa4c>)
 8004a26:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2a:	099b      	lsrs	r3, r3, #6
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	005b      	lsls	r3, r3, #1
 8004a30:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004a32:	e002      	b.n	8004a3a <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	3b01      	subs	r3, #1
 8004a38:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1f9      	bne.n	8004a34 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a40:	e05e      	b.n	8004b00 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a3b      	ldr	r2, [pc, #236]	; (8004b34 <HAL_ADC_ConfigChannel+0xa50>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d120      	bne.n	8004a8e <HAL_ADC_ConfigChannel+0x9aa>
 8004a4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d11a      	bne.n	8004a8e <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a30      	ldr	r2, [pc, #192]	; (8004b20 <HAL_ADC_ConfigChannel+0xa3c>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d14e      	bne.n	8004b00 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a2c      	ldr	r2, [pc, #176]	; (8004b18 <HAL_ADC_ConfigChannel+0xa34>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d004      	beq.n	8004a76 <HAL_ADC_ConfigChannel+0x992>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a2a      	ldr	r2, [pc, #168]	; (8004b1c <HAL_ADC_ConfigChannel+0xa38>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d101      	bne.n	8004a7a <HAL_ADC_ConfigChannel+0x996>
 8004a76:	4a2c      	ldr	r2, [pc, #176]	; (8004b28 <HAL_ADC_ConfigChannel+0xa44>)
 8004a78:	e000      	b.n	8004a7c <HAL_ADC_ConfigChannel+0x998>
 8004a7a:	4a26      	ldr	r2, [pc, #152]	; (8004b14 <HAL_ADC_ConfigChannel+0xa30>)
 8004a7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a84:	4619      	mov	r1, r3
 8004a86:	4610      	mov	r0, r2
 8004a88:	f7fe fef1 	bl	800386e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a8c:	e038      	b.n	8004b00 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a29      	ldr	r2, [pc, #164]	; (8004b38 <HAL_ADC_ConfigChannel+0xa54>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d133      	bne.n	8004b00 <HAL_ADC_ConfigChannel+0xa1c>
 8004a98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d12d      	bne.n	8004b00 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a1d      	ldr	r2, [pc, #116]	; (8004b20 <HAL_ADC_ConfigChannel+0xa3c>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d128      	bne.n	8004b00 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a19      	ldr	r2, [pc, #100]	; (8004b18 <HAL_ADC_ConfigChannel+0xa34>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d004      	beq.n	8004ac2 <HAL_ADC_ConfigChannel+0x9de>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a17      	ldr	r2, [pc, #92]	; (8004b1c <HAL_ADC_ConfigChannel+0xa38>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d101      	bne.n	8004ac6 <HAL_ADC_ConfigChannel+0x9e2>
 8004ac2:	4a19      	ldr	r2, [pc, #100]	; (8004b28 <HAL_ADC_ConfigChannel+0xa44>)
 8004ac4:	e000      	b.n	8004ac8 <HAL_ADC_ConfigChannel+0x9e4>
 8004ac6:	4a13      	ldr	r2, [pc, #76]	; (8004b14 <HAL_ADC_ConfigChannel+0xa30>)
 8004ac8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004acc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	4610      	mov	r0, r2
 8004ad4:	f7fe fecb 	bl	800386e <LL_ADC_SetCommonPathInternalCh>
 8004ad8:	e012      	b.n	8004b00 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ade:	f043 0220 	orr.w	r2, r3, #32
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004aec:	e008      	b.n	8004b00 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004af2:	f043 0220 	orr.w	r2, r3, #32
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004b08:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	37e4      	adds	r7, #228	; 0xe4
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd90      	pop	{r4, r7, pc}
 8004b14:	58026300 	.word	0x58026300
 8004b18:	40022000 	.word	0x40022000
 8004b1c:	40022100 	.word	0x40022100
 8004b20:	58026000 	.word	0x58026000
 8004b24:	c7520000 	.word	0xc7520000
 8004b28:	40022300 	.word	0x40022300
 8004b2c:	24000000 	.word	0x24000000
 8004b30:	053e2d63 	.word	0x053e2d63
 8004b34:	c3210000 	.word	0xc3210000
 8004b38:	cb840000 	.word	0xcb840000

08004b3c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a6c      	ldr	r2, [pc, #432]	; (8004cfc <ADC_ConfigureBoostMode+0x1c0>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d004      	beq.n	8004b58 <ADC_ConfigureBoostMode+0x1c>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a6b      	ldr	r2, [pc, #428]	; (8004d00 <ADC_ConfigureBoostMode+0x1c4>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d109      	bne.n	8004b6c <ADC_ConfigureBoostMode+0x30>
 8004b58:	4b6a      	ldr	r3, [pc, #424]	; (8004d04 <ADC_ConfigureBoostMode+0x1c8>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	bf14      	ite	ne
 8004b64:	2301      	movne	r3, #1
 8004b66:	2300      	moveq	r3, #0
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	e008      	b.n	8004b7e <ADC_ConfigureBoostMode+0x42>
 8004b6c:	4b66      	ldr	r3, [pc, #408]	; (8004d08 <ADC_ConfigureBoostMode+0x1cc>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	bf14      	ite	ne
 8004b78:	2301      	movne	r3, #1
 8004b7a:	2300      	moveq	r3, #0
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d01c      	beq.n	8004bbc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004b82:	f005 fc93 	bl	800a4ac <HAL_RCC_GetHCLKFreq>
 8004b86:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b90:	d010      	beq.n	8004bb4 <ADC_ConfigureBoostMode+0x78>
 8004b92:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b96:	d873      	bhi.n	8004c80 <ADC_ConfigureBoostMode+0x144>
 8004b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b9c:	d002      	beq.n	8004ba4 <ADC_ConfigureBoostMode+0x68>
 8004b9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ba2:	d16d      	bne.n	8004c80 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	0c1b      	lsrs	r3, r3, #16
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb0:	60fb      	str	r3, [r7, #12]
        break;
 8004bb2:	e068      	b.n	8004c86 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	089b      	lsrs	r3, r3, #2
 8004bb8:	60fb      	str	r3, [r7, #12]
        break;
 8004bba:	e064      	b.n	8004c86 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004bbc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004bc0:	f04f 0100 	mov.w	r1, #0
 8004bc4:	f006 fe6e 	bl	800b8a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004bc8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004bd2:	d051      	beq.n	8004c78 <ADC_ConfigureBoostMode+0x13c>
 8004bd4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004bd8:	d854      	bhi.n	8004c84 <ADC_ConfigureBoostMode+0x148>
 8004bda:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004bde:	d047      	beq.n	8004c70 <ADC_ConfigureBoostMode+0x134>
 8004be0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004be4:	d84e      	bhi.n	8004c84 <ADC_ConfigureBoostMode+0x148>
 8004be6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004bea:	d03d      	beq.n	8004c68 <ADC_ConfigureBoostMode+0x12c>
 8004bec:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004bf0:	d848      	bhi.n	8004c84 <ADC_ConfigureBoostMode+0x148>
 8004bf2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bf6:	d033      	beq.n	8004c60 <ADC_ConfigureBoostMode+0x124>
 8004bf8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bfc:	d842      	bhi.n	8004c84 <ADC_ConfigureBoostMode+0x148>
 8004bfe:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004c02:	d029      	beq.n	8004c58 <ADC_ConfigureBoostMode+0x11c>
 8004c04:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004c08:	d83c      	bhi.n	8004c84 <ADC_ConfigureBoostMode+0x148>
 8004c0a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004c0e:	d01a      	beq.n	8004c46 <ADC_ConfigureBoostMode+0x10a>
 8004c10:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004c14:	d836      	bhi.n	8004c84 <ADC_ConfigureBoostMode+0x148>
 8004c16:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004c1a:	d014      	beq.n	8004c46 <ADC_ConfigureBoostMode+0x10a>
 8004c1c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004c20:	d830      	bhi.n	8004c84 <ADC_ConfigureBoostMode+0x148>
 8004c22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c26:	d00e      	beq.n	8004c46 <ADC_ConfigureBoostMode+0x10a>
 8004c28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c2c:	d82a      	bhi.n	8004c84 <ADC_ConfigureBoostMode+0x148>
 8004c2e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c32:	d008      	beq.n	8004c46 <ADC_ConfigureBoostMode+0x10a>
 8004c34:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c38:	d824      	bhi.n	8004c84 <ADC_ConfigureBoostMode+0x148>
 8004c3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c3e:	d002      	beq.n	8004c46 <ADC_ConfigureBoostMode+0x10a>
 8004c40:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c44:	d11e      	bne.n	8004c84 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	0c9b      	lsrs	r3, r3, #18
 8004c4c:	005b      	lsls	r3, r3, #1
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c54:	60fb      	str	r3, [r7, #12]
        break;
 8004c56:	e016      	b.n	8004c86 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	091b      	lsrs	r3, r3, #4
 8004c5c:	60fb      	str	r3, [r7, #12]
        break;
 8004c5e:	e012      	b.n	8004c86 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	095b      	lsrs	r3, r3, #5
 8004c64:	60fb      	str	r3, [r7, #12]
        break;
 8004c66:	e00e      	b.n	8004c86 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	099b      	lsrs	r3, r3, #6
 8004c6c:	60fb      	str	r3, [r7, #12]
        break;
 8004c6e:	e00a      	b.n	8004c86 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	09db      	lsrs	r3, r3, #7
 8004c74:	60fb      	str	r3, [r7, #12]
        break;
 8004c76:	e006      	b.n	8004c86 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	0a1b      	lsrs	r3, r3, #8
 8004c7c:	60fb      	str	r3, [r7, #12]
        break;
 8004c7e:	e002      	b.n	8004c86 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004c80:	bf00      	nop
 8004c82:	e000      	b.n	8004c86 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004c84:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	085b      	lsrs	r3, r3, #1
 8004c8a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4a1f      	ldr	r2, [pc, #124]	; (8004d0c <ADC_ConfigureBoostMode+0x1d0>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d808      	bhi.n	8004ca6 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689a      	ldr	r2, [r3, #8]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004ca2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004ca4:	e025      	b.n	8004cf2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	4a19      	ldr	r2, [pc, #100]	; (8004d10 <ADC_ConfigureBoostMode+0x1d4>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d80a      	bhi.n	8004cc4 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cc0:	609a      	str	r2, [r3, #8]
}
 8004cc2:	e016      	b.n	8004cf2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	4a13      	ldr	r2, [pc, #76]	; (8004d14 <ADC_ConfigureBoostMode+0x1d8>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d80a      	bhi.n	8004ce2 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cde:	609a      	str	r2, [r3, #8]
}
 8004ce0:	e007      	b.n	8004cf2 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004cf0:	609a      	str	r2, [r3, #8]
}
 8004cf2:	bf00      	nop
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	40022000 	.word	0x40022000
 8004d00:	40022100 	.word	0x40022100
 8004d04:	40022300 	.word	0x40022300
 8004d08:	58026300 	.word	0x58026300
 8004d0c:	005f5e10 	.word	0x005f5e10
 8004d10:	00bebc20 	.word	0x00bebc20
 8004d14:	017d7840 	.word	0x017d7840

08004d18 <LL_ADC_IsEnabled>:
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d101      	bne.n	8004d30 <LL_ADC_IsEnabled+0x18>
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e000      	b.n	8004d32 <LL_ADC_IsEnabled+0x1a>
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	370c      	adds	r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <LL_ADC_REG_IsConversionOngoing>:
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b083      	sub	sp, #12
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f003 0304 	and.w	r3, r3, #4
 8004d4e:	2b04      	cmp	r3, #4
 8004d50:	d101      	bne.n	8004d56 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004d52:	2301      	movs	r3, #1
 8004d54:	e000      	b.n	8004d58 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004d64:	b590      	push	{r4, r7, lr}
 8004d66:	b0a3      	sub	sp, #140	; 0x8c
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d101      	bne.n	8004d82 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004d7e:	2302      	movs	r3, #2
 8004d80:	e0c1      	b.n	8004f06 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a5e      	ldr	r2, [pc, #376]	; (8004f10 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d102      	bne.n	8004da2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004d9c:	4b5d      	ldr	r3, [pc, #372]	; (8004f14 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004d9e:	60fb      	str	r3, [r7, #12]
 8004da0:	e001      	b.n	8004da6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004da2:	2300      	movs	r3, #0
 8004da4:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10b      	bne.n	8004dc4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004db0:	f043 0220 	orr.w	r2, r3, #32
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e0a0      	b.n	8004f06 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7ff ffb9 	bl	8004d3e <LL_ADC_REG_IsConversionOngoing>
 8004dcc:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7ff ffb2 	bl	8004d3e <LL_ADC_REG_IsConversionOngoing>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f040 8081 	bne.w	8004ee4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004de2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d17c      	bne.n	8004ee4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a48      	ldr	r2, [pc, #288]	; (8004f10 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d004      	beq.n	8004dfe <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a46      	ldr	r2, [pc, #280]	; (8004f14 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d101      	bne.n	8004e02 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004dfe:	4b46      	ldr	r3, [pc, #280]	; (8004f18 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004e00:	e000      	b.n	8004e04 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004e02:	4b46      	ldr	r3, [pc, #280]	; (8004f1c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004e04:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d039      	beq.n	8004e82 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004e0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e1e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a3a      	ldr	r2, [pc, #232]	; (8004f10 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d004      	beq.n	8004e34 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a39      	ldr	r2, [pc, #228]	; (8004f14 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d10e      	bne.n	8004e52 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004e34:	4836      	ldr	r0, [pc, #216]	; (8004f10 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004e36:	f7ff ff6f 	bl	8004d18 <LL_ADC_IsEnabled>
 8004e3a:	4604      	mov	r4, r0
 8004e3c:	4835      	ldr	r0, [pc, #212]	; (8004f14 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004e3e:	f7ff ff6b 	bl	8004d18 <LL_ADC_IsEnabled>
 8004e42:	4603      	mov	r3, r0
 8004e44:	4323      	orrs	r3, r4
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	bf0c      	ite	eq
 8004e4a:	2301      	moveq	r3, #1
 8004e4c:	2300      	movne	r3, #0
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	e008      	b.n	8004e64 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004e52:	4833      	ldr	r0, [pc, #204]	; (8004f20 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004e54:	f7ff ff60 	bl	8004d18 <LL_ADC_IsEnabled>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	bf0c      	ite	eq
 8004e5e:	2301      	moveq	r3, #1
 8004e60:	2300      	movne	r3, #0
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d047      	beq.n	8004ef8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004e68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	4b2d      	ldr	r3, [pc, #180]	; (8004f24 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004e6e:	4013      	ands	r3, r2
 8004e70:	683a      	ldr	r2, [r7, #0]
 8004e72:	6811      	ldr	r1, [r2, #0]
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	6892      	ldr	r2, [r2, #8]
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e7e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e80:	e03a      	b.n	8004ef8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004e82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e8c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a1f      	ldr	r2, [pc, #124]	; (8004f10 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d004      	beq.n	8004ea2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a1d      	ldr	r2, [pc, #116]	; (8004f14 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d10e      	bne.n	8004ec0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004ea2:	481b      	ldr	r0, [pc, #108]	; (8004f10 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ea4:	f7ff ff38 	bl	8004d18 <LL_ADC_IsEnabled>
 8004ea8:	4604      	mov	r4, r0
 8004eaa:	481a      	ldr	r0, [pc, #104]	; (8004f14 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004eac:	f7ff ff34 	bl	8004d18 <LL_ADC_IsEnabled>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	4323      	orrs	r3, r4
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	bf0c      	ite	eq
 8004eb8:	2301      	moveq	r3, #1
 8004eba:	2300      	movne	r3, #0
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	e008      	b.n	8004ed2 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004ec0:	4817      	ldr	r0, [pc, #92]	; (8004f20 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004ec2:	f7ff ff29 	bl	8004d18 <LL_ADC_IsEnabled>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	bf0c      	ite	eq
 8004ecc:	2301      	moveq	r3, #1
 8004ece:	2300      	movne	r3, #0
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d010      	beq.n	8004ef8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004ed6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ed8:	689a      	ldr	r2, [r3, #8]
 8004eda:	4b12      	ldr	r3, [pc, #72]	; (8004f24 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004edc:	4013      	ands	r3, r2
 8004ede:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004ee0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ee2:	e009      	b.n	8004ef8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ee8:	f043 0220 	orr.w	r2, r3, #32
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8004ef6:	e000      	b.n	8004efa <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ef8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004f02:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	378c      	adds	r7, #140	; 0x8c
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd90      	pop	{r4, r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	40022000 	.word	0x40022000
 8004f14:	40022100 	.word	0x40022100
 8004f18:	40022300 	.word	0x40022300
 8004f1c:	58026300 	.word	0x58026300
 8004f20:	58026000 	.word	0x58026000
 8004f24:	fffff0e0 	.word	0xfffff0e0

08004f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f38:	4b0b      	ldr	r3, [pc, #44]	; (8004f68 <__NVIC_SetPriorityGrouping+0x40>)
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f44:	4013      	ands	r3, r2
 8004f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004f50:	4b06      	ldr	r3, [pc, #24]	; (8004f6c <__NVIC_SetPriorityGrouping+0x44>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f56:	4a04      	ldr	r2, [pc, #16]	; (8004f68 <__NVIC_SetPriorityGrouping+0x40>)
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	60d3      	str	r3, [r2, #12]
}
 8004f5c:	bf00      	nop
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	e000ed00 	.word	0xe000ed00
 8004f6c:	05fa0000 	.word	0x05fa0000

08004f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f70:	b480      	push	{r7}
 8004f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f74:	4b04      	ldr	r3, [pc, #16]	; (8004f88 <__NVIC_GetPriorityGrouping+0x18>)
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	0a1b      	lsrs	r3, r3, #8
 8004f7a:	f003 0307 	and.w	r3, r3, #7
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr
 8004f88:	e000ed00 	.word	0xe000ed00

08004f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	4603      	mov	r3, r0
 8004f94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004f96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	db0b      	blt.n	8004fb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f9e:	88fb      	ldrh	r3, [r7, #6]
 8004fa0:	f003 021f 	and.w	r2, r3, #31
 8004fa4:	4907      	ldr	r1, [pc, #28]	; (8004fc4 <__NVIC_EnableIRQ+0x38>)
 8004fa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004faa:	095b      	lsrs	r3, r3, #5
 8004fac:	2001      	movs	r0, #1
 8004fae:	fa00 f202 	lsl.w	r2, r0, r2
 8004fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	e000e100 	.word	0xe000e100

08004fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	4603      	mov	r3, r0
 8004fd0:	6039      	str	r1, [r7, #0]
 8004fd2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004fd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	db0a      	blt.n	8004ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	b2da      	uxtb	r2, r3
 8004fe0:	490c      	ldr	r1, [pc, #48]	; (8005014 <__NVIC_SetPriority+0x4c>)
 8004fe2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fe6:	0112      	lsls	r2, r2, #4
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	440b      	add	r3, r1
 8004fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ff0:	e00a      	b.n	8005008 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	b2da      	uxtb	r2, r3
 8004ff6:	4908      	ldr	r1, [pc, #32]	; (8005018 <__NVIC_SetPriority+0x50>)
 8004ff8:	88fb      	ldrh	r3, [r7, #6]
 8004ffa:	f003 030f 	and.w	r3, r3, #15
 8004ffe:	3b04      	subs	r3, #4
 8005000:	0112      	lsls	r2, r2, #4
 8005002:	b2d2      	uxtb	r2, r2
 8005004:	440b      	add	r3, r1
 8005006:	761a      	strb	r2, [r3, #24]
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	e000e100 	.word	0xe000e100
 8005018:	e000ed00 	.word	0xe000ed00

0800501c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800501c:	b480      	push	{r7}
 800501e:	b089      	sub	sp, #36	; 0x24
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f003 0307 	and.w	r3, r3, #7
 800502e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	f1c3 0307 	rsb	r3, r3, #7
 8005036:	2b04      	cmp	r3, #4
 8005038:	bf28      	it	cs
 800503a:	2304      	movcs	r3, #4
 800503c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	3304      	adds	r3, #4
 8005042:	2b06      	cmp	r3, #6
 8005044:	d902      	bls.n	800504c <NVIC_EncodePriority+0x30>
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	3b03      	subs	r3, #3
 800504a:	e000      	b.n	800504e <NVIC_EncodePriority+0x32>
 800504c:	2300      	movs	r3, #0
 800504e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005050:	f04f 32ff 	mov.w	r2, #4294967295
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	fa02 f303 	lsl.w	r3, r2, r3
 800505a:	43da      	mvns	r2, r3
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	401a      	ands	r2, r3
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005064:	f04f 31ff 	mov.w	r1, #4294967295
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	fa01 f303 	lsl.w	r3, r1, r3
 800506e:	43d9      	mvns	r1, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005074:	4313      	orrs	r3, r2
         );
}
 8005076:	4618      	mov	r0, r3
 8005078:	3724      	adds	r7, #36	; 0x24
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
	...

08005084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	3b01      	subs	r3, #1
 8005090:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005094:	d301      	bcc.n	800509a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005096:	2301      	movs	r3, #1
 8005098:	e00f      	b.n	80050ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800509a:	4a0a      	ldr	r2, [pc, #40]	; (80050c4 <SysTick_Config+0x40>)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3b01      	subs	r3, #1
 80050a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050a2:	210f      	movs	r1, #15
 80050a4:	f04f 30ff 	mov.w	r0, #4294967295
 80050a8:	f7ff ff8e 	bl	8004fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050ac:	4b05      	ldr	r3, [pc, #20]	; (80050c4 <SysTick_Config+0x40>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050b2:	4b04      	ldr	r3, [pc, #16]	; (80050c4 <SysTick_Config+0x40>)
 80050b4:	2207      	movs	r2, #7
 80050b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	e000e010 	.word	0xe000e010

080050c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f7ff ff29 	bl	8004f28 <__NVIC_SetPriorityGrouping>
}
 80050d6:	bf00      	nop
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b086      	sub	sp, #24
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	4603      	mov	r3, r0
 80050e6:	60b9      	str	r1, [r7, #8]
 80050e8:	607a      	str	r2, [r7, #4]
 80050ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80050ec:	f7ff ff40 	bl	8004f70 <__NVIC_GetPriorityGrouping>
 80050f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	68b9      	ldr	r1, [r7, #8]
 80050f6:	6978      	ldr	r0, [r7, #20]
 80050f8:	f7ff ff90 	bl	800501c <NVIC_EncodePriority>
 80050fc:	4602      	mov	r2, r0
 80050fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005102:	4611      	mov	r1, r2
 8005104:	4618      	mov	r0, r3
 8005106:	f7ff ff5f 	bl	8004fc8 <__NVIC_SetPriority>
}
 800510a:	bf00      	nop
 800510c:	3718      	adds	r7, #24
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005112:	b580      	push	{r7, lr}
 8005114:	b082      	sub	sp, #8
 8005116:	af00      	add	r7, sp, #0
 8005118:	4603      	mov	r3, r0
 800511a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800511c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005120:	4618      	mov	r0, r3
 8005122:	f7ff ff33 	bl	8004f8c <__NVIC_EnableIRQ>
}
 8005126:	bf00      	nop
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b082      	sub	sp, #8
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7ff ffa4 	bl	8005084 <SysTick_Config>
 800513c:	4603      	mov	r3, r0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3708      	adds	r7, #8
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
	...

08005148 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005150:	f7fe fb34 	bl	80037bc <HAL_GetTick>
 8005154:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d101      	bne.n	8005160 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e314      	b.n	800578a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a66      	ldr	r2, [pc, #408]	; (8005300 <HAL_DMA_Init+0x1b8>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d04a      	beq.n	8005200 <HAL_DMA_Init+0xb8>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a65      	ldr	r2, [pc, #404]	; (8005304 <HAL_DMA_Init+0x1bc>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d045      	beq.n	8005200 <HAL_DMA_Init+0xb8>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a63      	ldr	r2, [pc, #396]	; (8005308 <HAL_DMA_Init+0x1c0>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d040      	beq.n	8005200 <HAL_DMA_Init+0xb8>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a62      	ldr	r2, [pc, #392]	; (800530c <HAL_DMA_Init+0x1c4>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d03b      	beq.n	8005200 <HAL_DMA_Init+0xb8>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a60      	ldr	r2, [pc, #384]	; (8005310 <HAL_DMA_Init+0x1c8>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d036      	beq.n	8005200 <HAL_DMA_Init+0xb8>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a5f      	ldr	r2, [pc, #380]	; (8005314 <HAL_DMA_Init+0x1cc>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d031      	beq.n	8005200 <HAL_DMA_Init+0xb8>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a5d      	ldr	r2, [pc, #372]	; (8005318 <HAL_DMA_Init+0x1d0>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d02c      	beq.n	8005200 <HAL_DMA_Init+0xb8>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a5c      	ldr	r2, [pc, #368]	; (800531c <HAL_DMA_Init+0x1d4>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d027      	beq.n	8005200 <HAL_DMA_Init+0xb8>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a5a      	ldr	r2, [pc, #360]	; (8005320 <HAL_DMA_Init+0x1d8>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d022      	beq.n	8005200 <HAL_DMA_Init+0xb8>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a59      	ldr	r2, [pc, #356]	; (8005324 <HAL_DMA_Init+0x1dc>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d01d      	beq.n	8005200 <HAL_DMA_Init+0xb8>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a57      	ldr	r2, [pc, #348]	; (8005328 <HAL_DMA_Init+0x1e0>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d018      	beq.n	8005200 <HAL_DMA_Init+0xb8>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a56      	ldr	r2, [pc, #344]	; (800532c <HAL_DMA_Init+0x1e4>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d013      	beq.n	8005200 <HAL_DMA_Init+0xb8>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a54      	ldr	r2, [pc, #336]	; (8005330 <HAL_DMA_Init+0x1e8>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d00e      	beq.n	8005200 <HAL_DMA_Init+0xb8>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a53      	ldr	r2, [pc, #332]	; (8005334 <HAL_DMA_Init+0x1ec>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d009      	beq.n	8005200 <HAL_DMA_Init+0xb8>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a51      	ldr	r2, [pc, #324]	; (8005338 <HAL_DMA_Init+0x1f0>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d004      	beq.n	8005200 <HAL_DMA_Init+0xb8>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a50      	ldr	r2, [pc, #320]	; (800533c <HAL_DMA_Init+0x1f4>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d101      	bne.n	8005204 <HAL_DMA_Init+0xbc>
 8005200:	2301      	movs	r3, #1
 8005202:	e000      	b.n	8005206 <HAL_DMA_Init+0xbe>
 8005204:	2300      	movs	r3, #0
 8005206:	2b00      	cmp	r3, #0
 8005208:	f000 813c 	beq.w	8005484 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a37      	ldr	r2, [pc, #220]	; (8005300 <HAL_DMA_Init+0x1b8>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d04a      	beq.n	80052bc <HAL_DMA_Init+0x174>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a36      	ldr	r2, [pc, #216]	; (8005304 <HAL_DMA_Init+0x1bc>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d045      	beq.n	80052bc <HAL_DMA_Init+0x174>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a34      	ldr	r2, [pc, #208]	; (8005308 <HAL_DMA_Init+0x1c0>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d040      	beq.n	80052bc <HAL_DMA_Init+0x174>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a33      	ldr	r2, [pc, #204]	; (800530c <HAL_DMA_Init+0x1c4>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d03b      	beq.n	80052bc <HAL_DMA_Init+0x174>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a31      	ldr	r2, [pc, #196]	; (8005310 <HAL_DMA_Init+0x1c8>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d036      	beq.n	80052bc <HAL_DMA_Init+0x174>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a30      	ldr	r2, [pc, #192]	; (8005314 <HAL_DMA_Init+0x1cc>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d031      	beq.n	80052bc <HAL_DMA_Init+0x174>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a2e      	ldr	r2, [pc, #184]	; (8005318 <HAL_DMA_Init+0x1d0>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d02c      	beq.n	80052bc <HAL_DMA_Init+0x174>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a2d      	ldr	r2, [pc, #180]	; (800531c <HAL_DMA_Init+0x1d4>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d027      	beq.n	80052bc <HAL_DMA_Init+0x174>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a2b      	ldr	r2, [pc, #172]	; (8005320 <HAL_DMA_Init+0x1d8>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d022      	beq.n	80052bc <HAL_DMA_Init+0x174>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a2a      	ldr	r2, [pc, #168]	; (8005324 <HAL_DMA_Init+0x1dc>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d01d      	beq.n	80052bc <HAL_DMA_Init+0x174>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a28      	ldr	r2, [pc, #160]	; (8005328 <HAL_DMA_Init+0x1e0>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d018      	beq.n	80052bc <HAL_DMA_Init+0x174>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a27      	ldr	r2, [pc, #156]	; (800532c <HAL_DMA_Init+0x1e4>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d013      	beq.n	80052bc <HAL_DMA_Init+0x174>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a25      	ldr	r2, [pc, #148]	; (8005330 <HAL_DMA_Init+0x1e8>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d00e      	beq.n	80052bc <HAL_DMA_Init+0x174>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a24      	ldr	r2, [pc, #144]	; (8005334 <HAL_DMA_Init+0x1ec>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d009      	beq.n	80052bc <HAL_DMA_Init+0x174>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a22      	ldr	r2, [pc, #136]	; (8005338 <HAL_DMA_Init+0x1f0>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d004      	beq.n	80052bc <HAL_DMA_Init+0x174>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a21      	ldr	r2, [pc, #132]	; (800533c <HAL_DMA_Init+0x1f4>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d108      	bne.n	80052ce <HAL_DMA_Init+0x186>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 0201 	bic.w	r2, r2, #1
 80052ca:	601a      	str	r2, [r3, #0]
 80052cc:	e007      	b.n	80052de <HAL_DMA_Init+0x196>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f022 0201 	bic.w	r2, r2, #1
 80052dc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80052de:	e02f      	b.n	8005340 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80052e0:	f7fe fa6c 	bl	80037bc <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b05      	cmp	r3, #5
 80052ec:	d928      	bls.n	8005340 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2220      	movs	r2, #32
 80052f2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2203      	movs	r2, #3
 80052f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e244      	b.n	800578a <HAL_DMA_Init+0x642>
 8005300:	40020010 	.word	0x40020010
 8005304:	40020028 	.word	0x40020028
 8005308:	40020040 	.word	0x40020040
 800530c:	40020058 	.word	0x40020058
 8005310:	40020070 	.word	0x40020070
 8005314:	40020088 	.word	0x40020088
 8005318:	400200a0 	.word	0x400200a0
 800531c:	400200b8 	.word	0x400200b8
 8005320:	40020410 	.word	0x40020410
 8005324:	40020428 	.word	0x40020428
 8005328:	40020440 	.word	0x40020440
 800532c:	40020458 	.word	0x40020458
 8005330:	40020470 	.word	0x40020470
 8005334:	40020488 	.word	0x40020488
 8005338:	400204a0 	.word	0x400204a0
 800533c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1c8      	bne.n	80052e0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	4b84      	ldr	r3, [pc, #528]	; (800556c <HAL_DMA_Init+0x424>)
 800535a:	4013      	ands	r3, r2
 800535c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005366:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005372:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800537e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a1b      	ldr	r3, [r3, #32]
 8005384:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	4313      	orrs	r3, r2
 800538a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005390:	2b04      	cmp	r3, #4
 8005392:	d107      	bne.n	80053a4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539c:	4313      	orrs	r3, r2
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	2b28      	cmp	r3, #40	; 0x28
 80053aa:	d903      	bls.n	80053b4 <HAL_DMA_Init+0x26c>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	2b2e      	cmp	r3, #46	; 0x2e
 80053b2:	d91f      	bls.n	80053f4 <HAL_DMA_Init+0x2ac>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	2b3e      	cmp	r3, #62	; 0x3e
 80053ba:	d903      	bls.n	80053c4 <HAL_DMA_Init+0x27c>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	2b42      	cmp	r3, #66	; 0x42
 80053c2:	d917      	bls.n	80053f4 <HAL_DMA_Init+0x2ac>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	2b46      	cmp	r3, #70	; 0x46
 80053ca:	d903      	bls.n	80053d4 <HAL_DMA_Init+0x28c>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	2b48      	cmp	r3, #72	; 0x48
 80053d2:	d90f      	bls.n	80053f4 <HAL_DMA_Init+0x2ac>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	2b4e      	cmp	r3, #78	; 0x4e
 80053da:	d903      	bls.n	80053e4 <HAL_DMA_Init+0x29c>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	2b52      	cmp	r3, #82	; 0x52
 80053e2:	d907      	bls.n	80053f4 <HAL_DMA_Init+0x2ac>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	2b73      	cmp	r3, #115	; 0x73
 80053ea:	d905      	bls.n	80053f8 <HAL_DMA_Init+0x2b0>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	2b77      	cmp	r3, #119	; 0x77
 80053f2:	d801      	bhi.n	80053f8 <HAL_DMA_Init+0x2b0>
 80053f4:	2301      	movs	r3, #1
 80053f6:	e000      	b.n	80053fa <HAL_DMA_Init+0x2b2>
 80053f8:	2300      	movs	r3, #0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d003      	beq.n	8005406 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005404:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f023 0307 	bic.w	r3, r3, #7
 800541c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	4313      	orrs	r3, r2
 8005426:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542c:	2b04      	cmp	r3, #4
 800542e:	d117      	bne.n	8005460 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005434:	697a      	ldr	r2, [r7, #20]
 8005436:	4313      	orrs	r3, r2
 8005438:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00e      	beq.n	8005460 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f001 fdcc 	bl	8006fe0 <DMA_CheckFifoParam>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d008      	beq.n	8005460 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2240      	movs	r2, #64	; 0x40
 8005452:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e194      	b.n	800578a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f001 fd07 	bl	8006e7c <DMA_CalcBaseAndBitshift>
 800546e:	4603      	mov	r3, r0
 8005470:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005476:	f003 031f 	and.w	r3, r3, #31
 800547a:	223f      	movs	r2, #63	; 0x3f
 800547c:	409a      	lsls	r2, r3
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	609a      	str	r2, [r3, #8]
 8005482:	e0ca      	b.n	800561a <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a39      	ldr	r2, [pc, #228]	; (8005570 <HAL_DMA_Init+0x428>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d022      	beq.n	80054d4 <HAL_DMA_Init+0x38c>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a38      	ldr	r2, [pc, #224]	; (8005574 <HAL_DMA_Init+0x42c>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d01d      	beq.n	80054d4 <HAL_DMA_Init+0x38c>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a36      	ldr	r2, [pc, #216]	; (8005578 <HAL_DMA_Init+0x430>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d018      	beq.n	80054d4 <HAL_DMA_Init+0x38c>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a35      	ldr	r2, [pc, #212]	; (800557c <HAL_DMA_Init+0x434>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d013      	beq.n	80054d4 <HAL_DMA_Init+0x38c>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a33      	ldr	r2, [pc, #204]	; (8005580 <HAL_DMA_Init+0x438>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d00e      	beq.n	80054d4 <HAL_DMA_Init+0x38c>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a32      	ldr	r2, [pc, #200]	; (8005584 <HAL_DMA_Init+0x43c>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d009      	beq.n	80054d4 <HAL_DMA_Init+0x38c>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a30      	ldr	r2, [pc, #192]	; (8005588 <HAL_DMA_Init+0x440>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d004      	beq.n	80054d4 <HAL_DMA_Init+0x38c>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a2f      	ldr	r2, [pc, #188]	; (800558c <HAL_DMA_Init+0x444>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d101      	bne.n	80054d8 <HAL_DMA_Init+0x390>
 80054d4:	2301      	movs	r3, #1
 80054d6:	e000      	b.n	80054da <HAL_DMA_Init+0x392>
 80054d8:	2300      	movs	r3, #0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f000 8094 	beq.w	8005608 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a22      	ldr	r2, [pc, #136]	; (8005570 <HAL_DMA_Init+0x428>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d021      	beq.n	800552e <HAL_DMA_Init+0x3e6>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a21      	ldr	r2, [pc, #132]	; (8005574 <HAL_DMA_Init+0x42c>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d01c      	beq.n	800552e <HAL_DMA_Init+0x3e6>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a1f      	ldr	r2, [pc, #124]	; (8005578 <HAL_DMA_Init+0x430>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d017      	beq.n	800552e <HAL_DMA_Init+0x3e6>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a1e      	ldr	r2, [pc, #120]	; (800557c <HAL_DMA_Init+0x434>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d012      	beq.n	800552e <HAL_DMA_Init+0x3e6>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a1c      	ldr	r2, [pc, #112]	; (8005580 <HAL_DMA_Init+0x438>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d00d      	beq.n	800552e <HAL_DMA_Init+0x3e6>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a1b      	ldr	r2, [pc, #108]	; (8005584 <HAL_DMA_Init+0x43c>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d008      	beq.n	800552e <HAL_DMA_Init+0x3e6>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a19      	ldr	r2, [pc, #100]	; (8005588 <HAL_DMA_Init+0x440>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d003      	beq.n	800552e <HAL_DMA_Init+0x3e6>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a18      	ldr	r2, [pc, #96]	; (800558c <HAL_DMA_Init+0x444>)
 800552c:	4293      	cmp	r3, r2
 800552e:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2202      	movs	r2, #2
 8005534:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	4b11      	ldr	r3, [pc, #68]	; (8005590 <HAL_DMA_Init+0x448>)
 800554c:	4013      	ands	r3, r2
 800554e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	2b40      	cmp	r3, #64	; 0x40
 8005556:	d01d      	beq.n	8005594 <HAL_DMA_Init+0x44c>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	2b80      	cmp	r3, #128	; 0x80
 800555e:	d102      	bne.n	8005566 <HAL_DMA_Init+0x41e>
 8005560:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005564:	e017      	b.n	8005596 <HAL_DMA_Init+0x44e>
 8005566:	2300      	movs	r3, #0
 8005568:	e015      	b.n	8005596 <HAL_DMA_Init+0x44e>
 800556a:	bf00      	nop
 800556c:	fe10803f 	.word	0xfe10803f
 8005570:	58025408 	.word	0x58025408
 8005574:	5802541c 	.word	0x5802541c
 8005578:	58025430 	.word	0x58025430
 800557c:	58025444 	.word	0x58025444
 8005580:	58025458 	.word	0x58025458
 8005584:	5802546c 	.word	0x5802546c
 8005588:	58025480 	.word	0x58025480
 800558c:	58025494 	.word	0x58025494
 8005590:	fffe000f 	.word	0xfffe000f
 8005594:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	68d2      	ldr	r2, [r2, #12]
 800559a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800559c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80055a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80055ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80055b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80055bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80055c4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	461a      	mov	r2, r3
 80055da:	4b6e      	ldr	r3, [pc, #440]	; (8005794 <HAL_DMA_Init+0x64c>)
 80055dc:	4413      	add	r3, r2
 80055de:	4a6e      	ldr	r2, [pc, #440]	; (8005798 <HAL_DMA_Init+0x650>)
 80055e0:	fba2 2303 	umull	r2, r3, r2, r3
 80055e4:	091b      	lsrs	r3, r3, #4
 80055e6:	009a      	lsls	r2, r3, #2
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f001 fc45 	bl	8006e7c <DMA_CalcBaseAndBitshift>
 80055f2:	4603      	mov	r3, r0
 80055f4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055fa:	f003 031f 	and.w	r3, r3, #31
 80055fe:	2201      	movs	r2, #1
 8005600:	409a      	lsls	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	605a      	str	r2, [r3, #4]
 8005606:	e008      	b.n	800561a <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2240      	movs	r2, #64	; 0x40
 800560c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2203      	movs	r2, #3
 8005612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e0b7      	b.n	800578a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a5f      	ldr	r2, [pc, #380]	; (800579c <HAL_DMA_Init+0x654>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d072      	beq.n	800570a <HAL_DMA_Init+0x5c2>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a5d      	ldr	r2, [pc, #372]	; (80057a0 <HAL_DMA_Init+0x658>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d06d      	beq.n	800570a <HAL_DMA_Init+0x5c2>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a5c      	ldr	r2, [pc, #368]	; (80057a4 <HAL_DMA_Init+0x65c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d068      	beq.n	800570a <HAL_DMA_Init+0x5c2>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a5a      	ldr	r2, [pc, #360]	; (80057a8 <HAL_DMA_Init+0x660>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d063      	beq.n	800570a <HAL_DMA_Init+0x5c2>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a59      	ldr	r2, [pc, #356]	; (80057ac <HAL_DMA_Init+0x664>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d05e      	beq.n	800570a <HAL_DMA_Init+0x5c2>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a57      	ldr	r2, [pc, #348]	; (80057b0 <HAL_DMA_Init+0x668>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d059      	beq.n	800570a <HAL_DMA_Init+0x5c2>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a56      	ldr	r2, [pc, #344]	; (80057b4 <HAL_DMA_Init+0x66c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d054      	beq.n	800570a <HAL_DMA_Init+0x5c2>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a54      	ldr	r2, [pc, #336]	; (80057b8 <HAL_DMA_Init+0x670>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d04f      	beq.n	800570a <HAL_DMA_Init+0x5c2>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a53      	ldr	r2, [pc, #332]	; (80057bc <HAL_DMA_Init+0x674>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d04a      	beq.n	800570a <HAL_DMA_Init+0x5c2>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a51      	ldr	r2, [pc, #324]	; (80057c0 <HAL_DMA_Init+0x678>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d045      	beq.n	800570a <HAL_DMA_Init+0x5c2>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a50      	ldr	r2, [pc, #320]	; (80057c4 <HAL_DMA_Init+0x67c>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d040      	beq.n	800570a <HAL_DMA_Init+0x5c2>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a4e      	ldr	r2, [pc, #312]	; (80057c8 <HAL_DMA_Init+0x680>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d03b      	beq.n	800570a <HAL_DMA_Init+0x5c2>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a4d      	ldr	r2, [pc, #308]	; (80057cc <HAL_DMA_Init+0x684>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d036      	beq.n	800570a <HAL_DMA_Init+0x5c2>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a4b      	ldr	r2, [pc, #300]	; (80057d0 <HAL_DMA_Init+0x688>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d031      	beq.n	800570a <HAL_DMA_Init+0x5c2>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a4a      	ldr	r2, [pc, #296]	; (80057d4 <HAL_DMA_Init+0x68c>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d02c      	beq.n	800570a <HAL_DMA_Init+0x5c2>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a48      	ldr	r2, [pc, #288]	; (80057d8 <HAL_DMA_Init+0x690>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d027      	beq.n	800570a <HAL_DMA_Init+0x5c2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a47      	ldr	r2, [pc, #284]	; (80057dc <HAL_DMA_Init+0x694>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d022      	beq.n	800570a <HAL_DMA_Init+0x5c2>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a45      	ldr	r2, [pc, #276]	; (80057e0 <HAL_DMA_Init+0x698>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d01d      	beq.n	800570a <HAL_DMA_Init+0x5c2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a44      	ldr	r2, [pc, #272]	; (80057e4 <HAL_DMA_Init+0x69c>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d018      	beq.n	800570a <HAL_DMA_Init+0x5c2>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a42      	ldr	r2, [pc, #264]	; (80057e8 <HAL_DMA_Init+0x6a0>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d013      	beq.n	800570a <HAL_DMA_Init+0x5c2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a41      	ldr	r2, [pc, #260]	; (80057ec <HAL_DMA_Init+0x6a4>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d00e      	beq.n	800570a <HAL_DMA_Init+0x5c2>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a3f      	ldr	r2, [pc, #252]	; (80057f0 <HAL_DMA_Init+0x6a8>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d009      	beq.n	800570a <HAL_DMA_Init+0x5c2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a3e      	ldr	r2, [pc, #248]	; (80057f4 <HAL_DMA_Init+0x6ac>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d004      	beq.n	800570a <HAL_DMA_Init+0x5c2>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a3c      	ldr	r2, [pc, #240]	; (80057f8 <HAL_DMA_Init+0x6b0>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d101      	bne.n	800570e <HAL_DMA_Init+0x5c6>
 800570a:	2301      	movs	r3, #1
 800570c:	e000      	b.n	8005710 <HAL_DMA_Init+0x5c8>
 800570e:	2300      	movs	r3, #0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d032      	beq.n	800577a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f001 fcdf 	bl	80070d8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	2b80      	cmp	r3, #128	; 0x80
 8005720:	d102      	bne.n	8005728 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005730:	b2d2      	uxtb	r2, r2
 8005732:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800573c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d010      	beq.n	8005768 <HAL_DMA_Init+0x620>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	2b08      	cmp	r3, #8
 800574c:	d80c      	bhi.n	8005768 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f001 fd5c 	bl	800720c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005758:	2200      	movs	r2, #0
 800575a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005764:	605a      	str	r2, [r3, #4]
 8005766:	e008      	b.n	800577a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3718      	adds	r7, #24
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	a7fdabf8 	.word	0xa7fdabf8
 8005798:	cccccccd 	.word	0xcccccccd
 800579c:	40020010 	.word	0x40020010
 80057a0:	40020028 	.word	0x40020028
 80057a4:	40020040 	.word	0x40020040
 80057a8:	40020058 	.word	0x40020058
 80057ac:	40020070 	.word	0x40020070
 80057b0:	40020088 	.word	0x40020088
 80057b4:	400200a0 	.word	0x400200a0
 80057b8:	400200b8 	.word	0x400200b8
 80057bc:	40020410 	.word	0x40020410
 80057c0:	40020428 	.word	0x40020428
 80057c4:	40020440 	.word	0x40020440
 80057c8:	40020458 	.word	0x40020458
 80057cc:	40020470 	.word	0x40020470
 80057d0:	40020488 	.word	0x40020488
 80057d4:	400204a0 	.word	0x400204a0
 80057d8:	400204b8 	.word	0x400204b8
 80057dc:	58025408 	.word	0x58025408
 80057e0:	5802541c 	.word	0x5802541c
 80057e4:	58025430 	.word	0x58025430
 80057e8:	58025444 	.word	0x58025444
 80057ec:	58025458 	.word	0x58025458
 80057f0:	5802546c 	.word	0x5802546c
 80057f4:	58025480 	.word	0x58025480
 80057f8:	58025494 	.word	0x58025494

080057fc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
 8005808:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800580a:	2300      	movs	r3, #0
 800580c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d101      	bne.n	8005818 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e226      	b.n	8005c66 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800581e:	2b01      	cmp	r3, #1
 8005820:	d101      	bne.n	8005826 <HAL_DMA_Start_IT+0x2a>
 8005822:	2302      	movs	r3, #2
 8005824:	e21f      	b.n	8005c66 <HAL_DMA_Start_IT+0x46a>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b01      	cmp	r3, #1
 8005838:	f040 820a 	bne.w	8005c50 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2202      	movs	r2, #2
 8005840:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a68      	ldr	r2, [pc, #416]	; (80059f0 <HAL_DMA_Start_IT+0x1f4>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d04a      	beq.n	80058ea <HAL_DMA_Start_IT+0xee>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a66      	ldr	r2, [pc, #408]	; (80059f4 <HAL_DMA_Start_IT+0x1f8>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d045      	beq.n	80058ea <HAL_DMA_Start_IT+0xee>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a65      	ldr	r2, [pc, #404]	; (80059f8 <HAL_DMA_Start_IT+0x1fc>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d040      	beq.n	80058ea <HAL_DMA_Start_IT+0xee>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a63      	ldr	r2, [pc, #396]	; (80059fc <HAL_DMA_Start_IT+0x200>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d03b      	beq.n	80058ea <HAL_DMA_Start_IT+0xee>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a62      	ldr	r2, [pc, #392]	; (8005a00 <HAL_DMA_Start_IT+0x204>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d036      	beq.n	80058ea <HAL_DMA_Start_IT+0xee>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a60      	ldr	r2, [pc, #384]	; (8005a04 <HAL_DMA_Start_IT+0x208>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d031      	beq.n	80058ea <HAL_DMA_Start_IT+0xee>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a5f      	ldr	r2, [pc, #380]	; (8005a08 <HAL_DMA_Start_IT+0x20c>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d02c      	beq.n	80058ea <HAL_DMA_Start_IT+0xee>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a5d      	ldr	r2, [pc, #372]	; (8005a0c <HAL_DMA_Start_IT+0x210>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d027      	beq.n	80058ea <HAL_DMA_Start_IT+0xee>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a5c      	ldr	r2, [pc, #368]	; (8005a10 <HAL_DMA_Start_IT+0x214>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d022      	beq.n	80058ea <HAL_DMA_Start_IT+0xee>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a5a      	ldr	r2, [pc, #360]	; (8005a14 <HAL_DMA_Start_IT+0x218>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d01d      	beq.n	80058ea <HAL_DMA_Start_IT+0xee>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a59      	ldr	r2, [pc, #356]	; (8005a18 <HAL_DMA_Start_IT+0x21c>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d018      	beq.n	80058ea <HAL_DMA_Start_IT+0xee>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a57      	ldr	r2, [pc, #348]	; (8005a1c <HAL_DMA_Start_IT+0x220>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d013      	beq.n	80058ea <HAL_DMA_Start_IT+0xee>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a56      	ldr	r2, [pc, #344]	; (8005a20 <HAL_DMA_Start_IT+0x224>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d00e      	beq.n	80058ea <HAL_DMA_Start_IT+0xee>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a54      	ldr	r2, [pc, #336]	; (8005a24 <HAL_DMA_Start_IT+0x228>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d009      	beq.n	80058ea <HAL_DMA_Start_IT+0xee>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a53      	ldr	r2, [pc, #332]	; (8005a28 <HAL_DMA_Start_IT+0x22c>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d004      	beq.n	80058ea <HAL_DMA_Start_IT+0xee>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a51      	ldr	r2, [pc, #324]	; (8005a2c <HAL_DMA_Start_IT+0x230>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d108      	bne.n	80058fc <HAL_DMA_Start_IT+0x100>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f022 0201 	bic.w	r2, r2, #1
 80058f8:	601a      	str	r2, [r3, #0]
 80058fa:	e007      	b.n	800590c <HAL_DMA_Start_IT+0x110>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f022 0201 	bic.w	r2, r2, #1
 800590a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	68b9      	ldr	r1, [r7, #8]
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f001 f906 	bl	8006b24 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a34      	ldr	r2, [pc, #208]	; (80059f0 <HAL_DMA_Start_IT+0x1f4>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d04a      	beq.n	80059b8 <HAL_DMA_Start_IT+0x1bc>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a33      	ldr	r2, [pc, #204]	; (80059f4 <HAL_DMA_Start_IT+0x1f8>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d045      	beq.n	80059b8 <HAL_DMA_Start_IT+0x1bc>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a31      	ldr	r2, [pc, #196]	; (80059f8 <HAL_DMA_Start_IT+0x1fc>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d040      	beq.n	80059b8 <HAL_DMA_Start_IT+0x1bc>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a30      	ldr	r2, [pc, #192]	; (80059fc <HAL_DMA_Start_IT+0x200>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d03b      	beq.n	80059b8 <HAL_DMA_Start_IT+0x1bc>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a2e      	ldr	r2, [pc, #184]	; (8005a00 <HAL_DMA_Start_IT+0x204>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d036      	beq.n	80059b8 <HAL_DMA_Start_IT+0x1bc>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a2d      	ldr	r2, [pc, #180]	; (8005a04 <HAL_DMA_Start_IT+0x208>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d031      	beq.n	80059b8 <HAL_DMA_Start_IT+0x1bc>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a2b      	ldr	r2, [pc, #172]	; (8005a08 <HAL_DMA_Start_IT+0x20c>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d02c      	beq.n	80059b8 <HAL_DMA_Start_IT+0x1bc>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a2a      	ldr	r2, [pc, #168]	; (8005a0c <HAL_DMA_Start_IT+0x210>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d027      	beq.n	80059b8 <HAL_DMA_Start_IT+0x1bc>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a28      	ldr	r2, [pc, #160]	; (8005a10 <HAL_DMA_Start_IT+0x214>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d022      	beq.n	80059b8 <HAL_DMA_Start_IT+0x1bc>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a27      	ldr	r2, [pc, #156]	; (8005a14 <HAL_DMA_Start_IT+0x218>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d01d      	beq.n	80059b8 <HAL_DMA_Start_IT+0x1bc>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a25      	ldr	r2, [pc, #148]	; (8005a18 <HAL_DMA_Start_IT+0x21c>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d018      	beq.n	80059b8 <HAL_DMA_Start_IT+0x1bc>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a24      	ldr	r2, [pc, #144]	; (8005a1c <HAL_DMA_Start_IT+0x220>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d013      	beq.n	80059b8 <HAL_DMA_Start_IT+0x1bc>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a22      	ldr	r2, [pc, #136]	; (8005a20 <HAL_DMA_Start_IT+0x224>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d00e      	beq.n	80059b8 <HAL_DMA_Start_IT+0x1bc>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a21      	ldr	r2, [pc, #132]	; (8005a24 <HAL_DMA_Start_IT+0x228>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d009      	beq.n	80059b8 <HAL_DMA_Start_IT+0x1bc>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a1f      	ldr	r2, [pc, #124]	; (8005a28 <HAL_DMA_Start_IT+0x22c>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d004      	beq.n	80059b8 <HAL_DMA_Start_IT+0x1bc>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a1e      	ldr	r2, [pc, #120]	; (8005a2c <HAL_DMA_Start_IT+0x230>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d101      	bne.n	80059bc <HAL_DMA_Start_IT+0x1c0>
 80059b8:	2301      	movs	r3, #1
 80059ba:	e000      	b.n	80059be <HAL_DMA_Start_IT+0x1c2>
 80059bc:	2300      	movs	r3, #0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d036      	beq.n	8005a30 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f023 021e 	bic.w	r2, r3, #30
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f042 0216 	orr.w	r2, r2, #22
 80059d4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d03e      	beq.n	8005a5c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f042 0208 	orr.w	r2, r2, #8
 80059ec:	601a      	str	r2, [r3, #0]
 80059ee:	e035      	b.n	8005a5c <HAL_DMA_Start_IT+0x260>
 80059f0:	40020010 	.word	0x40020010
 80059f4:	40020028 	.word	0x40020028
 80059f8:	40020040 	.word	0x40020040
 80059fc:	40020058 	.word	0x40020058
 8005a00:	40020070 	.word	0x40020070
 8005a04:	40020088 	.word	0x40020088
 8005a08:	400200a0 	.word	0x400200a0
 8005a0c:	400200b8 	.word	0x400200b8
 8005a10:	40020410 	.word	0x40020410
 8005a14:	40020428 	.word	0x40020428
 8005a18:	40020440 	.word	0x40020440
 8005a1c:	40020458 	.word	0x40020458
 8005a20:	40020470 	.word	0x40020470
 8005a24:	40020488 	.word	0x40020488
 8005a28:	400204a0 	.word	0x400204a0
 8005a2c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f023 020e 	bic.w	r2, r3, #14
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f042 020a 	orr.w	r2, r2, #10
 8005a42:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d007      	beq.n	8005a5c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f042 0204 	orr.w	r2, r2, #4
 8005a5a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a83      	ldr	r2, [pc, #524]	; (8005c70 <HAL_DMA_Start_IT+0x474>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d072      	beq.n	8005b4c <HAL_DMA_Start_IT+0x350>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a82      	ldr	r2, [pc, #520]	; (8005c74 <HAL_DMA_Start_IT+0x478>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d06d      	beq.n	8005b4c <HAL_DMA_Start_IT+0x350>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a80      	ldr	r2, [pc, #512]	; (8005c78 <HAL_DMA_Start_IT+0x47c>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d068      	beq.n	8005b4c <HAL_DMA_Start_IT+0x350>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a7f      	ldr	r2, [pc, #508]	; (8005c7c <HAL_DMA_Start_IT+0x480>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d063      	beq.n	8005b4c <HAL_DMA_Start_IT+0x350>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a7d      	ldr	r2, [pc, #500]	; (8005c80 <HAL_DMA_Start_IT+0x484>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d05e      	beq.n	8005b4c <HAL_DMA_Start_IT+0x350>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a7c      	ldr	r2, [pc, #496]	; (8005c84 <HAL_DMA_Start_IT+0x488>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d059      	beq.n	8005b4c <HAL_DMA_Start_IT+0x350>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a7a      	ldr	r2, [pc, #488]	; (8005c88 <HAL_DMA_Start_IT+0x48c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d054      	beq.n	8005b4c <HAL_DMA_Start_IT+0x350>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a79      	ldr	r2, [pc, #484]	; (8005c8c <HAL_DMA_Start_IT+0x490>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d04f      	beq.n	8005b4c <HAL_DMA_Start_IT+0x350>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a77      	ldr	r2, [pc, #476]	; (8005c90 <HAL_DMA_Start_IT+0x494>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d04a      	beq.n	8005b4c <HAL_DMA_Start_IT+0x350>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a76      	ldr	r2, [pc, #472]	; (8005c94 <HAL_DMA_Start_IT+0x498>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d045      	beq.n	8005b4c <HAL_DMA_Start_IT+0x350>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a74      	ldr	r2, [pc, #464]	; (8005c98 <HAL_DMA_Start_IT+0x49c>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d040      	beq.n	8005b4c <HAL_DMA_Start_IT+0x350>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a73      	ldr	r2, [pc, #460]	; (8005c9c <HAL_DMA_Start_IT+0x4a0>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d03b      	beq.n	8005b4c <HAL_DMA_Start_IT+0x350>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a71      	ldr	r2, [pc, #452]	; (8005ca0 <HAL_DMA_Start_IT+0x4a4>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d036      	beq.n	8005b4c <HAL_DMA_Start_IT+0x350>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a70      	ldr	r2, [pc, #448]	; (8005ca4 <HAL_DMA_Start_IT+0x4a8>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d031      	beq.n	8005b4c <HAL_DMA_Start_IT+0x350>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a6e      	ldr	r2, [pc, #440]	; (8005ca8 <HAL_DMA_Start_IT+0x4ac>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d02c      	beq.n	8005b4c <HAL_DMA_Start_IT+0x350>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a6d      	ldr	r2, [pc, #436]	; (8005cac <HAL_DMA_Start_IT+0x4b0>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d027      	beq.n	8005b4c <HAL_DMA_Start_IT+0x350>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a6b      	ldr	r2, [pc, #428]	; (8005cb0 <HAL_DMA_Start_IT+0x4b4>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d022      	beq.n	8005b4c <HAL_DMA_Start_IT+0x350>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a6a      	ldr	r2, [pc, #424]	; (8005cb4 <HAL_DMA_Start_IT+0x4b8>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d01d      	beq.n	8005b4c <HAL_DMA_Start_IT+0x350>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a68      	ldr	r2, [pc, #416]	; (8005cb8 <HAL_DMA_Start_IT+0x4bc>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d018      	beq.n	8005b4c <HAL_DMA_Start_IT+0x350>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a67      	ldr	r2, [pc, #412]	; (8005cbc <HAL_DMA_Start_IT+0x4c0>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d013      	beq.n	8005b4c <HAL_DMA_Start_IT+0x350>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a65      	ldr	r2, [pc, #404]	; (8005cc0 <HAL_DMA_Start_IT+0x4c4>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d00e      	beq.n	8005b4c <HAL_DMA_Start_IT+0x350>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a64      	ldr	r2, [pc, #400]	; (8005cc4 <HAL_DMA_Start_IT+0x4c8>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d009      	beq.n	8005b4c <HAL_DMA_Start_IT+0x350>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a62      	ldr	r2, [pc, #392]	; (8005cc8 <HAL_DMA_Start_IT+0x4cc>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d004      	beq.n	8005b4c <HAL_DMA_Start_IT+0x350>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a61      	ldr	r2, [pc, #388]	; (8005ccc <HAL_DMA_Start_IT+0x4d0>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d101      	bne.n	8005b50 <HAL_DMA_Start_IT+0x354>
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e000      	b.n	8005b52 <HAL_DMA_Start_IT+0x356>
 8005b50:	2300      	movs	r3, #0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d01a      	beq.n	8005b8c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d007      	beq.n	8005b74 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b72:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d007      	beq.n	8005b8c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b8a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a37      	ldr	r2, [pc, #220]	; (8005c70 <HAL_DMA_Start_IT+0x474>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d04a      	beq.n	8005c2c <HAL_DMA_Start_IT+0x430>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a36      	ldr	r2, [pc, #216]	; (8005c74 <HAL_DMA_Start_IT+0x478>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d045      	beq.n	8005c2c <HAL_DMA_Start_IT+0x430>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a34      	ldr	r2, [pc, #208]	; (8005c78 <HAL_DMA_Start_IT+0x47c>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d040      	beq.n	8005c2c <HAL_DMA_Start_IT+0x430>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a33      	ldr	r2, [pc, #204]	; (8005c7c <HAL_DMA_Start_IT+0x480>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d03b      	beq.n	8005c2c <HAL_DMA_Start_IT+0x430>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a31      	ldr	r2, [pc, #196]	; (8005c80 <HAL_DMA_Start_IT+0x484>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d036      	beq.n	8005c2c <HAL_DMA_Start_IT+0x430>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a30      	ldr	r2, [pc, #192]	; (8005c84 <HAL_DMA_Start_IT+0x488>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d031      	beq.n	8005c2c <HAL_DMA_Start_IT+0x430>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a2e      	ldr	r2, [pc, #184]	; (8005c88 <HAL_DMA_Start_IT+0x48c>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d02c      	beq.n	8005c2c <HAL_DMA_Start_IT+0x430>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a2d      	ldr	r2, [pc, #180]	; (8005c8c <HAL_DMA_Start_IT+0x490>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d027      	beq.n	8005c2c <HAL_DMA_Start_IT+0x430>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a2b      	ldr	r2, [pc, #172]	; (8005c90 <HAL_DMA_Start_IT+0x494>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d022      	beq.n	8005c2c <HAL_DMA_Start_IT+0x430>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a2a      	ldr	r2, [pc, #168]	; (8005c94 <HAL_DMA_Start_IT+0x498>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d01d      	beq.n	8005c2c <HAL_DMA_Start_IT+0x430>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a28      	ldr	r2, [pc, #160]	; (8005c98 <HAL_DMA_Start_IT+0x49c>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d018      	beq.n	8005c2c <HAL_DMA_Start_IT+0x430>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a27      	ldr	r2, [pc, #156]	; (8005c9c <HAL_DMA_Start_IT+0x4a0>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d013      	beq.n	8005c2c <HAL_DMA_Start_IT+0x430>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a25      	ldr	r2, [pc, #148]	; (8005ca0 <HAL_DMA_Start_IT+0x4a4>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d00e      	beq.n	8005c2c <HAL_DMA_Start_IT+0x430>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a24      	ldr	r2, [pc, #144]	; (8005ca4 <HAL_DMA_Start_IT+0x4a8>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d009      	beq.n	8005c2c <HAL_DMA_Start_IT+0x430>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a22      	ldr	r2, [pc, #136]	; (8005ca8 <HAL_DMA_Start_IT+0x4ac>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d004      	beq.n	8005c2c <HAL_DMA_Start_IT+0x430>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a21      	ldr	r2, [pc, #132]	; (8005cac <HAL_DMA_Start_IT+0x4b0>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d108      	bne.n	8005c3e <HAL_DMA_Start_IT+0x442>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f042 0201 	orr.w	r2, r2, #1
 8005c3a:	601a      	str	r2, [r3, #0]
 8005c3c:	e012      	b.n	8005c64 <HAL_DMA_Start_IT+0x468>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f042 0201 	orr.w	r2, r2, #1
 8005c4c:	601a      	str	r2, [r3, #0]
 8005c4e:	e009      	b.n	8005c64 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c56:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005c64:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3718      	adds	r7, #24
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	40020010 	.word	0x40020010
 8005c74:	40020028 	.word	0x40020028
 8005c78:	40020040 	.word	0x40020040
 8005c7c:	40020058 	.word	0x40020058
 8005c80:	40020070 	.word	0x40020070
 8005c84:	40020088 	.word	0x40020088
 8005c88:	400200a0 	.word	0x400200a0
 8005c8c:	400200b8 	.word	0x400200b8
 8005c90:	40020410 	.word	0x40020410
 8005c94:	40020428 	.word	0x40020428
 8005c98:	40020440 	.word	0x40020440
 8005c9c:	40020458 	.word	0x40020458
 8005ca0:	40020470 	.word	0x40020470
 8005ca4:	40020488 	.word	0x40020488
 8005ca8:	400204a0 	.word	0x400204a0
 8005cac:	400204b8 	.word	0x400204b8
 8005cb0:	58025408 	.word	0x58025408
 8005cb4:	5802541c 	.word	0x5802541c
 8005cb8:	58025430 	.word	0x58025430
 8005cbc:	58025444 	.word	0x58025444
 8005cc0:	58025458 	.word	0x58025458
 8005cc4:	5802546c 	.word	0x5802546c
 8005cc8:	58025480 	.word	0x58025480
 8005ccc:	58025494 	.word	0x58025494

08005cd0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b08a      	sub	sp, #40	; 0x28
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005cdc:	4b67      	ldr	r3, [pc, #412]	; (8005e7c <HAL_DMA_IRQHandler+0x1ac>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a67      	ldr	r2, [pc, #412]	; (8005e80 <HAL_DMA_IRQHandler+0x1b0>)
 8005ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce6:	0a9b      	lsrs	r3, r3, #10
 8005ce8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cee:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cf4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005cf6:	6a3b      	ldr	r3, [r7, #32]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a5f      	ldr	r2, [pc, #380]	; (8005e84 <HAL_DMA_IRQHandler+0x1b4>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d04a      	beq.n	8005da2 <HAL_DMA_IRQHandler+0xd2>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a5d      	ldr	r2, [pc, #372]	; (8005e88 <HAL_DMA_IRQHandler+0x1b8>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d045      	beq.n	8005da2 <HAL_DMA_IRQHandler+0xd2>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a5c      	ldr	r2, [pc, #368]	; (8005e8c <HAL_DMA_IRQHandler+0x1bc>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d040      	beq.n	8005da2 <HAL_DMA_IRQHandler+0xd2>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a5a      	ldr	r2, [pc, #360]	; (8005e90 <HAL_DMA_IRQHandler+0x1c0>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d03b      	beq.n	8005da2 <HAL_DMA_IRQHandler+0xd2>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a59      	ldr	r2, [pc, #356]	; (8005e94 <HAL_DMA_IRQHandler+0x1c4>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d036      	beq.n	8005da2 <HAL_DMA_IRQHandler+0xd2>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a57      	ldr	r2, [pc, #348]	; (8005e98 <HAL_DMA_IRQHandler+0x1c8>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d031      	beq.n	8005da2 <HAL_DMA_IRQHandler+0xd2>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a56      	ldr	r2, [pc, #344]	; (8005e9c <HAL_DMA_IRQHandler+0x1cc>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d02c      	beq.n	8005da2 <HAL_DMA_IRQHandler+0xd2>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a54      	ldr	r2, [pc, #336]	; (8005ea0 <HAL_DMA_IRQHandler+0x1d0>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d027      	beq.n	8005da2 <HAL_DMA_IRQHandler+0xd2>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a53      	ldr	r2, [pc, #332]	; (8005ea4 <HAL_DMA_IRQHandler+0x1d4>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d022      	beq.n	8005da2 <HAL_DMA_IRQHandler+0xd2>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a51      	ldr	r2, [pc, #324]	; (8005ea8 <HAL_DMA_IRQHandler+0x1d8>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d01d      	beq.n	8005da2 <HAL_DMA_IRQHandler+0xd2>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a50      	ldr	r2, [pc, #320]	; (8005eac <HAL_DMA_IRQHandler+0x1dc>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d018      	beq.n	8005da2 <HAL_DMA_IRQHandler+0xd2>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a4e      	ldr	r2, [pc, #312]	; (8005eb0 <HAL_DMA_IRQHandler+0x1e0>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d013      	beq.n	8005da2 <HAL_DMA_IRQHandler+0xd2>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a4d      	ldr	r2, [pc, #308]	; (8005eb4 <HAL_DMA_IRQHandler+0x1e4>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d00e      	beq.n	8005da2 <HAL_DMA_IRQHandler+0xd2>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a4b      	ldr	r2, [pc, #300]	; (8005eb8 <HAL_DMA_IRQHandler+0x1e8>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d009      	beq.n	8005da2 <HAL_DMA_IRQHandler+0xd2>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a4a      	ldr	r2, [pc, #296]	; (8005ebc <HAL_DMA_IRQHandler+0x1ec>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d004      	beq.n	8005da2 <HAL_DMA_IRQHandler+0xd2>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a48      	ldr	r2, [pc, #288]	; (8005ec0 <HAL_DMA_IRQHandler+0x1f0>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d101      	bne.n	8005da6 <HAL_DMA_IRQHandler+0xd6>
 8005da2:	2301      	movs	r3, #1
 8005da4:	e000      	b.n	8005da8 <HAL_DMA_IRQHandler+0xd8>
 8005da6:	2300      	movs	r3, #0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	f000 842b 	beq.w	8006604 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005db2:	f003 031f 	and.w	r3, r3, #31
 8005db6:	2208      	movs	r2, #8
 8005db8:	409a      	lsls	r2, r3
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f000 80a2 	beq.w	8005f08 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a2e      	ldr	r2, [pc, #184]	; (8005e84 <HAL_DMA_IRQHandler+0x1b4>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d04a      	beq.n	8005e64 <HAL_DMA_IRQHandler+0x194>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a2d      	ldr	r2, [pc, #180]	; (8005e88 <HAL_DMA_IRQHandler+0x1b8>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d045      	beq.n	8005e64 <HAL_DMA_IRQHandler+0x194>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a2b      	ldr	r2, [pc, #172]	; (8005e8c <HAL_DMA_IRQHandler+0x1bc>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d040      	beq.n	8005e64 <HAL_DMA_IRQHandler+0x194>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a2a      	ldr	r2, [pc, #168]	; (8005e90 <HAL_DMA_IRQHandler+0x1c0>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d03b      	beq.n	8005e64 <HAL_DMA_IRQHandler+0x194>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a28      	ldr	r2, [pc, #160]	; (8005e94 <HAL_DMA_IRQHandler+0x1c4>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d036      	beq.n	8005e64 <HAL_DMA_IRQHandler+0x194>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a27      	ldr	r2, [pc, #156]	; (8005e98 <HAL_DMA_IRQHandler+0x1c8>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d031      	beq.n	8005e64 <HAL_DMA_IRQHandler+0x194>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a25      	ldr	r2, [pc, #148]	; (8005e9c <HAL_DMA_IRQHandler+0x1cc>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d02c      	beq.n	8005e64 <HAL_DMA_IRQHandler+0x194>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a24      	ldr	r2, [pc, #144]	; (8005ea0 <HAL_DMA_IRQHandler+0x1d0>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d027      	beq.n	8005e64 <HAL_DMA_IRQHandler+0x194>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a22      	ldr	r2, [pc, #136]	; (8005ea4 <HAL_DMA_IRQHandler+0x1d4>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d022      	beq.n	8005e64 <HAL_DMA_IRQHandler+0x194>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a21      	ldr	r2, [pc, #132]	; (8005ea8 <HAL_DMA_IRQHandler+0x1d8>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d01d      	beq.n	8005e64 <HAL_DMA_IRQHandler+0x194>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a1f      	ldr	r2, [pc, #124]	; (8005eac <HAL_DMA_IRQHandler+0x1dc>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d018      	beq.n	8005e64 <HAL_DMA_IRQHandler+0x194>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a1e      	ldr	r2, [pc, #120]	; (8005eb0 <HAL_DMA_IRQHandler+0x1e0>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d013      	beq.n	8005e64 <HAL_DMA_IRQHandler+0x194>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a1c      	ldr	r2, [pc, #112]	; (8005eb4 <HAL_DMA_IRQHandler+0x1e4>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d00e      	beq.n	8005e64 <HAL_DMA_IRQHandler+0x194>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a1b      	ldr	r2, [pc, #108]	; (8005eb8 <HAL_DMA_IRQHandler+0x1e8>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d009      	beq.n	8005e64 <HAL_DMA_IRQHandler+0x194>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a19      	ldr	r2, [pc, #100]	; (8005ebc <HAL_DMA_IRQHandler+0x1ec>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d004      	beq.n	8005e64 <HAL_DMA_IRQHandler+0x194>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a18      	ldr	r2, [pc, #96]	; (8005ec0 <HAL_DMA_IRQHandler+0x1f0>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d12f      	bne.n	8005ec4 <HAL_DMA_IRQHandler+0x1f4>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0304 	and.w	r3, r3, #4
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	bf14      	ite	ne
 8005e72:	2301      	movne	r3, #1
 8005e74:	2300      	moveq	r3, #0
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	e02e      	b.n	8005ed8 <HAL_DMA_IRQHandler+0x208>
 8005e7a:	bf00      	nop
 8005e7c:	24000000 	.word	0x24000000
 8005e80:	1b4e81b5 	.word	0x1b4e81b5
 8005e84:	40020010 	.word	0x40020010
 8005e88:	40020028 	.word	0x40020028
 8005e8c:	40020040 	.word	0x40020040
 8005e90:	40020058 	.word	0x40020058
 8005e94:	40020070 	.word	0x40020070
 8005e98:	40020088 	.word	0x40020088
 8005e9c:	400200a0 	.word	0x400200a0
 8005ea0:	400200b8 	.word	0x400200b8
 8005ea4:	40020410 	.word	0x40020410
 8005ea8:	40020428 	.word	0x40020428
 8005eac:	40020440 	.word	0x40020440
 8005eb0:	40020458 	.word	0x40020458
 8005eb4:	40020470 	.word	0x40020470
 8005eb8:	40020488 	.word	0x40020488
 8005ebc:	400204a0 	.word	0x400204a0
 8005ec0:	400204b8 	.word	0x400204b8
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0308 	and.w	r3, r3, #8
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	bf14      	ite	ne
 8005ed2:	2301      	movne	r3, #1
 8005ed4:	2300      	moveq	r3, #0
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d015      	beq.n	8005f08 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f022 0204 	bic.w	r2, r2, #4
 8005eea:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ef0:	f003 031f 	and.w	r3, r3, #31
 8005ef4:	2208      	movs	r2, #8
 8005ef6:	409a      	lsls	r2, r3
 8005ef8:	6a3b      	ldr	r3, [r7, #32]
 8005efa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f00:	f043 0201 	orr.w	r2, r3, #1
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f0c:	f003 031f 	and.w	r3, r3, #31
 8005f10:	69ba      	ldr	r2, [r7, #24]
 8005f12:	fa22 f303 	lsr.w	r3, r2, r3
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d06e      	beq.n	8005ffc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a69      	ldr	r2, [pc, #420]	; (80060c8 <HAL_DMA_IRQHandler+0x3f8>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d04a      	beq.n	8005fbe <HAL_DMA_IRQHandler+0x2ee>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a67      	ldr	r2, [pc, #412]	; (80060cc <HAL_DMA_IRQHandler+0x3fc>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d045      	beq.n	8005fbe <HAL_DMA_IRQHandler+0x2ee>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a66      	ldr	r2, [pc, #408]	; (80060d0 <HAL_DMA_IRQHandler+0x400>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d040      	beq.n	8005fbe <HAL_DMA_IRQHandler+0x2ee>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a64      	ldr	r2, [pc, #400]	; (80060d4 <HAL_DMA_IRQHandler+0x404>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d03b      	beq.n	8005fbe <HAL_DMA_IRQHandler+0x2ee>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a63      	ldr	r2, [pc, #396]	; (80060d8 <HAL_DMA_IRQHandler+0x408>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d036      	beq.n	8005fbe <HAL_DMA_IRQHandler+0x2ee>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a61      	ldr	r2, [pc, #388]	; (80060dc <HAL_DMA_IRQHandler+0x40c>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d031      	beq.n	8005fbe <HAL_DMA_IRQHandler+0x2ee>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a60      	ldr	r2, [pc, #384]	; (80060e0 <HAL_DMA_IRQHandler+0x410>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d02c      	beq.n	8005fbe <HAL_DMA_IRQHandler+0x2ee>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a5e      	ldr	r2, [pc, #376]	; (80060e4 <HAL_DMA_IRQHandler+0x414>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d027      	beq.n	8005fbe <HAL_DMA_IRQHandler+0x2ee>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a5d      	ldr	r2, [pc, #372]	; (80060e8 <HAL_DMA_IRQHandler+0x418>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d022      	beq.n	8005fbe <HAL_DMA_IRQHandler+0x2ee>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a5b      	ldr	r2, [pc, #364]	; (80060ec <HAL_DMA_IRQHandler+0x41c>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d01d      	beq.n	8005fbe <HAL_DMA_IRQHandler+0x2ee>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a5a      	ldr	r2, [pc, #360]	; (80060f0 <HAL_DMA_IRQHandler+0x420>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d018      	beq.n	8005fbe <HAL_DMA_IRQHandler+0x2ee>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a58      	ldr	r2, [pc, #352]	; (80060f4 <HAL_DMA_IRQHandler+0x424>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d013      	beq.n	8005fbe <HAL_DMA_IRQHandler+0x2ee>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a57      	ldr	r2, [pc, #348]	; (80060f8 <HAL_DMA_IRQHandler+0x428>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d00e      	beq.n	8005fbe <HAL_DMA_IRQHandler+0x2ee>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a55      	ldr	r2, [pc, #340]	; (80060fc <HAL_DMA_IRQHandler+0x42c>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d009      	beq.n	8005fbe <HAL_DMA_IRQHandler+0x2ee>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a54      	ldr	r2, [pc, #336]	; (8006100 <HAL_DMA_IRQHandler+0x430>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d004      	beq.n	8005fbe <HAL_DMA_IRQHandler+0x2ee>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a52      	ldr	r2, [pc, #328]	; (8006104 <HAL_DMA_IRQHandler+0x434>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d10a      	bne.n	8005fd4 <HAL_DMA_IRQHandler+0x304>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	bf14      	ite	ne
 8005fcc:	2301      	movne	r3, #1
 8005fce:	2300      	moveq	r3, #0
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	e003      	b.n	8005fdc <HAL_DMA_IRQHandler+0x30c>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2300      	movs	r3, #0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00d      	beq.n	8005ffc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fe4:	f003 031f 	and.w	r3, r3, #31
 8005fe8:	2201      	movs	r2, #1
 8005fea:	409a      	lsls	r2, r3
 8005fec:	6a3b      	ldr	r3, [r7, #32]
 8005fee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff4:	f043 0202 	orr.w	r2, r3, #2
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006000:	f003 031f 	and.w	r3, r3, #31
 8006004:	2204      	movs	r2, #4
 8006006:	409a      	lsls	r2, r3
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	4013      	ands	r3, r2
 800600c:	2b00      	cmp	r3, #0
 800600e:	f000 808f 	beq.w	8006130 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a2c      	ldr	r2, [pc, #176]	; (80060c8 <HAL_DMA_IRQHandler+0x3f8>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d04a      	beq.n	80060b2 <HAL_DMA_IRQHandler+0x3e2>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a2a      	ldr	r2, [pc, #168]	; (80060cc <HAL_DMA_IRQHandler+0x3fc>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d045      	beq.n	80060b2 <HAL_DMA_IRQHandler+0x3e2>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a29      	ldr	r2, [pc, #164]	; (80060d0 <HAL_DMA_IRQHandler+0x400>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d040      	beq.n	80060b2 <HAL_DMA_IRQHandler+0x3e2>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a27      	ldr	r2, [pc, #156]	; (80060d4 <HAL_DMA_IRQHandler+0x404>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d03b      	beq.n	80060b2 <HAL_DMA_IRQHandler+0x3e2>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a26      	ldr	r2, [pc, #152]	; (80060d8 <HAL_DMA_IRQHandler+0x408>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d036      	beq.n	80060b2 <HAL_DMA_IRQHandler+0x3e2>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a24      	ldr	r2, [pc, #144]	; (80060dc <HAL_DMA_IRQHandler+0x40c>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d031      	beq.n	80060b2 <HAL_DMA_IRQHandler+0x3e2>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a23      	ldr	r2, [pc, #140]	; (80060e0 <HAL_DMA_IRQHandler+0x410>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d02c      	beq.n	80060b2 <HAL_DMA_IRQHandler+0x3e2>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a21      	ldr	r2, [pc, #132]	; (80060e4 <HAL_DMA_IRQHandler+0x414>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d027      	beq.n	80060b2 <HAL_DMA_IRQHandler+0x3e2>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a20      	ldr	r2, [pc, #128]	; (80060e8 <HAL_DMA_IRQHandler+0x418>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d022      	beq.n	80060b2 <HAL_DMA_IRQHandler+0x3e2>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a1e      	ldr	r2, [pc, #120]	; (80060ec <HAL_DMA_IRQHandler+0x41c>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d01d      	beq.n	80060b2 <HAL_DMA_IRQHandler+0x3e2>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a1d      	ldr	r2, [pc, #116]	; (80060f0 <HAL_DMA_IRQHandler+0x420>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d018      	beq.n	80060b2 <HAL_DMA_IRQHandler+0x3e2>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a1b      	ldr	r2, [pc, #108]	; (80060f4 <HAL_DMA_IRQHandler+0x424>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d013      	beq.n	80060b2 <HAL_DMA_IRQHandler+0x3e2>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a1a      	ldr	r2, [pc, #104]	; (80060f8 <HAL_DMA_IRQHandler+0x428>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d00e      	beq.n	80060b2 <HAL_DMA_IRQHandler+0x3e2>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a18      	ldr	r2, [pc, #96]	; (80060fc <HAL_DMA_IRQHandler+0x42c>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d009      	beq.n	80060b2 <HAL_DMA_IRQHandler+0x3e2>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a17      	ldr	r2, [pc, #92]	; (8006100 <HAL_DMA_IRQHandler+0x430>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d004      	beq.n	80060b2 <HAL_DMA_IRQHandler+0x3e2>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a15      	ldr	r2, [pc, #84]	; (8006104 <HAL_DMA_IRQHandler+0x434>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d12a      	bne.n	8006108 <HAL_DMA_IRQHandler+0x438>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0302 	and.w	r3, r3, #2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	bf14      	ite	ne
 80060c0:	2301      	movne	r3, #1
 80060c2:	2300      	moveq	r3, #0
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	e023      	b.n	8006110 <HAL_DMA_IRQHandler+0x440>
 80060c8:	40020010 	.word	0x40020010
 80060cc:	40020028 	.word	0x40020028
 80060d0:	40020040 	.word	0x40020040
 80060d4:	40020058 	.word	0x40020058
 80060d8:	40020070 	.word	0x40020070
 80060dc:	40020088 	.word	0x40020088
 80060e0:	400200a0 	.word	0x400200a0
 80060e4:	400200b8 	.word	0x400200b8
 80060e8:	40020410 	.word	0x40020410
 80060ec:	40020428 	.word	0x40020428
 80060f0:	40020440 	.word	0x40020440
 80060f4:	40020458 	.word	0x40020458
 80060f8:	40020470 	.word	0x40020470
 80060fc:	40020488 	.word	0x40020488
 8006100:	400204a0 	.word	0x400204a0
 8006104:	400204b8 	.word	0x400204b8
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2300      	movs	r3, #0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00d      	beq.n	8006130 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006118:	f003 031f 	and.w	r3, r3, #31
 800611c:	2204      	movs	r2, #4
 800611e:	409a      	lsls	r2, r3
 8006120:	6a3b      	ldr	r3, [r7, #32]
 8006122:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006128:	f043 0204 	orr.w	r2, r3, #4
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006134:	f003 031f 	and.w	r3, r3, #31
 8006138:	2210      	movs	r2, #16
 800613a:	409a      	lsls	r2, r3
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	4013      	ands	r3, r2
 8006140:	2b00      	cmp	r3, #0
 8006142:	f000 80a6 	beq.w	8006292 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a85      	ldr	r2, [pc, #532]	; (8006360 <HAL_DMA_IRQHandler+0x690>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d04a      	beq.n	80061e6 <HAL_DMA_IRQHandler+0x516>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a83      	ldr	r2, [pc, #524]	; (8006364 <HAL_DMA_IRQHandler+0x694>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d045      	beq.n	80061e6 <HAL_DMA_IRQHandler+0x516>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a82      	ldr	r2, [pc, #520]	; (8006368 <HAL_DMA_IRQHandler+0x698>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d040      	beq.n	80061e6 <HAL_DMA_IRQHandler+0x516>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a80      	ldr	r2, [pc, #512]	; (800636c <HAL_DMA_IRQHandler+0x69c>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d03b      	beq.n	80061e6 <HAL_DMA_IRQHandler+0x516>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a7f      	ldr	r2, [pc, #508]	; (8006370 <HAL_DMA_IRQHandler+0x6a0>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d036      	beq.n	80061e6 <HAL_DMA_IRQHandler+0x516>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a7d      	ldr	r2, [pc, #500]	; (8006374 <HAL_DMA_IRQHandler+0x6a4>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d031      	beq.n	80061e6 <HAL_DMA_IRQHandler+0x516>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a7c      	ldr	r2, [pc, #496]	; (8006378 <HAL_DMA_IRQHandler+0x6a8>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d02c      	beq.n	80061e6 <HAL_DMA_IRQHandler+0x516>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a7a      	ldr	r2, [pc, #488]	; (800637c <HAL_DMA_IRQHandler+0x6ac>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d027      	beq.n	80061e6 <HAL_DMA_IRQHandler+0x516>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a79      	ldr	r2, [pc, #484]	; (8006380 <HAL_DMA_IRQHandler+0x6b0>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d022      	beq.n	80061e6 <HAL_DMA_IRQHandler+0x516>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a77      	ldr	r2, [pc, #476]	; (8006384 <HAL_DMA_IRQHandler+0x6b4>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d01d      	beq.n	80061e6 <HAL_DMA_IRQHandler+0x516>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a76      	ldr	r2, [pc, #472]	; (8006388 <HAL_DMA_IRQHandler+0x6b8>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d018      	beq.n	80061e6 <HAL_DMA_IRQHandler+0x516>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a74      	ldr	r2, [pc, #464]	; (800638c <HAL_DMA_IRQHandler+0x6bc>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d013      	beq.n	80061e6 <HAL_DMA_IRQHandler+0x516>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a73      	ldr	r2, [pc, #460]	; (8006390 <HAL_DMA_IRQHandler+0x6c0>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d00e      	beq.n	80061e6 <HAL_DMA_IRQHandler+0x516>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a71      	ldr	r2, [pc, #452]	; (8006394 <HAL_DMA_IRQHandler+0x6c4>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d009      	beq.n	80061e6 <HAL_DMA_IRQHandler+0x516>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a70      	ldr	r2, [pc, #448]	; (8006398 <HAL_DMA_IRQHandler+0x6c8>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d004      	beq.n	80061e6 <HAL_DMA_IRQHandler+0x516>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a6e      	ldr	r2, [pc, #440]	; (800639c <HAL_DMA_IRQHandler+0x6cc>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d10a      	bne.n	80061fc <HAL_DMA_IRQHandler+0x52c>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0308 	and.w	r3, r3, #8
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	bf14      	ite	ne
 80061f4:	2301      	movne	r3, #1
 80061f6:	2300      	moveq	r3, #0
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	e009      	b.n	8006210 <HAL_DMA_IRQHandler+0x540>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0304 	and.w	r3, r3, #4
 8006206:	2b00      	cmp	r3, #0
 8006208:	bf14      	ite	ne
 800620a:	2301      	movne	r3, #1
 800620c:	2300      	moveq	r3, #0
 800620e:	b2db      	uxtb	r3, r3
 8006210:	2b00      	cmp	r3, #0
 8006212:	d03e      	beq.n	8006292 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006218:	f003 031f 	and.w	r3, r3, #31
 800621c:	2210      	movs	r2, #16
 800621e:	409a      	lsls	r2, r3
 8006220:	6a3b      	ldr	r3, [r7, #32]
 8006222:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800622e:	2b00      	cmp	r3, #0
 8006230:	d018      	beq.n	8006264 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d108      	bne.n	8006252 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006244:	2b00      	cmp	r3, #0
 8006246:	d024      	beq.n	8006292 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	4798      	blx	r3
 8006250:	e01f      	b.n	8006292 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006256:	2b00      	cmp	r3, #0
 8006258:	d01b      	beq.n	8006292 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	4798      	blx	r3
 8006262:	e016      	b.n	8006292 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800626e:	2b00      	cmp	r3, #0
 8006270:	d107      	bne.n	8006282 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f022 0208 	bic.w	r2, r2, #8
 8006280:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006286:	2b00      	cmp	r3, #0
 8006288:	d003      	beq.n	8006292 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006296:	f003 031f 	and.w	r3, r3, #31
 800629a:	2220      	movs	r2, #32
 800629c:	409a      	lsls	r2, r3
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	4013      	ands	r3, r2
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f000 8110 	beq.w	80064c8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a2c      	ldr	r2, [pc, #176]	; (8006360 <HAL_DMA_IRQHandler+0x690>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d04a      	beq.n	8006348 <HAL_DMA_IRQHandler+0x678>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a2b      	ldr	r2, [pc, #172]	; (8006364 <HAL_DMA_IRQHandler+0x694>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d045      	beq.n	8006348 <HAL_DMA_IRQHandler+0x678>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a29      	ldr	r2, [pc, #164]	; (8006368 <HAL_DMA_IRQHandler+0x698>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d040      	beq.n	8006348 <HAL_DMA_IRQHandler+0x678>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a28      	ldr	r2, [pc, #160]	; (800636c <HAL_DMA_IRQHandler+0x69c>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d03b      	beq.n	8006348 <HAL_DMA_IRQHandler+0x678>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a26      	ldr	r2, [pc, #152]	; (8006370 <HAL_DMA_IRQHandler+0x6a0>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d036      	beq.n	8006348 <HAL_DMA_IRQHandler+0x678>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a25      	ldr	r2, [pc, #148]	; (8006374 <HAL_DMA_IRQHandler+0x6a4>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d031      	beq.n	8006348 <HAL_DMA_IRQHandler+0x678>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a23      	ldr	r2, [pc, #140]	; (8006378 <HAL_DMA_IRQHandler+0x6a8>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d02c      	beq.n	8006348 <HAL_DMA_IRQHandler+0x678>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a22      	ldr	r2, [pc, #136]	; (800637c <HAL_DMA_IRQHandler+0x6ac>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d027      	beq.n	8006348 <HAL_DMA_IRQHandler+0x678>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a20      	ldr	r2, [pc, #128]	; (8006380 <HAL_DMA_IRQHandler+0x6b0>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d022      	beq.n	8006348 <HAL_DMA_IRQHandler+0x678>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a1f      	ldr	r2, [pc, #124]	; (8006384 <HAL_DMA_IRQHandler+0x6b4>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d01d      	beq.n	8006348 <HAL_DMA_IRQHandler+0x678>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a1d      	ldr	r2, [pc, #116]	; (8006388 <HAL_DMA_IRQHandler+0x6b8>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d018      	beq.n	8006348 <HAL_DMA_IRQHandler+0x678>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a1c      	ldr	r2, [pc, #112]	; (800638c <HAL_DMA_IRQHandler+0x6bc>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d013      	beq.n	8006348 <HAL_DMA_IRQHandler+0x678>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a1a      	ldr	r2, [pc, #104]	; (8006390 <HAL_DMA_IRQHandler+0x6c0>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d00e      	beq.n	8006348 <HAL_DMA_IRQHandler+0x678>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a19      	ldr	r2, [pc, #100]	; (8006394 <HAL_DMA_IRQHandler+0x6c4>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d009      	beq.n	8006348 <HAL_DMA_IRQHandler+0x678>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a17      	ldr	r2, [pc, #92]	; (8006398 <HAL_DMA_IRQHandler+0x6c8>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d004      	beq.n	8006348 <HAL_DMA_IRQHandler+0x678>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a16      	ldr	r2, [pc, #88]	; (800639c <HAL_DMA_IRQHandler+0x6cc>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d12b      	bne.n	80063a0 <HAL_DMA_IRQHandler+0x6d0>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0310 	and.w	r3, r3, #16
 8006352:	2b00      	cmp	r3, #0
 8006354:	bf14      	ite	ne
 8006356:	2301      	movne	r3, #1
 8006358:	2300      	moveq	r3, #0
 800635a:	b2db      	uxtb	r3, r3
 800635c:	e02a      	b.n	80063b4 <HAL_DMA_IRQHandler+0x6e4>
 800635e:	bf00      	nop
 8006360:	40020010 	.word	0x40020010
 8006364:	40020028 	.word	0x40020028
 8006368:	40020040 	.word	0x40020040
 800636c:	40020058 	.word	0x40020058
 8006370:	40020070 	.word	0x40020070
 8006374:	40020088 	.word	0x40020088
 8006378:	400200a0 	.word	0x400200a0
 800637c:	400200b8 	.word	0x400200b8
 8006380:	40020410 	.word	0x40020410
 8006384:	40020428 	.word	0x40020428
 8006388:	40020440 	.word	0x40020440
 800638c:	40020458 	.word	0x40020458
 8006390:	40020470 	.word	0x40020470
 8006394:	40020488 	.word	0x40020488
 8006398:	400204a0 	.word	0x400204a0
 800639c:	400204b8 	.word	0x400204b8
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	bf14      	ite	ne
 80063ae:	2301      	movne	r3, #1
 80063b0:	2300      	moveq	r3, #0
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 8087 	beq.w	80064c8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063be:	f003 031f 	and.w	r3, r3, #31
 80063c2:	2220      	movs	r2, #32
 80063c4:	409a      	lsls	r2, r3
 80063c6:	6a3b      	ldr	r3, [r7, #32]
 80063c8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	2b04      	cmp	r3, #4
 80063d4:	d139      	bne.n	800644a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f022 0216 	bic.w	r2, r2, #22
 80063e4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	695a      	ldr	r2, [r3, #20]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063f4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d103      	bne.n	8006406 <HAL_DMA_IRQHandler+0x736>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006402:	2b00      	cmp	r3, #0
 8006404:	d007      	beq.n	8006416 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f022 0208 	bic.w	r2, r2, #8
 8006414:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800641a:	f003 031f 	and.w	r3, r3, #31
 800641e:	223f      	movs	r2, #63	; 0x3f
 8006420:	409a      	lsls	r2, r3
 8006422:	6a3b      	ldr	r3, [r7, #32]
 8006424:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2201      	movs	r2, #1
 800642a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800643a:	2b00      	cmp	r3, #0
 800643c:	f000 834a 	beq.w	8006ad4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	4798      	blx	r3
          }
          return;
 8006448:	e344      	b.n	8006ad4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d018      	beq.n	800648a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d108      	bne.n	8006478 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800646a:	2b00      	cmp	r3, #0
 800646c:	d02c      	beq.n	80064c8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	4798      	blx	r3
 8006476:	e027      	b.n	80064c8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800647c:	2b00      	cmp	r3, #0
 800647e:	d023      	beq.n	80064c8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	4798      	blx	r3
 8006488:	e01e      	b.n	80064c8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006494:	2b00      	cmp	r3, #0
 8006496:	d10f      	bne.n	80064b8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f022 0210 	bic.w	r2, r2, #16
 80064a6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d003      	beq.n	80064c8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f000 8306 	beq.w	8006ade <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064d6:	f003 0301 	and.w	r3, r3, #1
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f000 8088 	beq.w	80065f0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2204      	movs	r2, #4
 80064e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a7a      	ldr	r2, [pc, #488]	; (80066d8 <HAL_DMA_IRQHandler+0xa08>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d04a      	beq.n	8006588 <HAL_DMA_IRQHandler+0x8b8>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a79      	ldr	r2, [pc, #484]	; (80066dc <HAL_DMA_IRQHandler+0xa0c>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d045      	beq.n	8006588 <HAL_DMA_IRQHandler+0x8b8>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a77      	ldr	r2, [pc, #476]	; (80066e0 <HAL_DMA_IRQHandler+0xa10>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d040      	beq.n	8006588 <HAL_DMA_IRQHandler+0x8b8>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a76      	ldr	r2, [pc, #472]	; (80066e4 <HAL_DMA_IRQHandler+0xa14>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d03b      	beq.n	8006588 <HAL_DMA_IRQHandler+0x8b8>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a74      	ldr	r2, [pc, #464]	; (80066e8 <HAL_DMA_IRQHandler+0xa18>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d036      	beq.n	8006588 <HAL_DMA_IRQHandler+0x8b8>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a73      	ldr	r2, [pc, #460]	; (80066ec <HAL_DMA_IRQHandler+0xa1c>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d031      	beq.n	8006588 <HAL_DMA_IRQHandler+0x8b8>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a71      	ldr	r2, [pc, #452]	; (80066f0 <HAL_DMA_IRQHandler+0xa20>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d02c      	beq.n	8006588 <HAL_DMA_IRQHandler+0x8b8>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a70      	ldr	r2, [pc, #448]	; (80066f4 <HAL_DMA_IRQHandler+0xa24>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d027      	beq.n	8006588 <HAL_DMA_IRQHandler+0x8b8>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a6e      	ldr	r2, [pc, #440]	; (80066f8 <HAL_DMA_IRQHandler+0xa28>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d022      	beq.n	8006588 <HAL_DMA_IRQHandler+0x8b8>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a6d      	ldr	r2, [pc, #436]	; (80066fc <HAL_DMA_IRQHandler+0xa2c>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d01d      	beq.n	8006588 <HAL_DMA_IRQHandler+0x8b8>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a6b      	ldr	r2, [pc, #428]	; (8006700 <HAL_DMA_IRQHandler+0xa30>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d018      	beq.n	8006588 <HAL_DMA_IRQHandler+0x8b8>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a6a      	ldr	r2, [pc, #424]	; (8006704 <HAL_DMA_IRQHandler+0xa34>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d013      	beq.n	8006588 <HAL_DMA_IRQHandler+0x8b8>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a68      	ldr	r2, [pc, #416]	; (8006708 <HAL_DMA_IRQHandler+0xa38>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d00e      	beq.n	8006588 <HAL_DMA_IRQHandler+0x8b8>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a67      	ldr	r2, [pc, #412]	; (800670c <HAL_DMA_IRQHandler+0xa3c>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d009      	beq.n	8006588 <HAL_DMA_IRQHandler+0x8b8>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a65      	ldr	r2, [pc, #404]	; (8006710 <HAL_DMA_IRQHandler+0xa40>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d004      	beq.n	8006588 <HAL_DMA_IRQHandler+0x8b8>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a64      	ldr	r2, [pc, #400]	; (8006714 <HAL_DMA_IRQHandler+0xa44>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d108      	bne.n	800659a <HAL_DMA_IRQHandler+0x8ca>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f022 0201 	bic.w	r2, r2, #1
 8006596:	601a      	str	r2, [r3, #0]
 8006598:	e007      	b.n	80065aa <HAL_DMA_IRQHandler+0x8da>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f022 0201 	bic.w	r2, r2, #1
 80065a8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	3301      	adds	r3, #1
 80065ae:	60fb      	str	r3, [r7, #12]
 80065b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d307      	bcc.n	80065c6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0301 	and.w	r3, r3, #1
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1f2      	bne.n	80065aa <HAL_DMA_IRQHandler+0x8da>
 80065c4:	e000      	b.n	80065c8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80065c6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d004      	beq.n	80065e0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2203      	movs	r2, #3
 80065da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80065de:	e003      	b.n	80065e8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f000 8272 	beq.w	8006ade <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	4798      	blx	r3
 8006602:	e26c      	b.n	8006ade <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a43      	ldr	r2, [pc, #268]	; (8006718 <HAL_DMA_IRQHandler+0xa48>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d022      	beq.n	8006654 <HAL_DMA_IRQHandler+0x984>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a42      	ldr	r2, [pc, #264]	; (800671c <HAL_DMA_IRQHandler+0xa4c>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d01d      	beq.n	8006654 <HAL_DMA_IRQHandler+0x984>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a40      	ldr	r2, [pc, #256]	; (8006720 <HAL_DMA_IRQHandler+0xa50>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d018      	beq.n	8006654 <HAL_DMA_IRQHandler+0x984>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a3f      	ldr	r2, [pc, #252]	; (8006724 <HAL_DMA_IRQHandler+0xa54>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d013      	beq.n	8006654 <HAL_DMA_IRQHandler+0x984>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a3d      	ldr	r2, [pc, #244]	; (8006728 <HAL_DMA_IRQHandler+0xa58>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d00e      	beq.n	8006654 <HAL_DMA_IRQHandler+0x984>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a3c      	ldr	r2, [pc, #240]	; (800672c <HAL_DMA_IRQHandler+0xa5c>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d009      	beq.n	8006654 <HAL_DMA_IRQHandler+0x984>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a3a      	ldr	r2, [pc, #232]	; (8006730 <HAL_DMA_IRQHandler+0xa60>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d004      	beq.n	8006654 <HAL_DMA_IRQHandler+0x984>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a39      	ldr	r2, [pc, #228]	; (8006734 <HAL_DMA_IRQHandler+0xa64>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d101      	bne.n	8006658 <HAL_DMA_IRQHandler+0x988>
 8006654:	2301      	movs	r3, #1
 8006656:	e000      	b.n	800665a <HAL_DMA_IRQHandler+0x98a>
 8006658:	2300      	movs	r3, #0
 800665a:	2b00      	cmp	r3, #0
 800665c:	f000 823f 	beq.w	8006ade <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800666c:	f003 031f 	and.w	r3, r3, #31
 8006670:	2204      	movs	r2, #4
 8006672:	409a      	lsls	r2, r3
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	4013      	ands	r3, r2
 8006678:	2b00      	cmp	r3, #0
 800667a:	f000 80cd 	beq.w	8006818 <HAL_DMA_IRQHandler+0xb48>
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	f003 0304 	and.w	r3, r3, #4
 8006684:	2b00      	cmp	r3, #0
 8006686:	f000 80c7 	beq.w	8006818 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800668e:	f003 031f 	and.w	r3, r3, #31
 8006692:	2204      	movs	r2, #4
 8006694:	409a      	lsls	r2, r3
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d049      	beq.n	8006738 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d109      	bne.n	80066c2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f000 8210 	beq.w	8006ad8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066c0:	e20a      	b.n	8006ad8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	f000 8206 	beq.w	8006ad8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066d4:	e200      	b.n	8006ad8 <HAL_DMA_IRQHandler+0xe08>
 80066d6:	bf00      	nop
 80066d8:	40020010 	.word	0x40020010
 80066dc:	40020028 	.word	0x40020028
 80066e0:	40020040 	.word	0x40020040
 80066e4:	40020058 	.word	0x40020058
 80066e8:	40020070 	.word	0x40020070
 80066ec:	40020088 	.word	0x40020088
 80066f0:	400200a0 	.word	0x400200a0
 80066f4:	400200b8 	.word	0x400200b8
 80066f8:	40020410 	.word	0x40020410
 80066fc:	40020428 	.word	0x40020428
 8006700:	40020440 	.word	0x40020440
 8006704:	40020458 	.word	0x40020458
 8006708:	40020470 	.word	0x40020470
 800670c:	40020488 	.word	0x40020488
 8006710:	400204a0 	.word	0x400204a0
 8006714:	400204b8 	.word	0x400204b8
 8006718:	58025408 	.word	0x58025408
 800671c:	5802541c 	.word	0x5802541c
 8006720:	58025430 	.word	0x58025430
 8006724:	58025444 	.word	0x58025444
 8006728:	58025458 	.word	0x58025458
 800672c:	5802546c 	.word	0x5802546c
 8006730:	58025480 	.word	0x58025480
 8006734:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	f003 0320 	and.w	r3, r3, #32
 800673e:	2b00      	cmp	r3, #0
 8006740:	d160      	bne.n	8006804 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a7f      	ldr	r2, [pc, #508]	; (8006944 <HAL_DMA_IRQHandler+0xc74>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d04a      	beq.n	80067e2 <HAL_DMA_IRQHandler+0xb12>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a7d      	ldr	r2, [pc, #500]	; (8006948 <HAL_DMA_IRQHandler+0xc78>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d045      	beq.n	80067e2 <HAL_DMA_IRQHandler+0xb12>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a7c      	ldr	r2, [pc, #496]	; (800694c <HAL_DMA_IRQHandler+0xc7c>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d040      	beq.n	80067e2 <HAL_DMA_IRQHandler+0xb12>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a7a      	ldr	r2, [pc, #488]	; (8006950 <HAL_DMA_IRQHandler+0xc80>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d03b      	beq.n	80067e2 <HAL_DMA_IRQHandler+0xb12>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a79      	ldr	r2, [pc, #484]	; (8006954 <HAL_DMA_IRQHandler+0xc84>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d036      	beq.n	80067e2 <HAL_DMA_IRQHandler+0xb12>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a77      	ldr	r2, [pc, #476]	; (8006958 <HAL_DMA_IRQHandler+0xc88>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d031      	beq.n	80067e2 <HAL_DMA_IRQHandler+0xb12>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a76      	ldr	r2, [pc, #472]	; (800695c <HAL_DMA_IRQHandler+0xc8c>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d02c      	beq.n	80067e2 <HAL_DMA_IRQHandler+0xb12>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a74      	ldr	r2, [pc, #464]	; (8006960 <HAL_DMA_IRQHandler+0xc90>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d027      	beq.n	80067e2 <HAL_DMA_IRQHandler+0xb12>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a73      	ldr	r2, [pc, #460]	; (8006964 <HAL_DMA_IRQHandler+0xc94>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d022      	beq.n	80067e2 <HAL_DMA_IRQHandler+0xb12>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a71      	ldr	r2, [pc, #452]	; (8006968 <HAL_DMA_IRQHandler+0xc98>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d01d      	beq.n	80067e2 <HAL_DMA_IRQHandler+0xb12>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a70      	ldr	r2, [pc, #448]	; (800696c <HAL_DMA_IRQHandler+0xc9c>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d018      	beq.n	80067e2 <HAL_DMA_IRQHandler+0xb12>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a6e      	ldr	r2, [pc, #440]	; (8006970 <HAL_DMA_IRQHandler+0xca0>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d013      	beq.n	80067e2 <HAL_DMA_IRQHandler+0xb12>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a6d      	ldr	r2, [pc, #436]	; (8006974 <HAL_DMA_IRQHandler+0xca4>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d00e      	beq.n	80067e2 <HAL_DMA_IRQHandler+0xb12>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a6b      	ldr	r2, [pc, #428]	; (8006978 <HAL_DMA_IRQHandler+0xca8>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d009      	beq.n	80067e2 <HAL_DMA_IRQHandler+0xb12>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a6a      	ldr	r2, [pc, #424]	; (800697c <HAL_DMA_IRQHandler+0xcac>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d004      	beq.n	80067e2 <HAL_DMA_IRQHandler+0xb12>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a68      	ldr	r2, [pc, #416]	; (8006980 <HAL_DMA_IRQHandler+0xcb0>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d108      	bne.n	80067f4 <HAL_DMA_IRQHandler+0xb24>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f022 0208 	bic.w	r2, r2, #8
 80067f0:	601a      	str	r2, [r3, #0]
 80067f2:	e007      	b.n	8006804 <HAL_DMA_IRQHandler+0xb34>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f022 0204 	bic.w	r2, r2, #4
 8006802:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006808:	2b00      	cmp	r3, #0
 800680a:	f000 8165 	beq.w	8006ad8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006816:	e15f      	b.n	8006ad8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800681c:	f003 031f 	and.w	r3, r3, #31
 8006820:	2202      	movs	r2, #2
 8006822:	409a      	lsls	r2, r3
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	4013      	ands	r3, r2
 8006828:	2b00      	cmp	r3, #0
 800682a:	f000 80c5 	beq.w	80069b8 <HAL_DMA_IRQHandler+0xce8>
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	f003 0302 	and.w	r3, r3, #2
 8006834:	2b00      	cmp	r3, #0
 8006836:	f000 80bf 	beq.w	80069b8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800683e:	f003 031f 	and.w	r3, r3, #31
 8006842:	2202      	movs	r2, #2
 8006844:	409a      	lsls	r2, r3
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006850:	2b00      	cmp	r3, #0
 8006852:	d018      	beq.n	8006886 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d109      	bne.n	8006872 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006862:	2b00      	cmp	r3, #0
 8006864:	f000 813a 	beq.w	8006adc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006870:	e134      	b.n	8006adc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006876:	2b00      	cmp	r3, #0
 8006878:	f000 8130 	beq.w	8006adc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006884:	e12a      	b.n	8006adc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	f003 0320 	and.w	r3, r3, #32
 800688c:	2b00      	cmp	r3, #0
 800688e:	f040 8089 	bne.w	80069a4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a2b      	ldr	r2, [pc, #172]	; (8006944 <HAL_DMA_IRQHandler+0xc74>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d04a      	beq.n	8006932 <HAL_DMA_IRQHandler+0xc62>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a29      	ldr	r2, [pc, #164]	; (8006948 <HAL_DMA_IRQHandler+0xc78>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d045      	beq.n	8006932 <HAL_DMA_IRQHandler+0xc62>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a28      	ldr	r2, [pc, #160]	; (800694c <HAL_DMA_IRQHandler+0xc7c>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d040      	beq.n	8006932 <HAL_DMA_IRQHandler+0xc62>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a26      	ldr	r2, [pc, #152]	; (8006950 <HAL_DMA_IRQHandler+0xc80>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d03b      	beq.n	8006932 <HAL_DMA_IRQHandler+0xc62>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a25      	ldr	r2, [pc, #148]	; (8006954 <HAL_DMA_IRQHandler+0xc84>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d036      	beq.n	8006932 <HAL_DMA_IRQHandler+0xc62>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a23      	ldr	r2, [pc, #140]	; (8006958 <HAL_DMA_IRQHandler+0xc88>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d031      	beq.n	8006932 <HAL_DMA_IRQHandler+0xc62>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a22      	ldr	r2, [pc, #136]	; (800695c <HAL_DMA_IRQHandler+0xc8c>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d02c      	beq.n	8006932 <HAL_DMA_IRQHandler+0xc62>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a20      	ldr	r2, [pc, #128]	; (8006960 <HAL_DMA_IRQHandler+0xc90>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d027      	beq.n	8006932 <HAL_DMA_IRQHandler+0xc62>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a1f      	ldr	r2, [pc, #124]	; (8006964 <HAL_DMA_IRQHandler+0xc94>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d022      	beq.n	8006932 <HAL_DMA_IRQHandler+0xc62>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a1d      	ldr	r2, [pc, #116]	; (8006968 <HAL_DMA_IRQHandler+0xc98>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d01d      	beq.n	8006932 <HAL_DMA_IRQHandler+0xc62>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a1c      	ldr	r2, [pc, #112]	; (800696c <HAL_DMA_IRQHandler+0xc9c>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d018      	beq.n	8006932 <HAL_DMA_IRQHandler+0xc62>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a1a      	ldr	r2, [pc, #104]	; (8006970 <HAL_DMA_IRQHandler+0xca0>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d013      	beq.n	8006932 <HAL_DMA_IRQHandler+0xc62>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a19      	ldr	r2, [pc, #100]	; (8006974 <HAL_DMA_IRQHandler+0xca4>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d00e      	beq.n	8006932 <HAL_DMA_IRQHandler+0xc62>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a17      	ldr	r2, [pc, #92]	; (8006978 <HAL_DMA_IRQHandler+0xca8>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d009      	beq.n	8006932 <HAL_DMA_IRQHandler+0xc62>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a16      	ldr	r2, [pc, #88]	; (800697c <HAL_DMA_IRQHandler+0xcac>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d004      	beq.n	8006932 <HAL_DMA_IRQHandler+0xc62>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a14      	ldr	r2, [pc, #80]	; (8006980 <HAL_DMA_IRQHandler+0xcb0>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d128      	bne.n	8006984 <HAL_DMA_IRQHandler+0xcb4>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f022 0214 	bic.w	r2, r2, #20
 8006940:	601a      	str	r2, [r3, #0]
 8006942:	e027      	b.n	8006994 <HAL_DMA_IRQHandler+0xcc4>
 8006944:	40020010 	.word	0x40020010
 8006948:	40020028 	.word	0x40020028
 800694c:	40020040 	.word	0x40020040
 8006950:	40020058 	.word	0x40020058
 8006954:	40020070 	.word	0x40020070
 8006958:	40020088 	.word	0x40020088
 800695c:	400200a0 	.word	0x400200a0
 8006960:	400200b8 	.word	0x400200b8
 8006964:	40020410 	.word	0x40020410
 8006968:	40020428 	.word	0x40020428
 800696c:	40020440 	.word	0x40020440
 8006970:	40020458 	.word	0x40020458
 8006974:	40020470 	.word	0x40020470
 8006978:	40020488 	.word	0x40020488
 800697c:	400204a0 	.word	0x400204a0
 8006980:	400204b8 	.word	0x400204b8
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f022 020a 	bic.w	r2, r2, #10
 8006992:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f000 8097 	beq.w	8006adc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069b6:	e091      	b.n	8006adc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069bc:	f003 031f 	and.w	r3, r3, #31
 80069c0:	2208      	movs	r2, #8
 80069c2:	409a      	lsls	r2, r3
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	4013      	ands	r3, r2
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f000 8088 	beq.w	8006ade <HAL_DMA_IRQHandler+0xe0e>
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	f003 0308 	and.w	r3, r3, #8
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f000 8082 	beq.w	8006ade <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a41      	ldr	r2, [pc, #260]	; (8006ae4 <HAL_DMA_IRQHandler+0xe14>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d04a      	beq.n	8006a7a <HAL_DMA_IRQHandler+0xdaa>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a3f      	ldr	r2, [pc, #252]	; (8006ae8 <HAL_DMA_IRQHandler+0xe18>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d045      	beq.n	8006a7a <HAL_DMA_IRQHandler+0xdaa>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a3e      	ldr	r2, [pc, #248]	; (8006aec <HAL_DMA_IRQHandler+0xe1c>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d040      	beq.n	8006a7a <HAL_DMA_IRQHandler+0xdaa>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a3c      	ldr	r2, [pc, #240]	; (8006af0 <HAL_DMA_IRQHandler+0xe20>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d03b      	beq.n	8006a7a <HAL_DMA_IRQHandler+0xdaa>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a3b      	ldr	r2, [pc, #236]	; (8006af4 <HAL_DMA_IRQHandler+0xe24>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d036      	beq.n	8006a7a <HAL_DMA_IRQHandler+0xdaa>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a39      	ldr	r2, [pc, #228]	; (8006af8 <HAL_DMA_IRQHandler+0xe28>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d031      	beq.n	8006a7a <HAL_DMA_IRQHandler+0xdaa>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a38      	ldr	r2, [pc, #224]	; (8006afc <HAL_DMA_IRQHandler+0xe2c>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d02c      	beq.n	8006a7a <HAL_DMA_IRQHandler+0xdaa>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a36      	ldr	r2, [pc, #216]	; (8006b00 <HAL_DMA_IRQHandler+0xe30>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d027      	beq.n	8006a7a <HAL_DMA_IRQHandler+0xdaa>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a35      	ldr	r2, [pc, #212]	; (8006b04 <HAL_DMA_IRQHandler+0xe34>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d022      	beq.n	8006a7a <HAL_DMA_IRQHandler+0xdaa>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a33      	ldr	r2, [pc, #204]	; (8006b08 <HAL_DMA_IRQHandler+0xe38>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d01d      	beq.n	8006a7a <HAL_DMA_IRQHandler+0xdaa>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a32      	ldr	r2, [pc, #200]	; (8006b0c <HAL_DMA_IRQHandler+0xe3c>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d018      	beq.n	8006a7a <HAL_DMA_IRQHandler+0xdaa>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a30      	ldr	r2, [pc, #192]	; (8006b10 <HAL_DMA_IRQHandler+0xe40>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d013      	beq.n	8006a7a <HAL_DMA_IRQHandler+0xdaa>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a2f      	ldr	r2, [pc, #188]	; (8006b14 <HAL_DMA_IRQHandler+0xe44>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d00e      	beq.n	8006a7a <HAL_DMA_IRQHandler+0xdaa>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a2d      	ldr	r2, [pc, #180]	; (8006b18 <HAL_DMA_IRQHandler+0xe48>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d009      	beq.n	8006a7a <HAL_DMA_IRQHandler+0xdaa>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a2c      	ldr	r2, [pc, #176]	; (8006b1c <HAL_DMA_IRQHandler+0xe4c>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d004      	beq.n	8006a7a <HAL_DMA_IRQHandler+0xdaa>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a2a      	ldr	r2, [pc, #168]	; (8006b20 <HAL_DMA_IRQHandler+0xe50>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d108      	bne.n	8006a8c <HAL_DMA_IRQHandler+0xdbc>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f022 021c 	bic.w	r2, r2, #28
 8006a88:	601a      	str	r2, [r3, #0]
 8006a8a:	e007      	b.n	8006a9c <HAL_DMA_IRQHandler+0xdcc>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f022 020e 	bic.w	r2, r2, #14
 8006a9a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aa0:	f003 031f 	and.w	r3, r3, #31
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	409a      	lsls	r2, r3
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d009      	beq.n	8006ade <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	4798      	blx	r3
 8006ad2:	e004      	b.n	8006ade <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006ad4:	bf00      	nop
 8006ad6:	e002      	b.n	8006ade <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ad8:	bf00      	nop
 8006ada:	e000      	b.n	8006ade <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006adc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006ade:	3728      	adds	r7, #40	; 0x28
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	40020010 	.word	0x40020010
 8006ae8:	40020028 	.word	0x40020028
 8006aec:	40020040 	.word	0x40020040
 8006af0:	40020058 	.word	0x40020058
 8006af4:	40020070 	.word	0x40020070
 8006af8:	40020088 	.word	0x40020088
 8006afc:	400200a0 	.word	0x400200a0
 8006b00:	400200b8 	.word	0x400200b8
 8006b04:	40020410 	.word	0x40020410
 8006b08:	40020428 	.word	0x40020428
 8006b0c:	40020440 	.word	0x40020440
 8006b10:	40020458 	.word	0x40020458
 8006b14:	40020470 	.word	0x40020470
 8006b18:	40020488 	.word	0x40020488
 8006b1c:	400204a0 	.word	0x400204a0
 8006b20:	400204b8 	.word	0x400204b8

08006b24 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b087      	sub	sp, #28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	607a      	str	r2, [r7, #4]
 8006b30:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b36:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b3c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a7f      	ldr	r2, [pc, #508]	; (8006d40 <DMA_SetConfig+0x21c>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d072      	beq.n	8006c2e <DMA_SetConfig+0x10a>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a7d      	ldr	r2, [pc, #500]	; (8006d44 <DMA_SetConfig+0x220>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d06d      	beq.n	8006c2e <DMA_SetConfig+0x10a>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a7c      	ldr	r2, [pc, #496]	; (8006d48 <DMA_SetConfig+0x224>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d068      	beq.n	8006c2e <DMA_SetConfig+0x10a>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a7a      	ldr	r2, [pc, #488]	; (8006d4c <DMA_SetConfig+0x228>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d063      	beq.n	8006c2e <DMA_SetConfig+0x10a>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a79      	ldr	r2, [pc, #484]	; (8006d50 <DMA_SetConfig+0x22c>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d05e      	beq.n	8006c2e <DMA_SetConfig+0x10a>
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a77      	ldr	r2, [pc, #476]	; (8006d54 <DMA_SetConfig+0x230>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d059      	beq.n	8006c2e <DMA_SetConfig+0x10a>
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a76      	ldr	r2, [pc, #472]	; (8006d58 <DMA_SetConfig+0x234>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d054      	beq.n	8006c2e <DMA_SetConfig+0x10a>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a74      	ldr	r2, [pc, #464]	; (8006d5c <DMA_SetConfig+0x238>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d04f      	beq.n	8006c2e <DMA_SetConfig+0x10a>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a73      	ldr	r2, [pc, #460]	; (8006d60 <DMA_SetConfig+0x23c>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d04a      	beq.n	8006c2e <DMA_SetConfig+0x10a>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a71      	ldr	r2, [pc, #452]	; (8006d64 <DMA_SetConfig+0x240>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d045      	beq.n	8006c2e <DMA_SetConfig+0x10a>
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a70      	ldr	r2, [pc, #448]	; (8006d68 <DMA_SetConfig+0x244>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d040      	beq.n	8006c2e <DMA_SetConfig+0x10a>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a6e      	ldr	r2, [pc, #440]	; (8006d6c <DMA_SetConfig+0x248>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d03b      	beq.n	8006c2e <DMA_SetConfig+0x10a>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a6d      	ldr	r2, [pc, #436]	; (8006d70 <DMA_SetConfig+0x24c>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d036      	beq.n	8006c2e <DMA_SetConfig+0x10a>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a6b      	ldr	r2, [pc, #428]	; (8006d74 <DMA_SetConfig+0x250>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d031      	beq.n	8006c2e <DMA_SetConfig+0x10a>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a6a      	ldr	r2, [pc, #424]	; (8006d78 <DMA_SetConfig+0x254>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d02c      	beq.n	8006c2e <DMA_SetConfig+0x10a>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a68      	ldr	r2, [pc, #416]	; (8006d7c <DMA_SetConfig+0x258>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d027      	beq.n	8006c2e <DMA_SetConfig+0x10a>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a67      	ldr	r2, [pc, #412]	; (8006d80 <DMA_SetConfig+0x25c>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d022      	beq.n	8006c2e <DMA_SetConfig+0x10a>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a65      	ldr	r2, [pc, #404]	; (8006d84 <DMA_SetConfig+0x260>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d01d      	beq.n	8006c2e <DMA_SetConfig+0x10a>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a64      	ldr	r2, [pc, #400]	; (8006d88 <DMA_SetConfig+0x264>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d018      	beq.n	8006c2e <DMA_SetConfig+0x10a>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a62      	ldr	r2, [pc, #392]	; (8006d8c <DMA_SetConfig+0x268>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d013      	beq.n	8006c2e <DMA_SetConfig+0x10a>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a61      	ldr	r2, [pc, #388]	; (8006d90 <DMA_SetConfig+0x26c>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d00e      	beq.n	8006c2e <DMA_SetConfig+0x10a>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a5f      	ldr	r2, [pc, #380]	; (8006d94 <DMA_SetConfig+0x270>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d009      	beq.n	8006c2e <DMA_SetConfig+0x10a>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a5e      	ldr	r2, [pc, #376]	; (8006d98 <DMA_SetConfig+0x274>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d004      	beq.n	8006c2e <DMA_SetConfig+0x10a>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a5c      	ldr	r2, [pc, #368]	; (8006d9c <DMA_SetConfig+0x278>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d101      	bne.n	8006c32 <DMA_SetConfig+0x10e>
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e000      	b.n	8006c34 <DMA_SetConfig+0x110>
 8006c32:	2300      	movs	r3, #0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d00d      	beq.n	8006c54 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006c40:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d004      	beq.n	8006c54 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006c52:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a39      	ldr	r2, [pc, #228]	; (8006d40 <DMA_SetConfig+0x21c>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d04a      	beq.n	8006cf4 <DMA_SetConfig+0x1d0>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a38      	ldr	r2, [pc, #224]	; (8006d44 <DMA_SetConfig+0x220>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d045      	beq.n	8006cf4 <DMA_SetConfig+0x1d0>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a36      	ldr	r2, [pc, #216]	; (8006d48 <DMA_SetConfig+0x224>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d040      	beq.n	8006cf4 <DMA_SetConfig+0x1d0>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a35      	ldr	r2, [pc, #212]	; (8006d4c <DMA_SetConfig+0x228>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d03b      	beq.n	8006cf4 <DMA_SetConfig+0x1d0>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a33      	ldr	r2, [pc, #204]	; (8006d50 <DMA_SetConfig+0x22c>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d036      	beq.n	8006cf4 <DMA_SetConfig+0x1d0>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a32      	ldr	r2, [pc, #200]	; (8006d54 <DMA_SetConfig+0x230>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d031      	beq.n	8006cf4 <DMA_SetConfig+0x1d0>
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a30      	ldr	r2, [pc, #192]	; (8006d58 <DMA_SetConfig+0x234>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d02c      	beq.n	8006cf4 <DMA_SetConfig+0x1d0>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a2f      	ldr	r2, [pc, #188]	; (8006d5c <DMA_SetConfig+0x238>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d027      	beq.n	8006cf4 <DMA_SetConfig+0x1d0>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a2d      	ldr	r2, [pc, #180]	; (8006d60 <DMA_SetConfig+0x23c>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d022      	beq.n	8006cf4 <DMA_SetConfig+0x1d0>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a2c      	ldr	r2, [pc, #176]	; (8006d64 <DMA_SetConfig+0x240>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d01d      	beq.n	8006cf4 <DMA_SetConfig+0x1d0>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a2a      	ldr	r2, [pc, #168]	; (8006d68 <DMA_SetConfig+0x244>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d018      	beq.n	8006cf4 <DMA_SetConfig+0x1d0>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a29      	ldr	r2, [pc, #164]	; (8006d6c <DMA_SetConfig+0x248>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d013      	beq.n	8006cf4 <DMA_SetConfig+0x1d0>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a27      	ldr	r2, [pc, #156]	; (8006d70 <DMA_SetConfig+0x24c>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d00e      	beq.n	8006cf4 <DMA_SetConfig+0x1d0>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a26      	ldr	r2, [pc, #152]	; (8006d74 <DMA_SetConfig+0x250>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d009      	beq.n	8006cf4 <DMA_SetConfig+0x1d0>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a24      	ldr	r2, [pc, #144]	; (8006d78 <DMA_SetConfig+0x254>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d004      	beq.n	8006cf4 <DMA_SetConfig+0x1d0>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a23      	ldr	r2, [pc, #140]	; (8006d7c <DMA_SetConfig+0x258>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d101      	bne.n	8006cf8 <DMA_SetConfig+0x1d4>
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e000      	b.n	8006cfa <DMA_SetConfig+0x1d6>
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d059      	beq.n	8006db2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d02:	f003 031f 	and.w	r3, r3, #31
 8006d06:	223f      	movs	r2, #63	; 0x3f
 8006d08:	409a      	lsls	r2, r3
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006d1c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	683a      	ldr	r2, [r7, #0]
 8006d24:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	2b40      	cmp	r3, #64	; 0x40
 8006d2c:	d138      	bne.n	8006da0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006d3e:	e086      	b.n	8006e4e <DMA_SetConfig+0x32a>
 8006d40:	40020010 	.word	0x40020010
 8006d44:	40020028 	.word	0x40020028
 8006d48:	40020040 	.word	0x40020040
 8006d4c:	40020058 	.word	0x40020058
 8006d50:	40020070 	.word	0x40020070
 8006d54:	40020088 	.word	0x40020088
 8006d58:	400200a0 	.word	0x400200a0
 8006d5c:	400200b8 	.word	0x400200b8
 8006d60:	40020410 	.word	0x40020410
 8006d64:	40020428 	.word	0x40020428
 8006d68:	40020440 	.word	0x40020440
 8006d6c:	40020458 	.word	0x40020458
 8006d70:	40020470 	.word	0x40020470
 8006d74:	40020488 	.word	0x40020488
 8006d78:	400204a0 	.word	0x400204a0
 8006d7c:	400204b8 	.word	0x400204b8
 8006d80:	58025408 	.word	0x58025408
 8006d84:	5802541c 	.word	0x5802541c
 8006d88:	58025430 	.word	0x58025430
 8006d8c:	58025444 	.word	0x58025444
 8006d90:	58025458 	.word	0x58025458
 8006d94:	5802546c 	.word	0x5802546c
 8006d98:	58025480 	.word	0x58025480
 8006d9c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68ba      	ldr	r2, [r7, #8]
 8006da6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	60da      	str	r2, [r3, #12]
}
 8006db0:	e04d      	b.n	8006e4e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a29      	ldr	r2, [pc, #164]	; (8006e5c <DMA_SetConfig+0x338>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d022      	beq.n	8006e02 <DMA_SetConfig+0x2de>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a27      	ldr	r2, [pc, #156]	; (8006e60 <DMA_SetConfig+0x33c>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d01d      	beq.n	8006e02 <DMA_SetConfig+0x2de>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a26      	ldr	r2, [pc, #152]	; (8006e64 <DMA_SetConfig+0x340>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d018      	beq.n	8006e02 <DMA_SetConfig+0x2de>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a24      	ldr	r2, [pc, #144]	; (8006e68 <DMA_SetConfig+0x344>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d013      	beq.n	8006e02 <DMA_SetConfig+0x2de>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a23      	ldr	r2, [pc, #140]	; (8006e6c <DMA_SetConfig+0x348>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d00e      	beq.n	8006e02 <DMA_SetConfig+0x2de>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a21      	ldr	r2, [pc, #132]	; (8006e70 <DMA_SetConfig+0x34c>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d009      	beq.n	8006e02 <DMA_SetConfig+0x2de>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a20      	ldr	r2, [pc, #128]	; (8006e74 <DMA_SetConfig+0x350>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d004      	beq.n	8006e02 <DMA_SetConfig+0x2de>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a1e      	ldr	r2, [pc, #120]	; (8006e78 <DMA_SetConfig+0x354>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d101      	bne.n	8006e06 <DMA_SetConfig+0x2e2>
 8006e02:	2301      	movs	r3, #1
 8006e04:	e000      	b.n	8006e08 <DMA_SetConfig+0x2e4>
 8006e06:	2300      	movs	r3, #0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d020      	beq.n	8006e4e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e10:	f003 031f 	and.w	r3, r3, #31
 8006e14:	2201      	movs	r2, #1
 8006e16:	409a      	lsls	r2, r3
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	683a      	ldr	r2, [r7, #0]
 8006e22:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	2b40      	cmp	r3, #64	; 0x40
 8006e2a:	d108      	bne.n	8006e3e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	60da      	str	r2, [r3, #12]
}
 8006e3c:	e007      	b.n	8006e4e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68ba      	ldr	r2, [r7, #8]
 8006e44:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	60da      	str	r2, [r3, #12]
}
 8006e4e:	bf00      	nop
 8006e50:	371c      	adds	r7, #28
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	58025408 	.word	0x58025408
 8006e60:	5802541c 	.word	0x5802541c
 8006e64:	58025430 	.word	0x58025430
 8006e68:	58025444 	.word	0x58025444
 8006e6c:	58025458 	.word	0x58025458
 8006e70:	5802546c 	.word	0x5802546c
 8006e74:	58025480 	.word	0x58025480
 8006e78:	58025494 	.word	0x58025494

08006e7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b085      	sub	sp, #20
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a42      	ldr	r2, [pc, #264]	; (8006f94 <DMA_CalcBaseAndBitshift+0x118>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d04a      	beq.n	8006f24 <DMA_CalcBaseAndBitshift+0xa8>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a41      	ldr	r2, [pc, #260]	; (8006f98 <DMA_CalcBaseAndBitshift+0x11c>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d045      	beq.n	8006f24 <DMA_CalcBaseAndBitshift+0xa8>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a3f      	ldr	r2, [pc, #252]	; (8006f9c <DMA_CalcBaseAndBitshift+0x120>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d040      	beq.n	8006f24 <DMA_CalcBaseAndBitshift+0xa8>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a3e      	ldr	r2, [pc, #248]	; (8006fa0 <DMA_CalcBaseAndBitshift+0x124>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d03b      	beq.n	8006f24 <DMA_CalcBaseAndBitshift+0xa8>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a3c      	ldr	r2, [pc, #240]	; (8006fa4 <DMA_CalcBaseAndBitshift+0x128>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d036      	beq.n	8006f24 <DMA_CalcBaseAndBitshift+0xa8>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a3b      	ldr	r2, [pc, #236]	; (8006fa8 <DMA_CalcBaseAndBitshift+0x12c>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d031      	beq.n	8006f24 <DMA_CalcBaseAndBitshift+0xa8>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a39      	ldr	r2, [pc, #228]	; (8006fac <DMA_CalcBaseAndBitshift+0x130>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d02c      	beq.n	8006f24 <DMA_CalcBaseAndBitshift+0xa8>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a38      	ldr	r2, [pc, #224]	; (8006fb0 <DMA_CalcBaseAndBitshift+0x134>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d027      	beq.n	8006f24 <DMA_CalcBaseAndBitshift+0xa8>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a36      	ldr	r2, [pc, #216]	; (8006fb4 <DMA_CalcBaseAndBitshift+0x138>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d022      	beq.n	8006f24 <DMA_CalcBaseAndBitshift+0xa8>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a35      	ldr	r2, [pc, #212]	; (8006fb8 <DMA_CalcBaseAndBitshift+0x13c>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d01d      	beq.n	8006f24 <DMA_CalcBaseAndBitshift+0xa8>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a33      	ldr	r2, [pc, #204]	; (8006fbc <DMA_CalcBaseAndBitshift+0x140>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d018      	beq.n	8006f24 <DMA_CalcBaseAndBitshift+0xa8>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a32      	ldr	r2, [pc, #200]	; (8006fc0 <DMA_CalcBaseAndBitshift+0x144>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d013      	beq.n	8006f24 <DMA_CalcBaseAndBitshift+0xa8>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a30      	ldr	r2, [pc, #192]	; (8006fc4 <DMA_CalcBaseAndBitshift+0x148>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d00e      	beq.n	8006f24 <DMA_CalcBaseAndBitshift+0xa8>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a2f      	ldr	r2, [pc, #188]	; (8006fc8 <DMA_CalcBaseAndBitshift+0x14c>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d009      	beq.n	8006f24 <DMA_CalcBaseAndBitshift+0xa8>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a2d      	ldr	r2, [pc, #180]	; (8006fcc <DMA_CalcBaseAndBitshift+0x150>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d004      	beq.n	8006f24 <DMA_CalcBaseAndBitshift+0xa8>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a2c      	ldr	r2, [pc, #176]	; (8006fd0 <DMA_CalcBaseAndBitshift+0x154>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d101      	bne.n	8006f28 <DMA_CalcBaseAndBitshift+0xac>
 8006f24:	2301      	movs	r3, #1
 8006f26:	e000      	b.n	8006f2a <DMA_CalcBaseAndBitshift+0xae>
 8006f28:	2300      	movs	r3, #0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d024      	beq.n	8006f78 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	3b10      	subs	r3, #16
 8006f36:	4a27      	ldr	r2, [pc, #156]	; (8006fd4 <DMA_CalcBaseAndBitshift+0x158>)
 8006f38:	fba2 2303 	umull	r2, r3, r2, r3
 8006f3c:	091b      	lsrs	r3, r3, #4
 8006f3e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f003 0307 	and.w	r3, r3, #7
 8006f46:	4a24      	ldr	r2, [pc, #144]	; (8006fd8 <DMA_CalcBaseAndBitshift+0x15c>)
 8006f48:	5cd3      	ldrb	r3, [r2, r3]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2b03      	cmp	r3, #3
 8006f54:	d908      	bls.n	8006f68 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	4b1f      	ldr	r3, [pc, #124]	; (8006fdc <DMA_CalcBaseAndBitshift+0x160>)
 8006f5e:	4013      	ands	r3, r2
 8006f60:	1d1a      	adds	r2, r3, #4
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	659a      	str	r2, [r3, #88]	; 0x58
 8006f66:	e00d      	b.n	8006f84 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	4b1b      	ldr	r3, [pc, #108]	; (8006fdc <DMA_CalcBaseAndBitshift+0x160>)
 8006f70:	4013      	ands	r3, r2
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	6593      	str	r3, [r2, #88]	; 0x58
 8006f76:	e005      	b.n	8006f84 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3714      	adds	r7, #20
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr
 8006f94:	40020010 	.word	0x40020010
 8006f98:	40020028 	.word	0x40020028
 8006f9c:	40020040 	.word	0x40020040
 8006fa0:	40020058 	.word	0x40020058
 8006fa4:	40020070 	.word	0x40020070
 8006fa8:	40020088 	.word	0x40020088
 8006fac:	400200a0 	.word	0x400200a0
 8006fb0:	400200b8 	.word	0x400200b8
 8006fb4:	40020410 	.word	0x40020410
 8006fb8:	40020428 	.word	0x40020428
 8006fbc:	40020440 	.word	0x40020440
 8006fc0:	40020458 	.word	0x40020458
 8006fc4:	40020470 	.word	0x40020470
 8006fc8:	40020488 	.word	0x40020488
 8006fcc:	400204a0 	.word	0x400204a0
 8006fd0:	400204b8 	.word	0x400204b8
 8006fd4:	aaaaaaab 	.word	0xaaaaaaab
 8006fd8:	080181c8 	.word	0x080181c8
 8006fdc:	fffffc00 	.word	0xfffffc00

08006fe0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	699b      	ldr	r3, [r3, #24]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d120      	bne.n	8007036 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff8:	2b03      	cmp	r3, #3
 8006ffa:	d858      	bhi.n	80070ae <DMA_CheckFifoParam+0xce>
 8006ffc:	a201      	add	r2, pc, #4	; (adr r2, 8007004 <DMA_CheckFifoParam+0x24>)
 8006ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007002:	bf00      	nop
 8007004:	08007015 	.word	0x08007015
 8007008:	08007027 	.word	0x08007027
 800700c:	08007015 	.word	0x08007015
 8007010:	080070af 	.word	0x080070af
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007018:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800701c:	2b00      	cmp	r3, #0
 800701e:	d048      	beq.n	80070b2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007024:	e045      	b.n	80070b2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800702a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800702e:	d142      	bne.n	80070b6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007034:	e03f      	b.n	80070b6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	699b      	ldr	r3, [r3, #24]
 800703a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800703e:	d123      	bne.n	8007088 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007044:	2b03      	cmp	r3, #3
 8007046:	d838      	bhi.n	80070ba <DMA_CheckFifoParam+0xda>
 8007048:	a201      	add	r2, pc, #4	; (adr r2, 8007050 <DMA_CheckFifoParam+0x70>)
 800704a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704e:	bf00      	nop
 8007050:	08007061 	.word	0x08007061
 8007054:	08007067 	.word	0x08007067
 8007058:	08007061 	.word	0x08007061
 800705c:	08007079 	.word	0x08007079
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	73fb      	strb	r3, [r7, #15]
        break;
 8007064:	e030      	b.n	80070c8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d025      	beq.n	80070be <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007076:	e022      	b.n	80070be <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007080:	d11f      	bne.n	80070c2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007086:	e01c      	b.n	80070c2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800708c:	2b02      	cmp	r3, #2
 800708e:	d902      	bls.n	8007096 <DMA_CheckFifoParam+0xb6>
 8007090:	2b03      	cmp	r3, #3
 8007092:	d003      	beq.n	800709c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007094:	e018      	b.n	80070c8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	73fb      	strb	r3, [r7, #15]
        break;
 800709a:	e015      	b.n	80070c8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00e      	beq.n	80070c6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	73fb      	strb	r3, [r7, #15]
    break;
 80070ac:	e00b      	b.n	80070c6 <DMA_CheckFifoParam+0xe6>
        break;
 80070ae:	bf00      	nop
 80070b0:	e00a      	b.n	80070c8 <DMA_CheckFifoParam+0xe8>
        break;
 80070b2:	bf00      	nop
 80070b4:	e008      	b.n	80070c8 <DMA_CheckFifoParam+0xe8>
        break;
 80070b6:	bf00      	nop
 80070b8:	e006      	b.n	80070c8 <DMA_CheckFifoParam+0xe8>
        break;
 80070ba:	bf00      	nop
 80070bc:	e004      	b.n	80070c8 <DMA_CheckFifoParam+0xe8>
        break;
 80070be:	bf00      	nop
 80070c0:	e002      	b.n	80070c8 <DMA_CheckFifoParam+0xe8>
        break;
 80070c2:	bf00      	nop
 80070c4:	e000      	b.n	80070c8 <DMA_CheckFifoParam+0xe8>
    break;
 80070c6:	bf00      	nop
    }
  }

  return status;
 80070c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3714      	adds	r7, #20
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop

080070d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80070d8:	b480      	push	{r7}
 80070da:	b085      	sub	sp, #20
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a38      	ldr	r2, [pc, #224]	; (80071cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d022      	beq.n	8007136 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a36      	ldr	r2, [pc, #216]	; (80071d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d01d      	beq.n	8007136 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a35      	ldr	r2, [pc, #212]	; (80071d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d018      	beq.n	8007136 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a33      	ldr	r2, [pc, #204]	; (80071d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d013      	beq.n	8007136 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a32      	ldr	r2, [pc, #200]	; (80071dc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d00e      	beq.n	8007136 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a30      	ldr	r2, [pc, #192]	; (80071e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d009      	beq.n	8007136 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a2f      	ldr	r2, [pc, #188]	; (80071e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d004      	beq.n	8007136 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a2d      	ldr	r2, [pc, #180]	; (80071e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d101      	bne.n	800713a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007136:	2301      	movs	r3, #1
 8007138:	e000      	b.n	800713c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800713a:	2300      	movs	r3, #0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d01a      	beq.n	8007176 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	b2db      	uxtb	r3, r3
 8007146:	3b08      	subs	r3, #8
 8007148:	4a28      	ldr	r2, [pc, #160]	; (80071ec <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800714a:	fba2 2303 	umull	r2, r3, r2, r3
 800714e:	091b      	lsrs	r3, r3, #4
 8007150:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	4b26      	ldr	r3, [pc, #152]	; (80071f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007156:	4413      	add	r3, r2
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	461a      	mov	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a24      	ldr	r2, [pc, #144]	; (80071f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007164:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f003 031f 	and.w	r3, r3, #31
 800716c:	2201      	movs	r2, #1
 800716e:	409a      	lsls	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007174:	e024      	b.n	80071c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	b2db      	uxtb	r3, r3
 800717c:	3b10      	subs	r3, #16
 800717e:	4a1e      	ldr	r2, [pc, #120]	; (80071f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007180:	fba2 2303 	umull	r2, r3, r2, r3
 8007184:	091b      	lsrs	r3, r3, #4
 8007186:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	4a1c      	ldr	r2, [pc, #112]	; (80071fc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d806      	bhi.n	800719e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	4a1b      	ldr	r2, [pc, #108]	; (8007200 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d902      	bls.n	800719e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	3308      	adds	r3, #8
 800719c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	4b18      	ldr	r3, [pc, #96]	; (8007204 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80071a2:	4413      	add	r3, r2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	461a      	mov	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a16      	ldr	r2, [pc, #88]	; (8007208 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80071b0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f003 031f 	and.w	r3, r3, #31
 80071b8:	2201      	movs	r2, #1
 80071ba:	409a      	lsls	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	669a      	str	r2, [r3, #104]	; 0x68
}
 80071c0:	bf00      	nop
 80071c2:	3714      	adds	r7, #20
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr
 80071cc:	58025408 	.word	0x58025408
 80071d0:	5802541c 	.word	0x5802541c
 80071d4:	58025430 	.word	0x58025430
 80071d8:	58025444 	.word	0x58025444
 80071dc:	58025458 	.word	0x58025458
 80071e0:	5802546c 	.word	0x5802546c
 80071e4:	58025480 	.word	0x58025480
 80071e8:	58025494 	.word	0x58025494
 80071ec:	cccccccd 	.word	0xcccccccd
 80071f0:	16009600 	.word	0x16009600
 80071f4:	58025880 	.word	0x58025880
 80071f8:	aaaaaaab 	.word	0xaaaaaaab
 80071fc:	400204b8 	.word	0x400204b8
 8007200:	4002040f 	.word	0x4002040f
 8007204:	10008200 	.word	0x10008200
 8007208:	40020880 	.word	0x40020880

0800720c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800720c:	b480      	push	{r7}
 800720e:	b085      	sub	sp, #20
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	b2db      	uxtb	r3, r3
 800721a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d04a      	beq.n	80072b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2b08      	cmp	r3, #8
 8007226:	d847      	bhi.n	80072b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a25      	ldr	r2, [pc, #148]	; (80072c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d022      	beq.n	8007278 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a24      	ldr	r2, [pc, #144]	; (80072c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d01d      	beq.n	8007278 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a22      	ldr	r2, [pc, #136]	; (80072cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d018      	beq.n	8007278 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a21      	ldr	r2, [pc, #132]	; (80072d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d013      	beq.n	8007278 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a1f      	ldr	r2, [pc, #124]	; (80072d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d00e      	beq.n	8007278 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a1e      	ldr	r2, [pc, #120]	; (80072d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d009      	beq.n	8007278 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a1c      	ldr	r2, [pc, #112]	; (80072dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d004      	beq.n	8007278 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a1b      	ldr	r2, [pc, #108]	; (80072e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d101      	bne.n	800727c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007278:	2301      	movs	r3, #1
 800727a:	e000      	b.n	800727e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800727c:	2300      	movs	r3, #0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00a      	beq.n	8007298 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	4b17      	ldr	r3, [pc, #92]	; (80072e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007286:	4413      	add	r3, r2
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	461a      	mov	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4a15      	ldr	r2, [pc, #84]	; (80072e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007294:	671a      	str	r2, [r3, #112]	; 0x70
 8007296:	e009      	b.n	80072ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	4b14      	ldr	r3, [pc, #80]	; (80072ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800729c:	4413      	add	r3, r2
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	461a      	mov	r2, r3
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a11      	ldr	r2, [pc, #68]	; (80072f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80072aa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	3b01      	subs	r3, #1
 80072b0:	2201      	movs	r2, #1
 80072b2:	409a      	lsls	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80072b8:	bf00      	nop
 80072ba:	3714      	adds	r7, #20
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr
 80072c4:	58025408 	.word	0x58025408
 80072c8:	5802541c 	.word	0x5802541c
 80072cc:	58025430 	.word	0x58025430
 80072d0:	58025444 	.word	0x58025444
 80072d4:	58025458 	.word	0x58025458
 80072d8:	5802546c 	.word	0x5802546c
 80072dc:	58025480 	.word	0x58025480
 80072e0:	58025494 	.word	0x58025494
 80072e4:	1600963f 	.word	0x1600963f
 80072e8:	58025940 	.word	0x58025940
 80072ec:	1000823f 	.word	0x1000823f
 80072f0:	40020940 	.word	0x40020940

080072f4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b098      	sub	sp, #96	; 0x60
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80072fc:	4a84      	ldr	r2, [pc, #528]	; (8007510 <HAL_FDCAN_Init+0x21c>)
 80072fe:	f107 030c 	add.w	r3, r7, #12
 8007302:	4611      	mov	r1, r2
 8007304:	224c      	movs	r2, #76	; 0x4c
 8007306:	4618      	mov	r0, r3
 8007308:	f00f fd18 	bl	8016d3c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d101      	bne.n	8007316 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e1c6      	b.n	80076a4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a7e      	ldr	r2, [pc, #504]	; (8007514 <HAL_FDCAN_Init+0x220>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d106      	bne.n	800732e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007328:	461a      	mov	r2, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007334:	b2db      	uxtb	r3, r3
 8007336:	2b00      	cmp	r3, #0
 8007338:	d106      	bne.n	8007348 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f7fb fad6 	bl	80028f4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	699a      	ldr	r2, [r3, #24]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f022 0210 	bic.w	r2, r2, #16
 8007356:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007358:	f7fc fa30 	bl	80037bc <HAL_GetTick>
 800735c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800735e:	e014      	b.n	800738a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007360:	f7fc fa2c 	bl	80037bc <HAL_GetTick>
 8007364:	4602      	mov	r2, r0
 8007366:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	2b0a      	cmp	r3, #10
 800736c:	d90d      	bls.n	800738a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007374:	f043 0201 	orr.w	r2, r3, #1
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2203      	movs	r2, #3
 8007382:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e18c      	b.n	80076a4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	f003 0308 	and.w	r3, r3, #8
 8007394:	2b08      	cmp	r3, #8
 8007396:	d0e3      	beq.n	8007360 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	699a      	ldr	r2, [r3, #24]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f042 0201 	orr.w	r2, r2, #1
 80073a6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80073a8:	f7fc fa08 	bl	80037bc <HAL_GetTick>
 80073ac:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80073ae:	e014      	b.n	80073da <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80073b0:	f7fc fa04 	bl	80037bc <HAL_GetTick>
 80073b4:	4602      	mov	r2, r0
 80073b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	2b0a      	cmp	r3, #10
 80073bc:	d90d      	bls.n	80073da <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80073c4:	f043 0201 	orr.w	r2, r3, #1
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2203      	movs	r2, #3
 80073d2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	e164      	b.n	80076a4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	f003 0301 	and.w	r3, r3, #1
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d0e3      	beq.n	80073b0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	699a      	ldr	r2, [r3, #24]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f042 0202 	orr.w	r2, r2, #2
 80073f6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	7c1b      	ldrb	r3, [r3, #16]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d108      	bne.n	8007412 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	699a      	ldr	r2, [r3, #24]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800740e:	619a      	str	r2, [r3, #24]
 8007410:	e007      	b.n	8007422 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	699a      	ldr	r2, [r3, #24]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007420:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	7c5b      	ldrb	r3, [r3, #17]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d108      	bne.n	800743c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	699a      	ldr	r2, [r3, #24]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007438:	619a      	str	r2, [r3, #24]
 800743a:	e007      	b.n	800744c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	699a      	ldr	r2, [r3, #24]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800744a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	7c9b      	ldrb	r3, [r3, #18]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d108      	bne.n	8007466 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	699a      	ldr	r2, [r3, #24]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007462:	619a      	str	r2, [r3, #24]
 8007464:	e007      	b.n	8007476 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	699a      	ldr	r2, [r3, #24]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007474:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	699b      	ldr	r3, [r3, #24]
 800747c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	689a      	ldr	r2, [r3, #8]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	430a      	orrs	r2, r1
 800748a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	699a      	ldr	r2, [r3, #24]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800749a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	691a      	ldr	r2, [r3, #16]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f022 0210 	bic.w	r2, r2, #16
 80074aa:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d108      	bne.n	80074c6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	699a      	ldr	r2, [r3, #24]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f042 0204 	orr.w	r2, r2, #4
 80074c2:	619a      	str	r2, [r3, #24]
 80074c4:	e030      	b.n	8007528 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d02c      	beq.n	8007528 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d020      	beq.n	8007518 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	699a      	ldr	r2, [r3, #24]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80074e4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	691a      	ldr	r2, [r3, #16]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f042 0210 	orr.w	r2, r2, #16
 80074f4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	2b03      	cmp	r3, #3
 80074fc:	d114      	bne.n	8007528 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	699a      	ldr	r2, [r3, #24]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f042 0220 	orr.w	r2, r2, #32
 800750c:	619a      	str	r2, [r3, #24]
 800750e:	e00b      	b.n	8007528 <HAL_FDCAN_Init+0x234>
 8007510:	080180b4 	.word	0x080180b4
 8007514:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	699a      	ldr	r2, [r3, #24]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f042 0220 	orr.w	r2, r2, #32
 8007526:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	699b      	ldr	r3, [r3, #24]
 800752c:	3b01      	subs	r3, #1
 800752e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	69db      	ldr	r3, [r3, #28]
 8007534:	3b01      	subs	r3, #1
 8007536:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007538:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6a1b      	ldr	r3, [r3, #32]
 800753e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007540:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	695b      	ldr	r3, [r3, #20]
 8007548:	3b01      	subs	r3, #1
 800754a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007550:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007552:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800755c:	d115      	bne.n	800758a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007562:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007568:	3b01      	subs	r3, #1
 800756a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800756c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007572:	3b01      	subs	r3, #1
 8007574:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007576:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757e:	3b01      	subs	r3, #1
 8007580:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007586:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007588:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00a      	beq.n	80075a8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	430a      	orrs	r2, r1
 80075a4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075b0:	4413      	add	r3, r2
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d011      	beq.n	80075da <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80075be:	f023 0107 	bic.w	r1, r3, #7
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	3360      	adds	r3, #96	; 0x60
 80075ca:	443b      	add	r3, r7
 80075cc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	430a      	orrs	r2, r1
 80075d6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d011      	beq.n	8007606 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80075ea:	f023 0107 	bic.w	r1, r3, #7
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	3360      	adds	r3, #96	; 0x60
 80075f6:	443b      	add	r3, r7
 80075f8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	430a      	orrs	r2, r1
 8007602:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800760a:	2b00      	cmp	r3, #0
 800760c:	d012      	beq.n	8007634 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007616:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	3360      	adds	r3, #96	; 0x60
 8007622:	443b      	add	r3, r7
 8007624:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007628:	011a      	lsls	r2, r3, #4
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	430a      	orrs	r2, r1
 8007630:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007638:	2b00      	cmp	r3, #0
 800763a:	d012      	beq.n	8007662 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007644:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	3360      	adds	r3, #96	; 0x60
 8007650:	443b      	add	r3, r7
 8007652:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007656:	021a      	lsls	r2, r3, #8
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	430a      	orrs	r2, r1
 800765e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a11      	ldr	r2, [pc, #68]	; (80076ac <HAL_FDCAN_Init+0x3b8>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d107      	bne.n	800767c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	689a      	ldr	r2, [r3, #8]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	f022 0203 	bic.w	r2, r2, #3
 800767a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2201      	movs	r2, #1
 8007690:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 f80b 	bl	80076b0 <FDCAN_CalcultateRamBlockAddresses>
 800769a:	4603      	mov	r3, r0
 800769c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80076a0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3760      	adds	r7, #96	; 0x60
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	4000a000 	.word	0x4000a000

080076b0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076bc:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80076c6:	4ba7      	ldr	r3, [pc, #668]	; (8007964 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80076c8:	4013      	ands	r3, r2
 80076ca:	68ba      	ldr	r2, [r7, #8]
 80076cc:	0091      	lsls	r1, r2, #2
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	6812      	ldr	r2, [r2, #0]
 80076d2:	430b      	orrs	r3, r1
 80076d4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076e0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e8:	041a      	lsls	r2, r3, #16
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	430a      	orrs	r2, r1
 80076f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	4413      	add	r3, r2
 80076fc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007706:	4b97      	ldr	r3, [pc, #604]	; (8007964 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007708:	4013      	ands	r3, r2
 800770a:	68ba      	ldr	r2, [r7, #8]
 800770c:	0091      	lsls	r1, r2, #2
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	6812      	ldr	r2, [r2, #0]
 8007712:	430b      	orrs	r3, r1
 8007714:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007720:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007728:	041a      	lsls	r2, r3, #16
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	430a      	orrs	r2, r1
 8007730:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007738:	005b      	lsls	r3, r3, #1
 800773a:	68ba      	ldr	r2, [r7, #8]
 800773c:	4413      	add	r3, r2
 800773e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007748:	4b86      	ldr	r3, [pc, #536]	; (8007964 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800774a:	4013      	ands	r3, r2
 800774c:	68ba      	ldr	r2, [r7, #8]
 800774e:	0091      	lsls	r1, r2, #2
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	6812      	ldr	r2, [r2, #0]
 8007754:	430b      	orrs	r3, r1
 8007756:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007762:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776a:	041a      	lsls	r2, r3, #16
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	430a      	orrs	r2, r1
 8007772:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800777e:	fb02 f303 	mul.w	r3, r2, r3
 8007782:	68ba      	ldr	r2, [r7, #8]
 8007784:	4413      	add	r3, r2
 8007786:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007790:	4b74      	ldr	r3, [pc, #464]	; (8007964 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007792:	4013      	ands	r3, r2
 8007794:	68ba      	ldr	r2, [r7, #8]
 8007796:	0091      	lsls	r1, r2, #2
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	6812      	ldr	r2, [r2, #0]
 800779c:	430b      	orrs	r3, r1
 800779e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80077aa:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077b2:	041a      	lsls	r2, r3, #16
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	430a      	orrs	r2, r1
 80077ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80077c6:	fb02 f303 	mul.w	r3, r2, r3
 80077ca:	68ba      	ldr	r2, [r7, #8]
 80077cc:	4413      	add	r3, r2
 80077ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80077d8:	4b62      	ldr	r3, [pc, #392]	; (8007964 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80077da:	4013      	ands	r3, r2
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	0091      	lsls	r1, r2, #2
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	6812      	ldr	r2, [r2, #0]
 80077e4:	430b      	orrs	r3, r1
 80077e6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80077f2:	fb02 f303 	mul.w	r3, r2, r3
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	4413      	add	r3, r2
 80077fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007804:	4b57      	ldr	r3, [pc, #348]	; (8007964 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007806:	4013      	ands	r3, r2
 8007808:	68ba      	ldr	r2, [r7, #8]
 800780a:	0091      	lsls	r1, r2, #2
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	6812      	ldr	r2, [r2, #0]
 8007810:	430b      	orrs	r3, r1
 8007812:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800781e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007826:	041a      	lsls	r2, r3, #16
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	430a      	orrs	r2, r1
 800782e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007836:	005b      	lsls	r3, r3, #1
 8007838:	68ba      	ldr	r2, [r7, #8]
 800783a:	4413      	add	r3, r2
 800783c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007846:	4b47      	ldr	r3, [pc, #284]	; (8007964 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007848:	4013      	ands	r3, r2
 800784a:	68ba      	ldr	r2, [r7, #8]
 800784c:	0091      	lsls	r1, r2, #2
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	6812      	ldr	r2, [r2, #0]
 8007852:	430b      	orrs	r3, r1
 8007854:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007860:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007868:	041a      	lsls	r2, r3, #16
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	430a      	orrs	r2, r1
 8007870:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800787c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007884:	061a      	lsls	r2, r3, #24
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	430a      	orrs	r2, r1
 800788c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007894:	4b34      	ldr	r3, [pc, #208]	; (8007968 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007896:	4413      	add	r3, r2
 8007898:	009a      	lsls	r2, r3, #2
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	441a      	add	r2, r3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078b6:	00db      	lsls	r3, r3, #3
 80078b8:	441a      	add	r2, r3
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c6:	6879      	ldr	r1, [r7, #4]
 80078c8:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80078ca:	fb01 f303 	mul.w	r3, r1, r3
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	441a      	add	r2, r3
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078de:	6879      	ldr	r1, [r7, #4]
 80078e0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80078e2:	fb01 f303 	mul.w	r3, r1, r3
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	441a      	add	r2, r3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078f6:	6879      	ldr	r1, [r7, #4]
 80078f8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80078fa:	fb01 f303 	mul.w	r3, r1, r3
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	441a      	add	r2, r3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007912:	00db      	lsls	r3, r3, #3
 8007914:	441a      	add	r2, r3
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007926:	6879      	ldr	r1, [r7, #4]
 8007928:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800792a:	fb01 f303 	mul.w	r3, r1, r3
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	441a      	add	r2, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007942:	6879      	ldr	r1, [r7, #4]
 8007944:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007946:	fb01 f303 	mul.w	r3, r1, r3
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	441a      	add	r2, r3
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800795a:	4a04      	ldr	r2, [pc, #16]	; (800796c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d915      	bls.n	800798c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007960:	e006      	b.n	8007970 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007962:	bf00      	nop
 8007964:	ffff0003 	.word	0xffff0003
 8007968:	10002b00 	.word	0x10002b00
 800796c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007976:	f043 0220 	orr.w	r2, r3, #32
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2203      	movs	r2, #3
 8007984:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	e010      	b.n	80079ae <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007990:	60fb      	str	r3, [r7, #12]
 8007992:	e005      	b.n	80079a0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2200      	movs	r2, #0
 8007998:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	3304      	adds	r3, #4
 800799e:	60fb      	str	r3, [r7, #12]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079a6:	68fa      	ldr	r2, [r7, #12]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d3f3      	bcc.n	8007994 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3714      	adds	r7, #20
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr
 80079ba:	bf00      	nop

080079bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80079bc:	b480      	push	{r7}
 80079be:	b089      	sub	sp, #36	; 0x24
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80079c6:	2300      	movs	r3, #0
 80079c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80079ca:	4b86      	ldr	r3, [pc, #536]	; (8007be4 <HAL_GPIO_Init+0x228>)
 80079cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80079ce:	e18c      	b.n	8007cea <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	2101      	movs	r1, #1
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	fa01 f303 	lsl.w	r3, r1, r3
 80079dc:	4013      	ands	r3, r2
 80079de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	f000 817e 	beq.w	8007ce4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	f003 0303 	and.w	r3, r3, #3
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d005      	beq.n	8007a00 <HAL_GPIO_Init+0x44>
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	f003 0303 	and.w	r3, r3, #3
 80079fc:	2b02      	cmp	r3, #2
 80079fe:	d130      	bne.n	8007a62 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	005b      	lsls	r3, r3, #1
 8007a0a:	2203      	movs	r2, #3
 8007a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a10:	43db      	mvns	r3, r3
 8007a12:	69ba      	ldr	r2, [r7, #24]
 8007a14:	4013      	ands	r3, r2
 8007a16:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	68da      	ldr	r2, [r3, #12]
 8007a1c:	69fb      	ldr	r3, [r7, #28]
 8007a1e:	005b      	lsls	r3, r3, #1
 8007a20:	fa02 f303 	lsl.w	r3, r2, r3
 8007a24:	69ba      	ldr	r2, [r7, #24]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	69ba      	ldr	r2, [r7, #24]
 8007a2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007a36:	2201      	movs	r2, #1
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a3e:	43db      	mvns	r3, r3
 8007a40:	69ba      	ldr	r2, [r7, #24]
 8007a42:	4013      	ands	r3, r2
 8007a44:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	091b      	lsrs	r3, r3, #4
 8007a4c:	f003 0201 	and.w	r2, r3, #1
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	fa02 f303 	lsl.w	r3, r2, r3
 8007a56:	69ba      	ldr	r2, [r7, #24]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	69ba      	ldr	r2, [r7, #24]
 8007a60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	f003 0303 	and.w	r3, r3, #3
 8007a6a:	2b03      	cmp	r3, #3
 8007a6c:	d017      	beq.n	8007a9e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007a74:	69fb      	ldr	r3, [r7, #28]
 8007a76:	005b      	lsls	r3, r3, #1
 8007a78:	2203      	movs	r2, #3
 8007a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a7e:	43db      	mvns	r3, r3
 8007a80:	69ba      	ldr	r2, [r7, #24]
 8007a82:	4013      	ands	r3, r2
 8007a84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	689a      	ldr	r2, [r3, #8]
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	005b      	lsls	r3, r3, #1
 8007a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a92:	69ba      	ldr	r2, [r7, #24]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	69ba      	ldr	r2, [r7, #24]
 8007a9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	f003 0303 	and.w	r3, r3, #3
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d123      	bne.n	8007af2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	08da      	lsrs	r2, r3, #3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	3208      	adds	r2, #8
 8007ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007ab8:	69fb      	ldr	r3, [r7, #28]
 8007aba:	f003 0307 	and.w	r3, r3, #7
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	220f      	movs	r2, #15
 8007ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ac6:	43db      	mvns	r3, r3
 8007ac8:	69ba      	ldr	r2, [r7, #24]
 8007aca:	4013      	ands	r3, r2
 8007acc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	691a      	ldr	r2, [r3, #16]
 8007ad2:	69fb      	ldr	r3, [r7, #28]
 8007ad4:	f003 0307 	and.w	r3, r3, #7
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	fa02 f303 	lsl.w	r3, r2, r3
 8007ade:	69ba      	ldr	r2, [r7, #24]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	08da      	lsrs	r2, r3, #3
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	3208      	adds	r2, #8
 8007aec:	69b9      	ldr	r1, [r7, #24]
 8007aee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	005b      	lsls	r3, r3, #1
 8007afc:	2203      	movs	r2, #3
 8007afe:	fa02 f303 	lsl.w	r3, r2, r3
 8007b02:	43db      	mvns	r3, r3
 8007b04:	69ba      	ldr	r2, [r7, #24]
 8007b06:	4013      	ands	r3, r2
 8007b08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	f003 0203 	and.w	r2, r3, #3
 8007b12:	69fb      	ldr	r3, [r7, #28]
 8007b14:	005b      	lsls	r3, r3, #1
 8007b16:	fa02 f303 	lsl.w	r3, r2, r3
 8007b1a:	69ba      	ldr	r2, [r7, #24]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	69ba      	ldr	r2, [r7, #24]
 8007b24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f000 80d8 	beq.w	8007ce4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b34:	4b2c      	ldr	r3, [pc, #176]	; (8007be8 <HAL_GPIO_Init+0x22c>)
 8007b36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b3a:	4a2b      	ldr	r2, [pc, #172]	; (8007be8 <HAL_GPIO_Init+0x22c>)
 8007b3c:	f043 0302 	orr.w	r3, r3, #2
 8007b40:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007b44:	4b28      	ldr	r3, [pc, #160]	; (8007be8 <HAL_GPIO_Init+0x22c>)
 8007b46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b4a:	f003 0302 	and.w	r3, r3, #2
 8007b4e:	60fb      	str	r3, [r7, #12]
 8007b50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007b52:	4a26      	ldr	r2, [pc, #152]	; (8007bec <HAL_GPIO_Init+0x230>)
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	089b      	lsrs	r3, r3, #2
 8007b58:	3302      	adds	r3, #2
 8007b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	f003 0303 	and.w	r3, r3, #3
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	220f      	movs	r2, #15
 8007b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b6e:	43db      	mvns	r3, r3
 8007b70:	69ba      	ldr	r2, [r7, #24]
 8007b72:	4013      	ands	r3, r2
 8007b74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4a1d      	ldr	r2, [pc, #116]	; (8007bf0 <HAL_GPIO_Init+0x234>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d04a      	beq.n	8007c14 <HAL_GPIO_Init+0x258>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4a1c      	ldr	r2, [pc, #112]	; (8007bf4 <HAL_GPIO_Init+0x238>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d02b      	beq.n	8007bde <HAL_GPIO_Init+0x222>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4a1b      	ldr	r2, [pc, #108]	; (8007bf8 <HAL_GPIO_Init+0x23c>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d025      	beq.n	8007bda <HAL_GPIO_Init+0x21e>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a1a      	ldr	r2, [pc, #104]	; (8007bfc <HAL_GPIO_Init+0x240>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d01f      	beq.n	8007bd6 <HAL_GPIO_Init+0x21a>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4a19      	ldr	r2, [pc, #100]	; (8007c00 <HAL_GPIO_Init+0x244>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d019      	beq.n	8007bd2 <HAL_GPIO_Init+0x216>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a18      	ldr	r2, [pc, #96]	; (8007c04 <HAL_GPIO_Init+0x248>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d013      	beq.n	8007bce <HAL_GPIO_Init+0x212>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a17      	ldr	r2, [pc, #92]	; (8007c08 <HAL_GPIO_Init+0x24c>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d00d      	beq.n	8007bca <HAL_GPIO_Init+0x20e>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4a16      	ldr	r2, [pc, #88]	; (8007c0c <HAL_GPIO_Init+0x250>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d007      	beq.n	8007bc6 <HAL_GPIO_Init+0x20a>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4a15      	ldr	r2, [pc, #84]	; (8007c10 <HAL_GPIO_Init+0x254>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d101      	bne.n	8007bc2 <HAL_GPIO_Init+0x206>
 8007bbe:	2309      	movs	r3, #9
 8007bc0:	e029      	b.n	8007c16 <HAL_GPIO_Init+0x25a>
 8007bc2:	230a      	movs	r3, #10
 8007bc4:	e027      	b.n	8007c16 <HAL_GPIO_Init+0x25a>
 8007bc6:	2307      	movs	r3, #7
 8007bc8:	e025      	b.n	8007c16 <HAL_GPIO_Init+0x25a>
 8007bca:	2306      	movs	r3, #6
 8007bcc:	e023      	b.n	8007c16 <HAL_GPIO_Init+0x25a>
 8007bce:	2305      	movs	r3, #5
 8007bd0:	e021      	b.n	8007c16 <HAL_GPIO_Init+0x25a>
 8007bd2:	2304      	movs	r3, #4
 8007bd4:	e01f      	b.n	8007c16 <HAL_GPIO_Init+0x25a>
 8007bd6:	2303      	movs	r3, #3
 8007bd8:	e01d      	b.n	8007c16 <HAL_GPIO_Init+0x25a>
 8007bda:	2302      	movs	r3, #2
 8007bdc:	e01b      	b.n	8007c16 <HAL_GPIO_Init+0x25a>
 8007bde:	2301      	movs	r3, #1
 8007be0:	e019      	b.n	8007c16 <HAL_GPIO_Init+0x25a>
 8007be2:	bf00      	nop
 8007be4:	58000080 	.word	0x58000080
 8007be8:	58024400 	.word	0x58024400
 8007bec:	58000400 	.word	0x58000400
 8007bf0:	58020000 	.word	0x58020000
 8007bf4:	58020400 	.word	0x58020400
 8007bf8:	58020800 	.word	0x58020800
 8007bfc:	58020c00 	.word	0x58020c00
 8007c00:	58021000 	.word	0x58021000
 8007c04:	58021400 	.word	0x58021400
 8007c08:	58021800 	.word	0x58021800
 8007c0c:	58021c00 	.word	0x58021c00
 8007c10:	58022400 	.word	0x58022400
 8007c14:	2300      	movs	r3, #0
 8007c16:	69fa      	ldr	r2, [r7, #28]
 8007c18:	f002 0203 	and.w	r2, r2, #3
 8007c1c:	0092      	lsls	r2, r2, #2
 8007c1e:	4093      	lsls	r3, r2
 8007c20:	69ba      	ldr	r2, [r7, #24]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007c26:	4938      	ldr	r1, [pc, #224]	; (8007d08 <HAL_GPIO_Init+0x34c>)
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	089b      	lsrs	r3, r3, #2
 8007c2c:	3302      	adds	r3, #2
 8007c2e:	69ba      	ldr	r2, [r7, #24]
 8007c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	43db      	mvns	r3, r3
 8007c40:	69ba      	ldr	r2, [r7, #24]
 8007c42:	4013      	ands	r3, r2
 8007c44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d003      	beq.n	8007c5a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007c52:	69ba      	ldr	r2, [r7, #24]
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007c5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	43db      	mvns	r3, r3
 8007c6e:	69ba      	ldr	r2, [r7, #24]
 8007c70:	4013      	ands	r3, r2
 8007c72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d003      	beq.n	8007c88 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007c80:	69ba      	ldr	r2, [r7, #24]
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007c88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c8c:	69bb      	ldr	r3, [r7, #24]
 8007c8e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	43db      	mvns	r3, r3
 8007c9a:	69ba      	ldr	r2, [r7, #24]
 8007c9c:	4013      	ands	r3, r2
 8007c9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d003      	beq.n	8007cb4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007cac:	69ba      	ldr	r2, [r7, #24]
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	69ba      	ldr	r2, [r7, #24]
 8007cb8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	43db      	mvns	r3, r3
 8007cc4:	69ba      	ldr	r2, [r7, #24]
 8007cc6:	4013      	ands	r3, r2
 8007cc8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d003      	beq.n	8007cde <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007cd6:	69ba      	ldr	r2, [r7, #24]
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	69ba      	ldr	r2, [r7, #24]
 8007ce2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f47f ae6b 	bne.w	80079d0 <HAL_GPIO_Init+0x14>
  }
}
 8007cfa:	bf00      	nop
 8007cfc:	bf00      	nop
 8007cfe:	3724      	adds	r7, #36	; 0x24
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr
 8007d08:	58000400 	.word	0x58000400

08007d0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b085      	sub	sp, #20
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	460b      	mov	r3, r1
 8007d16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	691a      	ldr	r2, [r3, #16]
 8007d1c:	887b      	ldrh	r3, [r7, #2]
 8007d1e:	4013      	ands	r3, r2
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d002      	beq.n	8007d2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007d24:	2301      	movs	r3, #1
 8007d26:	73fb      	strb	r3, [r7, #15]
 8007d28:	e001      	b.n	8007d2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3714      	adds	r7, #20
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	460b      	mov	r3, r1
 8007d46:	807b      	strh	r3, [r7, #2]
 8007d48:	4613      	mov	r3, r2
 8007d4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007d4c:	787b      	ldrb	r3, [r7, #1]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d003      	beq.n	8007d5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007d52:	887a      	ldrh	r2, [r7, #2]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007d58:	e003      	b.n	8007d62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007d5a:	887b      	ldrh	r3, [r7, #2]
 8007d5c:	041a      	lsls	r2, r3, #16
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	619a      	str	r2, [r3, #24]
}
 8007d62:	bf00      	nop
 8007d64:	370c      	adds	r7, #12
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr
	...

08007d70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d101      	bne.n	8007d82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e07f      	b.n	8007e82 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d106      	bne.n	8007d9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f7fa fe14 	bl	80029c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2224      	movs	r2, #36	; 0x24
 8007da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f022 0201 	bic.w	r2, r2, #1
 8007db2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	685a      	ldr	r2, [r3, #4]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007dc0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	689a      	ldr	r2, [r3, #8]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007dd0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	68db      	ldr	r3, [r3, #12]
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d107      	bne.n	8007dea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	689a      	ldr	r2, [r3, #8]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007de6:	609a      	str	r2, [r3, #8]
 8007de8:	e006      	b.n	8007df8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	689a      	ldr	r2, [r3, #8]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007df6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	d104      	bne.n	8007e0a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e08:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	6859      	ldr	r1, [r3, #4]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	4b1d      	ldr	r3, [pc, #116]	; (8007e8c <HAL_I2C_Init+0x11c>)
 8007e16:	430b      	orrs	r3, r1
 8007e18:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	68da      	ldr	r2, [r3, #12]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e28:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	691a      	ldr	r2, [r3, #16]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	695b      	ldr	r3, [r3, #20]
 8007e32:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	699b      	ldr	r3, [r3, #24]
 8007e3a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	430a      	orrs	r2, r1
 8007e42:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	69d9      	ldr	r1, [r3, #28]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6a1a      	ldr	r2, [r3, #32]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	430a      	orrs	r2, r1
 8007e52:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f042 0201 	orr.w	r2, r2, #1
 8007e62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2220      	movs	r2, #32
 8007e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3708      	adds	r7, #8
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	02008000 	.word	0x02008000

08007e90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	2b20      	cmp	r3, #32
 8007ea4:	d138      	bne.n	8007f18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d101      	bne.n	8007eb4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007eb0:	2302      	movs	r3, #2
 8007eb2:	e032      	b.n	8007f1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2224      	movs	r2, #36	; 0x24
 8007ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f022 0201 	bic.w	r2, r2, #1
 8007ed2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007ee2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	6819      	ldr	r1, [r3, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	683a      	ldr	r2, [r7, #0]
 8007ef0:	430a      	orrs	r2, r1
 8007ef2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f042 0201 	orr.w	r2, r2, #1
 8007f02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2220      	movs	r2, #32
 8007f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007f14:	2300      	movs	r3, #0
 8007f16:	e000      	b.n	8007f1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007f18:	2302      	movs	r3, #2
  }
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	370c      	adds	r7, #12
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr

08007f26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007f26:	b480      	push	{r7}
 8007f28:	b085      	sub	sp, #20
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
 8007f2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	2b20      	cmp	r3, #32
 8007f3a:	d139      	bne.n	8007fb0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d101      	bne.n	8007f4a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007f46:	2302      	movs	r3, #2
 8007f48:	e033      	b.n	8007fb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2224      	movs	r2, #36	; 0x24
 8007f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f022 0201 	bic.w	r2, r2, #1
 8007f68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007f78:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	021b      	lsls	r3, r3, #8
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	4313      	orrs	r3, r2
 8007f82:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f042 0201 	orr.w	r2, r2, #1
 8007f9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2220      	movs	r2, #32
 8007fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007fac:	2300      	movs	r3, #0
 8007fae:	e000      	b.n	8007fb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007fb0:	2302      	movs	r3, #2
  }
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3714      	adds	r7, #20
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr

08007fbe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007fbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fc0:	b08f      	sub	sp, #60	; 0x3c
 8007fc2:	af0a      	add	r7, sp, #40	; 0x28
 8007fc4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d101      	bne.n	8007fd0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e116      	b.n	80081fe <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d106      	bne.n	8007ff0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f00e fb70 	bl	80166d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2203      	movs	r2, #3
 8007ff4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008000:	2b00      	cmp	r3, #0
 8008002:	d102      	bne.n	800800a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4618      	mov	r0, r3
 8008010:	f00a fc9f 	bl	8012952 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	603b      	str	r3, [r7, #0]
 800801a:	687e      	ldr	r6, [r7, #4]
 800801c:	466d      	mov	r5, sp
 800801e:	f106 0410 	add.w	r4, r6, #16
 8008022:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008024:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008026:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008028:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800802a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800802e:	e885 0003 	stmia.w	r5, {r0, r1}
 8008032:	1d33      	adds	r3, r6, #4
 8008034:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008036:	6838      	ldr	r0, [r7, #0]
 8008038:	f00a fb6a 	bl	8012710 <USB_CoreInit>
 800803c:	4603      	mov	r3, r0
 800803e:	2b00      	cmp	r3, #0
 8008040:	d005      	beq.n	800804e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2202      	movs	r2, #2
 8008046:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e0d7      	b.n	80081fe <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2100      	movs	r1, #0
 8008054:	4618      	mov	r0, r3
 8008056:	f00a fc8d 	bl	8012974 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800805a:	2300      	movs	r3, #0
 800805c:	73fb      	strb	r3, [r7, #15]
 800805e:	e04a      	b.n	80080f6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008060:	7bfa      	ldrb	r2, [r7, #15]
 8008062:	6879      	ldr	r1, [r7, #4]
 8008064:	4613      	mov	r3, r2
 8008066:	00db      	lsls	r3, r3, #3
 8008068:	4413      	add	r3, r2
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	440b      	add	r3, r1
 800806e:	333d      	adds	r3, #61	; 0x3d
 8008070:	2201      	movs	r2, #1
 8008072:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008074:	7bfa      	ldrb	r2, [r7, #15]
 8008076:	6879      	ldr	r1, [r7, #4]
 8008078:	4613      	mov	r3, r2
 800807a:	00db      	lsls	r3, r3, #3
 800807c:	4413      	add	r3, r2
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	440b      	add	r3, r1
 8008082:	333c      	adds	r3, #60	; 0x3c
 8008084:	7bfa      	ldrb	r2, [r7, #15]
 8008086:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008088:	7bfa      	ldrb	r2, [r7, #15]
 800808a:	7bfb      	ldrb	r3, [r7, #15]
 800808c:	b298      	uxth	r0, r3
 800808e:	6879      	ldr	r1, [r7, #4]
 8008090:	4613      	mov	r3, r2
 8008092:	00db      	lsls	r3, r3, #3
 8008094:	4413      	add	r3, r2
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	440b      	add	r3, r1
 800809a:	3356      	adds	r3, #86	; 0x56
 800809c:	4602      	mov	r2, r0
 800809e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80080a0:	7bfa      	ldrb	r2, [r7, #15]
 80080a2:	6879      	ldr	r1, [r7, #4]
 80080a4:	4613      	mov	r3, r2
 80080a6:	00db      	lsls	r3, r3, #3
 80080a8:	4413      	add	r3, r2
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	440b      	add	r3, r1
 80080ae:	3340      	adds	r3, #64	; 0x40
 80080b0:	2200      	movs	r2, #0
 80080b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80080b4:	7bfa      	ldrb	r2, [r7, #15]
 80080b6:	6879      	ldr	r1, [r7, #4]
 80080b8:	4613      	mov	r3, r2
 80080ba:	00db      	lsls	r3, r3, #3
 80080bc:	4413      	add	r3, r2
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	440b      	add	r3, r1
 80080c2:	3344      	adds	r3, #68	; 0x44
 80080c4:	2200      	movs	r2, #0
 80080c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80080c8:	7bfa      	ldrb	r2, [r7, #15]
 80080ca:	6879      	ldr	r1, [r7, #4]
 80080cc:	4613      	mov	r3, r2
 80080ce:	00db      	lsls	r3, r3, #3
 80080d0:	4413      	add	r3, r2
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	440b      	add	r3, r1
 80080d6:	3348      	adds	r3, #72	; 0x48
 80080d8:	2200      	movs	r2, #0
 80080da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80080dc:	7bfa      	ldrb	r2, [r7, #15]
 80080de:	6879      	ldr	r1, [r7, #4]
 80080e0:	4613      	mov	r3, r2
 80080e2:	00db      	lsls	r3, r3, #3
 80080e4:	4413      	add	r3, r2
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	440b      	add	r3, r1
 80080ea:	334c      	adds	r3, #76	; 0x4c
 80080ec:	2200      	movs	r2, #0
 80080ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80080f0:	7bfb      	ldrb	r3, [r7, #15]
 80080f2:	3301      	adds	r3, #1
 80080f4:	73fb      	strb	r3, [r7, #15]
 80080f6:	7bfa      	ldrb	r2, [r7, #15]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d3af      	bcc.n	8008060 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008100:	2300      	movs	r3, #0
 8008102:	73fb      	strb	r3, [r7, #15]
 8008104:	e044      	b.n	8008190 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008106:	7bfa      	ldrb	r2, [r7, #15]
 8008108:	6879      	ldr	r1, [r7, #4]
 800810a:	4613      	mov	r3, r2
 800810c:	00db      	lsls	r3, r3, #3
 800810e:	4413      	add	r3, r2
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	440b      	add	r3, r1
 8008114:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008118:	2200      	movs	r2, #0
 800811a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800811c:	7bfa      	ldrb	r2, [r7, #15]
 800811e:	6879      	ldr	r1, [r7, #4]
 8008120:	4613      	mov	r3, r2
 8008122:	00db      	lsls	r3, r3, #3
 8008124:	4413      	add	r3, r2
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	440b      	add	r3, r1
 800812a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800812e:	7bfa      	ldrb	r2, [r7, #15]
 8008130:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008132:	7bfa      	ldrb	r2, [r7, #15]
 8008134:	6879      	ldr	r1, [r7, #4]
 8008136:	4613      	mov	r3, r2
 8008138:	00db      	lsls	r3, r3, #3
 800813a:	4413      	add	r3, r2
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	440b      	add	r3, r1
 8008140:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008144:	2200      	movs	r2, #0
 8008146:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008148:	7bfa      	ldrb	r2, [r7, #15]
 800814a:	6879      	ldr	r1, [r7, #4]
 800814c:	4613      	mov	r3, r2
 800814e:	00db      	lsls	r3, r3, #3
 8008150:	4413      	add	r3, r2
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	440b      	add	r3, r1
 8008156:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800815a:	2200      	movs	r2, #0
 800815c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800815e:	7bfa      	ldrb	r2, [r7, #15]
 8008160:	6879      	ldr	r1, [r7, #4]
 8008162:	4613      	mov	r3, r2
 8008164:	00db      	lsls	r3, r3, #3
 8008166:	4413      	add	r3, r2
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	440b      	add	r3, r1
 800816c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008170:	2200      	movs	r2, #0
 8008172:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008174:	7bfa      	ldrb	r2, [r7, #15]
 8008176:	6879      	ldr	r1, [r7, #4]
 8008178:	4613      	mov	r3, r2
 800817a:	00db      	lsls	r3, r3, #3
 800817c:	4413      	add	r3, r2
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	440b      	add	r3, r1
 8008182:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008186:	2200      	movs	r2, #0
 8008188:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800818a:	7bfb      	ldrb	r3, [r7, #15]
 800818c:	3301      	adds	r3, #1
 800818e:	73fb      	strb	r3, [r7, #15]
 8008190:	7bfa      	ldrb	r2, [r7, #15]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	429a      	cmp	r2, r3
 8008198:	d3b5      	bcc.n	8008106 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	603b      	str	r3, [r7, #0]
 80081a0:	687e      	ldr	r6, [r7, #4]
 80081a2:	466d      	mov	r5, sp
 80081a4:	f106 0410 	add.w	r4, r6, #16
 80081a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80081aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80081ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80081ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80081b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80081b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80081b8:	1d33      	adds	r3, r6, #4
 80081ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80081bc:	6838      	ldr	r0, [r7, #0]
 80081be:	f00a fc25 	bl	8012a0c <USB_DevInit>
 80081c2:	4603      	mov	r3, r0
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d005      	beq.n	80081d4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2202      	movs	r2, #2
 80081cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	e014      	b.n	80081fe <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d102      	bne.n	80081f2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f001 f96f 	bl	80094d0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4618      	mov	r0, r3
 80081f8:	f00b fc67 	bl	8013aca <USB_DevDisconnect>

  return HAL_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3714      	adds	r7, #20
 8008202:	46bd      	mov	sp, r7
 8008204:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008206 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008206:	b580      	push	{r7, lr}
 8008208:	b084      	sub	sp, #16
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800821a:	2b01      	cmp	r3, #1
 800821c:	d101      	bne.n	8008222 <HAL_PCD_Start+0x1c>
 800821e:	2302      	movs	r3, #2
 8008220:	e022      	b.n	8008268 <HAL_PCD_Start+0x62>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2201      	movs	r2, #1
 8008226:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800822e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008232:	2b00      	cmp	r3, #0
 8008234:	d109      	bne.n	800824a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800823a:	2b01      	cmp	r3, #1
 800823c:	d105      	bne.n	800824a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008242:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4618      	mov	r0, r3
 8008250:	f00a fb6e 	bl	8012930 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4618      	mov	r0, r3
 800825a:	f00b fc15 	bl	8013a88 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3710      	adds	r7, #16
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008270:	b590      	push	{r4, r7, lr}
 8008272:	b08d      	sub	sp, #52	; 0x34
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800827e:	6a3b      	ldr	r3, [r7, #32]
 8008280:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4618      	mov	r0, r3
 8008288:	f00b fcd3 	bl	8013c32 <USB_GetMode>
 800828c:	4603      	mov	r3, r0
 800828e:	2b00      	cmp	r3, #0
 8008290:	f040 84b7 	bne.w	8008c02 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4618      	mov	r0, r3
 800829a:	f00b fc37 	bl	8013b0c <USB_ReadInterrupts>
 800829e:	4603      	mov	r3, r0
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	f000 84ad 	beq.w	8008c00 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	0a1b      	lsrs	r3, r3, #8
 80082b0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4618      	mov	r0, r3
 80082c0:	f00b fc24 	bl	8013b0c <USB_ReadInterrupts>
 80082c4:	4603      	mov	r3, r0
 80082c6:	f003 0302 	and.w	r3, r3, #2
 80082ca:	2b02      	cmp	r3, #2
 80082cc:	d107      	bne.n	80082de <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	695a      	ldr	r2, [r3, #20]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f002 0202 	and.w	r2, r2, #2
 80082dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4618      	mov	r0, r3
 80082e4:	f00b fc12 	bl	8013b0c <USB_ReadInterrupts>
 80082e8:	4603      	mov	r3, r0
 80082ea:	f003 0310 	and.w	r3, r3, #16
 80082ee:	2b10      	cmp	r3, #16
 80082f0:	d161      	bne.n	80083b6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	699a      	ldr	r2, [r3, #24]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f022 0210 	bic.w	r2, r2, #16
 8008300:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008302:	6a3b      	ldr	r3, [r7, #32]
 8008304:	6a1b      	ldr	r3, [r3, #32]
 8008306:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	f003 020f 	and.w	r2, r3, #15
 800830e:	4613      	mov	r3, r2
 8008310:	00db      	lsls	r3, r3, #3
 8008312:	4413      	add	r3, r2
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	4413      	add	r3, r2
 800831e:	3304      	adds	r3, #4
 8008320:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	0c5b      	lsrs	r3, r3, #17
 8008326:	f003 030f 	and.w	r3, r3, #15
 800832a:	2b02      	cmp	r3, #2
 800832c:	d124      	bne.n	8008378 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800832e:	69ba      	ldr	r2, [r7, #24]
 8008330:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008334:	4013      	ands	r3, r2
 8008336:	2b00      	cmp	r3, #0
 8008338:	d035      	beq.n	80083a6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	091b      	lsrs	r3, r3, #4
 8008342:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008344:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008348:	b29b      	uxth	r3, r3
 800834a:	461a      	mov	r2, r3
 800834c:	6a38      	ldr	r0, [r7, #32]
 800834e:	f00b fa49 	bl	80137e4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	68da      	ldr	r2, [r3, #12]
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	091b      	lsrs	r3, r3, #4
 800835a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800835e:	441a      	add	r2, r3
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	695a      	ldr	r2, [r3, #20]
 8008368:	69bb      	ldr	r3, [r7, #24]
 800836a:	091b      	lsrs	r3, r3, #4
 800836c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008370:	441a      	add	r2, r3
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	615a      	str	r2, [r3, #20]
 8008376:	e016      	b.n	80083a6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	0c5b      	lsrs	r3, r3, #17
 800837c:	f003 030f 	and.w	r3, r3, #15
 8008380:	2b06      	cmp	r3, #6
 8008382:	d110      	bne.n	80083a6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800838a:	2208      	movs	r2, #8
 800838c:	4619      	mov	r1, r3
 800838e:	6a38      	ldr	r0, [r7, #32]
 8008390:	f00b fa28 	bl	80137e4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	695a      	ldr	r2, [r3, #20]
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	091b      	lsrs	r3, r3, #4
 800839c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80083a0:	441a      	add	r2, r3
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	699a      	ldr	r2, [r3, #24]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f042 0210 	orr.w	r2, r2, #16
 80083b4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4618      	mov	r0, r3
 80083bc:	f00b fba6 	bl	8013b0c <USB_ReadInterrupts>
 80083c0:	4603      	mov	r3, r0
 80083c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80083c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80083ca:	f040 80a7 	bne.w	800851c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80083ce:	2300      	movs	r3, #0
 80083d0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4618      	mov	r0, r3
 80083d8:	f00b fbab 	bl	8013b32 <USB_ReadDevAllOutEpInterrupt>
 80083dc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80083de:	e099      	b.n	8008514 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80083e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e2:	f003 0301 	and.w	r3, r3, #1
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	f000 808e 	beq.w	8008508 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083f2:	b2d2      	uxtb	r2, r2
 80083f4:	4611      	mov	r1, r2
 80083f6:	4618      	mov	r0, r3
 80083f8:	f00b fbcf 	bl	8013b9a <USB_ReadDevOutEPInterrupt>
 80083fc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	f003 0301 	and.w	r3, r3, #1
 8008404:	2b00      	cmp	r3, #0
 8008406:	d00c      	beq.n	8008422 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840a:	015a      	lsls	r2, r3, #5
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	4413      	add	r3, r2
 8008410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008414:	461a      	mov	r2, r3
 8008416:	2301      	movs	r3, #1
 8008418:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800841a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 fed1 	bl	80091c4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	f003 0308 	and.w	r3, r3, #8
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00c      	beq.n	8008446 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800842c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842e:	015a      	lsls	r2, r3, #5
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	4413      	add	r3, r2
 8008434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008438:	461a      	mov	r2, r3
 800843a:	2308      	movs	r3, #8
 800843c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800843e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 ffa7 	bl	8009394 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	f003 0310 	and.w	r3, r3, #16
 800844c:	2b00      	cmp	r3, #0
 800844e:	d008      	beq.n	8008462 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008452:	015a      	lsls	r2, r3, #5
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	4413      	add	r3, r2
 8008458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800845c:	461a      	mov	r2, r3
 800845e:	2310      	movs	r3, #16
 8008460:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	f003 0302 	and.w	r3, r3, #2
 8008468:	2b00      	cmp	r3, #0
 800846a:	d030      	beq.n	80084ce <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800846c:	6a3b      	ldr	r3, [r7, #32]
 800846e:	695b      	ldr	r3, [r3, #20]
 8008470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008474:	2b80      	cmp	r3, #128	; 0x80
 8008476:	d109      	bne.n	800848c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008478:	69fb      	ldr	r3, [r7, #28]
 800847a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	69fa      	ldr	r2, [r7, #28]
 8008482:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008486:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800848a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800848c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800848e:	4613      	mov	r3, r2
 8008490:	00db      	lsls	r3, r3, #3
 8008492:	4413      	add	r3, r2
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	4413      	add	r3, r2
 800849e:	3304      	adds	r3, #4
 80084a0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	78db      	ldrb	r3, [r3, #3]
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d108      	bne.n	80084bc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	2200      	movs	r2, #0
 80084ae:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80084b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	4619      	mov	r1, r3
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f00e fa02 	bl	80168c0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80084bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084be:	015a      	lsls	r2, r3, #5
 80084c0:	69fb      	ldr	r3, [r7, #28]
 80084c2:	4413      	add	r3, r2
 80084c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084c8:	461a      	mov	r2, r3
 80084ca:	2302      	movs	r3, #2
 80084cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	f003 0320 	and.w	r3, r3, #32
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d008      	beq.n	80084ea <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80084d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084da:	015a      	lsls	r2, r3, #5
 80084dc:	69fb      	ldr	r3, [r7, #28]
 80084de:	4413      	add	r3, r2
 80084e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084e4:	461a      	mov	r2, r3
 80084e6:	2320      	movs	r3, #32
 80084e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d009      	beq.n	8008508 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80084f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f6:	015a      	lsls	r2, r3, #5
 80084f8:	69fb      	ldr	r3, [r7, #28]
 80084fa:	4413      	add	r3, r2
 80084fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008500:	461a      	mov	r2, r3
 8008502:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008506:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850a:	3301      	adds	r3, #1
 800850c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800850e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008510:	085b      	lsrs	r3, r3, #1
 8008512:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008516:	2b00      	cmp	r3, #0
 8008518:	f47f af62 	bne.w	80083e0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4618      	mov	r0, r3
 8008522:	f00b faf3 	bl	8013b0c <USB_ReadInterrupts>
 8008526:	4603      	mov	r3, r0
 8008528:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800852c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008530:	f040 80db 	bne.w	80086ea <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4618      	mov	r0, r3
 800853a:	f00b fb14 	bl	8013b66 <USB_ReadDevAllInEpInterrupt>
 800853e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008540:	2300      	movs	r3, #0
 8008542:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008544:	e0cd      	b.n	80086e2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008548:	f003 0301 	and.w	r3, r3, #1
 800854c:	2b00      	cmp	r3, #0
 800854e:	f000 80c2 	beq.w	80086d6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008558:	b2d2      	uxtb	r2, r2
 800855a:	4611      	mov	r1, r2
 800855c:	4618      	mov	r0, r3
 800855e:	f00b fb3a 	bl	8013bd6 <USB_ReadDevInEPInterrupt>
 8008562:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	f003 0301 	and.w	r3, r3, #1
 800856a:	2b00      	cmp	r3, #0
 800856c:	d057      	beq.n	800861e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800856e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008570:	f003 030f 	and.w	r3, r3, #15
 8008574:	2201      	movs	r2, #1
 8008576:	fa02 f303 	lsl.w	r3, r2, r3
 800857a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008582:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	43db      	mvns	r3, r3
 8008588:	69f9      	ldr	r1, [r7, #28]
 800858a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800858e:	4013      	ands	r3, r2
 8008590:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008594:	015a      	lsls	r2, r3, #5
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	4413      	add	r3, r2
 800859a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800859e:	461a      	mov	r2, r3
 80085a0:	2301      	movs	r3, #1
 80085a2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d132      	bne.n	8008612 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80085ac:	6879      	ldr	r1, [r7, #4]
 80085ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085b0:	4613      	mov	r3, r2
 80085b2:	00db      	lsls	r3, r3, #3
 80085b4:	4413      	add	r3, r2
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	440b      	add	r3, r1
 80085ba:	3348      	adds	r3, #72	; 0x48
 80085bc:	6819      	ldr	r1, [r3, #0]
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085c2:	4613      	mov	r3, r2
 80085c4:	00db      	lsls	r3, r3, #3
 80085c6:	4413      	add	r3, r2
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	4403      	add	r3, r0
 80085cc:	3344      	adds	r3, #68	; 0x44
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4419      	add	r1, r3
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085d6:	4613      	mov	r3, r2
 80085d8:	00db      	lsls	r3, r3, #3
 80085da:	4413      	add	r3, r2
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	4403      	add	r3, r0
 80085e0:	3348      	adds	r3, #72	; 0x48
 80085e2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80085e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d113      	bne.n	8008612 <HAL_PCD_IRQHandler+0x3a2>
 80085ea:	6879      	ldr	r1, [r7, #4]
 80085ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085ee:	4613      	mov	r3, r2
 80085f0:	00db      	lsls	r3, r3, #3
 80085f2:	4413      	add	r3, r2
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	440b      	add	r3, r1
 80085f8:	334c      	adds	r3, #76	; 0x4c
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d108      	bne.n	8008612 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6818      	ldr	r0, [r3, #0]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800860a:	461a      	mov	r2, r3
 800860c:	2101      	movs	r1, #1
 800860e:	f00b fb43 	bl	8013c98 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008614:	b2db      	uxtb	r3, r3
 8008616:	4619      	mov	r1, r3
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f00e f8cc 	bl	80167b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	f003 0308 	and.w	r3, r3, #8
 8008624:	2b00      	cmp	r3, #0
 8008626:	d008      	beq.n	800863a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862a:	015a      	lsls	r2, r3, #5
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	4413      	add	r3, r2
 8008630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008634:	461a      	mov	r2, r3
 8008636:	2308      	movs	r3, #8
 8008638:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	f003 0310 	and.w	r3, r3, #16
 8008640:	2b00      	cmp	r3, #0
 8008642:	d008      	beq.n	8008656 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008646:	015a      	lsls	r2, r3, #5
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	4413      	add	r3, r2
 800864c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008650:	461a      	mov	r2, r3
 8008652:	2310      	movs	r3, #16
 8008654:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800865c:	2b00      	cmp	r3, #0
 800865e:	d008      	beq.n	8008672 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008662:	015a      	lsls	r2, r3, #5
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	4413      	add	r3, r2
 8008668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800866c:	461a      	mov	r2, r3
 800866e:	2340      	movs	r3, #64	; 0x40
 8008670:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	f003 0302 	and.w	r3, r3, #2
 8008678:	2b00      	cmp	r3, #0
 800867a:	d023      	beq.n	80086c4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800867c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800867e:	6a38      	ldr	r0, [r7, #32]
 8008680:	f00a fb22 	bl	8012cc8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008686:	4613      	mov	r3, r2
 8008688:	00db      	lsls	r3, r3, #3
 800868a:	4413      	add	r3, r2
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	3338      	adds	r3, #56	; 0x38
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	4413      	add	r3, r2
 8008694:	3304      	adds	r3, #4
 8008696:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	78db      	ldrb	r3, [r3, #3]
 800869c:	2b01      	cmp	r3, #1
 800869e:	d108      	bne.n	80086b2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	2200      	movs	r2, #0
 80086a4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80086a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	4619      	mov	r1, r3
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f00e f919 	bl	80168e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80086b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b4:	015a      	lsls	r2, r3, #5
 80086b6:	69fb      	ldr	r3, [r7, #28]
 80086b8:	4413      	add	r3, r2
 80086ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086be:	461a      	mov	r2, r3
 80086c0:	2302      	movs	r3, #2
 80086c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d003      	beq.n	80086d6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80086ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 fcea 	bl	80090aa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80086d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d8:	3301      	adds	r3, #1
 80086da:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80086dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086de:	085b      	lsrs	r3, r3, #1
 80086e0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80086e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	f47f af2e 	bne.w	8008546 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4618      	mov	r0, r3
 80086f0:	f00b fa0c 	bl	8013b0c <USB_ReadInterrupts>
 80086f4:	4603      	mov	r3, r0
 80086f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086fe:	d122      	bne.n	8008746 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008700:	69fb      	ldr	r3, [r7, #28]
 8008702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	69fa      	ldr	r2, [r7, #28]
 800870a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800870e:	f023 0301 	bic.w	r3, r3, #1
 8008712:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800871a:	2b01      	cmp	r3, #1
 800871c:	d108      	bne.n	8008730 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008726:	2100      	movs	r1, #0
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 fef5 	bl	8009518 <HAL_PCDEx_LPM_Callback>
 800872e:	e002      	b.n	8008736 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f00e f8b7 	bl	80168a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	695a      	ldr	r2, [r3, #20]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008744:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4618      	mov	r0, r3
 800874c:	f00b f9de 	bl	8013b0c <USB_ReadInterrupts>
 8008750:	4603      	mov	r3, r0
 8008752:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008756:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800875a:	d112      	bne.n	8008782 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800875c:	69fb      	ldr	r3, [r7, #28]
 800875e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	f003 0301 	and.w	r3, r3, #1
 8008768:	2b01      	cmp	r3, #1
 800876a:	d102      	bne.n	8008772 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f00e f873 	bl	8016858 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	695a      	ldr	r2, [r3, #20]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008780:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4618      	mov	r0, r3
 8008788:	f00b f9c0 	bl	8013b0c <USB_ReadInterrupts>
 800878c:	4603      	mov	r3, r0
 800878e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008792:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008796:	d121      	bne.n	80087dc <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	695a      	ldr	r2, [r3, #20]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80087a6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d111      	bne.n	80087d6 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2201      	movs	r2, #1
 80087b6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087c0:	089b      	lsrs	r3, r3, #2
 80087c2:	f003 020f 	and.w	r2, r3, #15
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80087cc:	2101      	movs	r1, #1
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 fea2 	bl	8009518 <HAL_PCDEx_LPM_Callback>
 80087d4:	e002      	b.n	80087dc <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f00e f83e 	bl	8016858 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4618      	mov	r0, r3
 80087e2:	f00b f993 	bl	8013b0c <USB_ReadInterrupts>
 80087e6:	4603      	mov	r3, r0
 80087e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80087ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087f0:	f040 80b7 	bne.w	8008962 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	69fa      	ldr	r2, [r7, #28]
 80087fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008802:	f023 0301 	bic.w	r3, r3, #1
 8008806:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2110      	movs	r1, #16
 800880e:	4618      	mov	r0, r3
 8008810:	f00a fa5a 	bl	8012cc8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008814:	2300      	movs	r3, #0
 8008816:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008818:	e046      	b.n	80088a8 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800881a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800881c:	015a      	lsls	r2, r3, #5
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	4413      	add	r3, r2
 8008822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008826:	461a      	mov	r2, r3
 8008828:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800882c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800882e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008830:	015a      	lsls	r2, r3, #5
 8008832:	69fb      	ldr	r3, [r7, #28]
 8008834:	4413      	add	r3, r2
 8008836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800883e:	0151      	lsls	r1, r2, #5
 8008840:	69fa      	ldr	r2, [r7, #28]
 8008842:	440a      	add	r2, r1
 8008844:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008848:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800884c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800884e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008850:	015a      	lsls	r2, r3, #5
 8008852:	69fb      	ldr	r3, [r7, #28]
 8008854:	4413      	add	r3, r2
 8008856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800885a:	461a      	mov	r2, r3
 800885c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008860:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008864:	015a      	lsls	r2, r3, #5
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	4413      	add	r3, r2
 800886a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008872:	0151      	lsls	r1, r2, #5
 8008874:	69fa      	ldr	r2, [r7, #28]
 8008876:	440a      	add	r2, r1
 8008878:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800887c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008880:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008884:	015a      	lsls	r2, r3, #5
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	4413      	add	r3, r2
 800888a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008892:	0151      	lsls	r1, r2, #5
 8008894:	69fa      	ldr	r2, [r7, #28]
 8008896:	440a      	add	r2, r1
 8008898:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800889c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80088a0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a4:	3301      	adds	r3, #1
 80088a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d3b3      	bcc.n	800881a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80088b2:	69fb      	ldr	r3, [r7, #28]
 80088b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088b8:	69db      	ldr	r3, [r3, #28]
 80088ba:	69fa      	ldr	r2, [r7, #28]
 80088bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088c0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80088c4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d016      	beq.n	80088fc <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80088ce:	69fb      	ldr	r3, [r7, #28]
 80088d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088d8:	69fa      	ldr	r2, [r7, #28]
 80088da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088de:	f043 030b 	orr.w	r3, r3, #11
 80088e2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80088e6:	69fb      	ldr	r3, [r7, #28]
 80088e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ee:	69fa      	ldr	r2, [r7, #28]
 80088f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088f4:	f043 030b 	orr.w	r3, r3, #11
 80088f8:	6453      	str	r3, [r2, #68]	; 0x44
 80088fa:	e015      	b.n	8008928 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008902:	695a      	ldr	r2, [r3, #20]
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800890a:	4619      	mov	r1, r3
 800890c:	f242 032b 	movw	r3, #8235	; 0x202b
 8008910:	4313      	orrs	r3, r2
 8008912:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800891a:	691b      	ldr	r3, [r3, #16]
 800891c:	69fa      	ldr	r2, [r7, #28]
 800891e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008922:	f043 030b 	orr.w	r3, r3, #11
 8008926:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008928:	69fb      	ldr	r3, [r7, #28]
 800892a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	69fa      	ldr	r2, [r7, #28]
 8008932:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008936:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800893a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6818      	ldr	r0, [r3, #0]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800894c:	461a      	mov	r2, r3
 800894e:	f00b f9a3 	bl	8013c98 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	695a      	ldr	r2, [r3, #20]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008960:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4618      	mov	r0, r3
 8008968:	f00b f8d0 	bl	8013b0c <USB_ReadInterrupts>
 800896c:	4603      	mov	r3, r0
 800896e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008976:	d124      	bne.n	80089c2 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4618      	mov	r0, r3
 800897e:	f00b f967 	bl	8013c50 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4618      	mov	r0, r3
 8008988:	f00a fa1b 	bl	8012dc2 <USB_GetDevSpeed>
 800898c:	4603      	mov	r3, r0
 800898e:	461a      	mov	r2, r3
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681c      	ldr	r4, [r3, #0]
 8008998:	f001 fd88 	bl	800a4ac <HAL_RCC_GetHCLKFreq>
 800899c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	461a      	mov	r2, r3
 80089a6:	4620      	mov	r0, r4
 80089a8:	f009 ff20 	bl	80127ec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f00d ff2a 	bl	8016806 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	695a      	ldr	r2, [r3, #20]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80089c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4618      	mov	r0, r3
 80089c8:	f00b f8a0 	bl	8013b0c <USB_ReadInterrupts>
 80089cc:	4603      	mov	r3, r0
 80089ce:	f003 0308 	and.w	r3, r3, #8
 80089d2:	2b08      	cmp	r3, #8
 80089d4:	d10a      	bne.n	80089ec <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f00d ff07 	bl	80167ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	695a      	ldr	r2, [r3, #20]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f002 0208 	and.w	r2, r2, #8
 80089ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4618      	mov	r0, r3
 80089f2:	f00b f88b 	bl	8013b0c <USB_ReadInterrupts>
 80089f6:	4603      	mov	r3, r0
 80089f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089fc:	2b80      	cmp	r3, #128	; 0x80
 80089fe:	d122      	bne.n	8008a46 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008a00:	6a3b      	ldr	r3, [r7, #32]
 8008a02:	699b      	ldr	r3, [r3, #24]
 8008a04:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a08:	6a3b      	ldr	r3, [r7, #32]
 8008a0a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8008a10:	e014      	b.n	8008a3c <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008a12:	6879      	ldr	r1, [r7, #4]
 8008a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a16:	4613      	mov	r3, r2
 8008a18:	00db      	lsls	r3, r3, #3
 8008a1a:	4413      	add	r3, r2
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	440b      	add	r3, r1
 8008a20:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d105      	bne.n	8008a36 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	4619      	mov	r1, r3
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 fb09 	bl	8009048 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a38:	3301      	adds	r3, #1
 8008a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d3e5      	bcc.n	8008a12 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f00b f85e 	bl	8013b0c <USB_ReadInterrupts>
 8008a50:	4603      	mov	r3, r0
 8008a52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a5a:	d13b      	bne.n	8008ad4 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8008a60:	e02b      	b.n	8008aba <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a64:	015a      	lsls	r2, r3, #5
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	4413      	add	r3, r2
 8008a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008a72:	6879      	ldr	r1, [r7, #4]
 8008a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a76:	4613      	mov	r3, r2
 8008a78:	00db      	lsls	r3, r3, #3
 8008a7a:	4413      	add	r3, r2
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	440b      	add	r3, r1
 8008a80:	3340      	adds	r3, #64	; 0x40
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d115      	bne.n	8008ab4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008a88:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	da12      	bge.n	8008ab4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008a8e:	6879      	ldr	r1, [r7, #4]
 8008a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a92:	4613      	mov	r3, r2
 8008a94:	00db      	lsls	r3, r3, #3
 8008a96:	4413      	add	r3, r2
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	440b      	add	r3, r1
 8008a9c:	333f      	adds	r3, #63	; 0x3f
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	4619      	mov	r1, r3
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 faca 	bl	8009048 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d3ce      	bcc.n	8008a62 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	695a      	ldr	r2, [r3, #20]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008ad2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f00b f817 	bl	8013b0c <USB_ReadInterrupts>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ae4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ae8:	d155      	bne.n	8008b96 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008aea:	2301      	movs	r3, #1
 8008aec:	627b      	str	r3, [r7, #36]	; 0x24
 8008aee:	e045      	b.n	8008b7c <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af2:	015a      	lsls	r2, r3, #5
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	4413      	add	r3, r2
 8008af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008b00:	6879      	ldr	r1, [r7, #4]
 8008b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b04:	4613      	mov	r3, r2
 8008b06:	00db      	lsls	r3, r3, #3
 8008b08:	4413      	add	r3, r2
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	440b      	add	r3, r1
 8008b0e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d12e      	bne.n	8008b76 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008b18:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	da2b      	bge.n	8008b76 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008b1e:	69bb      	ldr	r3, [r7, #24]
 8008b20:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8008b2a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d121      	bne.n	8008b76 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008b32:	6879      	ldr	r1, [r7, #4]
 8008b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b36:	4613      	mov	r3, r2
 8008b38:	00db      	lsls	r3, r3, #3
 8008b3a:	4413      	add	r3, r2
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	440b      	add	r3, r1
 8008b40:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008b44:	2201      	movs	r2, #1
 8008b46:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008b48:	6a3b      	ldr	r3, [r7, #32]
 8008b4a:	699b      	ldr	r3, [r3, #24]
 8008b4c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008b50:	6a3b      	ldr	r3, [r7, #32]
 8008b52:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008b54:	6a3b      	ldr	r3, [r7, #32]
 8008b56:	695b      	ldr	r3, [r3, #20]
 8008b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d10a      	bne.n	8008b76 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	69fa      	ldr	r2, [r7, #28]
 8008b6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008b72:	6053      	str	r3, [r2, #4]
            break;
 8008b74:	e007      	b.n	8008b86 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b78:	3301      	adds	r3, #1
 8008b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d3b4      	bcc.n	8008af0 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	695a      	ldr	r2, [r3, #20]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008b94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f00a ffb6 	bl	8013b0c <USB_ReadInterrupts>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008baa:	d10a      	bne.n	8008bc2 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f00d feab 	bl	8016908 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	695a      	ldr	r2, [r3, #20]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008bc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f00a ffa0 	bl	8013b0c <USB_ReadInterrupts>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	f003 0304 	and.w	r3, r3, #4
 8008bd2:	2b04      	cmp	r3, #4
 8008bd4:	d115      	bne.n	8008c02 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008bde:	69bb      	ldr	r3, [r7, #24]
 8008be0:	f003 0304 	and.w	r3, r3, #4
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d002      	beq.n	8008bee <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f00d fe9b 	bl	8016924 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	6859      	ldr	r1, [r3, #4]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	69ba      	ldr	r2, [r7, #24]
 8008bfa:	430a      	orrs	r2, r1
 8008bfc:	605a      	str	r2, [r3, #4]
 8008bfe:	e000      	b.n	8008c02 <HAL_PCD_IRQHandler+0x992>
      return;
 8008c00:	bf00      	nop
    }
  }
}
 8008c02:	3734      	adds	r7, #52	; 0x34
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd90      	pop	{r4, r7, pc}

08008c08 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	460b      	mov	r3, r1
 8008c12:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d101      	bne.n	8008c22 <HAL_PCD_SetAddress+0x1a>
 8008c1e:	2302      	movs	r3, #2
 8008c20:	e013      	b.n	8008c4a <HAL_PCD_SetAddress+0x42>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2201      	movs	r2, #1
 8008c26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	78fa      	ldrb	r2, [r7, #3]
 8008c2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	78fa      	ldrb	r2, [r7, #3]
 8008c38:	4611      	mov	r1, r2
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f00a fefe 	bl	8013a3c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3708      	adds	r7, #8
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b084      	sub	sp, #16
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
 8008c5a:	4608      	mov	r0, r1
 8008c5c:	4611      	mov	r1, r2
 8008c5e:	461a      	mov	r2, r3
 8008c60:	4603      	mov	r3, r0
 8008c62:	70fb      	strb	r3, [r7, #3]
 8008c64:	460b      	mov	r3, r1
 8008c66:	803b      	strh	r3, [r7, #0]
 8008c68:	4613      	mov	r3, r2
 8008c6a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008c70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	da0f      	bge.n	8008c98 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c78:	78fb      	ldrb	r3, [r7, #3]
 8008c7a:	f003 020f 	and.w	r2, r3, #15
 8008c7e:	4613      	mov	r3, r2
 8008c80:	00db      	lsls	r3, r3, #3
 8008c82:	4413      	add	r3, r2
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	3338      	adds	r3, #56	; 0x38
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	4413      	add	r3, r2
 8008c8c:	3304      	adds	r3, #4
 8008c8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2201      	movs	r2, #1
 8008c94:	705a      	strb	r2, [r3, #1]
 8008c96:	e00f      	b.n	8008cb8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008c98:	78fb      	ldrb	r3, [r7, #3]
 8008c9a:	f003 020f 	and.w	r2, r3, #15
 8008c9e:	4613      	mov	r3, r2
 8008ca0:	00db      	lsls	r3, r3, #3
 8008ca2:	4413      	add	r3, r2
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008caa:	687a      	ldr	r2, [r7, #4]
 8008cac:	4413      	add	r3, r2
 8008cae:	3304      	adds	r3, #4
 8008cb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008cb8:	78fb      	ldrb	r3, [r7, #3]
 8008cba:	f003 030f 	and.w	r3, r3, #15
 8008cbe:	b2da      	uxtb	r2, r3
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008cc4:	883a      	ldrh	r2, [r7, #0]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	78ba      	ldrb	r2, [r7, #2]
 8008cce:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	785b      	ldrb	r3, [r3, #1]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d004      	beq.n	8008ce2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	b29a      	uxth	r2, r3
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008ce2:	78bb      	ldrb	r3, [r7, #2]
 8008ce4:	2b02      	cmp	r3, #2
 8008ce6:	d102      	bne.n	8008cee <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2200      	movs	r2, #0
 8008cec:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d101      	bne.n	8008cfc <HAL_PCD_EP_Open+0xaa>
 8008cf8:	2302      	movs	r3, #2
 8008cfa:	e00e      	b.n	8008d1a <HAL_PCD_EP_Open+0xc8>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	68f9      	ldr	r1, [r7, #12]
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f00a f87e 	bl	8012e0c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8008d18:	7afb      	ldrb	r3, [r7, #11]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3710      	adds	r7, #16
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b084      	sub	sp, #16
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008d2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	da0f      	bge.n	8008d56 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d36:	78fb      	ldrb	r3, [r7, #3]
 8008d38:	f003 020f 	and.w	r2, r3, #15
 8008d3c:	4613      	mov	r3, r2
 8008d3e:	00db      	lsls	r3, r3, #3
 8008d40:	4413      	add	r3, r2
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	3338      	adds	r3, #56	; 0x38
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	4413      	add	r3, r2
 8008d4a:	3304      	adds	r3, #4
 8008d4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2201      	movs	r2, #1
 8008d52:	705a      	strb	r2, [r3, #1]
 8008d54:	e00f      	b.n	8008d76 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008d56:	78fb      	ldrb	r3, [r7, #3]
 8008d58:	f003 020f 	and.w	r2, r3, #15
 8008d5c:	4613      	mov	r3, r2
 8008d5e:	00db      	lsls	r3, r3, #3
 8008d60:	4413      	add	r3, r2
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	3304      	adds	r3, #4
 8008d6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2200      	movs	r2, #0
 8008d74:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008d76:	78fb      	ldrb	r3, [r7, #3]
 8008d78:	f003 030f 	and.w	r3, r3, #15
 8008d7c:	b2da      	uxtb	r2, r3
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d101      	bne.n	8008d90 <HAL_PCD_EP_Close+0x6e>
 8008d8c:	2302      	movs	r3, #2
 8008d8e:	e00e      	b.n	8008dae <HAL_PCD_EP_Close+0x8c>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	68f9      	ldr	r1, [r7, #12]
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f00a f8bc 	bl	8012f1c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2200      	movs	r2, #0
 8008da8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8008dac:	2300      	movs	r3, #0
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3710      	adds	r7, #16
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}

08008db6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b086      	sub	sp, #24
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	60f8      	str	r0, [r7, #12]
 8008dbe:	607a      	str	r2, [r7, #4]
 8008dc0:	603b      	str	r3, [r7, #0]
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008dc6:	7afb      	ldrb	r3, [r7, #11]
 8008dc8:	f003 020f 	and.w	r2, r3, #15
 8008dcc:	4613      	mov	r3, r2
 8008dce:	00db      	lsls	r3, r3, #3
 8008dd0:	4413      	add	r3, r2
 8008dd2:	009b      	lsls	r3, r3, #2
 8008dd4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	4413      	add	r3, r2
 8008ddc:	3304      	adds	r3, #4
 8008dde:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	683a      	ldr	r2, [r7, #0]
 8008dea:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	2200      	movs	r2, #0
 8008df0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	2200      	movs	r2, #0
 8008df6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008df8:	7afb      	ldrb	r3, [r7, #11]
 8008dfa:	f003 030f 	and.w	r3, r3, #15
 8008dfe:	b2da      	uxtb	r2, r3
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d102      	bne.n	8008e12 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	6818      	ldr	r0, [r3, #0]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	6979      	ldr	r1, [r7, #20]
 8008e20:	f00a f958 	bl	80130d4 <USB_EPStartXfer>

  return HAL_OK;
 8008e24:	2300      	movs	r3, #0
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3718      	adds	r7, #24
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}

08008e2e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008e2e:	b480      	push	{r7}
 8008e30:	b083      	sub	sp, #12
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]
 8008e36:	460b      	mov	r3, r1
 8008e38:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008e3a:	78fb      	ldrb	r3, [r7, #3]
 8008e3c:	f003 020f 	and.w	r2, r3, #15
 8008e40:	6879      	ldr	r1, [r7, #4]
 8008e42:	4613      	mov	r3, r2
 8008e44:	00db      	lsls	r3, r3, #3
 8008e46:	4413      	add	r3, r2
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	440b      	add	r3, r1
 8008e4c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8008e50:	681b      	ldr	r3, [r3, #0]
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	370c      	adds	r7, #12
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr

08008e5e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b086      	sub	sp, #24
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	60f8      	str	r0, [r7, #12]
 8008e66:	607a      	str	r2, [r7, #4]
 8008e68:	603b      	str	r3, [r7, #0]
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008e6e:	7afb      	ldrb	r3, [r7, #11]
 8008e70:	f003 020f 	and.w	r2, r3, #15
 8008e74:	4613      	mov	r3, r2
 8008e76:	00db      	lsls	r3, r3, #3
 8008e78:	4413      	add	r3, r2
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	3338      	adds	r3, #56	; 0x38
 8008e7e:	68fa      	ldr	r2, [r7, #12]
 8008e80:	4413      	add	r3, r2
 8008e82:	3304      	adds	r3, #4
 8008e84:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	683a      	ldr	r2, [r7, #0]
 8008e90:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	2200      	movs	r2, #0
 8008e96:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008e9e:	7afb      	ldrb	r3, [r7, #11]
 8008ea0:	f003 030f 	and.w	r3, r3, #15
 8008ea4:	b2da      	uxtb	r2, r3
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d102      	bne.n	8008eb8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6818      	ldr	r0, [r3, #0]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	6979      	ldr	r1, [r7, #20]
 8008ec6:	f00a f905 	bl	80130d4 <USB_EPStartXfer>

  return HAL_OK;
 8008eca:	2300      	movs	r3, #0
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3718      	adds	r7, #24
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	460b      	mov	r3, r1
 8008ede:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008ee0:	78fb      	ldrb	r3, [r7, #3]
 8008ee2:	f003 020f 	and.w	r2, r3, #15
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d901      	bls.n	8008ef2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e050      	b.n	8008f94 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008ef2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	da0f      	bge.n	8008f1a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008efa:	78fb      	ldrb	r3, [r7, #3]
 8008efc:	f003 020f 	and.w	r2, r3, #15
 8008f00:	4613      	mov	r3, r2
 8008f02:	00db      	lsls	r3, r3, #3
 8008f04:	4413      	add	r3, r2
 8008f06:	009b      	lsls	r3, r3, #2
 8008f08:	3338      	adds	r3, #56	; 0x38
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	3304      	adds	r3, #4
 8008f10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2201      	movs	r2, #1
 8008f16:	705a      	strb	r2, [r3, #1]
 8008f18:	e00d      	b.n	8008f36 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008f1a:	78fa      	ldrb	r2, [r7, #3]
 8008f1c:	4613      	mov	r3, r2
 8008f1e:	00db      	lsls	r3, r3, #3
 8008f20:	4413      	add	r3, r2
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	3304      	adds	r3, #4
 8008f2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2200      	movs	r2, #0
 8008f34:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2201      	movs	r2, #1
 8008f3a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008f3c:	78fb      	ldrb	r3, [r7, #3]
 8008f3e:	f003 030f 	and.w	r3, r3, #15
 8008f42:	b2da      	uxtb	r2, r3
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d101      	bne.n	8008f56 <HAL_PCD_EP_SetStall+0x82>
 8008f52:	2302      	movs	r3, #2
 8008f54:	e01e      	b.n	8008f94 <HAL_PCD_EP_SetStall+0xc0>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2201      	movs	r2, #1
 8008f5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	68f9      	ldr	r1, [r7, #12]
 8008f64:	4618      	mov	r0, r3
 8008f66:	f00a fc95 	bl	8013894 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008f6a:	78fb      	ldrb	r3, [r7, #3]
 8008f6c:	f003 030f 	and.w	r3, r3, #15
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d10a      	bne.n	8008f8a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6818      	ldr	r0, [r3, #0]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	b2d9      	uxtb	r1, r3
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008f84:	461a      	mov	r2, r3
 8008f86:	f00a fe87 	bl	8013c98 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008f92:	2300      	movs	r3, #0
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3710      	adds	r7, #16
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008fa8:	78fb      	ldrb	r3, [r7, #3]
 8008faa:	f003 020f 	and.w	r2, r3, #15
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d901      	bls.n	8008fba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e042      	b.n	8009040 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008fba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	da0f      	bge.n	8008fe2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008fc2:	78fb      	ldrb	r3, [r7, #3]
 8008fc4:	f003 020f 	and.w	r2, r3, #15
 8008fc8:	4613      	mov	r3, r2
 8008fca:	00db      	lsls	r3, r3, #3
 8008fcc:	4413      	add	r3, r2
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	3338      	adds	r3, #56	; 0x38
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	3304      	adds	r3, #4
 8008fd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2201      	movs	r2, #1
 8008fde:	705a      	strb	r2, [r3, #1]
 8008fe0:	e00f      	b.n	8009002 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008fe2:	78fb      	ldrb	r3, [r7, #3]
 8008fe4:	f003 020f 	and.w	r2, r3, #15
 8008fe8:	4613      	mov	r3, r2
 8008fea:	00db      	lsls	r3, r3, #3
 8008fec:	4413      	add	r3, r2
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	4413      	add	r3, r2
 8008ff8:	3304      	adds	r3, #4
 8008ffa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2200      	movs	r2, #0
 8009000:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2200      	movs	r2, #0
 8009006:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009008:	78fb      	ldrb	r3, [r7, #3]
 800900a:	f003 030f 	and.w	r3, r3, #15
 800900e:	b2da      	uxtb	r2, r3
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800901a:	2b01      	cmp	r3, #1
 800901c:	d101      	bne.n	8009022 <HAL_PCD_EP_ClrStall+0x86>
 800901e:	2302      	movs	r3, #2
 8009020:	e00e      	b.n	8009040 <HAL_PCD_EP_ClrStall+0xa4>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2201      	movs	r2, #1
 8009026:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	68f9      	ldr	r1, [r7, #12]
 8009030:	4618      	mov	r0, r3
 8009032:	f00a fc9d 	bl	8013970 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2200      	movs	r2, #0
 800903a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800903e:	2300      	movs	r3, #0
}
 8009040:	4618      	mov	r0, r3
 8009042:	3710      	adds	r7, #16
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	460b      	mov	r3, r1
 8009052:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009054:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009058:	2b00      	cmp	r3, #0
 800905a:	da0c      	bge.n	8009076 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800905c:	78fb      	ldrb	r3, [r7, #3]
 800905e:	f003 020f 	and.w	r2, r3, #15
 8009062:	4613      	mov	r3, r2
 8009064:	00db      	lsls	r3, r3, #3
 8009066:	4413      	add	r3, r2
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	3338      	adds	r3, #56	; 0x38
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	4413      	add	r3, r2
 8009070:	3304      	adds	r3, #4
 8009072:	60fb      	str	r3, [r7, #12]
 8009074:	e00c      	b.n	8009090 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009076:	78fb      	ldrb	r3, [r7, #3]
 8009078:	f003 020f 	and.w	r2, r3, #15
 800907c:	4613      	mov	r3, r2
 800907e:	00db      	lsls	r3, r3, #3
 8009080:	4413      	add	r3, r2
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	4413      	add	r3, r2
 800908c:	3304      	adds	r3, #4
 800908e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	68f9      	ldr	r1, [r7, #12]
 8009096:	4618      	mov	r0, r3
 8009098:	f00a fabc 	bl	8013614 <USB_EPStopXfer>
 800909c:	4603      	mov	r3, r0
 800909e:	72fb      	strb	r3, [r7, #11]

  return ret;
 80090a0:	7afb      	ldrb	r3, [r7, #11]
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b08a      	sub	sp, #40	; 0x28
 80090ae:	af02      	add	r7, sp, #8
 80090b0:	6078      	str	r0, [r7, #4]
 80090b2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80090be:	683a      	ldr	r2, [r7, #0]
 80090c0:	4613      	mov	r3, r2
 80090c2:	00db      	lsls	r3, r3, #3
 80090c4:	4413      	add	r3, r2
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	3338      	adds	r3, #56	; 0x38
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	4413      	add	r3, r2
 80090ce:	3304      	adds	r3, #4
 80090d0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	695a      	ldr	r2, [r3, #20]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	691b      	ldr	r3, [r3, #16]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d901      	bls.n	80090e2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	e06c      	b.n	80091bc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	691a      	ldr	r2, [r3, #16]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	695b      	ldr	r3, [r3, #20]
 80090ea:	1ad3      	subs	r3, r2, r3
 80090ec:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	689b      	ldr	r3, [r3, #8]
 80090f2:	69fa      	ldr	r2, [r7, #28]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d902      	bls.n	80090fe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80090fe:	69fb      	ldr	r3, [r7, #28]
 8009100:	3303      	adds	r3, #3
 8009102:	089b      	lsrs	r3, r3, #2
 8009104:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009106:	e02b      	b.n	8009160 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	691a      	ldr	r2, [r3, #16]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	695b      	ldr	r3, [r3, #20]
 8009110:	1ad3      	subs	r3, r2, r3
 8009112:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	689b      	ldr	r3, [r3, #8]
 8009118:	69fa      	ldr	r2, [r7, #28]
 800911a:	429a      	cmp	r2, r3
 800911c:	d902      	bls.n	8009124 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009124:	69fb      	ldr	r3, [r7, #28]
 8009126:	3303      	adds	r3, #3
 8009128:	089b      	lsrs	r3, r3, #2
 800912a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	68d9      	ldr	r1, [r3, #12]
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	b2da      	uxtb	r2, r3
 8009134:	69fb      	ldr	r3, [r7, #28]
 8009136:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800913c:	b2db      	uxtb	r3, r3
 800913e:	9300      	str	r3, [sp, #0]
 8009140:	4603      	mov	r3, r0
 8009142:	6978      	ldr	r0, [r7, #20]
 8009144:	f00a fb10 	bl	8013768 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	68da      	ldr	r2, [r3, #12]
 800914c:	69fb      	ldr	r3, [r7, #28]
 800914e:	441a      	add	r2, r3
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	695a      	ldr	r2, [r3, #20]
 8009158:	69fb      	ldr	r3, [r7, #28]
 800915a:	441a      	add	r2, r3
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	015a      	lsls	r2, r3, #5
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	4413      	add	r3, r2
 8009168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800916c:	699b      	ldr	r3, [r3, #24]
 800916e:	b29b      	uxth	r3, r3
 8009170:	69ba      	ldr	r2, [r7, #24]
 8009172:	429a      	cmp	r2, r3
 8009174:	d809      	bhi.n	800918a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	695a      	ldr	r2, [r3, #20]
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800917e:	429a      	cmp	r2, r3
 8009180:	d203      	bcs.n	800918a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	691b      	ldr	r3, [r3, #16]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d1be      	bne.n	8009108 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	691a      	ldr	r2, [r3, #16]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	695b      	ldr	r3, [r3, #20]
 8009192:	429a      	cmp	r2, r3
 8009194:	d811      	bhi.n	80091ba <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	f003 030f 	and.w	r3, r3, #15
 800919c:	2201      	movs	r2, #1
 800919e:	fa02 f303 	lsl.w	r3, r2, r3
 80091a2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	43db      	mvns	r3, r3
 80091b0:	6939      	ldr	r1, [r7, #16]
 80091b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091b6:	4013      	ands	r3, r2
 80091b8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80091ba:	2300      	movs	r3, #0
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3720      	adds	r7, #32
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b088      	sub	sp, #32
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091d4:	69fb      	ldr	r3, [r7, #28]
 80091d6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	333c      	adds	r3, #60	; 0x3c
 80091dc:	3304      	adds	r3, #4
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	015a      	lsls	r2, r3, #5
 80091e6:	69bb      	ldr	r3, [r7, #24]
 80091e8:	4413      	add	r3, r2
 80091ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	68db      	ldr	r3, [r3, #12]
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	d17b      	bne.n	80092f2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	f003 0308 	and.w	r3, r3, #8
 8009200:	2b00      	cmp	r3, #0
 8009202:	d015      	beq.n	8009230 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	4a61      	ldr	r2, [pc, #388]	; (800938c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009208:	4293      	cmp	r3, r2
 800920a:	f240 80b9 	bls.w	8009380 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009214:	2b00      	cmp	r3, #0
 8009216:	f000 80b3 	beq.w	8009380 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	015a      	lsls	r2, r3, #5
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	4413      	add	r3, r2
 8009222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009226:	461a      	mov	r2, r3
 8009228:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800922c:	6093      	str	r3, [r2, #8]
 800922e:	e0a7      	b.n	8009380 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	f003 0320 	and.w	r3, r3, #32
 8009236:	2b00      	cmp	r3, #0
 8009238:	d009      	beq.n	800924e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	015a      	lsls	r2, r3, #5
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	4413      	add	r3, r2
 8009242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009246:	461a      	mov	r2, r3
 8009248:	2320      	movs	r3, #32
 800924a:	6093      	str	r3, [r2, #8]
 800924c:	e098      	b.n	8009380 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009254:	2b00      	cmp	r3, #0
 8009256:	f040 8093 	bne.w	8009380 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	4a4b      	ldr	r2, [pc, #300]	; (800938c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d90f      	bls.n	8009282 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009268:	2b00      	cmp	r3, #0
 800926a:	d00a      	beq.n	8009282 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	015a      	lsls	r2, r3, #5
 8009270:	69bb      	ldr	r3, [r7, #24]
 8009272:	4413      	add	r3, r2
 8009274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009278:	461a      	mov	r2, r3
 800927a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800927e:	6093      	str	r3, [r2, #8]
 8009280:	e07e      	b.n	8009380 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8009282:	683a      	ldr	r2, [r7, #0]
 8009284:	4613      	mov	r3, r2
 8009286:	00db      	lsls	r3, r3, #3
 8009288:	4413      	add	r3, r2
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	4413      	add	r3, r2
 8009294:	3304      	adds	r3, #4
 8009296:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	6a1a      	ldr	r2, [r3, #32]
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	0159      	lsls	r1, r3, #5
 80092a0:	69bb      	ldr	r3, [r7, #24]
 80092a2:	440b      	add	r3, r1
 80092a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092a8:	691b      	ldr	r3, [r3, #16]
 80092aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092ae:	1ad2      	subs	r2, r2, r3
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d114      	bne.n	80092e4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	691b      	ldr	r3, [r3, #16]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d109      	bne.n	80092d6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6818      	ldr	r0, [r3, #0]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80092cc:	461a      	mov	r2, r3
 80092ce:	2101      	movs	r1, #1
 80092d0:	f00a fce2 	bl	8013c98 <USB_EP0_OutStart>
 80092d4:	e006      	b.n	80092e4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	68da      	ldr	r2, [r3, #12]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	695b      	ldr	r3, [r3, #20]
 80092de:	441a      	add	r2, r3
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	4619      	mov	r1, r3
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f00d fa48 	bl	8016780 <HAL_PCD_DataOutStageCallback>
 80092f0:	e046      	b.n	8009380 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	4a26      	ldr	r2, [pc, #152]	; (8009390 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d124      	bne.n	8009344 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009300:	2b00      	cmp	r3, #0
 8009302:	d00a      	beq.n	800931a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	015a      	lsls	r2, r3, #5
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	4413      	add	r3, r2
 800930c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009310:	461a      	mov	r2, r3
 8009312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009316:	6093      	str	r3, [r2, #8]
 8009318:	e032      	b.n	8009380 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	f003 0320 	and.w	r3, r3, #32
 8009320:	2b00      	cmp	r3, #0
 8009322:	d008      	beq.n	8009336 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	015a      	lsls	r2, r3, #5
 8009328:	69bb      	ldr	r3, [r7, #24]
 800932a:	4413      	add	r3, r2
 800932c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009330:	461a      	mov	r2, r3
 8009332:	2320      	movs	r3, #32
 8009334:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	b2db      	uxtb	r3, r3
 800933a:	4619      	mov	r1, r3
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f00d fa1f 	bl	8016780 <HAL_PCD_DataOutStageCallback>
 8009342:	e01d      	b.n	8009380 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d114      	bne.n	8009374 <PCD_EP_OutXfrComplete_int+0x1b0>
 800934a:	6879      	ldr	r1, [r7, #4]
 800934c:	683a      	ldr	r2, [r7, #0]
 800934e:	4613      	mov	r3, r2
 8009350:	00db      	lsls	r3, r3, #3
 8009352:	4413      	add	r3, r2
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	440b      	add	r3, r1
 8009358:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d108      	bne.n	8009374 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6818      	ldr	r0, [r3, #0]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800936c:	461a      	mov	r2, r3
 800936e:	2100      	movs	r1, #0
 8009370:	f00a fc92 	bl	8013c98 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	b2db      	uxtb	r3, r3
 8009378:	4619      	mov	r1, r3
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f00d fa00 	bl	8016780 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009380:	2300      	movs	r3, #0
}
 8009382:	4618      	mov	r0, r3
 8009384:	3720      	adds	r7, #32
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	4f54300a 	.word	0x4f54300a
 8009390:	4f54310a 	.word	0x4f54310a

08009394 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b086      	sub	sp, #24
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	333c      	adds	r3, #60	; 0x3c
 80093ac:	3304      	adds	r3, #4
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	015a      	lsls	r2, r3, #5
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	4413      	add	r3, r2
 80093ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	4a15      	ldr	r2, [pc, #84]	; (800941c <PCD_EP_OutSetupPacket_int+0x88>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d90e      	bls.n	80093e8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d009      	beq.n	80093e8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	015a      	lsls	r2, r3, #5
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	4413      	add	r3, r2
 80093dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093e0:	461a      	mov	r2, r3
 80093e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093e6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f00d f9b7 	bl	801675c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	4a0a      	ldr	r2, [pc, #40]	; (800941c <PCD_EP_OutSetupPacket_int+0x88>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d90c      	bls.n	8009410 <PCD_EP_OutSetupPacket_int+0x7c>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	68db      	ldr	r3, [r3, #12]
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d108      	bne.n	8009410 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6818      	ldr	r0, [r3, #0]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009408:	461a      	mov	r2, r3
 800940a:	2101      	movs	r1, #1
 800940c:	f00a fc44 	bl	8013c98 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009410:	2300      	movs	r3, #0
}
 8009412:	4618      	mov	r0, r3
 8009414:	3718      	adds	r7, #24
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	4f54300a 	.word	0x4f54300a

08009420 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009420:	b480      	push	{r7}
 8009422:	b085      	sub	sp, #20
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	460b      	mov	r3, r1
 800942a:	70fb      	strb	r3, [r7, #3]
 800942c:	4613      	mov	r3, r2
 800942e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009436:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009438:	78fb      	ldrb	r3, [r7, #3]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d107      	bne.n	800944e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800943e:	883b      	ldrh	r3, [r7, #0]
 8009440:	0419      	lsls	r1, r3, #16
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	68ba      	ldr	r2, [r7, #8]
 8009448:	430a      	orrs	r2, r1
 800944a:	629a      	str	r2, [r3, #40]	; 0x28
 800944c:	e028      	b.n	80094a0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009454:	0c1b      	lsrs	r3, r3, #16
 8009456:	68ba      	ldr	r2, [r7, #8]
 8009458:	4413      	add	r3, r2
 800945a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800945c:	2300      	movs	r3, #0
 800945e:	73fb      	strb	r3, [r7, #15]
 8009460:	e00d      	b.n	800947e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	7bfb      	ldrb	r3, [r7, #15]
 8009468:	3340      	adds	r3, #64	; 0x40
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	4413      	add	r3, r2
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	0c1b      	lsrs	r3, r3, #16
 8009472:	68ba      	ldr	r2, [r7, #8]
 8009474:	4413      	add	r3, r2
 8009476:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009478:	7bfb      	ldrb	r3, [r7, #15]
 800947a:	3301      	adds	r3, #1
 800947c:	73fb      	strb	r3, [r7, #15]
 800947e:	7bfa      	ldrb	r2, [r7, #15]
 8009480:	78fb      	ldrb	r3, [r7, #3]
 8009482:	3b01      	subs	r3, #1
 8009484:	429a      	cmp	r2, r3
 8009486:	d3ec      	bcc.n	8009462 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009488:	883b      	ldrh	r3, [r7, #0]
 800948a:	0418      	lsls	r0, r3, #16
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6819      	ldr	r1, [r3, #0]
 8009490:	78fb      	ldrb	r3, [r7, #3]
 8009492:	3b01      	subs	r3, #1
 8009494:	68ba      	ldr	r2, [r7, #8]
 8009496:	4302      	orrs	r2, r0
 8009498:	3340      	adds	r3, #64	; 0x40
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	440b      	add	r3, r1
 800949e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80094a0:	2300      	movs	r3, #0
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3714      	adds	r7, #20
 80094a6:	46bd      	mov	sp, r7
 80094a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ac:	4770      	bx	lr

080094ae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80094ae:	b480      	push	{r7}
 80094b0:	b083      	sub	sp, #12
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
 80094b6:	460b      	mov	r3, r1
 80094b8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	887a      	ldrh	r2, [r7, #2]
 80094c0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80094c2:	2300      	movs	r3, #0
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b085      	sub	sp, #20
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2201      	movs	r2, #1
 80094e2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2200      	movs	r2, #0
 80094ea:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	699b      	ldr	r3, [r3, #24]
 80094f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094fe:	4b05      	ldr	r3, [pc, #20]	; (8009514 <HAL_PCDEx_ActivateLPM+0x44>)
 8009500:	4313      	orrs	r3, r2
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009506:	2300      	movs	r3, #0
}
 8009508:	4618      	mov	r0, r3
 800950a:	3714      	adds	r7, #20
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr
 8009514:	10000003 	.word	0x10000003

08009518 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009518:	b480      	push	{r7}
 800951a:	b083      	sub	sp, #12
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	460b      	mov	r3, r1
 8009522:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009524:	bf00      	nop
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009538:	4b19      	ldr	r3, [pc, #100]	; (80095a0 <HAL_PWREx_ConfigSupply+0x70>)
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	f003 0304 	and.w	r3, r3, #4
 8009540:	2b04      	cmp	r3, #4
 8009542:	d00a      	beq.n	800955a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009544:	4b16      	ldr	r3, [pc, #88]	; (80095a0 <HAL_PWREx_ConfigSupply+0x70>)
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	f003 0307 	and.w	r3, r3, #7
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	429a      	cmp	r2, r3
 8009550:	d001      	beq.n	8009556 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009552:	2301      	movs	r3, #1
 8009554:	e01f      	b.n	8009596 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009556:	2300      	movs	r3, #0
 8009558:	e01d      	b.n	8009596 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800955a:	4b11      	ldr	r3, [pc, #68]	; (80095a0 <HAL_PWREx_ConfigSupply+0x70>)
 800955c:	68db      	ldr	r3, [r3, #12]
 800955e:	f023 0207 	bic.w	r2, r3, #7
 8009562:	490f      	ldr	r1, [pc, #60]	; (80095a0 <HAL_PWREx_ConfigSupply+0x70>)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	4313      	orrs	r3, r2
 8009568:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800956a:	f7fa f927 	bl	80037bc <HAL_GetTick>
 800956e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009570:	e009      	b.n	8009586 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009572:	f7fa f923 	bl	80037bc <HAL_GetTick>
 8009576:	4602      	mov	r2, r0
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	1ad3      	subs	r3, r2, r3
 800957c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009580:	d901      	bls.n	8009586 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009582:	2301      	movs	r3, #1
 8009584:	e007      	b.n	8009596 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009586:	4b06      	ldr	r3, [pc, #24]	; (80095a0 <HAL_PWREx_ConfigSupply+0x70>)
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800958e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009592:	d1ee      	bne.n	8009572 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009594:	2300      	movs	r3, #0
}
 8009596:	4618      	mov	r0, r3
 8009598:	3710      	adds	r7, #16
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop
 80095a0:	58024800 	.word	0x58024800

080095a4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80095a4:	b480      	push	{r7}
 80095a6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80095a8:	4b05      	ldr	r3, [pc, #20]	; (80095c0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	4a04      	ldr	r2, [pc, #16]	; (80095c0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80095ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80095b2:	60d3      	str	r3, [r2, #12]
}
 80095b4:	bf00      	nop
 80095b6:	46bd      	mov	sp, r7
 80095b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095bc:	4770      	bx	lr
 80095be:	bf00      	nop
 80095c0:	58024800 	.word	0x58024800

080095c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b08c      	sub	sp, #48	; 0x30
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d101      	bne.n	80095d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80095d2:	2301      	movs	r3, #1
 80095d4:	e3c8      	b.n	8009d68 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f003 0301 	and.w	r3, r3, #1
 80095de:	2b00      	cmp	r3, #0
 80095e0:	f000 8087 	beq.w	80096f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80095e4:	4b88      	ldr	r3, [pc, #544]	; (8009808 <HAL_RCC_OscConfig+0x244>)
 80095e6:	691b      	ldr	r3, [r3, #16]
 80095e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80095ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80095ee:	4b86      	ldr	r3, [pc, #536]	; (8009808 <HAL_RCC_OscConfig+0x244>)
 80095f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095f2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80095f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095f6:	2b10      	cmp	r3, #16
 80095f8:	d007      	beq.n	800960a <HAL_RCC_OscConfig+0x46>
 80095fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095fc:	2b18      	cmp	r3, #24
 80095fe:	d110      	bne.n	8009622 <HAL_RCC_OscConfig+0x5e>
 8009600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009602:	f003 0303 	and.w	r3, r3, #3
 8009606:	2b02      	cmp	r3, #2
 8009608:	d10b      	bne.n	8009622 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800960a:	4b7f      	ldr	r3, [pc, #508]	; (8009808 <HAL_RCC_OscConfig+0x244>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009612:	2b00      	cmp	r3, #0
 8009614:	d06c      	beq.n	80096f0 <HAL_RCC_OscConfig+0x12c>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d168      	bne.n	80096f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800961e:	2301      	movs	r3, #1
 8009620:	e3a2      	b.n	8009d68 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800962a:	d106      	bne.n	800963a <HAL_RCC_OscConfig+0x76>
 800962c:	4b76      	ldr	r3, [pc, #472]	; (8009808 <HAL_RCC_OscConfig+0x244>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a75      	ldr	r2, [pc, #468]	; (8009808 <HAL_RCC_OscConfig+0x244>)
 8009632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009636:	6013      	str	r3, [r2, #0]
 8009638:	e02e      	b.n	8009698 <HAL_RCC_OscConfig+0xd4>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d10c      	bne.n	800965c <HAL_RCC_OscConfig+0x98>
 8009642:	4b71      	ldr	r3, [pc, #452]	; (8009808 <HAL_RCC_OscConfig+0x244>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a70      	ldr	r2, [pc, #448]	; (8009808 <HAL_RCC_OscConfig+0x244>)
 8009648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800964c:	6013      	str	r3, [r2, #0]
 800964e:	4b6e      	ldr	r3, [pc, #440]	; (8009808 <HAL_RCC_OscConfig+0x244>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a6d      	ldr	r2, [pc, #436]	; (8009808 <HAL_RCC_OscConfig+0x244>)
 8009654:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009658:	6013      	str	r3, [r2, #0]
 800965a:	e01d      	b.n	8009698 <HAL_RCC_OscConfig+0xd4>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009664:	d10c      	bne.n	8009680 <HAL_RCC_OscConfig+0xbc>
 8009666:	4b68      	ldr	r3, [pc, #416]	; (8009808 <HAL_RCC_OscConfig+0x244>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a67      	ldr	r2, [pc, #412]	; (8009808 <HAL_RCC_OscConfig+0x244>)
 800966c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009670:	6013      	str	r3, [r2, #0]
 8009672:	4b65      	ldr	r3, [pc, #404]	; (8009808 <HAL_RCC_OscConfig+0x244>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a64      	ldr	r2, [pc, #400]	; (8009808 <HAL_RCC_OscConfig+0x244>)
 8009678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800967c:	6013      	str	r3, [r2, #0]
 800967e:	e00b      	b.n	8009698 <HAL_RCC_OscConfig+0xd4>
 8009680:	4b61      	ldr	r3, [pc, #388]	; (8009808 <HAL_RCC_OscConfig+0x244>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a60      	ldr	r2, [pc, #384]	; (8009808 <HAL_RCC_OscConfig+0x244>)
 8009686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800968a:	6013      	str	r3, [r2, #0]
 800968c:	4b5e      	ldr	r3, [pc, #376]	; (8009808 <HAL_RCC_OscConfig+0x244>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a5d      	ldr	r2, [pc, #372]	; (8009808 <HAL_RCC_OscConfig+0x244>)
 8009692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009696:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d013      	beq.n	80096c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096a0:	f7fa f88c 	bl	80037bc <HAL_GetTick>
 80096a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80096a6:	e008      	b.n	80096ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80096a8:	f7fa f888 	bl	80037bc <HAL_GetTick>
 80096ac:	4602      	mov	r2, r0
 80096ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b0:	1ad3      	subs	r3, r2, r3
 80096b2:	2b64      	cmp	r3, #100	; 0x64
 80096b4:	d901      	bls.n	80096ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80096b6:	2303      	movs	r3, #3
 80096b8:	e356      	b.n	8009d68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80096ba:	4b53      	ldr	r3, [pc, #332]	; (8009808 <HAL_RCC_OscConfig+0x244>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d0f0      	beq.n	80096a8 <HAL_RCC_OscConfig+0xe4>
 80096c6:	e014      	b.n	80096f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096c8:	f7fa f878 	bl	80037bc <HAL_GetTick>
 80096cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80096ce:	e008      	b.n	80096e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80096d0:	f7fa f874 	bl	80037bc <HAL_GetTick>
 80096d4:	4602      	mov	r2, r0
 80096d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d8:	1ad3      	subs	r3, r2, r3
 80096da:	2b64      	cmp	r3, #100	; 0x64
 80096dc:	d901      	bls.n	80096e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80096de:	2303      	movs	r3, #3
 80096e0:	e342      	b.n	8009d68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80096e2:	4b49      	ldr	r3, [pc, #292]	; (8009808 <HAL_RCC_OscConfig+0x244>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d1f0      	bne.n	80096d0 <HAL_RCC_OscConfig+0x10c>
 80096ee:	e000      	b.n	80096f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80096f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f003 0302 	and.w	r3, r3, #2
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	f000 808c 	beq.w	8009818 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009700:	4b41      	ldr	r3, [pc, #260]	; (8009808 <HAL_RCC_OscConfig+0x244>)
 8009702:	691b      	ldr	r3, [r3, #16]
 8009704:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009708:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800970a:	4b3f      	ldr	r3, [pc, #252]	; (8009808 <HAL_RCC_OscConfig+0x244>)
 800970c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800970e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009710:	6a3b      	ldr	r3, [r7, #32]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d007      	beq.n	8009726 <HAL_RCC_OscConfig+0x162>
 8009716:	6a3b      	ldr	r3, [r7, #32]
 8009718:	2b18      	cmp	r3, #24
 800971a:	d137      	bne.n	800978c <HAL_RCC_OscConfig+0x1c8>
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	f003 0303 	and.w	r3, r3, #3
 8009722:	2b00      	cmp	r3, #0
 8009724:	d132      	bne.n	800978c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009726:	4b38      	ldr	r3, [pc, #224]	; (8009808 <HAL_RCC_OscConfig+0x244>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f003 0304 	and.w	r3, r3, #4
 800972e:	2b00      	cmp	r3, #0
 8009730:	d005      	beq.n	800973e <HAL_RCC_OscConfig+0x17a>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	68db      	ldr	r3, [r3, #12]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d101      	bne.n	800973e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800973a:	2301      	movs	r3, #1
 800973c:	e314      	b.n	8009d68 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800973e:	4b32      	ldr	r3, [pc, #200]	; (8009808 <HAL_RCC_OscConfig+0x244>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f023 0219 	bic.w	r2, r3, #25
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	68db      	ldr	r3, [r3, #12]
 800974a:	492f      	ldr	r1, [pc, #188]	; (8009808 <HAL_RCC_OscConfig+0x244>)
 800974c:	4313      	orrs	r3, r2
 800974e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009750:	f7fa f834 	bl	80037bc <HAL_GetTick>
 8009754:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009756:	e008      	b.n	800976a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009758:	f7fa f830 	bl	80037bc <HAL_GetTick>
 800975c:	4602      	mov	r2, r0
 800975e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009760:	1ad3      	subs	r3, r2, r3
 8009762:	2b02      	cmp	r3, #2
 8009764:	d901      	bls.n	800976a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009766:	2303      	movs	r3, #3
 8009768:	e2fe      	b.n	8009d68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800976a:	4b27      	ldr	r3, [pc, #156]	; (8009808 <HAL_RCC_OscConfig+0x244>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f003 0304 	and.w	r3, r3, #4
 8009772:	2b00      	cmp	r3, #0
 8009774:	d0f0      	beq.n	8009758 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009776:	4b24      	ldr	r3, [pc, #144]	; (8009808 <HAL_RCC_OscConfig+0x244>)
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	691b      	ldr	r3, [r3, #16]
 8009782:	061b      	lsls	r3, r3, #24
 8009784:	4920      	ldr	r1, [pc, #128]	; (8009808 <HAL_RCC_OscConfig+0x244>)
 8009786:	4313      	orrs	r3, r2
 8009788:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800978a:	e045      	b.n	8009818 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	68db      	ldr	r3, [r3, #12]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d026      	beq.n	80097e2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009794:	4b1c      	ldr	r3, [pc, #112]	; (8009808 <HAL_RCC_OscConfig+0x244>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f023 0219 	bic.w	r2, r3, #25
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	68db      	ldr	r3, [r3, #12]
 80097a0:	4919      	ldr	r1, [pc, #100]	; (8009808 <HAL_RCC_OscConfig+0x244>)
 80097a2:	4313      	orrs	r3, r2
 80097a4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097a6:	f7fa f809 	bl	80037bc <HAL_GetTick>
 80097aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80097ac:	e008      	b.n	80097c0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80097ae:	f7fa f805 	bl	80037bc <HAL_GetTick>
 80097b2:	4602      	mov	r2, r0
 80097b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b6:	1ad3      	subs	r3, r2, r3
 80097b8:	2b02      	cmp	r3, #2
 80097ba:	d901      	bls.n	80097c0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80097bc:	2303      	movs	r3, #3
 80097be:	e2d3      	b.n	8009d68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80097c0:	4b11      	ldr	r3, [pc, #68]	; (8009808 <HAL_RCC_OscConfig+0x244>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f003 0304 	and.w	r3, r3, #4
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d0f0      	beq.n	80097ae <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80097cc:	4b0e      	ldr	r3, [pc, #56]	; (8009808 <HAL_RCC_OscConfig+0x244>)
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	691b      	ldr	r3, [r3, #16]
 80097d8:	061b      	lsls	r3, r3, #24
 80097da:	490b      	ldr	r1, [pc, #44]	; (8009808 <HAL_RCC_OscConfig+0x244>)
 80097dc:	4313      	orrs	r3, r2
 80097de:	604b      	str	r3, [r1, #4]
 80097e0:	e01a      	b.n	8009818 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80097e2:	4b09      	ldr	r3, [pc, #36]	; (8009808 <HAL_RCC_OscConfig+0x244>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4a08      	ldr	r2, [pc, #32]	; (8009808 <HAL_RCC_OscConfig+0x244>)
 80097e8:	f023 0301 	bic.w	r3, r3, #1
 80097ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097ee:	f7f9 ffe5 	bl	80037bc <HAL_GetTick>
 80097f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80097f4:	e00a      	b.n	800980c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80097f6:	f7f9 ffe1 	bl	80037bc <HAL_GetTick>
 80097fa:	4602      	mov	r2, r0
 80097fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fe:	1ad3      	subs	r3, r2, r3
 8009800:	2b02      	cmp	r3, #2
 8009802:	d903      	bls.n	800980c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009804:	2303      	movs	r3, #3
 8009806:	e2af      	b.n	8009d68 <HAL_RCC_OscConfig+0x7a4>
 8009808:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800980c:	4b96      	ldr	r3, [pc, #600]	; (8009a68 <HAL_RCC_OscConfig+0x4a4>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f003 0304 	and.w	r3, r3, #4
 8009814:	2b00      	cmp	r3, #0
 8009816:	d1ee      	bne.n	80097f6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f003 0310 	and.w	r3, r3, #16
 8009820:	2b00      	cmp	r3, #0
 8009822:	d06a      	beq.n	80098fa <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009824:	4b90      	ldr	r3, [pc, #576]	; (8009a68 <HAL_RCC_OscConfig+0x4a4>)
 8009826:	691b      	ldr	r3, [r3, #16]
 8009828:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800982c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800982e:	4b8e      	ldr	r3, [pc, #568]	; (8009a68 <HAL_RCC_OscConfig+0x4a4>)
 8009830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009832:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009834:	69bb      	ldr	r3, [r7, #24]
 8009836:	2b08      	cmp	r3, #8
 8009838:	d007      	beq.n	800984a <HAL_RCC_OscConfig+0x286>
 800983a:	69bb      	ldr	r3, [r7, #24]
 800983c:	2b18      	cmp	r3, #24
 800983e:	d11b      	bne.n	8009878 <HAL_RCC_OscConfig+0x2b4>
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	f003 0303 	and.w	r3, r3, #3
 8009846:	2b01      	cmp	r3, #1
 8009848:	d116      	bne.n	8009878 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800984a:	4b87      	ldr	r3, [pc, #540]	; (8009a68 <HAL_RCC_OscConfig+0x4a4>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009852:	2b00      	cmp	r3, #0
 8009854:	d005      	beq.n	8009862 <HAL_RCC_OscConfig+0x29e>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	69db      	ldr	r3, [r3, #28]
 800985a:	2b80      	cmp	r3, #128	; 0x80
 800985c:	d001      	beq.n	8009862 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800985e:	2301      	movs	r3, #1
 8009860:	e282      	b.n	8009d68 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009862:	4b81      	ldr	r3, [pc, #516]	; (8009a68 <HAL_RCC_OscConfig+0x4a4>)
 8009864:	68db      	ldr	r3, [r3, #12]
 8009866:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6a1b      	ldr	r3, [r3, #32]
 800986e:	061b      	lsls	r3, r3, #24
 8009870:	497d      	ldr	r1, [pc, #500]	; (8009a68 <HAL_RCC_OscConfig+0x4a4>)
 8009872:	4313      	orrs	r3, r2
 8009874:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009876:	e040      	b.n	80098fa <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	69db      	ldr	r3, [r3, #28]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d023      	beq.n	80098c8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009880:	4b79      	ldr	r3, [pc, #484]	; (8009a68 <HAL_RCC_OscConfig+0x4a4>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a78      	ldr	r2, [pc, #480]	; (8009a68 <HAL_RCC_OscConfig+0x4a4>)
 8009886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800988a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800988c:	f7f9 ff96 	bl	80037bc <HAL_GetTick>
 8009890:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009892:	e008      	b.n	80098a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009894:	f7f9 ff92 	bl	80037bc <HAL_GetTick>
 8009898:	4602      	mov	r2, r0
 800989a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989c:	1ad3      	subs	r3, r2, r3
 800989e:	2b02      	cmp	r3, #2
 80098a0:	d901      	bls.n	80098a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80098a2:	2303      	movs	r3, #3
 80098a4:	e260      	b.n	8009d68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80098a6:	4b70      	ldr	r3, [pc, #448]	; (8009a68 <HAL_RCC_OscConfig+0x4a4>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d0f0      	beq.n	8009894 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80098b2:	4b6d      	ldr	r3, [pc, #436]	; (8009a68 <HAL_RCC_OscConfig+0x4a4>)
 80098b4:	68db      	ldr	r3, [r3, #12]
 80098b6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6a1b      	ldr	r3, [r3, #32]
 80098be:	061b      	lsls	r3, r3, #24
 80098c0:	4969      	ldr	r1, [pc, #420]	; (8009a68 <HAL_RCC_OscConfig+0x4a4>)
 80098c2:	4313      	orrs	r3, r2
 80098c4:	60cb      	str	r3, [r1, #12]
 80098c6:	e018      	b.n	80098fa <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80098c8:	4b67      	ldr	r3, [pc, #412]	; (8009a68 <HAL_RCC_OscConfig+0x4a4>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a66      	ldr	r2, [pc, #408]	; (8009a68 <HAL_RCC_OscConfig+0x4a4>)
 80098ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80098d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098d4:	f7f9 ff72 	bl	80037bc <HAL_GetTick>
 80098d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80098da:	e008      	b.n	80098ee <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80098dc:	f7f9 ff6e 	bl	80037bc <HAL_GetTick>
 80098e0:	4602      	mov	r2, r0
 80098e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e4:	1ad3      	subs	r3, r2, r3
 80098e6:	2b02      	cmp	r3, #2
 80098e8:	d901      	bls.n	80098ee <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80098ea:	2303      	movs	r3, #3
 80098ec:	e23c      	b.n	8009d68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80098ee:	4b5e      	ldr	r3, [pc, #376]	; (8009a68 <HAL_RCC_OscConfig+0x4a4>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d1f0      	bne.n	80098dc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f003 0308 	and.w	r3, r3, #8
 8009902:	2b00      	cmp	r3, #0
 8009904:	d036      	beq.n	8009974 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	695b      	ldr	r3, [r3, #20]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d019      	beq.n	8009942 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800990e:	4b56      	ldr	r3, [pc, #344]	; (8009a68 <HAL_RCC_OscConfig+0x4a4>)
 8009910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009912:	4a55      	ldr	r2, [pc, #340]	; (8009a68 <HAL_RCC_OscConfig+0x4a4>)
 8009914:	f043 0301 	orr.w	r3, r3, #1
 8009918:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800991a:	f7f9 ff4f 	bl	80037bc <HAL_GetTick>
 800991e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009920:	e008      	b.n	8009934 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009922:	f7f9 ff4b 	bl	80037bc <HAL_GetTick>
 8009926:	4602      	mov	r2, r0
 8009928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992a:	1ad3      	subs	r3, r2, r3
 800992c:	2b02      	cmp	r3, #2
 800992e:	d901      	bls.n	8009934 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009930:	2303      	movs	r3, #3
 8009932:	e219      	b.n	8009d68 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009934:	4b4c      	ldr	r3, [pc, #304]	; (8009a68 <HAL_RCC_OscConfig+0x4a4>)
 8009936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009938:	f003 0302 	and.w	r3, r3, #2
 800993c:	2b00      	cmp	r3, #0
 800993e:	d0f0      	beq.n	8009922 <HAL_RCC_OscConfig+0x35e>
 8009940:	e018      	b.n	8009974 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009942:	4b49      	ldr	r3, [pc, #292]	; (8009a68 <HAL_RCC_OscConfig+0x4a4>)
 8009944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009946:	4a48      	ldr	r2, [pc, #288]	; (8009a68 <HAL_RCC_OscConfig+0x4a4>)
 8009948:	f023 0301 	bic.w	r3, r3, #1
 800994c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800994e:	f7f9 ff35 	bl	80037bc <HAL_GetTick>
 8009952:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009954:	e008      	b.n	8009968 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009956:	f7f9 ff31 	bl	80037bc <HAL_GetTick>
 800995a:	4602      	mov	r2, r0
 800995c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995e:	1ad3      	subs	r3, r2, r3
 8009960:	2b02      	cmp	r3, #2
 8009962:	d901      	bls.n	8009968 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009964:	2303      	movs	r3, #3
 8009966:	e1ff      	b.n	8009d68 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009968:	4b3f      	ldr	r3, [pc, #252]	; (8009a68 <HAL_RCC_OscConfig+0x4a4>)
 800996a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800996c:	f003 0302 	and.w	r3, r3, #2
 8009970:	2b00      	cmp	r3, #0
 8009972:	d1f0      	bne.n	8009956 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f003 0320 	and.w	r3, r3, #32
 800997c:	2b00      	cmp	r3, #0
 800997e:	d036      	beq.n	80099ee <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	699b      	ldr	r3, [r3, #24]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d019      	beq.n	80099bc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009988:	4b37      	ldr	r3, [pc, #220]	; (8009a68 <HAL_RCC_OscConfig+0x4a4>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a36      	ldr	r2, [pc, #216]	; (8009a68 <HAL_RCC_OscConfig+0x4a4>)
 800998e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009992:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009994:	f7f9 ff12 	bl	80037bc <HAL_GetTick>
 8009998:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800999a:	e008      	b.n	80099ae <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800999c:	f7f9 ff0e 	bl	80037bc <HAL_GetTick>
 80099a0:	4602      	mov	r2, r0
 80099a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a4:	1ad3      	subs	r3, r2, r3
 80099a6:	2b02      	cmp	r3, #2
 80099a8:	d901      	bls.n	80099ae <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80099aa:	2303      	movs	r3, #3
 80099ac:	e1dc      	b.n	8009d68 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80099ae:	4b2e      	ldr	r3, [pc, #184]	; (8009a68 <HAL_RCC_OscConfig+0x4a4>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d0f0      	beq.n	800999c <HAL_RCC_OscConfig+0x3d8>
 80099ba:	e018      	b.n	80099ee <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80099bc:	4b2a      	ldr	r3, [pc, #168]	; (8009a68 <HAL_RCC_OscConfig+0x4a4>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a29      	ldr	r2, [pc, #164]	; (8009a68 <HAL_RCC_OscConfig+0x4a4>)
 80099c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099c6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80099c8:	f7f9 fef8 	bl	80037bc <HAL_GetTick>
 80099cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80099ce:	e008      	b.n	80099e2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80099d0:	f7f9 fef4 	bl	80037bc <HAL_GetTick>
 80099d4:	4602      	mov	r2, r0
 80099d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d8:	1ad3      	subs	r3, r2, r3
 80099da:	2b02      	cmp	r3, #2
 80099dc:	d901      	bls.n	80099e2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80099de:	2303      	movs	r3, #3
 80099e0:	e1c2      	b.n	8009d68 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80099e2:	4b21      	ldr	r3, [pc, #132]	; (8009a68 <HAL_RCC_OscConfig+0x4a4>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d1f0      	bne.n	80099d0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f003 0304 	and.w	r3, r3, #4
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	f000 8086 	beq.w	8009b08 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80099fc:	4b1b      	ldr	r3, [pc, #108]	; (8009a6c <HAL_RCC_OscConfig+0x4a8>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a1a      	ldr	r2, [pc, #104]	; (8009a6c <HAL_RCC_OscConfig+0x4a8>)
 8009a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009a08:	f7f9 fed8 	bl	80037bc <HAL_GetTick>
 8009a0c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009a0e:	e008      	b.n	8009a22 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a10:	f7f9 fed4 	bl	80037bc <HAL_GetTick>
 8009a14:	4602      	mov	r2, r0
 8009a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a18:	1ad3      	subs	r3, r2, r3
 8009a1a:	2b64      	cmp	r3, #100	; 0x64
 8009a1c:	d901      	bls.n	8009a22 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009a1e:	2303      	movs	r3, #3
 8009a20:	e1a2      	b.n	8009d68 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009a22:	4b12      	ldr	r3, [pc, #72]	; (8009a6c <HAL_RCC_OscConfig+0x4a8>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d0f0      	beq.n	8009a10 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	689b      	ldr	r3, [r3, #8]
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d106      	bne.n	8009a44 <HAL_RCC_OscConfig+0x480>
 8009a36:	4b0c      	ldr	r3, [pc, #48]	; (8009a68 <HAL_RCC_OscConfig+0x4a4>)
 8009a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a3a:	4a0b      	ldr	r2, [pc, #44]	; (8009a68 <HAL_RCC_OscConfig+0x4a4>)
 8009a3c:	f043 0301 	orr.w	r3, r3, #1
 8009a40:	6713      	str	r3, [r2, #112]	; 0x70
 8009a42:	e032      	b.n	8009aaa <HAL_RCC_OscConfig+0x4e6>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d111      	bne.n	8009a70 <HAL_RCC_OscConfig+0x4ac>
 8009a4c:	4b06      	ldr	r3, [pc, #24]	; (8009a68 <HAL_RCC_OscConfig+0x4a4>)
 8009a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a50:	4a05      	ldr	r2, [pc, #20]	; (8009a68 <HAL_RCC_OscConfig+0x4a4>)
 8009a52:	f023 0301 	bic.w	r3, r3, #1
 8009a56:	6713      	str	r3, [r2, #112]	; 0x70
 8009a58:	4b03      	ldr	r3, [pc, #12]	; (8009a68 <HAL_RCC_OscConfig+0x4a4>)
 8009a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a5c:	4a02      	ldr	r2, [pc, #8]	; (8009a68 <HAL_RCC_OscConfig+0x4a4>)
 8009a5e:	f023 0304 	bic.w	r3, r3, #4
 8009a62:	6713      	str	r3, [r2, #112]	; 0x70
 8009a64:	e021      	b.n	8009aaa <HAL_RCC_OscConfig+0x4e6>
 8009a66:	bf00      	nop
 8009a68:	58024400 	.word	0x58024400
 8009a6c:	58024800 	.word	0x58024800
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	689b      	ldr	r3, [r3, #8]
 8009a74:	2b05      	cmp	r3, #5
 8009a76:	d10c      	bne.n	8009a92 <HAL_RCC_OscConfig+0x4ce>
 8009a78:	4b83      	ldr	r3, [pc, #524]	; (8009c88 <HAL_RCC_OscConfig+0x6c4>)
 8009a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a7c:	4a82      	ldr	r2, [pc, #520]	; (8009c88 <HAL_RCC_OscConfig+0x6c4>)
 8009a7e:	f043 0304 	orr.w	r3, r3, #4
 8009a82:	6713      	str	r3, [r2, #112]	; 0x70
 8009a84:	4b80      	ldr	r3, [pc, #512]	; (8009c88 <HAL_RCC_OscConfig+0x6c4>)
 8009a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a88:	4a7f      	ldr	r2, [pc, #508]	; (8009c88 <HAL_RCC_OscConfig+0x6c4>)
 8009a8a:	f043 0301 	orr.w	r3, r3, #1
 8009a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8009a90:	e00b      	b.n	8009aaa <HAL_RCC_OscConfig+0x4e6>
 8009a92:	4b7d      	ldr	r3, [pc, #500]	; (8009c88 <HAL_RCC_OscConfig+0x6c4>)
 8009a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a96:	4a7c      	ldr	r2, [pc, #496]	; (8009c88 <HAL_RCC_OscConfig+0x6c4>)
 8009a98:	f023 0301 	bic.w	r3, r3, #1
 8009a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8009a9e:	4b7a      	ldr	r3, [pc, #488]	; (8009c88 <HAL_RCC_OscConfig+0x6c4>)
 8009aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aa2:	4a79      	ldr	r2, [pc, #484]	; (8009c88 <HAL_RCC_OscConfig+0x6c4>)
 8009aa4:	f023 0304 	bic.w	r3, r3, #4
 8009aa8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	689b      	ldr	r3, [r3, #8]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d015      	beq.n	8009ade <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ab2:	f7f9 fe83 	bl	80037bc <HAL_GetTick>
 8009ab6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ab8:	e00a      	b.n	8009ad0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009aba:	f7f9 fe7f 	bl	80037bc <HAL_GetTick>
 8009abe:	4602      	mov	r2, r0
 8009ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac2:	1ad3      	subs	r3, r2, r3
 8009ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d901      	bls.n	8009ad0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009acc:	2303      	movs	r3, #3
 8009ace:	e14b      	b.n	8009d68 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ad0:	4b6d      	ldr	r3, [pc, #436]	; (8009c88 <HAL_RCC_OscConfig+0x6c4>)
 8009ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ad4:	f003 0302 	and.w	r3, r3, #2
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d0ee      	beq.n	8009aba <HAL_RCC_OscConfig+0x4f6>
 8009adc:	e014      	b.n	8009b08 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ade:	f7f9 fe6d 	bl	80037bc <HAL_GetTick>
 8009ae2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009ae4:	e00a      	b.n	8009afc <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ae6:	f7f9 fe69 	bl	80037bc <HAL_GetTick>
 8009aea:	4602      	mov	r2, r0
 8009aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aee:	1ad3      	subs	r3, r2, r3
 8009af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d901      	bls.n	8009afc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009af8:	2303      	movs	r3, #3
 8009afa:	e135      	b.n	8009d68 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009afc:	4b62      	ldr	r3, [pc, #392]	; (8009c88 <HAL_RCC_OscConfig+0x6c4>)
 8009afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b00:	f003 0302 	and.w	r3, r3, #2
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d1ee      	bne.n	8009ae6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	f000 812a 	beq.w	8009d66 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009b12:	4b5d      	ldr	r3, [pc, #372]	; (8009c88 <HAL_RCC_OscConfig+0x6c4>)
 8009b14:	691b      	ldr	r3, [r3, #16]
 8009b16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b1a:	2b18      	cmp	r3, #24
 8009b1c:	f000 80ba 	beq.w	8009c94 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b24:	2b02      	cmp	r3, #2
 8009b26:	f040 8095 	bne.w	8009c54 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b2a:	4b57      	ldr	r3, [pc, #348]	; (8009c88 <HAL_RCC_OscConfig+0x6c4>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4a56      	ldr	r2, [pc, #344]	; (8009c88 <HAL_RCC_OscConfig+0x6c4>)
 8009b30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b36:	f7f9 fe41 	bl	80037bc <HAL_GetTick>
 8009b3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009b3c:	e008      	b.n	8009b50 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b3e:	f7f9 fe3d 	bl	80037bc <HAL_GetTick>
 8009b42:	4602      	mov	r2, r0
 8009b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b46:	1ad3      	subs	r3, r2, r3
 8009b48:	2b02      	cmp	r3, #2
 8009b4a:	d901      	bls.n	8009b50 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009b4c:	2303      	movs	r3, #3
 8009b4e:	e10b      	b.n	8009d68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009b50:	4b4d      	ldr	r3, [pc, #308]	; (8009c88 <HAL_RCC_OscConfig+0x6c4>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d1f0      	bne.n	8009b3e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009b5c:	4b4a      	ldr	r3, [pc, #296]	; (8009c88 <HAL_RCC_OscConfig+0x6c4>)
 8009b5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009b60:	4b4a      	ldr	r3, [pc, #296]	; (8009c8c <HAL_RCC_OscConfig+0x6c8>)
 8009b62:	4013      	ands	r3, r2
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009b68:	687a      	ldr	r2, [r7, #4]
 8009b6a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009b6c:	0112      	lsls	r2, r2, #4
 8009b6e:	430a      	orrs	r2, r1
 8009b70:	4945      	ldr	r1, [pc, #276]	; (8009c88 <HAL_RCC_OscConfig+0x6c4>)
 8009b72:	4313      	orrs	r3, r2
 8009b74:	628b      	str	r3, [r1, #40]	; 0x28
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b7a:	3b01      	subs	r3, #1
 8009b7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b84:	3b01      	subs	r3, #1
 8009b86:	025b      	lsls	r3, r3, #9
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	431a      	orrs	r2, r3
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b90:	3b01      	subs	r3, #1
 8009b92:	041b      	lsls	r3, r3, #16
 8009b94:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009b98:	431a      	orrs	r2, r3
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b9e:	3b01      	subs	r3, #1
 8009ba0:	061b      	lsls	r3, r3, #24
 8009ba2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009ba6:	4938      	ldr	r1, [pc, #224]	; (8009c88 <HAL_RCC_OscConfig+0x6c4>)
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009bac:	4b36      	ldr	r3, [pc, #216]	; (8009c88 <HAL_RCC_OscConfig+0x6c4>)
 8009bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb0:	4a35      	ldr	r2, [pc, #212]	; (8009c88 <HAL_RCC_OscConfig+0x6c4>)
 8009bb2:	f023 0301 	bic.w	r3, r3, #1
 8009bb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009bb8:	4b33      	ldr	r3, [pc, #204]	; (8009c88 <HAL_RCC_OscConfig+0x6c4>)
 8009bba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bbc:	4b34      	ldr	r3, [pc, #208]	; (8009c90 <HAL_RCC_OscConfig+0x6cc>)
 8009bbe:	4013      	ands	r3, r2
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009bc4:	00d2      	lsls	r2, r2, #3
 8009bc6:	4930      	ldr	r1, [pc, #192]	; (8009c88 <HAL_RCC_OscConfig+0x6c4>)
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009bcc:	4b2e      	ldr	r3, [pc, #184]	; (8009c88 <HAL_RCC_OscConfig+0x6c4>)
 8009bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd0:	f023 020c 	bic.w	r2, r3, #12
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bd8:	492b      	ldr	r1, [pc, #172]	; (8009c88 <HAL_RCC_OscConfig+0x6c4>)
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009bde:	4b2a      	ldr	r3, [pc, #168]	; (8009c88 <HAL_RCC_OscConfig+0x6c4>)
 8009be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be2:	f023 0202 	bic.w	r2, r3, #2
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bea:	4927      	ldr	r1, [pc, #156]	; (8009c88 <HAL_RCC_OscConfig+0x6c4>)
 8009bec:	4313      	orrs	r3, r2
 8009bee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009bf0:	4b25      	ldr	r3, [pc, #148]	; (8009c88 <HAL_RCC_OscConfig+0x6c4>)
 8009bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf4:	4a24      	ldr	r2, [pc, #144]	; (8009c88 <HAL_RCC_OscConfig+0x6c4>)
 8009bf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009bfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bfc:	4b22      	ldr	r3, [pc, #136]	; (8009c88 <HAL_RCC_OscConfig+0x6c4>)
 8009bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c00:	4a21      	ldr	r2, [pc, #132]	; (8009c88 <HAL_RCC_OscConfig+0x6c4>)
 8009c02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009c08:	4b1f      	ldr	r3, [pc, #124]	; (8009c88 <HAL_RCC_OscConfig+0x6c4>)
 8009c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c0c:	4a1e      	ldr	r2, [pc, #120]	; (8009c88 <HAL_RCC_OscConfig+0x6c4>)
 8009c0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009c12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009c14:	4b1c      	ldr	r3, [pc, #112]	; (8009c88 <HAL_RCC_OscConfig+0x6c4>)
 8009c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c18:	4a1b      	ldr	r2, [pc, #108]	; (8009c88 <HAL_RCC_OscConfig+0x6c4>)
 8009c1a:	f043 0301 	orr.w	r3, r3, #1
 8009c1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009c20:	4b19      	ldr	r3, [pc, #100]	; (8009c88 <HAL_RCC_OscConfig+0x6c4>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a18      	ldr	r2, [pc, #96]	; (8009c88 <HAL_RCC_OscConfig+0x6c4>)
 8009c26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c2c:	f7f9 fdc6 	bl	80037bc <HAL_GetTick>
 8009c30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009c32:	e008      	b.n	8009c46 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c34:	f7f9 fdc2 	bl	80037bc <HAL_GetTick>
 8009c38:	4602      	mov	r2, r0
 8009c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3c:	1ad3      	subs	r3, r2, r3
 8009c3e:	2b02      	cmp	r3, #2
 8009c40:	d901      	bls.n	8009c46 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009c42:	2303      	movs	r3, #3
 8009c44:	e090      	b.n	8009d68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009c46:	4b10      	ldr	r3, [pc, #64]	; (8009c88 <HAL_RCC_OscConfig+0x6c4>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d0f0      	beq.n	8009c34 <HAL_RCC_OscConfig+0x670>
 8009c52:	e088      	b.n	8009d66 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c54:	4b0c      	ldr	r3, [pc, #48]	; (8009c88 <HAL_RCC_OscConfig+0x6c4>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4a0b      	ldr	r2, [pc, #44]	; (8009c88 <HAL_RCC_OscConfig+0x6c4>)
 8009c5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009c5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c60:	f7f9 fdac 	bl	80037bc <HAL_GetTick>
 8009c64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009c66:	e008      	b.n	8009c7a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c68:	f7f9 fda8 	bl	80037bc <HAL_GetTick>
 8009c6c:	4602      	mov	r2, r0
 8009c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c70:	1ad3      	subs	r3, r2, r3
 8009c72:	2b02      	cmp	r3, #2
 8009c74:	d901      	bls.n	8009c7a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009c76:	2303      	movs	r3, #3
 8009c78:	e076      	b.n	8009d68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009c7a:	4b03      	ldr	r3, [pc, #12]	; (8009c88 <HAL_RCC_OscConfig+0x6c4>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d1f0      	bne.n	8009c68 <HAL_RCC_OscConfig+0x6a4>
 8009c86:	e06e      	b.n	8009d66 <HAL_RCC_OscConfig+0x7a2>
 8009c88:	58024400 	.word	0x58024400
 8009c8c:	fffffc0c 	.word	0xfffffc0c
 8009c90:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009c94:	4b36      	ldr	r3, [pc, #216]	; (8009d70 <HAL_RCC_OscConfig+0x7ac>)
 8009c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c98:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009c9a:	4b35      	ldr	r3, [pc, #212]	; (8009d70 <HAL_RCC_OscConfig+0x7ac>)
 8009c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c9e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d031      	beq.n	8009d0c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	f003 0203 	and.w	r2, r3, #3
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d12a      	bne.n	8009d0c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	091b      	lsrs	r3, r3, #4
 8009cba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d122      	bne.n	8009d0c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cd0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d11a      	bne.n	8009d0c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	0a5b      	lsrs	r3, r3, #9
 8009cda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ce2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d111      	bne.n	8009d0c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	0c1b      	lsrs	r3, r3, #16
 8009cec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cf4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d108      	bne.n	8009d0c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	0e1b      	lsrs	r3, r3, #24
 8009cfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d06:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d001      	beq.n	8009d10 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	e02b      	b.n	8009d68 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009d10:	4b17      	ldr	r3, [pc, #92]	; (8009d70 <HAL_RCC_OscConfig+0x7ac>)
 8009d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d14:	08db      	lsrs	r3, r3, #3
 8009d16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d1a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d20:	693a      	ldr	r2, [r7, #16]
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d01f      	beq.n	8009d66 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009d26:	4b12      	ldr	r3, [pc, #72]	; (8009d70 <HAL_RCC_OscConfig+0x7ac>)
 8009d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d2a:	4a11      	ldr	r2, [pc, #68]	; (8009d70 <HAL_RCC_OscConfig+0x7ac>)
 8009d2c:	f023 0301 	bic.w	r3, r3, #1
 8009d30:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009d32:	f7f9 fd43 	bl	80037bc <HAL_GetTick>
 8009d36:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009d38:	bf00      	nop
 8009d3a:	f7f9 fd3f 	bl	80037bc <HAL_GetTick>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d0f9      	beq.n	8009d3a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009d46:	4b0a      	ldr	r3, [pc, #40]	; (8009d70 <HAL_RCC_OscConfig+0x7ac>)
 8009d48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d4a:	4b0a      	ldr	r3, [pc, #40]	; (8009d74 <HAL_RCC_OscConfig+0x7b0>)
 8009d4c:	4013      	ands	r3, r2
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009d52:	00d2      	lsls	r2, r2, #3
 8009d54:	4906      	ldr	r1, [pc, #24]	; (8009d70 <HAL_RCC_OscConfig+0x7ac>)
 8009d56:	4313      	orrs	r3, r2
 8009d58:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009d5a:	4b05      	ldr	r3, [pc, #20]	; (8009d70 <HAL_RCC_OscConfig+0x7ac>)
 8009d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d5e:	4a04      	ldr	r2, [pc, #16]	; (8009d70 <HAL_RCC_OscConfig+0x7ac>)
 8009d60:	f043 0301 	orr.w	r3, r3, #1
 8009d64:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009d66:	2300      	movs	r3, #0
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3730      	adds	r7, #48	; 0x30
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	58024400 	.word	0x58024400
 8009d74:	ffff0007 	.word	0xffff0007

08009d78 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b086      	sub	sp, #24
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d101      	bne.n	8009d8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	e19c      	b.n	800a0c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009d8c:	4b8a      	ldr	r3, [pc, #552]	; (8009fb8 <HAL_RCC_ClockConfig+0x240>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f003 030f 	and.w	r3, r3, #15
 8009d94:	683a      	ldr	r2, [r7, #0]
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d910      	bls.n	8009dbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d9a:	4b87      	ldr	r3, [pc, #540]	; (8009fb8 <HAL_RCC_ClockConfig+0x240>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f023 020f 	bic.w	r2, r3, #15
 8009da2:	4985      	ldr	r1, [pc, #532]	; (8009fb8 <HAL_RCC_ClockConfig+0x240>)
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	4313      	orrs	r3, r2
 8009da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009daa:	4b83      	ldr	r3, [pc, #524]	; (8009fb8 <HAL_RCC_ClockConfig+0x240>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f003 030f 	and.w	r3, r3, #15
 8009db2:	683a      	ldr	r2, [r7, #0]
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d001      	beq.n	8009dbc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009db8:	2301      	movs	r3, #1
 8009dba:	e184      	b.n	800a0c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f003 0304 	and.w	r3, r3, #4
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d010      	beq.n	8009dea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	691a      	ldr	r2, [r3, #16]
 8009dcc:	4b7b      	ldr	r3, [pc, #492]	; (8009fbc <HAL_RCC_ClockConfig+0x244>)
 8009dce:	699b      	ldr	r3, [r3, #24]
 8009dd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d908      	bls.n	8009dea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009dd8:	4b78      	ldr	r3, [pc, #480]	; (8009fbc <HAL_RCC_ClockConfig+0x244>)
 8009dda:	699b      	ldr	r3, [r3, #24]
 8009ddc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	691b      	ldr	r3, [r3, #16]
 8009de4:	4975      	ldr	r1, [pc, #468]	; (8009fbc <HAL_RCC_ClockConfig+0x244>)
 8009de6:	4313      	orrs	r3, r2
 8009de8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f003 0308 	and.w	r3, r3, #8
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d010      	beq.n	8009e18 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	695a      	ldr	r2, [r3, #20]
 8009dfa:	4b70      	ldr	r3, [pc, #448]	; (8009fbc <HAL_RCC_ClockConfig+0x244>)
 8009dfc:	69db      	ldr	r3, [r3, #28]
 8009dfe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009e02:	429a      	cmp	r2, r3
 8009e04:	d908      	bls.n	8009e18 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009e06:	4b6d      	ldr	r3, [pc, #436]	; (8009fbc <HAL_RCC_ClockConfig+0x244>)
 8009e08:	69db      	ldr	r3, [r3, #28]
 8009e0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	695b      	ldr	r3, [r3, #20]
 8009e12:	496a      	ldr	r1, [pc, #424]	; (8009fbc <HAL_RCC_ClockConfig+0x244>)
 8009e14:	4313      	orrs	r3, r2
 8009e16:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f003 0310 	and.w	r3, r3, #16
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d010      	beq.n	8009e46 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	699a      	ldr	r2, [r3, #24]
 8009e28:	4b64      	ldr	r3, [pc, #400]	; (8009fbc <HAL_RCC_ClockConfig+0x244>)
 8009e2a:	69db      	ldr	r3, [r3, #28]
 8009e2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d908      	bls.n	8009e46 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009e34:	4b61      	ldr	r3, [pc, #388]	; (8009fbc <HAL_RCC_ClockConfig+0x244>)
 8009e36:	69db      	ldr	r3, [r3, #28]
 8009e38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	699b      	ldr	r3, [r3, #24]
 8009e40:	495e      	ldr	r1, [pc, #376]	; (8009fbc <HAL_RCC_ClockConfig+0x244>)
 8009e42:	4313      	orrs	r3, r2
 8009e44:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f003 0320 	and.w	r3, r3, #32
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d010      	beq.n	8009e74 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	69da      	ldr	r2, [r3, #28]
 8009e56:	4b59      	ldr	r3, [pc, #356]	; (8009fbc <HAL_RCC_ClockConfig+0x244>)
 8009e58:	6a1b      	ldr	r3, [r3, #32]
 8009e5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d908      	bls.n	8009e74 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009e62:	4b56      	ldr	r3, [pc, #344]	; (8009fbc <HAL_RCC_ClockConfig+0x244>)
 8009e64:	6a1b      	ldr	r3, [r3, #32]
 8009e66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	69db      	ldr	r3, [r3, #28]
 8009e6e:	4953      	ldr	r1, [pc, #332]	; (8009fbc <HAL_RCC_ClockConfig+0x244>)
 8009e70:	4313      	orrs	r3, r2
 8009e72:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f003 0302 	and.w	r3, r3, #2
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d010      	beq.n	8009ea2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	68da      	ldr	r2, [r3, #12]
 8009e84:	4b4d      	ldr	r3, [pc, #308]	; (8009fbc <HAL_RCC_ClockConfig+0x244>)
 8009e86:	699b      	ldr	r3, [r3, #24]
 8009e88:	f003 030f 	and.w	r3, r3, #15
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d908      	bls.n	8009ea2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009e90:	4b4a      	ldr	r3, [pc, #296]	; (8009fbc <HAL_RCC_ClockConfig+0x244>)
 8009e92:	699b      	ldr	r3, [r3, #24]
 8009e94:	f023 020f 	bic.w	r2, r3, #15
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	4947      	ldr	r1, [pc, #284]	; (8009fbc <HAL_RCC_ClockConfig+0x244>)
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f003 0301 	and.w	r3, r3, #1
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d055      	beq.n	8009f5a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009eae:	4b43      	ldr	r3, [pc, #268]	; (8009fbc <HAL_RCC_ClockConfig+0x244>)
 8009eb0:	699b      	ldr	r3, [r3, #24]
 8009eb2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	689b      	ldr	r3, [r3, #8]
 8009eba:	4940      	ldr	r1, [pc, #256]	; (8009fbc <HAL_RCC_ClockConfig+0x244>)
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	2b02      	cmp	r3, #2
 8009ec6:	d107      	bne.n	8009ed8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009ec8:	4b3c      	ldr	r3, [pc, #240]	; (8009fbc <HAL_RCC_ClockConfig+0x244>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d121      	bne.n	8009f18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	e0f6      	b.n	800a0c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	2b03      	cmp	r3, #3
 8009ede:	d107      	bne.n	8009ef0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009ee0:	4b36      	ldr	r3, [pc, #216]	; (8009fbc <HAL_RCC_ClockConfig+0x244>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d115      	bne.n	8009f18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009eec:	2301      	movs	r3, #1
 8009eee:	e0ea      	b.n	800a0c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	2b01      	cmp	r3, #1
 8009ef6:	d107      	bne.n	8009f08 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009ef8:	4b30      	ldr	r3, [pc, #192]	; (8009fbc <HAL_RCC_ClockConfig+0x244>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d109      	bne.n	8009f18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009f04:	2301      	movs	r3, #1
 8009f06:	e0de      	b.n	800a0c6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f08:	4b2c      	ldr	r3, [pc, #176]	; (8009fbc <HAL_RCC_ClockConfig+0x244>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f003 0304 	and.w	r3, r3, #4
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d101      	bne.n	8009f18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009f14:	2301      	movs	r3, #1
 8009f16:	e0d6      	b.n	800a0c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009f18:	4b28      	ldr	r3, [pc, #160]	; (8009fbc <HAL_RCC_ClockConfig+0x244>)
 8009f1a:	691b      	ldr	r3, [r3, #16]
 8009f1c:	f023 0207 	bic.w	r2, r3, #7
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	4925      	ldr	r1, [pc, #148]	; (8009fbc <HAL_RCC_ClockConfig+0x244>)
 8009f26:	4313      	orrs	r3, r2
 8009f28:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f2a:	f7f9 fc47 	bl	80037bc <HAL_GetTick>
 8009f2e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f30:	e00a      	b.n	8009f48 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f32:	f7f9 fc43 	bl	80037bc <HAL_GetTick>
 8009f36:	4602      	mov	r2, r0
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	1ad3      	subs	r3, r2, r3
 8009f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d901      	bls.n	8009f48 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009f44:	2303      	movs	r3, #3
 8009f46:	e0be      	b.n	800a0c6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f48:	4b1c      	ldr	r3, [pc, #112]	; (8009fbc <HAL_RCC_ClockConfig+0x244>)
 8009f4a:	691b      	ldr	r3, [r3, #16]
 8009f4c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	00db      	lsls	r3, r3, #3
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d1eb      	bne.n	8009f32 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f003 0302 	and.w	r3, r3, #2
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d010      	beq.n	8009f88 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	68da      	ldr	r2, [r3, #12]
 8009f6a:	4b14      	ldr	r3, [pc, #80]	; (8009fbc <HAL_RCC_ClockConfig+0x244>)
 8009f6c:	699b      	ldr	r3, [r3, #24]
 8009f6e:	f003 030f 	and.w	r3, r3, #15
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d208      	bcs.n	8009f88 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009f76:	4b11      	ldr	r3, [pc, #68]	; (8009fbc <HAL_RCC_ClockConfig+0x244>)
 8009f78:	699b      	ldr	r3, [r3, #24]
 8009f7a:	f023 020f 	bic.w	r2, r3, #15
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	68db      	ldr	r3, [r3, #12]
 8009f82:	490e      	ldr	r1, [pc, #56]	; (8009fbc <HAL_RCC_ClockConfig+0x244>)
 8009f84:	4313      	orrs	r3, r2
 8009f86:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009f88:	4b0b      	ldr	r3, [pc, #44]	; (8009fb8 <HAL_RCC_ClockConfig+0x240>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f003 030f 	and.w	r3, r3, #15
 8009f90:	683a      	ldr	r2, [r7, #0]
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d214      	bcs.n	8009fc0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f96:	4b08      	ldr	r3, [pc, #32]	; (8009fb8 <HAL_RCC_ClockConfig+0x240>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f023 020f 	bic.w	r2, r3, #15
 8009f9e:	4906      	ldr	r1, [pc, #24]	; (8009fb8 <HAL_RCC_ClockConfig+0x240>)
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009fa6:	4b04      	ldr	r3, [pc, #16]	; (8009fb8 <HAL_RCC_ClockConfig+0x240>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f003 030f 	and.w	r3, r3, #15
 8009fae:	683a      	ldr	r2, [r7, #0]
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d005      	beq.n	8009fc0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	e086      	b.n	800a0c6 <HAL_RCC_ClockConfig+0x34e>
 8009fb8:	52002000 	.word	0x52002000
 8009fbc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f003 0304 	and.w	r3, r3, #4
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d010      	beq.n	8009fee <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	691a      	ldr	r2, [r3, #16]
 8009fd0:	4b3f      	ldr	r3, [pc, #252]	; (800a0d0 <HAL_RCC_ClockConfig+0x358>)
 8009fd2:	699b      	ldr	r3, [r3, #24]
 8009fd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d208      	bcs.n	8009fee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009fdc:	4b3c      	ldr	r3, [pc, #240]	; (800a0d0 <HAL_RCC_ClockConfig+0x358>)
 8009fde:	699b      	ldr	r3, [r3, #24]
 8009fe0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	691b      	ldr	r3, [r3, #16]
 8009fe8:	4939      	ldr	r1, [pc, #228]	; (800a0d0 <HAL_RCC_ClockConfig+0x358>)
 8009fea:	4313      	orrs	r3, r2
 8009fec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f003 0308 	and.w	r3, r3, #8
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d010      	beq.n	800a01c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	695a      	ldr	r2, [r3, #20]
 8009ffe:	4b34      	ldr	r3, [pc, #208]	; (800a0d0 <HAL_RCC_ClockConfig+0x358>)
 800a000:	69db      	ldr	r3, [r3, #28]
 800a002:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a006:	429a      	cmp	r2, r3
 800a008:	d208      	bcs.n	800a01c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a00a:	4b31      	ldr	r3, [pc, #196]	; (800a0d0 <HAL_RCC_ClockConfig+0x358>)
 800a00c:	69db      	ldr	r3, [r3, #28]
 800a00e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	695b      	ldr	r3, [r3, #20]
 800a016:	492e      	ldr	r1, [pc, #184]	; (800a0d0 <HAL_RCC_ClockConfig+0x358>)
 800a018:	4313      	orrs	r3, r2
 800a01a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f003 0310 	and.w	r3, r3, #16
 800a024:	2b00      	cmp	r3, #0
 800a026:	d010      	beq.n	800a04a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	699a      	ldr	r2, [r3, #24]
 800a02c:	4b28      	ldr	r3, [pc, #160]	; (800a0d0 <HAL_RCC_ClockConfig+0x358>)
 800a02e:	69db      	ldr	r3, [r3, #28]
 800a030:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a034:	429a      	cmp	r2, r3
 800a036:	d208      	bcs.n	800a04a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a038:	4b25      	ldr	r3, [pc, #148]	; (800a0d0 <HAL_RCC_ClockConfig+0x358>)
 800a03a:	69db      	ldr	r3, [r3, #28]
 800a03c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	699b      	ldr	r3, [r3, #24]
 800a044:	4922      	ldr	r1, [pc, #136]	; (800a0d0 <HAL_RCC_ClockConfig+0x358>)
 800a046:	4313      	orrs	r3, r2
 800a048:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f003 0320 	and.w	r3, r3, #32
 800a052:	2b00      	cmp	r3, #0
 800a054:	d010      	beq.n	800a078 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	69da      	ldr	r2, [r3, #28]
 800a05a:	4b1d      	ldr	r3, [pc, #116]	; (800a0d0 <HAL_RCC_ClockConfig+0x358>)
 800a05c:	6a1b      	ldr	r3, [r3, #32]
 800a05e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a062:	429a      	cmp	r2, r3
 800a064:	d208      	bcs.n	800a078 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a066:	4b1a      	ldr	r3, [pc, #104]	; (800a0d0 <HAL_RCC_ClockConfig+0x358>)
 800a068:	6a1b      	ldr	r3, [r3, #32]
 800a06a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	69db      	ldr	r3, [r3, #28]
 800a072:	4917      	ldr	r1, [pc, #92]	; (800a0d0 <HAL_RCC_ClockConfig+0x358>)
 800a074:	4313      	orrs	r3, r2
 800a076:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a078:	f000 f89e 	bl	800a1b8 <HAL_RCC_GetSysClockFreq>
 800a07c:	4602      	mov	r2, r0
 800a07e:	4b14      	ldr	r3, [pc, #80]	; (800a0d0 <HAL_RCC_ClockConfig+0x358>)
 800a080:	699b      	ldr	r3, [r3, #24]
 800a082:	0a1b      	lsrs	r3, r3, #8
 800a084:	f003 030f 	and.w	r3, r3, #15
 800a088:	4912      	ldr	r1, [pc, #72]	; (800a0d4 <HAL_RCC_ClockConfig+0x35c>)
 800a08a:	5ccb      	ldrb	r3, [r1, r3]
 800a08c:	f003 031f 	and.w	r3, r3, #31
 800a090:	fa22 f303 	lsr.w	r3, r2, r3
 800a094:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a096:	4b0e      	ldr	r3, [pc, #56]	; (800a0d0 <HAL_RCC_ClockConfig+0x358>)
 800a098:	699b      	ldr	r3, [r3, #24]
 800a09a:	f003 030f 	and.w	r3, r3, #15
 800a09e:	4a0d      	ldr	r2, [pc, #52]	; (800a0d4 <HAL_RCC_ClockConfig+0x35c>)
 800a0a0:	5cd3      	ldrb	r3, [r2, r3]
 800a0a2:	f003 031f 	and.w	r3, r3, #31
 800a0a6:	693a      	ldr	r2, [r7, #16]
 800a0a8:	fa22 f303 	lsr.w	r3, r2, r3
 800a0ac:	4a0a      	ldr	r2, [pc, #40]	; (800a0d8 <HAL_RCC_ClockConfig+0x360>)
 800a0ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a0b0:	4a0a      	ldr	r2, [pc, #40]	; (800a0dc <HAL_RCC_ClockConfig+0x364>)
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a0b6:	4b0a      	ldr	r3, [pc, #40]	; (800a0e0 <HAL_RCC_ClockConfig+0x368>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7f9 fb34 	bl	8003728 <HAL_InitTick>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a0c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3718      	adds	r7, #24
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}
 800a0ce:	bf00      	nop
 800a0d0:	58024400 	.word	0x58024400
 800a0d4:	080181b8 	.word	0x080181b8
 800a0d8:	24000004 	.word	0x24000004
 800a0dc:	24000000 	.word	0x24000000
 800a0e0:	24000008 	.word	0x24000008

0800a0e4 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b08c      	sub	sp, #48	; 0x30
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	60b9      	str	r1, [r7, #8]
 800a0ee:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d12a      	bne.n	800a14c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800a0f6:	4b2d      	ldr	r3, [pc, #180]	; (800a1ac <HAL_RCC_MCOConfig+0xc8>)
 800a0f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a0fc:	4a2b      	ldr	r2, [pc, #172]	; (800a1ac <HAL_RCC_MCOConfig+0xc8>)
 800a0fe:	f043 0301 	orr.w	r3, r3, #1
 800a102:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a106:	4b29      	ldr	r3, [pc, #164]	; (800a1ac <HAL_RCC_MCOConfig+0xc8>)
 800a108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a10c:	f003 0301 	and.w	r3, r3, #1
 800a110:	61bb      	str	r3, [r7, #24]
 800a112:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a114:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a11a:	2302      	movs	r3, #2
 800a11c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a11e:	2303      	movs	r3, #3
 800a120:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a122:	2300      	movs	r3, #0
 800a124:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a126:	2300      	movs	r3, #0
 800a128:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a12a:	f107 031c 	add.w	r3, r7, #28
 800a12e:	4619      	mov	r1, r3
 800a130:	481f      	ldr	r0, [pc, #124]	; (800a1b0 <HAL_RCC_MCOConfig+0xcc>)
 800a132:	f7fd fc43 	bl	80079bc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a136:	4b1d      	ldr	r3, [pc, #116]	; (800a1ac <HAL_RCC_MCOConfig+0xc8>)
 800a138:	691b      	ldr	r3, [r3, #16]
 800a13a:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800a13e:	68b9      	ldr	r1, [r7, #8]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	430b      	orrs	r3, r1
 800a144:	4919      	ldr	r1, [pc, #100]	; (800a1ac <HAL_RCC_MCOConfig+0xc8>)
 800a146:	4313      	orrs	r3, r2
 800a148:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800a14a:	e02a      	b.n	800a1a2 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800a14c:	4b17      	ldr	r3, [pc, #92]	; (800a1ac <HAL_RCC_MCOConfig+0xc8>)
 800a14e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a152:	4a16      	ldr	r2, [pc, #88]	; (800a1ac <HAL_RCC_MCOConfig+0xc8>)
 800a154:	f043 0304 	orr.w	r3, r3, #4
 800a158:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a15c:	4b13      	ldr	r3, [pc, #76]	; (800a1ac <HAL_RCC_MCOConfig+0xc8>)
 800a15e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a162:	f003 0304 	and.w	r3, r3, #4
 800a166:	617b      	str	r3, [r7, #20]
 800a168:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a16a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a16e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a170:	2302      	movs	r3, #2
 800a172:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a174:	2303      	movs	r3, #3
 800a176:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a178:	2300      	movs	r3, #0
 800a17a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a17c:	2300      	movs	r3, #0
 800a17e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a180:	f107 031c 	add.w	r3, r7, #28
 800a184:	4619      	mov	r1, r3
 800a186:	480b      	ldr	r0, [pc, #44]	; (800a1b4 <HAL_RCC_MCOConfig+0xd0>)
 800a188:	f7fd fc18 	bl	80079bc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a18c:	4b07      	ldr	r3, [pc, #28]	; (800a1ac <HAL_RCC_MCOConfig+0xc8>)
 800a18e:	691b      	ldr	r3, [r3, #16]
 800a190:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	01d9      	lsls	r1, r3, #7
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	430b      	orrs	r3, r1
 800a19c:	4903      	ldr	r1, [pc, #12]	; (800a1ac <HAL_RCC_MCOConfig+0xc8>)
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	610b      	str	r3, [r1, #16]
}
 800a1a2:	bf00      	nop
 800a1a4:	3730      	adds	r7, #48	; 0x30
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}
 800a1aa:	bf00      	nop
 800a1ac:	58024400 	.word	0x58024400
 800a1b0:	58020000 	.word	0x58020000
 800a1b4:	58020800 	.word	0x58020800

0800a1b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b089      	sub	sp, #36	; 0x24
 800a1bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a1be:	4bb3      	ldr	r3, [pc, #716]	; (800a48c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1c0:	691b      	ldr	r3, [r3, #16]
 800a1c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a1c6:	2b18      	cmp	r3, #24
 800a1c8:	f200 8155 	bhi.w	800a476 <HAL_RCC_GetSysClockFreq+0x2be>
 800a1cc:	a201      	add	r2, pc, #4	; (adr r2, 800a1d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a1ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1d2:	bf00      	nop
 800a1d4:	0800a239 	.word	0x0800a239
 800a1d8:	0800a477 	.word	0x0800a477
 800a1dc:	0800a477 	.word	0x0800a477
 800a1e0:	0800a477 	.word	0x0800a477
 800a1e4:	0800a477 	.word	0x0800a477
 800a1e8:	0800a477 	.word	0x0800a477
 800a1ec:	0800a477 	.word	0x0800a477
 800a1f0:	0800a477 	.word	0x0800a477
 800a1f4:	0800a25f 	.word	0x0800a25f
 800a1f8:	0800a477 	.word	0x0800a477
 800a1fc:	0800a477 	.word	0x0800a477
 800a200:	0800a477 	.word	0x0800a477
 800a204:	0800a477 	.word	0x0800a477
 800a208:	0800a477 	.word	0x0800a477
 800a20c:	0800a477 	.word	0x0800a477
 800a210:	0800a477 	.word	0x0800a477
 800a214:	0800a265 	.word	0x0800a265
 800a218:	0800a477 	.word	0x0800a477
 800a21c:	0800a477 	.word	0x0800a477
 800a220:	0800a477 	.word	0x0800a477
 800a224:	0800a477 	.word	0x0800a477
 800a228:	0800a477 	.word	0x0800a477
 800a22c:	0800a477 	.word	0x0800a477
 800a230:	0800a477 	.word	0x0800a477
 800a234:	0800a26b 	.word	0x0800a26b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a238:	4b94      	ldr	r3, [pc, #592]	; (800a48c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f003 0320 	and.w	r3, r3, #32
 800a240:	2b00      	cmp	r3, #0
 800a242:	d009      	beq.n	800a258 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a244:	4b91      	ldr	r3, [pc, #580]	; (800a48c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	08db      	lsrs	r3, r3, #3
 800a24a:	f003 0303 	and.w	r3, r3, #3
 800a24e:	4a90      	ldr	r2, [pc, #576]	; (800a490 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a250:	fa22 f303 	lsr.w	r3, r2, r3
 800a254:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a256:	e111      	b.n	800a47c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a258:	4b8d      	ldr	r3, [pc, #564]	; (800a490 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a25a:	61bb      	str	r3, [r7, #24]
      break;
 800a25c:	e10e      	b.n	800a47c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a25e:	4b8d      	ldr	r3, [pc, #564]	; (800a494 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a260:	61bb      	str	r3, [r7, #24]
      break;
 800a262:	e10b      	b.n	800a47c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a264:	4b8c      	ldr	r3, [pc, #560]	; (800a498 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a266:	61bb      	str	r3, [r7, #24]
      break;
 800a268:	e108      	b.n	800a47c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a26a:	4b88      	ldr	r3, [pc, #544]	; (800a48c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a26c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a26e:	f003 0303 	and.w	r3, r3, #3
 800a272:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a274:	4b85      	ldr	r3, [pc, #532]	; (800a48c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a278:	091b      	lsrs	r3, r3, #4
 800a27a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a27e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a280:	4b82      	ldr	r3, [pc, #520]	; (800a48c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a284:	f003 0301 	and.w	r3, r3, #1
 800a288:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a28a:	4b80      	ldr	r3, [pc, #512]	; (800a48c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a28c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a28e:	08db      	lsrs	r3, r3, #3
 800a290:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a294:	68fa      	ldr	r2, [r7, #12]
 800a296:	fb02 f303 	mul.w	r3, r2, r3
 800a29a:	ee07 3a90 	vmov	s15, r3
 800a29e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2a2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	f000 80e1 	beq.w	800a470 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	2b02      	cmp	r3, #2
 800a2b2:	f000 8083 	beq.w	800a3bc <HAL_RCC_GetSysClockFreq+0x204>
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	2b02      	cmp	r3, #2
 800a2ba:	f200 80a1 	bhi.w	800a400 <HAL_RCC_GetSysClockFreq+0x248>
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d003      	beq.n	800a2cc <HAL_RCC_GetSysClockFreq+0x114>
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d056      	beq.n	800a378 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a2ca:	e099      	b.n	800a400 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2cc:	4b6f      	ldr	r3, [pc, #444]	; (800a48c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f003 0320 	and.w	r3, r3, #32
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d02d      	beq.n	800a334 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a2d8:	4b6c      	ldr	r3, [pc, #432]	; (800a48c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	08db      	lsrs	r3, r3, #3
 800a2de:	f003 0303 	and.w	r3, r3, #3
 800a2e2:	4a6b      	ldr	r2, [pc, #428]	; (800a490 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a2e4:	fa22 f303 	lsr.w	r3, r2, r3
 800a2e8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	ee07 3a90 	vmov	s15, r3
 800a2f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	ee07 3a90 	vmov	s15, r3
 800a2fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a302:	4b62      	ldr	r3, [pc, #392]	; (800a48c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a30a:	ee07 3a90 	vmov	s15, r3
 800a30e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a312:	ed97 6a02 	vldr	s12, [r7, #8]
 800a316:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a49c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a31a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a31e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a322:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a32a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a32e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a332:	e087      	b.n	800a444 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	ee07 3a90 	vmov	s15, r3
 800a33a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a33e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a4a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a346:	4b51      	ldr	r3, [pc, #324]	; (800a48c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a34a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a34e:	ee07 3a90 	vmov	s15, r3
 800a352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a356:	ed97 6a02 	vldr	s12, [r7, #8]
 800a35a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a49c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a35e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a366:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a36a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a36e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a372:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a376:	e065      	b.n	800a444 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	ee07 3a90 	vmov	s15, r3
 800a37e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a382:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a4a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a38a:	4b40      	ldr	r3, [pc, #256]	; (800a48c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a38c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a38e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a392:	ee07 3a90 	vmov	s15, r3
 800a396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a39a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a39e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a49c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a3a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a3ba:	e043      	b.n	800a444 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	ee07 3a90 	vmov	s15, r3
 800a3c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3c6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a4a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a3ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3ce:	4b2f      	ldr	r3, [pc, #188]	; (800a48c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3d6:	ee07 3a90 	vmov	s15, r3
 800a3da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3de:	ed97 6a02 	vldr	s12, [r7, #8]
 800a3e2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a49c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a3e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a3fe:	e021      	b.n	800a444 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	ee07 3a90 	vmov	s15, r3
 800a406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a40a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a4a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a40e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a412:	4b1e      	ldr	r3, [pc, #120]	; (800a48c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a41a:	ee07 3a90 	vmov	s15, r3
 800a41e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a422:	ed97 6a02 	vldr	s12, [r7, #8]
 800a426:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a49c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a42a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a42e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a432:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a43a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a43e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a442:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a444:	4b11      	ldr	r3, [pc, #68]	; (800a48c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a448:	0a5b      	lsrs	r3, r3, #9
 800a44a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a44e:	3301      	adds	r3, #1
 800a450:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	ee07 3a90 	vmov	s15, r3
 800a458:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a45c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a460:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a464:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a468:	ee17 3a90 	vmov	r3, s15
 800a46c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a46e:	e005      	b.n	800a47c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a470:	2300      	movs	r3, #0
 800a472:	61bb      	str	r3, [r7, #24]
      break;
 800a474:	e002      	b.n	800a47c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a476:	4b07      	ldr	r3, [pc, #28]	; (800a494 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a478:	61bb      	str	r3, [r7, #24]
      break;
 800a47a:	bf00      	nop
  }

  return sysclockfreq;
 800a47c:	69bb      	ldr	r3, [r7, #24]
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3724      	adds	r7, #36	; 0x24
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr
 800a48a:	bf00      	nop
 800a48c:	58024400 	.word	0x58024400
 800a490:	03d09000 	.word	0x03d09000
 800a494:	003d0900 	.word	0x003d0900
 800a498:	02faf080 	.word	0x02faf080
 800a49c:	46000000 	.word	0x46000000
 800a4a0:	4c742400 	.word	0x4c742400
 800a4a4:	4a742400 	.word	0x4a742400
 800a4a8:	4c3ebc20 	.word	0x4c3ebc20

0800a4ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b082      	sub	sp, #8
 800a4b0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a4b2:	f7ff fe81 	bl	800a1b8 <HAL_RCC_GetSysClockFreq>
 800a4b6:	4602      	mov	r2, r0
 800a4b8:	4b10      	ldr	r3, [pc, #64]	; (800a4fc <HAL_RCC_GetHCLKFreq+0x50>)
 800a4ba:	699b      	ldr	r3, [r3, #24]
 800a4bc:	0a1b      	lsrs	r3, r3, #8
 800a4be:	f003 030f 	and.w	r3, r3, #15
 800a4c2:	490f      	ldr	r1, [pc, #60]	; (800a500 <HAL_RCC_GetHCLKFreq+0x54>)
 800a4c4:	5ccb      	ldrb	r3, [r1, r3]
 800a4c6:	f003 031f 	and.w	r3, r3, #31
 800a4ca:	fa22 f303 	lsr.w	r3, r2, r3
 800a4ce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a4d0:	4b0a      	ldr	r3, [pc, #40]	; (800a4fc <HAL_RCC_GetHCLKFreq+0x50>)
 800a4d2:	699b      	ldr	r3, [r3, #24]
 800a4d4:	f003 030f 	and.w	r3, r3, #15
 800a4d8:	4a09      	ldr	r2, [pc, #36]	; (800a500 <HAL_RCC_GetHCLKFreq+0x54>)
 800a4da:	5cd3      	ldrb	r3, [r2, r3]
 800a4dc:	f003 031f 	and.w	r3, r3, #31
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	fa22 f303 	lsr.w	r3, r2, r3
 800a4e6:	4a07      	ldr	r2, [pc, #28]	; (800a504 <HAL_RCC_GetHCLKFreq+0x58>)
 800a4e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a4ea:	4a07      	ldr	r2, [pc, #28]	; (800a508 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a4f0:	4b04      	ldr	r3, [pc, #16]	; (800a504 <HAL_RCC_GetHCLKFreq+0x58>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3708      	adds	r7, #8
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}
 800a4fc:	58024400 	.word	0x58024400
 800a500:	080181b8 	.word	0x080181b8
 800a504:	24000004 	.word	0x24000004
 800a508:	24000000 	.word	0x24000000

0800a50c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a510:	f7ff ffcc 	bl	800a4ac <HAL_RCC_GetHCLKFreq>
 800a514:	4602      	mov	r2, r0
 800a516:	4b06      	ldr	r3, [pc, #24]	; (800a530 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a518:	69db      	ldr	r3, [r3, #28]
 800a51a:	091b      	lsrs	r3, r3, #4
 800a51c:	f003 0307 	and.w	r3, r3, #7
 800a520:	4904      	ldr	r1, [pc, #16]	; (800a534 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a522:	5ccb      	ldrb	r3, [r1, r3]
 800a524:	f003 031f 	and.w	r3, r3, #31
 800a528:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	bd80      	pop	{r7, pc}
 800a530:	58024400 	.word	0x58024400
 800a534:	080181b8 	.word	0x080181b8

0800a538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a53c:	f7ff ffb6 	bl	800a4ac <HAL_RCC_GetHCLKFreq>
 800a540:	4602      	mov	r2, r0
 800a542:	4b06      	ldr	r3, [pc, #24]	; (800a55c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a544:	69db      	ldr	r3, [r3, #28]
 800a546:	0a1b      	lsrs	r3, r3, #8
 800a548:	f003 0307 	and.w	r3, r3, #7
 800a54c:	4904      	ldr	r1, [pc, #16]	; (800a560 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a54e:	5ccb      	ldrb	r3, [r1, r3]
 800a550:	f003 031f 	and.w	r3, r3, #31
 800a554:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a558:	4618      	mov	r0, r3
 800a55a:	bd80      	pop	{r7, pc}
 800a55c:	58024400 	.word	0x58024400
 800a560:	080181b8 	.word	0x080181b8

0800a564 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a568:	b0c6      	sub	sp, #280	; 0x118
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a570:	2300      	movs	r3, #0
 800a572:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a576:	2300      	movs	r3, #0
 800a578:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a57c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a584:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a588:	2500      	movs	r5, #0
 800a58a:	ea54 0305 	orrs.w	r3, r4, r5
 800a58e:	d049      	beq.n	800a624 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a590:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a594:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a596:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a59a:	d02f      	beq.n	800a5fc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a59c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a5a0:	d828      	bhi.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a5a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a5a6:	d01a      	beq.n	800a5de <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a5a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a5ac:	d822      	bhi.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d003      	beq.n	800a5ba <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a5b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5b6:	d007      	beq.n	800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a5b8:	e01c      	b.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5ba:	4bab      	ldr	r3, [pc, #684]	; (800a868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a5bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5be:	4aaa      	ldr	r2, [pc, #680]	; (800a868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a5c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a5c6:	e01a      	b.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a5c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5cc:	3308      	adds	r3, #8
 800a5ce:	2102      	movs	r1, #2
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f002 fa49 	bl	800ca68 <RCCEx_PLL2_Config>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a5dc:	e00f      	b.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a5de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5e2:	3328      	adds	r3, #40	; 0x28
 800a5e4:	2102      	movs	r1, #2
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f002 faf0 	bl	800cbcc <RCCEx_PLL3_Config>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a5f2:	e004      	b.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a5fa:	e000      	b.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a5fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a602:	2b00      	cmp	r3, #0
 800a604:	d10a      	bne.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a606:	4b98      	ldr	r3, [pc, #608]	; (800a868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a60a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a60e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a612:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a614:	4a94      	ldr	r2, [pc, #592]	; (800a868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a616:	430b      	orrs	r3, r1
 800a618:	6513      	str	r3, [r2, #80]	; 0x50
 800a61a:	e003      	b.n	800a624 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a61c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a620:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a62c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800a630:	f04f 0900 	mov.w	r9, #0
 800a634:	ea58 0309 	orrs.w	r3, r8, r9
 800a638:	d047      	beq.n	800a6ca <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a63a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a63e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a640:	2b04      	cmp	r3, #4
 800a642:	d82a      	bhi.n	800a69a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a644:	a201      	add	r2, pc, #4	; (adr r2, 800a64c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a64a:	bf00      	nop
 800a64c:	0800a661 	.word	0x0800a661
 800a650:	0800a66f 	.word	0x0800a66f
 800a654:	0800a685 	.word	0x0800a685
 800a658:	0800a6a3 	.word	0x0800a6a3
 800a65c:	0800a6a3 	.word	0x0800a6a3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a660:	4b81      	ldr	r3, [pc, #516]	; (800a868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a664:	4a80      	ldr	r2, [pc, #512]	; (800a868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a666:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a66a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a66c:	e01a      	b.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a66e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a672:	3308      	adds	r3, #8
 800a674:	2100      	movs	r1, #0
 800a676:	4618      	mov	r0, r3
 800a678:	f002 f9f6 	bl	800ca68 <RCCEx_PLL2_Config>
 800a67c:	4603      	mov	r3, r0
 800a67e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a682:	e00f      	b.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a684:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a688:	3328      	adds	r3, #40	; 0x28
 800a68a:	2100      	movs	r1, #0
 800a68c:	4618      	mov	r0, r3
 800a68e:	f002 fa9d 	bl	800cbcc <RCCEx_PLL3_Config>
 800a692:	4603      	mov	r3, r0
 800a694:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a698:	e004      	b.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a69a:	2301      	movs	r3, #1
 800a69c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a6a0:	e000      	b.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a6a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d10a      	bne.n	800a6c2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a6ac:	4b6e      	ldr	r3, [pc, #440]	; (800a868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a6ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6b0:	f023 0107 	bic.w	r1, r3, #7
 800a6b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6ba:	4a6b      	ldr	r2, [pc, #428]	; (800a868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a6bc:	430b      	orrs	r3, r1
 800a6be:	6513      	str	r3, [r2, #80]	; 0x50
 800a6c0:	e003      	b.n	800a6ca <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a6c6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a6ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d2:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800a6d6:	f04f 0b00 	mov.w	fp, #0
 800a6da:	ea5a 030b 	orrs.w	r3, sl, fp
 800a6de:	d05b      	beq.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a6e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a6e8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a6ec:	d03b      	beq.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a6ee:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a6f2:	d834      	bhi.n	800a75e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a6f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a6f8:	d037      	beq.n	800a76a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a6fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a6fe:	d82e      	bhi.n	800a75e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a700:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a704:	d033      	beq.n	800a76e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a706:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a70a:	d828      	bhi.n	800a75e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a70c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a710:	d01a      	beq.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800a712:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a716:	d822      	bhi.n	800a75e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d003      	beq.n	800a724 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800a71c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a720:	d007      	beq.n	800a732 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800a722:	e01c      	b.n	800a75e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a724:	4b50      	ldr	r3, [pc, #320]	; (800a868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a728:	4a4f      	ldr	r2, [pc, #316]	; (800a868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a72a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a72e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a730:	e01e      	b.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a732:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a736:	3308      	adds	r3, #8
 800a738:	2100      	movs	r1, #0
 800a73a:	4618      	mov	r0, r3
 800a73c:	f002 f994 	bl	800ca68 <RCCEx_PLL2_Config>
 800a740:	4603      	mov	r3, r0
 800a742:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a746:	e013      	b.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a748:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a74c:	3328      	adds	r3, #40	; 0x28
 800a74e:	2100      	movs	r1, #0
 800a750:	4618      	mov	r0, r3
 800a752:	f002 fa3b 	bl	800cbcc <RCCEx_PLL3_Config>
 800a756:	4603      	mov	r3, r0
 800a758:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a75c:	e008      	b.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a75e:	2301      	movs	r3, #1
 800a760:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a764:	e004      	b.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a766:	bf00      	nop
 800a768:	e002      	b.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a76a:	bf00      	nop
 800a76c:	e000      	b.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a76e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a770:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a774:	2b00      	cmp	r3, #0
 800a776:	d10b      	bne.n	800a790 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a778:	4b3b      	ldr	r3, [pc, #236]	; (800a868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a77a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a77c:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800a780:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a784:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a788:	4a37      	ldr	r2, [pc, #220]	; (800a868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a78a:	430b      	orrs	r3, r1
 800a78c:	6593      	str	r3, [r2, #88]	; 0x58
 800a78e:	e003      	b.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a790:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a794:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a798:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800a7a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a7ae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800a7b2:	460b      	mov	r3, r1
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	d05d      	beq.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a7b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a7c0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a7c4:	d03b      	beq.n	800a83e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800a7c6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a7ca:	d834      	bhi.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a7cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a7d0:	d037      	beq.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800a7d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a7d6:	d82e      	bhi.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a7d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a7dc:	d033      	beq.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800a7de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a7e2:	d828      	bhi.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a7e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a7e8:	d01a      	beq.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800a7ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a7ee:	d822      	bhi.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d003      	beq.n	800a7fc <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a7f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a7f8:	d007      	beq.n	800a80a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a7fa:	e01c      	b.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7fc:	4b1a      	ldr	r3, [pc, #104]	; (800a868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a800:	4a19      	ldr	r2, [pc, #100]	; (800a868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a802:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a806:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a808:	e01e      	b.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a80a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a80e:	3308      	adds	r3, #8
 800a810:	2100      	movs	r1, #0
 800a812:	4618      	mov	r0, r3
 800a814:	f002 f928 	bl	800ca68 <RCCEx_PLL2_Config>
 800a818:	4603      	mov	r3, r0
 800a81a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a81e:	e013      	b.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a820:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a824:	3328      	adds	r3, #40	; 0x28
 800a826:	2100      	movs	r1, #0
 800a828:	4618      	mov	r0, r3
 800a82a:	f002 f9cf 	bl	800cbcc <RCCEx_PLL3_Config>
 800a82e:	4603      	mov	r3, r0
 800a830:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a834:	e008      	b.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a836:	2301      	movs	r3, #1
 800a838:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a83c:	e004      	b.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a83e:	bf00      	nop
 800a840:	e002      	b.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a842:	bf00      	nop
 800a844:	e000      	b.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a846:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a848:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d10d      	bne.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a850:	4b05      	ldr	r3, [pc, #20]	; (800a868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a854:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800a858:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a85c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a860:	4a01      	ldr	r2, [pc, #4]	; (800a868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a862:	430b      	orrs	r3, r1
 800a864:	6593      	str	r3, [r2, #88]	; 0x58
 800a866:	e005      	b.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800a868:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a86c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a870:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a874:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800a880:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a884:	2300      	movs	r3, #0
 800a886:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a88a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800a88e:	460b      	mov	r3, r1
 800a890:	4313      	orrs	r3, r2
 800a892:	d03a      	beq.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800a894:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a89a:	2b30      	cmp	r3, #48	; 0x30
 800a89c:	d01f      	beq.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800a89e:	2b30      	cmp	r3, #48	; 0x30
 800a8a0:	d819      	bhi.n	800a8d6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a8a2:	2b20      	cmp	r3, #32
 800a8a4:	d00c      	beq.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a8a6:	2b20      	cmp	r3, #32
 800a8a8:	d815      	bhi.n	800a8d6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d019      	beq.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a8ae:	2b10      	cmp	r3, #16
 800a8b0:	d111      	bne.n	800a8d6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8b2:	4baa      	ldr	r3, [pc, #680]	; (800ab5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a8b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8b6:	4aa9      	ldr	r2, [pc, #676]	; (800ab5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a8b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a8be:	e011      	b.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a8c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8c4:	3308      	adds	r3, #8
 800a8c6:	2102      	movs	r1, #2
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f002 f8cd 	bl	800ca68 <RCCEx_PLL2_Config>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a8d4:	e006      	b.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a8dc:	e002      	b.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a8de:	bf00      	nop
 800a8e0:	e000      	b.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a8e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d10a      	bne.n	800a902 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a8ec:	4b9b      	ldr	r3, [pc, #620]	; (800ab5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a8ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8f0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800a8f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8fa:	4a98      	ldr	r2, [pc, #608]	; (800ab5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a8fc:	430b      	orrs	r3, r1
 800a8fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a900:	e003      	b.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a902:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a906:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a90a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a912:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800a916:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a91a:	2300      	movs	r3, #0
 800a91c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a920:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800a924:	460b      	mov	r3, r1
 800a926:	4313      	orrs	r3, r2
 800a928:	d051      	beq.n	800a9ce <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a92a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a92e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a930:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a934:	d035      	beq.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800a936:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a93a:	d82e      	bhi.n	800a99a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a93c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a940:	d031      	beq.n	800a9a6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800a942:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a946:	d828      	bhi.n	800a99a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a948:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a94c:	d01a      	beq.n	800a984 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800a94e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a952:	d822      	bhi.n	800a99a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a954:	2b00      	cmp	r3, #0
 800a956:	d003      	beq.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800a958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a95c:	d007      	beq.n	800a96e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800a95e:	e01c      	b.n	800a99a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a960:	4b7e      	ldr	r3, [pc, #504]	; (800ab5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a964:	4a7d      	ldr	r2, [pc, #500]	; (800ab5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a96a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a96c:	e01c      	b.n	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a96e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a972:	3308      	adds	r3, #8
 800a974:	2100      	movs	r1, #0
 800a976:	4618      	mov	r0, r3
 800a978:	f002 f876 	bl	800ca68 <RCCEx_PLL2_Config>
 800a97c:	4603      	mov	r3, r0
 800a97e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a982:	e011      	b.n	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a984:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a988:	3328      	adds	r3, #40	; 0x28
 800a98a:	2100      	movs	r1, #0
 800a98c:	4618      	mov	r0, r3
 800a98e:	f002 f91d 	bl	800cbcc <RCCEx_PLL3_Config>
 800a992:	4603      	mov	r3, r0
 800a994:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a998:	e006      	b.n	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a99a:	2301      	movs	r3, #1
 800a99c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a9a0:	e002      	b.n	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a9a2:	bf00      	nop
 800a9a4:	e000      	b.n	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a9a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d10a      	bne.n	800a9c6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a9b0:	4b6a      	ldr	r3, [pc, #424]	; (800ab5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a9b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9b4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800a9b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9be:	4a67      	ldr	r2, [pc, #412]	; (800ab5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a9c0:	430b      	orrs	r3, r1
 800a9c2:	6513      	str	r3, [r2, #80]	; 0x50
 800a9c4:	e003      	b.n	800a9ce <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9ca:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a9ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800a9da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a9de:	2300      	movs	r3, #0
 800a9e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a9e4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800a9e8:	460b      	mov	r3, r1
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	d053      	beq.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a9ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a9f8:	d033      	beq.n	800aa62 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800a9fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a9fe:	d82c      	bhi.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800aa00:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aa04:	d02f      	beq.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800aa06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aa0a:	d826      	bhi.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800aa0c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aa10:	d02b      	beq.n	800aa6a <HAL_RCCEx_PeriphCLKConfig+0x506>
 800aa12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aa16:	d820      	bhi.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800aa18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa1c:	d012      	beq.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800aa1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa22:	d81a      	bhi.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d022      	beq.n	800aa6e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800aa28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa2c:	d115      	bne.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aa2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa32:	3308      	adds	r3, #8
 800aa34:	2101      	movs	r1, #1
 800aa36:	4618      	mov	r0, r3
 800aa38:	f002 f816 	bl	800ca68 <RCCEx_PLL2_Config>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800aa42:	e015      	b.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aa44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa48:	3328      	adds	r3, #40	; 0x28
 800aa4a:	2101      	movs	r1, #1
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f002 f8bd 	bl	800cbcc <RCCEx_PLL3_Config>
 800aa52:	4603      	mov	r3, r0
 800aa54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800aa58:	e00a      	b.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aa60:	e006      	b.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800aa62:	bf00      	nop
 800aa64:	e004      	b.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800aa66:	bf00      	nop
 800aa68:	e002      	b.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800aa6a:	bf00      	nop
 800aa6c:	e000      	b.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800aa6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d10a      	bne.n	800aa8e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800aa78:	4b38      	ldr	r3, [pc, #224]	; (800ab5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aa7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa7c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800aa80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa86:	4a35      	ldr	r2, [pc, #212]	; (800ab5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aa88:	430b      	orrs	r3, r1
 800aa8a:	6513      	str	r3, [r2, #80]	; 0x50
 800aa8c:	e003      	b.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa8e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa92:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800aa96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa9e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800aaa2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800aaac:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800aab0:	460b      	mov	r3, r1
 800aab2:	4313      	orrs	r3, r2
 800aab4:	d058      	beq.n	800ab68 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800aab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800aabe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aac2:	d033      	beq.n	800ab2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800aac4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aac8:	d82c      	bhi.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800aaca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aace:	d02f      	beq.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800aad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aad4:	d826      	bhi.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800aad6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aada:	d02b      	beq.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800aadc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aae0:	d820      	bhi.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800aae2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aae6:	d012      	beq.n	800ab0e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800aae8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aaec:	d81a      	bhi.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d022      	beq.n	800ab38 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800aaf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aaf6:	d115      	bne.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aaf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aafc:	3308      	adds	r3, #8
 800aafe:	2101      	movs	r1, #1
 800ab00:	4618      	mov	r0, r3
 800ab02:	f001 ffb1 	bl	800ca68 <RCCEx_PLL2_Config>
 800ab06:	4603      	mov	r3, r0
 800ab08:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ab0c:	e015      	b.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ab0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab12:	3328      	adds	r3, #40	; 0x28
 800ab14:	2101      	movs	r1, #1
 800ab16:	4618      	mov	r0, r3
 800ab18:	f002 f858 	bl	800cbcc <RCCEx_PLL3_Config>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ab22:	e00a      	b.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ab24:	2301      	movs	r3, #1
 800ab26:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ab2a:	e006      	b.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ab2c:	bf00      	nop
 800ab2e:	e004      	b.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ab30:	bf00      	nop
 800ab32:	e002      	b.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ab34:	bf00      	nop
 800ab36:	e000      	b.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ab38:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab3a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d10e      	bne.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ab42:	4b06      	ldr	r3, [pc, #24]	; (800ab5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab46:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800ab4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ab52:	4a02      	ldr	r2, [pc, #8]	; (800ab5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab54:	430b      	orrs	r3, r1
 800ab56:	6593      	str	r3, [r2, #88]	; 0x58
 800ab58:	e006      	b.n	800ab68 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800ab5a:	bf00      	nop
 800ab5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ab68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab70:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800ab74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ab78:	2300      	movs	r3, #0
 800ab7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ab7e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800ab82:	460b      	mov	r3, r1
 800ab84:	4313      	orrs	r3, r2
 800ab86:	d037      	beq.n	800abf8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800ab88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab92:	d00e      	beq.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800ab94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab98:	d816      	bhi.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d018      	beq.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800ab9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aba2:	d111      	bne.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aba4:	4bc4      	ldr	r3, [pc, #784]	; (800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aba8:	4ac3      	ldr	r2, [pc, #780]	; (800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800abaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800abb0:	e00f      	b.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800abb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abb6:	3308      	adds	r3, #8
 800abb8:	2101      	movs	r1, #1
 800abba:	4618      	mov	r0, r3
 800abbc:	f001 ff54 	bl	800ca68 <RCCEx_PLL2_Config>
 800abc0:	4603      	mov	r3, r0
 800abc2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800abc6:	e004      	b.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800abc8:	2301      	movs	r3, #1
 800abca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800abce:	e000      	b.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800abd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abd2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d10a      	bne.n	800abf0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800abda:	4bb7      	ldr	r3, [pc, #732]	; (800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800abdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abde:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800abe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abe8:	4ab3      	ldr	r2, [pc, #716]	; (800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800abea:	430b      	orrs	r3, r1
 800abec:	6513      	str	r3, [r2, #80]	; 0x50
 800abee:	e003      	b.n	800abf8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abf0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800abf4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800abf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac00:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800ac04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ac08:	2300      	movs	r3, #0
 800ac0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ac0e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800ac12:	460b      	mov	r3, r1
 800ac14:	4313      	orrs	r3, r2
 800ac16:	d039      	beq.n	800ac8c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800ac18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac1e:	2b03      	cmp	r3, #3
 800ac20:	d81c      	bhi.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800ac22:	a201      	add	r2, pc, #4	; (adr r2, 800ac28 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800ac24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac28:	0800ac65 	.word	0x0800ac65
 800ac2c:	0800ac39 	.word	0x0800ac39
 800ac30:	0800ac47 	.word	0x0800ac47
 800ac34:	0800ac65 	.word	0x0800ac65
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac38:	4b9f      	ldr	r3, [pc, #636]	; (800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac3c:	4a9e      	ldr	r2, [pc, #632]	; (800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ac44:	e00f      	b.n	800ac66 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ac46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac4a:	3308      	adds	r3, #8
 800ac4c:	2102      	movs	r1, #2
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f001 ff0a 	bl	800ca68 <RCCEx_PLL2_Config>
 800ac54:	4603      	mov	r3, r0
 800ac56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ac5a:	e004      	b.n	800ac66 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ac62:	e000      	b.n	800ac66 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800ac64:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac66:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d10a      	bne.n	800ac84 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ac6e:	4b92      	ldr	r3, [pc, #584]	; (800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac72:	f023 0103 	bic.w	r1, r3, #3
 800ac76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac7c:	4a8e      	ldr	r2, [pc, #568]	; (800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac7e:	430b      	orrs	r3, r1
 800ac80:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ac82:	e003      	b.n	800ac8c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac88:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ac8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac94:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800ac98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aca2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800aca6:	460b      	mov	r3, r1
 800aca8:	4313      	orrs	r3, r2
 800acaa:	f000 8099 	beq.w	800ade0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800acae:	4b83      	ldr	r3, [pc, #524]	; (800aebc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	4a82      	ldr	r2, [pc, #520]	; (800aebc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800acb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acb8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800acba:	f7f8 fd7f 	bl	80037bc <HAL_GetTick>
 800acbe:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800acc2:	e00b      	b.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800acc4:	f7f8 fd7a 	bl	80037bc <HAL_GetTick>
 800acc8:	4602      	mov	r2, r0
 800acca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800acce:	1ad3      	subs	r3, r2, r3
 800acd0:	2b64      	cmp	r3, #100	; 0x64
 800acd2:	d903      	bls.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800acd4:	2303      	movs	r3, #3
 800acd6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800acda:	e005      	b.n	800ace8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800acdc:	4b77      	ldr	r3, [pc, #476]	; (800aebc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d0ed      	beq.n	800acc4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800ace8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800acec:	2b00      	cmp	r3, #0
 800acee:	d173      	bne.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800acf0:	4b71      	ldr	r3, [pc, #452]	; (800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800acf2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800acf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acf8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800acfc:	4053      	eors	r3, r2
 800acfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d015      	beq.n	800ad32 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ad06:	4b6c      	ldr	r3, [pc, #432]	; (800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad0e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ad12:	4b69      	ldr	r3, [pc, #420]	; (800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad16:	4a68      	ldr	r2, [pc, #416]	; (800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad1c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ad1e:	4b66      	ldr	r3, [pc, #408]	; (800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad22:	4a65      	ldr	r2, [pc, #404]	; (800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad28:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ad2a:	4a63      	ldr	r2, [pc, #396]	; (800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ad30:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ad32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ad3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad3e:	d118      	bne.n	800ad72 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad40:	f7f8 fd3c 	bl	80037bc <HAL_GetTick>
 800ad44:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ad48:	e00d      	b.n	800ad66 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad4a:	f7f8 fd37 	bl	80037bc <HAL_GetTick>
 800ad4e:	4602      	mov	r2, r0
 800ad50:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ad54:	1ad2      	subs	r2, r2, r3
 800ad56:	f241 3388 	movw	r3, #5000	; 0x1388
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d903      	bls.n	800ad66 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800ad5e:	2303      	movs	r3, #3
 800ad60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800ad64:	e005      	b.n	800ad72 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ad66:	4b54      	ldr	r3, [pc, #336]	; (800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad6a:	f003 0302 	and.w	r3, r3, #2
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d0eb      	beq.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800ad72:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d129      	bne.n	800adce <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ad7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ad82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad8a:	d10e      	bne.n	800adaa <HAL_RCCEx_PeriphCLKConfig+0x846>
 800ad8c:	4b4a      	ldr	r3, [pc, #296]	; (800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad8e:	691b      	ldr	r3, [r3, #16]
 800ad90:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800ad94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ad9c:	091a      	lsrs	r2, r3, #4
 800ad9e:	4b48      	ldr	r3, [pc, #288]	; (800aec0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800ada0:	4013      	ands	r3, r2
 800ada2:	4a45      	ldr	r2, [pc, #276]	; (800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ada4:	430b      	orrs	r3, r1
 800ada6:	6113      	str	r3, [r2, #16]
 800ada8:	e005      	b.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800adaa:	4b43      	ldr	r3, [pc, #268]	; (800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800adac:	691b      	ldr	r3, [r3, #16]
 800adae:	4a42      	ldr	r2, [pc, #264]	; (800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800adb0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800adb4:	6113      	str	r3, [r2, #16]
 800adb6:	4b40      	ldr	r3, [pc, #256]	; (800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800adb8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800adba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800adc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800adc6:	4a3c      	ldr	r2, [pc, #240]	; (800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800adc8:	430b      	orrs	r3, r1
 800adca:	6713      	str	r3, [r2, #112]	; 0x70
 800adcc:	e008      	b.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800adce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800add2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800add6:	e003      	b.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800add8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800addc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ade0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ade4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade8:	f002 0301 	and.w	r3, r2, #1
 800adec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800adf0:	2300      	movs	r3, #0
 800adf2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800adf6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800adfa:	460b      	mov	r3, r1
 800adfc:	4313      	orrs	r3, r2
 800adfe:	f000 808f 	beq.w	800af20 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800ae02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae08:	2b28      	cmp	r3, #40	; 0x28
 800ae0a:	d871      	bhi.n	800aef0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800ae0c:	a201      	add	r2, pc, #4	; (adr r2, 800ae14 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800ae0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae12:	bf00      	nop
 800ae14:	0800aef9 	.word	0x0800aef9
 800ae18:	0800aef1 	.word	0x0800aef1
 800ae1c:	0800aef1 	.word	0x0800aef1
 800ae20:	0800aef1 	.word	0x0800aef1
 800ae24:	0800aef1 	.word	0x0800aef1
 800ae28:	0800aef1 	.word	0x0800aef1
 800ae2c:	0800aef1 	.word	0x0800aef1
 800ae30:	0800aef1 	.word	0x0800aef1
 800ae34:	0800aec5 	.word	0x0800aec5
 800ae38:	0800aef1 	.word	0x0800aef1
 800ae3c:	0800aef1 	.word	0x0800aef1
 800ae40:	0800aef1 	.word	0x0800aef1
 800ae44:	0800aef1 	.word	0x0800aef1
 800ae48:	0800aef1 	.word	0x0800aef1
 800ae4c:	0800aef1 	.word	0x0800aef1
 800ae50:	0800aef1 	.word	0x0800aef1
 800ae54:	0800aedb 	.word	0x0800aedb
 800ae58:	0800aef1 	.word	0x0800aef1
 800ae5c:	0800aef1 	.word	0x0800aef1
 800ae60:	0800aef1 	.word	0x0800aef1
 800ae64:	0800aef1 	.word	0x0800aef1
 800ae68:	0800aef1 	.word	0x0800aef1
 800ae6c:	0800aef1 	.word	0x0800aef1
 800ae70:	0800aef1 	.word	0x0800aef1
 800ae74:	0800aef9 	.word	0x0800aef9
 800ae78:	0800aef1 	.word	0x0800aef1
 800ae7c:	0800aef1 	.word	0x0800aef1
 800ae80:	0800aef1 	.word	0x0800aef1
 800ae84:	0800aef1 	.word	0x0800aef1
 800ae88:	0800aef1 	.word	0x0800aef1
 800ae8c:	0800aef1 	.word	0x0800aef1
 800ae90:	0800aef1 	.word	0x0800aef1
 800ae94:	0800aef9 	.word	0x0800aef9
 800ae98:	0800aef1 	.word	0x0800aef1
 800ae9c:	0800aef1 	.word	0x0800aef1
 800aea0:	0800aef1 	.word	0x0800aef1
 800aea4:	0800aef1 	.word	0x0800aef1
 800aea8:	0800aef1 	.word	0x0800aef1
 800aeac:	0800aef1 	.word	0x0800aef1
 800aeb0:	0800aef1 	.word	0x0800aef1
 800aeb4:	0800aef9 	.word	0x0800aef9
 800aeb8:	58024400 	.word	0x58024400
 800aebc:	58024800 	.word	0x58024800
 800aec0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aec8:	3308      	adds	r3, #8
 800aeca:	2101      	movs	r1, #1
 800aecc:	4618      	mov	r0, r3
 800aece:	f001 fdcb 	bl	800ca68 <RCCEx_PLL2_Config>
 800aed2:	4603      	mov	r3, r0
 800aed4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800aed8:	e00f      	b.n	800aefa <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aeda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aede:	3328      	adds	r3, #40	; 0x28
 800aee0:	2101      	movs	r1, #1
 800aee2:	4618      	mov	r0, r3
 800aee4:	f001 fe72 	bl	800cbcc <RCCEx_PLL3_Config>
 800aee8:	4603      	mov	r3, r0
 800aeea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800aeee:	e004      	b.n	800aefa <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aef0:	2301      	movs	r3, #1
 800aef2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aef6:	e000      	b.n	800aefa <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800aef8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aefa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d10a      	bne.n	800af18 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800af02:	4bbf      	ldr	r3, [pc, #764]	; (800b200 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800af04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af06:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800af0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af10:	4abb      	ldr	r2, [pc, #748]	; (800b200 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800af12:	430b      	orrs	r3, r1
 800af14:	6553      	str	r3, [r2, #84]	; 0x54
 800af16:	e003      	b.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af1c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800af20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af28:	f002 0302 	and.w	r3, r2, #2
 800af2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800af30:	2300      	movs	r3, #0
 800af32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800af36:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800af3a:	460b      	mov	r3, r1
 800af3c:	4313      	orrs	r3, r2
 800af3e:	d041      	beq.n	800afc4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800af40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af46:	2b05      	cmp	r3, #5
 800af48:	d824      	bhi.n	800af94 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800af4a:	a201      	add	r2, pc, #4	; (adr r2, 800af50 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800af4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af50:	0800af9d 	.word	0x0800af9d
 800af54:	0800af69 	.word	0x0800af69
 800af58:	0800af7f 	.word	0x0800af7f
 800af5c:	0800af9d 	.word	0x0800af9d
 800af60:	0800af9d 	.word	0x0800af9d
 800af64:	0800af9d 	.word	0x0800af9d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800af68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af6c:	3308      	adds	r3, #8
 800af6e:	2101      	movs	r1, #1
 800af70:	4618      	mov	r0, r3
 800af72:	f001 fd79 	bl	800ca68 <RCCEx_PLL2_Config>
 800af76:	4603      	mov	r3, r0
 800af78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800af7c:	e00f      	b.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800af7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af82:	3328      	adds	r3, #40	; 0x28
 800af84:	2101      	movs	r1, #1
 800af86:	4618      	mov	r0, r3
 800af88:	f001 fe20 	bl	800cbcc <RCCEx_PLL3_Config>
 800af8c:	4603      	mov	r3, r0
 800af8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800af92:	e004      	b.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af94:	2301      	movs	r3, #1
 800af96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800af9a:	e000      	b.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800af9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af9e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d10a      	bne.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800afa6:	4b96      	ldr	r3, [pc, #600]	; (800b200 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800afa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afaa:	f023 0107 	bic.w	r1, r3, #7
 800afae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800afb4:	4a92      	ldr	r2, [pc, #584]	; (800b200 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800afb6:	430b      	orrs	r3, r1
 800afb8:	6553      	str	r3, [r2, #84]	; 0x54
 800afba:	e003      	b.n	800afc4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afbc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afc0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800afc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afcc:	f002 0304 	and.w	r3, r2, #4
 800afd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800afd4:	2300      	movs	r3, #0
 800afd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800afda:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800afde:	460b      	mov	r3, r1
 800afe0:	4313      	orrs	r3, r2
 800afe2:	d044      	beq.n	800b06e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800afe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afec:	2b05      	cmp	r3, #5
 800afee:	d825      	bhi.n	800b03c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800aff0:	a201      	add	r2, pc, #4	; (adr r2, 800aff8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800aff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aff6:	bf00      	nop
 800aff8:	0800b045 	.word	0x0800b045
 800affc:	0800b011 	.word	0x0800b011
 800b000:	0800b027 	.word	0x0800b027
 800b004:	0800b045 	.word	0x0800b045
 800b008:	0800b045 	.word	0x0800b045
 800b00c:	0800b045 	.word	0x0800b045
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b010:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b014:	3308      	adds	r3, #8
 800b016:	2101      	movs	r1, #1
 800b018:	4618      	mov	r0, r3
 800b01a:	f001 fd25 	bl	800ca68 <RCCEx_PLL2_Config>
 800b01e:	4603      	mov	r3, r0
 800b020:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b024:	e00f      	b.n	800b046 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b026:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b02a:	3328      	adds	r3, #40	; 0x28
 800b02c:	2101      	movs	r1, #1
 800b02e:	4618      	mov	r0, r3
 800b030:	f001 fdcc 	bl	800cbcc <RCCEx_PLL3_Config>
 800b034:	4603      	mov	r3, r0
 800b036:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b03a:	e004      	b.n	800b046 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b03c:	2301      	movs	r3, #1
 800b03e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b042:	e000      	b.n	800b046 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800b044:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b046:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d10b      	bne.n	800b066 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b04e:	4b6c      	ldr	r3, [pc, #432]	; (800b200 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b052:	f023 0107 	bic.w	r1, r3, #7
 800b056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b05a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b05e:	4a68      	ldr	r2, [pc, #416]	; (800b200 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b060:	430b      	orrs	r3, r1
 800b062:	6593      	str	r3, [r2, #88]	; 0x58
 800b064:	e003      	b.n	800b06e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b066:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b06a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b06e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b076:	f002 0320 	and.w	r3, r2, #32
 800b07a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b07e:	2300      	movs	r3, #0
 800b080:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b084:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b088:	460b      	mov	r3, r1
 800b08a:	4313      	orrs	r3, r2
 800b08c:	d055      	beq.n	800b13a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b08e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b092:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b096:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b09a:	d033      	beq.n	800b104 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800b09c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b0a0:	d82c      	bhi.n	800b0fc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b0a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0a6:	d02f      	beq.n	800b108 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b0a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0ac:	d826      	bhi.n	800b0fc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b0ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b0b2:	d02b      	beq.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b0b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b0b8:	d820      	bhi.n	800b0fc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b0ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0be:	d012      	beq.n	800b0e6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800b0c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0c4:	d81a      	bhi.n	800b0fc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d022      	beq.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b0ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b0ce:	d115      	bne.n	800b0fc <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b0d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0d4:	3308      	adds	r3, #8
 800b0d6:	2100      	movs	r1, #0
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f001 fcc5 	bl	800ca68 <RCCEx_PLL2_Config>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b0e4:	e015      	b.n	800b112 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b0e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0ea:	3328      	adds	r3, #40	; 0x28
 800b0ec:	2102      	movs	r1, #2
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f001 fd6c 	bl	800cbcc <RCCEx_PLL3_Config>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b0fa:	e00a      	b.n	800b112 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b102:	e006      	b.n	800b112 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b104:	bf00      	nop
 800b106:	e004      	b.n	800b112 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b108:	bf00      	nop
 800b10a:	e002      	b.n	800b112 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b10c:	bf00      	nop
 800b10e:	e000      	b.n	800b112 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b110:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b112:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b116:	2b00      	cmp	r3, #0
 800b118:	d10b      	bne.n	800b132 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b11a:	4b39      	ldr	r3, [pc, #228]	; (800b200 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b11c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b11e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b122:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b126:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b12a:	4a35      	ldr	r2, [pc, #212]	; (800b200 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b12c:	430b      	orrs	r3, r1
 800b12e:	6553      	str	r3, [r2, #84]	; 0x54
 800b130:	e003      	b.n	800b13a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b132:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b136:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b13a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b142:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b146:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b14a:	2300      	movs	r3, #0
 800b14c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b150:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b154:	460b      	mov	r3, r1
 800b156:	4313      	orrs	r3, r2
 800b158:	d058      	beq.n	800b20c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b15a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b15e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b162:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b166:	d033      	beq.n	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b168:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b16c:	d82c      	bhi.n	800b1c8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b16e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b172:	d02f      	beq.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b178:	d826      	bhi.n	800b1c8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b17a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b17e:	d02b      	beq.n	800b1d8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b180:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b184:	d820      	bhi.n	800b1c8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b186:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b18a:	d012      	beq.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b18c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b190:	d81a      	bhi.n	800b1c8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b192:	2b00      	cmp	r3, #0
 800b194:	d022      	beq.n	800b1dc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b19a:	d115      	bne.n	800b1c8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b19c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1a0:	3308      	adds	r3, #8
 800b1a2:	2100      	movs	r1, #0
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f001 fc5f 	bl	800ca68 <RCCEx_PLL2_Config>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b1b0:	e015      	b.n	800b1de <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b1b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1b6:	3328      	adds	r3, #40	; 0x28
 800b1b8:	2102      	movs	r1, #2
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f001 fd06 	bl	800cbcc <RCCEx_PLL3_Config>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b1c6:	e00a      	b.n	800b1de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b1ce:	e006      	b.n	800b1de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b1d0:	bf00      	nop
 800b1d2:	e004      	b.n	800b1de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b1d4:	bf00      	nop
 800b1d6:	e002      	b.n	800b1de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b1d8:	bf00      	nop
 800b1da:	e000      	b.n	800b1de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b1dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d10e      	bne.n	800b204 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b1e6:	4b06      	ldr	r3, [pc, #24]	; (800b200 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b1e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1ea:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b1ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b1f6:	4a02      	ldr	r2, [pc, #8]	; (800b200 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b1f8:	430b      	orrs	r3, r1
 800b1fa:	6593      	str	r3, [r2, #88]	; 0x58
 800b1fc:	e006      	b.n	800b20c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800b1fe:	bf00      	nop
 800b200:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b204:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b208:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b20c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b214:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b218:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b21c:	2300      	movs	r3, #0
 800b21e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b222:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b226:	460b      	mov	r3, r1
 800b228:	4313      	orrs	r3, r2
 800b22a:	d055      	beq.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b22c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b230:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b234:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b238:	d033      	beq.n	800b2a2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800b23a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b23e:	d82c      	bhi.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b240:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b244:	d02f      	beq.n	800b2a6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b246:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b24a:	d826      	bhi.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b24c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b250:	d02b      	beq.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b252:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b256:	d820      	bhi.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b258:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b25c:	d012      	beq.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800b25e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b262:	d81a      	bhi.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b264:	2b00      	cmp	r3, #0
 800b266:	d022      	beq.n	800b2ae <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b268:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b26c:	d115      	bne.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b26e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b272:	3308      	adds	r3, #8
 800b274:	2100      	movs	r1, #0
 800b276:	4618      	mov	r0, r3
 800b278:	f001 fbf6 	bl	800ca68 <RCCEx_PLL2_Config>
 800b27c:	4603      	mov	r3, r0
 800b27e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b282:	e015      	b.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b284:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b288:	3328      	adds	r3, #40	; 0x28
 800b28a:	2102      	movs	r1, #2
 800b28c:	4618      	mov	r0, r3
 800b28e:	f001 fc9d 	bl	800cbcc <RCCEx_PLL3_Config>
 800b292:	4603      	mov	r3, r0
 800b294:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b298:	e00a      	b.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b29a:	2301      	movs	r3, #1
 800b29c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b2a0:	e006      	b.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b2a2:	bf00      	nop
 800b2a4:	e004      	b.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b2a6:	bf00      	nop
 800b2a8:	e002      	b.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b2aa:	bf00      	nop
 800b2ac:	e000      	b.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b2ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d10b      	bne.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b2b8:	4ba0      	ldr	r3, [pc, #640]	; (800b53c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b2ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2bc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b2c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b2c8:	4a9c      	ldr	r2, [pc, #624]	; (800b53c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b2ca:	430b      	orrs	r3, r1
 800b2cc:	6593      	str	r3, [r2, #88]	; 0x58
 800b2ce:	e003      	b.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2d4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b2d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e0:	f002 0308 	and.w	r3, r2, #8
 800b2e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b2ee:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b2f2:	460b      	mov	r3, r1
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	d01e      	beq.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800b2f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b304:	d10c      	bne.n	800b320 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b30a:	3328      	adds	r3, #40	; 0x28
 800b30c:	2102      	movs	r1, #2
 800b30e:	4618      	mov	r0, r3
 800b310:	f001 fc5c 	bl	800cbcc <RCCEx_PLL3_Config>
 800b314:	4603      	mov	r3, r0
 800b316:	2b00      	cmp	r3, #0
 800b318:	d002      	beq.n	800b320 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800b31a:	2301      	movs	r3, #1
 800b31c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b320:	4b86      	ldr	r3, [pc, #536]	; (800b53c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b324:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b328:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b32c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b330:	4a82      	ldr	r2, [pc, #520]	; (800b53c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b332:	430b      	orrs	r3, r1
 800b334:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b336:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b33e:	f002 0310 	and.w	r3, r2, #16
 800b342:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b346:	2300      	movs	r3, #0
 800b348:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b34c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b350:	460b      	mov	r3, r1
 800b352:	4313      	orrs	r3, r2
 800b354:	d01e      	beq.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b356:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b35a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b35e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b362:	d10c      	bne.n	800b37e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b364:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b368:	3328      	adds	r3, #40	; 0x28
 800b36a:	2102      	movs	r1, #2
 800b36c:	4618      	mov	r0, r3
 800b36e:	f001 fc2d 	bl	800cbcc <RCCEx_PLL3_Config>
 800b372:	4603      	mov	r3, r0
 800b374:	2b00      	cmp	r3, #0
 800b376:	d002      	beq.n	800b37e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800b378:	2301      	movs	r3, #1
 800b37a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b37e:	4b6f      	ldr	r3, [pc, #444]	; (800b53c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b382:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b386:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b38a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b38e:	4a6b      	ldr	r2, [pc, #428]	; (800b53c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b390:	430b      	orrs	r3, r1
 800b392:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b394:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b3a0:	67bb      	str	r3, [r7, #120]	; 0x78
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b3a6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b3aa:	460b      	mov	r3, r1
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	d03e      	beq.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b3b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b3b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3bc:	d022      	beq.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b3be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3c2:	d81b      	bhi.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d003      	beq.n	800b3d0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800b3c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3cc:	d00b      	beq.n	800b3e6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800b3ce:	e015      	b.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b3d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3d4:	3308      	adds	r3, #8
 800b3d6:	2100      	movs	r1, #0
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f001 fb45 	bl	800ca68 <RCCEx_PLL2_Config>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b3e4:	e00f      	b.n	800b406 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b3e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3ea:	3328      	adds	r3, #40	; 0x28
 800b3ec:	2102      	movs	r1, #2
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f001 fbec 	bl	800cbcc <RCCEx_PLL3_Config>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b3fa:	e004      	b.n	800b406 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b402:	e000      	b.n	800b406 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800b404:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b406:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d10b      	bne.n	800b426 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b40e:	4b4b      	ldr	r3, [pc, #300]	; (800b53c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b412:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b416:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b41a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b41e:	4a47      	ldr	r2, [pc, #284]	; (800b53c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b420:	430b      	orrs	r3, r1
 800b422:	6593      	str	r3, [r2, #88]	; 0x58
 800b424:	e003      	b.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b426:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b42a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b42e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b436:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b43a:	673b      	str	r3, [r7, #112]	; 0x70
 800b43c:	2300      	movs	r3, #0
 800b43e:	677b      	str	r3, [r7, #116]	; 0x74
 800b440:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b444:	460b      	mov	r3, r1
 800b446:	4313      	orrs	r3, r2
 800b448:	d03b      	beq.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b44a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b44e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b452:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b456:	d01f      	beq.n	800b498 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b458:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b45c:	d818      	bhi.n	800b490 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800b45e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b462:	d003      	beq.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800b464:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b468:	d007      	beq.n	800b47a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800b46a:	e011      	b.n	800b490 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b46c:	4b33      	ldr	r3, [pc, #204]	; (800b53c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b470:	4a32      	ldr	r2, [pc, #200]	; (800b53c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b472:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b476:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b478:	e00f      	b.n	800b49a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b47a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b47e:	3328      	adds	r3, #40	; 0x28
 800b480:	2101      	movs	r1, #1
 800b482:	4618      	mov	r0, r3
 800b484:	f001 fba2 	bl	800cbcc <RCCEx_PLL3_Config>
 800b488:	4603      	mov	r3, r0
 800b48a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800b48e:	e004      	b.n	800b49a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b490:	2301      	movs	r3, #1
 800b492:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b496:	e000      	b.n	800b49a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800b498:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b49a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d10b      	bne.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b4a2:	4b26      	ldr	r3, [pc, #152]	; (800b53c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b4a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4a6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b4aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4b2:	4a22      	ldr	r2, [pc, #136]	; (800b53c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b4b4:	430b      	orrs	r3, r1
 800b4b6:	6553      	str	r3, [r2, #84]	; 0x54
 800b4b8:	e003      	b.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4be:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b4c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ca:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b4ce:	66bb      	str	r3, [r7, #104]	; 0x68
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b4d4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b4d8:	460b      	mov	r3, r1
 800b4da:	4313      	orrs	r3, r2
 800b4dc:	d034      	beq.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b4de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d003      	beq.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800b4e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4ec:	d007      	beq.n	800b4fe <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800b4ee:	e011      	b.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4f0:	4b12      	ldr	r3, [pc, #72]	; (800b53c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4f4:	4a11      	ldr	r2, [pc, #68]	; (800b53c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b4f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b4fc:	e00e      	b.n	800b51c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b4fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b502:	3308      	adds	r3, #8
 800b504:	2102      	movs	r1, #2
 800b506:	4618      	mov	r0, r3
 800b508:	f001 faae 	bl	800ca68 <RCCEx_PLL2_Config>
 800b50c:	4603      	mov	r3, r0
 800b50e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b512:	e003      	b.n	800b51c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800b514:	2301      	movs	r3, #1
 800b516:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b51a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b51c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b520:	2b00      	cmp	r3, #0
 800b522:	d10d      	bne.n	800b540 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b524:	4b05      	ldr	r3, [pc, #20]	; (800b53c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b528:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b52c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b532:	4a02      	ldr	r2, [pc, #8]	; (800b53c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b534:	430b      	orrs	r3, r1
 800b536:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b538:	e006      	b.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800b53a:	bf00      	nop
 800b53c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b540:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b544:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b548:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b550:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b554:	663b      	str	r3, [r7, #96]	; 0x60
 800b556:	2300      	movs	r3, #0
 800b558:	667b      	str	r3, [r7, #100]	; 0x64
 800b55a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b55e:	460b      	mov	r3, r1
 800b560:	4313      	orrs	r3, r2
 800b562:	d00c      	beq.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b564:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b568:	3328      	adds	r3, #40	; 0x28
 800b56a:	2102      	movs	r1, #2
 800b56c:	4618      	mov	r0, r3
 800b56e:	f001 fb2d 	bl	800cbcc <RCCEx_PLL3_Config>
 800b572:	4603      	mov	r3, r0
 800b574:	2b00      	cmp	r3, #0
 800b576:	d002      	beq.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800b578:	2301      	movs	r3, #1
 800b57a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b57e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b586:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b58a:	65bb      	str	r3, [r7, #88]	; 0x58
 800b58c:	2300      	movs	r3, #0
 800b58e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b590:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800b594:	460b      	mov	r3, r1
 800b596:	4313      	orrs	r3, r2
 800b598:	d036      	beq.n	800b608 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b59a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b59e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b5a4:	d018      	beq.n	800b5d8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800b5a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b5aa:	d811      	bhi.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b5ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5b0:	d014      	beq.n	800b5dc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800b5b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5b6:	d80b      	bhi.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d011      	beq.n	800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800b5bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5c0:	d106      	bne.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5c2:	4bb7      	ldr	r3, [pc, #732]	; (800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b5c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5c6:	4ab6      	ldr	r2, [pc, #728]	; (800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b5c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b5cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b5ce:	e008      	b.n	800b5e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b5d6:	e004      	b.n	800b5e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b5d8:	bf00      	nop
 800b5da:	e002      	b.n	800b5e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b5dc:	bf00      	nop
 800b5de:	e000      	b.n	800b5e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b5e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5e2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d10a      	bne.n	800b600 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b5ea:	4bad      	ldr	r3, [pc, #692]	; (800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b5ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b5f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5f8:	4aa9      	ldr	r2, [pc, #676]	; (800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b5fa:	430b      	orrs	r3, r1
 800b5fc:	6553      	str	r3, [r2, #84]	; 0x54
 800b5fe:	e003      	b.n	800b608 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b600:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b604:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b610:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800b614:	653b      	str	r3, [r7, #80]	; 0x50
 800b616:	2300      	movs	r3, #0
 800b618:	657b      	str	r3, [r7, #84]	; 0x54
 800b61a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b61e:	460b      	mov	r3, r1
 800b620:	4313      	orrs	r3, r2
 800b622:	d009      	beq.n	800b638 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b624:	4b9e      	ldr	r3, [pc, #632]	; (800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b628:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b62c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b632:	4a9b      	ldr	r2, [pc, #620]	; (800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b634:	430b      	orrs	r3, r1
 800b636:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b638:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b640:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800b644:	64bb      	str	r3, [r7, #72]	; 0x48
 800b646:	2300      	movs	r3, #0
 800b648:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b64a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800b64e:	460b      	mov	r3, r1
 800b650:	4313      	orrs	r3, r2
 800b652:	d009      	beq.n	800b668 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b654:	4b92      	ldr	r3, [pc, #584]	; (800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b658:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800b65c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b660:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b662:	4a8f      	ldr	r2, [pc, #572]	; (800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b664:	430b      	orrs	r3, r1
 800b666:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b668:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b670:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800b674:	643b      	str	r3, [r7, #64]	; 0x40
 800b676:	2300      	movs	r3, #0
 800b678:	647b      	str	r3, [r7, #68]	; 0x44
 800b67a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b67e:	460b      	mov	r3, r1
 800b680:	4313      	orrs	r3, r2
 800b682:	d00e      	beq.n	800b6a2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b684:	4b86      	ldr	r3, [pc, #536]	; (800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b686:	691b      	ldr	r3, [r3, #16]
 800b688:	4a85      	ldr	r2, [pc, #532]	; (800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b68a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b68e:	6113      	str	r3, [r2, #16]
 800b690:	4b83      	ldr	r3, [pc, #524]	; (800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b692:	6919      	ldr	r1, [r3, #16]
 800b694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b698:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b69c:	4a80      	ldr	r2, [pc, #512]	; (800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b69e:	430b      	orrs	r3, r1
 800b6a0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b6a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6aa:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800b6ae:	63bb      	str	r3, [r7, #56]	; 0x38
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b6b4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b6b8:	460b      	mov	r3, r1
 800b6ba:	4313      	orrs	r3, r2
 800b6bc:	d009      	beq.n	800b6d2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b6be:	4b78      	ldr	r3, [pc, #480]	; (800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b6c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6c2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b6c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6cc:	4a74      	ldr	r2, [pc, #464]	; (800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b6ce:	430b      	orrs	r3, r1
 800b6d0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b6d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6da:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800b6de:	633b      	str	r3, [r7, #48]	; 0x30
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	637b      	str	r3, [r7, #52]	; 0x34
 800b6e4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800b6e8:	460b      	mov	r3, r1
 800b6ea:	4313      	orrs	r3, r2
 800b6ec:	d00a      	beq.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b6ee:	4b6c      	ldr	r3, [pc, #432]	; (800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b6f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6f2:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800b6f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6fe:	4a68      	ldr	r2, [pc, #416]	; (800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b700:	430b      	orrs	r3, r1
 800b702:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70c:	2100      	movs	r1, #0
 800b70e:	62b9      	str	r1, [r7, #40]	; 0x28
 800b710:	f003 0301 	and.w	r3, r3, #1
 800b714:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b716:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800b71a:	460b      	mov	r3, r1
 800b71c:	4313      	orrs	r3, r2
 800b71e:	d011      	beq.n	800b744 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b724:	3308      	adds	r3, #8
 800b726:	2100      	movs	r1, #0
 800b728:	4618      	mov	r0, r3
 800b72a:	f001 f99d 	bl	800ca68 <RCCEx_PLL2_Config>
 800b72e:	4603      	mov	r3, r0
 800b730:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b734:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d003      	beq.n	800b744 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b73c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b740:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b744:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74c:	2100      	movs	r1, #0
 800b74e:	6239      	str	r1, [r7, #32]
 800b750:	f003 0302 	and.w	r3, r3, #2
 800b754:	627b      	str	r3, [r7, #36]	; 0x24
 800b756:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b75a:	460b      	mov	r3, r1
 800b75c:	4313      	orrs	r3, r2
 800b75e:	d011      	beq.n	800b784 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b760:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b764:	3308      	adds	r3, #8
 800b766:	2101      	movs	r1, #1
 800b768:	4618      	mov	r0, r3
 800b76a:	f001 f97d 	bl	800ca68 <RCCEx_PLL2_Config>
 800b76e:	4603      	mov	r3, r0
 800b770:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b774:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d003      	beq.n	800b784 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b77c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b780:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b78c:	2100      	movs	r1, #0
 800b78e:	61b9      	str	r1, [r7, #24]
 800b790:	f003 0304 	and.w	r3, r3, #4
 800b794:	61fb      	str	r3, [r7, #28]
 800b796:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b79a:	460b      	mov	r3, r1
 800b79c:	4313      	orrs	r3, r2
 800b79e:	d011      	beq.n	800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b7a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7a4:	3308      	adds	r3, #8
 800b7a6:	2102      	movs	r1, #2
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f001 f95d 	bl	800ca68 <RCCEx_PLL2_Config>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b7b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d003      	beq.n	800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b7c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7cc:	2100      	movs	r1, #0
 800b7ce:	6139      	str	r1, [r7, #16]
 800b7d0:	f003 0308 	and.w	r3, r3, #8
 800b7d4:	617b      	str	r3, [r7, #20]
 800b7d6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b7da:	460b      	mov	r3, r1
 800b7dc:	4313      	orrs	r3, r2
 800b7de:	d011      	beq.n	800b804 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b7e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7e4:	3328      	adds	r3, #40	; 0x28
 800b7e6:	2100      	movs	r1, #0
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f001 f9ef 	bl	800cbcc <RCCEx_PLL3_Config>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800b7f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d003      	beq.n	800b804 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b800:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b804:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b80c:	2100      	movs	r1, #0
 800b80e:	60b9      	str	r1, [r7, #8]
 800b810:	f003 0310 	and.w	r3, r3, #16
 800b814:	60fb      	str	r3, [r7, #12]
 800b816:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b81a:	460b      	mov	r3, r1
 800b81c:	4313      	orrs	r3, r2
 800b81e:	d011      	beq.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b820:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b824:	3328      	adds	r3, #40	; 0x28
 800b826:	2101      	movs	r1, #1
 800b828:	4618      	mov	r0, r3
 800b82a:	f001 f9cf 	bl	800cbcc <RCCEx_PLL3_Config>
 800b82e:	4603      	mov	r3, r0
 800b830:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b834:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d003      	beq.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b83c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b840:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b844:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84c:	2100      	movs	r1, #0
 800b84e:	6039      	str	r1, [r7, #0]
 800b850:	f003 0320 	and.w	r3, r3, #32
 800b854:	607b      	str	r3, [r7, #4]
 800b856:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b85a:	460b      	mov	r3, r1
 800b85c:	4313      	orrs	r3, r2
 800b85e:	d011      	beq.n	800b884 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b860:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b864:	3328      	adds	r3, #40	; 0x28
 800b866:	2102      	movs	r1, #2
 800b868:	4618      	mov	r0, r3
 800b86a:	f001 f9af 	bl	800cbcc <RCCEx_PLL3_Config>
 800b86e:	4603      	mov	r3, r0
 800b870:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b874:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d003      	beq.n	800b884 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b87c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b880:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800b884:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d101      	bne.n	800b890 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800b88c:	2300      	movs	r3, #0
 800b88e:	e000      	b.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800b890:	2301      	movs	r3, #1
}
 800b892:	4618      	mov	r0, r3
 800b894:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800b898:	46bd      	mov	sp, r7
 800b89a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b89e:	bf00      	nop
 800b8a0:	58024400 	.word	0x58024400

0800b8a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b090      	sub	sp, #64	; 0x40
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b8ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8b2:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800b8b6:	430b      	orrs	r3, r1
 800b8b8:	f040 8094 	bne.w	800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b8bc:	4b9b      	ldr	r3, [pc, #620]	; (800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b8be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8c0:	f003 0307 	and.w	r3, r3, #7
 800b8c4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c8:	2b04      	cmp	r3, #4
 800b8ca:	f200 8087 	bhi.w	800b9dc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b8ce:	a201      	add	r2, pc, #4	; (adr r2, 800b8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b8d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8d4:	0800b8e9 	.word	0x0800b8e9
 800b8d8:	0800b911 	.word	0x0800b911
 800b8dc:	0800b939 	.word	0x0800b939
 800b8e0:	0800b9d5 	.word	0x0800b9d5
 800b8e4:	0800b961 	.word	0x0800b961
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b8e8:	4b90      	ldr	r3, [pc, #576]	; (800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b8f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b8f4:	d108      	bne.n	800b908 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b8f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f000 ff62 	bl	800c7c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b902:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b904:	f000 bc93 	b.w	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b908:	2300      	movs	r3, #0
 800b90a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b90c:	f000 bc8f 	b.w	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b910:	4b86      	ldr	r3, [pc, #536]	; (800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b918:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b91c:	d108      	bne.n	800b930 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b91e:	f107 0318 	add.w	r3, r7, #24
 800b922:	4618      	mov	r0, r3
 800b924:	f000 fca6 	bl	800c274 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b928:	69bb      	ldr	r3, [r7, #24]
 800b92a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b92c:	f000 bc7f 	b.w	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b930:	2300      	movs	r3, #0
 800b932:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b934:	f000 bc7b 	b.w	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b938:	4b7c      	ldr	r3, [pc, #496]	; (800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b940:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b944:	d108      	bne.n	800b958 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b946:	f107 030c 	add.w	r3, r7, #12
 800b94a:	4618      	mov	r0, r3
 800b94c:	f000 fde6 	bl	800c51c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b954:	f000 bc6b 	b.w	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b958:	2300      	movs	r3, #0
 800b95a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b95c:	f000 bc67 	b.w	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b960:	4b72      	ldr	r3, [pc, #456]	; (800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b964:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b968:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b96a:	4b70      	ldr	r3, [pc, #448]	; (800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f003 0304 	and.w	r3, r3, #4
 800b972:	2b04      	cmp	r3, #4
 800b974:	d10c      	bne.n	800b990 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d109      	bne.n	800b990 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b97c:	4b6b      	ldr	r3, [pc, #428]	; (800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	08db      	lsrs	r3, r3, #3
 800b982:	f003 0303 	and.w	r3, r3, #3
 800b986:	4a6a      	ldr	r2, [pc, #424]	; (800bb30 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b988:	fa22 f303 	lsr.w	r3, r2, r3
 800b98c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b98e:	e01f      	b.n	800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b990:	4b66      	ldr	r3, [pc, #408]	; (800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b99c:	d106      	bne.n	800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b99e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b9a4:	d102      	bne.n	800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b9a6:	4b63      	ldr	r3, [pc, #396]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b9a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9aa:	e011      	b.n	800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b9ac:	4b5f      	ldr	r3, [pc, #380]	; (800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9b8:	d106      	bne.n	800b9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b9ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9c0:	d102      	bne.n	800b9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b9c2:	4b5d      	ldr	r3, [pc, #372]	; (800bb38 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b9c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9c6:	e003      	b.n	800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b9cc:	f000 bc2f 	b.w	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b9d0:	f000 bc2d 	b.w	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b9d4:	4b59      	ldr	r3, [pc, #356]	; (800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b9d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9d8:	f000 bc29 	b.w	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9e0:	f000 bc25 	b.w	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b9e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9e8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800b9ec:	430b      	orrs	r3, r1
 800b9ee:	f040 80a7 	bne.w	800bb40 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b9f2:	4b4e      	ldr	r3, [pc, #312]	; (800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b9f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9f6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b9fa:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ba02:	d054      	beq.n	800baae <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800ba04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ba0a:	f200 808b 	bhi.w	800bb24 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ba0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba10:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ba14:	f000 8083 	beq.w	800bb1e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800ba18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba1a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ba1e:	f200 8081 	bhi.w	800bb24 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ba22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ba28:	d02f      	beq.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800ba2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ba30:	d878      	bhi.n	800bb24 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ba32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d004      	beq.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800ba38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ba3e:	d012      	beq.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800ba40:	e070      	b.n	800bb24 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ba42:	4b3a      	ldr	r3, [pc, #232]	; (800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba4e:	d107      	bne.n	800ba60 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ba50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba54:	4618      	mov	r0, r3
 800ba56:	f000 feb5 	bl	800c7c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ba5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba5e:	e3e6      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba60:	2300      	movs	r3, #0
 800ba62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba64:	e3e3      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ba66:	4b31      	ldr	r3, [pc, #196]	; (800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba72:	d107      	bne.n	800ba84 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba74:	f107 0318 	add.w	r3, r7, #24
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f000 fbfb 	bl	800c274 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ba7e:	69bb      	ldr	r3, [r7, #24]
 800ba80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba82:	e3d4      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba84:	2300      	movs	r3, #0
 800ba86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba88:	e3d1      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ba8a:	4b28      	ldr	r3, [pc, #160]	; (800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba96:	d107      	bne.n	800baa8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba98:	f107 030c 	add.w	r3, r7, #12
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f000 fd3d 	bl	800c51c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800baa6:	e3c2      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800baa8:	2300      	movs	r3, #0
 800baaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800baac:	e3bf      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800baae:	4b1f      	ldr	r3, [pc, #124]	; (800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bab2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bab6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bab8:	4b1c      	ldr	r3, [pc, #112]	; (800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f003 0304 	and.w	r3, r3, #4
 800bac0:	2b04      	cmp	r3, #4
 800bac2:	d10c      	bne.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800bac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d109      	bne.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800baca:	4b18      	ldr	r3, [pc, #96]	; (800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	08db      	lsrs	r3, r3, #3
 800bad0:	f003 0303 	and.w	r3, r3, #3
 800bad4:	4a16      	ldr	r2, [pc, #88]	; (800bb30 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800bad6:	fa22 f303 	lsr.w	r3, r2, r3
 800bada:	63fb      	str	r3, [r7, #60]	; 0x3c
 800badc:	e01e      	b.n	800bb1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bade:	4b13      	ldr	r3, [pc, #76]	; (800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800baea:	d106      	bne.n	800bafa <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800baec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800baf2:	d102      	bne.n	800bafa <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800baf4:	4b0f      	ldr	r3, [pc, #60]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800baf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800baf8:	e010      	b.n	800bb1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bafa:	4b0c      	ldr	r3, [pc, #48]	; (800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb06:	d106      	bne.n	800bb16 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800bb08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb0e:	d102      	bne.n	800bb16 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bb10:	4b09      	ldr	r3, [pc, #36]	; (800bb38 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bb12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb14:	e002      	b.n	800bb1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bb16:	2300      	movs	r3, #0
 800bb18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bb1a:	e388      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bb1c:	e387      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bb1e:	4b07      	ldr	r3, [pc, #28]	; (800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bb20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb22:	e384      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bb24:	2300      	movs	r3, #0
 800bb26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb28:	e381      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bb2a:	bf00      	nop
 800bb2c:	58024400 	.word	0x58024400
 800bb30:	03d09000 	.word	0x03d09000
 800bb34:	003d0900 	.word	0x003d0900
 800bb38:	02faf080 	.word	0x02faf080
 800bb3c:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800bb40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb44:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800bb48:	430b      	orrs	r3, r1
 800bb4a:	f040 809c 	bne.w	800bc86 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800bb4e:	4b9e      	ldr	r3, [pc, #632]	; (800bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bb50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb52:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800bb56:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bb58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bb5e:	d054      	beq.n	800bc0a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800bb60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bb66:	f200 808b 	bhi.w	800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bb6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb6c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bb70:	f000 8083 	beq.w	800bc7a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800bb74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb76:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bb7a:	f200 8081 	bhi.w	800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bb7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb84:	d02f      	beq.n	800bbe6 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800bb86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb8c:	d878      	bhi.n	800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bb8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d004      	beq.n	800bb9e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800bb94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bb9a:	d012      	beq.n	800bbc2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800bb9c:	e070      	b.n	800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bb9e:	4b8a      	ldr	r3, [pc, #552]	; (800bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bba6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bbaa:	d107      	bne.n	800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bbac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f000 fe07 	bl	800c7c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bbb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbba:	e338      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbc0:	e335      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bbc2:	4b81      	ldr	r3, [pc, #516]	; (800bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bbca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bbce:	d107      	bne.n	800bbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bbd0:	f107 0318 	add.w	r3, r7, #24
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f000 fb4d 	bl	800c274 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bbda:	69bb      	ldr	r3, [r7, #24]
 800bbdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbde:	e326      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbe4:	e323      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bbe6:	4b78      	ldr	r3, [pc, #480]	; (800bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bbee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbf2:	d107      	bne.n	800bc04 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bbf4:	f107 030c 	add.w	r3, r7, #12
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f000 fc8f 	bl	800c51c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc02:	e314      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc04:	2300      	movs	r3, #0
 800bc06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc08:	e311      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bc0a:	4b6f      	ldr	r3, [pc, #444]	; (800bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bc0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bc12:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bc14:	4b6c      	ldr	r3, [pc, #432]	; (800bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f003 0304 	and.w	r3, r3, #4
 800bc1c:	2b04      	cmp	r3, #4
 800bc1e:	d10c      	bne.n	800bc3a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800bc20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d109      	bne.n	800bc3a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc26:	4b68      	ldr	r3, [pc, #416]	; (800bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	08db      	lsrs	r3, r3, #3
 800bc2c:	f003 0303 	and.w	r3, r3, #3
 800bc30:	4a66      	ldr	r2, [pc, #408]	; (800bdcc <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800bc32:	fa22 f303 	lsr.w	r3, r2, r3
 800bc36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc38:	e01e      	b.n	800bc78 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bc3a:	4b63      	ldr	r3, [pc, #396]	; (800bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc46:	d106      	bne.n	800bc56 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800bc48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc4e:	d102      	bne.n	800bc56 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bc50:	4b5f      	ldr	r3, [pc, #380]	; (800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800bc52:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc54:	e010      	b.n	800bc78 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bc56:	4b5c      	ldr	r3, [pc, #368]	; (800bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc62:	d106      	bne.n	800bc72 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800bc64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc6a:	d102      	bne.n	800bc72 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bc6c:	4b59      	ldr	r3, [pc, #356]	; (800bdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bc6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc70:	e002      	b.n	800bc78 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bc72:	2300      	movs	r3, #0
 800bc74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bc76:	e2da      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bc78:	e2d9      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bc7a:	4b57      	ldr	r3, [pc, #348]	; (800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bc7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc7e:	e2d6      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bc80:	2300      	movs	r3, #0
 800bc82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc84:	e2d3      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800bc86:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc8a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800bc8e:	430b      	orrs	r3, r1
 800bc90:	f040 80a7 	bne.w	800bde2 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800bc94:	4b4c      	ldr	r3, [pc, #304]	; (800bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bc96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc98:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800bc9c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bc9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bca0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bca4:	d055      	beq.n	800bd52 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800bca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bca8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bcac:	f200 8096 	bhi.w	800bddc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bcb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcb2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bcb6:	f000 8084 	beq.w	800bdc2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800bcba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcbc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bcc0:	f200 808c 	bhi.w	800bddc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bcc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bcca:	d030      	beq.n	800bd2e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800bccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bcd2:	f200 8083 	bhi.w	800bddc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bcd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d004      	beq.n	800bce6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800bcdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bce2:	d012      	beq.n	800bd0a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800bce4:	e07a      	b.n	800bddc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bce6:	4b38      	ldr	r3, [pc, #224]	; (800bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bcee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bcf2:	d107      	bne.n	800bd04 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bcf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f000 fd63 	bl	800c7c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bcfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd02:	e294      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd04:	2300      	movs	r3, #0
 800bd06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd08:	e291      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd0a:	4b2f      	ldr	r3, [pc, #188]	; (800bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd16:	d107      	bne.n	800bd28 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd18:	f107 0318 	add.w	r3, r7, #24
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f000 faa9 	bl	800c274 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bd22:	69bb      	ldr	r3, [r7, #24]
 800bd24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd26:	e282      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd2c:	e27f      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bd2e:	4b26      	ldr	r3, [pc, #152]	; (800bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bd36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd3a:	d107      	bne.n	800bd4c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd3c:	f107 030c 	add.w	r3, r7, #12
 800bd40:	4618      	mov	r0, r3
 800bd42:	f000 fbeb 	bl	800c51c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd4a:	e270      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd50:	e26d      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bd52:	4b1d      	ldr	r3, [pc, #116]	; (800bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bd54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bd5a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bd5c:	4b1a      	ldr	r3, [pc, #104]	; (800bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	f003 0304 	and.w	r3, r3, #4
 800bd64:	2b04      	cmp	r3, #4
 800bd66:	d10c      	bne.n	800bd82 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800bd68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d109      	bne.n	800bd82 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bd6e:	4b16      	ldr	r3, [pc, #88]	; (800bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	08db      	lsrs	r3, r3, #3
 800bd74:	f003 0303 	and.w	r3, r3, #3
 800bd78:	4a14      	ldr	r2, [pc, #80]	; (800bdcc <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800bd7a:	fa22 f303 	lsr.w	r3, r2, r3
 800bd7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd80:	e01e      	b.n	800bdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bd82:	4b11      	ldr	r3, [pc, #68]	; (800bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd8e:	d106      	bne.n	800bd9e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800bd90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd96:	d102      	bne.n	800bd9e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bd98:	4b0d      	ldr	r3, [pc, #52]	; (800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800bd9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd9c:	e010      	b.n	800bdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bd9e:	4b0a      	ldr	r3, [pc, #40]	; (800bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bda6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bdaa:	d106      	bne.n	800bdba <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800bdac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdb2:	d102      	bne.n	800bdba <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bdb4:	4b07      	ldr	r3, [pc, #28]	; (800bdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bdb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdb8:	e002      	b.n	800bdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bdbe:	e236      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bdc0:	e235      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bdc2:	4b05      	ldr	r3, [pc, #20]	; (800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bdc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdc6:	e232      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bdc8:	58024400 	.word	0x58024400
 800bdcc:	03d09000 	.word	0x03d09000
 800bdd0:	003d0900 	.word	0x003d0900
 800bdd4:	02faf080 	.word	0x02faf080
 800bdd8:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800bddc:	2300      	movs	r3, #0
 800bdde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bde0:	e225      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800bde2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bde6:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800bdea:	430b      	orrs	r3, r1
 800bdec:	f040 8085 	bne.w	800befa <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800bdf0:	4b9c      	ldr	r3, [pc, #624]	; (800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bdf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdf4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800bdf8:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800bdfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800be00:	d06b      	beq.n	800beda <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800be02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800be08:	d874      	bhi.n	800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800be0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800be10:	d056      	beq.n	800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800be12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800be18:	d86c      	bhi.n	800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800be1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be1c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800be20:	d03b      	beq.n	800be9a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800be22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800be28:	d864      	bhi.n	800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800be2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be30:	d021      	beq.n	800be76 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800be32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be38:	d85c      	bhi.n	800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800be3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d004      	beq.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800be40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be46:	d004      	beq.n	800be52 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800be48:	e054      	b.n	800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800be4a:	f7fe fb5f 	bl	800a50c <HAL_RCC_GetPCLK1Freq>
 800be4e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800be50:	e1ed      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800be52:	4b84      	ldr	r3, [pc, #528]	; (800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be5e:	d107      	bne.n	800be70 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be60:	f107 0318 	add.w	r3, r7, #24
 800be64:	4618      	mov	r0, r3
 800be66:	f000 fa05 	bl	800c274 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800be6a:	69fb      	ldr	r3, [r7, #28]
 800be6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be6e:	e1de      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be70:	2300      	movs	r3, #0
 800be72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be74:	e1db      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800be76:	4b7b      	ldr	r3, [pc, #492]	; (800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be82:	d107      	bne.n	800be94 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be84:	f107 030c 	add.w	r3, r7, #12
 800be88:	4618      	mov	r0, r3
 800be8a:	f000 fb47 	bl	800c51c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be92:	e1cc      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be94:	2300      	movs	r3, #0
 800be96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be98:	e1c9      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800be9a:	4b72      	ldr	r3, [pc, #456]	; (800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	f003 0304 	and.w	r3, r3, #4
 800bea2:	2b04      	cmp	r3, #4
 800bea4:	d109      	bne.n	800beba <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bea6:	4b6f      	ldr	r3, [pc, #444]	; (800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	08db      	lsrs	r3, r3, #3
 800beac:	f003 0303 	and.w	r3, r3, #3
 800beb0:	4a6d      	ldr	r2, [pc, #436]	; (800c068 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800beb2:	fa22 f303 	lsr.w	r3, r2, r3
 800beb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800beb8:	e1b9      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800beba:	2300      	movs	r3, #0
 800bebc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bebe:	e1b6      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bec0:	4b68      	ldr	r3, [pc, #416]	; (800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bec8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800becc:	d102      	bne.n	800bed4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800bece:	4b67      	ldr	r3, [pc, #412]	; (800c06c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800bed0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bed2:	e1ac      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bed4:	2300      	movs	r3, #0
 800bed6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bed8:	e1a9      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800beda:	4b62      	ldr	r3, [pc, #392]	; (800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bee2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bee6:	d102      	bne.n	800beee <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800bee8:	4b61      	ldr	r3, [pc, #388]	; (800c070 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800beea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800beec:	e19f      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800beee:	2300      	movs	r3, #0
 800bef0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bef2:	e19c      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800bef4:	2300      	movs	r3, #0
 800bef6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bef8:	e199      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800befa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800befe:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800bf02:	430b      	orrs	r3, r1
 800bf04:	d173      	bne.n	800bfee <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800bf06:	4b57      	ldr	r3, [pc, #348]	; (800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bf08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bf0e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bf10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf16:	d02f      	beq.n	800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800bf18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf1e:	d863      	bhi.n	800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800bf20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d004      	beq.n	800bf30 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800bf26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf2c:	d012      	beq.n	800bf54 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800bf2e:	e05b      	b.n	800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf30:	4b4c      	ldr	r3, [pc, #304]	; (800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf3c:	d107      	bne.n	800bf4e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf3e:	f107 0318 	add.w	r3, r7, #24
 800bf42:	4618      	mov	r0, r3
 800bf44:	f000 f996 	bl	800c274 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bf48:	69bb      	ldr	r3, [r7, #24]
 800bf4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf4c:	e16f      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf52:	e16c      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bf54:	4b43      	ldr	r3, [pc, #268]	; (800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf60:	d107      	bne.n	800bf72 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf62:	f107 030c 	add.w	r3, r7, #12
 800bf66:	4618      	mov	r0, r3
 800bf68:	f000 fad8 	bl	800c51c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf70:	e15d      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf72:	2300      	movs	r3, #0
 800bf74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf76:	e15a      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bf78:	4b3a      	ldr	r3, [pc, #232]	; (800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bf7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bf80:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bf82:	4b38      	ldr	r3, [pc, #224]	; (800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f003 0304 	and.w	r3, r3, #4
 800bf8a:	2b04      	cmp	r3, #4
 800bf8c:	d10c      	bne.n	800bfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800bf8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d109      	bne.n	800bfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf94:	4b33      	ldr	r3, [pc, #204]	; (800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	08db      	lsrs	r3, r3, #3
 800bf9a:	f003 0303 	and.w	r3, r3, #3
 800bf9e:	4a32      	ldr	r2, [pc, #200]	; (800c068 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800bfa0:	fa22 f303 	lsr.w	r3, r2, r3
 800bfa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfa6:	e01e      	b.n	800bfe6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bfa8:	4b2e      	ldr	r3, [pc, #184]	; (800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfb4:	d106      	bne.n	800bfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800bfb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bfbc:	d102      	bne.n	800bfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bfbe:	4b2b      	ldr	r3, [pc, #172]	; (800c06c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800bfc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfc2:	e010      	b.n	800bfe6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bfc4:	4b27      	ldr	r3, [pc, #156]	; (800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bfd0:	d106      	bne.n	800bfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800bfd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfd8:	d102      	bne.n	800bfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bfda:	4b25      	ldr	r3, [pc, #148]	; (800c070 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800bfdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfde:	e002      	b.n	800bfe6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bfe4:	e123      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bfe6:	e122      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfec:	e11f      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800bfee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bff2:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800bff6:	430b      	orrs	r3, r1
 800bff8:	d13c      	bne.n	800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800bffa:	4b1a      	ldr	r3, [pc, #104]	; (800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c002:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c006:	2b00      	cmp	r3, #0
 800c008:	d004      	beq.n	800c014 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800c00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c00c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c010:	d012      	beq.n	800c038 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800c012:	e023      	b.n	800c05c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c014:	4b13      	ldr	r3, [pc, #76]	; (800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c01c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c020:	d107      	bne.n	800c032 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c026:	4618      	mov	r0, r3
 800c028:	f000 fbcc 	bl	800c7c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c02e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c030:	e0fd      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c032:	2300      	movs	r3, #0
 800c034:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c036:	e0fa      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c038:	4b0a      	ldr	r3, [pc, #40]	; (800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c040:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c044:	d107      	bne.n	800c056 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c046:	f107 0318 	add.w	r3, r7, #24
 800c04a:	4618      	mov	r0, r3
 800c04c:	f000 f912 	bl	800c274 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c050:	6a3b      	ldr	r3, [r7, #32]
 800c052:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c054:	e0eb      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c056:	2300      	movs	r3, #0
 800c058:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c05a:	e0e8      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c05c:	2300      	movs	r3, #0
 800c05e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c060:	e0e5      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c062:	bf00      	nop
 800c064:	58024400 	.word	0x58024400
 800c068:	03d09000 	.word	0x03d09000
 800c06c:	003d0900 	.word	0x003d0900
 800c070:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c074:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c078:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c07c:	430b      	orrs	r3, r1
 800c07e:	f040 8085 	bne.w	800c18c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c082:	4b6d      	ldr	r3, [pc, #436]	; (800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c086:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c08a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c08e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c092:	d06b      	beq.n	800c16c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800c094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c096:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c09a:	d874      	bhi.n	800c186 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c09e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0a2:	d056      	beq.n	800c152 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800c0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0aa:	d86c      	bhi.n	800c186 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c0b2:	d03b      	beq.n	800c12c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800c0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c0ba:	d864      	bhi.n	800c186 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0c2:	d021      	beq.n	800c108 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0ca:	d85c      	bhi.n	800c186 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d004      	beq.n	800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800c0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c0d8:	d004      	beq.n	800c0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800c0da:	e054      	b.n	800c186 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c0dc:	f000 f8b4 	bl	800c248 <HAL_RCCEx_GetD3PCLK1Freq>
 800c0e0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c0e2:	e0a4      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c0e4:	4b54      	ldr	r3, [pc, #336]	; (800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c0f0:	d107      	bne.n	800c102 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0f2:	f107 0318 	add.w	r3, r7, #24
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f000 f8bc 	bl	800c274 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c0fc:	69fb      	ldr	r3, [r7, #28]
 800c0fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c100:	e095      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c102:	2300      	movs	r3, #0
 800c104:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c106:	e092      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c108:	4b4b      	ldr	r3, [pc, #300]	; (800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c110:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c114:	d107      	bne.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c116:	f107 030c 	add.w	r3, r7, #12
 800c11a:	4618      	mov	r0, r3
 800c11c:	f000 f9fe 	bl	800c51c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c124:	e083      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c126:	2300      	movs	r3, #0
 800c128:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c12a:	e080      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c12c:	4b42      	ldr	r3, [pc, #264]	; (800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	f003 0304 	and.w	r3, r3, #4
 800c134:	2b04      	cmp	r3, #4
 800c136:	d109      	bne.n	800c14c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c138:	4b3f      	ldr	r3, [pc, #252]	; (800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	08db      	lsrs	r3, r3, #3
 800c13e:	f003 0303 	and.w	r3, r3, #3
 800c142:	4a3e      	ldr	r2, [pc, #248]	; (800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c144:	fa22 f303 	lsr.w	r3, r2, r3
 800c148:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c14a:	e070      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c14c:	2300      	movs	r3, #0
 800c14e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c150:	e06d      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c152:	4b39      	ldr	r3, [pc, #228]	; (800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c15a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c15e:	d102      	bne.n	800c166 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800c160:	4b37      	ldr	r3, [pc, #220]	; (800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c162:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c164:	e063      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c166:	2300      	movs	r3, #0
 800c168:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c16a:	e060      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c16c:	4b32      	ldr	r3, [pc, #200]	; (800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c174:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c178:	d102      	bne.n	800c180 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800c17a:	4b32      	ldr	r3, [pc, #200]	; (800c244 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c17c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c17e:	e056      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c180:	2300      	movs	r3, #0
 800c182:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c184:	e053      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c186:	2300      	movs	r3, #0
 800c188:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c18a:	e050      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c18c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c190:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c194:	430b      	orrs	r3, r1
 800c196:	d148      	bne.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c198:	4b27      	ldr	r3, [pc, #156]	; (800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c19a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c19c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c1a0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1a8:	d02a      	beq.n	800c200 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1b0:	d838      	bhi.n	800c224 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c1b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d004      	beq.n	800c1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c1be:	d00d      	beq.n	800c1dc <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c1c0:	e030      	b.n	800c224 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c1c2:	4b1d      	ldr	r3, [pc, #116]	; (800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1ce:	d102      	bne.n	800c1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800c1d0:	4b1c      	ldr	r3, [pc, #112]	; (800c244 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c1d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1d4:	e02b      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1da:	e028      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c1dc:	4b16      	ldr	r3, [pc, #88]	; (800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c1e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c1e8:	d107      	bne.n	800c1fa <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c1ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f000 fae8 	bl	800c7c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1f8:	e019      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1fe:	e016      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c200:	4b0d      	ldr	r3, [pc, #52]	; (800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c208:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c20c:	d107      	bne.n	800c21e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c20e:	f107 0318 	add.w	r3, r7, #24
 800c212:	4618      	mov	r0, r3
 800c214:	f000 f82e 	bl	800c274 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c218:	69fb      	ldr	r3, [r7, #28]
 800c21a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c21c:	e007      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c21e:	2300      	movs	r3, #0
 800c220:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c222:	e004      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c224:	2300      	movs	r3, #0
 800c226:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c228:	e001      	b.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800c22a:	2300      	movs	r3, #0
 800c22c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c22e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c230:	4618      	mov	r0, r3
 800c232:	3740      	adds	r7, #64	; 0x40
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}
 800c238:	58024400 	.word	0x58024400
 800c23c:	03d09000 	.word	0x03d09000
 800c240:	003d0900 	.word	0x003d0900
 800c244:	02faf080 	.word	0x02faf080

0800c248 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c24c:	f7fe f92e 	bl	800a4ac <HAL_RCC_GetHCLKFreq>
 800c250:	4602      	mov	r2, r0
 800c252:	4b06      	ldr	r3, [pc, #24]	; (800c26c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c254:	6a1b      	ldr	r3, [r3, #32]
 800c256:	091b      	lsrs	r3, r3, #4
 800c258:	f003 0307 	and.w	r3, r3, #7
 800c25c:	4904      	ldr	r1, [pc, #16]	; (800c270 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c25e:	5ccb      	ldrb	r3, [r1, r3]
 800c260:	f003 031f 	and.w	r3, r3, #31
 800c264:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c268:	4618      	mov	r0, r3
 800c26a:	bd80      	pop	{r7, pc}
 800c26c:	58024400 	.word	0x58024400
 800c270:	080181b8 	.word	0x080181b8

0800c274 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c274:	b480      	push	{r7}
 800c276:	b089      	sub	sp, #36	; 0x24
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c27c:	4ba1      	ldr	r3, [pc, #644]	; (800c504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c27e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c280:	f003 0303 	and.w	r3, r3, #3
 800c284:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c286:	4b9f      	ldr	r3, [pc, #636]	; (800c504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c28a:	0b1b      	lsrs	r3, r3, #12
 800c28c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c290:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c292:	4b9c      	ldr	r3, [pc, #624]	; (800c504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c296:	091b      	lsrs	r3, r3, #4
 800c298:	f003 0301 	and.w	r3, r3, #1
 800c29c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c29e:	4b99      	ldr	r3, [pc, #612]	; (800c504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2a2:	08db      	lsrs	r3, r3, #3
 800c2a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c2a8:	693a      	ldr	r2, [r7, #16]
 800c2aa:	fb02 f303 	mul.w	r3, r2, r3
 800c2ae:	ee07 3a90 	vmov	s15, r3
 800c2b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	f000 8111 	beq.w	800c4e4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c2c2:	69bb      	ldr	r3, [r7, #24]
 800c2c4:	2b02      	cmp	r3, #2
 800c2c6:	f000 8083 	beq.w	800c3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c2ca:	69bb      	ldr	r3, [r7, #24]
 800c2cc:	2b02      	cmp	r3, #2
 800c2ce:	f200 80a1 	bhi.w	800c414 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c2d2:	69bb      	ldr	r3, [r7, #24]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d003      	beq.n	800c2e0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c2d8:	69bb      	ldr	r3, [r7, #24]
 800c2da:	2b01      	cmp	r3, #1
 800c2dc:	d056      	beq.n	800c38c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c2de:	e099      	b.n	800c414 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c2e0:	4b88      	ldr	r3, [pc, #544]	; (800c504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f003 0320 	and.w	r3, r3, #32
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d02d      	beq.n	800c348 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c2ec:	4b85      	ldr	r3, [pc, #532]	; (800c504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	08db      	lsrs	r3, r3, #3
 800c2f2:	f003 0303 	and.w	r3, r3, #3
 800c2f6:	4a84      	ldr	r2, [pc, #528]	; (800c508 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c2f8:	fa22 f303 	lsr.w	r3, r2, r3
 800c2fc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	ee07 3a90 	vmov	s15, r3
 800c304:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	ee07 3a90 	vmov	s15, r3
 800c30e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c316:	4b7b      	ldr	r3, [pc, #492]	; (800c504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c31a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c31e:	ee07 3a90 	vmov	s15, r3
 800c322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c326:	ed97 6a03 	vldr	s12, [r7, #12]
 800c32a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c50c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c32e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c336:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c33a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c33e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c342:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c346:	e087      	b.n	800c458 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	ee07 3a90 	vmov	s15, r3
 800c34e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c352:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c510 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c35a:	4b6a      	ldr	r3, [pc, #424]	; (800c504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c35c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c35e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c362:	ee07 3a90 	vmov	s15, r3
 800c366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c36a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c36e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c50c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c37a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c37e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c382:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c386:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c38a:	e065      	b.n	800c458 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	ee07 3a90 	vmov	s15, r3
 800c392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c396:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c514 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c39a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c39e:	4b59      	ldr	r3, [pc, #356]	; (800c504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c3a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3a6:	ee07 3a90 	vmov	s15, r3
 800c3aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3b2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c50c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c3b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c3c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c3ce:	e043      	b.n	800c458 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c3d0:	697b      	ldr	r3, [r7, #20]
 800c3d2:	ee07 3a90 	vmov	s15, r3
 800c3d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3da:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c518 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c3de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3e2:	4b48      	ldr	r3, [pc, #288]	; (800c504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c3e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3ea:	ee07 3a90 	vmov	s15, r3
 800c3ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3f6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c50c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c3fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c40a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c40e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c412:	e021      	b.n	800c458 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c414:	697b      	ldr	r3, [r7, #20]
 800c416:	ee07 3a90 	vmov	s15, r3
 800c41a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c41e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c514 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c426:	4b37      	ldr	r3, [pc, #220]	; (800c504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c42a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c42e:	ee07 3a90 	vmov	s15, r3
 800c432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c436:	ed97 6a03 	vldr	s12, [r7, #12]
 800c43a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c50c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c43e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c446:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c44a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c44e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c452:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c456:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c458:	4b2a      	ldr	r3, [pc, #168]	; (800c504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c45a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c45c:	0a5b      	lsrs	r3, r3, #9
 800c45e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c462:	ee07 3a90 	vmov	s15, r3
 800c466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c46a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c46e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c472:	edd7 6a07 	vldr	s13, [r7, #28]
 800c476:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c47a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c47e:	ee17 2a90 	vmov	r2, s15
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c486:	4b1f      	ldr	r3, [pc, #124]	; (800c504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c48a:	0c1b      	lsrs	r3, r3, #16
 800c48c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c490:	ee07 3a90 	vmov	s15, r3
 800c494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c498:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c49c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c4a0:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4ac:	ee17 2a90 	vmov	r2, s15
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c4b4:	4b13      	ldr	r3, [pc, #76]	; (800c504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4b8:	0e1b      	lsrs	r3, r3, #24
 800c4ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4be:	ee07 3a90 	vmov	s15, r3
 800c4c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c4ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c4ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4da:	ee17 2a90 	vmov	r2, s15
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c4e2:	e008      	b.n	800c4f6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	609a      	str	r2, [r3, #8]
}
 800c4f6:	bf00      	nop
 800c4f8:	3724      	adds	r7, #36	; 0x24
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c500:	4770      	bx	lr
 800c502:	bf00      	nop
 800c504:	58024400 	.word	0x58024400
 800c508:	03d09000 	.word	0x03d09000
 800c50c:	46000000 	.word	0x46000000
 800c510:	4c742400 	.word	0x4c742400
 800c514:	4a742400 	.word	0x4a742400
 800c518:	4c3ebc20 	.word	0x4c3ebc20

0800c51c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c51c:	b480      	push	{r7}
 800c51e:	b089      	sub	sp, #36	; 0x24
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c524:	4ba1      	ldr	r3, [pc, #644]	; (800c7ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c528:	f003 0303 	and.w	r3, r3, #3
 800c52c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c52e:	4b9f      	ldr	r3, [pc, #636]	; (800c7ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c532:	0d1b      	lsrs	r3, r3, #20
 800c534:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c538:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c53a:	4b9c      	ldr	r3, [pc, #624]	; (800c7ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c53c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c53e:	0a1b      	lsrs	r3, r3, #8
 800c540:	f003 0301 	and.w	r3, r3, #1
 800c544:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c546:	4b99      	ldr	r3, [pc, #612]	; (800c7ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c54a:	08db      	lsrs	r3, r3, #3
 800c54c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c550:	693a      	ldr	r2, [r7, #16]
 800c552:	fb02 f303 	mul.w	r3, r2, r3
 800c556:	ee07 3a90 	vmov	s15, r3
 800c55a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c55e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	2b00      	cmp	r3, #0
 800c566:	f000 8111 	beq.w	800c78c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c56a:	69bb      	ldr	r3, [r7, #24]
 800c56c:	2b02      	cmp	r3, #2
 800c56e:	f000 8083 	beq.w	800c678 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c572:	69bb      	ldr	r3, [r7, #24]
 800c574:	2b02      	cmp	r3, #2
 800c576:	f200 80a1 	bhi.w	800c6bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c57a:	69bb      	ldr	r3, [r7, #24]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d003      	beq.n	800c588 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c580:	69bb      	ldr	r3, [r7, #24]
 800c582:	2b01      	cmp	r3, #1
 800c584:	d056      	beq.n	800c634 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c586:	e099      	b.n	800c6bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c588:	4b88      	ldr	r3, [pc, #544]	; (800c7ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	f003 0320 	and.w	r3, r3, #32
 800c590:	2b00      	cmp	r3, #0
 800c592:	d02d      	beq.n	800c5f0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c594:	4b85      	ldr	r3, [pc, #532]	; (800c7ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	08db      	lsrs	r3, r3, #3
 800c59a:	f003 0303 	and.w	r3, r3, #3
 800c59e:	4a84      	ldr	r2, [pc, #528]	; (800c7b0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c5a0:	fa22 f303 	lsr.w	r3, r2, r3
 800c5a4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	ee07 3a90 	vmov	s15, r3
 800c5ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	ee07 3a90 	vmov	s15, r3
 800c5b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5be:	4b7b      	ldr	r3, [pc, #492]	; (800c7ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c5c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5c6:	ee07 3a90 	vmov	s15, r3
 800c5ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c5d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c5ee:	e087      	b.n	800c700 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	ee07 3a90 	vmov	s15, r3
 800c5f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c7b8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c5fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c602:	4b6a      	ldr	r3, [pc, #424]	; (800c7ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c60a:	ee07 3a90 	vmov	s15, r3
 800c60e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c612:	ed97 6a03 	vldr	s12, [r7, #12]
 800c616:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c61a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c61e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c62a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c62e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c632:	e065      	b.n	800c700 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	ee07 3a90 	vmov	s15, r3
 800c63a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c63e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c646:	4b59      	ldr	r3, [pc, #356]	; (800c7ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c64a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c64e:	ee07 3a90 	vmov	s15, r3
 800c652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c656:	ed97 6a03 	vldr	s12, [r7, #12]
 800c65a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c65e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c66a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c66e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c672:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c676:	e043      	b.n	800c700 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	ee07 3a90 	vmov	s15, r3
 800c67e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c682:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c7c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c68a:	4b48      	ldr	r3, [pc, #288]	; (800c7ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c68c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c68e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c692:	ee07 3a90 	vmov	s15, r3
 800c696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c69a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c69e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c6a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c6ba:	e021      	b.n	800c700 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	ee07 3a90 	vmov	s15, r3
 800c6c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c6ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6ce:	4b37      	ldr	r3, [pc, #220]	; (800c7ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6d6:	ee07 3a90 	vmov	s15, r3
 800c6da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6de:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c6e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c6fe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c700:	4b2a      	ldr	r3, [pc, #168]	; (800c7ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c704:	0a5b      	lsrs	r3, r3, #9
 800c706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c70a:	ee07 3a90 	vmov	s15, r3
 800c70e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c712:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c716:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c71a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c71e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c722:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c726:	ee17 2a90 	vmov	r2, s15
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c72e:	4b1f      	ldr	r3, [pc, #124]	; (800c7ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c732:	0c1b      	lsrs	r3, r3, #16
 800c734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c738:	ee07 3a90 	vmov	s15, r3
 800c73c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c740:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c744:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c748:	edd7 6a07 	vldr	s13, [r7, #28]
 800c74c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c750:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c754:	ee17 2a90 	vmov	r2, s15
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c75c:	4b13      	ldr	r3, [pc, #76]	; (800c7ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c75e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c760:	0e1b      	lsrs	r3, r3, #24
 800c762:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c766:	ee07 3a90 	vmov	s15, r3
 800c76a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c76e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c772:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c776:	edd7 6a07 	vldr	s13, [r7, #28]
 800c77a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c77e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c782:	ee17 2a90 	vmov	r2, s15
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c78a:	e008      	b.n	800c79e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2200      	movs	r2, #0
 800c790:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2200      	movs	r2, #0
 800c796:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2200      	movs	r2, #0
 800c79c:	609a      	str	r2, [r3, #8]
}
 800c79e:	bf00      	nop
 800c7a0:	3724      	adds	r7, #36	; 0x24
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a8:	4770      	bx	lr
 800c7aa:	bf00      	nop
 800c7ac:	58024400 	.word	0x58024400
 800c7b0:	03d09000 	.word	0x03d09000
 800c7b4:	46000000 	.word	0x46000000
 800c7b8:	4c742400 	.word	0x4c742400
 800c7bc:	4a742400 	.word	0x4a742400
 800c7c0:	4c3ebc20 	.word	0x4c3ebc20

0800c7c4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b089      	sub	sp, #36	; 0x24
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c7cc:	4ba0      	ldr	r3, [pc, #640]	; (800ca50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c7ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7d0:	f003 0303 	and.w	r3, r3, #3
 800c7d4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c7d6:	4b9e      	ldr	r3, [pc, #632]	; (800ca50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c7d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7da:	091b      	lsrs	r3, r3, #4
 800c7dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c7e0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c7e2:	4b9b      	ldr	r3, [pc, #620]	; (800ca50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c7e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7e6:	f003 0301 	and.w	r3, r3, #1
 800c7ea:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c7ec:	4b98      	ldr	r3, [pc, #608]	; (800ca50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c7ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7f0:	08db      	lsrs	r3, r3, #3
 800c7f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c7f6:	693a      	ldr	r2, [r7, #16]
 800c7f8:	fb02 f303 	mul.w	r3, r2, r3
 800c7fc:	ee07 3a90 	vmov	s15, r3
 800c800:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c804:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c808:	697b      	ldr	r3, [r7, #20]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	f000 8111 	beq.w	800ca32 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c810:	69bb      	ldr	r3, [r7, #24]
 800c812:	2b02      	cmp	r3, #2
 800c814:	f000 8083 	beq.w	800c91e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c818:	69bb      	ldr	r3, [r7, #24]
 800c81a:	2b02      	cmp	r3, #2
 800c81c:	f200 80a1 	bhi.w	800c962 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c820:	69bb      	ldr	r3, [r7, #24]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d003      	beq.n	800c82e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c826:	69bb      	ldr	r3, [r7, #24]
 800c828:	2b01      	cmp	r3, #1
 800c82a:	d056      	beq.n	800c8da <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c82c:	e099      	b.n	800c962 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c82e:	4b88      	ldr	r3, [pc, #544]	; (800ca50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	f003 0320 	and.w	r3, r3, #32
 800c836:	2b00      	cmp	r3, #0
 800c838:	d02d      	beq.n	800c896 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c83a:	4b85      	ldr	r3, [pc, #532]	; (800ca50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	08db      	lsrs	r3, r3, #3
 800c840:	f003 0303 	and.w	r3, r3, #3
 800c844:	4a83      	ldr	r2, [pc, #524]	; (800ca54 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c846:	fa22 f303 	lsr.w	r3, r2, r3
 800c84a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	ee07 3a90 	vmov	s15, r3
 800c852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	ee07 3a90 	vmov	s15, r3
 800c85c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c860:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c864:	4b7a      	ldr	r3, [pc, #488]	; (800ca50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c86c:	ee07 3a90 	vmov	s15, r3
 800c870:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c874:	ed97 6a03 	vldr	s12, [r7, #12]
 800c878:	eddf 5a77 	vldr	s11, [pc, #476]	; 800ca58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c87c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c880:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c884:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c888:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c88c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c890:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c894:	e087      	b.n	800c9a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	ee07 3a90 	vmov	s15, r3
 800c89c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8a0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800ca5c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c8a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8a8:	4b69      	ldr	r3, [pc, #420]	; (800ca50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c8aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8b0:	ee07 3a90 	vmov	s15, r3
 800c8b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8b8:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8bc:	eddf 5a66 	vldr	s11, [pc, #408]	; 800ca58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c8c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c8d8:	e065      	b.n	800c9a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c8da:	697b      	ldr	r3, [r7, #20]
 800c8dc:	ee07 3a90 	vmov	s15, r3
 800c8e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8e4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800ca60 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c8e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8ec:	4b58      	ldr	r3, [pc, #352]	; (800ca50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c8ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8f4:	ee07 3a90 	vmov	s15, r3
 800c8f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8fc:	ed97 6a03 	vldr	s12, [r7, #12]
 800c900:	eddf 5a55 	vldr	s11, [pc, #340]	; 800ca58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c904:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c908:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c90c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c910:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c914:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c918:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c91c:	e043      	b.n	800c9a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c91e:	697b      	ldr	r3, [r7, #20]
 800c920:	ee07 3a90 	vmov	s15, r3
 800c924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c928:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800ca64 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c92c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c930:	4b47      	ldr	r3, [pc, #284]	; (800ca50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c938:	ee07 3a90 	vmov	s15, r3
 800c93c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c940:	ed97 6a03 	vldr	s12, [r7, #12]
 800c944:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ca58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c948:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c94c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c950:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c954:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c95c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c960:	e021      	b.n	800c9a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	ee07 3a90 	vmov	s15, r3
 800c968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c96c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800ca5c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c970:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c974:	4b36      	ldr	r3, [pc, #216]	; (800ca50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c97c:	ee07 3a90 	vmov	s15, r3
 800c980:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c984:	ed97 6a03 	vldr	s12, [r7, #12]
 800c988:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ca58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c98c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c990:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c994:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c998:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c99c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9a4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c9a6:	4b2a      	ldr	r3, [pc, #168]	; (800ca50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c9a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9aa:	0a5b      	lsrs	r3, r3, #9
 800c9ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9b0:	ee07 3a90 	vmov	s15, r3
 800c9b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c9bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c9c0:	edd7 6a07 	vldr	s13, [r7, #28]
 800c9c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c9c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9cc:	ee17 2a90 	vmov	r2, s15
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c9d4:	4b1e      	ldr	r3, [pc, #120]	; (800ca50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c9d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9d8:	0c1b      	lsrs	r3, r3, #16
 800c9da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9de:	ee07 3a90 	vmov	s15, r3
 800c9e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c9ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c9ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800c9f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c9f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9fa:	ee17 2a90 	vmov	r2, s15
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ca02:	4b13      	ldr	r3, [pc, #76]	; (800ca50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca06:	0e1b      	lsrs	r3, r3, #24
 800ca08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca0c:	ee07 3a90 	vmov	s15, r3
 800ca10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca18:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca1c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca28:	ee17 2a90 	vmov	r2, s15
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ca30:	e008      	b.n	800ca44 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2200      	movs	r2, #0
 800ca36:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2200      	movs	r2, #0
 800ca42:	609a      	str	r2, [r3, #8]
}
 800ca44:	bf00      	nop
 800ca46:	3724      	adds	r7, #36	; 0x24
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4e:	4770      	bx	lr
 800ca50:	58024400 	.word	0x58024400
 800ca54:	03d09000 	.word	0x03d09000
 800ca58:	46000000 	.word	0x46000000
 800ca5c:	4c742400 	.word	0x4c742400
 800ca60:	4a742400 	.word	0x4a742400
 800ca64:	4c3ebc20 	.word	0x4c3ebc20

0800ca68 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b084      	sub	sp, #16
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
 800ca70:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ca72:	2300      	movs	r3, #0
 800ca74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ca76:	4b53      	ldr	r3, [pc, #332]	; (800cbc4 <RCCEx_PLL2_Config+0x15c>)
 800ca78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca7a:	f003 0303 	and.w	r3, r3, #3
 800ca7e:	2b03      	cmp	r3, #3
 800ca80:	d101      	bne.n	800ca86 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ca82:	2301      	movs	r3, #1
 800ca84:	e099      	b.n	800cbba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ca86:	4b4f      	ldr	r3, [pc, #316]	; (800cbc4 <RCCEx_PLL2_Config+0x15c>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	4a4e      	ldr	r2, [pc, #312]	; (800cbc4 <RCCEx_PLL2_Config+0x15c>)
 800ca8c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ca90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca92:	f7f6 fe93 	bl	80037bc <HAL_GetTick>
 800ca96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ca98:	e008      	b.n	800caac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ca9a:	f7f6 fe8f 	bl	80037bc <HAL_GetTick>
 800ca9e:	4602      	mov	r2, r0
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	1ad3      	subs	r3, r2, r3
 800caa4:	2b02      	cmp	r3, #2
 800caa6:	d901      	bls.n	800caac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800caa8:	2303      	movs	r3, #3
 800caaa:	e086      	b.n	800cbba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800caac:	4b45      	ldr	r3, [pc, #276]	; (800cbc4 <RCCEx_PLL2_Config+0x15c>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d1f0      	bne.n	800ca9a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cab8:	4b42      	ldr	r3, [pc, #264]	; (800cbc4 <RCCEx_PLL2_Config+0x15c>)
 800caba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cabc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	031b      	lsls	r3, r3, #12
 800cac6:	493f      	ldr	r1, [pc, #252]	; (800cbc4 <RCCEx_PLL2_Config+0x15c>)
 800cac8:	4313      	orrs	r3, r2
 800caca:	628b      	str	r3, [r1, #40]	; 0x28
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	685b      	ldr	r3, [r3, #4]
 800cad0:	3b01      	subs	r3, #1
 800cad2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	689b      	ldr	r3, [r3, #8]
 800cada:	3b01      	subs	r3, #1
 800cadc:	025b      	lsls	r3, r3, #9
 800cade:	b29b      	uxth	r3, r3
 800cae0:	431a      	orrs	r2, r3
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	68db      	ldr	r3, [r3, #12]
 800cae6:	3b01      	subs	r3, #1
 800cae8:	041b      	lsls	r3, r3, #16
 800caea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800caee:	431a      	orrs	r2, r3
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	691b      	ldr	r3, [r3, #16]
 800caf4:	3b01      	subs	r3, #1
 800caf6:	061b      	lsls	r3, r3, #24
 800caf8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cafc:	4931      	ldr	r1, [pc, #196]	; (800cbc4 <RCCEx_PLL2_Config+0x15c>)
 800cafe:	4313      	orrs	r3, r2
 800cb00:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cb02:	4b30      	ldr	r3, [pc, #192]	; (800cbc4 <RCCEx_PLL2_Config+0x15c>)
 800cb04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb06:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	695b      	ldr	r3, [r3, #20]
 800cb0e:	492d      	ldr	r1, [pc, #180]	; (800cbc4 <RCCEx_PLL2_Config+0x15c>)
 800cb10:	4313      	orrs	r3, r2
 800cb12:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cb14:	4b2b      	ldr	r3, [pc, #172]	; (800cbc4 <RCCEx_PLL2_Config+0x15c>)
 800cb16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb18:	f023 0220 	bic.w	r2, r3, #32
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	699b      	ldr	r3, [r3, #24]
 800cb20:	4928      	ldr	r1, [pc, #160]	; (800cbc4 <RCCEx_PLL2_Config+0x15c>)
 800cb22:	4313      	orrs	r3, r2
 800cb24:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cb26:	4b27      	ldr	r3, [pc, #156]	; (800cbc4 <RCCEx_PLL2_Config+0x15c>)
 800cb28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb2a:	4a26      	ldr	r2, [pc, #152]	; (800cbc4 <RCCEx_PLL2_Config+0x15c>)
 800cb2c:	f023 0310 	bic.w	r3, r3, #16
 800cb30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cb32:	4b24      	ldr	r3, [pc, #144]	; (800cbc4 <RCCEx_PLL2_Config+0x15c>)
 800cb34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cb36:	4b24      	ldr	r3, [pc, #144]	; (800cbc8 <RCCEx_PLL2_Config+0x160>)
 800cb38:	4013      	ands	r3, r2
 800cb3a:	687a      	ldr	r2, [r7, #4]
 800cb3c:	69d2      	ldr	r2, [r2, #28]
 800cb3e:	00d2      	lsls	r2, r2, #3
 800cb40:	4920      	ldr	r1, [pc, #128]	; (800cbc4 <RCCEx_PLL2_Config+0x15c>)
 800cb42:	4313      	orrs	r3, r2
 800cb44:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cb46:	4b1f      	ldr	r3, [pc, #124]	; (800cbc4 <RCCEx_PLL2_Config+0x15c>)
 800cb48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb4a:	4a1e      	ldr	r2, [pc, #120]	; (800cbc4 <RCCEx_PLL2_Config+0x15c>)
 800cb4c:	f043 0310 	orr.w	r3, r3, #16
 800cb50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d106      	bne.n	800cb66 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cb58:	4b1a      	ldr	r3, [pc, #104]	; (800cbc4 <RCCEx_PLL2_Config+0x15c>)
 800cb5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb5c:	4a19      	ldr	r2, [pc, #100]	; (800cbc4 <RCCEx_PLL2_Config+0x15c>)
 800cb5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cb62:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cb64:	e00f      	b.n	800cb86 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	2b01      	cmp	r3, #1
 800cb6a:	d106      	bne.n	800cb7a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cb6c:	4b15      	ldr	r3, [pc, #84]	; (800cbc4 <RCCEx_PLL2_Config+0x15c>)
 800cb6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb70:	4a14      	ldr	r2, [pc, #80]	; (800cbc4 <RCCEx_PLL2_Config+0x15c>)
 800cb72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb76:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cb78:	e005      	b.n	800cb86 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cb7a:	4b12      	ldr	r3, [pc, #72]	; (800cbc4 <RCCEx_PLL2_Config+0x15c>)
 800cb7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb7e:	4a11      	ldr	r2, [pc, #68]	; (800cbc4 <RCCEx_PLL2_Config+0x15c>)
 800cb80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cb84:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cb86:	4b0f      	ldr	r3, [pc, #60]	; (800cbc4 <RCCEx_PLL2_Config+0x15c>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	4a0e      	ldr	r2, [pc, #56]	; (800cbc4 <RCCEx_PLL2_Config+0x15c>)
 800cb8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cb90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb92:	f7f6 fe13 	bl	80037bc <HAL_GetTick>
 800cb96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cb98:	e008      	b.n	800cbac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cb9a:	f7f6 fe0f 	bl	80037bc <HAL_GetTick>
 800cb9e:	4602      	mov	r2, r0
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	1ad3      	subs	r3, r2, r3
 800cba4:	2b02      	cmp	r3, #2
 800cba6:	d901      	bls.n	800cbac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cba8:	2303      	movs	r3, #3
 800cbaa:	e006      	b.n	800cbba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cbac:	4b05      	ldr	r3, [pc, #20]	; (800cbc4 <RCCEx_PLL2_Config+0x15c>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d0f0      	beq.n	800cb9a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cbb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbba:	4618      	mov	r0, r3
 800cbbc:	3710      	adds	r7, #16
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bd80      	pop	{r7, pc}
 800cbc2:	bf00      	nop
 800cbc4:	58024400 	.word	0x58024400
 800cbc8:	ffff0007 	.word	0xffff0007

0800cbcc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b084      	sub	sp, #16
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cbda:	4b53      	ldr	r3, [pc, #332]	; (800cd28 <RCCEx_PLL3_Config+0x15c>)
 800cbdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbde:	f003 0303 	and.w	r3, r3, #3
 800cbe2:	2b03      	cmp	r3, #3
 800cbe4:	d101      	bne.n	800cbea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	e099      	b.n	800cd1e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cbea:	4b4f      	ldr	r3, [pc, #316]	; (800cd28 <RCCEx_PLL3_Config+0x15c>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	4a4e      	ldr	r2, [pc, #312]	; (800cd28 <RCCEx_PLL3_Config+0x15c>)
 800cbf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cbf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cbf6:	f7f6 fde1 	bl	80037bc <HAL_GetTick>
 800cbfa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cbfc:	e008      	b.n	800cc10 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cbfe:	f7f6 fddd 	bl	80037bc <HAL_GetTick>
 800cc02:	4602      	mov	r2, r0
 800cc04:	68bb      	ldr	r3, [r7, #8]
 800cc06:	1ad3      	subs	r3, r2, r3
 800cc08:	2b02      	cmp	r3, #2
 800cc0a:	d901      	bls.n	800cc10 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cc0c:	2303      	movs	r3, #3
 800cc0e:	e086      	b.n	800cd1e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cc10:	4b45      	ldr	r3, [pc, #276]	; (800cd28 <RCCEx_PLL3_Config+0x15c>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d1f0      	bne.n	800cbfe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cc1c:	4b42      	ldr	r3, [pc, #264]	; (800cd28 <RCCEx_PLL3_Config+0x15c>)
 800cc1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc20:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	051b      	lsls	r3, r3, #20
 800cc2a:	493f      	ldr	r1, [pc, #252]	; (800cd28 <RCCEx_PLL3_Config+0x15c>)
 800cc2c:	4313      	orrs	r3, r2
 800cc2e:	628b      	str	r3, [r1, #40]	; 0x28
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	685b      	ldr	r3, [r3, #4]
 800cc34:	3b01      	subs	r3, #1
 800cc36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	689b      	ldr	r3, [r3, #8]
 800cc3e:	3b01      	subs	r3, #1
 800cc40:	025b      	lsls	r3, r3, #9
 800cc42:	b29b      	uxth	r3, r3
 800cc44:	431a      	orrs	r2, r3
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	68db      	ldr	r3, [r3, #12]
 800cc4a:	3b01      	subs	r3, #1
 800cc4c:	041b      	lsls	r3, r3, #16
 800cc4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cc52:	431a      	orrs	r2, r3
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	691b      	ldr	r3, [r3, #16]
 800cc58:	3b01      	subs	r3, #1
 800cc5a:	061b      	lsls	r3, r3, #24
 800cc5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cc60:	4931      	ldr	r1, [pc, #196]	; (800cd28 <RCCEx_PLL3_Config+0x15c>)
 800cc62:	4313      	orrs	r3, r2
 800cc64:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cc66:	4b30      	ldr	r3, [pc, #192]	; (800cd28 <RCCEx_PLL3_Config+0x15c>)
 800cc68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc6a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	695b      	ldr	r3, [r3, #20]
 800cc72:	492d      	ldr	r1, [pc, #180]	; (800cd28 <RCCEx_PLL3_Config+0x15c>)
 800cc74:	4313      	orrs	r3, r2
 800cc76:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cc78:	4b2b      	ldr	r3, [pc, #172]	; (800cd28 <RCCEx_PLL3_Config+0x15c>)
 800cc7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc7c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	699b      	ldr	r3, [r3, #24]
 800cc84:	4928      	ldr	r1, [pc, #160]	; (800cd28 <RCCEx_PLL3_Config+0x15c>)
 800cc86:	4313      	orrs	r3, r2
 800cc88:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cc8a:	4b27      	ldr	r3, [pc, #156]	; (800cd28 <RCCEx_PLL3_Config+0x15c>)
 800cc8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc8e:	4a26      	ldr	r2, [pc, #152]	; (800cd28 <RCCEx_PLL3_Config+0x15c>)
 800cc90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cc96:	4b24      	ldr	r3, [pc, #144]	; (800cd28 <RCCEx_PLL3_Config+0x15c>)
 800cc98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc9a:	4b24      	ldr	r3, [pc, #144]	; (800cd2c <RCCEx_PLL3_Config+0x160>)
 800cc9c:	4013      	ands	r3, r2
 800cc9e:	687a      	ldr	r2, [r7, #4]
 800cca0:	69d2      	ldr	r2, [r2, #28]
 800cca2:	00d2      	lsls	r2, r2, #3
 800cca4:	4920      	ldr	r1, [pc, #128]	; (800cd28 <RCCEx_PLL3_Config+0x15c>)
 800cca6:	4313      	orrs	r3, r2
 800cca8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ccaa:	4b1f      	ldr	r3, [pc, #124]	; (800cd28 <RCCEx_PLL3_Config+0x15c>)
 800ccac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccae:	4a1e      	ldr	r2, [pc, #120]	; (800cd28 <RCCEx_PLL3_Config+0x15c>)
 800ccb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ccb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d106      	bne.n	800ccca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ccbc:	4b1a      	ldr	r3, [pc, #104]	; (800cd28 <RCCEx_PLL3_Config+0x15c>)
 800ccbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccc0:	4a19      	ldr	r2, [pc, #100]	; (800cd28 <RCCEx_PLL3_Config+0x15c>)
 800ccc2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ccc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ccc8:	e00f      	b.n	800ccea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	2b01      	cmp	r3, #1
 800ccce:	d106      	bne.n	800ccde <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ccd0:	4b15      	ldr	r3, [pc, #84]	; (800cd28 <RCCEx_PLL3_Config+0x15c>)
 800ccd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccd4:	4a14      	ldr	r2, [pc, #80]	; (800cd28 <RCCEx_PLL3_Config+0x15c>)
 800ccd6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ccda:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ccdc:	e005      	b.n	800ccea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ccde:	4b12      	ldr	r3, [pc, #72]	; (800cd28 <RCCEx_PLL3_Config+0x15c>)
 800cce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cce2:	4a11      	ldr	r2, [pc, #68]	; (800cd28 <RCCEx_PLL3_Config+0x15c>)
 800cce4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cce8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ccea:	4b0f      	ldr	r3, [pc, #60]	; (800cd28 <RCCEx_PLL3_Config+0x15c>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	4a0e      	ldr	r2, [pc, #56]	; (800cd28 <RCCEx_PLL3_Config+0x15c>)
 800ccf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ccf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ccf6:	f7f6 fd61 	bl	80037bc <HAL_GetTick>
 800ccfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ccfc:	e008      	b.n	800cd10 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ccfe:	f7f6 fd5d 	bl	80037bc <HAL_GetTick>
 800cd02:	4602      	mov	r2, r0
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	1ad3      	subs	r3, r2, r3
 800cd08:	2b02      	cmp	r3, #2
 800cd0a:	d901      	bls.n	800cd10 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cd0c:	2303      	movs	r3, #3
 800cd0e:	e006      	b.n	800cd1e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cd10:	4b05      	ldr	r3, [pc, #20]	; (800cd28 <RCCEx_PLL3_Config+0x15c>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d0f0      	beq.n	800ccfe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cd1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3710      	adds	r7, #16
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}
 800cd26:	bf00      	nop
 800cd28:	58024400 	.word	0x58024400
 800cd2c:	ffff0007 	.word	0xffff0007

0800cd30 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b08a      	sub	sp, #40	; 0x28
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d101      	bne.n	800cd42 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cd3e:	2301      	movs	r3, #1
 800cd40:	e075      	b.n	800ce2e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cd48:	b2db      	uxtb	r3, r3
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d105      	bne.n	800cd5a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2200      	movs	r2, #0
 800cd52:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f7f5 fe9d 	bl	8002a94 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2204      	movs	r2, #4
 800cd5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f000 f868 	bl	800ce38 <HAL_SD_InitCard>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d001      	beq.n	800cd72 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800cd6e:	2301      	movs	r3, #1
 800cd70:	e05d      	b.n	800ce2e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800cd72:	f107 0308 	add.w	r3, r7, #8
 800cd76:	4619      	mov	r1, r3
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f000 fdaf 	bl	800d8dc <HAL_SD_GetCardStatus>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d001      	beq.n	800cd88 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800cd84:	2301      	movs	r3, #1
 800cd86:	e052      	b.n	800ce2e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800cd88:	7e3b      	ldrb	r3, [r7, #24]
 800cd8a:	b2db      	uxtb	r3, r3
 800cd8c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800cd8e:	7e7b      	ldrb	r3, [r7, #25]
 800cd90:	b2db      	uxtb	r3, r3
 800cd92:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	d10a      	bne.n	800cdb2 <HAL_SD_Init+0x82>
 800cd9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d102      	bne.n	800cda8 <HAL_SD_Init+0x78>
 800cda2:	6a3b      	ldr	r3, [r7, #32]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d004      	beq.n	800cdb2 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cdae:	659a      	str	r2, [r3, #88]	; 0x58
 800cdb0:	e00b      	b.n	800cdca <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdb6:	2b01      	cmp	r3, #1
 800cdb8:	d104      	bne.n	800cdc4 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cdc0:	659a      	str	r2, [r3, #88]	; 0x58
 800cdc2:	e002      	b.n	800cdca <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	68db      	ldr	r3, [r3, #12]
 800cdce:	4619      	mov	r1, r3
 800cdd0:	6878      	ldr	r0, [r7, #4]
 800cdd2:	f000 fe6d 	bl	800dab0 <HAL_SD_ConfigWideBusOperation>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d001      	beq.n	800cde0 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800cddc:	2301      	movs	r3, #1
 800cdde:	e026      	b.n	800ce2e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800cde0:	f7f6 fcec 	bl	80037bc <HAL_GetTick>
 800cde4:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800cde6:	e011      	b.n	800ce0c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cde8:	f7f6 fce8 	bl	80037bc <HAL_GetTick>
 800cdec:	4602      	mov	r2, r0
 800cdee:	69fb      	ldr	r3, [r7, #28]
 800cdf0:	1ad3      	subs	r3, r2, r3
 800cdf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdf6:	d109      	bne.n	800ce0c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cdfe:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2201      	movs	r2, #1
 800ce04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800ce08:	2303      	movs	r3, #3
 800ce0a:	e010      	b.n	800ce2e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	f000 ff61 	bl	800dcd4 <HAL_SD_GetCardState>
 800ce12:	4603      	mov	r3, r0
 800ce14:	2b04      	cmp	r3, #4
 800ce16:	d1e7      	bne.n	800cde8 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2200      	movs	r2, #0
 800ce22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2201      	movs	r2, #1
 800ce28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800ce2c:	2300      	movs	r3, #0
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3728      	adds	r7, #40	; 0x28
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
	...

0800ce38 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ce38:	b590      	push	{r4, r7, lr}
 800ce3a:	b08d      	sub	sp, #52	; 0x34
 800ce3c:	af02      	add	r7, sp, #8
 800ce3e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800ce40:	2300      	movs	r3, #0
 800ce42:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800ce44:	2300      	movs	r3, #0
 800ce46:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800ce50:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800ce54:	f04f 0100 	mov.w	r1, #0
 800ce58:	f7fe fd24 	bl	800b8a4 <HAL_RCCEx_GetPeriphCLKFreq>
 800ce5c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800ce5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d109      	bne.n	800ce78 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2201      	movs	r2, #1
 800ce68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ce72:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ce74:	2301      	movs	r3, #1
 800ce76:	e070      	b.n	800cf5a <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800ce78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce7a:	0a1b      	lsrs	r3, r3, #8
 800ce7c:	4a39      	ldr	r2, [pc, #228]	; (800cf64 <HAL_SD_InitCard+0x12c>)
 800ce7e:	fba2 2303 	umull	r2, r3, r2, r3
 800ce82:	091b      	lsrs	r3, r3, #4
 800ce84:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681c      	ldr	r4, [r3, #0]
 800ce8a:	466a      	mov	r2, sp
 800ce8c:	f107 0318 	add.w	r3, r7, #24
 800ce90:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ce94:	e882 0003 	stmia.w	r2, {r0, r1}
 800ce98:	f107 030c 	add.w	r3, r7, #12
 800ce9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ce9e:	4620      	mov	r0, r4
 800cea0:	f004 fe6c 	bl	8011b7c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	4618      	mov	r0, r3
 800ceaa:	f004 feaf 	bl	8011c0c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800ceae:	69fb      	ldr	r3, [r7, #28]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d005      	beq.n	800cec0 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800ceb4:	69fb      	ldr	r3, [r7, #28]
 800ceb6:	005b      	lsls	r3, r3, #1
 800ceb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ceba:	fbb2 f3f3 	udiv	r3, r2, r3
 800cebe:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800cec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d007      	beq.n	800ced6 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800cec6:	4a28      	ldr	r2, [pc, #160]	; (800cf68 <HAL_SD_InitCard+0x130>)
 800cec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceca:	fbb2 f3f3 	udiv	r3, r2, r3
 800cece:	3301      	adds	r3, #1
 800ced0:	4618      	mov	r0, r3
 800ced2:	f7f6 fc7f 	bl	80037d4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f000 ffea 	bl	800deb0 <SD_PowerON>
 800cedc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cede:	6a3b      	ldr	r3, [r7, #32]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d00b      	beq.n	800cefc <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2201      	movs	r2, #1
 800cee8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cef0:	6a3b      	ldr	r3, [r7, #32]
 800cef2:	431a      	orrs	r2, r3
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cef8:	2301      	movs	r3, #1
 800cefa:	e02e      	b.n	800cf5a <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f000 ff09 	bl	800dd14 <SD_InitCard>
 800cf02:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cf04:	6a3b      	ldr	r3, [r7, #32]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d00b      	beq.n	800cf22 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2201      	movs	r2, #1
 800cf0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf16:	6a3b      	ldr	r3, [r7, #32]
 800cf18:	431a      	orrs	r2, r3
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cf1e:	2301      	movs	r3, #1
 800cf20:	e01b      	b.n	800cf5a <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f004 ff04 	bl	8011d38 <SDMMC_CmdBlockLength>
 800cf30:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cf32:	6a3b      	ldr	r3, [r7, #32]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d00f      	beq.n	800cf58 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	4a0b      	ldr	r2, [pc, #44]	; (800cf6c <HAL_SD_InitCard+0x134>)
 800cf3e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf44:	6a3b      	ldr	r3, [r7, #32]
 800cf46:	431a      	orrs	r2, r3
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2201      	movs	r2, #1
 800cf50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800cf54:	2301      	movs	r3, #1
 800cf56:	e000      	b.n	800cf5a <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800cf58:	2300      	movs	r3, #0
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	372c      	adds	r7, #44	; 0x2c
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd90      	pop	{r4, r7, pc}
 800cf62:	bf00      	nop
 800cf64:	014f8b59 	.word	0x014f8b59
 800cf68:	00012110 	.word	0x00012110
 800cf6c:	1fe00fff 	.word	0x1fe00fff

0800cf70 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b08c      	sub	sp, #48	; 0x30
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	60f8      	str	r0, [r7, #12]
 800cf78:	60b9      	str	r1, [r7, #8]
 800cf7a:	607a      	str	r2, [r7, #4]
 800cf7c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800cf82:	68bb      	ldr	r3, [r7, #8]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d107      	bne.n	800cf98 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf8c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cf94:	2301      	movs	r3, #1
 800cf96:	e08d      	b.n	800d0b4 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cf9e:	b2db      	uxtb	r3, r3
 800cfa0:	2b01      	cmp	r3, #1
 800cfa2:	f040 8086 	bne.w	800d0b2 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cfac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	441a      	add	r2, r3
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfb6:	429a      	cmp	r2, r3
 800cfb8:	d907      	bls.n	800cfca <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfbe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	e074      	b.n	800d0b4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	2203      	movs	r2, #3
 800cfce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	68ba      	ldr	r2, [r7, #8]
 800cfde:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	025a      	lsls	r2, r3, #9
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfec:	2b01      	cmp	r3, #1
 800cfee:	d002      	beq.n	800cff6 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800cff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cff2:	025b      	lsls	r3, r3, #9
 800cff4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cff6:	f04f 33ff 	mov.w	r3, #4294967295
 800cffa:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	025b      	lsls	r3, r3, #9
 800d000:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d002:	2390      	movs	r3, #144	; 0x90
 800d004:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d006:	2302      	movs	r3, #2
 800d008:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d00a:	2300      	movs	r3, #0
 800d00c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d00e:	2300      	movs	r3, #0
 800d010:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f107 0210 	add.w	r2, r7, #16
 800d01a:	4611      	mov	r1, r2
 800d01c:	4618      	mov	r0, r3
 800d01e:	f004 fe5f 	bl	8011ce0 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	68da      	ldr	r2, [r3, #12]
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d030:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	68ba      	ldr	r2, [r7, #8]
 800d038:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	2201      	movs	r2, #1
 800d040:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	2b01      	cmp	r3, #1
 800d046:	d90a      	bls.n	800d05e <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	2282      	movs	r2, #130	; 0x82
 800d04c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d054:	4618      	mov	r0, r3
 800d056:	f004 feb5 	bl	8011dc4 <SDMMC_CmdReadMultiBlock>
 800d05a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d05c:	e009      	b.n	800d072 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	2281      	movs	r2, #129	; 0x81
 800d062:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d06a:	4618      	mov	r0, r3
 800d06c:	f004 fe87 	bl	8011d7e <SDMMC_CmdReadSingleBlock>
 800d070:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d074:	2b00      	cmp	r3, #0
 800d076:	d012      	beq.n	800d09e <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	4a0f      	ldr	r2, [pc, #60]	; (800d0bc <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d07e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d086:	431a      	orrs	r2, r3
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	2201      	movs	r2, #1
 800d090:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	2200      	movs	r2, #0
 800d098:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d09a:	2301      	movs	r3, #1
 800d09c:	e00a      	b.n	800d0b4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d0ac:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	e000      	b.n	800d0b4 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d0b2:	2302      	movs	r3, #2
  }
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	3730      	adds	r7, #48	; 0x30
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}
 800d0bc:	1fe00fff 	.word	0x1fe00fff

0800d0c0 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b08c      	sub	sp, #48	; 0x30
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	60f8      	str	r0, [r7, #12]
 800d0c8:	60b9      	str	r1, [r7, #8]
 800d0ca:	607a      	str	r2, [r7, #4]
 800d0cc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d0d2:	68bb      	ldr	r3, [r7, #8]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d107      	bne.n	800d0e8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0dc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d0e4:	2301      	movs	r3, #1
 800d0e6:	e08d      	b.n	800d204 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d0ee:	b2db      	uxtb	r3, r3
 800d0f0:	2b01      	cmp	r3, #1
 800d0f2:	f040 8086 	bne.w	800d202 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d0fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	441a      	add	r2, r3
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d106:	429a      	cmp	r2, r3
 800d108:	d907      	bls.n	800d11a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d10e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d116:	2301      	movs	r3, #1
 800d118:	e074      	b.n	800d204 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	2203      	movs	r2, #3
 800d11e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	2200      	movs	r2, #0
 800d128:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	68ba      	ldr	r2, [r7, #8]
 800d12e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	025a      	lsls	r2, r3, #9
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d13c:	2b01      	cmp	r3, #1
 800d13e:	d002      	beq.n	800d146 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d142:	025b      	lsls	r3, r3, #9
 800d144:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d146:	f04f 33ff 	mov.w	r3, #4294967295
 800d14a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	025b      	lsls	r3, r3, #9
 800d150:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d152:	2390      	movs	r3, #144	; 0x90
 800d154:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d156:	2300      	movs	r3, #0
 800d158:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d15a:	2300      	movs	r3, #0
 800d15c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d15e:	2300      	movs	r3, #0
 800d160:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	f107 0210 	add.w	r2, r7, #16
 800d16a:	4611      	mov	r1, r2
 800d16c:	4618      	mov	r0, r3
 800d16e:	f004 fdb7 	bl	8011ce0 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	68da      	ldr	r2, [r3, #12]
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d180:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	68ba      	ldr	r2, [r7, #8]
 800d188:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	2201      	movs	r2, #1
 800d190:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	2b01      	cmp	r3, #1
 800d196:	d90a      	bls.n	800d1ae <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	22a0      	movs	r2, #160	; 0xa0
 800d19c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f004 fe53 	bl	8011e50 <SDMMC_CmdWriteMultiBlock>
 800d1aa:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d1ac:	e009      	b.n	800d1c2 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	2290      	movs	r2, #144	; 0x90
 800d1b2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f004 fe25 	bl	8011e0a <SDMMC_CmdWriteSingleBlock>
 800d1c0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d012      	beq.n	800d1ee <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	4a0f      	ldr	r2, [pc, #60]	; (800d20c <HAL_SD_WriteBlocks_DMA+0x14c>)
 800d1ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1d6:	431a      	orrs	r2, r3
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	2201      	movs	r2, #1
 800d1e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d1ea:	2301      	movs	r3, #1
 800d1ec:	e00a      	b.n	800d204 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800d1fc:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d1fe:	2300      	movs	r3, #0
 800d200:	e000      	b.n	800d204 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d202:	2302      	movs	r3, #2
  }
}
 800d204:	4618      	mov	r0, r3
 800d206:	3730      	adds	r7, #48	; 0x30
 800d208:	46bd      	mov	sp, r7
 800d20a:	bd80      	pop	{r7, pc}
 800d20c:	1fe00fff 	.word	0x1fe00fff

0800d210 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b084      	sub	sp, #16
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d21c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d224:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d008      	beq.n	800d23e <HAL_SD_IRQHandler+0x2e>
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	f003 0308 	and.w	r3, r3, #8
 800d232:	2b00      	cmp	r3, #0
 800d234:	d003      	beq.n	800d23e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f001 f926 	bl	800e488 <SD_Read_IT>
 800d23c:	e19a      	b.n	800d574 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d248:	2b00      	cmp	r3, #0
 800d24a:	f000 80ac 	beq.w	800d3a6 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d256:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681a      	ldr	r2, [r3, #0]
 800d262:	4b59      	ldr	r3, [pc, #356]	; (800d3c8 <HAL_SD_IRQHandler+0x1b8>)
 800d264:	400b      	ands	r3, r1
 800d266:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d276:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	68da      	ldr	r2, [r3, #12]
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d286:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	f003 0308 	and.w	r3, r3, #8
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d038      	beq.n	800d304 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	f003 0302 	and.w	r3, r3, #2
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d104      	bne.n	800d2a6 <HAL_SD_IRQHandler+0x96>
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	f003 0320 	and.w	r3, r3, #32
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d011      	beq.n	800d2ca <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f004 fdf4 	bl	8011e98 <SDMMC_CmdStopTransfer>
 800d2b0:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d2b2:	68bb      	ldr	r3, [r7, #8]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d008      	beq.n	800d2ca <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	431a      	orrs	r2, r3
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f000 f95b 	bl	800d580 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	4a3f      	ldr	r2, [pc, #252]	; (800d3cc <HAL_SD_IRQHandler+0x1bc>)
 800d2d0:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2201      	movs	r2, #1
 800d2d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2200      	movs	r2, #0
 800d2de:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	f003 0301 	and.w	r3, r3, #1
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d104      	bne.n	800d2f4 <HAL_SD_IRQHandler+0xe4>
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	f003 0302 	and.w	r3, r3, #2
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d003      	beq.n	800d2fc <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f006 fdf5 	bl	8013ee4 <HAL_SD_RxCpltCallback>
 800d2fa:	e13b      	b.n	800d574 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f006 fde7 	bl	8013ed0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d302:	e137      	b.n	800d574 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	f000 8132 	beq.w	800d574 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	2200      	movs	r2, #0
 800d316:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	2200      	movs	r2, #0
 800d31e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	2200      	movs	r2, #0
 800d326:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	f003 0302 	and.w	r3, r3, #2
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d104      	bne.n	800d33c <HAL_SD_IRQHandler+0x12c>
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	f003 0320 	and.w	r3, r3, #32
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d011      	beq.n	800d360 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	4618      	mov	r0, r3
 800d342:	f004 fda9 	bl	8011e98 <SDMMC_CmdStopTransfer>
 800d346:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d008      	beq.n	800d360 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	431a      	orrs	r2, r3
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f000 f910 	bl	800d580 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2201      	movs	r2, #1
 800d364:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	2200      	movs	r2, #0
 800d36c:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	f003 0310 	and.w	r3, r3, #16
 800d374:	2b00      	cmp	r3, #0
 800d376:	d104      	bne.n	800d382 <HAL_SD_IRQHandler+0x172>
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	f003 0320 	and.w	r3, r3, #32
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d002      	beq.n	800d388 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800d382:	6878      	ldr	r0, [r7, #4]
 800d384:	f006 fda4 	bl	8013ed0 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	f003 0301 	and.w	r3, r3, #1
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d105      	bne.n	800d39e <HAL_SD_IRQHandler+0x18e>
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	f003 0302 	and.w	r3, r3, #2
 800d398:	2b00      	cmp	r3, #0
 800d39a:	f000 80eb 	beq.w	800d574 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f006 fda0 	bl	8013ee4 <HAL_SD_RxCpltCallback>
}
 800d3a4:	e0e6      	b.n	800d574 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d00d      	beq.n	800d3d0 <HAL_SD_IRQHandler+0x1c0>
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	f003 0308 	and.w	r3, r3, #8
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d008      	beq.n	800d3d0 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f001 f8a8 	bl	800e514 <SD_Write_IT>
 800d3c4:	e0d6      	b.n	800d574 <HAL_SD_IRQHandler+0x364>
 800d3c6:	bf00      	nop
 800d3c8:	ffff3ec5 	.word	0xffff3ec5
 800d3cc:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3d6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	f000 809d 	beq.w	800d51a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3e6:	f003 0302 	and.w	r3, r3, #2
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d005      	beq.n	800d3fa <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3f2:	f043 0202 	orr.w	r2, r3, #2
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d400:	f003 0308 	and.w	r3, r3, #8
 800d404:	2b00      	cmp	r3, #0
 800d406:	d005      	beq.n	800d414 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d40c:	f043 0208 	orr.w	r2, r3, #8
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d41a:	f003 0320 	and.w	r3, r3, #32
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d005      	beq.n	800d42e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d426:	f043 0220 	orr.w	r2, r3, #32
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d434:	f003 0310 	and.w	r3, r3, #16
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d005      	beq.n	800d448 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d440:	f043 0210 	orr.w	r2, r3, #16
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	4a4b      	ldr	r2, [pc, #300]	; (800d57c <HAL_SD_IRQHandler+0x36c>)
 800d44e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d45e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	68da      	ldr	r2, [r3, #12]
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d46e:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d47e:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	68da      	ldr	r2, [r3, #12]
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d48e:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	4618      	mov	r0, r3
 800d496:	f004 fcff 	bl	8011e98 <SDMMC_CmdStopTransfer>
 800d49a:	4602      	mov	r2, r0
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4a0:	431a      	orrs	r2, r3
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	68da      	ldr	r2, [r3, #12]
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d4b4:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d4be:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	f003 0308 	and.w	r3, r3, #8
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d00a      	beq.n	800d4e0 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	2201      	movs	r2, #1
 800d4ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800d4d8:	6878      	ldr	r0, [r7, #4]
 800d4da:	f000 f851 	bl	800d580 <HAL_SD_ErrorCallback>
}
 800d4de:	e049      	b.n	800d574 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d044      	beq.n	800d574 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d040      	beq.n	800d574 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d500:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	2200      	movs	r2, #0
 800d508:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2201      	movs	r2, #1
 800d50e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	f000 f834 	bl	800d580 <HAL_SD_ErrorCallback>
}
 800d518:	e02c      	b.n	800d574 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d524:	2b00      	cmp	r3, #0
 800d526:	d025      	beq.n	800d574 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d530:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d538:	f003 0304 	and.w	r3, r3, #4
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d10c      	bne.n	800d55a <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	f003 0320 	and.w	r3, r3, #32
 800d546:	2b00      	cmp	r3, #0
 800d548:	d003      	beq.n	800d552 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800d54a:	6878      	ldr	r0, [r7, #4]
 800d54c:	f001 f84a 	bl	800e5e4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800d550:	e010      	b.n	800d574 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f001 f832 	bl	800e5bc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800d558:	e00c      	b.n	800d574 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	f003 0320 	and.w	r3, r3, #32
 800d560:	2b00      	cmp	r3, #0
 800d562:	d003      	beq.n	800d56c <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f001 f833 	bl	800e5d0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800d56a:	e003      	b.n	800d574 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f001 f81b 	bl	800e5a8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800d572:	e7ff      	b.n	800d574 <HAL_SD_IRQHandler+0x364>
 800d574:	bf00      	nop
 800d576:	3710      	adds	r7, #16
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}
 800d57c:	18000f3a 	.word	0x18000f3a

0800d580 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d580:	b480      	push	{r7}
 800d582:	b083      	sub	sp, #12
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d588:	bf00      	nop
 800d58a:	370c      	adds	r7, #12
 800d58c:	46bd      	mov	sp, r7
 800d58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d592:	4770      	bx	lr

0800d594 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d594:	b480      	push	{r7}
 800d596:	b083      	sub	sp, #12
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d5a2:	0f9b      	lsrs	r3, r3, #30
 800d5a4:	b2da      	uxtb	r2, r3
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d5ae:	0e9b      	lsrs	r3, r3, #26
 800d5b0:	b2db      	uxtb	r3, r3
 800d5b2:	f003 030f 	and.w	r3, r3, #15
 800d5b6:	b2da      	uxtb	r2, r3
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d5c0:	0e1b      	lsrs	r3, r3, #24
 800d5c2:	b2db      	uxtb	r3, r3
 800d5c4:	f003 0303 	and.w	r3, r3, #3
 800d5c8:	b2da      	uxtb	r2, r3
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d5d2:	0c1b      	lsrs	r3, r3, #16
 800d5d4:	b2da      	uxtb	r2, r3
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d5de:	0a1b      	lsrs	r3, r3, #8
 800d5e0:	b2da      	uxtb	r2, r3
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d5ea:	b2da      	uxtb	r2, r3
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d5f4:	0d1b      	lsrs	r3, r3, #20
 800d5f6:	b29a      	uxth	r2, r3
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d600:	0c1b      	lsrs	r3, r3, #16
 800d602:	b2db      	uxtb	r3, r3
 800d604:	f003 030f 	and.w	r3, r3, #15
 800d608:	b2da      	uxtb	r2, r3
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d612:	0bdb      	lsrs	r3, r3, #15
 800d614:	b2db      	uxtb	r3, r3
 800d616:	f003 0301 	and.w	r3, r3, #1
 800d61a:	b2da      	uxtb	r2, r3
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d624:	0b9b      	lsrs	r3, r3, #14
 800d626:	b2db      	uxtb	r3, r3
 800d628:	f003 0301 	and.w	r3, r3, #1
 800d62c:	b2da      	uxtb	r2, r3
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d636:	0b5b      	lsrs	r3, r3, #13
 800d638:	b2db      	uxtb	r3, r3
 800d63a:	f003 0301 	and.w	r3, r3, #1
 800d63e:	b2da      	uxtb	r2, r3
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d648:	0b1b      	lsrs	r3, r3, #12
 800d64a:	b2db      	uxtb	r3, r3
 800d64c:	f003 0301 	and.w	r3, r3, #1
 800d650:	b2da      	uxtb	r2, r3
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	2200      	movs	r2, #0
 800d65a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d660:	2b00      	cmp	r3, #0
 800d662:	d163      	bne.n	800d72c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d668:	009a      	lsls	r2, r3, #2
 800d66a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d66e:	4013      	ands	r3, r2
 800d670:	687a      	ldr	r2, [r7, #4]
 800d672:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800d674:	0f92      	lsrs	r2, r2, #30
 800d676:	431a      	orrs	r2, r3
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d680:	0edb      	lsrs	r3, r3, #27
 800d682:	b2db      	uxtb	r3, r3
 800d684:	f003 0307 	and.w	r3, r3, #7
 800d688:	b2da      	uxtb	r2, r3
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d692:	0e1b      	lsrs	r3, r3, #24
 800d694:	b2db      	uxtb	r3, r3
 800d696:	f003 0307 	and.w	r3, r3, #7
 800d69a:	b2da      	uxtb	r2, r3
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6a4:	0d5b      	lsrs	r3, r3, #21
 800d6a6:	b2db      	uxtb	r3, r3
 800d6a8:	f003 0307 	and.w	r3, r3, #7
 800d6ac:	b2da      	uxtb	r2, r3
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6b6:	0c9b      	lsrs	r3, r3, #18
 800d6b8:	b2db      	uxtb	r3, r3
 800d6ba:	f003 0307 	and.w	r3, r3, #7
 800d6be:	b2da      	uxtb	r2, r3
 800d6c0:	683b      	ldr	r3, [r7, #0]
 800d6c2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6c8:	0bdb      	lsrs	r3, r3, #15
 800d6ca:	b2db      	uxtb	r3, r3
 800d6cc:	f003 0307 	and.w	r3, r3, #7
 800d6d0:	b2da      	uxtb	r2, r3
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	691b      	ldr	r3, [r3, #16]
 800d6da:	1c5a      	adds	r2, r3, #1
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	7e1b      	ldrb	r3, [r3, #24]
 800d6e4:	b2db      	uxtb	r3, r3
 800d6e6:	f003 0307 	and.w	r3, r3, #7
 800d6ea:	3302      	adds	r3, #2
 800d6ec:	2201      	movs	r2, #1
 800d6ee:	fa02 f303 	lsl.w	r3, r2, r3
 800d6f2:	687a      	ldr	r2, [r7, #4]
 800d6f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d6f6:	fb03 f202 	mul.w	r2, r3, r2
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d6fe:	683b      	ldr	r3, [r7, #0]
 800d700:	7a1b      	ldrb	r3, [r3, #8]
 800d702:	b2db      	uxtb	r3, r3
 800d704:	f003 030f 	and.w	r3, r3, #15
 800d708:	2201      	movs	r2, #1
 800d70a:	409a      	lsls	r2, r3
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d714:	687a      	ldr	r2, [r7, #4]
 800d716:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800d718:	0a52      	lsrs	r2, r2, #9
 800d71a:	fb03 f202 	mul.w	r2, r3, r2
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d728:	655a      	str	r2, [r3, #84]	; 0x54
 800d72a:	e031      	b.n	800d790 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d730:	2b01      	cmp	r3, #1
 800d732:	d11d      	bne.n	800d770 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d738:	041b      	lsls	r3, r3, #16
 800d73a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d742:	0c1b      	lsrs	r3, r3, #16
 800d744:	431a      	orrs	r2, r3
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	691b      	ldr	r3, [r3, #16]
 800d74e:	3301      	adds	r3, #1
 800d750:	029a      	lsls	r2, r3, #10
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d764:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	655a      	str	r2, [r3, #84]	; 0x54
 800d76e:	e00f      	b.n	800d790 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	4a58      	ldr	r2, [pc, #352]	; (800d8d8 <HAL_SD_GetCardCSD+0x344>)
 800d776:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d77c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2201      	movs	r2, #1
 800d788:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d78c:	2301      	movs	r3, #1
 800d78e:	e09d      	b.n	800d8cc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d794:	0b9b      	lsrs	r3, r3, #14
 800d796:	b2db      	uxtb	r3, r3
 800d798:	f003 0301 	and.w	r3, r3, #1
 800d79c:	b2da      	uxtb	r2, r3
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d7a6:	09db      	lsrs	r3, r3, #7
 800d7a8:	b2db      	uxtb	r3, r3
 800d7aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7ae:	b2da      	uxtb	r2, r3
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d7b8:	b2db      	uxtb	r3, r3
 800d7ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7be:	b2da      	uxtb	r2, r3
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d7c8:	0fdb      	lsrs	r3, r3, #31
 800d7ca:	b2da      	uxtb	r2, r3
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d7d4:	0f5b      	lsrs	r3, r3, #29
 800d7d6:	b2db      	uxtb	r3, r3
 800d7d8:	f003 0303 	and.w	r3, r3, #3
 800d7dc:	b2da      	uxtb	r2, r3
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d7e6:	0e9b      	lsrs	r3, r3, #26
 800d7e8:	b2db      	uxtb	r3, r3
 800d7ea:	f003 0307 	and.w	r3, r3, #7
 800d7ee:	b2da      	uxtb	r2, r3
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d7f8:	0d9b      	lsrs	r3, r3, #22
 800d7fa:	b2db      	uxtb	r3, r3
 800d7fc:	f003 030f 	and.w	r3, r3, #15
 800d800:	b2da      	uxtb	r2, r3
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d80a:	0d5b      	lsrs	r3, r3, #21
 800d80c:	b2db      	uxtb	r3, r3
 800d80e:	f003 0301 	and.w	r3, r3, #1
 800d812:	b2da      	uxtb	r2, r3
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	2200      	movs	r2, #0
 800d81e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d826:	0c1b      	lsrs	r3, r3, #16
 800d828:	b2db      	uxtb	r3, r3
 800d82a:	f003 0301 	and.w	r3, r3, #1
 800d82e:	b2da      	uxtb	r2, r3
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d83a:	0bdb      	lsrs	r3, r3, #15
 800d83c:	b2db      	uxtb	r3, r3
 800d83e:	f003 0301 	and.w	r3, r3, #1
 800d842:	b2da      	uxtb	r2, r3
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d84e:	0b9b      	lsrs	r3, r3, #14
 800d850:	b2db      	uxtb	r3, r3
 800d852:	f003 0301 	and.w	r3, r3, #1
 800d856:	b2da      	uxtb	r2, r3
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d862:	0b5b      	lsrs	r3, r3, #13
 800d864:	b2db      	uxtb	r3, r3
 800d866:	f003 0301 	and.w	r3, r3, #1
 800d86a:	b2da      	uxtb	r2, r3
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d876:	0b1b      	lsrs	r3, r3, #12
 800d878:	b2db      	uxtb	r3, r3
 800d87a:	f003 0301 	and.w	r3, r3, #1
 800d87e:	b2da      	uxtb	r2, r3
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d88a:	0a9b      	lsrs	r3, r3, #10
 800d88c:	b2db      	uxtb	r3, r3
 800d88e:	f003 0303 	and.w	r3, r3, #3
 800d892:	b2da      	uxtb	r2, r3
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d89e:	0a1b      	lsrs	r3, r3, #8
 800d8a0:	b2db      	uxtb	r3, r3
 800d8a2:	f003 0303 	and.w	r3, r3, #3
 800d8a6:	b2da      	uxtb	r2, r3
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d8b2:	085b      	lsrs	r3, r3, #1
 800d8b4:	b2db      	uxtb	r3, r3
 800d8b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8ba:	b2da      	uxtb	r2, r3
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	2201      	movs	r2, #1
 800d8c6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d8ca:	2300      	movs	r3, #0
}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	370c      	adds	r7, #12
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d6:	4770      	bx	lr
 800d8d8:	1fe00fff 	.word	0x1fe00fff

0800d8dc <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b094      	sub	sp, #80	; 0x50
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
 800d8e4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d8f2:	b2db      	uxtb	r3, r3
 800d8f4:	2b03      	cmp	r3, #3
 800d8f6:	d101      	bne.n	800d8fc <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	e0a7      	b.n	800da4c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800d8fc:	f107 0308 	add.w	r3, r7, #8
 800d900:	4619      	mov	r1, r3
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f000 fb62 	bl	800dfcc <SD_SendSDStatus>
 800d908:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800d90a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d011      	beq.n	800d934 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	4a4f      	ldr	r2, [pc, #316]	; (800da54 <HAL_SD_GetCardStatus+0x178>)
 800d916:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d91c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d91e:	431a      	orrs	r2, r3
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2201      	movs	r2, #1
 800d928:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800d92c:	2301      	movs	r3, #1
 800d92e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800d932:	e070      	b.n	800da16 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	099b      	lsrs	r3, r3, #6
 800d938:	b2db      	uxtb	r3, r3
 800d93a:	f003 0303 	and.w	r3, r3, #3
 800d93e:	b2da      	uxtb	r2, r3
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	095b      	lsrs	r3, r3, #5
 800d948:	b2db      	uxtb	r3, r3
 800d94a:	f003 0301 	and.w	r3, r3, #1
 800d94e:	b2da      	uxtb	r2, r3
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	0a1b      	lsrs	r3, r3, #8
 800d958:	b29b      	uxth	r3, r3
 800d95a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d95e:	b29a      	uxth	r2, r3
 800d960:	68bb      	ldr	r3, [r7, #8]
 800d962:	0e1b      	lsrs	r3, r3, #24
 800d964:	b29b      	uxth	r3, r3
 800d966:	4313      	orrs	r3, r2
 800d968:	b29a      	uxth	r2, r3
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	061a      	lsls	r2, r3, #24
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	021b      	lsls	r3, r3, #8
 800d976:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d97a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	0a1b      	lsrs	r3, r3, #8
 800d980:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d984:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	0e1b      	lsrs	r3, r3, #24
 800d98a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800d990:	693b      	ldr	r3, [r7, #16]
 800d992:	b2da      	uxtb	r2, r3
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800d998:	693b      	ldr	r3, [r7, #16]
 800d99a:	0a1b      	lsrs	r3, r3, #8
 800d99c:	b2da      	uxtb	r2, r3
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800d9a2:	693b      	ldr	r3, [r7, #16]
 800d9a4:	0d1b      	lsrs	r3, r3, #20
 800d9a6:	b2db      	uxtb	r3, r3
 800d9a8:	f003 030f 	and.w	r3, r3, #15
 800d9ac:	b2da      	uxtb	r2, r3
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800d9b2:	693b      	ldr	r3, [r7, #16]
 800d9b4:	0c1b      	lsrs	r3, r3, #16
 800d9b6:	b29b      	uxth	r3, r3
 800d9b8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d9bc:	b29a      	uxth	r2, r3
 800d9be:	697b      	ldr	r3, [r7, #20]
 800d9c0:	b29b      	uxth	r3, r3
 800d9c2:	b2db      	uxtb	r3, r3
 800d9c4:	b29b      	uxth	r3, r3
 800d9c6:	4313      	orrs	r3, r2
 800d9c8:	b29a      	uxth	r2, r3
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800d9ce:	697b      	ldr	r3, [r7, #20]
 800d9d0:	0a9b      	lsrs	r3, r3, #10
 800d9d2:	b2db      	uxtb	r3, r3
 800d9d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d9d8:	b2da      	uxtb	r2, r3
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	0a1b      	lsrs	r3, r3, #8
 800d9e2:	b2db      	uxtb	r3, r3
 800d9e4:	f003 0303 	and.w	r3, r3, #3
 800d9e8:	b2da      	uxtb	r2, r3
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800d9ee:	697b      	ldr	r3, [r7, #20]
 800d9f0:	091b      	lsrs	r3, r3, #4
 800d9f2:	b2db      	uxtb	r3, r3
 800d9f4:	f003 030f 	and.w	r3, r3, #15
 800d9f8:	b2da      	uxtb	r2, r3
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800d9fe:	697b      	ldr	r3, [r7, #20]
 800da00:	b2db      	uxtb	r3, r3
 800da02:	f003 030f 	and.w	r3, r3, #15
 800da06:	b2da      	uxtb	r2, r3
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800da0c:	69bb      	ldr	r3, [r7, #24]
 800da0e:	0e1b      	lsrs	r3, r3, #24
 800da10:	b2da      	uxtb	r2, r3
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800da1e:	4618      	mov	r0, r3
 800da20:	f004 f98a 	bl	8011d38 <SDMMC_CmdBlockLength>
 800da24:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800da26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d00d      	beq.n	800da48 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	4a08      	ldr	r2, [pc, #32]	; (800da54 <HAL_SD_GetCardStatus+0x178>)
 800da32:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800da38:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	2201      	movs	r2, #1
 800da3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800da42:	2301      	movs	r3, #1
 800da44:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800da48:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800da4c:	4618      	mov	r0, r3
 800da4e:	3750      	adds	r7, #80	; 0x50
 800da50:	46bd      	mov	sp, r7
 800da52:	bd80      	pop	{r7, pc}
 800da54:	1fe00fff 	.word	0x1fe00fff

0800da58 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800da58:	b480      	push	{r7}
 800da5a:	b083      	sub	sp, #12
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
 800da60:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800daa2:	2300      	movs	r3, #0
}
 800daa4:	4618      	mov	r0, r3
 800daa6:	370c      	adds	r7, #12
 800daa8:	46bd      	mov	sp, r7
 800daaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daae:	4770      	bx	lr

0800dab0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800dab0:	b590      	push	{r4, r7, lr}
 800dab2:	b08d      	sub	sp, #52	; 0x34
 800dab4:	af02      	add	r7, sp, #8
 800dab6:	6078      	str	r0, [r7, #4]
 800dab8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800daba:	2300      	movs	r3, #0
 800dabc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2203      	movs	r2, #3
 800dac4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dacc:	2b03      	cmp	r3, #3
 800dace:	d02e      	beq.n	800db2e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dad6:	d106      	bne.n	800dae6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dadc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	635a      	str	r2, [r3, #52]	; 0x34
 800dae4:	e029      	b.n	800db3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800daec:	d10a      	bne.n	800db04 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	f000 fb64 	bl	800e1bc <SD_WideBus_Enable>
 800daf4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dafa:	6a3b      	ldr	r3, [r7, #32]
 800dafc:	431a      	orrs	r2, r3
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	635a      	str	r2, [r3, #52]	; 0x34
 800db02:	e01a      	b.n	800db3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d10a      	bne.n	800db20 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800db0a:	6878      	ldr	r0, [r7, #4]
 800db0c:	f000 fba1 	bl	800e252 <SD_WideBus_Disable>
 800db10:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db16:	6a3b      	ldr	r3, [r7, #32]
 800db18:	431a      	orrs	r2, r3
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	635a      	str	r2, [r3, #52]	; 0x34
 800db1e:	e00c      	b.n	800db3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db24:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	635a      	str	r2, [r3, #52]	; 0x34
 800db2c:	e005      	b.n	800db3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db32:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d007      	beq.n	800db52 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	4a5f      	ldr	r2, [pc, #380]	; (800dcc4 <HAL_SD_ConfigWideBusOperation+0x214>)
 800db48:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800db4a:	2301      	movs	r3, #1
 800db4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800db50:	e096      	b.n	800dc80 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800db52:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800db56:	f04f 0100 	mov.w	r1, #0
 800db5a:	f7fd fea3 	bl	800b8a4 <HAL_RCCEx_GetPeriphCLKFreq>
 800db5e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800db60:	69fb      	ldr	r3, [r7, #28]
 800db62:	2b00      	cmp	r3, #0
 800db64:	f000 8083 	beq.w	800dc6e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	685b      	ldr	r3, [r3, #4]
 800db6c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	689b      	ldr	r3, [r3, #8]
 800db72:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	691b      	ldr	r3, [r3, #16]
 800db7c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	695a      	ldr	r2, [r3, #20]
 800db82:	69fb      	ldr	r3, [r7, #28]
 800db84:	4950      	ldr	r1, [pc, #320]	; (800dcc8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800db86:	fba1 1303 	umull	r1, r3, r1, r3
 800db8a:	0e1b      	lsrs	r3, r3, #24
 800db8c:	429a      	cmp	r2, r3
 800db8e:	d303      	bcc.n	800db98 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	695b      	ldr	r3, [r3, #20]
 800db94:	61bb      	str	r3, [r7, #24]
 800db96:	e05a      	b.n	800dc4e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dba0:	d103      	bne.n	800dbaa <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	695b      	ldr	r3, [r3, #20]
 800dba6:	61bb      	str	r3, [r7, #24]
 800dba8:	e051      	b.n	800dc4e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dbb2:	d126      	bne.n	800dc02 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	695b      	ldr	r3, [r3, #20]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d10e      	bne.n	800dbda <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800dbbc:	69fb      	ldr	r3, [r7, #28]
 800dbbe:	4a43      	ldr	r2, [pc, #268]	; (800dccc <HAL_SD_ConfigWideBusOperation+0x21c>)
 800dbc0:	4293      	cmp	r3, r2
 800dbc2:	d906      	bls.n	800dbd2 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800dbc4:	69fb      	ldr	r3, [r7, #28]
 800dbc6:	4a40      	ldr	r2, [pc, #256]	; (800dcc8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800dbc8:	fba2 2303 	umull	r2, r3, r2, r3
 800dbcc:	0e5b      	lsrs	r3, r3, #25
 800dbce:	61bb      	str	r3, [r7, #24]
 800dbd0:	e03d      	b.n	800dc4e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	695b      	ldr	r3, [r3, #20]
 800dbd6:	61bb      	str	r3, [r7, #24]
 800dbd8:	e039      	b.n	800dc4e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	695b      	ldr	r3, [r3, #20]
 800dbde:	005b      	lsls	r3, r3, #1
 800dbe0:	69fa      	ldr	r2, [r7, #28]
 800dbe2:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbe6:	4a39      	ldr	r2, [pc, #228]	; (800dccc <HAL_SD_ConfigWideBusOperation+0x21c>)
 800dbe8:	4293      	cmp	r3, r2
 800dbea:	d906      	bls.n	800dbfa <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800dbec:	69fb      	ldr	r3, [r7, #28]
 800dbee:	4a36      	ldr	r2, [pc, #216]	; (800dcc8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800dbf0:	fba2 2303 	umull	r2, r3, r2, r3
 800dbf4:	0e5b      	lsrs	r3, r3, #25
 800dbf6:	61bb      	str	r3, [r7, #24]
 800dbf8:	e029      	b.n	800dc4e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	695b      	ldr	r3, [r3, #20]
 800dbfe:	61bb      	str	r3, [r7, #24]
 800dc00:	e025      	b.n	800dc4e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	695b      	ldr	r3, [r3, #20]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d10e      	bne.n	800dc28 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800dc0a:	69fb      	ldr	r3, [r7, #28]
 800dc0c:	4a30      	ldr	r2, [pc, #192]	; (800dcd0 <HAL_SD_ConfigWideBusOperation+0x220>)
 800dc0e:	4293      	cmp	r3, r2
 800dc10:	d906      	bls.n	800dc20 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800dc12:	69fb      	ldr	r3, [r7, #28]
 800dc14:	4a2c      	ldr	r2, [pc, #176]	; (800dcc8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800dc16:	fba2 2303 	umull	r2, r3, r2, r3
 800dc1a:	0e1b      	lsrs	r3, r3, #24
 800dc1c:	61bb      	str	r3, [r7, #24]
 800dc1e:	e016      	b.n	800dc4e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	695b      	ldr	r3, [r3, #20]
 800dc24:	61bb      	str	r3, [r7, #24]
 800dc26:	e012      	b.n	800dc4e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	695b      	ldr	r3, [r3, #20]
 800dc2c:	005b      	lsls	r3, r3, #1
 800dc2e:	69fa      	ldr	r2, [r7, #28]
 800dc30:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc34:	4a26      	ldr	r2, [pc, #152]	; (800dcd0 <HAL_SD_ConfigWideBusOperation+0x220>)
 800dc36:	4293      	cmp	r3, r2
 800dc38:	d906      	bls.n	800dc48 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800dc3a:	69fb      	ldr	r3, [r7, #28]
 800dc3c:	4a22      	ldr	r2, [pc, #136]	; (800dcc8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800dc3e:	fba2 2303 	umull	r2, r3, r2, r3
 800dc42:	0e1b      	lsrs	r3, r3, #24
 800dc44:	61bb      	str	r3, [r7, #24]
 800dc46:	e002      	b.n	800dc4e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	695b      	ldr	r3, [r3, #20]
 800dc4c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681c      	ldr	r4, [r3, #0]
 800dc52:	466a      	mov	r2, sp
 800dc54:	f107 0314 	add.w	r3, r7, #20
 800dc58:	e893 0003 	ldmia.w	r3, {r0, r1}
 800dc5c:	e882 0003 	stmia.w	r2, {r0, r1}
 800dc60:	f107 0308 	add.w	r3, r7, #8
 800dc64:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dc66:	4620      	mov	r0, r4
 800dc68:	f003 ff88 	bl	8011b7c <SDMMC_Init>
 800dc6c:	e008      	b.n	800dc80 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc72:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800dc7a:	2301      	movs	r3, #1
 800dc7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dc88:	4618      	mov	r0, r3
 800dc8a:	f004 f855 	bl	8011d38 <SDMMC_CmdBlockLength>
 800dc8e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dc90:	6a3b      	ldr	r3, [r7, #32]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d00c      	beq.n	800dcb0 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	4a0a      	ldr	r2, [pc, #40]	; (800dcc4 <HAL_SD_ConfigWideBusOperation+0x214>)
 800dc9c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dca2:	6a3b      	ldr	r3, [r7, #32]
 800dca4:	431a      	orrs	r2, r3
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800dcaa:	2301      	movs	r3, #1
 800dcac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	2201      	movs	r2, #1
 800dcb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800dcb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	372c      	adds	r7, #44	; 0x2c
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd90      	pop	{r4, r7, pc}
 800dcc4:	1fe00fff 	.word	0x1fe00fff
 800dcc8:	55e63b89 	.word	0x55e63b89
 800dccc:	02faf080 	.word	0x02faf080
 800dcd0:	017d7840 	.word	0x017d7840

0800dcd4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b086      	sub	sp, #24
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800dcdc:	2300      	movs	r3, #0
 800dcde:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800dce0:	f107 030c 	add.w	r3, r7, #12
 800dce4:	4619      	mov	r1, r3
 800dce6:	6878      	ldr	r0, [r7, #4]
 800dce8:	f000 fa40 	bl	800e16c <SD_SendStatus>
 800dcec:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dcee:	697b      	ldr	r3, [r7, #20]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d005      	beq.n	800dd00 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dcf8:	697b      	ldr	r3, [r7, #20]
 800dcfa:	431a      	orrs	r2, r3
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	0a5b      	lsrs	r3, r3, #9
 800dd04:	f003 030f 	and.w	r3, r3, #15
 800dd08:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800dd0a:	693b      	ldr	r3, [r7, #16]
}
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	3718      	adds	r7, #24
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bd80      	pop	{r7, pc}

0800dd14 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b090      	sub	sp, #64	; 0x40
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800dd20:	f7f5 fd4c 	bl	80037bc <HAL_GetTick>
 800dd24:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	f003 ff7f 	bl	8011c2e <SDMMC_GetPowerState>
 800dd30:	4603      	mov	r3, r0
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d102      	bne.n	800dd3c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dd36:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800dd3a:	e0b5      	b.n	800dea8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd40:	2b03      	cmp	r3, #3
 800dd42:	d02e      	beq.n	800dda2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	4618      	mov	r0, r3
 800dd4a:	f004 f9ca 	bl	80120e2 <SDMMC_CmdSendCID>
 800dd4e:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800dd50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d001      	beq.n	800dd5a <SD_InitCard+0x46>
    {
      return errorstate;
 800dd56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd58:	e0a6      	b.n	800dea8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	2100      	movs	r1, #0
 800dd60:	4618      	mov	r0, r3
 800dd62:	f003 ffaa 	bl	8011cba <SDMMC_GetResponse>
 800dd66:	4602      	mov	r2, r0
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	2104      	movs	r1, #4
 800dd72:	4618      	mov	r0, r3
 800dd74:	f003 ffa1 	bl	8011cba <SDMMC_GetResponse>
 800dd78:	4602      	mov	r2, r0
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	2108      	movs	r1, #8
 800dd84:	4618      	mov	r0, r3
 800dd86:	f003 ff98 	bl	8011cba <SDMMC_GetResponse>
 800dd8a:	4602      	mov	r2, r0
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	210c      	movs	r1, #12
 800dd96:	4618      	mov	r0, r3
 800dd98:	f003 ff8f 	bl	8011cba <SDMMC_GetResponse>
 800dd9c:	4602      	mov	r2, r0
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dda6:	2b03      	cmp	r3, #3
 800dda8:	d01d      	beq.n	800dde6 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800ddaa:	e019      	b.n	800dde0 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	f107 020a 	add.w	r2, r7, #10
 800ddb4:	4611      	mov	r1, r2
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	f004 f9d2 	bl	8012160 <SDMMC_CmdSetRelAdd>
 800ddbc:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800ddbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d001      	beq.n	800ddc8 <SD_InitCard+0xb4>
      {
        return errorstate;
 800ddc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddc6:	e06f      	b.n	800dea8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800ddc8:	f7f5 fcf8 	bl	80037bc <HAL_GetTick>
 800ddcc:	4602      	mov	r2, r0
 800ddce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddd0:	1ad3      	subs	r3, r2, r3
 800ddd2:	f241 3287 	movw	r2, #4999	; 0x1387
 800ddd6:	4293      	cmp	r3, r2
 800ddd8:	d902      	bls.n	800dde0 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800ddda:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ddde:	e063      	b.n	800dea8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800dde0:	897b      	ldrh	r3, [r7, #10]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d0e2      	beq.n	800ddac <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddea:	2b03      	cmp	r3, #3
 800ddec:	d036      	beq.n	800de5c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ddee:	897b      	ldrh	r3, [r7, #10]
 800ddf0:	461a      	mov	r2, r3
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681a      	ldr	r2, [r3, #0]
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddfe:	041b      	lsls	r3, r3, #16
 800de00:	4619      	mov	r1, r3
 800de02:	4610      	mov	r0, r2
 800de04:	f004 f98c 	bl	8012120 <SDMMC_CmdSendCSD>
 800de08:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800de0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d001      	beq.n	800de14 <SD_InitCard+0x100>
    {
      return errorstate;
 800de10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de12:	e049      	b.n	800dea8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	2100      	movs	r1, #0
 800de1a:	4618      	mov	r0, r3
 800de1c:	f003 ff4d 	bl	8011cba <SDMMC_GetResponse>
 800de20:	4602      	mov	r2, r0
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	2104      	movs	r1, #4
 800de2c:	4618      	mov	r0, r3
 800de2e:	f003 ff44 	bl	8011cba <SDMMC_GetResponse>
 800de32:	4602      	mov	r2, r0
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	2108      	movs	r1, #8
 800de3e:	4618      	mov	r0, r3
 800de40:	f003 ff3b 	bl	8011cba <SDMMC_GetResponse>
 800de44:	4602      	mov	r2, r0
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	210c      	movs	r1, #12
 800de50:	4618      	mov	r0, r3
 800de52:	f003 ff32 	bl	8011cba <SDMMC_GetResponse>
 800de56:	4602      	mov	r2, r0
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	2104      	movs	r1, #4
 800de62:	4618      	mov	r0, r3
 800de64:	f003 ff29 	bl	8011cba <SDMMC_GetResponse>
 800de68:	4603      	mov	r3, r0
 800de6a:	0d1a      	lsrs	r2, r3, #20
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800de70:	f107 030c 	add.w	r3, r7, #12
 800de74:	4619      	mov	r1, r3
 800de76:	6878      	ldr	r0, [r7, #4]
 800de78:	f7ff fb8c 	bl	800d594 <HAL_SD_GetCardCSD>
 800de7c:	4603      	mov	r3, r0
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d002      	beq.n	800de88 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800de82:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800de86:	e00f      	b.n	800dea8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681a      	ldr	r2, [r3, #0]
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de90:	041b      	lsls	r3, r3, #16
 800de92:	4619      	mov	r1, r3
 800de94:	4610      	mov	r0, r2
 800de96:	f004 f83b 	bl	8011f10 <SDMMC_CmdSelDesel>
 800de9a:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800de9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d001      	beq.n	800dea6 <SD_InitCard+0x192>
  {
    return errorstate;
 800dea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dea4:	e000      	b.n	800dea8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800dea6:	2300      	movs	r3, #0
}
 800dea8:	4618      	mov	r0, r3
 800deaa:	3740      	adds	r7, #64	; 0x40
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}

0800deb0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b086      	sub	sp, #24
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800deb8:	2300      	movs	r3, #0
 800deba:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800debc:	2300      	movs	r3, #0
 800debe:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800dec0:	2300      	movs	r3, #0
 800dec2:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	4618      	mov	r0, r3
 800deca:	f004 f844 	bl	8011f56 <SDMMC_CmdGoIdleState>
 800dece:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d001      	beq.n	800deda <SD_PowerON+0x2a>
  {
    return errorstate;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	e072      	b.n	800dfc0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	4618      	mov	r0, r3
 800dee0:	f004 f857 	bl	8011f92 <SDMMC_CmdOperCond>
 800dee4:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800deec:	d10d      	bne.n	800df0a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	2200      	movs	r2, #0
 800def2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	4618      	mov	r0, r3
 800defa:	f004 f82c 	bl	8011f56 <SDMMC_CmdGoIdleState>
 800defe:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d004      	beq.n	800df10 <SD_PowerON+0x60>
    {
      return errorstate;
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	e05a      	b.n	800dfc0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2201      	movs	r2, #1
 800df0e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df14:	2b01      	cmp	r3, #1
 800df16:	d137      	bne.n	800df88 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	2100      	movs	r1, #0
 800df1e:	4618      	mov	r0, r3
 800df20:	f004 f857 	bl	8011fd2 <SDMMC_CmdAppCommand>
 800df24:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d02d      	beq.n	800df88 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800df2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800df30:	e046      	b.n	800dfc0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	2100      	movs	r1, #0
 800df38:	4618      	mov	r0, r3
 800df3a:	f004 f84a 	bl	8011fd2 <SDMMC_CmdAppCommand>
 800df3e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d001      	beq.n	800df4a <SD_PowerON+0x9a>
    {
      return errorstate;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	e03a      	b.n	800dfc0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	491e      	ldr	r1, [pc, #120]	; (800dfc8 <SD_PowerON+0x118>)
 800df50:	4618      	mov	r0, r3
 800df52:	f004 f861 	bl	8012018 <SDMMC_CmdAppOperCommand>
 800df56:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d002      	beq.n	800df64 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800df5e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800df62:	e02d      	b.n	800dfc0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	2100      	movs	r1, #0
 800df6a:	4618      	mov	r0, r3
 800df6c:	f003 fea5 	bl	8011cba <SDMMC_GetResponse>
 800df70:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800df72:	697b      	ldr	r3, [r7, #20]
 800df74:	0fdb      	lsrs	r3, r3, #31
 800df76:	2b01      	cmp	r3, #1
 800df78:	d101      	bne.n	800df7e <SD_PowerON+0xce>
 800df7a:	2301      	movs	r3, #1
 800df7c:	e000      	b.n	800df80 <SD_PowerON+0xd0>
 800df7e:	2300      	movs	r3, #0
 800df80:	613b      	str	r3, [r7, #16]

    count++;
 800df82:	68bb      	ldr	r3, [r7, #8]
 800df84:	3301      	adds	r3, #1
 800df86:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800df8e:	4293      	cmp	r3, r2
 800df90:	d802      	bhi.n	800df98 <SD_PowerON+0xe8>
 800df92:	693b      	ldr	r3, [r7, #16]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d0cc      	beq.n	800df32 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800df98:	68bb      	ldr	r3, [r7, #8]
 800df9a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800df9e:	4293      	cmp	r3, r2
 800dfa0:	d902      	bls.n	800dfa8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800dfa2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800dfa6:	e00b      	b.n	800dfc0 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	2200      	movs	r2, #0
 800dfac:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800dfae:	697b      	ldr	r3, [r7, #20]
 800dfb0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d002      	beq.n	800dfbe <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2201      	movs	r2, #1
 800dfbc:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800dfbe:	2300      	movs	r3, #0
}
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	3718      	adds	r7, #24
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}
 800dfc8:	c1100000 	.word	0xc1100000

0800dfcc <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b08c      	sub	sp, #48	; 0x30
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
 800dfd4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800dfd6:	f7f5 fbf1 	bl	80037bc <HAL_GetTick>
 800dfda:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	2100      	movs	r1, #0
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f003 fe67 	bl	8011cba <SDMMC_GetResponse>
 800dfec:	4603      	mov	r3, r0
 800dfee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dff2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dff6:	d102      	bne.n	800dffe <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800dff8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dffc:	e0b0      	b.n	800e160 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	2140      	movs	r1, #64	; 0x40
 800e004:	4618      	mov	r0, r3
 800e006:	f003 fe97 	bl	8011d38 <SDMMC_CmdBlockLength>
 800e00a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e00c:	6a3b      	ldr	r3, [r7, #32]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d005      	beq.n	800e01e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e01a:	6a3b      	ldr	r3, [r7, #32]
 800e01c:	e0a0      	b.n	800e160 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681a      	ldr	r2, [r3, #0]
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e026:	041b      	lsls	r3, r3, #16
 800e028:	4619      	mov	r1, r3
 800e02a:	4610      	mov	r0, r2
 800e02c:	f003 ffd1 	bl	8011fd2 <SDMMC_CmdAppCommand>
 800e030:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e032:	6a3b      	ldr	r3, [r7, #32]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d005      	beq.n	800e044 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e040:	6a3b      	ldr	r3, [r7, #32]
 800e042:	e08d      	b.n	800e160 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e044:	f04f 33ff 	mov.w	r3, #4294967295
 800e048:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e04a:	2340      	movs	r3, #64	; 0x40
 800e04c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e04e:	2360      	movs	r3, #96	; 0x60
 800e050:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e052:	2302      	movs	r3, #2
 800e054:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e056:	2300      	movs	r3, #0
 800e058:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e05a:	2301      	movs	r3, #1
 800e05c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	f107 0208 	add.w	r2, r7, #8
 800e066:	4611      	mov	r1, r2
 800e068:	4618      	mov	r0, r3
 800e06a:	f003 fe39 	bl	8011ce0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	4618      	mov	r0, r3
 800e074:	f004 f8b9 	bl	80121ea <SDMMC_CmdStatusRegister>
 800e078:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e07a:	6a3b      	ldr	r3, [r7, #32]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d02b      	beq.n	800e0d8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e088:	6a3b      	ldr	r3, [r7, #32]
 800e08a:	e069      	b.n	800e160 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e092:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e096:	2b00      	cmp	r3, #0
 800e098:	d013      	beq.n	800e0c2 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800e09a:	2300      	movs	r3, #0
 800e09c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e09e:	e00d      	b.n	800e0bc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f003 fd93 	bl	8011bd0 <SDMMC_ReadFIFO>
 800e0aa:	4602      	mov	r2, r0
 800e0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ae:	601a      	str	r2, [r3, #0]
        pData++;
 800e0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0b2:	3304      	adds	r3, #4
 800e0b4:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800e0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0b8:	3301      	adds	r3, #1
 800e0ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0be:	2b07      	cmp	r3, #7
 800e0c0:	d9ee      	bls.n	800e0a0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e0c2:	f7f5 fb7b 	bl	80037bc <HAL_GetTick>
 800e0c6:	4602      	mov	r2, r0
 800e0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ca:	1ad3      	subs	r3, r2, r3
 800e0cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0d0:	d102      	bne.n	800e0d8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e0d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e0d6:	e043      	b.n	800e160 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0de:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d0d2      	beq.n	800e08c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0ec:	f003 0308 	and.w	r3, r3, #8
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d001      	beq.n	800e0f8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e0f4:	2308      	movs	r3, #8
 800e0f6:	e033      	b.n	800e160 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0fe:	f003 0302 	and.w	r3, r3, #2
 800e102:	2b00      	cmp	r3, #0
 800e104:	d001      	beq.n	800e10a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e106:	2302      	movs	r3, #2
 800e108:	e02a      	b.n	800e160 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e110:	f003 0320 	and.w	r3, r3, #32
 800e114:	2b00      	cmp	r3, #0
 800e116:	d017      	beq.n	800e148 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e118:	2320      	movs	r3, #32
 800e11a:	e021      	b.n	800e160 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	4618      	mov	r0, r3
 800e122:	f003 fd55 	bl	8011bd0 <SDMMC_ReadFIFO>
 800e126:	4602      	mov	r2, r0
 800e128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e12a:	601a      	str	r2, [r3, #0]
    pData++;
 800e12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e12e:	3304      	adds	r3, #4
 800e130:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e132:	f7f5 fb43 	bl	80037bc <HAL_GetTick>
 800e136:	4602      	mov	r2, r0
 800e138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e13a:	1ad3      	subs	r3, r2, r3
 800e13c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e140:	d102      	bne.n	800e148 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e142:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e146:	e00b      	b.n	800e160 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e14e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e152:	2b00      	cmp	r3, #0
 800e154:	d1e2      	bne.n	800e11c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	4a03      	ldr	r2, [pc, #12]	; (800e168 <SD_SendSDStatus+0x19c>)
 800e15c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800e15e:	2300      	movs	r3, #0
}
 800e160:	4618      	mov	r0, r3
 800e162:	3730      	adds	r7, #48	; 0x30
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}
 800e168:	18000f3a 	.word	0x18000f3a

0800e16c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b084      	sub	sp, #16
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
 800e174:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d102      	bne.n	800e182 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e17c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e180:	e018      	b.n	800e1b4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681a      	ldr	r2, [r3, #0]
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e18a:	041b      	lsls	r3, r3, #16
 800e18c:	4619      	mov	r1, r3
 800e18e:	4610      	mov	r0, r2
 800e190:	f004 f808 	bl	80121a4 <SDMMC_CmdSendStatus>
 800e194:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d001      	beq.n	800e1a0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	e009      	b.n	800e1b4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	2100      	movs	r1, #0
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	f003 fd87 	bl	8011cba <SDMMC_GetResponse>
 800e1ac:	4602      	mov	r2, r0
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e1b2:	2300      	movs	r3, #0
}
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	3710      	adds	r7, #16
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	bd80      	pop	{r7, pc}

0800e1bc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b086      	sub	sp, #24
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	60fb      	str	r3, [r7, #12]
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	2100      	movs	r1, #0
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f003 fd71 	bl	8011cba <SDMMC_GetResponse>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e1de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e1e2:	d102      	bne.n	800e1ea <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e1e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e1e8:	e02f      	b.n	800e24a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e1ea:	f107 030c 	add.w	r3, r7, #12
 800e1ee:	4619      	mov	r1, r3
 800e1f0:	6878      	ldr	r0, [r7, #4]
 800e1f2:	f000 f879 	bl	800e2e8 <SD_FindSCR>
 800e1f6:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e1f8:	697b      	ldr	r3, [r7, #20]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d001      	beq.n	800e202 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e1fe:	697b      	ldr	r3, [r7, #20]
 800e200:	e023      	b.n	800e24a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e202:	693b      	ldr	r3, [r7, #16]
 800e204:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d01c      	beq.n	800e246 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681a      	ldr	r2, [r3, #0]
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e214:	041b      	lsls	r3, r3, #16
 800e216:	4619      	mov	r1, r3
 800e218:	4610      	mov	r0, r2
 800e21a:	f003 feda 	bl	8011fd2 <SDMMC_CmdAppCommand>
 800e21e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e220:	697b      	ldr	r3, [r7, #20]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d001      	beq.n	800e22a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e226:	697b      	ldr	r3, [r7, #20]
 800e228:	e00f      	b.n	800e24a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	2102      	movs	r1, #2
 800e230:	4618      	mov	r0, r3
 800e232:	f003 ff11 	bl	8012058 <SDMMC_CmdBusWidth>
 800e236:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e238:	697b      	ldr	r3, [r7, #20]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d001      	beq.n	800e242 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	e003      	b.n	800e24a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e242:	2300      	movs	r3, #0
 800e244:	e001      	b.n	800e24a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e246:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e24a:	4618      	mov	r0, r3
 800e24c:	3718      	adds	r7, #24
 800e24e:	46bd      	mov	sp, r7
 800e250:	bd80      	pop	{r7, pc}

0800e252 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e252:	b580      	push	{r7, lr}
 800e254:	b086      	sub	sp, #24
 800e256:	af00      	add	r7, sp, #0
 800e258:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e25a:	2300      	movs	r3, #0
 800e25c:	60fb      	str	r3, [r7, #12]
 800e25e:	2300      	movs	r3, #0
 800e260:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	2100      	movs	r1, #0
 800e268:	4618      	mov	r0, r3
 800e26a:	f003 fd26 	bl	8011cba <SDMMC_GetResponse>
 800e26e:	4603      	mov	r3, r0
 800e270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e274:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e278:	d102      	bne.n	800e280 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e27a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e27e:	e02f      	b.n	800e2e0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e280:	f107 030c 	add.w	r3, r7, #12
 800e284:	4619      	mov	r1, r3
 800e286:	6878      	ldr	r0, [r7, #4]
 800e288:	f000 f82e 	bl	800e2e8 <SD_FindSCR>
 800e28c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e28e:	697b      	ldr	r3, [r7, #20]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d001      	beq.n	800e298 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e294:	697b      	ldr	r3, [r7, #20]
 800e296:	e023      	b.n	800e2e0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e298:	693b      	ldr	r3, [r7, #16]
 800e29a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d01c      	beq.n	800e2dc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681a      	ldr	r2, [r3, #0]
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2aa:	041b      	lsls	r3, r3, #16
 800e2ac:	4619      	mov	r1, r3
 800e2ae:	4610      	mov	r0, r2
 800e2b0:	f003 fe8f 	bl	8011fd2 <SDMMC_CmdAppCommand>
 800e2b4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e2b6:	697b      	ldr	r3, [r7, #20]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d001      	beq.n	800e2c0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e2bc:	697b      	ldr	r3, [r7, #20]
 800e2be:	e00f      	b.n	800e2e0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	2100      	movs	r1, #0
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f003 fec6 	bl	8012058 <SDMMC_CmdBusWidth>
 800e2cc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e2ce:	697b      	ldr	r3, [r7, #20]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d001      	beq.n	800e2d8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e2d4:	697b      	ldr	r3, [r7, #20]
 800e2d6:	e003      	b.n	800e2e0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e2d8:	2300      	movs	r3, #0
 800e2da:	e001      	b.n	800e2e0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e2dc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	3718      	adds	r7, #24
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}

0800e2e8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b08e      	sub	sp, #56	; 0x38
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
 800e2f0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e2f2:	f7f5 fa63 	bl	80037bc <HAL_GetTick>
 800e2f6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	60bb      	str	r3, [r7, #8]
 800e300:	2300      	movs	r3, #0
 800e302:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	2108      	movs	r1, #8
 800e30e:	4618      	mov	r0, r3
 800e310:	f003 fd12 	bl	8011d38 <SDMMC_CmdBlockLength>
 800e314:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d001      	beq.n	800e320 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e31e:	e0ad      	b.n	800e47c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681a      	ldr	r2, [r3, #0]
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e328:	041b      	lsls	r3, r3, #16
 800e32a:	4619      	mov	r1, r3
 800e32c:	4610      	mov	r0, r2
 800e32e:	f003 fe50 	bl	8011fd2 <SDMMC_CmdAppCommand>
 800e332:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e336:	2b00      	cmp	r3, #0
 800e338:	d001      	beq.n	800e33e <SD_FindSCR+0x56>
  {
    return errorstate;
 800e33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e33c:	e09e      	b.n	800e47c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e33e:	f04f 33ff 	mov.w	r3, #4294967295
 800e342:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e344:	2308      	movs	r3, #8
 800e346:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e348:	2330      	movs	r3, #48	; 0x30
 800e34a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e34c:	2302      	movs	r3, #2
 800e34e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e350:	2300      	movs	r3, #0
 800e352:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e354:	2301      	movs	r3, #1
 800e356:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	f107 0210 	add.w	r2, r7, #16
 800e360:	4611      	mov	r1, r2
 800e362:	4618      	mov	r0, r3
 800e364:	f003 fcbc 	bl	8011ce0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	4618      	mov	r0, r3
 800e36e:	f003 fe96 	bl	801209e <SDMMC_CmdSendSCR>
 800e372:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e376:	2b00      	cmp	r3, #0
 800e378:	d027      	beq.n	800e3ca <SD_FindSCR+0xe2>
  {
    return errorstate;
 800e37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e37c:	e07e      	b.n	800e47c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e384:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d113      	bne.n	800e3b4 <SD_FindSCR+0xcc>
 800e38c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d110      	bne.n	800e3b4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	4618      	mov	r0, r3
 800e398:	f003 fc1a 	bl	8011bd0 <SDMMC_ReadFIFO>
 800e39c:	4603      	mov	r3, r0
 800e39e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f003 fc13 	bl	8011bd0 <SDMMC_ReadFIFO>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	60fb      	str	r3, [r7, #12]
      index++;
 800e3ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3b0:	3301      	adds	r3, #1
 800e3b2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e3b4:	f7f5 fa02 	bl	80037bc <HAL_GetTick>
 800e3b8:	4602      	mov	r2, r0
 800e3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3bc:	1ad3      	subs	r3, r2, r3
 800e3be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3c2:	d102      	bne.n	800e3ca <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e3c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e3c8:	e058      	b.n	800e47c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e3d0:	f240 532a 	movw	r3, #1322	; 0x52a
 800e3d4:	4013      	ands	r3, r2
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d0d1      	beq.n	800e37e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3e0:	f003 0308 	and.w	r3, r3, #8
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d005      	beq.n	800e3f4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	2208      	movs	r2, #8
 800e3ee:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e3f0:	2308      	movs	r3, #8
 800e3f2:	e043      	b.n	800e47c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3fa:	f003 0302 	and.w	r3, r3, #2
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d005      	beq.n	800e40e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	2202      	movs	r2, #2
 800e408:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e40a:	2302      	movs	r3, #2
 800e40c:	e036      	b.n	800e47c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e414:	f003 0320 	and.w	r3, r3, #32
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d005      	beq.n	800e428 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	2220      	movs	r2, #32
 800e422:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e424:	2320      	movs	r3, #32
 800e426:	e029      	b.n	800e47c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	4a15      	ldr	r2, [pc, #84]	; (800e484 <SD_FindSCR+0x19c>)
 800e42e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	061a      	lsls	r2, r3, #24
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	021b      	lsls	r3, r3, #8
 800e438:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e43c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	0a1b      	lsrs	r3, r3, #8
 800e442:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e446:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	0e1b      	lsrs	r3, r3, #24
 800e44c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e44e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e450:	601a      	str	r2, [r3, #0]
    scr++;
 800e452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e454:	3304      	adds	r3, #4
 800e456:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e458:	68bb      	ldr	r3, [r7, #8]
 800e45a:	061a      	lsls	r2, r3, #24
 800e45c:	68bb      	ldr	r3, [r7, #8]
 800e45e:	021b      	lsls	r3, r3, #8
 800e460:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e464:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e466:	68bb      	ldr	r3, [r7, #8]
 800e468:	0a1b      	lsrs	r3, r3, #8
 800e46a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e46e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e470:	68bb      	ldr	r3, [r7, #8]
 800e472:	0e1b      	lsrs	r3, r3, #24
 800e474:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e478:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e47a:	2300      	movs	r3, #0
}
 800e47c:	4618      	mov	r0, r3
 800e47e:	3738      	adds	r7, #56	; 0x38
 800e480:	46bd      	mov	sp, r7
 800e482:	bd80      	pop	{r7, pc}
 800e484:	18000f3a 	.word	0x18000f3a

0800e488 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b086      	sub	sp, #24
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e494:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e49a:	2b1f      	cmp	r3, #31
 800e49c:	d936      	bls.n	800e50c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800e49e:	2300      	movs	r3, #0
 800e4a0:	617b      	str	r3, [r7, #20]
 800e4a2:	e027      	b.n	800e4f4 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	f003 fb91 	bl	8011bd0 <SDMMC_ReadFIFO>
 800e4ae:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	b2da      	uxtb	r2, r3
 800e4b4:	693b      	ldr	r3, [r7, #16]
 800e4b6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e4b8:	693b      	ldr	r3, [r7, #16]
 800e4ba:	3301      	adds	r3, #1
 800e4bc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	0a1b      	lsrs	r3, r3, #8
 800e4c2:	b2da      	uxtb	r2, r3
 800e4c4:	693b      	ldr	r3, [r7, #16]
 800e4c6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e4c8:	693b      	ldr	r3, [r7, #16]
 800e4ca:	3301      	adds	r3, #1
 800e4cc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	0c1b      	lsrs	r3, r3, #16
 800e4d2:	b2da      	uxtb	r2, r3
 800e4d4:	693b      	ldr	r3, [r7, #16]
 800e4d6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e4d8:	693b      	ldr	r3, [r7, #16]
 800e4da:	3301      	adds	r3, #1
 800e4dc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	0e1b      	lsrs	r3, r3, #24
 800e4e2:	b2da      	uxtb	r2, r3
 800e4e4:	693b      	ldr	r3, [r7, #16]
 800e4e6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e4e8:	693b      	ldr	r3, [r7, #16]
 800e4ea:	3301      	adds	r3, #1
 800e4ec:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800e4ee:	697b      	ldr	r3, [r7, #20]
 800e4f0:	3301      	adds	r3, #1
 800e4f2:	617b      	str	r3, [r7, #20]
 800e4f4:	697b      	ldr	r3, [r7, #20]
 800e4f6:	2b07      	cmp	r3, #7
 800e4f8:	d9d4      	bls.n	800e4a4 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	693a      	ldr	r2, [r7, #16]
 800e4fe:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e504:	f1a3 0220 	sub.w	r2, r3, #32
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800e50c:	bf00      	nop
 800e50e:	3718      	adds	r7, #24
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}

0800e514 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b086      	sub	sp, #24
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	69db      	ldr	r3, [r3, #28]
 800e520:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	6a1b      	ldr	r3, [r3, #32]
 800e526:	2b1f      	cmp	r3, #31
 800e528:	d93a      	bls.n	800e5a0 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800e52a:	2300      	movs	r3, #0
 800e52c:	617b      	str	r3, [r7, #20]
 800e52e:	e02b      	b.n	800e588 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800e530:	693b      	ldr	r3, [r7, #16]
 800e532:	781b      	ldrb	r3, [r3, #0]
 800e534:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e536:	693b      	ldr	r3, [r7, #16]
 800e538:	3301      	adds	r3, #1
 800e53a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e53c:	693b      	ldr	r3, [r7, #16]
 800e53e:	781b      	ldrb	r3, [r3, #0]
 800e540:	021a      	lsls	r2, r3, #8
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	4313      	orrs	r3, r2
 800e546:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e548:	693b      	ldr	r3, [r7, #16]
 800e54a:	3301      	adds	r3, #1
 800e54c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e54e:	693b      	ldr	r3, [r7, #16]
 800e550:	781b      	ldrb	r3, [r3, #0]
 800e552:	041a      	lsls	r2, r3, #16
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	4313      	orrs	r3, r2
 800e558:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e55a:	693b      	ldr	r3, [r7, #16]
 800e55c:	3301      	adds	r3, #1
 800e55e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e560:	693b      	ldr	r3, [r7, #16]
 800e562:	781b      	ldrb	r3, [r3, #0]
 800e564:	061a      	lsls	r2, r3, #24
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	4313      	orrs	r3, r2
 800e56a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e56c:	693b      	ldr	r3, [r7, #16]
 800e56e:	3301      	adds	r3, #1
 800e570:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	f107 020c 	add.w	r2, r7, #12
 800e57a:	4611      	mov	r1, r2
 800e57c:	4618      	mov	r0, r3
 800e57e:	f003 fb34 	bl	8011bea <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800e582:	697b      	ldr	r3, [r7, #20]
 800e584:	3301      	adds	r3, #1
 800e586:	617b      	str	r3, [r7, #20]
 800e588:	697b      	ldr	r3, [r7, #20]
 800e58a:	2b07      	cmp	r3, #7
 800e58c:	d9d0      	bls.n	800e530 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	693a      	ldr	r2, [r7, #16]
 800e592:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	6a1b      	ldr	r3, [r3, #32]
 800e598:	f1a3 0220 	sub.w	r2, r3, #32
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	621a      	str	r2, [r3, #32]
  }
}
 800e5a0:	bf00      	nop
 800e5a2:	3718      	adds	r7, #24
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}

0800e5a8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e5a8:	b480      	push	{r7}
 800e5aa:	b083      	sub	sp, #12
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e5b0:	bf00      	nop
 800e5b2:	370c      	adds	r7, #12
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ba:	4770      	bx	lr

0800e5bc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e5bc:	b480      	push	{r7}
 800e5be:	b083      	sub	sp, #12
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e5c4:	bf00      	nop
 800e5c6:	370c      	adds	r7, #12
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ce:	4770      	bx	lr

0800e5d0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e5d0:	b480      	push	{r7}
 800e5d2:	b083      	sub	sp, #12
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e5d8:	bf00      	nop
 800e5da:	370c      	adds	r7, #12
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e2:	4770      	bx	lr

0800e5e4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e5e4:	b480      	push	{r7}
 800e5e6:	b083      	sub	sp, #12
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e5ec:	bf00      	nop
 800e5ee:	370c      	adds	r7, #12
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f6:	4770      	bx	lr

0800e5f8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b084      	sub	sp, #16
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d101      	bne.n	800e60a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e606:	2301      	movs	r3, #1
 800e608:	e10f      	b.n	800e82a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	2200      	movs	r2, #0
 800e60e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	4a87      	ldr	r2, [pc, #540]	; (800e834 <HAL_SPI_Init+0x23c>)
 800e616:	4293      	cmp	r3, r2
 800e618:	d00f      	beq.n	800e63a <HAL_SPI_Init+0x42>
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	4a86      	ldr	r2, [pc, #536]	; (800e838 <HAL_SPI_Init+0x240>)
 800e620:	4293      	cmp	r3, r2
 800e622:	d00a      	beq.n	800e63a <HAL_SPI_Init+0x42>
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	4a84      	ldr	r2, [pc, #528]	; (800e83c <HAL_SPI_Init+0x244>)
 800e62a:	4293      	cmp	r3, r2
 800e62c:	d005      	beq.n	800e63a <HAL_SPI_Init+0x42>
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	68db      	ldr	r3, [r3, #12]
 800e632:	2b0f      	cmp	r3, #15
 800e634:	d901      	bls.n	800e63a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e636:	2301      	movs	r3, #1
 800e638:	e0f7      	b.n	800e82a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e63a:	6878      	ldr	r0, [r7, #4]
 800e63c:	f000 fd5a 	bl	800f0f4 <SPI_GetPacketSize>
 800e640:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	4a7b      	ldr	r2, [pc, #492]	; (800e834 <HAL_SPI_Init+0x23c>)
 800e648:	4293      	cmp	r3, r2
 800e64a:	d00c      	beq.n	800e666 <HAL_SPI_Init+0x6e>
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	4a79      	ldr	r2, [pc, #484]	; (800e838 <HAL_SPI_Init+0x240>)
 800e652:	4293      	cmp	r3, r2
 800e654:	d007      	beq.n	800e666 <HAL_SPI_Init+0x6e>
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	4a78      	ldr	r2, [pc, #480]	; (800e83c <HAL_SPI_Init+0x244>)
 800e65c:	4293      	cmp	r3, r2
 800e65e:	d002      	beq.n	800e666 <HAL_SPI_Init+0x6e>
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	2b08      	cmp	r3, #8
 800e664:	d811      	bhi.n	800e68a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e66a:	4a72      	ldr	r2, [pc, #456]	; (800e834 <HAL_SPI_Init+0x23c>)
 800e66c:	4293      	cmp	r3, r2
 800e66e:	d009      	beq.n	800e684 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	4a70      	ldr	r2, [pc, #448]	; (800e838 <HAL_SPI_Init+0x240>)
 800e676:	4293      	cmp	r3, r2
 800e678:	d004      	beq.n	800e684 <HAL_SPI_Init+0x8c>
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	4a6f      	ldr	r2, [pc, #444]	; (800e83c <HAL_SPI_Init+0x244>)
 800e680:	4293      	cmp	r3, r2
 800e682:	d104      	bne.n	800e68e <HAL_SPI_Init+0x96>
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	2b10      	cmp	r3, #16
 800e688:	d901      	bls.n	800e68e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e68a:	2301      	movs	r3, #1
 800e68c:	e0cd      	b.n	800e82a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e694:	b2db      	uxtb	r3, r3
 800e696:	2b00      	cmp	r3, #0
 800e698:	d106      	bne.n	800e6a8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	2200      	movs	r2, #0
 800e69e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e6a2:	6878      	ldr	r0, [r7, #4]
 800e6a4:	f7f4 face 	bl	8002c44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	2202      	movs	r2, #2
 800e6ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	681a      	ldr	r2, [r3, #0]
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	f022 0201 	bic.w	r2, r2, #1
 800e6be:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	689b      	ldr	r3, [r3, #8]
 800e6c6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e6ca:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	699b      	ldr	r3, [r3, #24]
 800e6d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e6d4:	d119      	bne.n	800e70a <HAL_SPI_Init+0x112>
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	685b      	ldr	r3, [r3, #4]
 800e6da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e6de:	d103      	bne.n	800e6e8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d008      	beq.n	800e6fa <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d10c      	bne.n	800e70a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e6f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e6f8:	d107      	bne.n	800e70a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	681a      	ldr	r2, [r3, #0]
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e708:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	685b      	ldr	r3, [r3, #4]
 800e70e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e712:	2b00      	cmp	r3, #0
 800e714:	d00f      	beq.n	800e736 <HAL_SPI_Init+0x13e>
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	68db      	ldr	r3, [r3, #12]
 800e71a:	2b06      	cmp	r3, #6
 800e71c:	d90b      	bls.n	800e736 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	430a      	orrs	r2, r1
 800e732:	601a      	str	r2, [r3, #0]
 800e734:	e007      	b.n	800e746 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	681a      	ldr	r2, [r3, #0]
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e744:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	69da      	ldr	r2, [r3, #28]
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e74e:	431a      	orrs	r2, r3
 800e750:	68bb      	ldr	r3, [r7, #8]
 800e752:	431a      	orrs	r2, r3
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e758:	ea42 0103 	orr.w	r1, r2, r3
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	68da      	ldr	r2, [r3, #12]
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	430a      	orrs	r2, r1
 800e766:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e770:	431a      	orrs	r2, r3
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e776:	431a      	orrs	r2, r3
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	699b      	ldr	r3, [r3, #24]
 800e77c:	431a      	orrs	r2, r3
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	691b      	ldr	r3, [r3, #16]
 800e782:	431a      	orrs	r2, r3
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	695b      	ldr	r3, [r3, #20]
 800e788:	431a      	orrs	r2, r3
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	6a1b      	ldr	r3, [r3, #32]
 800e78e:	431a      	orrs	r2, r3
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	685b      	ldr	r3, [r3, #4]
 800e794:	431a      	orrs	r2, r3
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e79a:	431a      	orrs	r2, r3
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	689b      	ldr	r3, [r3, #8]
 800e7a0:	431a      	orrs	r2, r3
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e7a6:	ea42 0103 	orr.w	r1, r2, r3
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	430a      	orrs	r2, r1
 800e7b4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	685b      	ldr	r3, [r3, #4]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d113      	bne.n	800e7e6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	689b      	ldr	r3, [r3, #8]
 800e7c4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e7d0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	689b      	ldr	r3, [r3, #8]
 800e7d8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e7e4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	f022 0201 	bic.w	r2, r2, #1
 800e7f4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	685b      	ldr	r3, [r3, #4]
 800e7fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d00a      	beq.n	800e818 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	68db      	ldr	r3, [r3, #12]
 800e808:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	430a      	orrs	r2, r1
 800e816:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2200      	movs	r2, #0
 800e81c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2201      	movs	r2, #1
 800e824:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e828:	2300      	movs	r3, #0
}
 800e82a:	4618      	mov	r0, r3
 800e82c:	3710      	adds	r7, #16
 800e82e:	46bd      	mov	sp, r7
 800e830:	bd80      	pop	{r7, pc}
 800e832:	bf00      	nop
 800e834:	40013000 	.word	0x40013000
 800e838:	40003800 	.word	0x40003800
 800e83c:	40003c00 	.word	0x40003c00

0800e840 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b08a      	sub	sp, #40	; 0x28
 800e844:	af02      	add	r7, sp, #8
 800e846:	60f8      	str	r0, [r7, #12]
 800e848:	60b9      	str	r1, [r7, #8]
 800e84a:	603b      	str	r3, [r7, #0]
 800e84c:	4613      	mov	r3, r2
 800e84e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	3320      	adds	r3, #32
 800e856:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e858:	2300      	movs	r3, #0
 800e85a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e862:	2b01      	cmp	r3, #1
 800e864:	d101      	bne.n	800e86a <HAL_SPI_Transmit+0x2a>
 800e866:	2302      	movs	r3, #2
 800e868:	e1e1      	b.n	800ec2e <HAL_SPI_Transmit+0x3ee>
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	2201      	movs	r2, #1
 800e86e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e872:	f7f4 ffa3 	bl	80037bc <HAL_GetTick>
 800e876:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e87e:	b2db      	uxtb	r3, r3
 800e880:	2b01      	cmp	r3, #1
 800e882:	d007      	beq.n	800e894 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800e884:	2302      	movs	r3, #2
 800e886:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	2200      	movs	r2, #0
 800e88c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e890:	7efb      	ldrb	r3, [r7, #27]
 800e892:	e1cc      	b.n	800ec2e <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e894:	68bb      	ldr	r3, [r7, #8]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d002      	beq.n	800e8a0 <HAL_SPI_Transmit+0x60>
 800e89a:	88fb      	ldrh	r3, [r7, #6]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d107      	bne.n	800e8b0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800e8a0:	2301      	movs	r3, #1
 800e8a2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e8ac:	7efb      	ldrb	r3, [r7, #27]
 800e8ae:	e1be      	b.n	800ec2e <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	2203      	movs	r2, #3
 800e8b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	68ba      	ldr	r2, [r7, #8]
 800e8c4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	88fa      	ldrh	r2, [r7, #6]
 800e8ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	88fa      	ldrh	r2, [r7, #6]
 800e8d2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	2200      	movs	r2, #0
 800e8da:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	2200      	movs	r2, #0
 800e8e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	689b      	ldr	r3, [r3, #8]
 800e8fc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e900:	d108      	bne.n	800e914 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	681a      	ldr	r2, [r3, #0]
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e910:	601a      	str	r2, [r3, #0]
 800e912:	e009      	b.n	800e928 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	68db      	ldr	r3, [r3, #12]
 800e91a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800e926:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	685a      	ldr	r2, [r3, #4]
 800e92e:	4b96      	ldr	r3, [pc, #600]	; (800eb88 <HAL_SPI_Transmit+0x348>)
 800e930:	4013      	ands	r3, r2
 800e932:	88f9      	ldrh	r1, [r7, #6]
 800e934:	68fa      	ldr	r2, [r7, #12]
 800e936:	6812      	ldr	r2, [r2, #0]
 800e938:	430b      	orrs	r3, r1
 800e93a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	681a      	ldr	r2, [r3, #0]
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	f042 0201 	orr.w	r2, r2, #1
 800e94a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	685b      	ldr	r3, [r3, #4]
 800e950:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e954:	d107      	bne.n	800e966 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	681a      	ldr	r2, [r3, #0]
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e964:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	68db      	ldr	r3, [r3, #12]
 800e96a:	2b0f      	cmp	r3, #15
 800e96c:	d947      	bls.n	800e9fe <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800e96e:	e03f      	b.n	800e9f0 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	695b      	ldr	r3, [r3, #20]
 800e976:	f003 0302 	and.w	r3, r3, #2
 800e97a:	2b02      	cmp	r3, #2
 800e97c:	d114      	bne.n	800e9a8 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	6812      	ldr	r2, [r2, #0]
 800e988:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e98e:	1d1a      	adds	r2, r3, #4
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e99a:	b29b      	uxth	r3, r3
 800e99c:	3b01      	subs	r3, #1
 800e99e:	b29a      	uxth	r2, r3
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e9a6:	e023      	b.n	800e9f0 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e9a8:	f7f4 ff08 	bl	80037bc <HAL_GetTick>
 800e9ac:	4602      	mov	r2, r0
 800e9ae:	697b      	ldr	r3, [r7, #20]
 800e9b0:	1ad3      	subs	r3, r2, r3
 800e9b2:	683a      	ldr	r2, [r7, #0]
 800e9b4:	429a      	cmp	r2, r3
 800e9b6:	d803      	bhi.n	800e9c0 <HAL_SPI_Transmit+0x180>
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9be:	d102      	bne.n	800e9c6 <HAL_SPI_Transmit+0x186>
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d114      	bne.n	800e9f0 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e9c6:	68f8      	ldr	r0, [r7, #12]
 800e9c8:	f000 fac6 	bl	800ef58 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	2201      	movs	r2, #1
 800e9e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800e9ec:	2303      	movs	r3, #3
 800e9ee:	e11e      	b.n	800ec2e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e9f6:	b29b      	uxth	r3, r3
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d1b9      	bne.n	800e970 <HAL_SPI_Transmit+0x130>
 800e9fc:	e0f1      	b.n	800ebe2 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	68db      	ldr	r3, [r3, #12]
 800ea02:	2b07      	cmp	r3, #7
 800ea04:	f240 80e6 	bls.w	800ebd4 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ea08:	e05d      	b.n	800eac6 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	695b      	ldr	r3, [r3, #20]
 800ea10:	f003 0302 	and.w	r3, r3, #2
 800ea14:	2b02      	cmp	r3, #2
 800ea16:	d132      	bne.n	800ea7e <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ea1e:	b29b      	uxth	r3, r3
 800ea20:	2b01      	cmp	r3, #1
 800ea22:	d918      	bls.n	800ea56 <HAL_SPI_Transmit+0x216>
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d014      	beq.n	800ea56 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	6812      	ldr	r2, [r2, #0]
 800ea36:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ea3c:	1d1a      	adds	r2, r3, #4
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ea48:	b29b      	uxth	r3, r3
 800ea4a:	3b02      	subs	r3, #2
 800ea4c:	b29a      	uxth	r2, r3
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ea54:	e037      	b.n	800eac6 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ea5a:	881a      	ldrh	r2, [r3, #0]
 800ea5c:	69fb      	ldr	r3, [r7, #28]
 800ea5e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ea64:	1c9a      	adds	r2, r3, #2
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ea70:	b29b      	uxth	r3, r3
 800ea72:	3b01      	subs	r3, #1
 800ea74:	b29a      	uxth	r2, r3
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ea7c:	e023      	b.n	800eac6 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ea7e:	f7f4 fe9d 	bl	80037bc <HAL_GetTick>
 800ea82:	4602      	mov	r2, r0
 800ea84:	697b      	ldr	r3, [r7, #20]
 800ea86:	1ad3      	subs	r3, r2, r3
 800ea88:	683a      	ldr	r2, [r7, #0]
 800ea8a:	429a      	cmp	r2, r3
 800ea8c:	d803      	bhi.n	800ea96 <HAL_SPI_Transmit+0x256>
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea94:	d102      	bne.n	800ea9c <HAL_SPI_Transmit+0x25c>
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d114      	bne.n	800eac6 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ea9c:	68f8      	ldr	r0, [r7, #12]
 800ea9e:	f000 fa5b 	bl	800ef58 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eab0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	2201      	movs	r2, #1
 800eabe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800eac2:	2303      	movs	r3, #3
 800eac4:	e0b3      	b.n	800ec2e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eacc:	b29b      	uxth	r3, r3
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d19b      	bne.n	800ea0a <HAL_SPI_Transmit+0x1ca>
 800ead2:	e086      	b.n	800ebe2 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	695b      	ldr	r3, [r3, #20]
 800eada:	f003 0302 	and.w	r3, r3, #2
 800eade:	2b02      	cmp	r3, #2
 800eae0:	d154      	bne.n	800eb8c <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eae8:	b29b      	uxth	r3, r3
 800eaea:	2b03      	cmp	r3, #3
 800eaec:	d918      	bls.n	800eb20 <HAL_SPI_Transmit+0x2e0>
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eaf2:	2b40      	cmp	r3, #64	; 0x40
 800eaf4:	d914      	bls.n	800eb20 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	6812      	ldr	r2, [r2, #0]
 800eb00:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb06:	1d1a      	adds	r2, r3, #4
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eb12:	b29b      	uxth	r3, r3
 800eb14:	3b04      	subs	r3, #4
 800eb16:	b29a      	uxth	r2, r3
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800eb1e:	e059      	b.n	800ebd4 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eb26:	b29b      	uxth	r3, r3
 800eb28:	2b01      	cmp	r3, #1
 800eb2a:	d917      	bls.n	800eb5c <HAL_SPI_Transmit+0x31c>
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d013      	beq.n	800eb5c <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb38:	881a      	ldrh	r2, [r3, #0]
 800eb3a:	69fb      	ldr	r3, [r7, #28]
 800eb3c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb42:	1c9a      	adds	r2, r3, #2
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eb4e:	b29b      	uxth	r3, r3
 800eb50:	3b02      	subs	r3, #2
 800eb52:	b29a      	uxth	r2, r3
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800eb5a:	e03b      	b.n	800ebd4 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	3320      	adds	r3, #32
 800eb66:	7812      	ldrb	r2, [r2, #0]
 800eb68:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb6e:	1c5a      	adds	r2, r3, #1
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eb7a:	b29b      	uxth	r3, r3
 800eb7c:	3b01      	subs	r3, #1
 800eb7e:	b29a      	uxth	r2, r3
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800eb86:	e025      	b.n	800ebd4 <HAL_SPI_Transmit+0x394>
 800eb88:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eb8c:	f7f4 fe16 	bl	80037bc <HAL_GetTick>
 800eb90:	4602      	mov	r2, r0
 800eb92:	697b      	ldr	r3, [r7, #20]
 800eb94:	1ad3      	subs	r3, r2, r3
 800eb96:	683a      	ldr	r2, [r7, #0]
 800eb98:	429a      	cmp	r2, r3
 800eb9a:	d803      	bhi.n	800eba4 <HAL_SPI_Transmit+0x364>
 800eb9c:	683b      	ldr	r3, [r7, #0]
 800eb9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eba2:	d102      	bne.n	800ebaa <HAL_SPI_Transmit+0x36a>
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d114      	bne.n	800ebd4 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ebaa:	68f8      	ldr	r0, [r7, #12]
 800ebac:	f000 f9d4 	bl	800ef58 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ebbe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	2201      	movs	r2, #1
 800ebcc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ebd0:	2303      	movs	r3, #3
 800ebd2:	e02c      	b.n	800ec2e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ebda:	b29b      	uxth	r3, r3
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	f47f af79 	bne.w	800ead4 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800ebe2:	697b      	ldr	r3, [r7, #20]
 800ebe4:	9300      	str	r3, [sp, #0]
 800ebe6:	683b      	ldr	r3, [r7, #0]
 800ebe8:	2200      	movs	r2, #0
 800ebea:	2108      	movs	r1, #8
 800ebec:	68f8      	ldr	r0, [r7, #12]
 800ebee:	f000 fa53 	bl	800f098 <SPI_WaitOnFlagUntilTimeout>
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d007      	beq.n	800ec08 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ebfe:	f043 0220 	orr.w	r2, r3, #32
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ec08:	68f8      	ldr	r0, [r7, #12]
 800ec0a:	f000 f9a5 	bl	800ef58 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	2200      	movs	r2, #0
 800ec12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	2201      	movs	r2, #1
 800ec1a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d001      	beq.n	800ec2c <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800ec28:	2301      	movs	r3, #1
 800ec2a:	e000      	b.n	800ec2e <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800ec2c:	7efb      	ldrb	r3, [r7, #27]
}
 800ec2e:	4618      	mov	r0, r3
 800ec30:	3720      	adds	r7, #32
 800ec32:	46bd      	mov	sp, r7
 800ec34:	bd80      	pop	{r7, pc}
 800ec36:	bf00      	nop

0800ec38 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b088      	sub	sp, #32
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	60f8      	str	r0, [r7, #12]
 800ec40:	60b9      	str	r1, [r7, #8]
 800ec42:	603b      	str	r3, [r7, #0]
 800ec44:	4613      	mov	r3, r2
 800ec46:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ec48:	2300      	movs	r3, #0
 800ec4a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	3330      	adds	r3, #48	; 0x30
 800ec52:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ec5a:	2b01      	cmp	r3, #1
 800ec5c:	d101      	bne.n	800ec62 <HAL_SPI_Receive+0x2a>
 800ec5e:	2302      	movs	r3, #2
 800ec60:	e173      	b.n	800ef4a <HAL_SPI_Receive+0x312>
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	2201      	movs	r2, #1
 800ec66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ec6a:	f7f4 fda7 	bl	80037bc <HAL_GetTick>
 800ec6e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ec76:	b2db      	uxtb	r3, r3
 800ec78:	2b01      	cmp	r3, #1
 800ec7a:	d007      	beq.n	800ec8c <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800ec7c:	2302      	movs	r3, #2
 800ec7e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	2200      	movs	r2, #0
 800ec84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ec88:	7ffb      	ldrb	r3, [r7, #31]
 800ec8a:	e15e      	b.n	800ef4a <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ec8c:	68bb      	ldr	r3, [r7, #8]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d002      	beq.n	800ec98 <HAL_SPI_Receive+0x60>
 800ec92:	88fb      	ldrh	r3, [r7, #6]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d107      	bne.n	800eca8 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800ec98:	2301      	movs	r3, #1
 800ec9a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	2200      	movs	r2, #0
 800eca0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800eca4:	7ffb      	ldrb	r3, [r7, #31]
 800eca6:	e150      	b.n	800ef4a <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	2204      	movs	r2, #4
 800ecac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	68ba      	ldr	r2, [r7, #8]
 800ecbc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	88fa      	ldrh	r2, [r7, #6]
 800ecc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	88fa      	ldrh	r2, [r7, #6]
 800ecca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	2200      	movs	r2, #0
 800ece0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	2200      	movs	r2, #0
 800ece8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	2200      	movs	r2, #0
 800ecee:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	689b      	ldr	r3, [r3, #8]
 800ecf4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ecf8:	d108      	bne.n	800ed0c <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	681a      	ldr	r2, [r3, #0]
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ed08:	601a      	str	r2, [r3, #0]
 800ed0a:	e009      	b.n	800ed20 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	68db      	ldr	r3, [r3, #12]
 800ed12:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ed1e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	685a      	ldr	r2, [r3, #4]
 800ed26:	4b8b      	ldr	r3, [pc, #556]	; (800ef54 <HAL_SPI_Receive+0x31c>)
 800ed28:	4013      	ands	r3, r2
 800ed2a:	88f9      	ldrh	r1, [r7, #6]
 800ed2c:	68fa      	ldr	r2, [r7, #12]
 800ed2e:	6812      	ldr	r2, [r2, #0]
 800ed30:	430b      	orrs	r3, r1
 800ed32:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	681a      	ldr	r2, [r3, #0]
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	f042 0201 	orr.w	r2, r2, #1
 800ed42:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	685b      	ldr	r3, [r3, #4]
 800ed48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ed4c:	d107      	bne.n	800ed5e <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	681a      	ldr	r2, [r3, #0]
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ed5c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	68db      	ldr	r3, [r3, #12]
 800ed62:	2b0f      	cmp	r3, #15
 800ed64:	d948      	bls.n	800edf8 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ed66:	e040      	b.n	800edea <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	695a      	ldr	r2, [r3, #20]
 800ed6e:	f248 0308 	movw	r3, #32776	; 0x8008
 800ed72:	4013      	ands	r3, r2
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d014      	beq.n	800eda2 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	681a      	ldr	r2, [r3, #0]
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ed80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ed82:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ed88:	1d1a      	adds	r2, r3, #4
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ed94:	b29b      	uxth	r3, r3
 800ed96:	3b01      	subs	r3, #1
 800ed98:	b29a      	uxth	r2, r3
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800eda0:	e023      	b.n	800edea <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eda2:	f7f4 fd0b 	bl	80037bc <HAL_GetTick>
 800eda6:	4602      	mov	r2, r0
 800eda8:	697b      	ldr	r3, [r7, #20]
 800edaa:	1ad3      	subs	r3, r2, r3
 800edac:	683a      	ldr	r2, [r7, #0]
 800edae:	429a      	cmp	r2, r3
 800edb0:	d803      	bhi.n	800edba <HAL_SPI_Receive+0x182>
 800edb2:	683b      	ldr	r3, [r7, #0]
 800edb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edb8:	d102      	bne.n	800edc0 <HAL_SPI_Receive+0x188>
 800edba:	683b      	ldr	r3, [r7, #0]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d114      	bne.n	800edea <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800edc0:	68f8      	ldr	r0, [r7, #12]
 800edc2:	f000 f8c9 	bl	800ef58 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	2200      	movs	r2, #0
 800edca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800edd4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	2201      	movs	r2, #1
 800ede2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ede6:	2303      	movs	r3, #3
 800ede8:	e0af      	b.n	800ef4a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800edf0:	b29b      	uxth	r3, r3
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d1b8      	bne.n	800ed68 <HAL_SPI_Receive+0x130>
 800edf6:	e095      	b.n	800ef24 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	68db      	ldr	r3, [r3, #12]
 800edfc:	2b07      	cmp	r3, #7
 800edfe:	f240 808b 	bls.w	800ef18 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ee02:	e03f      	b.n	800ee84 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	695b      	ldr	r3, [r3, #20]
 800ee0a:	f003 0301 	and.w	r3, r3, #1
 800ee0e:	2b01      	cmp	r3, #1
 800ee10:	d114      	bne.n	800ee3c <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee16:	69ba      	ldr	r2, [r7, #24]
 800ee18:	8812      	ldrh	r2, [r2, #0]
 800ee1a:	b292      	uxth	r2, r2
 800ee1c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee22:	1c9a      	adds	r2, r3, #2
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ee2e:	b29b      	uxth	r3, r3
 800ee30:	3b01      	subs	r3, #1
 800ee32:	b29a      	uxth	r2, r3
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ee3a:	e023      	b.n	800ee84 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ee3c:	f7f4 fcbe 	bl	80037bc <HAL_GetTick>
 800ee40:	4602      	mov	r2, r0
 800ee42:	697b      	ldr	r3, [r7, #20]
 800ee44:	1ad3      	subs	r3, r2, r3
 800ee46:	683a      	ldr	r2, [r7, #0]
 800ee48:	429a      	cmp	r2, r3
 800ee4a:	d803      	bhi.n	800ee54 <HAL_SPI_Receive+0x21c>
 800ee4c:	683b      	ldr	r3, [r7, #0]
 800ee4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee52:	d102      	bne.n	800ee5a <HAL_SPI_Receive+0x222>
 800ee54:	683b      	ldr	r3, [r7, #0]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d114      	bne.n	800ee84 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ee5a:	68f8      	ldr	r0, [r7, #12]
 800ee5c:	f000 f87c 	bl	800ef58 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	2200      	movs	r2, #0
 800ee64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee6e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	2201      	movs	r2, #1
 800ee7c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ee80:	2303      	movs	r3, #3
 800ee82:	e062      	b.n	800ef4a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ee8a:	b29b      	uxth	r3, r3
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d1b9      	bne.n	800ee04 <HAL_SPI_Receive+0x1cc>
 800ee90:	e048      	b.n	800ef24 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	695b      	ldr	r3, [r3, #20]
 800ee98:	f003 0301 	and.w	r3, r3, #1
 800ee9c:	2b01      	cmp	r3, #1
 800ee9e:	d117      	bne.n	800eed0 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eeac:	7812      	ldrb	r2, [r2, #0]
 800eeae:	b2d2      	uxtb	r2, r2
 800eeb0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eeb6:	1c5a      	adds	r2, r3, #1
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800eec2:	b29b      	uxth	r3, r3
 800eec4:	3b01      	subs	r3, #1
 800eec6:	b29a      	uxth	r2, r3
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800eece:	e023      	b.n	800ef18 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eed0:	f7f4 fc74 	bl	80037bc <HAL_GetTick>
 800eed4:	4602      	mov	r2, r0
 800eed6:	697b      	ldr	r3, [r7, #20]
 800eed8:	1ad3      	subs	r3, r2, r3
 800eeda:	683a      	ldr	r2, [r7, #0]
 800eedc:	429a      	cmp	r2, r3
 800eede:	d803      	bhi.n	800eee8 <HAL_SPI_Receive+0x2b0>
 800eee0:	683b      	ldr	r3, [r7, #0]
 800eee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eee6:	d102      	bne.n	800eeee <HAL_SPI_Receive+0x2b6>
 800eee8:	683b      	ldr	r3, [r7, #0]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d114      	bne.n	800ef18 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800eeee:	68f8      	ldr	r0, [r7, #12]
 800eef0:	f000 f832 	bl	800ef58 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	2200      	movs	r2, #0
 800eef8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	2201      	movs	r2, #1
 800ef10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ef14:	2303      	movs	r3, #3
 800ef16:	e018      	b.n	800ef4a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ef1e:	b29b      	uxth	r3, r3
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d1b6      	bne.n	800ee92 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ef24:	68f8      	ldr	r0, [r7, #12]
 800ef26:	f000 f817 	bl	800ef58 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	2201      	movs	r2, #1
 800ef36:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d001      	beq.n	800ef48 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800ef44:	2301      	movs	r3, #1
 800ef46:	e000      	b.n	800ef4a <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800ef48:	7ffb      	ldrb	r3, [r7, #31]
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3720      	adds	r7, #32
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}
 800ef52:	bf00      	nop
 800ef54:	ffff0000 	.word	0xffff0000

0800ef58 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800ef58:	b480      	push	{r7}
 800ef5a:	b085      	sub	sp, #20
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	695b      	ldr	r3, [r3, #20]
 800ef66:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	699a      	ldr	r2, [r3, #24]
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	f042 0208 	orr.w	r2, r2, #8
 800ef76:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	699a      	ldr	r2, [r3, #24]
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	f042 0210 	orr.w	r2, r2, #16
 800ef86:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	681a      	ldr	r2, [r3, #0]
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	f022 0201 	bic.w	r2, r2, #1
 800ef96:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	6919      	ldr	r1, [r3, #16]
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	681a      	ldr	r2, [r3, #0]
 800efa2:	4b3c      	ldr	r3, [pc, #240]	; (800f094 <SPI_CloseTransfer+0x13c>)
 800efa4:	400b      	ands	r3, r1
 800efa6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	689a      	ldr	r2, [r3, #8]
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800efb6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800efbe:	b2db      	uxtb	r3, r3
 800efc0:	2b04      	cmp	r3, #4
 800efc2:	d014      	beq.n	800efee <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	f003 0320 	and.w	r3, r3, #32
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d00f      	beq.n	800efee <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800efd4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	699a      	ldr	r2, [r3, #24]
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	f042 0220 	orr.w	r2, r2, #32
 800efec:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800eff4:	b2db      	uxtb	r3, r3
 800eff6:	2b03      	cmp	r3, #3
 800eff8:	d014      	beq.n	800f024 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f000:	2b00      	cmp	r3, #0
 800f002:	d00f      	beq.n	800f024 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f00a:	f043 0204 	orr.w	r2, r3, #4
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	699a      	ldr	r2, [r3, #24]
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f022:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d00f      	beq.n	800f04e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f034:	f043 0201 	orr.w	r2, r3, #1
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	699a      	ldr	r2, [r3, #24]
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f04c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f054:	2b00      	cmp	r3, #0
 800f056:	d00f      	beq.n	800f078 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f05e:	f043 0208 	orr.w	r2, r3, #8
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	699a      	ldr	r2, [r3, #24]
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f076:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2200      	movs	r2, #0
 800f07c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	2200      	movs	r2, #0
 800f084:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800f088:	bf00      	nop
 800f08a:	3714      	adds	r7, #20
 800f08c:	46bd      	mov	sp, r7
 800f08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f092:	4770      	bx	lr
 800f094:	fffffc90 	.word	0xfffffc90

0800f098 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b084      	sub	sp, #16
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	60f8      	str	r0, [r7, #12]
 800f0a0:	60b9      	str	r1, [r7, #8]
 800f0a2:	603b      	str	r3, [r7, #0]
 800f0a4:	4613      	mov	r3, r2
 800f0a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f0a8:	e010      	b.n	800f0cc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f0aa:	f7f4 fb87 	bl	80037bc <HAL_GetTick>
 800f0ae:	4602      	mov	r2, r0
 800f0b0:	69bb      	ldr	r3, [r7, #24]
 800f0b2:	1ad3      	subs	r3, r2, r3
 800f0b4:	683a      	ldr	r2, [r7, #0]
 800f0b6:	429a      	cmp	r2, r3
 800f0b8:	d803      	bhi.n	800f0c2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f0ba:	683b      	ldr	r3, [r7, #0]
 800f0bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0c0:	d102      	bne.n	800f0c8 <SPI_WaitOnFlagUntilTimeout+0x30>
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d101      	bne.n	800f0cc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f0c8:	2303      	movs	r3, #3
 800f0ca:	e00f      	b.n	800f0ec <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	695a      	ldr	r2, [r3, #20]
 800f0d2:	68bb      	ldr	r3, [r7, #8]
 800f0d4:	4013      	ands	r3, r2
 800f0d6:	68ba      	ldr	r2, [r7, #8]
 800f0d8:	429a      	cmp	r2, r3
 800f0da:	bf0c      	ite	eq
 800f0dc:	2301      	moveq	r3, #1
 800f0de:	2300      	movne	r3, #0
 800f0e0:	b2db      	uxtb	r3, r3
 800f0e2:	461a      	mov	r2, r3
 800f0e4:	79fb      	ldrb	r3, [r7, #7]
 800f0e6:	429a      	cmp	r2, r3
 800f0e8:	d0df      	beq.n	800f0aa <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800f0ea:	2300      	movs	r3, #0
}
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	3710      	adds	r7, #16
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	bd80      	pop	{r7, pc}

0800f0f4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800f0f4:	b480      	push	{r7}
 800f0f6:	b085      	sub	sp, #20
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f100:	095b      	lsrs	r3, r3, #5
 800f102:	3301      	adds	r3, #1
 800f104:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	68db      	ldr	r3, [r3, #12]
 800f10a:	3301      	adds	r3, #1
 800f10c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f10e:	68bb      	ldr	r3, [r7, #8]
 800f110:	3307      	adds	r3, #7
 800f112:	08db      	lsrs	r3, r3, #3
 800f114:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f116:	68bb      	ldr	r3, [r7, #8]
 800f118:	68fa      	ldr	r2, [r7, #12]
 800f11a:	fb02 f303 	mul.w	r3, r2, r3
}
 800f11e:	4618      	mov	r0, r3
 800f120:	3714      	adds	r7, #20
 800f122:	46bd      	mov	sp, r7
 800f124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f128:	4770      	bx	lr

0800f12a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f12a:	b580      	push	{r7, lr}
 800f12c:	b082      	sub	sp, #8
 800f12e:	af00      	add	r7, sp, #0
 800f130:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d101      	bne.n	800f13c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f138:	2301      	movs	r3, #1
 800f13a:	e049      	b.n	800f1d0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f142:	b2db      	uxtb	r3, r3
 800f144:	2b00      	cmp	r3, #0
 800f146:	d106      	bne.n	800f156 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	2200      	movs	r2, #0
 800f14c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f150:	6878      	ldr	r0, [r7, #4]
 800f152:	f7f3 fe33 	bl	8002dbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	2202      	movs	r2, #2
 800f15a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	681a      	ldr	r2, [r3, #0]
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	3304      	adds	r3, #4
 800f166:	4619      	mov	r1, r3
 800f168:	4610      	mov	r0, r2
 800f16a:	f000 fed1 	bl	800ff10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	2201      	movs	r2, #1
 800f172:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	2201      	movs	r2, #1
 800f17a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	2201      	movs	r2, #1
 800f182:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	2201      	movs	r2, #1
 800f18a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	2201      	movs	r2, #1
 800f192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	2201      	movs	r2, #1
 800f19a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	2201      	movs	r2, #1
 800f1a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	2201      	movs	r2, #1
 800f1aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	2201      	movs	r2, #1
 800f1b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	2201      	movs	r2, #1
 800f1ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	2201      	movs	r2, #1
 800f1c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	2201      	movs	r2, #1
 800f1ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f1ce:	2300      	movs	r3, #0
}
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	3708      	adds	r7, #8
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd80      	pop	{r7, pc}

0800f1d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b084      	sub	sp, #16
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
 800f1e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f1e2:	683b      	ldr	r3, [r7, #0]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d109      	bne.n	800f1fc <HAL_TIM_PWM_Start+0x24>
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f1ee:	b2db      	uxtb	r3, r3
 800f1f0:	2b01      	cmp	r3, #1
 800f1f2:	bf14      	ite	ne
 800f1f4:	2301      	movne	r3, #1
 800f1f6:	2300      	moveq	r3, #0
 800f1f8:	b2db      	uxtb	r3, r3
 800f1fa:	e03c      	b.n	800f276 <HAL_TIM_PWM_Start+0x9e>
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	2b04      	cmp	r3, #4
 800f200:	d109      	bne.n	800f216 <HAL_TIM_PWM_Start+0x3e>
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f208:	b2db      	uxtb	r3, r3
 800f20a:	2b01      	cmp	r3, #1
 800f20c:	bf14      	ite	ne
 800f20e:	2301      	movne	r3, #1
 800f210:	2300      	moveq	r3, #0
 800f212:	b2db      	uxtb	r3, r3
 800f214:	e02f      	b.n	800f276 <HAL_TIM_PWM_Start+0x9e>
 800f216:	683b      	ldr	r3, [r7, #0]
 800f218:	2b08      	cmp	r3, #8
 800f21a:	d109      	bne.n	800f230 <HAL_TIM_PWM_Start+0x58>
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f222:	b2db      	uxtb	r3, r3
 800f224:	2b01      	cmp	r3, #1
 800f226:	bf14      	ite	ne
 800f228:	2301      	movne	r3, #1
 800f22a:	2300      	moveq	r3, #0
 800f22c:	b2db      	uxtb	r3, r3
 800f22e:	e022      	b.n	800f276 <HAL_TIM_PWM_Start+0x9e>
 800f230:	683b      	ldr	r3, [r7, #0]
 800f232:	2b0c      	cmp	r3, #12
 800f234:	d109      	bne.n	800f24a <HAL_TIM_PWM_Start+0x72>
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f23c:	b2db      	uxtb	r3, r3
 800f23e:	2b01      	cmp	r3, #1
 800f240:	bf14      	ite	ne
 800f242:	2301      	movne	r3, #1
 800f244:	2300      	moveq	r3, #0
 800f246:	b2db      	uxtb	r3, r3
 800f248:	e015      	b.n	800f276 <HAL_TIM_PWM_Start+0x9e>
 800f24a:	683b      	ldr	r3, [r7, #0]
 800f24c:	2b10      	cmp	r3, #16
 800f24e:	d109      	bne.n	800f264 <HAL_TIM_PWM_Start+0x8c>
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f256:	b2db      	uxtb	r3, r3
 800f258:	2b01      	cmp	r3, #1
 800f25a:	bf14      	ite	ne
 800f25c:	2301      	movne	r3, #1
 800f25e:	2300      	moveq	r3, #0
 800f260:	b2db      	uxtb	r3, r3
 800f262:	e008      	b.n	800f276 <HAL_TIM_PWM_Start+0x9e>
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f26a:	b2db      	uxtb	r3, r3
 800f26c:	2b01      	cmp	r3, #1
 800f26e:	bf14      	ite	ne
 800f270:	2301      	movne	r3, #1
 800f272:	2300      	moveq	r3, #0
 800f274:	b2db      	uxtb	r3, r3
 800f276:	2b00      	cmp	r3, #0
 800f278:	d001      	beq.n	800f27e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800f27a:	2301      	movs	r3, #1
 800f27c:	e0ab      	b.n	800f3d6 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f27e:	683b      	ldr	r3, [r7, #0]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d104      	bne.n	800f28e <HAL_TIM_PWM_Start+0xb6>
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	2202      	movs	r2, #2
 800f288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f28c:	e023      	b.n	800f2d6 <HAL_TIM_PWM_Start+0xfe>
 800f28e:	683b      	ldr	r3, [r7, #0]
 800f290:	2b04      	cmp	r3, #4
 800f292:	d104      	bne.n	800f29e <HAL_TIM_PWM_Start+0xc6>
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	2202      	movs	r2, #2
 800f298:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f29c:	e01b      	b.n	800f2d6 <HAL_TIM_PWM_Start+0xfe>
 800f29e:	683b      	ldr	r3, [r7, #0]
 800f2a0:	2b08      	cmp	r3, #8
 800f2a2:	d104      	bne.n	800f2ae <HAL_TIM_PWM_Start+0xd6>
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	2202      	movs	r2, #2
 800f2a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f2ac:	e013      	b.n	800f2d6 <HAL_TIM_PWM_Start+0xfe>
 800f2ae:	683b      	ldr	r3, [r7, #0]
 800f2b0:	2b0c      	cmp	r3, #12
 800f2b2:	d104      	bne.n	800f2be <HAL_TIM_PWM_Start+0xe6>
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2202      	movs	r2, #2
 800f2b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f2bc:	e00b      	b.n	800f2d6 <HAL_TIM_PWM_Start+0xfe>
 800f2be:	683b      	ldr	r3, [r7, #0]
 800f2c0:	2b10      	cmp	r3, #16
 800f2c2:	d104      	bne.n	800f2ce <HAL_TIM_PWM_Start+0xf6>
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2202      	movs	r2, #2
 800f2c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f2cc:	e003      	b.n	800f2d6 <HAL_TIM_PWM_Start+0xfe>
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	2202      	movs	r2, #2
 800f2d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	2201      	movs	r2, #1
 800f2dc:	6839      	ldr	r1, [r7, #0]
 800f2de:	4618      	mov	r0, r3
 800f2e0:	f001 f992 	bl	8010608 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	4a3d      	ldr	r2, [pc, #244]	; (800f3e0 <HAL_TIM_PWM_Start+0x208>)
 800f2ea:	4293      	cmp	r3, r2
 800f2ec:	d013      	beq.n	800f316 <HAL_TIM_PWM_Start+0x13e>
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	4a3c      	ldr	r2, [pc, #240]	; (800f3e4 <HAL_TIM_PWM_Start+0x20c>)
 800f2f4:	4293      	cmp	r3, r2
 800f2f6:	d00e      	beq.n	800f316 <HAL_TIM_PWM_Start+0x13e>
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	4a3a      	ldr	r2, [pc, #232]	; (800f3e8 <HAL_TIM_PWM_Start+0x210>)
 800f2fe:	4293      	cmp	r3, r2
 800f300:	d009      	beq.n	800f316 <HAL_TIM_PWM_Start+0x13e>
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	4a39      	ldr	r2, [pc, #228]	; (800f3ec <HAL_TIM_PWM_Start+0x214>)
 800f308:	4293      	cmp	r3, r2
 800f30a:	d004      	beq.n	800f316 <HAL_TIM_PWM_Start+0x13e>
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	4a37      	ldr	r2, [pc, #220]	; (800f3f0 <HAL_TIM_PWM_Start+0x218>)
 800f312:	4293      	cmp	r3, r2
 800f314:	d101      	bne.n	800f31a <HAL_TIM_PWM_Start+0x142>
 800f316:	2301      	movs	r3, #1
 800f318:	e000      	b.n	800f31c <HAL_TIM_PWM_Start+0x144>
 800f31a:	2300      	movs	r3, #0
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d007      	beq.n	800f330 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f32e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	4a2a      	ldr	r2, [pc, #168]	; (800f3e0 <HAL_TIM_PWM_Start+0x208>)
 800f336:	4293      	cmp	r3, r2
 800f338:	d02c      	beq.n	800f394 <HAL_TIM_PWM_Start+0x1bc>
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f342:	d027      	beq.n	800f394 <HAL_TIM_PWM_Start+0x1bc>
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	4a2a      	ldr	r2, [pc, #168]	; (800f3f4 <HAL_TIM_PWM_Start+0x21c>)
 800f34a:	4293      	cmp	r3, r2
 800f34c:	d022      	beq.n	800f394 <HAL_TIM_PWM_Start+0x1bc>
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	4a29      	ldr	r2, [pc, #164]	; (800f3f8 <HAL_TIM_PWM_Start+0x220>)
 800f354:	4293      	cmp	r3, r2
 800f356:	d01d      	beq.n	800f394 <HAL_TIM_PWM_Start+0x1bc>
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	4a27      	ldr	r2, [pc, #156]	; (800f3fc <HAL_TIM_PWM_Start+0x224>)
 800f35e:	4293      	cmp	r3, r2
 800f360:	d018      	beq.n	800f394 <HAL_TIM_PWM_Start+0x1bc>
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	4a1f      	ldr	r2, [pc, #124]	; (800f3e4 <HAL_TIM_PWM_Start+0x20c>)
 800f368:	4293      	cmp	r3, r2
 800f36a:	d013      	beq.n	800f394 <HAL_TIM_PWM_Start+0x1bc>
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	4a23      	ldr	r2, [pc, #140]	; (800f400 <HAL_TIM_PWM_Start+0x228>)
 800f372:	4293      	cmp	r3, r2
 800f374:	d00e      	beq.n	800f394 <HAL_TIM_PWM_Start+0x1bc>
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	4a1b      	ldr	r2, [pc, #108]	; (800f3e8 <HAL_TIM_PWM_Start+0x210>)
 800f37c:	4293      	cmp	r3, r2
 800f37e:	d009      	beq.n	800f394 <HAL_TIM_PWM_Start+0x1bc>
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	4a1f      	ldr	r2, [pc, #124]	; (800f404 <HAL_TIM_PWM_Start+0x22c>)
 800f386:	4293      	cmp	r3, r2
 800f388:	d004      	beq.n	800f394 <HAL_TIM_PWM_Start+0x1bc>
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	4a1e      	ldr	r2, [pc, #120]	; (800f408 <HAL_TIM_PWM_Start+0x230>)
 800f390:	4293      	cmp	r3, r2
 800f392:	d115      	bne.n	800f3c0 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	689a      	ldr	r2, [r3, #8]
 800f39a:	4b1c      	ldr	r3, [pc, #112]	; (800f40c <HAL_TIM_PWM_Start+0x234>)
 800f39c:	4013      	ands	r3, r2
 800f39e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	2b06      	cmp	r3, #6
 800f3a4:	d015      	beq.n	800f3d2 <HAL_TIM_PWM_Start+0x1fa>
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f3ac:	d011      	beq.n	800f3d2 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	681a      	ldr	r2, [r3, #0]
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	f042 0201 	orr.w	r2, r2, #1
 800f3bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f3be:	e008      	b.n	800f3d2 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	681a      	ldr	r2, [r3, #0]
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	f042 0201 	orr.w	r2, r2, #1
 800f3ce:	601a      	str	r2, [r3, #0]
 800f3d0:	e000      	b.n	800f3d4 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f3d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f3d4:	2300      	movs	r3, #0
}
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	3710      	adds	r7, #16
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	bd80      	pop	{r7, pc}
 800f3de:	bf00      	nop
 800f3e0:	40010000 	.word	0x40010000
 800f3e4:	40010400 	.word	0x40010400
 800f3e8:	40014000 	.word	0x40014000
 800f3ec:	40014400 	.word	0x40014400
 800f3f0:	40014800 	.word	0x40014800
 800f3f4:	40000400 	.word	0x40000400
 800f3f8:	40000800 	.word	0x40000800
 800f3fc:	40000c00 	.word	0x40000c00
 800f400:	40001800 	.word	0x40001800
 800f404:	4000e000 	.word	0x4000e000
 800f408:	4000e400 	.word	0x4000e400
 800f40c:	00010007 	.word	0x00010007

0800f410 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b086      	sub	sp, #24
 800f414:	af00      	add	r7, sp, #0
 800f416:	60f8      	str	r0, [r7, #12]
 800f418:	60b9      	str	r1, [r7, #8]
 800f41a:	607a      	str	r2, [r7, #4]
 800f41c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800f41e:	2300      	movs	r3, #0
 800f420:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800f422:	68bb      	ldr	r3, [r7, #8]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d109      	bne.n	800f43c <HAL_TIM_PWM_Start_DMA+0x2c>
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f42e:	b2db      	uxtb	r3, r3
 800f430:	2b02      	cmp	r3, #2
 800f432:	bf0c      	ite	eq
 800f434:	2301      	moveq	r3, #1
 800f436:	2300      	movne	r3, #0
 800f438:	b2db      	uxtb	r3, r3
 800f43a:	e03c      	b.n	800f4b6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f43c:	68bb      	ldr	r3, [r7, #8]
 800f43e:	2b04      	cmp	r3, #4
 800f440:	d109      	bne.n	800f456 <HAL_TIM_PWM_Start_DMA+0x46>
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f448:	b2db      	uxtb	r3, r3
 800f44a:	2b02      	cmp	r3, #2
 800f44c:	bf0c      	ite	eq
 800f44e:	2301      	moveq	r3, #1
 800f450:	2300      	movne	r3, #0
 800f452:	b2db      	uxtb	r3, r3
 800f454:	e02f      	b.n	800f4b6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f456:	68bb      	ldr	r3, [r7, #8]
 800f458:	2b08      	cmp	r3, #8
 800f45a:	d109      	bne.n	800f470 <HAL_TIM_PWM_Start_DMA+0x60>
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f462:	b2db      	uxtb	r3, r3
 800f464:	2b02      	cmp	r3, #2
 800f466:	bf0c      	ite	eq
 800f468:	2301      	moveq	r3, #1
 800f46a:	2300      	movne	r3, #0
 800f46c:	b2db      	uxtb	r3, r3
 800f46e:	e022      	b.n	800f4b6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f470:	68bb      	ldr	r3, [r7, #8]
 800f472:	2b0c      	cmp	r3, #12
 800f474:	d109      	bne.n	800f48a <HAL_TIM_PWM_Start_DMA+0x7a>
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f47c:	b2db      	uxtb	r3, r3
 800f47e:	2b02      	cmp	r3, #2
 800f480:	bf0c      	ite	eq
 800f482:	2301      	moveq	r3, #1
 800f484:	2300      	movne	r3, #0
 800f486:	b2db      	uxtb	r3, r3
 800f488:	e015      	b.n	800f4b6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f48a:	68bb      	ldr	r3, [r7, #8]
 800f48c:	2b10      	cmp	r3, #16
 800f48e:	d109      	bne.n	800f4a4 <HAL_TIM_PWM_Start_DMA+0x94>
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f496:	b2db      	uxtb	r3, r3
 800f498:	2b02      	cmp	r3, #2
 800f49a:	bf0c      	ite	eq
 800f49c:	2301      	moveq	r3, #1
 800f49e:	2300      	movne	r3, #0
 800f4a0:	b2db      	uxtb	r3, r3
 800f4a2:	e008      	b.n	800f4b6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f4aa:	b2db      	uxtb	r3, r3
 800f4ac:	2b02      	cmp	r3, #2
 800f4ae:	bf0c      	ite	eq
 800f4b0:	2301      	moveq	r3, #1
 800f4b2:	2300      	movne	r3, #0
 800f4b4:	b2db      	uxtb	r3, r3
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d001      	beq.n	800f4be <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800f4ba:	2302      	movs	r3, #2
 800f4bc:	e1ba      	b.n	800f834 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800f4be:	68bb      	ldr	r3, [r7, #8]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d109      	bne.n	800f4d8 <HAL_TIM_PWM_Start_DMA+0xc8>
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f4ca:	b2db      	uxtb	r3, r3
 800f4cc:	2b01      	cmp	r3, #1
 800f4ce:	bf0c      	ite	eq
 800f4d0:	2301      	moveq	r3, #1
 800f4d2:	2300      	movne	r3, #0
 800f4d4:	b2db      	uxtb	r3, r3
 800f4d6:	e03c      	b.n	800f552 <HAL_TIM_PWM_Start_DMA+0x142>
 800f4d8:	68bb      	ldr	r3, [r7, #8]
 800f4da:	2b04      	cmp	r3, #4
 800f4dc:	d109      	bne.n	800f4f2 <HAL_TIM_PWM_Start_DMA+0xe2>
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f4e4:	b2db      	uxtb	r3, r3
 800f4e6:	2b01      	cmp	r3, #1
 800f4e8:	bf0c      	ite	eq
 800f4ea:	2301      	moveq	r3, #1
 800f4ec:	2300      	movne	r3, #0
 800f4ee:	b2db      	uxtb	r3, r3
 800f4f0:	e02f      	b.n	800f552 <HAL_TIM_PWM_Start_DMA+0x142>
 800f4f2:	68bb      	ldr	r3, [r7, #8]
 800f4f4:	2b08      	cmp	r3, #8
 800f4f6:	d109      	bne.n	800f50c <HAL_TIM_PWM_Start_DMA+0xfc>
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f4fe:	b2db      	uxtb	r3, r3
 800f500:	2b01      	cmp	r3, #1
 800f502:	bf0c      	ite	eq
 800f504:	2301      	moveq	r3, #1
 800f506:	2300      	movne	r3, #0
 800f508:	b2db      	uxtb	r3, r3
 800f50a:	e022      	b.n	800f552 <HAL_TIM_PWM_Start_DMA+0x142>
 800f50c:	68bb      	ldr	r3, [r7, #8]
 800f50e:	2b0c      	cmp	r3, #12
 800f510:	d109      	bne.n	800f526 <HAL_TIM_PWM_Start_DMA+0x116>
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f518:	b2db      	uxtb	r3, r3
 800f51a:	2b01      	cmp	r3, #1
 800f51c:	bf0c      	ite	eq
 800f51e:	2301      	moveq	r3, #1
 800f520:	2300      	movne	r3, #0
 800f522:	b2db      	uxtb	r3, r3
 800f524:	e015      	b.n	800f552 <HAL_TIM_PWM_Start_DMA+0x142>
 800f526:	68bb      	ldr	r3, [r7, #8]
 800f528:	2b10      	cmp	r3, #16
 800f52a:	d109      	bne.n	800f540 <HAL_TIM_PWM_Start_DMA+0x130>
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f532:	b2db      	uxtb	r3, r3
 800f534:	2b01      	cmp	r3, #1
 800f536:	bf0c      	ite	eq
 800f538:	2301      	moveq	r3, #1
 800f53a:	2300      	movne	r3, #0
 800f53c:	b2db      	uxtb	r3, r3
 800f53e:	e008      	b.n	800f552 <HAL_TIM_PWM_Start_DMA+0x142>
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f546:	b2db      	uxtb	r3, r3
 800f548:	2b01      	cmp	r3, #1
 800f54a:	bf0c      	ite	eq
 800f54c:	2301      	moveq	r3, #1
 800f54e:	2300      	movne	r3, #0
 800f550:	b2db      	uxtb	r3, r3
 800f552:	2b00      	cmp	r3, #0
 800f554:	d034      	beq.n	800f5c0 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d002      	beq.n	800f562 <HAL_TIM_PWM_Start_DMA+0x152>
 800f55c:	887b      	ldrh	r3, [r7, #2]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d101      	bne.n	800f566 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800f562:	2301      	movs	r3, #1
 800f564:	e166      	b.n	800f834 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f566:	68bb      	ldr	r3, [r7, #8]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d104      	bne.n	800f576 <HAL_TIM_PWM_Start_DMA+0x166>
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	2202      	movs	r2, #2
 800f570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f574:	e026      	b.n	800f5c4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f576:	68bb      	ldr	r3, [r7, #8]
 800f578:	2b04      	cmp	r3, #4
 800f57a:	d104      	bne.n	800f586 <HAL_TIM_PWM_Start_DMA+0x176>
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	2202      	movs	r2, #2
 800f580:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f584:	e01e      	b.n	800f5c4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f586:	68bb      	ldr	r3, [r7, #8]
 800f588:	2b08      	cmp	r3, #8
 800f58a:	d104      	bne.n	800f596 <HAL_TIM_PWM_Start_DMA+0x186>
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	2202      	movs	r2, #2
 800f590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f594:	e016      	b.n	800f5c4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f596:	68bb      	ldr	r3, [r7, #8]
 800f598:	2b0c      	cmp	r3, #12
 800f59a:	d104      	bne.n	800f5a6 <HAL_TIM_PWM_Start_DMA+0x196>
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	2202      	movs	r2, #2
 800f5a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f5a4:	e00e      	b.n	800f5c4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	2b10      	cmp	r3, #16
 800f5aa:	d104      	bne.n	800f5b6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	2202      	movs	r2, #2
 800f5b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f5b4:	e006      	b.n	800f5c4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	2202      	movs	r2, #2
 800f5ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f5be:	e001      	b.n	800f5c4 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800f5c0:	2301      	movs	r3, #1
 800f5c2:	e137      	b.n	800f834 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800f5c4:	68bb      	ldr	r3, [r7, #8]
 800f5c6:	2b0c      	cmp	r3, #12
 800f5c8:	f200 80ae 	bhi.w	800f728 <HAL_TIM_PWM_Start_DMA+0x318>
 800f5cc:	a201      	add	r2, pc, #4	; (adr r2, 800f5d4 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800f5ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5d2:	bf00      	nop
 800f5d4:	0800f609 	.word	0x0800f609
 800f5d8:	0800f729 	.word	0x0800f729
 800f5dc:	0800f729 	.word	0x0800f729
 800f5e0:	0800f729 	.word	0x0800f729
 800f5e4:	0800f651 	.word	0x0800f651
 800f5e8:	0800f729 	.word	0x0800f729
 800f5ec:	0800f729 	.word	0x0800f729
 800f5f0:	0800f729 	.word	0x0800f729
 800f5f4:	0800f699 	.word	0x0800f699
 800f5f8:	0800f729 	.word	0x0800f729
 800f5fc:	0800f729 	.word	0x0800f729
 800f600:	0800f729 	.word	0x0800f729
 800f604:	0800f6e1 	.word	0x0800f6e1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f60c:	4a8b      	ldr	r2, [pc, #556]	; (800f83c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f60e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f614:	4a8a      	ldr	r2, [pc, #552]	; (800f840 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f616:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f61c:	4a89      	ldr	r2, [pc, #548]	; (800f844 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f61e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f624:	6879      	ldr	r1, [r7, #4]
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	3334      	adds	r3, #52	; 0x34
 800f62c:	461a      	mov	r2, r3
 800f62e:	887b      	ldrh	r3, [r7, #2]
 800f630:	f7f6 f8e4 	bl	80057fc <HAL_DMA_Start_IT>
 800f634:	4603      	mov	r3, r0
 800f636:	2b00      	cmp	r3, #0
 800f638:	d001      	beq.n	800f63e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f63a:	2301      	movs	r3, #1
 800f63c:	e0fa      	b.n	800f834 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	68da      	ldr	r2, [r3, #12]
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f64c:	60da      	str	r2, [r3, #12]
      break;
 800f64e:	e06e      	b.n	800f72e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f654:	4a79      	ldr	r2, [pc, #484]	; (800f83c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f656:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f65c:	4a78      	ldr	r2, [pc, #480]	; (800f840 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f65e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f664:	4a77      	ldr	r2, [pc, #476]	; (800f844 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f666:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800f66c:	6879      	ldr	r1, [r7, #4]
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	3338      	adds	r3, #56	; 0x38
 800f674:	461a      	mov	r2, r3
 800f676:	887b      	ldrh	r3, [r7, #2]
 800f678:	f7f6 f8c0 	bl	80057fc <HAL_DMA_Start_IT>
 800f67c:	4603      	mov	r3, r0
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d001      	beq.n	800f686 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f682:	2301      	movs	r3, #1
 800f684:	e0d6      	b.n	800f834 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	68da      	ldr	r2, [r3, #12]
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f694:	60da      	str	r2, [r3, #12]
      break;
 800f696:	e04a      	b.n	800f72e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f69c:	4a67      	ldr	r2, [pc, #412]	; (800f83c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f69e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6a4:	4a66      	ldr	r2, [pc, #408]	; (800f840 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f6a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6ac:	4a65      	ldr	r2, [pc, #404]	; (800f844 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f6ae:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800f6b4:	6879      	ldr	r1, [r7, #4]
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	333c      	adds	r3, #60	; 0x3c
 800f6bc:	461a      	mov	r2, r3
 800f6be:	887b      	ldrh	r3, [r7, #2]
 800f6c0:	f7f6 f89c 	bl	80057fc <HAL_DMA_Start_IT>
 800f6c4:	4603      	mov	r3, r0
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d001      	beq.n	800f6ce <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f6ca:	2301      	movs	r3, #1
 800f6cc:	e0b2      	b.n	800f834 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	68da      	ldr	r2, [r3, #12]
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f6dc:	60da      	str	r2, [r3, #12]
      break;
 800f6de:	e026      	b.n	800f72e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6e4:	4a55      	ldr	r2, [pc, #340]	; (800f83c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f6e6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6ec:	4a54      	ldr	r2, [pc, #336]	; (800f840 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f6ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6f4:	4a53      	ldr	r2, [pc, #332]	; (800f844 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f6f6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f6fc:	6879      	ldr	r1, [r7, #4]
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	3340      	adds	r3, #64	; 0x40
 800f704:	461a      	mov	r2, r3
 800f706:	887b      	ldrh	r3, [r7, #2]
 800f708:	f7f6 f878 	bl	80057fc <HAL_DMA_Start_IT>
 800f70c:	4603      	mov	r3, r0
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d001      	beq.n	800f716 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f712:	2301      	movs	r3, #1
 800f714:	e08e      	b.n	800f834 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	68da      	ldr	r2, [r3, #12]
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f724:	60da      	str	r2, [r3, #12]
      break;
 800f726:	e002      	b.n	800f72e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800f728:	2301      	movs	r3, #1
 800f72a:	75fb      	strb	r3, [r7, #23]
      break;
 800f72c:	bf00      	nop
  }

  if (status == HAL_OK)
 800f72e:	7dfb      	ldrb	r3, [r7, #23]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d17e      	bne.n	800f832 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	2201      	movs	r2, #1
 800f73a:	68b9      	ldr	r1, [r7, #8]
 800f73c:	4618      	mov	r0, r3
 800f73e:	f000 ff63 	bl	8010608 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	4a40      	ldr	r2, [pc, #256]	; (800f848 <HAL_TIM_PWM_Start_DMA+0x438>)
 800f748:	4293      	cmp	r3, r2
 800f74a:	d013      	beq.n	800f774 <HAL_TIM_PWM_Start_DMA+0x364>
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	4a3e      	ldr	r2, [pc, #248]	; (800f84c <HAL_TIM_PWM_Start_DMA+0x43c>)
 800f752:	4293      	cmp	r3, r2
 800f754:	d00e      	beq.n	800f774 <HAL_TIM_PWM_Start_DMA+0x364>
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	4a3d      	ldr	r2, [pc, #244]	; (800f850 <HAL_TIM_PWM_Start_DMA+0x440>)
 800f75c:	4293      	cmp	r3, r2
 800f75e:	d009      	beq.n	800f774 <HAL_TIM_PWM_Start_DMA+0x364>
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	4a3b      	ldr	r2, [pc, #236]	; (800f854 <HAL_TIM_PWM_Start_DMA+0x444>)
 800f766:	4293      	cmp	r3, r2
 800f768:	d004      	beq.n	800f774 <HAL_TIM_PWM_Start_DMA+0x364>
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	4a3a      	ldr	r2, [pc, #232]	; (800f858 <HAL_TIM_PWM_Start_DMA+0x448>)
 800f770:	4293      	cmp	r3, r2
 800f772:	d101      	bne.n	800f778 <HAL_TIM_PWM_Start_DMA+0x368>
 800f774:	2301      	movs	r3, #1
 800f776:	e000      	b.n	800f77a <HAL_TIM_PWM_Start_DMA+0x36a>
 800f778:	2300      	movs	r3, #0
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d007      	beq.n	800f78e <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f78c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	4a2d      	ldr	r2, [pc, #180]	; (800f848 <HAL_TIM_PWM_Start_DMA+0x438>)
 800f794:	4293      	cmp	r3, r2
 800f796:	d02c      	beq.n	800f7f2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f7a0:	d027      	beq.n	800f7f2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	4a2d      	ldr	r2, [pc, #180]	; (800f85c <HAL_TIM_PWM_Start_DMA+0x44c>)
 800f7a8:	4293      	cmp	r3, r2
 800f7aa:	d022      	beq.n	800f7f2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	4a2b      	ldr	r2, [pc, #172]	; (800f860 <HAL_TIM_PWM_Start_DMA+0x450>)
 800f7b2:	4293      	cmp	r3, r2
 800f7b4:	d01d      	beq.n	800f7f2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	4a2a      	ldr	r2, [pc, #168]	; (800f864 <HAL_TIM_PWM_Start_DMA+0x454>)
 800f7bc:	4293      	cmp	r3, r2
 800f7be:	d018      	beq.n	800f7f2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	4a21      	ldr	r2, [pc, #132]	; (800f84c <HAL_TIM_PWM_Start_DMA+0x43c>)
 800f7c6:	4293      	cmp	r3, r2
 800f7c8:	d013      	beq.n	800f7f2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	4a26      	ldr	r2, [pc, #152]	; (800f868 <HAL_TIM_PWM_Start_DMA+0x458>)
 800f7d0:	4293      	cmp	r3, r2
 800f7d2:	d00e      	beq.n	800f7f2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	4a1d      	ldr	r2, [pc, #116]	; (800f850 <HAL_TIM_PWM_Start_DMA+0x440>)
 800f7da:	4293      	cmp	r3, r2
 800f7dc:	d009      	beq.n	800f7f2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	4a22      	ldr	r2, [pc, #136]	; (800f86c <HAL_TIM_PWM_Start_DMA+0x45c>)
 800f7e4:	4293      	cmp	r3, r2
 800f7e6:	d004      	beq.n	800f7f2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	4a20      	ldr	r2, [pc, #128]	; (800f870 <HAL_TIM_PWM_Start_DMA+0x460>)
 800f7ee:	4293      	cmp	r3, r2
 800f7f0:	d115      	bne.n	800f81e <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	689a      	ldr	r2, [r3, #8]
 800f7f8:	4b1e      	ldr	r3, [pc, #120]	; (800f874 <HAL_TIM_PWM_Start_DMA+0x464>)
 800f7fa:	4013      	ands	r3, r2
 800f7fc:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f7fe:	693b      	ldr	r3, [r7, #16]
 800f800:	2b06      	cmp	r3, #6
 800f802:	d015      	beq.n	800f830 <HAL_TIM_PWM_Start_DMA+0x420>
 800f804:	693b      	ldr	r3, [r7, #16]
 800f806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f80a:	d011      	beq.n	800f830 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	681a      	ldr	r2, [r3, #0]
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	f042 0201 	orr.w	r2, r2, #1
 800f81a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f81c:	e008      	b.n	800f830 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	681a      	ldr	r2, [r3, #0]
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	f042 0201 	orr.w	r2, r2, #1
 800f82c:	601a      	str	r2, [r3, #0]
 800f82e:	e000      	b.n	800f832 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f830:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800f832:	7dfb      	ldrb	r3, [r7, #23]
}
 800f834:	4618      	mov	r0, r3
 800f836:	3718      	adds	r7, #24
 800f838:	46bd      	mov	sp, r7
 800f83a:	bd80      	pop	{r7, pc}
 800f83c:	0800fdff 	.word	0x0800fdff
 800f840:	0800fea7 	.word	0x0800fea7
 800f844:	0800fd6d 	.word	0x0800fd6d
 800f848:	40010000 	.word	0x40010000
 800f84c:	40010400 	.word	0x40010400
 800f850:	40014000 	.word	0x40014000
 800f854:	40014400 	.word	0x40014400
 800f858:	40014800 	.word	0x40014800
 800f85c:	40000400 	.word	0x40000400
 800f860:	40000800 	.word	0x40000800
 800f864:	40000c00 	.word	0x40000c00
 800f868:	40001800 	.word	0x40001800
 800f86c:	4000e000 	.word	0x4000e000
 800f870:	4000e400 	.word	0x4000e400
 800f874:	00010007 	.word	0x00010007

0800f878 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f878:	b580      	push	{r7, lr}
 800f87a:	b082      	sub	sp, #8
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	691b      	ldr	r3, [r3, #16]
 800f886:	f003 0302 	and.w	r3, r3, #2
 800f88a:	2b02      	cmp	r3, #2
 800f88c:	d122      	bne.n	800f8d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	68db      	ldr	r3, [r3, #12]
 800f894:	f003 0302 	and.w	r3, r3, #2
 800f898:	2b02      	cmp	r3, #2
 800f89a:	d11b      	bne.n	800f8d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	f06f 0202 	mvn.w	r2, #2
 800f8a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	2201      	movs	r2, #1
 800f8aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	699b      	ldr	r3, [r3, #24]
 800f8b2:	f003 0303 	and.w	r3, r3, #3
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d003      	beq.n	800f8c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f8ba:	6878      	ldr	r0, [r7, #4]
 800f8bc:	f000 fa24 	bl	800fd08 <HAL_TIM_IC_CaptureCallback>
 800f8c0:	e005      	b.n	800f8ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f8c2:	6878      	ldr	r0, [r7, #4]
 800f8c4:	f000 fa16 	bl	800fcf4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f8c8:	6878      	ldr	r0, [r7, #4]
 800f8ca:	f000 fa27 	bl	800fd1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	691b      	ldr	r3, [r3, #16]
 800f8da:	f003 0304 	and.w	r3, r3, #4
 800f8de:	2b04      	cmp	r3, #4
 800f8e0:	d122      	bne.n	800f928 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	68db      	ldr	r3, [r3, #12]
 800f8e8:	f003 0304 	and.w	r3, r3, #4
 800f8ec:	2b04      	cmp	r3, #4
 800f8ee:	d11b      	bne.n	800f928 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	f06f 0204 	mvn.w	r2, #4
 800f8f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	2202      	movs	r2, #2
 800f8fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	699b      	ldr	r3, [r3, #24]
 800f906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d003      	beq.n	800f916 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f90e:	6878      	ldr	r0, [r7, #4]
 800f910:	f000 f9fa 	bl	800fd08 <HAL_TIM_IC_CaptureCallback>
 800f914:	e005      	b.n	800f922 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f916:	6878      	ldr	r0, [r7, #4]
 800f918:	f000 f9ec 	bl	800fcf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f91c:	6878      	ldr	r0, [r7, #4]
 800f91e:	f000 f9fd 	bl	800fd1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	2200      	movs	r2, #0
 800f926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	691b      	ldr	r3, [r3, #16]
 800f92e:	f003 0308 	and.w	r3, r3, #8
 800f932:	2b08      	cmp	r3, #8
 800f934:	d122      	bne.n	800f97c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	68db      	ldr	r3, [r3, #12]
 800f93c:	f003 0308 	and.w	r3, r3, #8
 800f940:	2b08      	cmp	r3, #8
 800f942:	d11b      	bne.n	800f97c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	f06f 0208 	mvn.w	r2, #8
 800f94c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	2204      	movs	r2, #4
 800f952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	69db      	ldr	r3, [r3, #28]
 800f95a:	f003 0303 	and.w	r3, r3, #3
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d003      	beq.n	800f96a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f962:	6878      	ldr	r0, [r7, #4]
 800f964:	f000 f9d0 	bl	800fd08 <HAL_TIM_IC_CaptureCallback>
 800f968:	e005      	b.n	800f976 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f96a:	6878      	ldr	r0, [r7, #4]
 800f96c:	f000 f9c2 	bl	800fcf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f970:	6878      	ldr	r0, [r7, #4]
 800f972:	f000 f9d3 	bl	800fd1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	2200      	movs	r2, #0
 800f97a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	691b      	ldr	r3, [r3, #16]
 800f982:	f003 0310 	and.w	r3, r3, #16
 800f986:	2b10      	cmp	r3, #16
 800f988:	d122      	bne.n	800f9d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	68db      	ldr	r3, [r3, #12]
 800f990:	f003 0310 	and.w	r3, r3, #16
 800f994:	2b10      	cmp	r3, #16
 800f996:	d11b      	bne.n	800f9d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	f06f 0210 	mvn.w	r2, #16
 800f9a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	2208      	movs	r2, #8
 800f9a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	69db      	ldr	r3, [r3, #28]
 800f9ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d003      	beq.n	800f9be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f9b6:	6878      	ldr	r0, [r7, #4]
 800f9b8:	f000 f9a6 	bl	800fd08 <HAL_TIM_IC_CaptureCallback>
 800f9bc:	e005      	b.n	800f9ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f9be:	6878      	ldr	r0, [r7, #4]
 800f9c0:	f000 f998 	bl	800fcf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f9c4:	6878      	ldr	r0, [r7, #4]
 800f9c6:	f000 f9a9 	bl	800fd1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	691b      	ldr	r3, [r3, #16]
 800f9d6:	f003 0301 	and.w	r3, r3, #1
 800f9da:	2b01      	cmp	r3, #1
 800f9dc:	d10e      	bne.n	800f9fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	68db      	ldr	r3, [r3, #12]
 800f9e4:	f003 0301 	and.w	r3, r3, #1
 800f9e8:	2b01      	cmp	r3, #1
 800f9ea:	d107      	bne.n	800f9fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	f06f 0201 	mvn.w	r2, #1
 800f9f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f9f6:	6878      	ldr	r0, [r7, #4]
 800f9f8:	f000 f972 	bl	800fce0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	691b      	ldr	r3, [r3, #16]
 800fa02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa06:	2b80      	cmp	r3, #128	; 0x80
 800fa08:	d10e      	bne.n	800fa28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	68db      	ldr	r3, [r3, #12]
 800fa10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa14:	2b80      	cmp	r3, #128	; 0x80
 800fa16:	d107      	bne.n	800fa28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800fa20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fa22:	6878      	ldr	r0, [r7, #4]
 800fa24:	f000 febc 	bl	80107a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	691b      	ldr	r3, [r3, #16]
 800fa2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fa32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fa36:	d10e      	bne.n	800fa56 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	68db      	ldr	r3, [r3, #12]
 800fa3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa42:	2b80      	cmp	r3, #128	; 0x80
 800fa44:	d107      	bne.n	800fa56 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800fa4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800fa50:	6878      	ldr	r0, [r7, #4]
 800fa52:	f000 feaf 	bl	80107b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	691b      	ldr	r3, [r3, #16]
 800fa5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa60:	2b40      	cmp	r3, #64	; 0x40
 800fa62:	d10e      	bne.n	800fa82 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	68db      	ldr	r3, [r3, #12]
 800fa6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa6e:	2b40      	cmp	r3, #64	; 0x40
 800fa70:	d107      	bne.n	800fa82 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fa7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fa7c:	6878      	ldr	r0, [r7, #4]
 800fa7e:	f000 f961 	bl	800fd44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	691b      	ldr	r3, [r3, #16]
 800fa88:	f003 0320 	and.w	r3, r3, #32
 800fa8c:	2b20      	cmp	r3, #32
 800fa8e:	d10e      	bne.n	800faae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	68db      	ldr	r3, [r3, #12]
 800fa96:	f003 0320 	and.w	r3, r3, #32
 800fa9a:	2b20      	cmp	r3, #32
 800fa9c:	d107      	bne.n	800faae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	f06f 0220 	mvn.w	r2, #32
 800faa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800faa8:	6878      	ldr	r0, [r7, #4]
 800faaa:	f000 fe6f 	bl	801078c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800faae:	bf00      	nop
 800fab0:	3708      	adds	r7, #8
 800fab2:	46bd      	mov	sp, r7
 800fab4:	bd80      	pop	{r7, pc}
	...

0800fab8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fab8:	b580      	push	{r7, lr}
 800faba:	b086      	sub	sp, #24
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	60f8      	str	r0, [r7, #12]
 800fac0:	60b9      	str	r1, [r7, #8]
 800fac2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fac4:	2300      	movs	r3, #0
 800fac6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800face:	2b01      	cmp	r3, #1
 800fad0:	d101      	bne.n	800fad6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800fad2:	2302      	movs	r3, #2
 800fad4:	e0ff      	b.n	800fcd6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	2201      	movs	r2, #1
 800fada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	2b14      	cmp	r3, #20
 800fae2:	f200 80f0 	bhi.w	800fcc6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800fae6:	a201      	add	r2, pc, #4	; (adr r2, 800faec <HAL_TIM_PWM_ConfigChannel+0x34>)
 800fae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800faec:	0800fb41 	.word	0x0800fb41
 800faf0:	0800fcc7 	.word	0x0800fcc7
 800faf4:	0800fcc7 	.word	0x0800fcc7
 800faf8:	0800fcc7 	.word	0x0800fcc7
 800fafc:	0800fb81 	.word	0x0800fb81
 800fb00:	0800fcc7 	.word	0x0800fcc7
 800fb04:	0800fcc7 	.word	0x0800fcc7
 800fb08:	0800fcc7 	.word	0x0800fcc7
 800fb0c:	0800fbc3 	.word	0x0800fbc3
 800fb10:	0800fcc7 	.word	0x0800fcc7
 800fb14:	0800fcc7 	.word	0x0800fcc7
 800fb18:	0800fcc7 	.word	0x0800fcc7
 800fb1c:	0800fc03 	.word	0x0800fc03
 800fb20:	0800fcc7 	.word	0x0800fcc7
 800fb24:	0800fcc7 	.word	0x0800fcc7
 800fb28:	0800fcc7 	.word	0x0800fcc7
 800fb2c:	0800fc45 	.word	0x0800fc45
 800fb30:	0800fcc7 	.word	0x0800fcc7
 800fb34:	0800fcc7 	.word	0x0800fcc7
 800fb38:	0800fcc7 	.word	0x0800fcc7
 800fb3c:	0800fc85 	.word	0x0800fc85
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	68b9      	ldr	r1, [r7, #8]
 800fb46:	4618      	mov	r0, r3
 800fb48:	f000 fa88 	bl	801005c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	699a      	ldr	r2, [r3, #24]
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	f042 0208 	orr.w	r2, r2, #8
 800fb5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	699a      	ldr	r2, [r3, #24]
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	f022 0204 	bic.w	r2, r2, #4
 800fb6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	6999      	ldr	r1, [r3, #24]
 800fb72:	68bb      	ldr	r3, [r7, #8]
 800fb74:	691a      	ldr	r2, [r3, #16]
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	430a      	orrs	r2, r1
 800fb7c:	619a      	str	r2, [r3, #24]
      break;
 800fb7e:	e0a5      	b.n	800fccc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	68b9      	ldr	r1, [r7, #8]
 800fb86:	4618      	mov	r0, r3
 800fb88:	f000 faf8 	bl	801017c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	699a      	ldr	r2, [r3, #24]
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fb9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	699a      	ldr	r2, [r3, #24]
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fbaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	6999      	ldr	r1, [r3, #24]
 800fbb2:	68bb      	ldr	r3, [r7, #8]
 800fbb4:	691b      	ldr	r3, [r3, #16]
 800fbb6:	021a      	lsls	r2, r3, #8
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	430a      	orrs	r2, r1
 800fbbe:	619a      	str	r2, [r3, #24]
      break;
 800fbc0:	e084      	b.n	800fccc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	68b9      	ldr	r1, [r7, #8]
 800fbc8:	4618      	mov	r0, r3
 800fbca:	f000 fb61 	bl	8010290 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	69da      	ldr	r2, [r3, #28]
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	f042 0208 	orr.w	r2, r2, #8
 800fbdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	69da      	ldr	r2, [r3, #28]
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	f022 0204 	bic.w	r2, r2, #4
 800fbec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	69d9      	ldr	r1, [r3, #28]
 800fbf4:	68bb      	ldr	r3, [r7, #8]
 800fbf6:	691a      	ldr	r2, [r3, #16]
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	430a      	orrs	r2, r1
 800fbfe:	61da      	str	r2, [r3, #28]
      break;
 800fc00:	e064      	b.n	800fccc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	68b9      	ldr	r1, [r7, #8]
 800fc08:	4618      	mov	r0, r3
 800fc0a:	f000 fbc9 	bl	80103a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	69da      	ldr	r2, [r3, #28]
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fc1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	69da      	ldr	r2, [r3, #28]
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fc2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	69d9      	ldr	r1, [r3, #28]
 800fc34:	68bb      	ldr	r3, [r7, #8]
 800fc36:	691b      	ldr	r3, [r3, #16]
 800fc38:	021a      	lsls	r2, r3, #8
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	430a      	orrs	r2, r1
 800fc40:	61da      	str	r2, [r3, #28]
      break;
 800fc42:	e043      	b.n	800fccc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	68b9      	ldr	r1, [r7, #8]
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	f000 fc12 	bl	8010474 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	f042 0208 	orr.w	r2, r2, #8
 800fc5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	f022 0204 	bic.w	r2, r2, #4
 800fc6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fc76:	68bb      	ldr	r3, [r7, #8]
 800fc78:	691a      	ldr	r2, [r3, #16]
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	430a      	orrs	r2, r1
 800fc80:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fc82:	e023      	b.n	800fccc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	68b9      	ldr	r1, [r7, #8]
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	f000 fc56 	bl	801053c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fc9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fcae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fcb6:	68bb      	ldr	r3, [r7, #8]
 800fcb8:	691b      	ldr	r3, [r3, #16]
 800fcba:	021a      	lsls	r2, r3, #8
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	430a      	orrs	r2, r1
 800fcc2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fcc4:	e002      	b.n	800fccc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800fcc6:	2301      	movs	r3, #1
 800fcc8:	75fb      	strb	r3, [r7, #23]
      break;
 800fcca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	2200      	movs	r2, #0
 800fcd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800fcd4:	7dfb      	ldrb	r3, [r7, #23]
}
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	3718      	adds	r7, #24
 800fcda:	46bd      	mov	sp, r7
 800fcdc:	bd80      	pop	{r7, pc}
 800fcde:	bf00      	nop

0800fce0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fce0:	b480      	push	{r7}
 800fce2:	b083      	sub	sp, #12
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800fce8:	bf00      	nop
 800fcea:	370c      	adds	r7, #12
 800fcec:	46bd      	mov	sp, r7
 800fcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf2:	4770      	bx	lr

0800fcf4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fcf4:	b480      	push	{r7}
 800fcf6:	b083      	sub	sp, #12
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fcfc:	bf00      	nop
 800fcfe:	370c      	adds	r7, #12
 800fd00:	46bd      	mov	sp, r7
 800fd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd06:	4770      	bx	lr

0800fd08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fd08:	b480      	push	{r7}
 800fd0a:	b083      	sub	sp, #12
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fd10:	bf00      	nop
 800fd12:	370c      	adds	r7, #12
 800fd14:	46bd      	mov	sp, r7
 800fd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1a:	4770      	bx	lr

0800fd1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fd1c:	b480      	push	{r7}
 800fd1e:	b083      	sub	sp, #12
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fd24:	bf00      	nop
 800fd26:	370c      	adds	r7, #12
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2e:	4770      	bx	lr

0800fd30 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800fd30:	b480      	push	{r7}
 800fd32:	b083      	sub	sp, #12
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800fd38:	bf00      	nop
 800fd3a:	370c      	adds	r7, #12
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd42:	4770      	bx	lr

0800fd44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fd44:	b480      	push	{r7}
 800fd46:	b083      	sub	sp, #12
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fd4c:	bf00      	nop
 800fd4e:	370c      	adds	r7, #12
 800fd50:	46bd      	mov	sp, r7
 800fd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd56:	4770      	bx	lr

0800fd58 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800fd58:	b480      	push	{r7}
 800fd5a:	b083      	sub	sp, #12
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800fd60:	bf00      	nop
 800fd62:	370c      	adds	r7, #12
 800fd64:	46bd      	mov	sp, r7
 800fd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6a:	4770      	bx	lr

0800fd6c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b084      	sub	sp, #16
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd78:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd7e:	687a      	ldr	r2, [r7, #4]
 800fd80:	429a      	cmp	r2, r3
 800fd82:	d107      	bne.n	800fd94 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	2201      	movs	r2, #1
 800fd88:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	2201      	movs	r2, #1
 800fd8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fd92:	e02a      	b.n	800fdea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd98:	687a      	ldr	r2, [r7, #4]
 800fd9a:	429a      	cmp	r2, r3
 800fd9c:	d107      	bne.n	800fdae <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	2202      	movs	r2, #2
 800fda2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	2201      	movs	r2, #1
 800fda8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fdac:	e01d      	b.n	800fdea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdb2:	687a      	ldr	r2, [r7, #4]
 800fdb4:	429a      	cmp	r2, r3
 800fdb6:	d107      	bne.n	800fdc8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	2204      	movs	r2, #4
 800fdbc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	2201      	movs	r2, #1
 800fdc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fdc6:	e010      	b.n	800fdea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdcc:	687a      	ldr	r2, [r7, #4]
 800fdce:	429a      	cmp	r2, r3
 800fdd0:	d107      	bne.n	800fde2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	2208      	movs	r2, #8
 800fdd6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	2201      	movs	r2, #1
 800fddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fde0:	e003      	b.n	800fdea <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	2201      	movs	r2, #1
 800fde6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800fdea:	68f8      	ldr	r0, [r7, #12]
 800fdec:	f7ff ffb4 	bl	800fd58 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	771a      	strb	r2, [r3, #28]
}
 800fdf6:	bf00      	nop
 800fdf8:	3710      	adds	r7, #16
 800fdfa:	46bd      	mov	sp, r7
 800fdfc:	bd80      	pop	{r7, pc}

0800fdfe <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800fdfe:	b580      	push	{r7, lr}
 800fe00:	b084      	sub	sp, #16
 800fe02:	af00      	add	r7, sp, #0
 800fe04:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe0a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe10:	687a      	ldr	r2, [r7, #4]
 800fe12:	429a      	cmp	r2, r3
 800fe14:	d10b      	bne.n	800fe2e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	2201      	movs	r2, #1
 800fe1a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	69db      	ldr	r3, [r3, #28]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d136      	bne.n	800fe92 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	2201      	movs	r2, #1
 800fe28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fe2c:	e031      	b.n	800fe92 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe32:	687a      	ldr	r2, [r7, #4]
 800fe34:	429a      	cmp	r2, r3
 800fe36:	d10b      	bne.n	800fe50 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	2202      	movs	r2, #2
 800fe3c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	69db      	ldr	r3, [r3, #28]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d125      	bne.n	800fe92 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	2201      	movs	r2, #1
 800fe4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fe4e:	e020      	b.n	800fe92 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe54:	687a      	ldr	r2, [r7, #4]
 800fe56:	429a      	cmp	r2, r3
 800fe58:	d10b      	bne.n	800fe72 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	2204      	movs	r2, #4
 800fe5e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	69db      	ldr	r3, [r3, #28]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d114      	bne.n	800fe92 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	2201      	movs	r2, #1
 800fe6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fe70:	e00f      	b.n	800fe92 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe76:	687a      	ldr	r2, [r7, #4]
 800fe78:	429a      	cmp	r2, r3
 800fe7a:	d10a      	bne.n	800fe92 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	2208      	movs	r2, #8
 800fe80:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	69db      	ldr	r3, [r3, #28]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d103      	bne.n	800fe92 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	2201      	movs	r2, #1
 800fe8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fe92:	68f8      	ldr	r0, [r7, #12]
 800fe94:	f7ff ff42 	bl	800fd1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	771a      	strb	r2, [r3, #28]
}
 800fe9e:	bf00      	nop
 800fea0:	3710      	adds	r7, #16
 800fea2:	46bd      	mov	sp, r7
 800fea4:	bd80      	pop	{r7, pc}

0800fea6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fea6:	b580      	push	{r7, lr}
 800fea8:	b084      	sub	sp, #16
 800feaa:	af00      	add	r7, sp, #0
 800feac:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800feb2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800feb8:	687a      	ldr	r2, [r7, #4]
 800feba:	429a      	cmp	r2, r3
 800febc:	d103      	bne.n	800fec6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	2201      	movs	r2, #1
 800fec2:	771a      	strb	r2, [r3, #28]
 800fec4:	e019      	b.n	800fefa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800feca:	687a      	ldr	r2, [r7, #4]
 800fecc:	429a      	cmp	r2, r3
 800fece:	d103      	bne.n	800fed8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	2202      	movs	r2, #2
 800fed4:	771a      	strb	r2, [r3, #28]
 800fed6:	e010      	b.n	800fefa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fedc:	687a      	ldr	r2, [r7, #4]
 800fede:	429a      	cmp	r2, r3
 800fee0:	d103      	bne.n	800feea <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	2204      	movs	r2, #4
 800fee6:	771a      	strb	r2, [r3, #28]
 800fee8:	e007      	b.n	800fefa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800feee:	687a      	ldr	r2, [r7, #4]
 800fef0:	429a      	cmp	r2, r3
 800fef2:	d102      	bne.n	800fefa <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	2208      	movs	r2, #8
 800fef8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800fefa:	68f8      	ldr	r0, [r7, #12]
 800fefc:	f7ff ff18 	bl	800fd30 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	2200      	movs	r2, #0
 800ff04:	771a      	strb	r2, [r3, #28]
}
 800ff06:	bf00      	nop
 800ff08:	3710      	adds	r7, #16
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	bd80      	pop	{r7, pc}
	...

0800ff10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ff10:	b480      	push	{r7}
 800ff12:	b085      	sub	sp, #20
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
 800ff18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	4a44      	ldr	r2, [pc, #272]	; (8010034 <TIM_Base_SetConfig+0x124>)
 800ff24:	4293      	cmp	r3, r2
 800ff26:	d013      	beq.n	800ff50 <TIM_Base_SetConfig+0x40>
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ff2e:	d00f      	beq.n	800ff50 <TIM_Base_SetConfig+0x40>
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	4a41      	ldr	r2, [pc, #260]	; (8010038 <TIM_Base_SetConfig+0x128>)
 800ff34:	4293      	cmp	r3, r2
 800ff36:	d00b      	beq.n	800ff50 <TIM_Base_SetConfig+0x40>
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	4a40      	ldr	r2, [pc, #256]	; (801003c <TIM_Base_SetConfig+0x12c>)
 800ff3c:	4293      	cmp	r3, r2
 800ff3e:	d007      	beq.n	800ff50 <TIM_Base_SetConfig+0x40>
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	4a3f      	ldr	r2, [pc, #252]	; (8010040 <TIM_Base_SetConfig+0x130>)
 800ff44:	4293      	cmp	r3, r2
 800ff46:	d003      	beq.n	800ff50 <TIM_Base_SetConfig+0x40>
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	4a3e      	ldr	r2, [pc, #248]	; (8010044 <TIM_Base_SetConfig+0x134>)
 800ff4c:	4293      	cmp	r3, r2
 800ff4e:	d108      	bne.n	800ff62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ff56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	685b      	ldr	r3, [r3, #4]
 800ff5c:	68fa      	ldr	r2, [r7, #12]
 800ff5e:	4313      	orrs	r3, r2
 800ff60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	4a33      	ldr	r2, [pc, #204]	; (8010034 <TIM_Base_SetConfig+0x124>)
 800ff66:	4293      	cmp	r3, r2
 800ff68:	d027      	beq.n	800ffba <TIM_Base_SetConfig+0xaa>
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ff70:	d023      	beq.n	800ffba <TIM_Base_SetConfig+0xaa>
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	4a30      	ldr	r2, [pc, #192]	; (8010038 <TIM_Base_SetConfig+0x128>)
 800ff76:	4293      	cmp	r3, r2
 800ff78:	d01f      	beq.n	800ffba <TIM_Base_SetConfig+0xaa>
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	4a2f      	ldr	r2, [pc, #188]	; (801003c <TIM_Base_SetConfig+0x12c>)
 800ff7e:	4293      	cmp	r3, r2
 800ff80:	d01b      	beq.n	800ffba <TIM_Base_SetConfig+0xaa>
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	4a2e      	ldr	r2, [pc, #184]	; (8010040 <TIM_Base_SetConfig+0x130>)
 800ff86:	4293      	cmp	r3, r2
 800ff88:	d017      	beq.n	800ffba <TIM_Base_SetConfig+0xaa>
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	4a2d      	ldr	r2, [pc, #180]	; (8010044 <TIM_Base_SetConfig+0x134>)
 800ff8e:	4293      	cmp	r3, r2
 800ff90:	d013      	beq.n	800ffba <TIM_Base_SetConfig+0xaa>
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	4a2c      	ldr	r2, [pc, #176]	; (8010048 <TIM_Base_SetConfig+0x138>)
 800ff96:	4293      	cmp	r3, r2
 800ff98:	d00f      	beq.n	800ffba <TIM_Base_SetConfig+0xaa>
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	4a2b      	ldr	r2, [pc, #172]	; (801004c <TIM_Base_SetConfig+0x13c>)
 800ff9e:	4293      	cmp	r3, r2
 800ffa0:	d00b      	beq.n	800ffba <TIM_Base_SetConfig+0xaa>
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	4a2a      	ldr	r2, [pc, #168]	; (8010050 <TIM_Base_SetConfig+0x140>)
 800ffa6:	4293      	cmp	r3, r2
 800ffa8:	d007      	beq.n	800ffba <TIM_Base_SetConfig+0xaa>
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	4a29      	ldr	r2, [pc, #164]	; (8010054 <TIM_Base_SetConfig+0x144>)
 800ffae:	4293      	cmp	r3, r2
 800ffb0:	d003      	beq.n	800ffba <TIM_Base_SetConfig+0xaa>
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	4a28      	ldr	r2, [pc, #160]	; (8010058 <TIM_Base_SetConfig+0x148>)
 800ffb6:	4293      	cmp	r3, r2
 800ffb8:	d108      	bne.n	800ffcc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ffc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ffc2:	683b      	ldr	r3, [r7, #0]
 800ffc4:	68db      	ldr	r3, [r3, #12]
 800ffc6:	68fa      	ldr	r2, [r7, #12]
 800ffc8:	4313      	orrs	r3, r2
 800ffca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ffd2:	683b      	ldr	r3, [r7, #0]
 800ffd4:	695b      	ldr	r3, [r3, #20]
 800ffd6:	4313      	orrs	r3, r2
 800ffd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	68fa      	ldr	r2, [r7, #12]
 800ffde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ffe0:	683b      	ldr	r3, [r7, #0]
 800ffe2:	689a      	ldr	r2, [r3, #8]
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ffe8:	683b      	ldr	r3, [r7, #0]
 800ffea:	681a      	ldr	r2, [r3, #0]
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	4a10      	ldr	r2, [pc, #64]	; (8010034 <TIM_Base_SetConfig+0x124>)
 800fff4:	4293      	cmp	r3, r2
 800fff6:	d00f      	beq.n	8010018 <TIM_Base_SetConfig+0x108>
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	4a12      	ldr	r2, [pc, #72]	; (8010044 <TIM_Base_SetConfig+0x134>)
 800fffc:	4293      	cmp	r3, r2
 800fffe:	d00b      	beq.n	8010018 <TIM_Base_SetConfig+0x108>
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	4a11      	ldr	r2, [pc, #68]	; (8010048 <TIM_Base_SetConfig+0x138>)
 8010004:	4293      	cmp	r3, r2
 8010006:	d007      	beq.n	8010018 <TIM_Base_SetConfig+0x108>
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	4a10      	ldr	r2, [pc, #64]	; (801004c <TIM_Base_SetConfig+0x13c>)
 801000c:	4293      	cmp	r3, r2
 801000e:	d003      	beq.n	8010018 <TIM_Base_SetConfig+0x108>
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	4a0f      	ldr	r2, [pc, #60]	; (8010050 <TIM_Base_SetConfig+0x140>)
 8010014:	4293      	cmp	r3, r2
 8010016:	d103      	bne.n	8010020 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010018:	683b      	ldr	r3, [r7, #0]
 801001a:	691a      	ldr	r2, [r3, #16]
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	2201      	movs	r2, #1
 8010024:	615a      	str	r2, [r3, #20]
}
 8010026:	bf00      	nop
 8010028:	3714      	adds	r7, #20
 801002a:	46bd      	mov	sp, r7
 801002c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010030:	4770      	bx	lr
 8010032:	bf00      	nop
 8010034:	40010000 	.word	0x40010000
 8010038:	40000400 	.word	0x40000400
 801003c:	40000800 	.word	0x40000800
 8010040:	40000c00 	.word	0x40000c00
 8010044:	40010400 	.word	0x40010400
 8010048:	40014000 	.word	0x40014000
 801004c:	40014400 	.word	0x40014400
 8010050:	40014800 	.word	0x40014800
 8010054:	4000e000 	.word	0x4000e000
 8010058:	4000e400 	.word	0x4000e400

0801005c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801005c:	b480      	push	{r7}
 801005e:	b087      	sub	sp, #28
 8010060:	af00      	add	r7, sp, #0
 8010062:	6078      	str	r0, [r7, #4]
 8010064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	6a1b      	ldr	r3, [r3, #32]
 801006a:	f023 0201 	bic.w	r2, r3, #1
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	6a1b      	ldr	r3, [r3, #32]
 8010076:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	685b      	ldr	r3, [r3, #4]
 801007c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	699b      	ldr	r3, [r3, #24]
 8010082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010084:	68fa      	ldr	r2, [r7, #12]
 8010086:	4b37      	ldr	r3, [pc, #220]	; (8010164 <TIM_OC1_SetConfig+0x108>)
 8010088:	4013      	ands	r3, r2
 801008a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	f023 0303 	bic.w	r3, r3, #3
 8010092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010094:	683b      	ldr	r3, [r7, #0]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	68fa      	ldr	r2, [r7, #12]
 801009a:	4313      	orrs	r3, r2
 801009c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801009e:	697b      	ldr	r3, [r7, #20]
 80100a0:	f023 0302 	bic.w	r3, r3, #2
 80100a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80100a6:	683b      	ldr	r3, [r7, #0]
 80100a8:	689b      	ldr	r3, [r3, #8]
 80100aa:	697a      	ldr	r2, [r7, #20]
 80100ac:	4313      	orrs	r3, r2
 80100ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	4a2d      	ldr	r2, [pc, #180]	; (8010168 <TIM_OC1_SetConfig+0x10c>)
 80100b4:	4293      	cmp	r3, r2
 80100b6:	d00f      	beq.n	80100d8 <TIM_OC1_SetConfig+0x7c>
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	4a2c      	ldr	r2, [pc, #176]	; (801016c <TIM_OC1_SetConfig+0x110>)
 80100bc:	4293      	cmp	r3, r2
 80100be:	d00b      	beq.n	80100d8 <TIM_OC1_SetConfig+0x7c>
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	4a2b      	ldr	r2, [pc, #172]	; (8010170 <TIM_OC1_SetConfig+0x114>)
 80100c4:	4293      	cmp	r3, r2
 80100c6:	d007      	beq.n	80100d8 <TIM_OC1_SetConfig+0x7c>
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	4a2a      	ldr	r2, [pc, #168]	; (8010174 <TIM_OC1_SetConfig+0x118>)
 80100cc:	4293      	cmp	r3, r2
 80100ce:	d003      	beq.n	80100d8 <TIM_OC1_SetConfig+0x7c>
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	4a29      	ldr	r2, [pc, #164]	; (8010178 <TIM_OC1_SetConfig+0x11c>)
 80100d4:	4293      	cmp	r3, r2
 80100d6:	d10c      	bne.n	80100f2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80100d8:	697b      	ldr	r3, [r7, #20]
 80100da:	f023 0308 	bic.w	r3, r3, #8
 80100de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	68db      	ldr	r3, [r3, #12]
 80100e4:	697a      	ldr	r2, [r7, #20]
 80100e6:	4313      	orrs	r3, r2
 80100e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80100ea:	697b      	ldr	r3, [r7, #20]
 80100ec:	f023 0304 	bic.w	r3, r3, #4
 80100f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	4a1c      	ldr	r2, [pc, #112]	; (8010168 <TIM_OC1_SetConfig+0x10c>)
 80100f6:	4293      	cmp	r3, r2
 80100f8:	d00f      	beq.n	801011a <TIM_OC1_SetConfig+0xbe>
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	4a1b      	ldr	r2, [pc, #108]	; (801016c <TIM_OC1_SetConfig+0x110>)
 80100fe:	4293      	cmp	r3, r2
 8010100:	d00b      	beq.n	801011a <TIM_OC1_SetConfig+0xbe>
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	4a1a      	ldr	r2, [pc, #104]	; (8010170 <TIM_OC1_SetConfig+0x114>)
 8010106:	4293      	cmp	r3, r2
 8010108:	d007      	beq.n	801011a <TIM_OC1_SetConfig+0xbe>
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	4a19      	ldr	r2, [pc, #100]	; (8010174 <TIM_OC1_SetConfig+0x118>)
 801010e:	4293      	cmp	r3, r2
 8010110:	d003      	beq.n	801011a <TIM_OC1_SetConfig+0xbe>
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	4a18      	ldr	r2, [pc, #96]	; (8010178 <TIM_OC1_SetConfig+0x11c>)
 8010116:	4293      	cmp	r3, r2
 8010118:	d111      	bne.n	801013e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801011a:	693b      	ldr	r3, [r7, #16]
 801011c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010120:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010122:	693b      	ldr	r3, [r7, #16]
 8010124:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010128:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801012a:	683b      	ldr	r3, [r7, #0]
 801012c:	695b      	ldr	r3, [r3, #20]
 801012e:	693a      	ldr	r2, [r7, #16]
 8010130:	4313      	orrs	r3, r2
 8010132:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010134:	683b      	ldr	r3, [r7, #0]
 8010136:	699b      	ldr	r3, [r3, #24]
 8010138:	693a      	ldr	r2, [r7, #16]
 801013a:	4313      	orrs	r3, r2
 801013c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	693a      	ldr	r2, [r7, #16]
 8010142:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	68fa      	ldr	r2, [r7, #12]
 8010148:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801014a:	683b      	ldr	r3, [r7, #0]
 801014c:	685a      	ldr	r2, [r3, #4]
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	697a      	ldr	r2, [r7, #20]
 8010156:	621a      	str	r2, [r3, #32]
}
 8010158:	bf00      	nop
 801015a:	371c      	adds	r7, #28
 801015c:	46bd      	mov	sp, r7
 801015e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010162:	4770      	bx	lr
 8010164:	fffeff8f 	.word	0xfffeff8f
 8010168:	40010000 	.word	0x40010000
 801016c:	40010400 	.word	0x40010400
 8010170:	40014000 	.word	0x40014000
 8010174:	40014400 	.word	0x40014400
 8010178:	40014800 	.word	0x40014800

0801017c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801017c:	b480      	push	{r7}
 801017e:	b087      	sub	sp, #28
 8010180:	af00      	add	r7, sp, #0
 8010182:	6078      	str	r0, [r7, #4]
 8010184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	6a1b      	ldr	r3, [r3, #32]
 801018a:	f023 0210 	bic.w	r2, r3, #16
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	6a1b      	ldr	r3, [r3, #32]
 8010196:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	685b      	ldr	r3, [r3, #4]
 801019c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	699b      	ldr	r3, [r3, #24]
 80101a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80101a4:	68fa      	ldr	r2, [r7, #12]
 80101a6:	4b34      	ldr	r3, [pc, #208]	; (8010278 <TIM_OC2_SetConfig+0xfc>)
 80101a8:	4013      	ands	r3, r2
 80101aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80101b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80101b4:	683b      	ldr	r3, [r7, #0]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	021b      	lsls	r3, r3, #8
 80101ba:	68fa      	ldr	r2, [r7, #12]
 80101bc:	4313      	orrs	r3, r2
 80101be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80101c0:	697b      	ldr	r3, [r7, #20]
 80101c2:	f023 0320 	bic.w	r3, r3, #32
 80101c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80101c8:	683b      	ldr	r3, [r7, #0]
 80101ca:	689b      	ldr	r3, [r3, #8]
 80101cc:	011b      	lsls	r3, r3, #4
 80101ce:	697a      	ldr	r2, [r7, #20]
 80101d0:	4313      	orrs	r3, r2
 80101d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	4a29      	ldr	r2, [pc, #164]	; (801027c <TIM_OC2_SetConfig+0x100>)
 80101d8:	4293      	cmp	r3, r2
 80101da:	d003      	beq.n	80101e4 <TIM_OC2_SetConfig+0x68>
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	4a28      	ldr	r2, [pc, #160]	; (8010280 <TIM_OC2_SetConfig+0x104>)
 80101e0:	4293      	cmp	r3, r2
 80101e2:	d10d      	bne.n	8010200 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80101e4:	697b      	ldr	r3, [r7, #20]
 80101e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80101ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80101ec:	683b      	ldr	r3, [r7, #0]
 80101ee:	68db      	ldr	r3, [r3, #12]
 80101f0:	011b      	lsls	r3, r3, #4
 80101f2:	697a      	ldr	r2, [r7, #20]
 80101f4:	4313      	orrs	r3, r2
 80101f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80101f8:	697b      	ldr	r3, [r7, #20]
 80101fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80101fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	4a1e      	ldr	r2, [pc, #120]	; (801027c <TIM_OC2_SetConfig+0x100>)
 8010204:	4293      	cmp	r3, r2
 8010206:	d00f      	beq.n	8010228 <TIM_OC2_SetConfig+0xac>
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	4a1d      	ldr	r2, [pc, #116]	; (8010280 <TIM_OC2_SetConfig+0x104>)
 801020c:	4293      	cmp	r3, r2
 801020e:	d00b      	beq.n	8010228 <TIM_OC2_SetConfig+0xac>
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	4a1c      	ldr	r2, [pc, #112]	; (8010284 <TIM_OC2_SetConfig+0x108>)
 8010214:	4293      	cmp	r3, r2
 8010216:	d007      	beq.n	8010228 <TIM_OC2_SetConfig+0xac>
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	4a1b      	ldr	r2, [pc, #108]	; (8010288 <TIM_OC2_SetConfig+0x10c>)
 801021c:	4293      	cmp	r3, r2
 801021e:	d003      	beq.n	8010228 <TIM_OC2_SetConfig+0xac>
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	4a1a      	ldr	r2, [pc, #104]	; (801028c <TIM_OC2_SetConfig+0x110>)
 8010224:	4293      	cmp	r3, r2
 8010226:	d113      	bne.n	8010250 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010228:	693b      	ldr	r3, [r7, #16]
 801022a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801022e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010230:	693b      	ldr	r3, [r7, #16]
 8010232:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010236:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010238:	683b      	ldr	r3, [r7, #0]
 801023a:	695b      	ldr	r3, [r3, #20]
 801023c:	009b      	lsls	r3, r3, #2
 801023e:	693a      	ldr	r2, [r7, #16]
 8010240:	4313      	orrs	r3, r2
 8010242:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010244:	683b      	ldr	r3, [r7, #0]
 8010246:	699b      	ldr	r3, [r3, #24]
 8010248:	009b      	lsls	r3, r3, #2
 801024a:	693a      	ldr	r2, [r7, #16]
 801024c:	4313      	orrs	r3, r2
 801024e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	693a      	ldr	r2, [r7, #16]
 8010254:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	68fa      	ldr	r2, [r7, #12]
 801025a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801025c:	683b      	ldr	r3, [r7, #0]
 801025e:	685a      	ldr	r2, [r3, #4]
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	697a      	ldr	r2, [r7, #20]
 8010268:	621a      	str	r2, [r3, #32]
}
 801026a:	bf00      	nop
 801026c:	371c      	adds	r7, #28
 801026e:	46bd      	mov	sp, r7
 8010270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010274:	4770      	bx	lr
 8010276:	bf00      	nop
 8010278:	feff8fff 	.word	0xfeff8fff
 801027c:	40010000 	.word	0x40010000
 8010280:	40010400 	.word	0x40010400
 8010284:	40014000 	.word	0x40014000
 8010288:	40014400 	.word	0x40014400
 801028c:	40014800 	.word	0x40014800

08010290 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010290:	b480      	push	{r7}
 8010292:	b087      	sub	sp, #28
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
 8010298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	6a1b      	ldr	r3, [r3, #32]
 801029e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	6a1b      	ldr	r3, [r3, #32]
 80102aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	685b      	ldr	r3, [r3, #4]
 80102b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	69db      	ldr	r3, [r3, #28]
 80102b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80102b8:	68fa      	ldr	r2, [r7, #12]
 80102ba:	4b33      	ldr	r3, [pc, #204]	; (8010388 <TIM_OC3_SetConfig+0xf8>)
 80102bc:	4013      	ands	r3, r2
 80102be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	f023 0303 	bic.w	r3, r3, #3
 80102c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80102c8:	683b      	ldr	r3, [r7, #0]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	68fa      	ldr	r2, [r7, #12]
 80102ce:	4313      	orrs	r3, r2
 80102d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80102d2:	697b      	ldr	r3, [r7, #20]
 80102d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80102d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80102da:	683b      	ldr	r3, [r7, #0]
 80102dc:	689b      	ldr	r3, [r3, #8]
 80102de:	021b      	lsls	r3, r3, #8
 80102e0:	697a      	ldr	r2, [r7, #20]
 80102e2:	4313      	orrs	r3, r2
 80102e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	4a28      	ldr	r2, [pc, #160]	; (801038c <TIM_OC3_SetConfig+0xfc>)
 80102ea:	4293      	cmp	r3, r2
 80102ec:	d003      	beq.n	80102f6 <TIM_OC3_SetConfig+0x66>
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	4a27      	ldr	r2, [pc, #156]	; (8010390 <TIM_OC3_SetConfig+0x100>)
 80102f2:	4293      	cmp	r3, r2
 80102f4:	d10d      	bne.n	8010312 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80102f6:	697b      	ldr	r3, [r7, #20]
 80102f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80102fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	68db      	ldr	r3, [r3, #12]
 8010302:	021b      	lsls	r3, r3, #8
 8010304:	697a      	ldr	r2, [r7, #20]
 8010306:	4313      	orrs	r3, r2
 8010308:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801030a:	697b      	ldr	r3, [r7, #20]
 801030c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010310:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	4a1d      	ldr	r2, [pc, #116]	; (801038c <TIM_OC3_SetConfig+0xfc>)
 8010316:	4293      	cmp	r3, r2
 8010318:	d00f      	beq.n	801033a <TIM_OC3_SetConfig+0xaa>
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	4a1c      	ldr	r2, [pc, #112]	; (8010390 <TIM_OC3_SetConfig+0x100>)
 801031e:	4293      	cmp	r3, r2
 8010320:	d00b      	beq.n	801033a <TIM_OC3_SetConfig+0xaa>
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	4a1b      	ldr	r2, [pc, #108]	; (8010394 <TIM_OC3_SetConfig+0x104>)
 8010326:	4293      	cmp	r3, r2
 8010328:	d007      	beq.n	801033a <TIM_OC3_SetConfig+0xaa>
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	4a1a      	ldr	r2, [pc, #104]	; (8010398 <TIM_OC3_SetConfig+0x108>)
 801032e:	4293      	cmp	r3, r2
 8010330:	d003      	beq.n	801033a <TIM_OC3_SetConfig+0xaa>
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	4a19      	ldr	r2, [pc, #100]	; (801039c <TIM_OC3_SetConfig+0x10c>)
 8010336:	4293      	cmp	r3, r2
 8010338:	d113      	bne.n	8010362 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801033a:	693b      	ldr	r3, [r7, #16]
 801033c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010340:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010342:	693b      	ldr	r3, [r7, #16]
 8010344:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010348:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801034a:	683b      	ldr	r3, [r7, #0]
 801034c:	695b      	ldr	r3, [r3, #20]
 801034e:	011b      	lsls	r3, r3, #4
 8010350:	693a      	ldr	r2, [r7, #16]
 8010352:	4313      	orrs	r3, r2
 8010354:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010356:	683b      	ldr	r3, [r7, #0]
 8010358:	699b      	ldr	r3, [r3, #24]
 801035a:	011b      	lsls	r3, r3, #4
 801035c:	693a      	ldr	r2, [r7, #16]
 801035e:	4313      	orrs	r3, r2
 8010360:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	693a      	ldr	r2, [r7, #16]
 8010366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	68fa      	ldr	r2, [r7, #12]
 801036c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801036e:	683b      	ldr	r3, [r7, #0]
 8010370:	685a      	ldr	r2, [r3, #4]
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	697a      	ldr	r2, [r7, #20]
 801037a:	621a      	str	r2, [r3, #32]
}
 801037c:	bf00      	nop
 801037e:	371c      	adds	r7, #28
 8010380:	46bd      	mov	sp, r7
 8010382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010386:	4770      	bx	lr
 8010388:	fffeff8f 	.word	0xfffeff8f
 801038c:	40010000 	.word	0x40010000
 8010390:	40010400 	.word	0x40010400
 8010394:	40014000 	.word	0x40014000
 8010398:	40014400 	.word	0x40014400
 801039c:	40014800 	.word	0x40014800

080103a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80103a0:	b480      	push	{r7}
 80103a2:	b087      	sub	sp, #28
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
 80103a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	6a1b      	ldr	r3, [r3, #32]
 80103ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	6a1b      	ldr	r3, [r3, #32]
 80103ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	685b      	ldr	r3, [r3, #4]
 80103c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	69db      	ldr	r3, [r3, #28]
 80103c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80103c8:	68fa      	ldr	r2, [r7, #12]
 80103ca:	4b24      	ldr	r3, [pc, #144]	; (801045c <TIM_OC4_SetConfig+0xbc>)
 80103cc:	4013      	ands	r3, r2
 80103ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80103d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80103d8:	683b      	ldr	r3, [r7, #0]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	021b      	lsls	r3, r3, #8
 80103de:	68fa      	ldr	r2, [r7, #12]
 80103e0:	4313      	orrs	r3, r2
 80103e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80103e4:	693b      	ldr	r3, [r7, #16]
 80103e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80103ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80103ec:	683b      	ldr	r3, [r7, #0]
 80103ee:	689b      	ldr	r3, [r3, #8]
 80103f0:	031b      	lsls	r3, r3, #12
 80103f2:	693a      	ldr	r2, [r7, #16]
 80103f4:	4313      	orrs	r3, r2
 80103f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	4a19      	ldr	r2, [pc, #100]	; (8010460 <TIM_OC4_SetConfig+0xc0>)
 80103fc:	4293      	cmp	r3, r2
 80103fe:	d00f      	beq.n	8010420 <TIM_OC4_SetConfig+0x80>
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	4a18      	ldr	r2, [pc, #96]	; (8010464 <TIM_OC4_SetConfig+0xc4>)
 8010404:	4293      	cmp	r3, r2
 8010406:	d00b      	beq.n	8010420 <TIM_OC4_SetConfig+0x80>
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	4a17      	ldr	r2, [pc, #92]	; (8010468 <TIM_OC4_SetConfig+0xc8>)
 801040c:	4293      	cmp	r3, r2
 801040e:	d007      	beq.n	8010420 <TIM_OC4_SetConfig+0x80>
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	4a16      	ldr	r2, [pc, #88]	; (801046c <TIM_OC4_SetConfig+0xcc>)
 8010414:	4293      	cmp	r3, r2
 8010416:	d003      	beq.n	8010420 <TIM_OC4_SetConfig+0x80>
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	4a15      	ldr	r2, [pc, #84]	; (8010470 <TIM_OC4_SetConfig+0xd0>)
 801041c:	4293      	cmp	r3, r2
 801041e:	d109      	bne.n	8010434 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010420:	697b      	ldr	r3, [r7, #20]
 8010422:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010426:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010428:	683b      	ldr	r3, [r7, #0]
 801042a:	695b      	ldr	r3, [r3, #20]
 801042c:	019b      	lsls	r3, r3, #6
 801042e:	697a      	ldr	r2, [r7, #20]
 8010430:	4313      	orrs	r3, r2
 8010432:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	697a      	ldr	r2, [r7, #20]
 8010438:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	68fa      	ldr	r2, [r7, #12]
 801043e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010440:	683b      	ldr	r3, [r7, #0]
 8010442:	685a      	ldr	r2, [r3, #4]
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	693a      	ldr	r2, [r7, #16]
 801044c:	621a      	str	r2, [r3, #32]
}
 801044e:	bf00      	nop
 8010450:	371c      	adds	r7, #28
 8010452:	46bd      	mov	sp, r7
 8010454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010458:	4770      	bx	lr
 801045a:	bf00      	nop
 801045c:	feff8fff 	.word	0xfeff8fff
 8010460:	40010000 	.word	0x40010000
 8010464:	40010400 	.word	0x40010400
 8010468:	40014000 	.word	0x40014000
 801046c:	40014400 	.word	0x40014400
 8010470:	40014800 	.word	0x40014800

08010474 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010474:	b480      	push	{r7}
 8010476:	b087      	sub	sp, #28
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
 801047c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	6a1b      	ldr	r3, [r3, #32]
 8010482:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	6a1b      	ldr	r3, [r3, #32]
 801048e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	685b      	ldr	r3, [r3, #4]
 8010494:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801049a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801049c:	68fa      	ldr	r2, [r7, #12]
 801049e:	4b21      	ldr	r3, [pc, #132]	; (8010524 <TIM_OC5_SetConfig+0xb0>)
 80104a0:	4013      	ands	r3, r2
 80104a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80104a4:	683b      	ldr	r3, [r7, #0]
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	68fa      	ldr	r2, [r7, #12]
 80104aa:	4313      	orrs	r3, r2
 80104ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80104ae:	693b      	ldr	r3, [r7, #16]
 80104b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80104b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80104b6:	683b      	ldr	r3, [r7, #0]
 80104b8:	689b      	ldr	r3, [r3, #8]
 80104ba:	041b      	lsls	r3, r3, #16
 80104bc:	693a      	ldr	r2, [r7, #16]
 80104be:	4313      	orrs	r3, r2
 80104c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	4a18      	ldr	r2, [pc, #96]	; (8010528 <TIM_OC5_SetConfig+0xb4>)
 80104c6:	4293      	cmp	r3, r2
 80104c8:	d00f      	beq.n	80104ea <TIM_OC5_SetConfig+0x76>
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	4a17      	ldr	r2, [pc, #92]	; (801052c <TIM_OC5_SetConfig+0xb8>)
 80104ce:	4293      	cmp	r3, r2
 80104d0:	d00b      	beq.n	80104ea <TIM_OC5_SetConfig+0x76>
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	4a16      	ldr	r2, [pc, #88]	; (8010530 <TIM_OC5_SetConfig+0xbc>)
 80104d6:	4293      	cmp	r3, r2
 80104d8:	d007      	beq.n	80104ea <TIM_OC5_SetConfig+0x76>
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	4a15      	ldr	r2, [pc, #84]	; (8010534 <TIM_OC5_SetConfig+0xc0>)
 80104de:	4293      	cmp	r3, r2
 80104e0:	d003      	beq.n	80104ea <TIM_OC5_SetConfig+0x76>
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	4a14      	ldr	r2, [pc, #80]	; (8010538 <TIM_OC5_SetConfig+0xc4>)
 80104e6:	4293      	cmp	r3, r2
 80104e8:	d109      	bne.n	80104fe <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80104ea:	697b      	ldr	r3, [r7, #20]
 80104ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80104f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80104f2:	683b      	ldr	r3, [r7, #0]
 80104f4:	695b      	ldr	r3, [r3, #20]
 80104f6:	021b      	lsls	r3, r3, #8
 80104f8:	697a      	ldr	r2, [r7, #20]
 80104fa:	4313      	orrs	r3, r2
 80104fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	697a      	ldr	r2, [r7, #20]
 8010502:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	68fa      	ldr	r2, [r7, #12]
 8010508:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801050a:	683b      	ldr	r3, [r7, #0]
 801050c:	685a      	ldr	r2, [r3, #4]
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	693a      	ldr	r2, [r7, #16]
 8010516:	621a      	str	r2, [r3, #32]
}
 8010518:	bf00      	nop
 801051a:	371c      	adds	r7, #28
 801051c:	46bd      	mov	sp, r7
 801051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010522:	4770      	bx	lr
 8010524:	fffeff8f 	.word	0xfffeff8f
 8010528:	40010000 	.word	0x40010000
 801052c:	40010400 	.word	0x40010400
 8010530:	40014000 	.word	0x40014000
 8010534:	40014400 	.word	0x40014400
 8010538:	40014800 	.word	0x40014800

0801053c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801053c:	b480      	push	{r7}
 801053e:	b087      	sub	sp, #28
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
 8010544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	6a1b      	ldr	r3, [r3, #32]
 801054a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	6a1b      	ldr	r3, [r3, #32]
 8010556:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	685b      	ldr	r3, [r3, #4]
 801055c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010564:	68fa      	ldr	r2, [r7, #12]
 8010566:	4b22      	ldr	r3, [pc, #136]	; (80105f0 <TIM_OC6_SetConfig+0xb4>)
 8010568:	4013      	ands	r3, r2
 801056a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801056c:	683b      	ldr	r3, [r7, #0]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	021b      	lsls	r3, r3, #8
 8010572:	68fa      	ldr	r2, [r7, #12]
 8010574:	4313      	orrs	r3, r2
 8010576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010578:	693b      	ldr	r3, [r7, #16]
 801057a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801057e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010580:	683b      	ldr	r3, [r7, #0]
 8010582:	689b      	ldr	r3, [r3, #8]
 8010584:	051b      	lsls	r3, r3, #20
 8010586:	693a      	ldr	r2, [r7, #16]
 8010588:	4313      	orrs	r3, r2
 801058a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	4a19      	ldr	r2, [pc, #100]	; (80105f4 <TIM_OC6_SetConfig+0xb8>)
 8010590:	4293      	cmp	r3, r2
 8010592:	d00f      	beq.n	80105b4 <TIM_OC6_SetConfig+0x78>
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	4a18      	ldr	r2, [pc, #96]	; (80105f8 <TIM_OC6_SetConfig+0xbc>)
 8010598:	4293      	cmp	r3, r2
 801059a:	d00b      	beq.n	80105b4 <TIM_OC6_SetConfig+0x78>
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	4a17      	ldr	r2, [pc, #92]	; (80105fc <TIM_OC6_SetConfig+0xc0>)
 80105a0:	4293      	cmp	r3, r2
 80105a2:	d007      	beq.n	80105b4 <TIM_OC6_SetConfig+0x78>
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	4a16      	ldr	r2, [pc, #88]	; (8010600 <TIM_OC6_SetConfig+0xc4>)
 80105a8:	4293      	cmp	r3, r2
 80105aa:	d003      	beq.n	80105b4 <TIM_OC6_SetConfig+0x78>
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	4a15      	ldr	r2, [pc, #84]	; (8010604 <TIM_OC6_SetConfig+0xc8>)
 80105b0:	4293      	cmp	r3, r2
 80105b2:	d109      	bne.n	80105c8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80105b4:	697b      	ldr	r3, [r7, #20]
 80105b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80105ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80105bc:	683b      	ldr	r3, [r7, #0]
 80105be:	695b      	ldr	r3, [r3, #20]
 80105c0:	029b      	lsls	r3, r3, #10
 80105c2:	697a      	ldr	r2, [r7, #20]
 80105c4:	4313      	orrs	r3, r2
 80105c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	697a      	ldr	r2, [r7, #20]
 80105cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	68fa      	ldr	r2, [r7, #12]
 80105d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80105d4:	683b      	ldr	r3, [r7, #0]
 80105d6:	685a      	ldr	r2, [r3, #4]
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	693a      	ldr	r2, [r7, #16]
 80105e0:	621a      	str	r2, [r3, #32]
}
 80105e2:	bf00      	nop
 80105e4:	371c      	adds	r7, #28
 80105e6:	46bd      	mov	sp, r7
 80105e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ec:	4770      	bx	lr
 80105ee:	bf00      	nop
 80105f0:	feff8fff 	.word	0xfeff8fff
 80105f4:	40010000 	.word	0x40010000
 80105f8:	40010400 	.word	0x40010400
 80105fc:	40014000 	.word	0x40014000
 8010600:	40014400 	.word	0x40014400
 8010604:	40014800 	.word	0x40014800

08010608 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010608:	b480      	push	{r7}
 801060a:	b087      	sub	sp, #28
 801060c:	af00      	add	r7, sp, #0
 801060e:	60f8      	str	r0, [r7, #12]
 8010610:	60b9      	str	r1, [r7, #8]
 8010612:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010614:	68bb      	ldr	r3, [r7, #8]
 8010616:	f003 031f 	and.w	r3, r3, #31
 801061a:	2201      	movs	r2, #1
 801061c:	fa02 f303 	lsl.w	r3, r2, r3
 8010620:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	6a1a      	ldr	r2, [r3, #32]
 8010626:	697b      	ldr	r3, [r7, #20]
 8010628:	43db      	mvns	r3, r3
 801062a:	401a      	ands	r2, r3
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	6a1a      	ldr	r2, [r3, #32]
 8010634:	68bb      	ldr	r3, [r7, #8]
 8010636:	f003 031f 	and.w	r3, r3, #31
 801063a:	6879      	ldr	r1, [r7, #4]
 801063c:	fa01 f303 	lsl.w	r3, r1, r3
 8010640:	431a      	orrs	r2, r3
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	621a      	str	r2, [r3, #32]
}
 8010646:	bf00      	nop
 8010648:	371c      	adds	r7, #28
 801064a:	46bd      	mov	sp, r7
 801064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010650:	4770      	bx	lr
	...

08010654 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010654:	b480      	push	{r7}
 8010656:	b085      	sub	sp, #20
 8010658:	af00      	add	r7, sp, #0
 801065a:	6078      	str	r0, [r7, #4]
 801065c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010664:	2b01      	cmp	r3, #1
 8010666:	d101      	bne.n	801066c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010668:	2302      	movs	r3, #2
 801066a:	e077      	b.n	801075c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	2201      	movs	r2, #1
 8010670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	2202      	movs	r2, #2
 8010678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	685b      	ldr	r3, [r3, #4]
 8010682:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	689b      	ldr	r3, [r3, #8]
 801068a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	4a35      	ldr	r2, [pc, #212]	; (8010768 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010692:	4293      	cmp	r3, r2
 8010694:	d004      	beq.n	80106a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	4a34      	ldr	r2, [pc, #208]	; (801076c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801069c:	4293      	cmp	r3, r2
 801069e:	d108      	bne.n	80106b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80106a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80106a8:	683b      	ldr	r3, [r7, #0]
 80106aa:	685b      	ldr	r3, [r3, #4]
 80106ac:	68fa      	ldr	r2, [r7, #12]
 80106ae:	4313      	orrs	r3, r2
 80106b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80106b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80106ba:	683b      	ldr	r3, [r7, #0]
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	68fa      	ldr	r2, [r7, #12]
 80106c0:	4313      	orrs	r3, r2
 80106c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	68fa      	ldr	r2, [r7, #12]
 80106ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	4a25      	ldr	r2, [pc, #148]	; (8010768 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80106d2:	4293      	cmp	r3, r2
 80106d4:	d02c      	beq.n	8010730 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80106de:	d027      	beq.n	8010730 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	4a22      	ldr	r2, [pc, #136]	; (8010770 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80106e6:	4293      	cmp	r3, r2
 80106e8:	d022      	beq.n	8010730 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	4a21      	ldr	r2, [pc, #132]	; (8010774 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80106f0:	4293      	cmp	r3, r2
 80106f2:	d01d      	beq.n	8010730 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	4a1f      	ldr	r2, [pc, #124]	; (8010778 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80106fa:	4293      	cmp	r3, r2
 80106fc:	d018      	beq.n	8010730 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	4a1a      	ldr	r2, [pc, #104]	; (801076c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010704:	4293      	cmp	r3, r2
 8010706:	d013      	beq.n	8010730 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	4a1b      	ldr	r2, [pc, #108]	; (801077c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 801070e:	4293      	cmp	r3, r2
 8010710:	d00e      	beq.n	8010730 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	4a1a      	ldr	r2, [pc, #104]	; (8010780 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8010718:	4293      	cmp	r3, r2
 801071a:	d009      	beq.n	8010730 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	4a18      	ldr	r2, [pc, #96]	; (8010784 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8010722:	4293      	cmp	r3, r2
 8010724:	d004      	beq.n	8010730 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	4a17      	ldr	r2, [pc, #92]	; (8010788 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 801072c:	4293      	cmp	r3, r2
 801072e:	d10c      	bne.n	801074a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010730:	68bb      	ldr	r3, [r7, #8]
 8010732:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010736:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010738:	683b      	ldr	r3, [r7, #0]
 801073a:	689b      	ldr	r3, [r3, #8]
 801073c:	68ba      	ldr	r2, [r7, #8]
 801073e:	4313      	orrs	r3, r2
 8010740:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	68ba      	ldr	r2, [r7, #8]
 8010748:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	2201      	movs	r2, #1
 801074e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	2200      	movs	r2, #0
 8010756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801075a:	2300      	movs	r3, #0
}
 801075c:	4618      	mov	r0, r3
 801075e:	3714      	adds	r7, #20
 8010760:	46bd      	mov	sp, r7
 8010762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010766:	4770      	bx	lr
 8010768:	40010000 	.word	0x40010000
 801076c:	40010400 	.word	0x40010400
 8010770:	40000400 	.word	0x40000400
 8010774:	40000800 	.word	0x40000800
 8010778:	40000c00 	.word	0x40000c00
 801077c:	40001800 	.word	0x40001800
 8010780:	40014000 	.word	0x40014000
 8010784:	4000e000 	.word	0x4000e000
 8010788:	4000e400 	.word	0x4000e400

0801078c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801078c:	b480      	push	{r7}
 801078e:	b083      	sub	sp, #12
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010794:	bf00      	nop
 8010796:	370c      	adds	r7, #12
 8010798:	46bd      	mov	sp, r7
 801079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079e:	4770      	bx	lr

080107a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80107a0:	b480      	push	{r7}
 80107a2:	b083      	sub	sp, #12
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80107a8:	bf00      	nop
 80107aa:	370c      	adds	r7, #12
 80107ac:	46bd      	mov	sp, r7
 80107ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b2:	4770      	bx	lr

080107b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80107b4:	b480      	push	{r7}
 80107b6:	b083      	sub	sp, #12
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80107bc:	bf00      	nop
 80107be:	370c      	adds	r7, #12
 80107c0:	46bd      	mov	sp, r7
 80107c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c6:	4770      	bx	lr

080107c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80107c8:	b580      	push	{r7, lr}
 80107ca:	b082      	sub	sp, #8
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d101      	bne.n	80107da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80107d6:	2301      	movs	r3, #1
 80107d8:	e042      	b.n	8010860 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d106      	bne.n	80107f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	2200      	movs	r2, #0
 80107e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80107ec:	6878      	ldr	r0, [r7, #4]
 80107ee:	f7f2 fd3f 	bl	8003270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	2224      	movs	r2, #36	; 0x24
 80107f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	681a      	ldr	r2, [r3, #0]
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	f022 0201 	bic.w	r2, r2, #1
 8010808:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801080a:	6878      	ldr	r0, [r7, #4]
 801080c:	f000 f82c 	bl	8010868 <UART_SetConfig>
 8010810:	4603      	mov	r3, r0
 8010812:	2b01      	cmp	r3, #1
 8010814:	d101      	bne.n	801081a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8010816:	2301      	movs	r3, #1
 8010818:	e022      	b.n	8010860 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801081e:	2b00      	cmp	r3, #0
 8010820:	d002      	beq.n	8010828 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8010822:	6878      	ldr	r0, [r7, #4]
 8010824:	f000 fe8c 	bl	8011540 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	685a      	ldr	r2, [r3, #4]
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010836:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	689a      	ldr	r2, [r3, #8]
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010846:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	681a      	ldr	r2, [r3, #0]
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	f042 0201 	orr.w	r2, r2, #1
 8010856:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010858:	6878      	ldr	r0, [r7, #4]
 801085a:	f000 ff13 	bl	8011684 <UART_CheckIdleState>
 801085e:	4603      	mov	r3, r0
}
 8010860:	4618      	mov	r0, r3
 8010862:	3708      	adds	r7, #8
 8010864:	46bd      	mov	sp, r7
 8010866:	bd80      	pop	{r7, pc}

08010868 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801086c:	b092      	sub	sp, #72	; 0x48
 801086e:	af00      	add	r7, sp, #0
 8010870:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010872:	2300      	movs	r3, #0
 8010874:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010878:	697b      	ldr	r3, [r7, #20]
 801087a:	689a      	ldr	r2, [r3, #8]
 801087c:	697b      	ldr	r3, [r7, #20]
 801087e:	691b      	ldr	r3, [r3, #16]
 8010880:	431a      	orrs	r2, r3
 8010882:	697b      	ldr	r3, [r7, #20]
 8010884:	695b      	ldr	r3, [r3, #20]
 8010886:	431a      	orrs	r2, r3
 8010888:	697b      	ldr	r3, [r7, #20]
 801088a:	69db      	ldr	r3, [r3, #28]
 801088c:	4313      	orrs	r3, r2
 801088e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010890:	697b      	ldr	r3, [r7, #20]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	681a      	ldr	r2, [r3, #0]
 8010896:	4bbe      	ldr	r3, [pc, #760]	; (8010b90 <UART_SetConfig+0x328>)
 8010898:	4013      	ands	r3, r2
 801089a:	697a      	ldr	r2, [r7, #20]
 801089c:	6812      	ldr	r2, [r2, #0]
 801089e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80108a0:	430b      	orrs	r3, r1
 80108a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80108a4:	697b      	ldr	r3, [r7, #20]
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	685b      	ldr	r3, [r3, #4]
 80108aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80108ae:	697b      	ldr	r3, [r7, #20]
 80108b0:	68da      	ldr	r2, [r3, #12]
 80108b2:	697b      	ldr	r3, [r7, #20]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	430a      	orrs	r2, r1
 80108b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80108ba:	697b      	ldr	r3, [r7, #20]
 80108bc:	699b      	ldr	r3, [r3, #24]
 80108be:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80108c0:	697b      	ldr	r3, [r7, #20]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	4ab3      	ldr	r2, [pc, #716]	; (8010b94 <UART_SetConfig+0x32c>)
 80108c6:	4293      	cmp	r3, r2
 80108c8:	d004      	beq.n	80108d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80108ca:	697b      	ldr	r3, [r7, #20]
 80108cc:	6a1b      	ldr	r3, [r3, #32]
 80108ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80108d0:	4313      	orrs	r3, r2
 80108d2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80108d4:	697b      	ldr	r3, [r7, #20]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	689a      	ldr	r2, [r3, #8]
 80108da:	4baf      	ldr	r3, [pc, #700]	; (8010b98 <UART_SetConfig+0x330>)
 80108dc:	4013      	ands	r3, r2
 80108de:	697a      	ldr	r2, [r7, #20]
 80108e0:	6812      	ldr	r2, [r2, #0]
 80108e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80108e4:	430b      	orrs	r3, r1
 80108e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80108e8:	697b      	ldr	r3, [r7, #20]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108ee:	f023 010f 	bic.w	r1, r3, #15
 80108f2:	697b      	ldr	r3, [r7, #20]
 80108f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80108f6:	697b      	ldr	r3, [r7, #20]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	430a      	orrs	r2, r1
 80108fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80108fe:	697b      	ldr	r3, [r7, #20]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	4aa6      	ldr	r2, [pc, #664]	; (8010b9c <UART_SetConfig+0x334>)
 8010904:	4293      	cmp	r3, r2
 8010906:	d177      	bne.n	80109f8 <UART_SetConfig+0x190>
 8010908:	4ba5      	ldr	r3, [pc, #660]	; (8010ba0 <UART_SetConfig+0x338>)
 801090a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801090c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010910:	2b28      	cmp	r3, #40	; 0x28
 8010912:	d86d      	bhi.n	80109f0 <UART_SetConfig+0x188>
 8010914:	a201      	add	r2, pc, #4	; (adr r2, 801091c <UART_SetConfig+0xb4>)
 8010916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801091a:	bf00      	nop
 801091c:	080109c1 	.word	0x080109c1
 8010920:	080109f1 	.word	0x080109f1
 8010924:	080109f1 	.word	0x080109f1
 8010928:	080109f1 	.word	0x080109f1
 801092c:	080109f1 	.word	0x080109f1
 8010930:	080109f1 	.word	0x080109f1
 8010934:	080109f1 	.word	0x080109f1
 8010938:	080109f1 	.word	0x080109f1
 801093c:	080109c9 	.word	0x080109c9
 8010940:	080109f1 	.word	0x080109f1
 8010944:	080109f1 	.word	0x080109f1
 8010948:	080109f1 	.word	0x080109f1
 801094c:	080109f1 	.word	0x080109f1
 8010950:	080109f1 	.word	0x080109f1
 8010954:	080109f1 	.word	0x080109f1
 8010958:	080109f1 	.word	0x080109f1
 801095c:	080109d1 	.word	0x080109d1
 8010960:	080109f1 	.word	0x080109f1
 8010964:	080109f1 	.word	0x080109f1
 8010968:	080109f1 	.word	0x080109f1
 801096c:	080109f1 	.word	0x080109f1
 8010970:	080109f1 	.word	0x080109f1
 8010974:	080109f1 	.word	0x080109f1
 8010978:	080109f1 	.word	0x080109f1
 801097c:	080109d9 	.word	0x080109d9
 8010980:	080109f1 	.word	0x080109f1
 8010984:	080109f1 	.word	0x080109f1
 8010988:	080109f1 	.word	0x080109f1
 801098c:	080109f1 	.word	0x080109f1
 8010990:	080109f1 	.word	0x080109f1
 8010994:	080109f1 	.word	0x080109f1
 8010998:	080109f1 	.word	0x080109f1
 801099c:	080109e1 	.word	0x080109e1
 80109a0:	080109f1 	.word	0x080109f1
 80109a4:	080109f1 	.word	0x080109f1
 80109a8:	080109f1 	.word	0x080109f1
 80109ac:	080109f1 	.word	0x080109f1
 80109b0:	080109f1 	.word	0x080109f1
 80109b4:	080109f1 	.word	0x080109f1
 80109b8:	080109f1 	.word	0x080109f1
 80109bc:	080109e9 	.word	0x080109e9
 80109c0:	2301      	movs	r3, #1
 80109c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109c6:	e326      	b.n	8011016 <UART_SetConfig+0x7ae>
 80109c8:	2304      	movs	r3, #4
 80109ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109ce:	e322      	b.n	8011016 <UART_SetConfig+0x7ae>
 80109d0:	2308      	movs	r3, #8
 80109d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109d6:	e31e      	b.n	8011016 <UART_SetConfig+0x7ae>
 80109d8:	2310      	movs	r3, #16
 80109da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109de:	e31a      	b.n	8011016 <UART_SetConfig+0x7ae>
 80109e0:	2320      	movs	r3, #32
 80109e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109e6:	e316      	b.n	8011016 <UART_SetConfig+0x7ae>
 80109e8:	2340      	movs	r3, #64	; 0x40
 80109ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109ee:	e312      	b.n	8011016 <UART_SetConfig+0x7ae>
 80109f0:	2380      	movs	r3, #128	; 0x80
 80109f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109f6:	e30e      	b.n	8011016 <UART_SetConfig+0x7ae>
 80109f8:	697b      	ldr	r3, [r7, #20]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	4a69      	ldr	r2, [pc, #420]	; (8010ba4 <UART_SetConfig+0x33c>)
 80109fe:	4293      	cmp	r3, r2
 8010a00:	d130      	bne.n	8010a64 <UART_SetConfig+0x1fc>
 8010a02:	4b67      	ldr	r3, [pc, #412]	; (8010ba0 <UART_SetConfig+0x338>)
 8010a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a06:	f003 0307 	and.w	r3, r3, #7
 8010a0a:	2b05      	cmp	r3, #5
 8010a0c:	d826      	bhi.n	8010a5c <UART_SetConfig+0x1f4>
 8010a0e:	a201      	add	r2, pc, #4	; (adr r2, 8010a14 <UART_SetConfig+0x1ac>)
 8010a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a14:	08010a2d 	.word	0x08010a2d
 8010a18:	08010a35 	.word	0x08010a35
 8010a1c:	08010a3d 	.word	0x08010a3d
 8010a20:	08010a45 	.word	0x08010a45
 8010a24:	08010a4d 	.word	0x08010a4d
 8010a28:	08010a55 	.word	0x08010a55
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a32:	e2f0      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010a34:	2304      	movs	r3, #4
 8010a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a3a:	e2ec      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010a3c:	2308      	movs	r3, #8
 8010a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a42:	e2e8      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010a44:	2310      	movs	r3, #16
 8010a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a4a:	e2e4      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010a4c:	2320      	movs	r3, #32
 8010a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a52:	e2e0      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010a54:	2340      	movs	r3, #64	; 0x40
 8010a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a5a:	e2dc      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010a5c:	2380      	movs	r3, #128	; 0x80
 8010a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a62:	e2d8      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010a64:	697b      	ldr	r3, [r7, #20]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	4a4f      	ldr	r2, [pc, #316]	; (8010ba8 <UART_SetConfig+0x340>)
 8010a6a:	4293      	cmp	r3, r2
 8010a6c:	d130      	bne.n	8010ad0 <UART_SetConfig+0x268>
 8010a6e:	4b4c      	ldr	r3, [pc, #304]	; (8010ba0 <UART_SetConfig+0x338>)
 8010a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a72:	f003 0307 	and.w	r3, r3, #7
 8010a76:	2b05      	cmp	r3, #5
 8010a78:	d826      	bhi.n	8010ac8 <UART_SetConfig+0x260>
 8010a7a:	a201      	add	r2, pc, #4	; (adr r2, 8010a80 <UART_SetConfig+0x218>)
 8010a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a80:	08010a99 	.word	0x08010a99
 8010a84:	08010aa1 	.word	0x08010aa1
 8010a88:	08010aa9 	.word	0x08010aa9
 8010a8c:	08010ab1 	.word	0x08010ab1
 8010a90:	08010ab9 	.word	0x08010ab9
 8010a94:	08010ac1 	.word	0x08010ac1
 8010a98:	2300      	movs	r3, #0
 8010a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a9e:	e2ba      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010aa0:	2304      	movs	r3, #4
 8010aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010aa6:	e2b6      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010aa8:	2308      	movs	r3, #8
 8010aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010aae:	e2b2      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010ab0:	2310      	movs	r3, #16
 8010ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ab6:	e2ae      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010ab8:	2320      	movs	r3, #32
 8010aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010abe:	e2aa      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010ac0:	2340      	movs	r3, #64	; 0x40
 8010ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ac6:	e2a6      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010ac8:	2380      	movs	r3, #128	; 0x80
 8010aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ace:	e2a2      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010ad0:	697b      	ldr	r3, [r7, #20]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	4a35      	ldr	r2, [pc, #212]	; (8010bac <UART_SetConfig+0x344>)
 8010ad6:	4293      	cmp	r3, r2
 8010ad8:	d130      	bne.n	8010b3c <UART_SetConfig+0x2d4>
 8010ada:	4b31      	ldr	r3, [pc, #196]	; (8010ba0 <UART_SetConfig+0x338>)
 8010adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ade:	f003 0307 	and.w	r3, r3, #7
 8010ae2:	2b05      	cmp	r3, #5
 8010ae4:	d826      	bhi.n	8010b34 <UART_SetConfig+0x2cc>
 8010ae6:	a201      	add	r2, pc, #4	; (adr r2, 8010aec <UART_SetConfig+0x284>)
 8010ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010aec:	08010b05 	.word	0x08010b05
 8010af0:	08010b0d 	.word	0x08010b0d
 8010af4:	08010b15 	.word	0x08010b15
 8010af8:	08010b1d 	.word	0x08010b1d
 8010afc:	08010b25 	.word	0x08010b25
 8010b00:	08010b2d 	.word	0x08010b2d
 8010b04:	2300      	movs	r3, #0
 8010b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b0a:	e284      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010b0c:	2304      	movs	r3, #4
 8010b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b12:	e280      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010b14:	2308      	movs	r3, #8
 8010b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b1a:	e27c      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010b1c:	2310      	movs	r3, #16
 8010b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b22:	e278      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010b24:	2320      	movs	r3, #32
 8010b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b2a:	e274      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010b2c:	2340      	movs	r3, #64	; 0x40
 8010b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b32:	e270      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010b34:	2380      	movs	r3, #128	; 0x80
 8010b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b3a:	e26c      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010b3c:	697b      	ldr	r3, [r7, #20]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	4a1b      	ldr	r2, [pc, #108]	; (8010bb0 <UART_SetConfig+0x348>)
 8010b42:	4293      	cmp	r3, r2
 8010b44:	d142      	bne.n	8010bcc <UART_SetConfig+0x364>
 8010b46:	4b16      	ldr	r3, [pc, #88]	; (8010ba0 <UART_SetConfig+0x338>)
 8010b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b4a:	f003 0307 	and.w	r3, r3, #7
 8010b4e:	2b05      	cmp	r3, #5
 8010b50:	d838      	bhi.n	8010bc4 <UART_SetConfig+0x35c>
 8010b52:	a201      	add	r2, pc, #4	; (adr r2, 8010b58 <UART_SetConfig+0x2f0>)
 8010b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b58:	08010b71 	.word	0x08010b71
 8010b5c:	08010b79 	.word	0x08010b79
 8010b60:	08010b81 	.word	0x08010b81
 8010b64:	08010b89 	.word	0x08010b89
 8010b68:	08010bb5 	.word	0x08010bb5
 8010b6c:	08010bbd 	.word	0x08010bbd
 8010b70:	2300      	movs	r3, #0
 8010b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b76:	e24e      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010b78:	2304      	movs	r3, #4
 8010b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b7e:	e24a      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010b80:	2308      	movs	r3, #8
 8010b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b86:	e246      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010b88:	2310      	movs	r3, #16
 8010b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b8e:	e242      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010b90:	cfff69f3 	.word	0xcfff69f3
 8010b94:	58000c00 	.word	0x58000c00
 8010b98:	11fff4ff 	.word	0x11fff4ff
 8010b9c:	40011000 	.word	0x40011000
 8010ba0:	58024400 	.word	0x58024400
 8010ba4:	40004400 	.word	0x40004400
 8010ba8:	40004800 	.word	0x40004800
 8010bac:	40004c00 	.word	0x40004c00
 8010bb0:	40005000 	.word	0x40005000
 8010bb4:	2320      	movs	r3, #32
 8010bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bba:	e22c      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010bbc:	2340      	movs	r3, #64	; 0x40
 8010bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bc2:	e228      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010bc4:	2380      	movs	r3, #128	; 0x80
 8010bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bca:	e224      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010bcc:	697b      	ldr	r3, [r7, #20]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	4ab1      	ldr	r2, [pc, #708]	; (8010e98 <UART_SetConfig+0x630>)
 8010bd2:	4293      	cmp	r3, r2
 8010bd4:	d176      	bne.n	8010cc4 <UART_SetConfig+0x45c>
 8010bd6:	4bb1      	ldr	r3, [pc, #708]	; (8010e9c <UART_SetConfig+0x634>)
 8010bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010bde:	2b28      	cmp	r3, #40	; 0x28
 8010be0:	d86c      	bhi.n	8010cbc <UART_SetConfig+0x454>
 8010be2:	a201      	add	r2, pc, #4	; (adr r2, 8010be8 <UART_SetConfig+0x380>)
 8010be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010be8:	08010c8d 	.word	0x08010c8d
 8010bec:	08010cbd 	.word	0x08010cbd
 8010bf0:	08010cbd 	.word	0x08010cbd
 8010bf4:	08010cbd 	.word	0x08010cbd
 8010bf8:	08010cbd 	.word	0x08010cbd
 8010bfc:	08010cbd 	.word	0x08010cbd
 8010c00:	08010cbd 	.word	0x08010cbd
 8010c04:	08010cbd 	.word	0x08010cbd
 8010c08:	08010c95 	.word	0x08010c95
 8010c0c:	08010cbd 	.word	0x08010cbd
 8010c10:	08010cbd 	.word	0x08010cbd
 8010c14:	08010cbd 	.word	0x08010cbd
 8010c18:	08010cbd 	.word	0x08010cbd
 8010c1c:	08010cbd 	.word	0x08010cbd
 8010c20:	08010cbd 	.word	0x08010cbd
 8010c24:	08010cbd 	.word	0x08010cbd
 8010c28:	08010c9d 	.word	0x08010c9d
 8010c2c:	08010cbd 	.word	0x08010cbd
 8010c30:	08010cbd 	.word	0x08010cbd
 8010c34:	08010cbd 	.word	0x08010cbd
 8010c38:	08010cbd 	.word	0x08010cbd
 8010c3c:	08010cbd 	.word	0x08010cbd
 8010c40:	08010cbd 	.word	0x08010cbd
 8010c44:	08010cbd 	.word	0x08010cbd
 8010c48:	08010ca5 	.word	0x08010ca5
 8010c4c:	08010cbd 	.word	0x08010cbd
 8010c50:	08010cbd 	.word	0x08010cbd
 8010c54:	08010cbd 	.word	0x08010cbd
 8010c58:	08010cbd 	.word	0x08010cbd
 8010c5c:	08010cbd 	.word	0x08010cbd
 8010c60:	08010cbd 	.word	0x08010cbd
 8010c64:	08010cbd 	.word	0x08010cbd
 8010c68:	08010cad 	.word	0x08010cad
 8010c6c:	08010cbd 	.word	0x08010cbd
 8010c70:	08010cbd 	.word	0x08010cbd
 8010c74:	08010cbd 	.word	0x08010cbd
 8010c78:	08010cbd 	.word	0x08010cbd
 8010c7c:	08010cbd 	.word	0x08010cbd
 8010c80:	08010cbd 	.word	0x08010cbd
 8010c84:	08010cbd 	.word	0x08010cbd
 8010c88:	08010cb5 	.word	0x08010cb5
 8010c8c:	2301      	movs	r3, #1
 8010c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c92:	e1c0      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010c94:	2304      	movs	r3, #4
 8010c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c9a:	e1bc      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010c9c:	2308      	movs	r3, #8
 8010c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ca2:	e1b8      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010ca4:	2310      	movs	r3, #16
 8010ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010caa:	e1b4      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010cac:	2320      	movs	r3, #32
 8010cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cb2:	e1b0      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010cb4:	2340      	movs	r3, #64	; 0x40
 8010cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cba:	e1ac      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010cbc:	2380      	movs	r3, #128	; 0x80
 8010cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cc2:	e1a8      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010cc4:	697b      	ldr	r3, [r7, #20]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	4a75      	ldr	r2, [pc, #468]	; (8010ea0 <UART_SetConfig+0x638>)
 8010cca:	4293      	cmp	r3, r2
 8010ccc:	d130      	bne.n	8010d30 <UART_SetConfig+0x4c8>
 8010cce:	4b73      	ldr	r3, [pc, #460]	; (8010e9c <UART_SetConfig+0x634>)
 8010cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010cd2:	f003 0307 	and.w	r3, r3, #7
 8010cd6:	2b05      	cmp	r3, #5
 8010cd8:	d826      	bhi.n	8010d28 <UART_SetConfig+0x4c0>
 8010cda:	a201      	add	r2, pc, #4	; (adr r2, 8010ce0 <UART_SetConfig+0x478>)
 8010cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ce0:	08010cf9 	.word	0x08010cf9
 8010ce4:	08010d01 	.word	0x08010d01
 8010ce8:	08010d09 	.word	0x08010d09
 8010cec:	08010d11 	.word	0x08010d11
 8010cf0:	08010d19 	.word	0x08010d19
 8010cf4:	08010d21 	.word	0x08010d21
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cfe:	e18a      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010d00:	2304      	movs	r3, #4
 8010d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d06:	e186      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010d08:	2308      	movs	r3, #8
 8010d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d0e:	e182      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010d10:	2310      	movs	r3, #16
 8010d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d16:	e17e      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010d18:	2320      	movs	r3, #32
 8010d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d1e:	e17a      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010d20:	2340      	movs	r3, #64	; 0x40
 8010d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d26:	e176      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010d28:	2380      	movs	r3, #128	; 0x80
 8010d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d2e:	e172      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010d30:	697b      	ldr	r3, [r7, #20]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	4a5b      	ldr	r2, [pc, #364]	; (8010ea4 <UART_SetConfig+0x63c>)
 8010d36:	4293      	cmp	r3, r2
 8010d38:	d130      	bne.n	8010d9c <UART_SetConfig+0x534>
 8010d3a:	4b58      	ldr	r3, [pc, #352]	; (8010e9c <UART_SetConfig+0x634>)
 8010d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d3e:	f003 0307 	and.w	r3, r3, #7
 8010d42:	2b05      	cmp	r3, #5
 8010d44:	d826      	bhi.n	8010d94 <UART_SetConfig+0x52c>
 8010d46:	a201      	add	r2, pc, #4	; (adr r2, 8010d4c <UART_SetConfig+0x4e4>)
 8010d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d4c:	08010d65 	.word	0x08010d65
 8010d50:	08010d6d 	.word	0x08010d6d
 8010d54:	08010d75 	.word	0x08010d75
 8010d58:	08010d7d 	.word	0x08010d7d
 8010d5c:	08010d85 	.word	0x08010d85
 8010d60:	08010d8d 	.word	0x08010d8d
 8010d64:	2300      	movs	r3, #0
 8010d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d6a:	e154      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010d6c:	2304      	movs	r3, #4
 8010d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d72:	e150      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010d74:	2308      	movs	r3, #8
 8010d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d7a:	e14c      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010d7c:	2310      	movs	r3, #16
 8010d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d82:	e148      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010d84:	2320      	movs	r3, #32
 8010d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d8a:	e144      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010d8c:	2340      	movs	r3, #64	; 0x40
 8010d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d92:	e140      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010d94:	2380      	movs	r3, #128	; 0x80
 8010d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d9a:	e13c      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010d9c:	697b      	ldr	r3, [r7, #20]
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	4a41      	ldr	r2, [pc, #260]	; (8010ea8 <UART_SetConfig+0x640>)
 8010da2:	4293      	cmp	r3, r2
 8010da4:	f040 8082 	bne.w	8010eac <UART_SetConfig+0x644>
 8010da8:	4b3c      	ldr	r3, [pc, #240]	; (8010e9c <UART_SetConfig+0x634>)
 8010daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010dac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010db0:	2b28      	cmp	r3, #40	; 0x28
 8010db2:	d86d      	bhi.n	8010e90 <UART_SetConfig+0x628>
 8010db4:	a201      	add	r2, pc, #4	; (adr r2, 8010dbc <UART_SetConfig+0x554>)
 8010db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dba:	bf00      	nop
 8010dbc:	08010e61 	.word	0x08010e61
 8010dc0:	08010e91 	.word	0x08010e91
 8010dc4:	08010e91 	.word	0x08010e91
 8010dc8:	08010e91 	.word	0x08010e91
 8010dcc:	08010e91 	.word	0x08010e91
 8010dd0:	08010e91 	.word	0x08010e91
 8010dd4:	08010e91 	.word	0x08010e91
 8010dd8:	08010e91 	.word	0x08010e91
 8010ddc:	08010e69 	.word	0x08010e69
 8010de0:	08010e91 	.word	0x08010e91
 8010de4:	08010e91 	.word	0x08010e91
 8010de8:	08010e91 	.word	0x08010e91
 8010dec:	08010e91 	.word	0x08010e91
 8010df0:	08010e91 	.word	0x08010e91
 8010df4:	08010e91 	.word	0x08010e91
 8010df8:	08010e91 	.word	0x08010e91
 8010dfc:	08010e71 	.word	0x08010e71
 8010e00:	08010e91 	.word	0x08010e91
 8010e04:	08010e91 	.word	0x08010e91
 8010e08:	08010e91 	.word	0x08010e91
 8010e0c:	08010e91 	.word	0x08010e91
 8010e10:	08010e91 	.word	0x08010e91
 8010e14:	08010e91 	.word	0x08010e91
 8010e18:	08010e91 	.word	0x08010e91
 8010e1c:	08010e79 	.word	0x08010e79
 8010e20:	08010e91 	.word	0x08010e91
 8010e24:	08010e91 	.word	0x08010e91
 8010e28:	08010e91 	.word	0x08010e91
 8010e2c:	08010e91 	.word	0x08010e91
 8010e30:	08010e91 	.word	0x08010e91
 8010e34:	08010e91 	.word	0x08010e91
 8010e38:	08010e91 	.word	0x08010e91
 8010e3c:	08010e81 	.word	0x08010e81
 8010e40:	08010e91 	.word	0x08010e91
 8010e44:	08010e91 	.word	0x08010e91
 8010e48:	08010e91 	.word	0x08010e91
 8010e4c:	08010e91 	.word	0x08010e91
 8010e50:	08010e91 	.word	0x08010e91
 8010e54:	08010e91 	.word	0x08010e91
 8010e58:	08010e91 	.word	0x08010e91
 8010e5c:	08010e89 	.word	0x08010e89
 8010e60:	2301      	movs	r3, #1
 8010e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e66:	e0d6      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010e68:	2304      	movs	r3, #4
 8010e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e6e:	e0d2      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010e70:	2308      	movs	r3, #8
 8010e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e76:	e0ce      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010e78:	2310      	movs	r3, #16
 8010e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e7e:	e0ca      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010e80:	2320      	movs	r3, #32
 8010e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e86:	e0c6      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010e88:	2340      	movs	r3, #64	; 0x40
 8010e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e8e:	e0c2      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010e90:	2380      	movs	r3, #128	; 0x80
 8010e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e96:	e0be      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010e98:	40011400 	.word	0x40011400
 8010e9c:	58024400 	.word	0x58024400
 8010ea0:	40007800 	.word	0x40007800
 8010ea4:	40007c00 	.word	0x40007c00
 8010ea8:	40011800 	.word	0x40011800
 8010eac:	697b      	ldr	r3, [r7, #20]
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	4aad      	ldr	r2, [pc, #692]	; (8011168 <UART_SetConfig+0x900>)
 8010eb2:	4293      	cmp	r3, r2
 8010eb4:	d176      	bne.n	8010fa4 <UART_SetConfig+0x73c>
 8010eb6:	4bad      	ldr	r3, [pc, #692]	; (801116c <UART_SetConfig+0x904>)
 8010eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010eba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010ebe:	2b28      	cmp	r3, #40	; 0x28
 8010ec0:	d86c      	bhi.n	8010f9c <UART_SetConfig+0x734>
 8010ec2:	a201      	add	r2, pc, #4	; (adr r2, 8010ec8 <UART_SetConfig+0x660>)
 8010ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ec8:	08010f6d 	.word	0x08010f6d
 8010ecc:	08010f9d 	.word	0x08010f9d
 8010ed0:	08010f9d 	.word	0x08010f9d
 8010ed4:	08010f9d 	.word	0x08010f9d
 8010ed8:	08010f9d 	.word	0x08010f9d
 8010edc:	08010f9d 	.word	0x08010f9d
 8010ee0:	08010f9d 	.word	0x08010f9d
 8010ee4:	08010f9d 	.word	0x08010f9d
 8010ee8:	08010f75 	.word	0x08010f75
 8010eec:	08010f9d 	.word	0x08010f9d
 8010ef0:	08010f9d 	.word	0x08010f9d
 8010ef4:	08010f9d 	.word	0x08010f9d
 8010ef8:	08010f9d 	.word	0x08010f9d
 8010efc:	08010f9d 	.word	0x08010f9d
 8010f00:	08010f9d 	.word	0x08010f9d
 8010f04:	08010f9d 	.word	0x08010f9d
 8010f08:	08010f7d 	.word	0x08010f7d
 8010f0c:	08010f9d 	.word	0x08010f9d
 8010f10:	08010f9d 	.word	0x08010f9d
 8010f14:	08010f9d 	.word	0x08010f9d
 8010f18:	08010f9d 	.word	0x08010f9d
 8010f1c:	08010f9d 	.word	0x08010f9d
 8010f20:	08010f9d 	.word	0x08010f9d
 8010f24:	08010f9d 	.word	0x08010f9d
 8010f28:	08010f85 	.word	0x08010f85
 8010f2c:	08010f9d 	.word	0x08010f9d
 8010f30:	08010f9d 	.word	0x08010f9d
 8010f34:	08010f9d 	.word	0x08010f9d
 8010f38:	08010f9d 	.word	0x08010f9d
 8010f3c:	08010f9d 	.word	0x08010f9d
 8010f40:	08010f9d 	.word	0x08010f9d
 8010f44:	08010f9d 	.word	0x08010f9d
 8010f48:	08010f8d 	.word	0x08010f8d
 8010f4c:	08010f9d 	.word	0x08010f9d
 8010f50:	08010f9d 	.word	0x08010f9d
 8010f54:	08010f9d 	.word	0x08010f9d
 8010f58:	08010f9d 	.word	0x08010f9d
 8010f5c:	08010f9d 	.word	0x08010f9d
 8010f60:	08010f9d 	.word	0x08010f9d
 8010f64:	08010f9d 	.word	0x08010f9d
 8010f68:	08010f95 	.word	0x08010f95
 8010f6c:	2301      	movs	r3, #1
 8010f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f72:	e050      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010f74:	2304      	movs	r3, #4
 8010f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f7a:	e04c      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010f7c:	2308      	movs	r3, #8
 8010f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f82:	e048      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010f84:	2310      	movs	r3, #16
 8010f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f8a:	e044      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010f8c:	2320      	movs	r3, #32
 8010f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f92:	e040      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010f94:	2340      	movs	r3, #64	; 0x40
 8010f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f9a:	e03c      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010f9c:	2380      	movs	r3, #128	; 0x80
 8010f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fa2:	e038      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010fa4:	697b      	ldr	r3, [r7, #20]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	4a71      	ldr	r2, [pc, #452]	; (8011170 <UART_SetConfig+0x908>)
 8010faa:	4293      	cmp	r3, r2
 8010fac:	d130      	bne.n	8011010 <UART_SetConfig+0x7a8>
 8010fae:	4b6f      	ldr	r3, [pc, #444]	; (801116c <UART_SetConfig+0x904>)
 8010fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010fb2:	f003 0307 	and.w	r3, r3, #7
 8010fb6:	2b05      	cmp	r3, #5
 8010fb8:	d826      	bhi.n	8011008 <UART_SetConfig+0x7a0>
 8010fba:	a201      	add	r2, pc, #4	; (adr r2, 8010fc0 <UART_SetConfig+0x758>)
 8010fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fc0:	08010fd9 	.word	0x08010fd9
 8010fc4:	08010fe1 	.word	0x08010fe1
 8010fc8:	08010fe9 	.word	0x08010fe9
 8010fcc:	08010ff1 	.word	0x08010ff1
 8010fd0:	08010ff9 	.word	0x08010ff9
 8010fd4:	08011001 	.word	0x08011001
 8010fd8:	2302      	movs	r3, #2
 8010fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fde:	e01a      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010fe0:	2304      	movs	r3, #4
 8010fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fe6:	e016      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010fe8:	2308      	movs	r3, #8
 8010fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fee:	e012      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010ff0:	2310      	movs	r3, #16
 8010ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ff6:	e00e      	b.n	8011016 <UART_SetConfig+0x7ae>
 8010ff8:	2320      	movs	r3, #32
 8010ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ffe:	e00a      	b.n	8011016 <UART_SetConfig+0x7ae>
 8011000:	2340      	movs	r3, #64	; 0x40
 8011002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011006:	e006      	b.n	8011016 <UART_SetConfig+0x7ae>
 8011008:	2380      	movs	r3, #128	; 0x80
 801100a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801100e:	e002      	b.n	8011016 <UART_SetConfig+0x7ae>
 8011010:	2380      	movs	r3, #128	; 0x80
 8011012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011016:	697b      	ldr	r3, [r7, #20]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	4a55      	ldr	r2, [pc, #340]	; (8011170 <UART_SetConfig+0x908>)
 801101c:	4293      	cmp	r3, r2
 801101e:	f040 80f8 	bne.w	8011212 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011022:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011026:	2b20      	cmp	r3, #32
 8011028:	dc46      	bgt.n	80110b8 <UART_SetConfig+0x850>
 801102a:	2b02      	cmp	r3, #2
 801102c:	db75      	blt.n	801111a <UART_SetConfig+0x8b2>
 801102e:	3b02      	subs	r3, #2
 8011030:	2b1e      	cmp	r3, #30
 8011032:	d872      	bhi.n	801111a <UART_SetConfig+0x8b2>
 8011034:	a201      	add	r2, pc, #4	; (adr r2, 801103c <UART_SetConfig+0x7d4>)
 8011036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801103a:	bf00      	nop
 801103c:	080110bf 	.word	0x080110bf
 8011040:	0801111b 	.word	0x0801111b
 8011044:	080110c7 	.word	0x080110c7
 8011048:	0801111b 	.word	0x0801111b
 801104c:	0801111b 	.word	0x0801111b
 8011050:	0801111b 	.word	0x0801111b
 8011054:	080110d7 	.word	0x080110d7
 8011058:	0801111b 	.word	0x0801111b
 801105c:	0801111b 	.word	0x0801111b
 8011060:	0801111b 	.word	0x0801111b
 8011064:	0801111b 	.word	0x0801111b
 8011068:	0801111b 	.word	0x0801111b
 801106c:	0801111b 	.word	0x0801111b
 8011070:	0801111b 	.word	0x0801111b
 8011074:	080110e7 	.word	0x080110e7
 8011078:	0801111b 	.word	0x0801111b
 801107c:	0801111b 	.word	0x0801111b
 8011080:	0801111b 	.word	0x0801111b
 8011084:	0801111b 	.word	0x0801111b
 8011088:	0801111b 	.word	0x0801111b
 801108c:	0801111b 	.word	0x0801111b
 8011090:	0801111b 	.word	0x0801111b
 8011094:	0801111b 	.word	0x0801111b
 8011098:	0801111b 	.word	0x0801111b
 801109c:	0801111b 	.word	0x0801111b
 80110a0:	0801111b 	.word	0x0801111b
 80110a4:	0801111b 	.word	0x0801111b
 80110a8:	0801111b 	.word	0x0801111b
 80110ac:	0801111b 	.word	0x0801111b
 80110b0:	0801111b 	.word	0x0801111b
 80110b4:	0801110d 	.word	0x0801110d
 80110b8:	2b40      	cmp	r3, #64	; 0x40
 80110ba:	d02a      	beq.n	8011112 <UART_SetConfig+0x8aa>
 80110bc:	e02d      	b.n	801111a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80110be:	f7fb f8c3 	bl	800c248 <HAL_RCCEx_GetD3PCLK1Freq>
 80110c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80110c4:	e02f      	b.n	8011126 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80110c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80110ca:	4618      	mov	r0, r3
 80110cc:	f7fb f8d2 	bl	800c274 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80110d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80110d4:	e027      	b.n	8011126 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80110d6:	f107 0318 	add.w	r3, r7, #24
 80110da:	4618      	mov	r0, r3
 80110dc:	f7fb fa1e 	bl	800c51c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80110e0:	69fb      	ldr	r3, [r7, #28]
 80110e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80110e4:	e01f      	b.n	8011126 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80110e6:	4b21      	ldr	r3, [pc, #132]	; (801116c <UART_SetConfig+0x904>)
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	f003 0320 	and.w	r3, r3, #32
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d009      	beq.n	8011106 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80110f2:	4b1e      	ldr	r3, [pc, #120]	; (801116c <UART_SetConfig+0x904>)
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	08db      	lsrs	r3, r3, #3
 80110f8:	f003 0303 	and.w	r3, r3, #3
 80110fc:	4a1d      	ldr	r2, [pc, #116]	; (8011174 <UART_SetConfig+0x90c>)
 80110fe:	fa22 f303 	lsr.w	r3, r2, r3
 8011102:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011104:	e00f      	b.n	8011126 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8011106:	4b1b      	ldr	r3, [pc, #108]	; (8011174 <UART_SetConfig+0x90c>)
 8011108:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801110a:	e00c      	b.n	8011126 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801110c:	4b1a      	ldr	r3, [pc, #104]	; (8011178 <UART_SetConfig+0x910>)
 801110e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011110:	e009      	b.n	8011126 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011116:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011118:	e005      	b.n	8011126 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801111a:	2300      	movs	r3, #0
 801111c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801111e:	2301      	movs	r3, #1
 8011120:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011124:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011128:	2b00      	cmp	r3, #0
 801112a:	f000 81ee 	beq.w	801150a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801112e:	697b      	ldr	r3, [r7, #20]
 8011130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011132:	4a12      	ldr	r2, [pc, #72]	; (801117c <UART_SetConfig+0x914>)
 8011134:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011138:	461a      	mov	r2, r3
 801113a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801113c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011140:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011142:	697b      	ldr	r3, [r7, #20]
 8011144:	685a      	ldr	r2, [r3, #4]
 8011146:	4613      	mov	r3, r2
 8011148:	005b      	lsls	r3, r3, #1
 801114a:	4413      	add	r3, r2
 801114c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801114e:	429a      	cmp	r2, r3
 8011150:	d305      	bcc.n	801115e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011152:	697b      	ldr	r3, [r7, #20]
 8011154:	685b      	ldr	r3, [r3, #4]
 8011156:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801115a:	429a      	cmp	r2, r3
 801115c:	d910      	bls.n	8011180 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 801115e:	2301      	movs	r3, #1
 8011160:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011164:	e1d1      	b.n	801150a <UART_SetConfig+0xca2>
 8011166:	bf00      	nop
 8011168:	40011c00 	.word	0x40011c00
 801116c:	58024400 	.word	0x58024400
 8011170:	58000c00 	.word	0x58000c00
 8011174:	03d09000 	.word	0x03d09000
 8011178:	003d0900 	.word	0x003d0900
 801117c:	080181d0 	.word	0x080181d0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011182:	2200      	movs	r2, #0
 8011184:	60bb      	str	r3, [r7, #8]
 8011186:	60fa      	str	r2, [r7, #12]
 8011188:	697b      	ldr	r3, [r7, #20]
 801118a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801118c:	4ac0      	ldr	r2, [pc, #768]	; (8011490 <UART_SetConfig+0xc28>)
 801118e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011192:	b29b      	uxth	r3, r3
 8011194:	2200      	movs	r2, #0
 8011196:	603b      	str	r3, [r7, #0]
 8011198:	607a      	str	r2, [r7, #4]
 801119a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801119e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80111a2:	f7ef f91d 	bl	80003e0 <__aeabi_uldivmod>
 80111a6:	4602      	mov	r2, r0
 80111a8:	460b      	mov	r3, r1
 80111aa:	4610      	mov	r0, r2
 80111ac:	4619      	mov	r1, r3
 80111ae:	f04f 0200 	mov.w	r2, #0
 80111b2:	f04f 0300 	mov.w	r3, #0
 80111b6:	020b      	lsls	r3, r1, #8
 80111b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80111bc:	0202      	lsls	r2, r0, #8
 80111be:	6979      	ldr	r1, [r7, #20]
 80111c0:	6849      	ldr	r1, [r1, #4]
 80111c2:	0849      	lsrs	r1, r1, #1
 80111c4:	2000      	movs	r0, #0
 80111c6:	460c      	mov	r4, r1
 80111c8:	4605      	mov	r5, r0
 80111ca:	eb12 0804 	adds.w	r8, r2, r4
 80111ce:	eb43 0905 	adc.w	r9, r3, r5
 80111d2:	697b      	ldr	r3, [r7, #20]
 80111d4:	685b      	ldr	r3, [r3, #4]
 80111d6:	2200      	movs	r2, #0
 80111d8:	469a      	mov	sl, r3
 80111da:	4693      	mov	fp, r2
 80111dc:	4652      	mov	r2, sl
 80111de:	465b      	mov	r3, fp
 80111e0:	4640      	mov	r0, r8
 80111e2:	4649      	mov	r1, r9
 80111e4:	f7ef f8fc 	bl	80003e0 <__aeabi_uldivmod>
 80111e8:	4602      	mov	r2, r0
 80111ea:	460b      	mov	r3, r1
 80111ec:	4613      	mov	r3, r2
 80111ee:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80111f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80111f6:	d308      	bcc.n	801120a <UART_SetConfig+0x9a2>
 80111f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80111fe:	d204      	bcs.n	801120a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8011200:	697b      	ldr	r3, [r7, #20]
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011206:	60da      	str	r2, [r3, #12]
 8011208:	e17f      	b.n	801150a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 801120a:	2301      	movs	r3, #1
 801120c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011210:	e17b      	b.n	801150a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011212:	697b      	ldr	r3, [r7, #20]
 8011214:	69db      	ldr	r3, [r3, #28]
 8011216:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801121a:	f040 80bd 	bne.w	8011398 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 801121e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011222:	2b20      	cmp	r3, #32
 8011224:	dc48      	bgt.n	80112b8 <UART_SetConfig+0xa50>
 8011226:	2b00      	cmp	r3, #0
 8011228:	db7b      	blt.n	8011322 <UART_SetConfig+0xaba>
 801122a:	2b20      	cmp	r3, #32
 801122c:	d879      	bhi.n	8011322 <UART_SetConfig+0xaba>
 801122e:	a201      	add	r2, pc, #4	; (adr r2, 8011234 <UART_SetConfig+0x9cc>)
 8011230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011234:	080112bf 	.word	0x080112bf
 8011238:	080112c7 	.word	0x080112c7
 801123c:	08011323 	.word	0x08011323
 8011240:	08011323 	.word	0x08011323
 8011244:	080112cf 	.word	0x080112cf
 8011248:	08011323 	.word	0x08011323
 801124c:	08011323 	.word	0x08011323
 8011250:	08011323 	.word	0x08011323
 8011254:	080112df 	.word	0x080112df
 8011258:	08011323 	.word	0x08011323
 801125c:	08011323 	.word	0x08011323
 8011260:	08011323 	.word	0x08011323
 8011264:	08011323 	.word	0x08011323
 8011268:	08011323 	.word	0x08011323
 801126c:	08011323 	.word	0x08011323
 8011270:	08011323 	.word	0x08011323
 8011274:	080112ef 	.word	0x080112ef
 8011278:	08011323 	.word	0x08011323
 801127c:	08011323 	.word	0x08011323
 8011280:	08011323 	.word	0x08011323
 8011284:	08011323 	.word	0x08011323
 8011288:	08011323 	.word	0x08011323
 801128c:	08011323 	.word	0x08011323
 8011290:	08011323 	.word	0x08011323
 8011294:	08011323 	.word	0x08011323
 8011298:	08011323 	.word	0x08011323
 801129c:	08011323 	.word	0x08011323
 80112a0:	08011323 	.word	0x08011323
 80112a4:	08011323 	.word	0x08011323
 80112a8:	08011323 	.word	0x08011323
 80112ac:	08011323 	.word	0x08011323
 80112b0:	08011323 	.word	0x08011323
 80112b4:	08011315 	.word	0x08011315
 80112b8:	2b40      	cmp	r3, #64	; 0x40
 80112ba:	d02e      	beq.n	801131a <UART_SetConfig+0xab2>
 80112bc:	e031      	b.n	8011322 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80112be:	f7f9 f925 	bl	800a50c <HAL_RCC_GetPCLK1Freq>
 80112c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80112c4:	e033      	b.n	801132e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80112c6:	f7f9 f937 	bl	800a538 <HAL_RCC_GetPCLK2Freq>
 80112ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80112cc:	e02f      	b.n	801132e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80112ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80112d2:	4618      	mov	r0, r3
 80112d4:	f7fa ffce 	bl	800c274 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80112d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112dc:	e027      	b.n	801132e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80112de:	f107 0318 	add.w	r3, r7, #24
 80112e2:	4618      	mov	r0, r3
 80112e4:	f7fb f91a 	bl	800c51c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80112e8:	69fb      	ldr	r3, [r7, #28]
 80112ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112ec:	e01f      	b.n	801132e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80112ee:	4b69      	ldr	r3, [pc, #420]	; (8011494 <UART_SetConfig+0xc2c>)
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	f003 0320 	and.w	r3, r3, #32
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d009      	beq.n	801130e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80112fa:	4b66      	ldr	r3, [pc, #408]	; (8011494 <UART_SetConfig+0xc2c>)
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	08db      	lsrs	r3, r3, #3
 8011300:	f003 0303 	and.w	r3, r3, #3
 8011304:	4a64      	ldr	r2, [pc, #400]	; (8011498 <UART_SetConfig+0xc30>)
 8011306:	fa22 f303 	lsr.w	r3, r2, r3
 801130a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801130c:	e00f      	b.n	801132e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 801130e:	4b62      	ldr	r3, [pc, #392]	; (8011498 <UART_SetConfig+0xc30>)
 8011310:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011312:	e00c      	b.n	801132e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011314:	4b61      	ldr	r3, [pc, #388]	; (801149c <UART_SetConfig+0xc34>)
 8011316:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011318:	e009      	b.n	801132e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801131a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801131e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011320:	e005      	b.n	801132e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8011322:	2300      	movs	r3, #0
 8011324:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011326:	2301      	movs	r3, #1
 8011328:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801132c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801132e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011330:	2b00      	cmp	r3, #0
 8011332:	f000 80ea 	beq.w	801150a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011336:	697b      	ldr	r3, [r7, #20]
 8011338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801133a:	4a55      	ldr	r2, [pc, #340]	; (8011490 <UART_SetConfig+0xc28>)
 801133c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011340:	461a      	mov	r2, r3
 8011342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011344:	fbb3 f3f2 	udiv	r3, r3, r2
 8011348:	005a      	lsls	r2, r3, #1
 801134a:	697b      	ldr	r3, [r7, #20]
 801134c:	685b      	ldr	r3, [r3, #4]
 801134e:	085b      	lsrs	r3, r3, #1
 8011350:	441a      	add	r2, r3
 8011352:	697b      	ldr	r3, [r7, #20]
 8011354:	685b      	ldr	r3, [r3, #4]
 8011356:	fbb2 f3f3 	udiv	r3, r2, r3
 801135a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801135c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801135e:	2b0f      	cmp	r3, #15
 8011360:	d916      	bls.n	8011390 <UART_SetConfig+0xb28>
 8011362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011368:	d212      	bcs.n	8011390 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801136a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801136c:	b29b      	uxth	r3, r3
 801136e:	f023 030f 	bic.w	r3, r3, #15
 8011372:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011376:	085b      	lsrs	r3, r3, #1
 8011378:	b29b      	uxth	r3, r3
 801137a:	f003 0307 	and.w	r3, r3, #7
 801137e:	b29a      	uxth	r2, r3
 8011380:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011382:	4313      	orrs	r3, r2
 8011384:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011386:	697b      	ldr	r3, [r7, #20]
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801138c:	60da      	str	r2, [r3, #12]
 801138e:	e0bc      	b.n	801150a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011390:	2301      	movs	r3, #1
 8011392:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011396:	e0b8      	b.n	801150a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011398:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801139c:	2b20      	cmp	r3, #32
 801139e:	dc4b      	bgt.n	8011438 <UART_SetConfig+0xbd0>
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	f2c0 8087 	blt.w	80114b4 <UART_SetConfig+0xc4c>
 80113a6:	2b20      	cmp	r3, #32
 80113a8:	f200 8084 	bhi.w	80114b4 <UART_SetConfig+0xc4c>
 80113ac:	a201      	add	r2, pc, #4	; (adr r2, 80113b4 <UART_SetConfig+0xb4c>)
 80113ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113b2:	bf00      	nop
 80113b4:	0801143f 	.word	0x0801143f
 80113b8:	08011447 	.word	0x08011447
 80113bc:	080114b5 	.word	0x080114b5
 80113c0:	080114b5 	.word	0x080114b5
 80113c4:	0801144f 	.word	0x0801144f
 80113c8:	080114b5 	.word	0x080114b5
 80113cc:	080114b5 	.word	0x080114b5
 80113d0:	080114b5 	.word	0x080114b5
 80113d4:	0801145f 	.word	0x0801145f
 80113d8:	080114b5 	.word	0x080114b5
 80113dc:	080114b5 	.word	0x080114b5
 80113e0:	080114b5 	.word	0x080114b5
 80113e4:	080114b5 	.word	0x080114b5
 80113e8:	080114b5 	.word	0x080114b5
 80113ec:	080114b5 	.word	0x080114b5
 80113f0:	080114b5 	.word	0x080114b5
 80113f4:	0801146f 	.word	0x0801146f
 80113f8:	080114b5 	.word	0x080114b5
 80113fc:	080114b5 	.word	0x080114b5
 8011400:	080114b5 	.word	0x080114b5
 8011404:	080114b5 	.word	0x080114b5
 8011408:	080114b5 	.word	0x080114b5
 801140c:	080114b5 	.word	0x080114b5
 8011410:	080114b5 	.word	0x080114b5
 8011414:	080114b5 	.word	0x080114b5
 8011418:	080114b5 	.word	0x080114b5
 801141c:	080114b5 	.word	0x080114b5
 8011420:	080114b5 	.word	0x080114b5
 8011424:	080114b5 	.word	0x080114b5
 8011428:	080114b5 	.word	0x080114b5
 801142c:	080114b5 	.word	0x080114b5
 8011430:	080114b5 	.word	0x080114b5
 8011434:	080114a7 	.word	0x080114a7
 8011438:	2b40      	cmp	r3, #64	; 0x40
 801143a:	d037      	beq.n	80114ac <UART_SetConfig+0xc44>
 801143c:	e03a      	b.n	80114b4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801143e:	f7f9 f865 	bl	800a50c <HAL_RCC_GetPCLK1Freq>
 8011442:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011444:	e03c      	b.n	80114c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011446:	f7f9 f877 	bl	800a538 <HAL_RCC_GetPCLK2Freq>
 801144a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801144c:	e038      	b.n	80114c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801144e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011452:	4618      	mov	r0, r3
 8011454:	f7fa ff0e 	bl	800c274 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801145a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801145c:	e030      	b.n	80114c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801145e:	f107 0318 	add.w	r3, r7, #24
 8011462:	4618      	mov	r0, r3
 8011464:	f7fb f85a 	bl	800c51c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011468:	69fb      	ldr	r3, [r7, #28]
 801146a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801146c:	e028      	b.n	80114c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801146e:	4b09      	ldr	r3, [pc, #36]	; (8011494 <UART_SetConfig+0xc2c>)
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	f003 0320 	and.w	r3, r3, #32
 8011476:	2b00      	cmp	r3, #0
 8011478:	d012      	beq.n	80114a0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801147a:	4b06      	ldr	r3, [pc, #24]	; (8011494 <UART_SetConfig+0xc2c>)
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	08db      	lsrs	r3, r3, #3
 8011480:	f003 0303 	and.w	r3, r3, #3
 8011484:	4a04      	ldr	r2, [pc, #16]	; (8011498 <UART_SetConfig+0xc30>)
 8011486:	fa22 f303 	lsr.w	r3, r2, r3
 801148a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801148c:	e018      	b.n	80114c0 <UART_SetConfig+0xc58>
 801148e:	bf00      	nop
 8011490:	080181d0 	.word	0x080181d0
 8011494:	58024400 	.word	0x58024400
 8011498:	03d09000 	.word	0x03d09000
 801149c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80114a0:	4b24      	ldr	r3, [pc, #144]	; (8011534 <UART_SetConfig+0xccc>)
 80114a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114a4:	e00c      	b.n	80114c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80114a6:	4b24      	ldr	r3, [pc, #144]	; (8011538 <UART_SetConfig+0xcd0>)
 80114a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114aa:	e009      	b.n	80114c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80114ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80114b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114b2:	e005      	b.n	80114c0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80114b4:	2300      	movs	r3, #0
 80114b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80114b8:	2301      	movs	r3, #1
 80114ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80114be:	bf00      	nop
    }

    if (pclk != 0U)
 80114c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d021      	beq.n	801150a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80114c6:	697b      	ldr	r3, [r7, #20]
 80114c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114ca:	4a1c      	ldr	r2, [pc, #112]	; (801153c <UART_SetConfig+0xcd4>)
 80114cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80114d0:	461a      	mov	r2, r3
 80114d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114d4:	fbb3 f2f2 	udiv	r2, r3, r2
 80114d8:	697b      	ldr	r3, [r7, #20]
 80114da:	685b      	ldr	r3, [r3, #4]
 80114dc:	085b      	lsrs	r3, r3, #1
 80114de:	441a      	add	r2, r3
 80114e0:	697b      	ldr	r3, [r7, #20]
 80114e2:	685b      	ldr	r3, [r3, #4]
 80114e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80114e8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80114ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114ec:	2b0f      	cmp	r3, #15
 80114ee:	d909      	bls.n	8011504 <UART_SetConfig+0xc9c>
 80114f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80114f6:	d205      	bcs.n	8011504 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80114f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114fa:	b29a      	uxth	r2, r3
 80114fc:	697b      	ldr	r3, [r7, #20]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	60da      	str	r2, [r3, #12]
 8011502:	e002      	b.n	801150a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011504:	2301      	movs	r3, #1
 8011506:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801150a:	697b      	ldr	r3, [r7, #20]
 801150c:	2201      	movs	r2, #1
 801150e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011512:	697b      	ldr	r3, [r7, #20]
 8011514:	2201      	movs	r2, #1
 8011516:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801151a:	697b      	ldr	r3, [r7, #20]
 801151c:	2200      	movs	r2, #0
 801151e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011520:	697b      	ldr	r3, [r7, #20]
 8011522:	2200      	movs	r2, #0
 8011524:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011526:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 801152a:	4618      	mov	r0, r3
 801152c:	3748      	adds	r7, #72	; 0x48
 801152e:	46bd      	mov	sp, r7
 8011530:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011534:	03d09000 	.word	0x03d09000
 8011538:	003d0900 	.word	0x003d0900
 801153c:	080181d0 	.word	0x080181d0

08011540 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011540:	b480      	push	{r7}
 8011542:	b083      	sub	sp, #12
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801154c:	f003 0301 	and.w	r3, r3, #1
 8011550:	2b00      	cmp	r3, #0
 8011552:	d00a      	beq.n	801156a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	685b      	ldr	r3, [r3, #4]
 801155a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	430a      	orrs	r2, r1
 8011568:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801156e:	f003 0302 	and.w	r3, r3, #2
 8011572:	2b00      	cmp	r3, #0
 8011574:	d00a      	beq.n	801158c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	685b      	ldr	r3, [r3, #4]
 801157c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	430a      	orrs	r2, r1
 801158a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011590:	f003 0304 	and.w	r3, r3, #4
 8011594:	2b00      	cmp	r3, #0
 8011596:	d00a      	beq.n	80115ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	685b      	ldr	r3, [r3, #4]
 801159e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	430a      	orrs	r2, r1
 80115ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115b2:	f003 0308 	and.w	r3, r3, #8
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d00a      	beq.n	80115d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	685b      	ldr	r3, [r3, #4]
 80115c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	430a      	orrs	r2, r1
 80115ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115d4:	f003 0310 	and.w	r3, r3, #16
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d00a      	beq.n	80115f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	689b      	ldr	r3, [r3, #8]
 80115e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	430a      	orrs	r2, r1
 80115f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115f6:	f003 0320 	and.w	r3, r3, #32
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d00a      	beq.n	8011614 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	689b      	ldr	r3, [r3, #8]
 8011604:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	430a      	orrs	r2, r1
 8011612:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801161c:	2b00      	cmp	r3, #0
 801161e:	d01a      	beq.n	8011656 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	685b      	ldr	r3, [r3, #4]
 8011626:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	430a      	orrs	r2, r1
 8011634:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801163a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801163e:	d10a      	bne.n	8011656 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	685b      	ldr	r3, [r3, #4]
 8011646:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	430a      	orrs	r2, r1
 8011654:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801165a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801165e:	2b00      	cmp	r3, #0
 8011660:	d00a      	beq.n	8011678 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	685b      	ldr	r3, [r3, #4]
 8011668:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	430a      	orrs	r2, r1
 8011676:	605a      	str	r2, [r3, #4]
  }
}
 8011678:	bf00      	nop
 801167a:	370c      	adds	r7, #12
 801167c:	46bd      	mov	sp, r7
 801167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011682:	4770      	bx	lr

08011684 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011684:	b580      	push	{r7, lr}
 8011686:	b098      	sub	sp, #96	; 0x60
 8011688:	af02      	add	r7, sp, #8
 801168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	2200      	movs	r2, #0
 8011690:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011694:	f7f2 f892 	bl	80037bc <HAL_GetTick>
 8011698:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	f003 0308 	and.w	r3, r3, #8
 80116a4:	2b08      	cmp	r3, #8
 80116a6:	d12f      	bne.n	8011708 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80116a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80116ac:	9300      	str	r3, [sp, #0]
 80116ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116b0:	2200      	movs	r2, #0
 80116b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80116b6:	6878      	ldr	r0, [r7, #4]
 80116b8:	f000 f88e 	bl	80117d8 <UART_WaitOnFlagUntilTimeout>
 80116bc:	4603      	mov	r3, r0
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d022      	beq.n	8011708 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116ca:	e853 3f00 	ldrex	r3, [r3]
 80116ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80116d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80116d6:	653b      	str	r3, [r7, #80]	; 0x50
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	461a      	mov	r2, r3
 80116de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116e0:	647b      	str	r3, [r7, #68]	; 0x44
 80116e2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80116e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80116e8:	e841 2300 	strex	r3, r2, [r1]
 80116ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80116ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d1e6      	bne.n	80116c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	2220      	movs	r2, #32
 80116f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	2200      	movs	r2, #0
 8011700:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011704:	2303      	movs	r3, #3
 8011706:	e063      	b.n	80117d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	f003 0304 	and.w	r3, r3, #4
 8011712:	2b04      	cmp	r3, #4
 8011714:	d149      	bne.n	80117aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011716:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801171a:	9300      	str	r3, [sp, #0]
 801171c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801171e:	2200      	movs	r2, #0
 8011720:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011724:	6878      	ldr	r0, [r7, #4]
 8011726:	f000 f857 	bl	80117d8 <UART_WaitOnFlagUntilTimeout>
 801172a:	4603      	mov	r3, r0
 801172c:	2b00      	cmp	r3, #0
 801172e:	d03c      	beq.n	80117aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011738:	e853 3f00 	ldrex	r3, [r3]
 801173c:	623b      	str	r3, [r7, #32]
   return(result);
 801173e:	6a3b      	ldr	r3, [r7, #32]
 8011740:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011744:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	461a      	mov	r2, r3
 801174c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801174e:	633b      	str	r3, [r7, #48]	; 0x30
 8011750:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011752:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011756:	e841 2300 	strex	r3, r2, [r1]
 801175a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801175c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801175e:	2b00      	cmp	r3, #0
 8011760:	d1e6      	bne.n	8011730 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	3308      	adds	r3, #8
 8011768:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801176a:	693b      	ldr	r3, [r7, #16]
 801176c:	e853 3f00 	ldrex	r3, [r3]
 8011770:	60fb      	str	r3, [r7, #12]
   return(result);
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	f023 0301 	bic.w	r3, r3, #1
 8011778:	64bb      	str	r3, [r7, #72]	; 0x48
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	3308      	adds	r3, #8
 8011780:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011782:	61fa      	str	r2, [r7, #28]
 8011784:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011786:	69b9      	ldr	r1, [r7, #24]
 8011788:	69fa      	ldr	r2, [r7, #28]
 801178a:	e841 2300 	strex	r3, r2, [r1]
 801178e:	617b      	str	r3, [r7, #20]
   return(result);
 8011790:	697b      	ldr	r3, [r7, #20]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d1e5      	bne.n	8011762 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	2220      	movs	r2, #32
 801179a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	2200      	movs	r2, #0
 80117a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80117a6:	2303      	movs	r3, #3
 80117a8:	e012      	b.n	80117d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	2220      	movs	r2, #32
 80117ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	2220      	movs	r2, #32
 80117b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	2200      	movs	r2, #0
 80117be:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	2200      	movs	r2, #0
 80117c4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	2200      	movs	r2, #0
 80117ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80117ce:	2300      	movs	r3, #0
}
 80117d0:	4618      	mov	r0, r3
 80117d2:	3758      	adds	r7, #88	; 0x58
 80117d4:	46bd      	mov	sp, r7
 80117d6:	bd80      	pop	{r7, pc}

080117d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b084      	sub	sp, #16
 80117dc:	af00      	add	r7, sp, #0
 80117de:	60f8      	str	r0, [r7, #12]
 80117e0:	60b9      	str	r1, [r7, #8]
 80117e2:	603b      	str	r3, [r7, #0]
 80117e4:	4613      	mov	r3, r2
 80117e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80117e8:	e049      	b.n	801187e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80117ea:	69bb      	ldr	r3, [r7, #24]
 80117ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117f0:	d045      	beq.n	801187e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80117f2:	f7f1 ffe3 	bl	80037bc <HAL_GetTick>
 80117f6:	4602      	mov	r2, r0
 80117f8:	683b      	ldr	r3, [r7, #0]
 80117fa:	1ad3      	subs	r3, r2, r3
 80117fc:	69ba      	ldr	r2, [r7, #24]
 80117fe:	429a      	cmp	r2, r3
 8011800:	d302      	bcc.n	8011808 <UART_WaitOnFlagUntilTimeout+0x30>
 8011802:	69bb      	ldr	r3, [r7, #24]
 8011804:	2b00      	cmp	r3, #0
 8011806:	d101      	bne.n	801180c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011808:	2303      	movs	r3, #3
 801180a:	e048      	b.n	801189e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	f003 0304 	and.w	r3, r3, #4
 8011816:	2b00      	cmp	r3, #0
 8011818:	d031      	beq.n	801187e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	69db      	ldr	r3, [r3, #28]
 8011820:	f003 0308 	and.w	r3, r3, #8
 8011824:	2b08      	cmp	r3, #8
 8011826:	d110      	bne.n	801184a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	2208      	movs	r2, #8
 801182e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8011830:	68f8      	ldr	r0, [r7, #12]
 8011832:	f000 f839 	bl	80118a8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	2208      	movs	r2, #8
 801183a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	2200      	movs	r2, #0
 8011842:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8011846:	2301      	movs	r3, #1
 8011848:	e029      	b.n	801189e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	69db      	ldr	r3, [r3, #28]
 8011850:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011854:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011858:	d111      	bne.n	801187e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011862:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011864:	68f8      	ldr	r0, [r7, #12]
 8011866:	f000 f81f 	bl	80118a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	2220      	movs	r2, #32
 801186e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	2200      	movs	r2, #0
 8011876:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 801187a:	2303      	movs	r3, #3
 801187c:	e00f      	b.n	801189e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	69da      	ldr	r2, [r3, #28]
 8011884:	68bb      	ldr	r3, [r7, #8]
 8011886:	4013      	ands	r3, r2
 8011888:	68ba      	ldr	r2, [r7, #8]
 801188a:	429a      	cmp	r2, r3
 801188c:	bf0c      	ite	eq
 801188e:	2301      	moveq	r3, #1
 8011890:	2300      	movne	r3, #0
 8011892:	b2db      	uxtb	r3, r3
 8011894:	461a      	mov	r2, r3
 8011896:	79fb      	ldrb	r3, [r7, #7]
 8011898:	429a      	cmp	r2, r3
 801189a:	d0a6      	beq.n	80117ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801189c:	2300      	movs	r3, #0
}
 801189e:	4618      	mov	r0, r3
 80118a0:	3710      	adds	r7, #16
 80118a2:	46bd      	mov	sp, r7
 80118a4:	bd80      	pop	{r7, pc}
	...

080118a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80118a8:	b480      	push	{r7}
 80118aa:	b095      	sub	sp, #84	; 0x54
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118b8:	e853 3f00 	ldrex	r3, [r3]
 80118bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80118be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80118c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	461a      	mov	r2, r3
 80118cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118ce:	643b      	str	r3, [r7, #64]	; 0x40
 80118d0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80118d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80118d6:	e841 2300 	strex	r3, r2, [r1]
 80118da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80118dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d1e6      	bne.n	80118b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	3308      	adds	r3, #8
 80118e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118ea:	6a3b      	ldr	r3, [r7, #32]
 80118ec:	e853 3f00 	ldrex	r3, [r3]
 80118f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80118f2:	69fa      	ldr	r2, [r7, #28]
 80118f4:	4b1e      	ldr	r3, [pc, #120]	; (8011970 <UART_EndRxTransfer+0xc8>)
 80118f6:	4013      	ands	r3, r2
 80118f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	3308      	adds	r3, #8
 8011900:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011902:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011904:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011906:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011908:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801190a:	e841 2300 	strex	r3, r2, [r1]
 801190e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011912:	2b00      	cmp	r3, #0
 8011914:	d1e5      	bne.n	80118e2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801191a:	2b01      	cmp	r3, #1
 801191c:	d118      	bne.n	8011950 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	e853 3f00 	ldrex	r3, [r3]
 801192a:	60bb      	str	r3, [r7, #8]
   return(result);
 801192c:	68bb      	ldr	r3, [r7, #8]
 801192e:	f023 0310 	bic.w	r3, r3, #16
 8011932:	647b      	str	r3, [r7, #68]	; 0x44
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	461a      	mov	r2, r3
 801193a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801193c:	61bb      	str	r3, [r7, #24]
 801193e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011940:	6979      	ldr	r1, [r7, #20]
 8011942:	69ba      	ldr	r2, [r7, #24]
 8011944:	e841 2300 	strex	r3, r2, [r1]
 8011948:	613b      	str	r3, [r7, #16]
   return(result);
 801194a:	693b      	ldr	r3, [r7, #16]
 801194c:	2b00      	cmp	r3, #0
 801194e:	d1e6      	bne.n	801191e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	2220      	movs	r2, #32
 8011954:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	2200      	movs	r2, #0
 801195c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	2200      	movs	r2, #0
 8011962:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011964:	bf00      	nop
 8011966:	3754      	adds	r7, #84	; 0x54
 8011968:	46bd      	mov	sp, r7
 801196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801196e:	4770      	bx	lr
 8011970:	effffffe 	.word	0xeffffffe

08011974 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011974:	b480      	push	{r7}
 8011976:	b085      	sub	sp, #20
 8011978:	af00      	add	r7, sp, #0
 801197a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011982:	2b01      	cmp	r3, #1
 8011984:	d101      	bne.n	801198a <HAL_UARTEx_DisableFifoMode+0x16>
 8011986:	2302      	movs	r3, #2
 8011988:	e027      	b.n	80119da <HAL_UARTEx_DisableFifoMode+0x66>
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	2201      	movs	r2, #1
 801198e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	2224      	movs	r2, #36	; 0x24
 8011996:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	681a      	ldr	r2, [r3, #0]
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	f022 0201 	bic.w	r2, r2, #1
 80119b0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80119b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	2200      	movs	r2, #0
 80119be:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	68fa      	ldr	r2, [r7, #12]
 80119c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	2220      	movs	r2, #32
 80119cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	2200      	movs	r2, #0
 80119d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80119d8:	2300      	movs	r3, #0
}
 80119da:	4618      	mov	r0, r3
 80119dc:	3714      	adds	r7, #20
 80119de:	46bd      	mov	sp, r7
 80119e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e4:	4770      	bx	lr

080119e6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80119e6:	b580      	push	{r7, lr}
 80119e8:	b084      	sub	sp, #16
 80119ea:	af00      	add	r7, sp, #0
 80119ec:	6078      	str	r0, [r7, #4]
 80119ee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80119f6:	2b01      	cmp	r3, #1
 80119f8:	d101      	bne.n	80119fe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80119fa:	2302      	movs	r3, #2
 80119fc:	e02d      	b.n	8011a5a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	2201      	movs	r2, #1
 8011a02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	2224      	movs	r2, #36	; 0x24
 8011a0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	681a      	ldr	r2, [r3, #0]
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	f022 0201 	bic.w	r2, r2, #1
 8011a24:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	689b      	ldr	r3, [r3, #8]
 8011a2c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	683a      	ldr	r2, [r7, #0]
 8011a36:	430a      	orrs	r2, r1
 8011a38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011a3a:	6878      	ldr	r0, [r7, #4]
 8011a3c:	f000 f850 	bl	8011ae0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	68fa      	ldr	r2, [r7, #12]
 8011a46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	2220      	movs	r2, #32
 8011a4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	2200      	movs	r2, #0
 8011a54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011a58:	2300      	movs	r3, #0
}
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	3710      	adds	r7, #16
 8011a5e:	46bd      	mov	sp, r7
 8011a60:	bd80      	pop	{r7, pc}

08011a62 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011a62:	b580      	push	{r7, lr}
 8011a64:	b084      	sub	sp, #16
 8011a66:	af00      	add	r7, sp, #0
 8011a68:	6078      	str	r0, [r7, #4]
 8011a6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011a72:	2b01      	cmp	r3, #1
 8011a74:	d101      	bne.n	8011a7a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011a76:	2302      	movs	r3, #2
 8011a78:	e02d      	b.n	8011ad6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	2201      	movs	r2, #1
 8011a7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	2224      	movs	r2, #36	; 0x24
 8011a86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	681a      	ldr	r2, [r3, #0]
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	f022 0201 	bic.w	r2, r2, #1
 8011aa0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	689b      	ldr	r3, [r3, #8]
 8011aa8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	683a      	ldr	r2, [r7, #0]
 8011ab2:	430a      	orrs	r2, r1
 8011ab4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011ab6:	6878      	ldr	r0, [r7, #4]
 8011ab8:	f000 f812 	bl	8011ae0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	68fa      	ldr	r2, [r7, #12]
 8011ac2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	2220      	movs	r2, #32
 8011ac8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	2200      	movs	r2, #0
 8011ad0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011ad4:	2300      	movs	r3, #0
}
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	3710      	adds	r7, #16
 8011ada:	46bd      	mov	sp, r7
 8011adc:	bd80      	pop	{r7, pc}
	...

08011ae0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011ae0:	b480      	push	{r7}
 8011ae2:	b085      	sub	sp, #20
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d108      	bne.n	8011b02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	2201      	movs	r2, #1
 8011af4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	2201      	movs	r2, #1
 8011afc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011b00:	e031      	b.n	8011b66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011b02:	2310      	movs	r3, #16
 8011b04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011b06:	2310      	movs	r3, #16
 8011b08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	689b      	ldr	r3, [r3, #8]
 8011b10:	0e5b      	lsrs	r3, r3, #25
 8011b12:	b2db      	uxtb	r3, r3
 8011b14:	f003 0307 	and.w	r3, r3, #7
 8011b18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	689b      	ldr	r3, [r3, #8]
 8011b20:	0f5b      	lsrs	r3, r3, #29
 8011b22:	b2db      	uxtb	r3, r3
 8011b24:	f003 0307 	and.w	r3, r3, #7
 8011b28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011b2a:	7bbb      	ldrb	r3, [r7, #14]
 8011b2c:	7b3a      	ldrb	r2, [r7, #12]
 8011b2e:	4911      	ldr	r1, [pc, #68]	; (8011b74 <UARTEx_SetNbDataToProcess+0x94>)
 8011b30:	5c8a      	ldrb	r2, [r1, r2]
 8011b32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011b36:	7b3a      	ldrb	r2, [r7, #12]
 8011b38:	490f      	ldr	r1, [pc, #60]	; (8011b78 <UARTEx_SetNbDataToProcess+0x98>)
 8011b3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011b3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8011b40:	b29a      	uxth	r2, r3
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011b48:	7bfb      	ldrb	r3, [r7, #15]
 8011b4a:	7b7a      	ldrb	r2, [r7, #13]
 8011b4c:	4909      	ldr	r1, [pc, #36]	; (8011b74 <UARTEx_SetNbDataToProcess+0x94>)
 8011b4e:	5c8a      	ldrb	r2, [r1, r2]
 8011b50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011b54:	7b7a      	ldrb	r2, [r7, #13]
 8011b56:	4908      	ldr	r1, [pc, #32]	; (8011b78 <UARTEx_SetNbDataToProcess+0x98>)
 8011b58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011b5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8011b5e:	b29a      	uxth	r2, r3
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011b66:	bf00      	nop
 8011b68:	3714      	adds	r7, #20
 8011b6a:	46bd      	mov	sp, r7
 8011b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b70:	4770      	bx	lr
 8011b72:	bf00      	nop
 8011b74:	080181e8 	.word	0x080181e8
 8011b78:	080181f0 	.word	0x080181f0

08011b7c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8011b7c:	b084      	sub	sp, #16
 8011b7e:	b480      	push	{r7}
 8011b80:	b085      	sub	sp, #20
 8011b82:	af00      	add	r7, sp, #0
 8011b84:	6078      	str	r0, [r7, #4]
 8011b86:	f107 001c 	add.w	r0, r7, #28
 8011b8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011b8e:	2300      	movs	r3, #0
 8011b90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8011b92:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8011b94:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8011b96:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8011b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8011b9a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8011b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8011b9e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8011ba2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8011ba4:	68fa      	ldr	r2, [r7, #12]
 8011ba6:	4313      	orrs	r3, r2
 8011ba8:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	685a      	ldr	r2, [r3, #4]
 8011bae:	4b07      	ldr	r3, [pc, #28]	; (8011bcc <SDMMC_Init+0x50>)
 8011bb0:	4013      	ands	r3, r2
 8011bb2:	68fa      	ldr	r2, [r7, #12]
 8011bb4:	431a      	orrs	r2, r3
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8011bba:	2300      	movs	r3, #0
}
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	3714      	adds	r7, #20
 8011bc0:	46bd      	mov	sp, r7
 8011bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc6:	b004      	add	sp, #16
 8011bc8:	4770      	bx	lr
 8011bca:	bf00      	nop
 8011bcc:	ffc02c00 	.word	0xffc02c00

08011bd0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8011bd0:	b480      	push	{r7}
 8011bd2:	b083      	sub	sp, #12
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011bde:	4618      	mov	r0, r3
 8011be0:	370c      	adds	r7, #12
 8011be2:	46bd      	mov	sp, r7
 8011be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be8:	4770      	bx	lr

08011bea <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8011bea:	b480      	push	{r7}
 8011bec:	b083      	sub	sp, #12
 8011bee:	af00      	add	r7, sp, #0
 8011bf0:	6078      	str	r0, [r7, #4]
 8011bf2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8011bf4:	683b      	ldr	r3, [r7, #0]
 8011bf6:	681a      	ldr	r2, [r3, #0]
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011bfe:	2300      	movs	r3, #0
}
 8011c00:	4618      	mov	r0, r3
 8011c02:	370c      	adds	r7, #12
 8011c04:	46bd      	mov	sp, r7
 8011c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c0a:	4770      	bx	lr

08011c0c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8011c0c:	b480      	push	{r7}
 8011c0e:	b083      	sub	sp, #12
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	f043 0203 	orr.w	r2, r3, #3
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8011c20:	2300      	movs	r3, #0
}
 8011c22:	4618      	mov	r0, r3
 8011c24:	370c      	adds	r7, #12
 8011c26:	46bd      	mov	sp, r7
 8011c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c2c:	4770      	bx	lr

08011c2e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8011c2e:	b480      	push	{r7}
 8011c30:	b083      	sub	sp, #12
 8011c32:	af00      	add	r7, sp, #0
 8011c34:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	f003 0303 	and.w	r3, r3, #3
}
 8011c3e:	4618      	mov	r0, r3
 8011c40:	370c      	adds	r7, #12
 8011c42:	46bd      	mov	sp, r7
 8011c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c48:	4770      	bx	lr
	...

08011c4c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8011c4c:	b480      	push	{r7}
 8011c4e:	b085      	sub	sp, #20
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	6078      	str	r0, [r7, #4]
 8011c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011c56:	2300      	movs	r3, #0
 8011c58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8011c5a:	683b      	ldr	r3, [r7, #0]
 8011c5c:	681a      	ldr	r2, [r3, #0]
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011c62:	683b      	ldr	r3, [r7, #0]
 8011c64:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8011c66:	683b      	ldr	r3, [r7, #0]
 8011c68:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011c6a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8011c6c:	683b      	ldr	r3, [r7, #0]
 8011c6e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8011c70:	431a      	orrs	r2, r3
                       Command->CPSM);
 8011c72:	683b      	ldr	r3, [r7, #0]
 8011c74:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8011c76:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011c78:	68fa      	ldr	r2, [r7, #12]
 8011c7a:	4313      	orrs	r3, r2
 8011c7c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	68da      	ldr	r2, [r3, #12]
 8011c82:	4b06      	ldr	r3, [pc, #24]	; (8011c9c <SDMMC_SendCommand+0x50>)
 8011c84:	4013      	ands	r3, r2
 8011c86:	68fa      	ldr	r2, [r7, #12]
 8011c88:	431a      	orrs	r2, r3
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011c8e:	2300      	movs	r3, #0
}
 8011c90:	4618      	mov	r0, r3
 8011c92:	3714      	adds	r7, #20
 8011c94:	46bd      	mov	sp, r7
 8011c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c9a:	4770      	bx	lr
 8011c9c:	fffee0c0 	.word	0xfffee0c0

08011ca0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8011ca0:	b480      	push	{r7}
 8011ca2:	b083      	sub	sp, #12
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	691b      	ldr	r3, [r3, #16]
 8011cac:	b2db      	uxtb	r3, r3
}
 8011cae:	4618      	mov	r0, r3
 8011cb0:	370c      	adds	r7, #12
 8011cb2:	46bd      	mov	sp, r7
 8011cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb8:	4770      	bx	lr

08011cba <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8011cba:	b480      	push	{r7}
 8011cbc:	b085      	sub	sp, #20
 8011cbe:	af00      	add	r7, sp, #0
 8011cc0:	6078      	str	r0, [r7, #4]
 8011cc2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	3314      	adds	r3, #20
 8011cc8:	461a      	mov	r2, r3
 8011cca:	683b      	ldr	r3, [r7, #0]
 8011ccc:	4413      	add	r3, r2
 8011cce:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	681b      	ldr	r3, [r3, #0]
}
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	3714      	adds	r7, #20
 8011cd8:	46bd      	mov	sp, r7
 8011cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cde:	4770      	bx	lr

08011ce0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8011ce0:	b480      	push	{r7}
 8011ce2:	b085      	sub	sp, #20
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	6078      	str	r0, [r7, #4]
 8011ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011cea:	2300      	movs	r3, #0
 8011cec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8011cee:	683b      	ldr	r3, [r7, #0]
 8011cf0:	681a      	ldr	r2, [r3, #0]
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8011cf6:	683b      	ldr	r3, [r7, #0]
 8011cf8:	685a      	ldr	r2, [r3, #4]
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011cfe:	683b      	ldr	r3, [r7, #0]
 8011d00:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8011d02:	683b      	ldr	r3, [r7, #0]
 8011d04:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011d06:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8011d08:	683b      	ldr	r3, [r7, #0]
 8011d0a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8011d0c:	431a      	orrs	r2, r3
                       Data->DPSM);
 8011d0e:	683b      	ldr	r3, [r7, #0]
 8011d10:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8011d12:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011d14:	68fa      	ldr	r2, [r7, #12]
 8011d16:	4313      	orrs	r3, r2
 8011d18:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d1e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	431a      	orrs	r2, r3
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8011d2a:	2300      	movs	r3, #0

}
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	3714      	adds	r7, #20
 8011d30:	46bd      	mov	sp, r7
 8011d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d36:	4770      	bx	lr

08011d38 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	b088      	sub	sp, #32
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
 8011d40:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8011d42:	683b      	ldr	r3, [r7, #0]
 8011d44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8011d46:	2310      	movs	r3, #16
 8011d48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011d4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011d4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011d50:	2300      	movs	r3, #0
 8011d52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011d54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011d58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011d5a:	f107 0308 	add.w	r3, r7, #8
 8011d5e:	4619      	mov	r1, r3
 8011d60:	6878      	ldr	r0, [r7, #4]
 8011d62:	f7ff ff73 	bl	8011c4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8011d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8011d6a:	2110      	movs	r1, #16
 8011d6c:	6878      	ldr	r0, [r7, #4]
 8011d6e:	f000 fa5f 	bl	8012230 <SDMMC_GetCmdResp1>
 8011d72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011d74:	69fb      	ldr	r3, [r7, #28]
}
 8011d76:	4618      	mov	r0, r3
 8011d78:	3720      	adds	r7, #32
 8011d7a:	46bd      	mov	sp, r7
 8011d7c:	bd80      	pop	{r7, pc}

08011d7e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011d7e:	b580      	push	{r7, lr}
 8011d80:	b088      	sub	sp, #32
 8011d82:	af00      	add	r7, sp, #0
 8011d84:	6078      	str	r0, [r7, #4]
 8011d86:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011d88:	683b      	ldr	r3, [r7, #0]
 8011d8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8011d8c:	2311      	movs	r3, #17
 8011d8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011d90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011d94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011d96:	2300      	movs	r3, #0
 8011d98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011d9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011d9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011da0:	f107 0308 	add.w	r3, r7, #8
 8011da4:	4619      	mov	r1, r3
 8011da6:	6878      	ldr	r0, [r7, #4]
 8011da8:	f7ff ff50 	bl	8011c4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8011db0:	2111      	movs	r1, #17
 8011db2:	6878      	ldr	r0, [r7, #4]
 8011db4:	f000 fa3c 	bl	8012230 <SDMMC_GetCmdResp1>
 8011db8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011dba:	69fb      	ldr	r3, [r7, #28]
}
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	3720      	adds	r7, #32
 8011dc0:	46bd      	mov	sp, r7
 8011dc2:	bd80      	pop	{r7, pc}

08011dc4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b088      	sub	sp, #32
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
 8011dcc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011dce:	683b      	ldr	r3, [r7, #0]
 8011dd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8011dd2:	2312      	movs	r3, #18
 8011dd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011dd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011dda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011ddc:	2300      	movs	r3, #0
 8011dde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011de0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011de4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011de6:	f107 0308 	add.w	r3, r7, #8
 8011dea:	4619      	mov	r1, r3
 8011dec:	6878      	ldr	r0, [r7, #4]
 8011dee:	f7ff ff2d 	bl	8011c4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8011df6:	2112      	movs	r1, #18
 8011df8:	6878      	ldr	r0, [r7, #4]
 8011dfa:	f000 fa19 	bl	8012230 <SDMMC_GetCmdResp1>
 8011dfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011e00:	69fb      	ldr	r3, [r7, #28]
}
 8011e02:	4618      	mov	r0, r3
 8011e04:	3720      	adds	r7, #32
 8011e06:	46bd      	mov	sp, r7
 8011e08:	bd80      	pop	{r7, pc}

08011e0a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011e0a:	b580      	push	{r7, lr}
 8011e0c:	b088      	sub	sp, #32
 8011e0e:	af00      	add	r7, sp, #0
 8011e10:	6078      	str	r0, [r7, #4]
 8011e12:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011e14:	683b      	ldr	r3, [r7, #0]
 8011e16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8011e18:	2318      	movs	r3, #24
 8011e1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011e1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011e20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011e22:	2300      	movs	r3, #0
 8011e24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011e26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011e2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011e2c:	f107 0308 	add.w	r3, r7, #8
 8011e30:	4619      	mov	r1, r3
 8011e32:	6878      	ldr	r0, [r7, #4]
 8011e34:	f7ff ff0a 	bl	8011c4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8011e3c:	2118      	movs	r1, #24
 8011e3e:	6878      	ldr	r0, [r7, #4]
 8011e40:	f000 f9f6 	bl	8012230 <SDMMC_GetCmdResp1>
 8011e44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011e46:	69fb      	ldr	r3, [r7, #28]
}
 8011e48:	4618      	mov	r0, r3
 8011e4a:	3720      	adds	r7, #32
 8011e4c:	46bd      	mov	sp, r7
 8011e4e:	bd80      	pop	{r7, pc}

08011e50 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011e50:	b580      	push	{r7, lr}
 8011e52:	b088      	sub	sp, #32
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	6078      	str	r0, [r7, #4]
 8011e58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011e5a:	683b      	ldr	r3, [r7, #0]
 8011e5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8011e5e:	2319      	movs	r3, #25
 8011e60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011e62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011e66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011e68:	2300      	movs	r3, #0
 8011e6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011e6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011e70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011e72:	f107 0308 	add.w	r3, r7, #8
 8011e76:	4619      	mov	r1, r3
 8011e78:	6878      	ldr	r0, [r7, #4]
 8011e7a:	f7ff fee7 	bl	8011c4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011e82:	2119      	movs	r1, #25
 8011e84:	6878      	ldr	r0, [r7, #4]
 8011e86:	f000 f9d3 	bl	8012230 <SDMMC_GetCmdResp1>
 8011e8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011e8c:	69fb      	ldr	r3, [r7, #28]
}
 8011e8e:	4618      	mov	r0, r3
 8011e90:	3720      	adds	r7, #32
 8011e92:	46bd      	mov	sp, r7
 8011e94:	bd80      	pop	{r7, pc}
	...

08011e98 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8011e98:	b580      	push	{r7, lr}
 8011e9a:	b088      	sub	sp, #32
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8011ea0:	2300      	movs	r3, #0
 8011ea2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8011ea4:	230c      	movs	r3, #12
 8011ea6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011ea8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011eac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011eae:	2300      	movs	r3, #0
 8011eb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011eb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011eb6:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	68db      	ldr	r3, [r3, #12]
 8011ebc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	68db      	ldr	r3, [r3, #12]
 8011ec8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011ed0:	f107 0308 	add.w	r3, r7, #8
 8011ed4:	4619      	mov	r1, r3
 8011ed6:	6878      	ldr	r0, [r7, #4]
 8011ed8:	f7ff feb8 	bl	8011c4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8011edc:	4a0b      	ldr	r2, [pc, #44]	; (8011f0c <SDMMC_CmdStopTransfer+0x74>)
 8011ede:	210c      	movs	r1, #12
 8011ee0:	6878      	ldr	r0, [r7, #4]
 8011ee2:	f000 f9a5 	bl	8012230 <SDMMC_GetCmdResp1>
 8011ee6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	68db      	ldr	r3, [r3, #12]
 8011eec:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8011ef4:	69fb      	ldr	r3, [r7, #28]
 8011ef6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011efa:	d101      	bne.n	8011f00 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8011efc:	2300      	movs	r3, #0
 8011efe:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8011f00:	69fb      	ldr	r3, [r7, #28]
}
 8011f02:	4618      	mov	r0, r3
 8011f04:	3720      	adds	r7, #32
 8011f06:	46bd      	mov	sp, r7
 8011f08:	bd80      	pop	{r7, pc}
 8011f0a:	bf00      	nop
 8011f0c:	05f5e100 	.word	0x05f5e100

08011f10 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b088      	sub	sp, #32
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	6078      	str	r0, [r7, #4]
 8011f18:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8011f1a:	683b      	ldr	r3, [r7, #0]
 8011f1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8011f1e:	2307      	movs	r3, #7
 8011f20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011f22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011f26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011f28:	2300      	movs	r3, #0
 8011f2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011f2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011f30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011f32:	f107 0308 	add.w	r3, r7, #8
 8011f36:	4619      	mov	r1, r3
 8011f38:	6878      	ldr	r0, [r7, #4]
 8011f3a:	f7ff fe87 	bl	8011c4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8011f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f42:	2107      	movs	r1, #7
 8011f44:	6878      	ldr	r0, [r7, #4]
 8011f46:	f000 f973 	bl	8012230 <SDMMC_GetCmdResp1>
 8011f4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f4c:	69fb      	ldr	r3, [r7, #28]
}
 8011f4e:	4618      	mov	r0, r3
 8011f50:	3720      	adds	r7, #32
 8011f52:	46bd      	mov	sp, r7
 8011f54:	bd80      	pop	{r7, pc}

08011f56 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8011f56:	b580      	push	{r7, lr}
 8011f58:	b088      	sub	sp, #32
 8011f5a:	af00      	add	r7, sp, #0
 8011f5c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8011f5e:	2300      	movs	r3, #0
 8011f60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8011f62:	2300      	movs	r3, #0
 8011f64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8011f66:	2300      	movs	r3, #0
 8011f68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011f6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011f72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011f74:	f107 0308 	add.w	r3, r7, #8
 8011f78:	4619      	mov	r1, r3
 8011f7a:	6878      	ldr	r0, [r7, #4]
 8011f7c:	f7ff fe66 	bl	8011c4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8011f80:	6878      	ldr	r0, [r7, #4]
 8011f82:	f000 fb97 	bl	80126b4 <SDMMC_GetCmdError>
 8011f86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f88:	69fb      	ldr	r3, [r7, #28]
}
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	3720      	adds	r7, #32
 8011f8e:	46bd      	mov	sp, r7
 8011f90:	bd80      	pop	{r7, pc}

08011f92 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8011f92:	b580      	push	{r7, lr}
 8011f94:	b088      	sub	sp, #32
 8011f96:	af00      	add	r7, sp, #0
 8011f98:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8011f9a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8011f9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8011fa0:	2308      	movs	r3, #8
 8011fa2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011fa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011fa8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011faa:	2300      	movs	r3, #0
 8011fac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011fae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011fb2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011fb4:	f107 0308 	add.w	r3, r7, #8
 8011fb8:	4619      	mov	r1, r3
 8011fba:	6878      	ldr	r0, [r7, #4]
 8011fbc:	f7ff fe46 	bl	8011c4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8011fc0:	6878      	ldr	r0, [r7, #4]
 8011fc2:	f000 fb29 	bl	8012618 <SDMMC_GetCmdResp7>
 8011fc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011fc8:	69fb      	ldr	r3, [r7, #28]
}
 8011fca:	4618      	mov	r0, r3
 8011fcc:	3720      	adds	r7, #32
 8011fce:	46bd      	mov	sp, r7
 8011fd0:	bd80      	pop	{r7, pc}

08011fd2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011fd2:	b580      	push	{r7, lr}
 8011fd4:	b088      	sub	sp, #32
 8011fd6:	af00      	add	r7, sp, #0
 8011fd8:	6078      	str	r0, [r7, #4]
 8011fda:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8011fdc:	683b      	ldr	r3, [r7, #0]
 8011fde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8011fe0:	2337      	movs	r3, #55	; 0x37
 8011fe2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011fe4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011fe8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011fea:	2300      	movs	r3, #0
 8011fec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011fee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011ff2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011ff4:	f107 0308 	add.w	r3, r7, #8
 8011ff8:	4619      	mov	r1, r3
 8011ffa:	6878      	ldr	r0, [r7, #4]
 8011ffc:	f7ff fe26 	bl	8011c4c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8012000:	f241 3288 	movw	r2, #5000	; 0x1388
 8012004:	2137      	movs	r1, #55	; 0x37
 8012006:	6878      	ldr	r0, [r7, #4]
 8012008:	f000 f912 	bl	8012230 <SDMMC_GetCmdResp1>
 801200c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801200e:	69fb      	ldr	r3, [r7, #28]
}
 8012010:	4618      	mov	r0, r3
 8012012:	3720      	adds	r7, #32
 8012014:	46bd      	mov	sp, r7
 8012016:	bd80      	pop	{r7, pc}

08012018 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012018:	b580      	push	{r7, lr}
 801201a:	b088      	sub	sp, #32
 801201c:	af00      	add	r7, sp, #0
 801201e:	6078      	str	r0, [r7, #4]
 8012020:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012022:	683b      	ldr	r3, [r7, #0]
 8012024:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8012026:	2329      	movs	r3, #41	; 0x29
 8012028:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801202a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801202e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012030:	2300      	movs	r3, #0
 8012032:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012034:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012038:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801203a:	f107 0308 	add.w	r3, r7, #8
 801203e:	4619      	mov	r1, r3
 8012040:	6878      	ldr	r0, [r7, #4]
 8012042:	f7ff fe03 	bl	8011c4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8012046:	6878      	ldr	r0, [r7, #4]
 8012048:	f000 fa2e 	bl	80124a8 <SDMMC_GetCmdResp3>
 801204c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801204e:	69fb      	ldr	r3, [r7, #28]
}
 8012050:	4618      	mov	r0, r3
 8012052:	3720      	adds	r7, #32
 8012054:	46bd      	mov	sp, r7
 8012056:	bd80      	pop	{r7, pc}

08012058 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8012058:	b580      	push	{r7, lr}
 801205a:	b088      	sub	sp, #32
 801205c:	af00      	add	r7, sp, #0
 801205e:	6078      	str	r0, [r7, #4]
 8012060:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8012062:	683b      	ldr	r3, [r7, #0]
 8012064:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8012066:	2306      	movs	r3, #6
 8012068:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801206a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801206e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012070:	2300      	movs	r3, #0
 8012072:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012078:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801207a:	f107 0308 	add.w	r3, r7, #8
 801207e:	4619      	mov	r1, r3
 8012080:	6878      	ldr	r0, [r7, #4]
 8012082:	f7ff fde3 	bl	8011c4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8012086:	f241 3288 	movw	r2, #5000	; 0x1388
 801208a:	2106      	movs	r1, #6
 801208c:	6878      	ldr	r0, [r7, #4]
 801208e:	f000 f8cf 	bl	8012230 <SDMMC_GetCmdResp1>
 8012092:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012094:	69fb      	ldr	r3, [r7, #28]
}
 8012096:	4618      	mov	r0, r3
 8012098:	3720      	adds	r7, #32
 801209a:	46bd      	mov	sp, r7
 801209c:	bd80      	pop	{r7, pc}

0801209e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801209e:	b580      	push	{r7, lr}
 80120a0:	b088      	sub	sp, #32
 80120a2:	af00      	add	r7, sp, #0
 80120a4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80120a6:	2300      	movs	r3, #0
 80120a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80120aa:	2333      	movs	r3, #51	; 0x33
 80120ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80120ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80120b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80120b4:	2300      	movs	r3, #0
 80120b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80120b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80120bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80120be:	f107 0308 	add.w	r3, r7, #8
 80120c2:	4619      	mov	r1, r3
 80120c4:	6878      	ldr	r0, [r7, #4]
 80120c6:	f7ff fdc1 	bl	8011c4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80120ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80120ce:	2133      	movs	r1, #51	; 0x33
 80120d0:	6878      	ldr	r0, [r7, #4]
 80120d2:	f000 f8ad 	bl	8012230 <SDMMC_GetCmdResp1>
 80120d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80120d8:	69fb      	ldr	r3, [r7, #28]
}
 80120da:	4618      	mov	r0, r3
 80120dc:	3720      	adds	r7, #32
 80120de:	46bd      	mov	sp, r7
 80120e0:	bd80      	pop	{r7, pc}

080120e2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80120e2:	b580      	push	{r7, lr}
 80120e4:	b088      	sub	sp, #32
 80120e6:	af00      	add	r7, sp, #0
 80120e8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80120ea:	2300      	movs	r3, #0
 80120ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80120ee:	2302      	movs	r3, #2
 80120f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80120f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80120f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80120f8:	2300      	movs	r3, #0
 80120fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80120fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012100:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012102:	f107 0308 	add.w	r3, r7, #8
 8012106:	4619      	mov	r1, r3
 8012108:	6878      	ldr	r0, [r7, #4]
 801210a:	f7ff fd9f 	bl	8011c4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801210e:	6878      	ldr	r0, [r7, #4]
 8012110:	f000 f980 	bl	8012414 <SDMMC_GetCmdResp2>
 8012114:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012116:	69fb      	ldr	r3, [r7, #28]
}
 8012118:	4618      	mov	r0, r3
 801211a:	3720      	adds	r7, #32
 801211c:	46bd      	mov	sp, r7
 801211e:	bd80      	pop	{r7, pc}

08012120 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012120:	b580      	push	{r7, lr}
 8012122:	b088      	sub	sp, #32
 8012124:	af00      	add	r7, sp, #0
 8012126:	6078      	str	r0, [r7, #4]
 8012128:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801212a:	683b      	ldr	r3, [r7, #0]
 801212c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801212e:	2309      	movs	r3, #9
 8012130:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012132:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012136:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012138:	2300      	movs	r3, #0
 801213a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801213c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012140:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012142:	f107 0308 	add.w	r3, r7, #8
 8012146:	4619      	mov	r1, r3
 8012148:	6878      	ldr	r0, [r7, #4]
 801214a:	f7ff fd7f 	bl	8011c4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801214e:	6878      	ldr	r0, [r7, #4]
 8012150:	f000 f960 	bl	8012414 <SDMMC_GetCmdResp2>
 8012154:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012156:	69fb      	ldr	r3, [r7, #28]
}
 8012158:	4618      	mov	r0, r3
 801215a:	3720      	adds	r7, #32
 801215c:	46bd      	mov	sp, r7
 801215e:	bd80      	pop	{r7, pc}

08012160 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8012160:	b580      	push	{r7, lr}
 8012162:	b088      	sub	sp, #32
 8012164:	af00      	add	r7, sp, #0
 8012166:	6078      	str	r0, [r7, #4]
 8012168:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801216a:	2300      	movs	r3, #0
 801216c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801216e:	2303      	movs	r3, #3
 8012170:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012172:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012176:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012178:	2300      	movs	r3, #0
 801217a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801217c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012180:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012182:	f107 0308 	add.w	r3, r7, #8
 8012186:	4619      	mov	r1, r3
 8012188:	6878      	ldr	r0, [r7, #4]
 801218a:	f7ff fd5f 	bl	8011c4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801218e:	683a      	ldr	r2, [r7, #0]
 8012190:	2103      	movs	r1, #3
 8012192:	6878      	ldr	r0, [r7, #4]
 8012194:	f000 f9c8 	bl	8012528 <SDMMC_GetCmdResp6>
 8012198:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801219a:	69fb      	ldr	r3, [r7, #28]
}
 801219c:	4618      	mov	r0, r3
 801219e:	3720      	adds	r7, #32
 80121a0:	46bd      	mov	sp, r7
 80121a2:	bd80      	pop	{r7, pc}

080121a4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80121a4:	b580      	push	{r7, lr}
 80121a6:	b088      	sub	sp, #32
 80121a8:	af00      	add	r7, sp, #0
 80121aa:	6078      	str	r0, [r7, #4]
 80121ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80121ae:	683b      	ldr	r3, [r7, #0]
 80121b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80121b2:	230d      	movs	r3, #13
 80121b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80121b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80121ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80121bc:	2300      	movs	r3, #0
 80121be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80121c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80121c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80121c6:	f107 0308 	add.w	r3, r7, #8
 80121ca:	4619      	mov	r1, r3
 80121cc:	6878      	ldr	r0, [r7, #4]
 80121ce:	f7ff fd3d 	bl	8011c4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80121d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80121d6:	210d      	movs	r1, #13
 80121d8:	6878      	ldr	r0, [r7, #4]
 80121da:	f000 f829 	bl	8012230 <SDMMC_GetCmdResp1>
 80121de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80121e0:	69fb      	ldr	r3, [r7, #28]
}
 80121e2:	4618      	mov	r0, r3
 80121e4:	3720      	adds	r7, #32
 80121e6:	46bd      	mov	sp, r7
 80121e8:	bd80      	pop	{r7, pc}

080121ea <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80121ea:	b580      	push	{r7, lr}
 80121ec:	b088      	sub	sp, #32
 80121ee:	af00      	add	r7, sp, #0
 80121f0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80121f2:	2300      	movs	r3, #0
 80121f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80121f6:	230d      	movs	r3, #13
 80121f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80121fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80121fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012200:	2300      	movs	r3, #0
 8012202:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012204:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012208:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801220a:	f107 0308 	add.w	r3, r7, #8
 801220e:	4619      	mov	r1, r3
 8012210:	6878      	ldr	r0, [r7, #4]
 8012212:	f7ff fd1b 	bl	8011c4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8012216:	f241 3288 	movw	r2, #5000	; 0x1388
 801221a:	210d      	movs	r1, #13
 801221c:	6878      	ldr	r0, [r7, #4]
 801221e:	f000 f807 	bl	8012230 <SDMMC_GetCmdResp1>
 8012222:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012224:	69fb      	ldr	r3, [r7, #28]
}
 8012226:	4618      	mov	r0, r3
 8012228:	3720      	adds	r7, #32
 801222a:	46bd      	mov	sp, r7
 801222c:	bd80      	pop	{r7, pc}
	...

08012230 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8012230:	b580      	push	{r7, lr}
 8012232:	b088      	sub	sp, #32
 8012234:	af00      	add	r7, sp, #0
 8012236:	60f8      	str	r0, [r7, #12]
 8012238:	460b      	mov	r3, r1
 801223a:	607a      	str	r2, [r7, #4]
 801223c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801223e:	4b70      	ldr	r3, [pc, #448]	; (8012400 <SDMMC_GetCmdResp1+0x1d0>)
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	4a70      	ldr	r2, [pc, #448]	; (8012404 <SDMMC_GetCmdResp1+0x1d4>)
 8012244:	fba2 2303 	umull	r2, r3, r2, r3
 8012248:	0a5a      	lsrs	r2, r3, #9
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	fb02 f303 	mul.w	r3, r2, r3
 8012250:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012252:	69fb      	ldr	r3, [r7, #28]
 8012254:	1e5a      	subs	r2, r3, #1
 8012256:	61fa      	str	r2, [r7, #28]
 8012258:	2b00      	cmp	r3, #0
 801225a:	d102      	bne.n	8012262 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 801225c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012260:	e0c9      	b.n	80123f6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012266:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8012268:	69ba      	ldr	r2, [r7, #24]
 801226a:	4b67      	ldr	r3, [pc, #412]	; (8012408 <SDMMC_GetCmdResp1+0x1d8>)
 801226c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801226e:	2b00      	cmp	r3, #0
 8012270:	d0ef      	beq.n	8012252 <SDMMC_GetCmdResp1+0x22>
 8012272:	69bb      	ldr	r3, [r7, #24]
 8012274:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012278:	2b00      	cmp	r3, #0
 801227a:	d1ea      	bne.n	8012252 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012280:	f003 0304 	and.w	r3, r3, #4
 8012284:	2b00      	cmp	r3, #0
 8012286:	d004      	beq.n	8012292 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	2204      	movs	r2, #4
 801228c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801228e:	2304      	movs	r3, #4
 8012290:	e0b1      	b.n	80123f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012296:	f003 0301 	and.w	r3, r3, #1
 801229a:	2b00      	cmp	r3, #0
 801229c:	d004      	beq.n	80122a8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	2201      	movs	r2, #1
 80122a2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80122a4:	2301      	movs	r3, #1
 80122a6:	e0a6      	b.n	80123f6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	4a58      	ldr	r2, [pc, #352]	; (801240c <SDMMC_GetCmdResp1+0x1dc>)
 80122ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80122ae:	68f8      	ldr	r0, [r7, #12]
 80122b0:	f7ff fcf6 	bl	8011ca0 <SDMMC_GetCommandResponse>
 80122b4:	4603      	mov	r3, r0
 80122b6:	461a      	mov	r2, r3
 80122b8:	7afb      	ldrb	r3, [r7, #11]
 80122ba:	4293      	cmp	r3, r2
 80122bc:	d001      	beq.n	80122c2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80122be:	2301      	movs	r3, #1
 80122c0:	e099      	b.n	80123f6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80122c2:	2100      	movs	r1, #0
 80122c4:	68f8      	ldr	r0, [r7, #12]
 80122c6:	f7ff fcf8 	bl	8011cba <SDMMC_GetResponse>
 80122ca:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80122cc:	697a      	ldr	r2, [r7, #20]
 80122ce:	4b50      	ldr	r3, [pc, #320]	; (8012410 <SDMMC_GetCmdResp1+0x1e0>)
 80122d0:	4013      	ands	r3, r2
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d101      	bne.n	80122da <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80122d6:	2300      	movs	r3, #0
 80122d8:	e08d      	b.n	80123f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80122da:	697b      	ldr	r3, [r7, #20]
 80122dc:	2b00      	cmp	r3, #0
 80122de:	da02      	bge.n	80122e6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80122e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80122e4:	e087      	b.n	80123f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80122e6:	697b      	ldr	r3, [r7, #20]
 80122e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d001      	beq.n	80122f4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80122f0:	2340      	movs	r3, #64	; 0x40
 80122f2:	e080      	b.n	80123f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80122f4:	697b      	ldr	r3, [r7, #20]
 80122f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d001      	beq.n	8012302 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80122fe:	2380      	movs	r3, #128	; 0x80
 8012300:	e079      	b.n	80123f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012302:	697b      	ldr	r3, [r7, #20]
 8012304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012308:	2b00      	cmp	r3, #0
 801230a:	d002      	beq.n	8012312 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801230c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012310:	e071      	b.n	80123f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012312:	697b      	ldr	r3, [r7, #20]
 8012314:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012318:	2b00      	cmp	r3, #0
 801231a:	d002      	beq.n	8012322 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801231c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012320:	e069      	b.n	80123f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012322:	697b      	ldr	r3, [r7, #20]
 8012324:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012328:	2b00      	cmp	r3, #0
 801232a:	d002      	beq.n	8012332 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801232c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012330:	e061      	b.n	80123f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012332:	697b      	ldr	r3, [r7, #20]
 8012334:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012338:	2b00      	cmp	r3, #0
 801233a:	d002      	beq.n	8012342 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801233c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012340:	e059      	b.n	80123f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012342:	697b      	ldr	r3, [r7, #20]
 8012344:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012348:	2b00      	cmp	r3, #0
 801234a:	d002      	beq.n	8012352 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801234c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012350:	e051      	b.n	80123f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012352:	697b      	ldr	r3, [r7, #20]
 8012354:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012358:	2b00      	cmp	r3, #0
 801235a:	d002      	beq.n	8012362 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801235c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012360:	e049      	b.n	80123f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012362:	697b      	ldr	r3, [r7, #20]
 8012364:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012368:	2b00      	cmp	r3, #0
 801236a:	d002      	beq.n	8012372 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801236c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012370:	e041      	b.n	80123f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012372:	697b      	ldr	r3, [r7, #20]
 8012374:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012378:	2b00      	cmp	r3, #0
 801237a:	d002      	beq.n	8012382 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 801237c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012380:	e039      	b.n	80123f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012382:	697b      	ldr	r3, [r7, #20]
 8012384:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012388:	2b00      	cmp	r3, #0
 801238a:	d002      	beq.n	8012392 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801238c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012390:	e031      	b.n	80123f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012392:	697b      	ldr	r3, [r7, #20]
 8012394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012398:	2b00      	cmp	r3, #0
 801239a:	d002      	beq.n	80123a2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801239c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80123a0:	e029      	b.n	80123f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80123a2:	697b      	ldr	r3, [r7, #20]
 80123a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d002      	beq.n	80123b2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80123ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80123b0:	e021      	b.n	80123f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80123b2:	697b      	ldr	r3, [r7, #20]
 80123b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d002      	beq.n	80123c2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80123bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80123c0:	e019      	b.n	80123f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80123c2:	697b      	ldr	r3, [r7, #20]
 80123c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d002      	beq.n	80123d2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80123cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80123d0:	e011      	b.n	80123f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80123d2:	697b      	ldr	r3, [r7, #20]
 80123d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d002      	beq.n	80123e2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80123dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80123e0:	e009      	b.n	80123f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80123e2:	697b      	ldr	r3, [r7, #20]
 80123e4:	f003 0308 	and.w	r3, r3, #8
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d002      	beq.n	80123f2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80123ec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80123f0:	e001      	b.n	80123f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80123f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80123f6:	4618      	mov	r0, r3
 80123f8:	3720      	adds	r7, #32
 80123fa:	46bd      	mov	sp, r7
 80123fc:	bd80      	pop	{r7, pc}
 80123fe:	bf00      	nop
 8012400:	24000000 	.word	0x24000000
 8012404:	10624dd3 	.word	0x10624dd3
 8012408:	00200045 	.word	0x00200045
 801240c:	002000c5 	.word	0x002000c5
 8012410:	fdffe008 	.word	0xfdffe008

08012414 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8012414:	b480      	push	{r7}
 8012416:	b085      	sub	sp, #20
 8012418:	af00      	add	r7, sp, #0
 801241a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801241c:	4b1f      	ldr	r3, [pc, #124]	; (801249c <SDMMC_GetCmdResp2+0x88>)
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	4a1f      	ldr	r2, [pc, #124]	; (80124a0 <SDMMC_GetCmdResp2+0x8c>)
 8012422:	fba2 2303 	umull	r2, r3, r2, r3
 8012426:	0a5b      	lsrs	r3, r3, #9
 8012428:	f241 3288 	movw	r2, #5000	; 0x1388
 801242c:	fb02 f303 	mul.w	r3, r2, r3
 8012430:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	1e5a      	subs	r2, r3, #1
 8012436:	60fa      	str	r2, [r7, #12]
 8012438:	2b00      	cmp	r3, #0
 801243a:	d102      	bne.n	8012442 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801243c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012440:	e026      	b.n	8012490 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012446:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012448:	68bb      	ldr	r3, [r7, #8]
 801244a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801244e:	2b00      	cmp	r3, #0
 8012450:	d0ef      	beq.n	8012432 <SDMMC_GetCmdResp2+0x1e>
 8012452:	68bb      	ldr	r3, [r7, #8]
 8012454:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012458:	2b00      	cmp	r3, #0
 801245a:	d1ea      	bne.n	8012432 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012460:	f003 0304 	and.w	r3, r3, #4
 8012464:	2b00      	cmp	r3, #0
 8012466:	d004      	beq.n	8012472 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	2204      	movs	r2, #4
 801246c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801246e:	2304      	movs	r3, #4
 8012470:	e00e      	b.n	8012490 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012476:	f003 0301 	and.w	r3, r3, #1
 801247a:	2b00      	cmp	r3, #0
 801247c:	d004      	beq.n	8012488 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	2201      	movs	r2, #1
 8012482:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012484:	2301      	movs	r3, #1
 8012486:	e003      	b.n	8012490 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	4a06      	ldr	r2, [pc, #24]	; (80124a4 <SDMMC_GetCmdResp2+0x90>)
 801248c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801248e:	2300      	movs	r3, #0
}
 8012490:	4618      	mov	r0, r3
 8012492:	3714      	adds	r7, #20
 8012494:	46bd      	mov	sp, r7
 8012496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801249a:	4770      	bx	lr
 801249c:	24000000 	.word	0x24000000
 80124a0:	10624dd3 	.word	0x10624dd3
 80124a4:	002000c5 	.word	0x002000c5

080124a8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80124a8:	b480      	push	{r7}
 80124aa:	b085      	sub	sp, #20
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80124b0:	4b1a      	ldr	r3, [pc, #104]	; (801251c <SDMMC_GetCmdResp3+0x74>)
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	4a1a      	ldr	r2, [pc, #104]	; (8012520 <SDMMC_GetCmdResp3+0x78>)
 80124b6:	fba2 2303 	umull	r2, r3, r2, r3
 80124ba:	0a5b      	lsrs	r3, r3, #9
 80124bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80124c0:	fb02 f303 	mul.w	r3, r2, r3
 80124c4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	1e5a      	subs	r2, r3, #1
 80124ca:	60fa      	str	r2, [r7, #12]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d102      	bne.n	80124d6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80124d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80124d4:	e01b      	b.n	801250e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124da:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80124dc:	68bb      	ldr	r3, [r7, #8]
 80124de:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d0ef      	beq.n	80124c6 <SDMMC_GetCmdResp3+0x1e>
 80124e6:	68bb      	ldr	r3, [r7, #8]
 80124e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d1ea      	bne.n	80124c6 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124f4:	f003 0304 	and.w	r3, r3, #4
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d004      	beq.n	8012506 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	2204      	movs	r2, #4
 8012500:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012502:	2304      	movs	r3, #4
 8012504:	e003      	b.n	801250e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	4a06      	ldr	r2, [pc, #24]	; (8012524 <SDMMC_GetCmdResp3+0x7c>)
 801250a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801250c:	2300      	movs	r3, #0
}
 801250e:	4618      	mov	r0, r3
 8012510:	3714      	adds	r7, #20
 8012512:	46bd      	mov	sp, r7
 8012514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012518:	4770      	bx	lr
 801251a:	bf00      	nop
 801251c:	24000000 	.word	0x24000000
 8012520:	10624dd3 	.word	0x10624dd3
 8012524:	002000c5 	.word	0x002000c5

08012528 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8012528:	b580      	push	{r7, lr}
 801252a:	b088      	sub	sp, #32
 801252c:	af00      	add	r7, sp, #0
 801252e:	60f8      	str	r0, [r7, #12]
 8012530:	460b      	mov	r3, r1
 8012532:	607a      	str	r2, [r7, #4]
 8012534:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012536:	4b35      	ldr	r3, [pc, #212]	; (801260c <SDMMC_GetCmdResp6+0xe4>)
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	4a35      	ldr	r2, [pc, #212]	; (8012610 <SDMMC_GetCmdResp6+0xe8>)
 801253c:	fba2 2303 	umull	r2, r3, r2, r3
 8012540:	0a5b      	lsrs	r3, r3, #9
 8012542:	f241 3288 	movw	r2, #5000	; 0x1388
 8012546:	fb02 f303 	mul.w	r3, r2, r3
 801254a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801254c:	69fb      	ldr	r3, [r7, #28]
 801254e:	1e5a      	subs	r2, r3, #1
 8012550:	61fa      	str	r2, [r7, #28]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d102      	bne.n	801255c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012556:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801255a:	e052      	b.n	8012602 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012560:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012562:	69bb      	ldr	r3, [r7, #24]
 8012564:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012568:	2b00      	cmp	r3, #0
 801256a:	d0ef      	beq.n	801254c <SDMMC_GetCmdResp6+0x24>
 801256c:	69bb      	ldr	r3, [r7, #24]
 801256e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012572:	2b00      	cmp	r3, #0
 8012574:	d1ea      	bne.n	801254c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801257a:	f003 0304 	and.w	r3, r3, #4
 801257e:	2b00      	cmp	r3, #0
 8012580:	d004      	beq.n	801258c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	2204      	movs	r2, #4
 8012586:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012588:	2304      	movs	r3, #4
 801258a:	e03a      	b.n	8012602 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012590:	f003 0301 	and.w	r3, r3, #1
 8012594:	2b00      	cmp	r3, #0
 8012596:	d004      	beq.n	80125a2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	2201      	movs	r2, #1
 801259c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801259e:	2301      	movs	r3, #1
 80125a0:	e02f      	b.n	8012602 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80125a2:	68f8      	ldr	r0, [r7, #12]
 80125a4:	f7ff fb7c 	bl	8011ca0 <SDMMC_GetCommandResponse>
 80125a8:	4603      	mov	r3, r0
 80125aa:	461a      	mov	r2, r3
 80125ac:	7afb      	ldrb	r3, [r7, #11]
 80125ae:	4293      	cmp	r3, r2
 80125b0:	d001      	beq.n	80125b6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80125b2:	2301      	movs	r3, #1
 80125b4:	e025      	b.n	8012602 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	4a16      	ldr	r2, [pc, #88]	; (8012614 <SDMMC_GetCmdResp6+0xec>)
 80125ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80125bc:	2100      	movs	r1, #0
 80125be:	68f8      	ldr	r0, [r7, #12]
 80125c0:	f7ff fb7b 	bl	8011cba <SDMMC_GetResponse>
 80125c4:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80125c6:	697b      	ldr	r3, [r7, #20]
 80125c8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d106      	bne.n	80125de <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80125d0:	697b      	ldr	r3, [r7, #20]
 80125d2:	0c1b      	lsrs	r3, r3, #16
 80125d4:	b29a      	uxth	r2, r3
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80125da:	2300      	movs	r3, #0
 80125dc:	e011      	b.n	8012602 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80125de:	697b      	ldr	r3, [r7, #20]
 80125e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d002      	beq.n	80125ee <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80125e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80125ec:	e009      	b.n	8012602 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80125ee:	697b      	ldr	r3, [r7, #20]
 80125f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d002      	beq.n	80125fe <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80125f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80125fc:	e001      	b.n	8012602 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80125fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012602:	4618      	mov	r0, r3
 8012604:	3720      	adds	r7, #32
 8012606:	46bd      	mov	sp, r7
 8012608:	bd80      	pop	{r7, pc}
 801260a:	bf00      	nop
 801260c:	24000000 	.word	0x24000000
 8012610:	10624dd3 	.word	0x10624dd3
 8012614:	002000c5 	.word	0x002000c5

08012618 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8012618:	b480      	push	{r7}
 801261a:	b085      	sub	sp, #20
 801261c:	af00      	add	r7, sp, #0
 801261e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012620:	4b22      	ldr	r3, [pc, #136]	; (80126ac <SDMMC_GetCmdResp7+0x94>)
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	4a22      	ldr	r2, [pc, #136]	; (80126b0 <SDMMC_GetCmdResp7+0x98>)
 8012626:	fba2 2303 	umull	r2, r3, r2, r3
 801262a:	0a5b      	lsrs	r3, r3, #9
 801262c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012630:	fb02 f303 	mul.w	r3, r2, r3
 8012634:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	1e5a      	subs	r2, r3, #1
 801263a:	60fa      	str	r2, [r7, #12]
 801263c:	2b00      	cmp	r3, #0
 801263e:	d102      	bne.n	8012646 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012640:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012644:	e02c      	b.n	80126a0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801264a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801264c:	68bb      	ldr	r3, [r7, #8]
 801264e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012652:	2b00      	cmp	r3, #0
 8012654:	d0ef      	beq.n	8012636 <SDMMC_GetCmdResp7+0x1e>
 8012656:	68bb      	ldr	r3, [r7, #8]
 8012658:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801265c:	2b00      	cmp	r3, #0
 801265e:	d1ea      	bne.n	8012636 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012664:	f003 0304 	and.w	r3, r3, #4
 8012668:	2b00      	cmp	r3, #0
 801266a:	d004      	beq.n	8012676 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	2204      	movs	r2, #4
 8012670:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012672:	2304      	movs	r3, #4
 8012674:	e014      	b.n	80126a0 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801267a:	f003 0301 	and.w	r3, r3, #1
 801267e:	2b00      	cmp	r3, #0
 8012680:	d004      	beq.n	801268c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	2201      	movs	r2, #1
 8012686:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012688:	2301      	movs	r3, #1
 801268a:	e009      	b.n	80126a0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012694:	2b00      	cmp	r3, #0
 8012696:	d002      	beq.n	801269e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	2240      	movs	r2, #64	; 0x40
 801269c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801269e:	2300      	movs	r3, #0

}
 80126a0:	4618      	mov	r0, r3
 80126a2:	3714      	adds	r7, #20
 80126a4:	46bd      	mov	sp, r7
 80126a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126aa:	4770      	bx	lr
 80126ac:	24000000 	.word	0x24000000
 80126b0:	10624dd3 	.word	0x10624dd3

080126b4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80126b4:	b480      	push	{r7}
 80126b6:	b085      	sub	sp, #20
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80126bc:	4b11      	ldr	r3, [pc, #68]	; (8012704 <SDMMC_GetCmdError+0x50>)
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	4a11      	ldr	r2, [pc, #68]	; (8012708 <SDMMC_GetCmdError+0x54>)
 80126c2:	fba2 2303 	umull	r2, r3, r2, r3
 80126c6:	0a5b      	lsrs	r3, r3, #9
 80126c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80126cc:	fb02 f303 	mul.w	r3, r2, r3
 80126d0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	1e5a      	subs	r2, r3, #1
 80126d6:	60fa      	str	r2, [r7, #12]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d102      	bne.n	80126e2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80126dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80126e0:	e009      	b.n	80126f6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d0f1      	beq.n	80126d2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	4a06      	ldr	r2, [pc, #24]	; (801270c <SDMMC_GetCmdError+0x58>)
 80126f2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80126f4:	2300      	movs	r3, #0
}
 80126f6:	4618      	mov	r0, r3
 80126f8:	3714      	adds	r7, #20
 80126fa:	46bd      	mov	sp, r7
 80126fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012700:	4770      	bx	lr
 8012702:	bf00      	nop
 8012704:	24000000 	.word	0x24000000
 8012708:	10624dd3 	.word	0x10624dd3
 801270c:	002000c5 	.word	0x002000c5

08012710 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012710:	b084      	sub	sp, #16
 8012712:	b580      	push	{r7, lr}
 8012714:	b084      	sub	sp, #16
 8012716:	af00      	add	r7, sp, #0
 8012718:	6078      	str	r0, [r7, #4]
 801271a:	f107 001c 	add.w	r0, r7, #28
 801271e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012724:	2b01      	cmp	r3, #1
 8012726:	d120      	bne.n	801276a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801272c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	68da      	ldr	r2, [r3, #12]
 8012738:	4b2a      	ldr	r3, [pc, #168]	; (80127e4 <USB_CoreInit+0xd4>)
 801273a:	4013      	ands	r3, r2
 801273c:	687a      	ldr	r2, [r7, #4]
 801273e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	68db      	ldr	r3, [r3, #12]
 8012744:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801274c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801274e:	2b01      	cmp	r3, #1
 8012750:	d105      	bne.n	801275e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	68db      	ldr	r3, [r3, #12]
 8012756:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801275e:	6878      	ldr	r0, [r7, #4]
 8012760:	f001 faf8 	bl	8013d54 <USB_CoreReset>
 8012764:	4603      	mov	r3, r0
 8012766:	73fb      	strb	r3, [r7, #15]
 8012768:	e01a      	b.n	80127a0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	68db      	ldr	r3, [r3, #12]
 801276e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012776:	6878      	ldr	r0, [r7, #4]
 8012778:	f001 faec 	bl	8013d54 <USB_CoreReset>
 801277c:	4603      	mov	r3, r0
 801277e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8012780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012782:	2b00      	cmp	r3, #0
 8012784:	d106      	bne.n	8012794 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801278a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	639a      	str	r2, [r3, #56]	; 0x38
 8012792:	e005      	b.n	80127a0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012798:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80127a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127a2:	2b01      	cmp	r3, #1
 80127a4:	d116      	bne.n	80127d4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80127aa:	b29a      	uxth	r2, r3
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80127b4:	4b0c      	ldr	r3, [pc, #48]	; (80127e8 <USB_CoreInit+0xd8>)
 80127b6:	4313      	orrs	r3, r2
 80127b8:	687a      	ldr	r2, [r7, #4]
 80127ba:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	689b      	ldr	r3, [r3, #8]
 80127c0:	f043 0206 	orr.w	r2, r3, #6
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	689b      	ldr	r3, [r3, #8]
 80127cc:	f043 0220 	orr.w	r2, r3, #32
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80127d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80127d6:	4618      	mov	r0, r3
 80127d8:	3710      	adds	r7, #16
 80127da:	46bd      	mov	sp, r7
 80127dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80127e0:	b004      	add	sp, #16
 80127e2:	4770      	bx	lr
 80127e4:	ffbdffbf 	.word	0xffbdffbf
 80127e8:	03ee0000 	.word	0x03ee0000

080127ec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80127ec:	b480      	push	{r7}
 80127ee:	b087      	sub	sp, #28
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	60f8      	str	r0, [r7, #12]
 80127f4:	60b9      	str	r1, [r7, #8]
 80127f6:	4613      	mov	r3, r2
 80127f8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80127fa:	79fb      	ldrb	r3, [r7, #7]
 80127fc:	2b02      	cmp	r3, #2
 80127fe:	d165      	bne.n	80128cc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012800:	68bb      	ldr	r3, [r7, #8]
 8012802:	4a41      	ldr	r2, [pc, #260]	; (8012908 <USB_SetTurnaroundTime+0x11c>)
 8012804:	4293      	cmp	r3, r2
 8012806:	d906      	bls.n	8012816 <USB_SetTurnaroundTime+0x2a>
 8012808:	68bb      	ldr	r3, [r7, #8]
 801280a:	4a40      	ldr	r2, [pc, #256]	; (801290c <USB_SetTurnaroundTime+0x120>)
 801280c:	4293      	cmp	r3, r2
 801280e:	d202      	bcs.n	8012816 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8012810:	230f      	movs	r3, #15
 8012812:	617b      	str	r3, [r7, #20]
 8012814:	e062      	b.n	80128dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8012816:	68bb      	ldr	r3, [r7, #8]
 8012818:	4a3c      	ldr	r2, [pc, #240]	; (801290c <USB_SetTurnaroundTime+0x120>)
 801281a:	4293      	cmp	r3, r2
 801281c:	d306      	bcc.n	801282c <USB_SetTurnaroundTime+0x40>
 801281e:	68bb      	ldr	r3, [r7, #8]
 8012820:	4a3b      	ldr	r2, [pc, #236]	; (8012910 <USB_SetTurnaroundTime+0x124>)
 8012822:	4293      	cmp	r3, r2
 8012824:	d202      	bcs.n	801282c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8012826:	230e      	movs	r3, #14
 8012828:	617b      	str	r3, [r7, #20]
 801282a:	e057      	b.n	80128dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801282c:	68bb      	ldr	r3, [r7, #8]
 801282e:	4a38      	ldr	r2, [pc, #224]	; (8012910 <USB_SetTurnaroundTime+0x124>)
 8012830:	4293      	cmp	r3, r2
 8012832:	d306      	bcc.n	8012842 <USB_SetTurnaroundTime+0x56>
 8012834:	68bb      	ldr	r3, [r7, #8]
 8012836:	4a37      	ldr	r2, [pc, #220]	; (8012914 <USB_SetTurnaroundTime+0x128>)
 8012838:	4293      	cmp	r3, r2
 801283a:	d202      	bcs.n	8012842 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801283c:	230d      	movs	r3, #13
 801283e:	617b      	str	r3, [r7, #20]
 8012840:	e04c      	b.n	80128dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8012842:	68bb      	ldr	r3, [r7, #8]
 8012844:	4a33      	ldr	r2, [pc, #204]	; (8012914 <USB_SetTurnaroundTime+0x128>)
 8012846:	4293      	cmp	r3, r2
 8012848:	d306      	bcc.n	8012858 <USB_SetTurnaroundTime+0x6c>
 801284a:	68bb      	ldr	r3, [r7, #8]
 801284c:	4a32      	ldr	r2, [pc, #200]	; (8012918 <USB_SetTurnaroundTime+0x12c>)
 801284e:	4293      	cmp	r3, r2
 8012850:	d802      	bhi.n	8012858 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8012852:	230c      	movs	r3, #12
 8012854:	617b      	str	r3, [r7, #20]
 8012856:	e041      	b.n	80128dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012858:	68bb      	ldr	r3, [r7, #8]
 801285a:	4a2f      	ldr	r2, [pc, #188]	; (8012918 <USB_SetTurnaroundTime+0x12c>)
 801285c:	4293      	cmp	r3, r2
 801285e:	d906      	bls.n	801286e <USB_SetTurnaroundTime+0x82>
 8012860:	68bb      	ldr	r3, [r7, #8]
 8012862:	4a2e      	ldr	r2, [pc, #184]	; (801291c <USB_SetTurnaroundTime+0x130>)
 8012864:	4293      	cmp	r3, r2
 8012866:	d802      	bhi.n	801286e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8012868:	230b      	movs	r3, #11
 801286a:	617b      	str	r3, [r7, #20]
 801286c:	e036      	b.n	80128dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801286e:	68bb      	ldr	r3, [r7, #8]
 8012870:	4a2a      	ldr	r2, [pc, #168]	; (801291c <USB_SetTurnaroundTime+0x130>)
 8012872:	4293      	cmp	r3, r2
 8012874:	d906      	bls.n	8012884 <USB_SetTurnaroundTime+0x98>
 8012876:	68bb      	ldr	r3, [r7, #8]
 8012878:	4a29      	ldr	r2, [pc, #164]	; (8012920 <USB_SetTurnaroundTime+0x134>)
 801287a:	4293      	cmp	r3, r2
 801287c:	d802      	bhi.n	8012884 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801287e:	230a      	movs	r3, #10
 8012880:	617b      	str	r3, [r7, #20]
 8012882:	e02b      	b.n	80128dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8012884:	68bb      	ldr	r3, [r7, #8]
 8012886:	4a26      	ldr	r2, [pc, #152]	; (8012920 <USB_SetTurnaroundTime+0x134>)
 8012888:	4293      	cmp	r3, r2
 801288a:	d906      	bls.n	801289a <USB_SetTurnaroundTime+0xae>
 801288c:	68bb      	ldr	r3, [r7, #8]
 801288e:	4a25      	ldr	r2, [pc, #148]	; (8012924 <USB_SetTurnaroundTime+0x138>)
 8012890:	4293      	cmp	r3, r2
 8012892:	d202      	bcs.n	801289a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8012894:	2309      	movs	r3, #9
 8012896:	617b      	str	r3, [r7, #20]
 8012898:	e020      	b.n	80128dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801289a:	68bb      	ldr	r3, [r7, #8]
 801289c:	4a21      	ldr	r2, [pc, #132]	; (8012924 <USB_SetTurnaroundTime+0x138>)
 801289e:	4293      	cmp	r3, r2
 80128a0:	d306      	bcc.n	80128b0 <USB_SetTurnaroundTime+0xc4>
 80128a2:	68bb      	ldr	r3, [r7, #8]
 80128a4:	4a20      	ldr	r2, [pc, #128]	; (8012928 <USB_SetTurnaroundTime+0x13c>)
 80128a6:	4293      	cmp	r3, r2
 80128a8:	d802      	bhi.n	80128b0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80128aa:	2308      	movs	r3, #8
 80128ac:	617b      	str	r3, [r7, #20]
 80128ae:	e015      	b.n	80128dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80128b0:	68bb      	ldr	r3, [r7, #8]
 80128b2:	4a1d      	ldr	r2, [pc, #116]	; (8012928 <USB_SetTurnaroundTime+0x13c>)
 80128b4:	4293      	cmp	r3, r2
 80128b6:	d906      	bls.n	80128c6 <USB_SetTurnaroundTime+0xda>
 80128b8:	68bb      	ldr	r3, [r7, #8]
 80128ba:	4a1c      	ldr	r2, [pc, #112]	; (801292c <USB_SetTurnaroundTime+0x140>)
 80128bc:	4293      	cmp	r3, r2
 80128be:	d202      	bcs.n	80128c6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80128c0:	2307      	movs	r3, #7
 80128c2:	617b      	str	r3, [r7, #20]
 80128c4:	e00a      	b.n	80128dc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80128c6:	2306      	movs	r3, #6
 80128c8:	617b      	str	r3, [r7, #20]
 80128ca:	e007      	b.n	80128dc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80128cc:	79fb      	ldrb	r3, [r7, #7]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d102      	bne.n	80128d8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80128d2:	2309      	movs	r3, #9
 80128d4:	617b      	str	r3, [r7, #20]
 80128d6:	e001      	b.n	80128dc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80128d8:	2309      	movs	r3, #9
 80128da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	68db      	ldr	r3, [r3, #12]
 80128e0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	68da      	ldr	r2, [r3, #12]
 80128ec:	697b      	ldr	r3, [r7, #20]
 80128ee:	029b      	lsls	r3, r3, #10
 80128f0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80128f4:	431a      	orrs	r2, r3
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80128fa:	2300      	movs	r3, #0
}
 80128fc:	4618      	mov	r0, r3
 80128fe:	371c      	adds	r7, #28
 8012900:	46bd      	mov	sp, r7
 8012902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012906:	4770      	bx	lr
 8012908:	00d8acbf 	.word	0x00d8acbf
 801290c:	00e4e1c0 	.word	0x00e4e1c0
 8012910:	00f42400 	.word	0x00f42400
 8012914:	01067380 	.word	0x01067380
 8012918:	011a499f 	.word	0x011a499f
 801291c:	01312cff 	.word	0x01312cff
 8012920:	014ca43f 	.word	0x014ca43f
 8012924:	016e3600 	.word	0x016e3600
 8012928:	01a6ab1f 	.word	0x01a6ab1f
 801292c:	01e84800 	.word	0x01e84800

08012930 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012930:	b480      	push	{r7}
 8012932:	b083      	sub	sp, #12
 8012934:	af00      	add	r7, sp, #0
 8012936:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	689b      	ldr	r3, [r3, #8]
 801293c:	f043 0201 	orr.w	r2, r3, #1
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012944:	2300      	movs	r3, #0
}
 8012946:	4618      	mov	r0, r3
 8012948:	370c      	adds	r7, #12
 801294a:	46bd      	mov	sp, r7
 801294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012950:	4770      	bx	lr

08012952 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012952:	b480      	push	{r7}
 8012954:	b083      	sub	sp, #12
 8012956:	af00      	add	r7, sp, #0
 8012958:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	689b      	ldr	r3, [r3, #8]
 801295e:	f023 0201 	bic.w	r2, r3, #1
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012966:	2300      	movs	r3, #0
}
 8012968:	4618      	mov	r0, r3
 801296a:	370c      	adds	r7, #12
 801296c:	46bd      	mov	sp, r7
 801296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012972:	4770      	bx	lr

08012974 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012974:	b580      	push	{r7, lr}
 8012976:	b084      	sub	sp, #16
 8012978:	af00      	add	r7, sp, #0
 801297a:	6078      	str	r0, [r7, #4]
 801297c:	460b      	mov	r3, r1
 801297e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8012980:	2300      	movs	r3, #0
 8012982:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	68db      	ldr	r3, [r3, #12]
 8012988:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012990:	78fb      	ldrb	r3, [r7, #3]
 8012992:	2b01      	cmp	r3, #1
 8012994:	d115      	bne.n	80129c2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	68db      	ldr	r3, [r3, #12]
 801299a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80129a2:	2001      	movs	r0, #1
 80129a4:	f7f0 ff16 	bl	80037d4 <HAL_Delay>
      ms++;
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	3301      	adds	r3, #1
 80129ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80129ae:	6878      	ldr	r0, [r7, #4]
 80129b0:	f001 f93f 	bl	8013c32 <USB_GetMode>
 80129b4:	4603      	mov	r3, r0
 80129b6:	2b01      	cmp	r3, #1
 80129b8:	d01e      	beq.n	80129f8 <USB_SetCurrentMode+0x84>
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	2b31      	cmp	r3, #49	; 0x31
 80129be:	d9f0      	bls.n	80129a2 <USB_SetCurrentMode+0x2e>
 80129c0:	e01a      	b.n	80129f8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80129c2:	78fb      	ldrb	r3, [r7, #3]
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d115      	bne.n	80129f4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	68db      	ldr	r3, [r3, #12]
 80129cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80129d4:	2001      	movs	r0, #1
 80129d6:	f7f0 fefd 	bl	80037d4 <HAL_Delay>
      ms++;
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	3301      	adds	r3, #1
 80129de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80129e0:	6878      	ldr	r0, [r7, #4]
 80129e2:	f001 f926 	bl	8013c32 <USB_GetMode>
 80129e6:	4603      	mov	r3, r0
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d005      	beq.n	80129f8 <USB_SetCurrentMode+0x84>
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	2b31      	cmp	r3, #49	; 0x31
 80129f0:	d9f0      	bls.n	80129d4 <USB_SetCurrentMode+0x60>
 80129f2:	e001      	b.n	80129f8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80129f4:	2301      	movs	r3, #1
 80129f6:	e005      	b.n	8012a04 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	2b32      	cmp	r3, #50	; 0x32
 80129fc:	d101      	bne.n	8012a02 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80129fe:	2301      	movs	r3, #1
 8012a00:	e000      	b.n	8012a04 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8012a02:	2300      	movs	r3, #0
}
 8012a04:	4618      	mov	r0, r3
 8012a06:	3710      	adds	r7, #16
 8012a08:	46bd      	mov	sp, r7
 8012a0a:	bd80      	pop	{r7, pc}

08012a0c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012a0c:	b084      	sub	sp, #16
 8012a0e:	b580      	push	{r7, lr}
 8012a10:	b086      	sub	sp, #24
 8012a12:	af00      	add	r7, sp, #0
 8012a14:	6078      	str	r0, [r7, #4]
 8012a16:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8012a1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8012a1e:	2300      	movs	r3, #0
 8012a20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8012a26:	2300      	movs	r3, #0
 8012a28:	613b      	str	r3, [r7, #16]
 8012a2a:	e009      	b.n	8012a40 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8012a2c:	687a      	ldr	r2, [r7, #4]
 8012a2e:	693b      	ldr	r3, [r7, #16]
 8012a30:	3340      	adds	r3, #64	; 0x40
 8012a32:	009b      	lsls	r3, r3, #2
 8012a34:	4413      	add	r3, r2
 8012a36:	2200      	movs	r2, #0
 8012a38:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8012a3a:	693b      	ldr	r3, [r7, #16]
 8012a3c:	3301      	adds	r3, #1
 8012a3e:	613b      	str	r3, [r7, #16]
 8012a40:	693b      	ldr	r3, [r7, #16]
 8012a42:	2b0e      	cmp	r3, #14
 8012a44:	d9f2      	bls.n	8012a2c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8012a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d11c      	bne.n	8012a86 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012a4c:	68fb      	ldr	r3, [r7, #12]
 8012a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a52:	685b      	ldr	r3, [r3, #4]
 8012a54:	68fa      	ldr	r2, [r7, #12]
 8012a56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012a5a:	f043 0302 	orr.w	r3, r3, #2
 8012a5e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a64:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	601a      	str	r2, [r3, #0]
 8012a84:	e005      	b.n	8012a92 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a8a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012a98:	461a      	mov	r2, r3
 8012a9a:	2300      	movs	r3, #0
 8012a9c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012aa4:	4619      	mov	r1, r3
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012aac:	461a      	mov	r2, r3
 8012aae:	680b      	ldr	r3, [r1, #0]
 8012ab0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ab4:	2b01      	cmp	r3, #1
 8012ab6:	d10c      	bne.n	8012ad2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8012ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d104      	bne.n	8012ac8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8012abe:	2100      	movs	r1, #0
 8012ac0:	6878      	ldr	r0, [r7, #4]
 8012ac2:	f000 f965 	bl	8012d90 <USB_SetDevSpeed>
 8012ac6:	e008      	b.n	8012ada <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8012ac8:	2101      	movs	r1, #1
 8012aca:	6878      	ldr	r0, [r7, #4]
 8012acc:	f000 f960 	bl	8012d90 <USB_SetDevSpeed>
 8012ad0:	e003      	b.n	8012ada <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8012ad2:	2103      	movs	r1, #3
 8012ad4:	6878      	ldr	r0, [r7, #4]
 8012ad6:	f000 f95b 	bl	8012d90 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012ada:	2110      	movs	r1, #16
 8012adc:	6878      	ldr	r0, [r7, #4]
 8012ade:	f000 f8f3 	bl	8012cc8 <USB_FlushTxFifo>
 8012ae2:	4603      	mov	r3, r0
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d001      	beq.n	8012aec <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8012ae8:	2301      	movs	r3, #1
 8012aea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012aec:	6878      	ldr	r0, [r7, #4]
 8012aee:	f000 f91f 	bl	8012d30 <USB_FlushRxFifo>
 8012af2:	4603      	mov	r3, r0
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d001      	beq.n	8012afc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8012af8:	2301      	movs	r3, #1
 8012afa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b02:	461a      	mov	r2, r3
 8012b04:	2300      	movs	r3, #0
 8012b06:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8012b08:	68fb      	ldr	r3, [r7, #12]
 8012b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b0e:	461a      	mov	r2, r3
 8012b10:	2300      	movs	r3, #0
 8012b12:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b1a:	461a      	mov	r2, r3
 8012b1c:	2300      	movs	r3, #0
 8012b1e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012b20:	2300      	movs	r3, #0
 8012b22:	613b      	str	r3, [r7, #16]
 8012b24:	e043      	b.n	8012bae <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012b26:	693b      	ldr	r3, [r7, #16]
 8012b28:	015a      	lsls	r2, r3, #5
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	4413      	add	r3, r2
 8012b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012b38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012b3c:	d118      	bne.n	8012b70 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8012b3e:	693b      	ldr	r3, [r7, #16]
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d10a      	bne.n	8012b5a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012b44:	693b      	ldr	r3, [r7, #16]
 8012b46:	015a      	lsls	r2, r3, #5
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	4413      	add	r3, r2
 8012b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b50:	461a      	mov	r2, r3
 8012b52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012b56:	6013      	str	r3, [r2, #0]
 8012b58:	e013      	b.n	8012b82 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012b5a:	693b      	ldr	r3, [r7, #16]
 8012b5c:	015a      	lsls	r2, r3, #5
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	4413      	add	r3, r2
 8012b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b66:	461a      	mov	r2, r3
 8012b68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012b6c:	6013      	str	r3, [r2, #0]
 8012b6e:	e008      	b.n	8012b82 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8012b70:	693b      	ldr	r3, [r7, #16]
 8012b72:	015a      	lsls	r2, r3, #5
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	4413      	add	r3, r2
 8012b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b7c:	461a      	mov	r2, r3
 8012b7e:	2300      	movs	r3, #0
 8012b80:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8012b82:	693b      	ldr	r3, [r7, #16]
 8012b84:	015a      	lsls	r2, r3, #5
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	4413      	add	r3, r2
 8012b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b8e:	461a      	mov	r2, r3
 8012b90:	2300      	movs	r3, #0
 8012b92:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012b94:	693b      	ldr	r3, [r7, #16]
 8012b96:	015a      	lsls	r2, r3, #5
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	4413      	add	r3, r2
 8012b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ba0:	461a      	mov	r2, r3
 8012ba2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012ba6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012ba8:	693b      	ldr	r3, [r7, #16]
 8012baa:	3301      	adds	r3, #1
 8012bac:	613b      	str	r3, [r7, #16]
 8012bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bb0:	693a      	ldr	r2, [r7, #16]
 8012bb2:	429a      	cmp	r2, r3
 8012bb4:	d3b7      	bcc.n	8012b26 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012bb6:	2300      	movs	r3, #0
 8012bb8:	613b      	str	r3, [r7, #16]
 8012bba:	e043      	b.n	8012c44 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012bbc:	693b      	ldr	r3, [r7, #16]
 8012bbe:	015a      	lsls	r2, r3, #5
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	4413      	add	r3, r2
 8012bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012bce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012bd2:	d118      	bne.n	8012c06 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8012bd4:	693b      	ldr	r3, [r7, #16]
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d10a      	bne.n	8012bf0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012bda:	693b      	ldr	r3, [r7, #16]
 8012bdc:	015a      	lsls	r2, r3, #5
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	4413      	add	r3, r2
 8012be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012be6:	461a      	mov	r2, r3
 8012be8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012bec:	6013      	str	r3, [r2, #0]
 8012bee:	e013      	b.n	8012c18 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012bf0:	693b      	ldr	r3, [r7, #16]
 8012bf2:	015a      	lsls	r2, r3, #5
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	4413      	add	r3, r2
 8012bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012bfc:	461a      	mov	r2, r3
 8012bfe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012c02:	6013      	str	r3, [r2, #0]
 8012c04:	e008      	b.n	8012c18 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012c06:	693b      	ldr	r3, [r7, #16]
 8012c08:	015a      	lsls	r2, r3, #5
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	4413      	add	r3, r2
 8012c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c12:	461a      	mov	r2, r3
 8012c14:	2300      	movs	r3, #0
 8012c16:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012c18:	693b      	ldr	r3, [r7, #16]
 8012c1a:	015a      	lsls	r2, r3, #5
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	4413      	add	r3, r2
 8012c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c24:	461a      	mov	r2, r3
 8012c26:	2300      	movs	r3, #0
 8012c28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012c2a:	693b      	ldr	r3, [r7, #16]
 8012c2c:	015a      	lsls	r2, r3, #5
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	4413      	add	r3, r2
 8012c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c36:	461a      	mov	r2, r3
 8012c38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012c3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012c3e:	693b      	ldr	r3, [r7, #16]
 8012c40:	3301      	adds	r3, #1
 8012c42:	613b      	str	r3, [r7, #16]
 8012c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c46:	693a      	ldr	r2, [r7, #16]
 8012c48:	429a      	cmp	r2, r3
 8012c4a:	d3b7      	bcc.n	8012bbc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c52:	691b      	ldr	r3, [r3, #16]
 8012c54:	68fa      	ldr	r2, [r7, #12]
 8012c56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012c5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012c5e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	2200      	movs	r2, #0
 8012c64:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8012c6c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8012c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d105      	bne.n	8012c80 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	699b      	ldr	r3, [r3, #24]
 8012c78:	f043 0210 	orr.w	r2, r3, #16
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	699a      	ldr	r2, [r3, #24]
 8012c84:	4b0e      	ldr	r3, [pc, #56]	; (8012cc0 <USB_DevInit+0x2b4>)
 8012c86:	4313      	orrs	r3, r2
 8012c88:	687a      	ldr	r2, [r7, #4]
 8012c8a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8012c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d005      	beq.n	8012c9e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	699b      	ldr	r3, [r3, #24]
 8012c96:	f043 0208 	orr.w	r2, r3, #8
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8012c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ca0:	2b01      	cmp	r3, #1
 8012ca2:	d105      	bne.n	8012cb0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	699a      	ldr	r2, [r3, #24]
 8012ca8:	4b06      	ldr	r3, [pc, #24]	; (8012cc4 <USB_DevInit+0x2b8>)
 8012caa:	4313      	orrs	r3, r2
 8012cac:	687a      	ldr	r2, [r7, #4]
 8012cae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8012cb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	3718      	adds	r7, #24
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012cbc:	b004      	add	sp, #16
 8012cbe:	4770      	bx	lr
 8012cc0:	803c3800 	.word	0x803c3800
 8012cc4:	40000004 	.word	0x40000004

08012cc8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012cc8:	b480      	push	{r7}
 8012cca:	b085      	sub	sp, #20
 8012ccc:	af00      	add	r7, sp, #0
 8012cce:	6078      	str	r0, [r7, #4]
 8012cd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	3301      	adds	r3, #1
 8012cda:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	4a13      	ldr	r2, [pc, #76]	; (8012d2c <USB_FlushTxFifo+0x64>)
 8012ce0:	4293      	cmp	r3, r2
 8012ce2:	d901      	bls.n	8012ce8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8012ce4:	2303      	movs	r3, #3
 8012ce6:	e01b      	b.n	8012d20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	691b      	ldr	r3, [r3, #16]
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	daf2      	bge.n	8012cd6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8012cf0:	2300      	movs	r3, #0
 8012cf2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012cf4:	683b      	ldr	r3, [r7, #0]
 8012cf6:	019b      	lsls	r3, r3, #6
 8012cf8:	f043 0220 	orr.w	r2, r3, #32
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	3301      	adds	r3, #1
 8012d04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	4a08      	ldr	r2, [pc, #32]	; (8012d2c <USB_FlushTxFifo+0x64>)
 8012d0a:	4293      	cmp	r3, r2
 8012d0c:	d901      	bls.n	8012d12 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8012d0e:	2303      	movs	r3, #3
 8012d10:	e006      	b.n	8012d20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	691b      	ldr	r3, [r3, #16]
 8012d16:	f003 0320 	and.w	r3, r3, #32
 8012d1a:	2b20      	cmp	r3, #32
 8012d1c:	d0f0      	beq.n	8012d00 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8012d1e:	2300      	movs	r3, #0
}
 8012d20:	4618      	mov	r0, r3
 8012d22:	3714      	adds	r7, #20
 8012d24:	46bd      	mov	sp, r7
 8012d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d2a:	4770      	bx	lr
 8012d2c:	00030d40 	.word	0x00030d40

08012d30 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012d30:	b480      	push	{r7}
 8012d32:	b085      	sub	sp, #20
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012d38:	2300      	movs	r3, #0
 8012d3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	3301      	adds	r3, #1
 8012d40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	4a11      	ldr	r2, [pc, #68]	; (8012d8c <USB_FlushRxFifo+0x5c>)
 8012d46:	4293      	cmp	r3, r2
 8012d48:	d901      	bls.n	8012d4e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8012d4a:	2303      	movs	r3, #3
 8012d4c:	e018      	b.n	8012d80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	691b      	ldr	r3, [r3, #16]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	daf2      	bge.n	8012d3c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8012d56:	2300      	movs	r3, #0
 8012d58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	2210      	movs	r2, #16
 8012d5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	3301      	adds	r3, #1
 8012d64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	4a08      	ldr	r2, [pc, #32]	; (8012d8c <USB_FlushRxFifo+0x5c>)
 8012d6a:	4293      	cmp	r3, r2
 8012d6c:	d901      	bls.n	8012d72 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8012d6e:	2303      	movs	r3, #3
 8012d70:	e006      	b.n	8012d80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	691b      	ldr	r3, [r3, #16]
 8012d76:	f003 0310 	and.w	r3, r3, #16
 8012d7a:	2b10      	cmp	r3, #16
 8012d7c:	d0f0      	beq.n	8012d60 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8012d7e:	2300      	movs	r3, #0
}
 8012d80:	4618      	mov	r0, r3
 8012d82:	3714      	adds	r7, #20
 8012d84:	46bd      	mov	sp, r7
 8012d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d8a:	4770      	bx	lr
 8012d8c:	00030d40 	.word	0x00030d40

08012d90 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8012d90:	b480      	push	{r7}
 8012d92:	b085      	sub	sp, #20
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	6078      	str	r0, [r7, #4]
 8012d98:	460b      	mov	r3, r1
 8012d9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012da6:	681a      	ldr	r2, [r3, #0]
 8012da8:	78fb      	ldrb	r3, [r7, #3]
 8012daa:	68f9      	ldr	r1, [r7, #12]
 8012dac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012db0:	4313      	orrs	r3, r2
 8012db2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8012db4:	2300      	movs	r3, #0
}
 8012db6:	4618      	mov	r0, r3
 8012db8:	3714      	adds	r7, #20
 8012dba:	46bd      	mov	sp, r7
 8012dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dc0:	4770      	bx	lr

08012dc2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8012dc2:	b480      	push	{r7}
 8012dc4:	b087      	sub	sp, #28
 8012dc6:	af00      	add	r7, sp, #0
 8012dc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8012dce:	693b      	ldr	r3, [r7, #16]
 8012dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012dd4:	689b      	ldr	r3, [r3, #8]
 8012dd6:	f003 0306 	and.w	r3, r3, #6
 8012dda:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d102      	bne.n	8012de8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8012de2:	2300      	movs	r3, #0
 8012de4:	75fb      	strb	r3, [r7, #23]
 8012de6:	e00a      	b.n	8012dfe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	2b02      	cmp	r3, #2
 8012dec:	d002      	beq.n	8012df4 <USB_GetDevSpeed+0x32>
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	2b06      	cmp	r3, #6
 8012df2:	d102      	bne.n	8012dfa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8012df4:	2302      	movs	r3, #2
 8012df6:	75fb      	strb	r3, [r7, #23]
 8012df8:	e001      	b.n	8012dfe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8012dfa:	230f      	movs	r3, #15
 8012dfc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8012dfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e00:	4618      	mov	r0, r3
 8012e02:	371c      	adds	r7, #28
 8012e04:	46bd      	mov	sp, r7
 8012e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e0a:	4770      	bx	lr

08012e0c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012e0c:	b480      	push	{r7}
 8012e0e:	b085      	sub	sp, #20
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	6078      	str	r0, [r7, #4]
 8012e14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012e1a:	683b      	ldr	r3, [r7, #0]
 8012e1c:	781b      	ldrb	r3, [r3, #0]
 8012e1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012e20:	683b      	ldr	r3, [r7, #0]
 8012e22:	785b      	ldrb	r3, [r3, #1]
 8012e24:	2b01      	cmp	r3, #1
 8012e26:	d139      	bne.n	8012e9c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e2e:	69da      	ldr	r2, [r3, #28]
 8012e30:	683b      	ldr	r3, [r7, #0]
 8012e32:	781b      	ldrb	r3, [r3, #0]
 8012e34:	f003 030f 	and.w	r3, r3, #15
 8012e38:	2101      	movs	r1, #1
 8012e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8012e3e:	b29b      	uxth	r3, r3
 8012e40:	68f9      	ldr	r1, [r7, #12]
 8012e42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012e46:	4313      	orrs	r3, r2
 8012e48:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8012e4a:	68bb      	ldr	r3, [r7, #8]
 8012e4c:	015a      	lsls	r2, r3, #5
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	4413      	add	r3, r2
 8012e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d153      	bne.n	8012f08 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012e60:	68bb      	ldr	r3, [r7, #8]
 8012e62:	015a      	lsls	r2, r3, #5
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	4413      	add	r3, r2
 8012e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e6c:	681a      	ldr	r2, [r3, #0]
 8012e6e:	683b      	ldr	r3, [r7, #0]
 8012e70:	689b      	ldr	r3, [r3, #8]
 8012e72:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012e76:	683b      	ldr	r3, [r7, #0]
 8012e78:	791b      	ldrb	r3, [r3, #4]
 8012e7a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012e7c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012e7e:	68bb      	ldr	r3, [r7, #8]
 8012e80:	059b      	lsls	r3, r3, #22
 8012e82:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012e84:	431a      	orrs	r2, r3
 8012e86:	68bb      	ldr	r3, [r7, #8]
 8012e88:	0159      	lsls	r1, r3, #5
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	440b      	add	r3, r1
 8012e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e92:	4619      	mov	r1, r3
 8012e94:	4b20      	ldr	r3, [pc, #128]	; (8012f18 <USB_ActivateEndpoint+0x10c>)
 8012e96:	4313      	orrs	r3, r2
 8012e98:	600b      	str	r3, [r1, #0]
 8012e9a:	e035      	b.n	8012f08 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ea2:	69da      	ldr	r2, [r3, #28]
 8012ea4:	683b      	ldr	r3, [r7, #0]
 8012ea6:	781b      	ldrb	r3, [r3, #0]
 8012ea8:	f003 030f 	and.w	r3, r3, #15
 8012eac:	2101      	movs	r1, #1
 8012eae:	fa01 f303 	lsl.w	r3, r1, r3
 8012eb2:	041b      	lsls	r3, r3, #16
 8012eb4:	68f9      	ldr	r1, [r7, #12]
 8012eb6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012eba:	4313      	orrs	r3, r2
 8012ebc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8012ebe:	68bb      	ldr	r3, [r7, #8]
 8012ec0:	015a      	lsls	r2, r3, #5
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	4413      	add	r3, r2
 8012ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d119      	bne.n	8012f08 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012ed4:	68bb      	ldr	r3, [r7, #8]
 8012ed6:	015a      	lsls	r2, r3, #5
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	4413      	add	r3, r2
 8012edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ee0:	681a      	ldr	r2, [r3, #0]
 8012ee2:	683b      	ldr	r3, [r7, #0]
 8012ee4:	689b      	ldr	r3, [r3, #8]
 8012ee6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8012eea:	683b      	ldr	r3, [r7, #0]
 8012eec:	791b      	ldrb	r3, [r3, #4]
 8012eee:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012ef0:	430b      	orrs	r3, r1
 8012ef2:	431a      	orrs	r2, r3
 8012ef4:	68bb      	ldr	r3, [r7, #8]
 8012ef6:	0159      	lsls	r1, r3, #5
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	440b      	add	r3, r1
 8012efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f00:	4619      	mov	r1, r3
 8012f02:	4b05      	ldr	r3, [pc, #20]	; (8012f18 <USB_ActivateEndpoint+0x10c>)
 8012f04:	4313      	orrs	r3, r2
 8012f06:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8012f08:	2300      	movs	r3, #0
}
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	3714      	adds	r7, #20
 8012f0e:	46bd      	mov	sp, r7
 8012f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f14:	4770      	bx	lr
 8012f16:	bf00      	nop
 8012f18:	10008000 	.word	0x10008000

08012f1c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012f1c:	b480      	push	{r7}
 8012f1e:	b085      	sub	sp, #20
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	6078      	str	r0, [r7, #4]
 8012f24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012f2a:	683b      	ldr	r3, [r7, #0]
 8012f2c:	781b      	ldrb	r3, [r3, #0]
 8012f2e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8012f30:	683b      	ldr	r3, [r7, #0]
 8012f32:	785b      	ldrb	r3, [r3, #1]
 8012f34:	2b01      	cmp	r3, #1
 8012f36:	d161      	bne.n	8012ffc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012f38:	68bb      	ldr	r3, [r7, #8]
 8012f3a:	015a      	lsls	r2, r3, #5
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	4413      	add	r3, r2
 8012f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012f4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012f4e:	d11f      	bne.n	8012f90 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8012f50:	68bb      	ldr	r3, [r7, #8]
 8012f52:	015a      	lsls	r2, r3, #5
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	4413      	add	r3, r2
 8012f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	68ba      	ldr	r2, [r7, #8]
 8012f60:	0151      	lsls	r1, r2, #5
 8012f62:	68fa      	ldr	r2, [r7, #12]
 8012f64:	440a      	add	r2, r1
 8012f66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012f6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012f6e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8012f70:	68bb      	ldr	r3, [r7, #8]
 8012f72:	015a      	lsls	r2, r3, #5
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	4413      	add	r3, r2
 8012f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	68ba      	ldr	r2, [r7, #8]
 8012f80:	0151      	lsls	r1, r2, #5
 8012f82:	68fa      	ldr	r2, [r7, #12]
 8012f84:	440a      	add	r2, r1
 8012f86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012f8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012f8e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012f98:	683b      	ldr	r3, [r7, #0]
 8012f9a:	781b      	ldrb	r3, [r3, #0]
 8012f9c:	f003 030f 	and.w	r3, r3, #15
 8012fa0:	2101      	movs	r1, #1
 8012fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8012fa6:	b29b      	uxth	r3, r3
 8012fa8:	43db      	mvns	r3, r3
 8012faa:	68f9      	ldr	r1, [r7, #12]
 8012fac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012fb0:	4013      	ands	r3, r2
 8012fb2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fba:	69da      	ldr	r2, [r3, #28]
 8012fbc:	683b      	ldr	r3, [r7, #0]
 8012fbe:	781b      	ldrb	r3, [r3, #0]
 8012fc0:	f003 030f 	and.w	r3, r3, #15
 8012fc4:	2101      	movs	r1, #1
 8012fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8012fca:	b29b      	uxth	r3, r3
 8012fcc:	43db      	mvns	r3, r3
 8012fce:	68f9      	ldr	r1, [r7, #12]
 8012fd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012fd4:	4013      	ands	r3, r2
 8012fd6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8012fd8:	68bb      	ldr	r3, [r7, #8]
 8012fda:	015a      	lsls	r2, r3, #5
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	4413      	add	r3, r2
 8012fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012fe4:	681a      	ldr	r2, [r3, #0]
 8012fe6:	68bb      	ldr	r3, [r7, #8]
 8012fe8:	0159      	lsls	r1, r3, #5
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	440b      	add	r3, r1
 8012fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ff2:	4619      	mov	r1, r3
 8012ff4:	4b35      	ldr	r3, [pc, #212]	; (80130cc <USB_DeactivateEndpoint+0x1b0>)
 8012ff6:	4013      	ands	r3, r2
 8012ff8:	600b      	str	r3, [r1, #0]
 8012ffa:	e060      	b.n	80130be <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012ffc:	68bb      	ldr	r3, [r7, #8]
 8012ffe:	015a      	lsls	r2, r3, #5
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	4413      	add	r3, r2
 8013004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801300e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013012:	d11f      	bne.n	8013054 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8013014:	68bb      	ldr	r3, [r7, #8]
 8013016:	015a      	lsls	r2, r3, #5
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	4413      	add	r3, r2
 801301c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	68ba      	ldr	r2, [r7, #8]
 8013024:	0151      	lsls	r1, r2, #5
 8013026:	68fa      	ldr	r2, [r7, #12]
 8013028:	440a      	add	r2, r1
 801302a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801302e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013032:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8013034:	68bb      	ldr	r3, [r7, #8]
 8013036:	015a      	lsls	r2, r3, #5
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	4413      	add	r3, r2
 801303c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013040:	681b      	ldr	r3, [r3, #0]
 8013042:	68ba      	ldr	r2, [r7, #8]
 8013044:	0151      	lsls	r1, r2, #5
 8013046:	68fa      	ldr	r2, [r7, #12]
 8013048:	440a      	add	r2, r1
 801304a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801304e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013052:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801305a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801305c:	683b      	ldr	r3, [r7, #0]
 801305e:	781b      	ldrb	r3, [r3, #0]
 8013060:	f003 030f 	and.w	r3, r3, #15
 8013064:	2101      	movs	r1, #1
 8013066:	fa01 f303 	lsl.w	r3, r1, r3
 801306a:	041b      	lsls	r3, r3, #16
 801306c:	43db      	mvns	r3, r3
 801306e:	68f9      	ldr	r1, [r7, #12]
 8013070:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013074:	4013      	ands	r3, r2
 8013076:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801307e:	69da      	ldr	r2, [r3, #28]
 8013080:	683b      	ldr	r3, [r7, #0]
 8013082:	781b      	ldrb	r3, [r3, #0]
 8013084:	f003 030f 	and.w	r3, r3, #15
 8013088:	2101      	movs	r1, #1
 801308a:	fa01 f303 	lsl.w	r3, r1, r3
 801308e:	041b      	lsls	r3, r3, #16
 8013090:	43db      	mvns	r3, r3
 8013092:	68f9      	ldr	r1, [r7, #12]
 8013094:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013098:	4013      	ands	r3, r2
 801309a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801309c:	68bb      	ldr	r3, [r7, #8]
 801309e:	015a      	lsls	r2, r3, #5
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	4413      	add	r3, r2
 80130a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80130a8:	681a      	ldr	r2, [r3, #0]
 80130aa:	68bb      	ldr	r3, [r7, #8]
 80130ac:	0159      	lsls	r1, r3, #5
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	440b      	add	r3, r1
 80130b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80130b6:	4619      	mov	r1, r3
 80130b8:	4b05      	ldr	r3, [pc, #20]	; (80130d0 <USB_DeactivateEndpoint+0x1b4>)
 80130ba:	4013      	ands	r3, r2
 80130bc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80130be:	2300      	movs	r3, #0
}
 80130c0:	4618      	mov	r0, r3
 80130c2:	3714      	adds	r7, #20
 80130c4:	46bd      	mov	sp, r7
 80130c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ca:	4770      	bx	lr
 80130cc:	ec337800 	.word	0xec337800
 80130d0:	eff37800 	.word	0xeff37800

080130d4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80130d4:	b580      	push	{r7, lr}
 80130d6:	b08a      	sub	sp, #40	; 0x28
 80130d8:	af02      	add	r7, sp, #8
 80130da:	60f8      	str	r0, [r7, #12]
 80130dc:	60b9      	str	r1, [r7, #8]
 80130de:	4613      	mov	r3, r2
 80130e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80130e6:	68bb      	ldr	r3, [r7, #8]
 80130e8:	781b      	ldrb	r3, [r3, #0]
 80130ea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80130ec:	68bb      	ldr	r3, [r7, #8]
 80130ee:	785b      	ldrb	r3, [r3, #1]
 80130f0:	2b01      	cmp	r3, #1
 80130f2:	f040 8181 	bne.w	80133f8 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80130f6:	68bb      	ldr	r3, [r7, #8]
 80130f8:	691b      	ldr	r3, [r3, #16]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d132      	bne.n	8013164 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80130fe:	69bb      	ldr	r3, [r7, #24]
 8013100:	015a      	lsls	r2, r3, #5
 8013102:	69fb      	ldr	r3, [r7, #28]
 8013104:	4413      	add	r3, r2
 8013106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801310a:	691a      	ldr	r2, [r3, #16]
 801310c:	69bb      	ldr	r3, [r7, #24]
 801310e:	0159      	lsls	r1, r3, #5
 8013110:	69fb      	ldr	r3, [r7, #28]
 8013112:	440b      	add	r3, r1
 8013114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013118:	4619      	mov	r1, r3
 801311a:	4ba5      	ldr	r3, [pc, #660]	; (80133b0 <USB_EPStartXfer+0x2dc>)
 801311c:	4013      	ands	r3, r2
 801311e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013120:	69bb      	ldr	r3, [r7, #24]
 8013122:	015a      	lsls	r2, r3, #5
 8013124:	69fb      	ldr	r3, [r7, #28]
 8013126:	4413      	add	r3, r2
 8013128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801312c:	691b      	ldr	r3, [r3, #16]
 801312e:	69ba      	ldr	r2, [r7, #24]
 8013130:	0151      	lsls	r1, r2, #5
 8013132:	69fa      	ldr	r2, [r7, #28]
 8013134:	440a      	add	r2, r1
 8013136:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801313a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801313e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013140:	69bb      	ldr	r3, [r7, #24]
 8013142:	015a      	lsls	r2, r3, #5
 8013144:	69fb      	ldr	r3, [r7, #28]
 8013146:	4413      	add	r3, r2
 8013148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801314c:	691a      	ldr	r2, [r3, #16]
 801314e:	69bb      	ldr	r3, [r7, #24]
 8013150:	0159      	lsls	r1, r3, #5
 8013152:	69fb      	ldr	r3, [r7, #28]
 8013154:	440b      	add	r3, r1
 8013156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801315a:	4619      	mov	r1, r3
 801315c:	4b95      	ldr	r3, [pc, #596]	; (80133b4 <USB_EPStartXfer+0x2e0>)
 801315e:	4013      	ands	r3, r2
 8013160:	610b      	str	r3, [r1, #16]
 8013162:	e092      	b.n	801328a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013164:	69bb      	ldr	r3, [r7, #24]
 8013166:	015a      	lsls	r2, r3, #5
 8013168:	69fb      	ldr	r3, [r7, #28]
 801316a:	4413      	add	r3, r2
 801316c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013170:	691a      	ldr	r2, [r3, #16]
 8013172:	69bb      	ldr	r3, [r7, #24]
 8013174:	0159      	lsls	r1, r3, #5
 8013176:	69fb      	ldr	r3, [r7, #28]
 8013178:	440b      	add	r3, r1
 801317a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801317e:	4619      	mov	r1, r3
 8013180:	4b8c      	ldr	r3, [pc, #560]	; (80133b4 <USB_EPStartXfer+0x2e0>)
 8013182:	4013      	ands	r3, r2
 8013184:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013186:	69bb      	ldr	r3, [r7, #24]
 8013188:	015a      	lsls	r2, r3, #5
 801318a:	69fb      	ldr	r3, [r7, #28]
 801318c:	4413      	add	r3, r2
 801318e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013192:	691a      	ldr	r2, [r3, #16]
 8013194:	69bb      	ldr	r3, [r7, #24]
 8013196:	0159      	lsls	r1, r3, #5
 8013198:	69fb      	ldr	r3, [r7, #28]
 801319a:	440b      	add	r3, r1
 801319c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131a0:	4619      	mov	r1, r3
 80131a2:	4b83      	ldr	r3, [pc, #524]	; (80133b0 <USB_EPStartXfer+0x2dc>)
 80131a4:	4013      	ands	r3, r2
 80131a6:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80131a8:	69bb      	ldr	r3, [r7, #24]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d11a      	bne.n	80131e4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80131ae:	68bb      	ldr	r3, [r7, #8]
 80131b0:	691a      	ldr	r2, [r3, #16]
 80131b2:	68bb      	ldr	r3, [r7, #8]
 80131b4:	689b      	ldr	r3, [r3, #8]
 80131b6:	429a      	cmp	r2, r3
 80131b8:	d903      	bls.n	80131c2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80131ba:	68bb      	ldr	r3, [r7, #8]
 80131bc:	689a      	ldr	r2, [r3, #8]
 80131be:	68bb      	ldr	r3, [r7, #8]
 80131c0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80131c2:	69bb      	ldr	r3, [r7, #24]
 80131c4:	015a      	lsls	r2, r3, #5
 80131c6:	69fb      	ldr	r3, [r7, #28]
 80131c8:	4413      	add	r3, r2
 80131ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131ce:	691b      	ldr	r3, [r3, #16]
 80131d0:	69ba      	ldr	r2, [r7, #24]
 80131d2:	0151      	lsls	r1, r2, #5
 80131d4:	69fa      	ldr	r2, [r7, #28]
 80131d6:	440a      	add	r2, r1
 80131d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80131dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80131e0:	6113      	str	r3, [r2, #16]
 80131e2:	e01b      	b.n	801321c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80131e4:	69bb      	ldr	r3, [r7, #24]
 80131e6:	015a      	lsls	r2, r3, #5
 80131e8:	69fb      	ldr	r3, [r7, #28]
 80131ea:	4413      	add	r3, r2
 80131ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131f0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80131f2:	68bb      	ldr	r3, [r7, #8]
 80131f4:	6919      	ldr	r1, [r3, #16]
 80131f6:	68bb      	ldr	r3, [r7, #8]
 80131f8:	689b      	ldr	r3, [r3, #8]
 80131fa:	440b      	add	r3, r1
 80131fc:	1e59      	subs	r1, r3, #1
 80131fe:	68bb      	ldr	r3, [r7, #8]
 8013200:	689b      	ldr	r3, [r3, #8]
 8013202:	fbb1 f3f3 	udiv	r3, r1, r3
 8013206:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013208:	4b6b      	ldr	r3, [pc, #428]	; (80133b8 <USB_EPStartXfer+0x2e4>)
 801320a:	400b      	ands	r3, r1
 801320c:	69b9      	ldr	r1, [r7, #24]
 801320e:	0148      	lsls	r0, r1, #5
 8013210:	69f9      	ldr	r1, [r7, #28]
 8013212:	4401      	add	r1, r0
 8013214:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013218:	4313      	orrs	r3, r2
 801321a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801321c:	69bb      	ldr	r3, [r7, #24]
 801321e:	015a      	lsls	r2, r3, #5
 8013220:	69fb      	ldr	r3, [r7, #28]
 8013222:	4413      	add	r3, r2
 8013224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013228:	691a      	ldr	r2, [r3, #16]
 801322a:	68bb      	ldr	r3, [r7, #8]
 801322c:	691b      	ldr	r3, [r3, #16]
 801322e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013232:	69b9      	ldr	r1, [r7, #24]
 8013234:	0148      	lsls	r0, r1, #5
 8013236:	69f9      	ldr	r1, [r7, #28]
 8013238:	4401      	add	r1, r0
 801323a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801323e:	4313      	orrs	r3, r2
 8013240:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8013242:	68bb      	ldr	r3, [r7, #8]
 8013244:	791b      	ldrb	r3, [r3, #4]
 8013246:	2b01      	cmp	r3, #1
 8013248:	d11f      	bne.n	801328a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801324a:	69bb      	ldr	r3, [r7, #24]
 801324c:	015a      	lsls	r2, r3, #5
 801324e:	69fb      	ldr	r3, [r7, #28]
 8013250:	4413      	add	r3, r2
 8013252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013256:	691b      	ldr	r3, [r3, #16]
 8013258:	69ba      	ldr	r2, [r7, #24]
 801325a:	0151      	lsls	r1, r2, #5
 801325c:	69fa      	ldr	r2, [r7, #28]
 801325e:	440a      	add	r2, r1
 8013260:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013264:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8013268:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801326a:	69bb      	ldr	r3, [r7, #24]
 801326c:	015a      	lsls	r2, r3, #5
 801326e:	69fb      	ldr	r3, [r7, #28]
 8013270:	4413      	add	r3, r2
 8013272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013276:	691b      	ldr	r3, [r3, #16]
 8013278:	69ba      	ldr	r2, [r7, #24]
 801327a:	0151      	lsls	r1, r2, #5
 801327c:	69fa      	ldr	r2, [r7, #28]
 801327e:	440a      	add	r2, r1
 8013280:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013284:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013288:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801328a:	79fb      	ldrb	r3, [r7, #7]
 801328c:	2b01      	cmp	r3, #1
 801328e:	d14b      	bne.n	8013328 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8013290:	68bb      	ldr	r3, [r7, #8]
 8013292:	69db      	ldr	r3, [r3, #28]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d009      	beq.n	80132ac <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013298:	69bb      	ldr	r3, [r7, #24]
 801329a:	015a      	lsls	r2, r3, #5
 801329c:	69fb      	ldr	r3, [r7, #28]
 801329e:	4413      	add	r3, r2
 80132a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132a4:	461a      	mov	r2, r3
 80132a6:	68bb      	ldr	r3, [r7, #8]
 80132a8:	69db      	ldr	r3, [r3, #28]
 80132aa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80132ac:	68bb      	ldr	r3, [r7, #8]
 80132ae:	791b      	ldrb	r3, [r3, #4]
 80132b0:	2b01      	cmp	r3, #1
 80132b2:	d128      	bne.n	8013306 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80132b4:	69fb      	ldr	r3, [r7, #28]
 80132b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80132ba:	689b      	ldr	r3, [r3, #8]
 80132bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d110      	bne.n	80132e6 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80132c4:	69bb      	ldr	r3, [r7, #24]
 80132c6:	015a      	lsls	r2, r3, #5
 80132c8:	69fb      	ldr	r3, [r7, #28]
 80132ca:	4413      	add	r3, r2
 80132cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	69ba      	ldr	r2, [r7, #24]
 80132d4:	0151      	lsls	r1, r2, #5
 80132d6:	69fa      	ldr	r2, [r7, #28]
 80132d8:	440a      	add	r2, r1
 80132da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80132de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80132e2:	6013      	str	r3, [r2, #0]
 80132e4:	e00f      	b.n	8013306 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80132e6:	69bb      	ldr	r3, [r7, #24]
 80132e8:	015a      	lsls	r2, r3, #5
 80132ea:	69fb      	ldr	r3, [r7, #28]
 80132ec:	4413      	add	r3, r2
 80132ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	69ba      	ldr	r2, [r7, #24]
 80132f6:	0151      	lsls	r1, r2, #5
 80132f8:	69fa      	ldr	r2, [r7, #28]
 80132fa:	440a      	add	r2, r1
 80132fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013304:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013306:	69bb      	ldr	r3, [r7, #24]
 8013308:	015a      	lsls	r2, r3, #5
 801330a:	69fb      	ldr	r3, [r7, #28]
 801330c:	4413      	add	r3, r2
 801330e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	69ba      	ldr	r2, [r7, #24]
 8013316:	0151      	lsls	r1, r2, #5
 8013318:	69fa      	ldr	r2, [r7, #28]
 801331a:	440a      	add	r2, r1
 801331c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013320:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013324:	6013      	str	r3, [r2, #0]
 8013326:	e16a      	b.n	80135fe <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013328:	69bb      	ldr	r3, [r7, #24]
 801332a:	015a      	lsls	r2, r3, #5
 801332c:	69fb      	ldr	r3, [r7, #28]
 801332e:	4413      	add	r3, r2
 8013330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	69ba      	ldr	r2, [r7, #24]
 8013338:	0151      	lsls	r1, r2, #5
 801333a:	69fa      	ldr	r2, [r7, #28]
 801333c:	440a      	add	r2, r1
 801333e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013342:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013346:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8013348:	68bb      	ldr	r3, [r7, #8]
 801334a:	791b      	ldrb	r3, [r3, #4]
 801334c:	2b01      	cmp	r3, #1
 801334e:	d015      	beq.n	801337c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8013350:	68bb      	ldr	r3, [r7, #8]
 8013352:	691b      	ldr	r3, [r3, #16]
 8013354:	2b00      	cmp	r3, #0
 8013356:	f000 8152 	beq.w	80135fe <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801335a:	69fb      	ldr	r3, [r7, #28]
 801335c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013362:	68bb      	ldr	r3, [r7, #8]
 8013364:	781b      	ldrb	r3, [r3, #0]
 8013366:	f003 030f 	and.w	r3, r3, #15
 801336a:	2101      	movs	r1, #1
 801336c:	fa01 f303 	lsl.w	r3, r1, r3
 8013370:	69f9      	ldr	r1, [r7, #28]
 8013372:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013376:	4313      	orrs	r3, r2
 8013378:	634b      	str	r3, [r1, #52]	; 0x34
 801337a:	e140      	b.n	80135fe <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801337c:	69fb      	ldr	r3, [r7, #28]
 801337e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013382:	689b      	ldr	r3, [r3, #8]
 8013384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013388:	2b00      	cmp	r3, #0
 801338a:	d117      	bne.n	80133bc <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801338c:	69bb      	ldr	r3, [r7, #24]
 801338e:	015a      	lsls	r2, r3, #5
 8013390:	69fb      	ldr	r3, [r7, #28]
 8013392:	4413      	add	r3, r2
 8013394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013398:	681b      	ldr	r3, [r3, #0]
 801339a:	69ba      	ldr	r2, [r7, #24]
 801339c:	0151      	lsls	r1, r2, #5
 801339e:	69fa      	ldr	r2, [r7, #28]
 80133a0:	440a      	add	r2, r1
 80133a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80133a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80133aa:	6013      	str	r3, [r2, #0]
 80133ac:	e016      	b.n	80133dc <USB_EPStartXfer+0x308>
 80133ae:	bf00      	nop
 80133b0:	e007ffff 	.word	0xe007ffff
 80133b4:	fff80000 	.word	0xfff80000
 80133b8:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80133bc:	69bb      	ldr	r3, [r7, #24]
 80133be:	015a      	lsls	r2, r3, #5
 80133c0:	69fb      	ldr	r3, [r7, #28]
 80133c2:	4413      	add	r3, r2
 80133c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	69ba      	ldr	r2, [r7, #24]
 80133cc:	0151      	lsls	r1, r2, #5
 80133ce:	69fa      	ldr	r2, [r7, #28]
 80133d0:	440a      	add	r2, r1
 80133d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80133d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80133da:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80133dc:	68bb      	ldr	r3, [r7, #8]
 80133de:	68d9      	ldr	r1, [r3, #12]
 80133e0:	68bb      	ldr	r3, [r7, #8]
 80133e2:	781a      	ldrb	r2, [r3, #0]
 80133e4:	68bb      	ldr	r3, [r7, #8]
 80133e6:	691b      	ldr	r3, [r3, #16]
 80133e8:	b298      	uxth	r0, r3
 80133ea:	79fb      	ldrb	r3, [r7, #7]
 80133ec:	9300      	str	r3, [sp, #0]
 80133ee:	4603      	mov	r3, r0
 80133f0:	68f8      	ldr	r0, [r7, #12]
 80133f2:	f000 f9b9 	bl	8013768 <USB_WritePacket>
 80133f6:	e102      	b.n	80135fe <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80133f8:	69bb      	ldr	r3, [r7, #24]
 80133fa:	015a      	lsls	r2, r3, #5
 80133fc:	69fb      	ldr	r3, [r7, #28]
 80133fe:	4413      	add	r3, r2
 8013400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013404:	691a      	ldr	r2, [r3, #16]
 8013406:	69bb      	ldr	r3, [r7, #24]
 8013408:	0159      	lsls	r1, r3, #5
 801340a:	69fb      	ldr	r3, [r7, #28]
 801340c:	440b      	add	r3, r1
 801340e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013412:	4619      	mov	r1, r3
 8013414:	4b7c      	ldr	r3, [pc, #496]	; (8013608 <USB_EPStartXfer+0x534>)
 8013416:	4013      	ands	r3, r2
 8013418:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801341a:	69bb      	ldr	r3, [r7, #24]
 801341c:	015a      	lsls	r2, r3, #5
 801341e:	69fb      	ldr	r3, [r7, #28]
 8013420:	4413      	add	r3, r2
 8013422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013426:	691a      	ldr	r2, [r3, #16]
 8013428:	69bb      	ldr	r3, [r7, #24]
 801342a:	0159      	lsls	r1, r3, #5
 801342c:	69fb      	ldr	r3, [r7, #28]
 801342e:	440b      	add	r3, r1
 8013430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013434:	4619      	mov	r1, r3
 8013436:	4b75      	ldr	r3, [pc, #468]	; (801360c <USB_EPStartXfer+0x538>)
 8013438:	4013      	ands	r3, r2
 801343a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 801343c:	69bb      	ldr	r3, [r7, #24]
 801343e:	2b00      	cmp	r3, #0
 8013440:	d12f      	bne.n	80134a2 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8013442:	68bb      	ldr	r3, [r7, #8]
 8013444:	691b      	ldr	r3, [r3, #16]
 8013446:	2b00      	cmp	r3, #0
 8013448:	d003      	beq.n	8013452 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 801344a:	68bb      	ldr	r3, [r7, #8]
 801344c:	689a      	ldr	r2, [r3, #8]
 801344e:	68bb      	ldr	r3, [r7, #8]
 8013450:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8013452:	68bb      	ldr	r3, [r7, #8]
 8013454:	689a      	ldr	r2, [r3, #8]
 8013456:	68bb      	ldr	r3, [r7, #8]
 8013458:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801345a:	69bb      	ldr	r3, [r7, #24]
 801345c:	015a      	lsls	r2, r3, #5
 801345e:	69fb      	ldr	r3, [r7, #28]
 8013460:	4413      	add	r3, r2
 8013462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013466:	691a      	ldr	r2, [r3, #16]
 8013468:	68bb      	ldr	r3, [r7, #8]
 801346a:	6a1b      	ldr	r3, [r3, #32]
 801346c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013470:	69b9      	ldr	r1, [r7, #24]
 8013472:	0148      	lsls	r0, r1, #5
 8013474:	69f9      	ldr	r1, [r7, #28]
 8013476:	4401      	add	r1, r0
 8013478:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801347c:	4313      	orrs	r3, r2
 801347e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013480:	69bb      	ldr	r3, [r7, #24]
 8013482:	015a      	lsls	r2, r3, #5
 8013484:	69fb      	ldr	r3, [r7, #28]
 8013486:	4413      	add	r3, r2
 8013488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801348c:	691b      	ldr	r3, [r3, #16]
 801348e:	69ba      	ldr	r2, [r7, #24]
 8013490:	0151      	lsls	r1, r2, #5
 8013492:	69fa      	ldr	r2, [r7, #28]
 8013494:	440a      	add	r2, r1
 8013496:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801349a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801349e:	6113      	str	r3, [r2, #16]
 80134a0:	e05f      	b.n	8013562 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80134a2:	68bb      	ldr	r3, [r7, #8]
 80134a4:	691b      	ldr	r3, [r3, #16]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d123      	bne.n	80134f2 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80134aa:	69bb      	ldr	r3, [r7, #24]
 80134ac:	015a      	lsls	r2, r3, #5
 80134ae:	69fb      	ldr	r3, [r7, #28]
 80134b0:	4413      	add	r3, r2
 80134b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80134b6:	691a      	ldr	r2, [r3, #16]
 80134b8:	68bb      	ldr	r3, [r7, #8]
 80134ba:	689b      	ldr	r3, [r3, #8]
 80134bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80134c0:	69b9      	ldr	r1, [r7, #24]
 80134c2:	0148      	lsls	r0, r1, #5
 80134c4:	69f9      	ldr	r1, [r7, #28]
 80134c6:	4401      	add	r1, r0
 80134c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80134cc:	4313      	orrs	r3, r2
 80134ce:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80134d0:	69bb      	ldr	r3, [r7, #24]
 80134d2:	015a      	lsls	r2, r3, #5
 80134d4:	69fb      	ldr	r3, [r7, #28]
 80134d6:	4413      	add	r3, r2
 80134d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80134dc:	691b      	ldr	r3, [r3, #16]
 80134de:	69ba      	ldr	r2, [r7, #24]
 80134e0:	0151      	lsls	r1, r2, #5
 80134e2:	69fa      	ldr	r2, [r7, #28]
 80134e4:	440a      	add	r2, r1
 80134e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80134ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80134ee:	6113      	str	r3, [r2, #16]
 80134f0:	e037      	b.n	8013562 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80134f2:	68bb      	ldr	r3, [r7, #8]
 80134f4:	691a      	ldr	r2, [r3, #16]
 80134f6:	68bb      	ldr	r3, [r7, #8]
 80134f8:	689b      	ldr	r3, [r3, #8]
 80134fa:	4413      	add	r3, r2
 80134fc:	1e5a      	subs	r2, r3, #1
 80134fe:	68bb      	ldr	r3, [r7, #8]
 8013500:	689b      	ldr	r3, [r3, #8]
 8013502:	fbb2 f3f3 	udiv	r3, r2, r3
 8013506:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8013508:	68bb      	ldr	r3, [r7, #8]
 801350a:	689b      	ldr	r3, [r3, #8]
 801350c:	8afa      	ldrh	r2, [r7, #22]
 801350e:	fb03 f202 	mul.w	r2, r3, r2
 8013512:	68bb      	ldr	r3, [r7, #8]
 8013514:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013516:	69bb      	ldr	r3, [r7, #24]
 8013518:	015a      	lsls	r2, r3, #5
 801351a:	69fb      	ldr	r3, [r7, #28]
 801351c:	4413      	add	r3, r2
 801351e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013522:	691a      	ldr	r2, [r3, #16]
 8013524:	8afb      	ldrh	r3, [r7, #22]
 8013526:	04d9      	lsls	r1, r3, #19
 8013528:	4b39      	ldr	r3, [pc, #228]	; (8013610 <USB_EPStartXfer+0x53c>)
 801352a:	400b      	ands	r3, r1
 801352c:	69b9      	ldr	r1, [r7, #24]
 801352e:	0148      	lsls	r0, r1, #5
 8013530:	69f9      	ldr	r1, [r7, #28]
 8013532:	4401      	add	r1, r0
 8013534:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013538:	4313      	orrs	r3, r2
 801353a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 801353c:	69bb      	ldr	r3, [r7, #24]
 801353e:	015a      	lsls	r2, r3, #5
 8013540:	69fb      	ldr	r3, [r7, #28]
 8013542:	4413      	add	r3, r2
 8013544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013548:	691a      	ldr	r2, [r3, #16]
 801354a:	68bb      	ldr	r3, [r7, #8]
 801354c:	6a1b      	ldr	r3, [r3, #32]
 801354e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013552:	69b9      	ldr	r1, [r7, #24]
 8013554:	0148      	lsls	r0, r1, #5
 8013556:	69f9      	ldr	r1, [r7, #28]
 8013558:	4401      	add	r1, r0
 801355a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801355e:	4313      	orrs	r3, r2
 8013560:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8013562:	79fb      	ldrb	r3, [r7, #7]
 8013564:	2b01      	cmp	r3, #1
 8013566:	d10d      	bne.n	8013584 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8013568:	68bb      	ldr	r3, [r7, #8]
 801356a:	68db      	ldr	r3, [r3, #12]
 801356c:	2b00      	cmp	r3, #0
 801356e:	d009      	beq.n	8013584 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013570:	68bb      	ldr	r3, [r7, #8]
 8013572:	68d9      	ldr	r1, [r3, #12]
 8013574:	69bb      	ldr	r3, [r7, #24]
 8013576:	015a      	lsls	r2, r3, #5
 8013578:	69fb      	ldr	r3, [r7, #28]
 801357a:	4413      	add	r3, r2
 801357c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013580:	460a      	mov	r2, r1
 8013582:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8013584:	68bb      	ldr	r3, [r7, #8]
 8013586:	791b      	ldrb	r3, [r3, #4]
 8013588:	2b01      	cmp	r3, #1
 801358a:	d128      	bne.n	80135de <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801358c:	69fb      	ldr	r3, [r7, #28]
 801358e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013592:	689b      	ldr	r3, [r3, #8]
 8013594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013598:	2b00      	cmp	r3, #0
 801359a:	d110      	bne.n	80135be <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801359c:	69bb      	ldr	r3, [r7, #24]
 801359e:	015a      	lsls	r2, r3, #5
 80135a0:	69fb      	ldr	r3, [r7, #28]
 80135a2:	4413      	add	r3, r2
 80135a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135a8:	681b      	ldr	r3, [r3, #0]
 80135aa:	69ba      	ldr	r2, [r7, #24]
 80135ac:	0151      	lsls	r1, r2, #5
 80135ae:	69fa      	ldr	r2, [r7, #28]
 80135b0:	440a      	add	r2, r1
 80135b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80135b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80135ba:	6013      	str	r3, [r2, #0]
 80135bc:	e00f      	b.n	80135de <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80135be:	69bb      	ldr	r3, [r7, #24]
 80135c0:	015a      	lsls	r2, r3, #5
 80135c2:	69fb      	ldr	r3, [r7, #28]
 80135c4:	4413      	add	r3, r2
 80135c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	69ba      	ldr	r2, [r7, #24]
 80135ce:	0151      	lsls	r1, r2, #5
 80135d0:	69fa      	ldr	r2, [r7, #28]
 80135d2:	440a      	add	r2, r1
 80135d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80135d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80135dc:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80135de:	69bb      	ldr	r3, [r7, #24]
 80135e0:	015a      	lsls	r2, r3, #5
 80135e2:	69fb      	ldr	r3, [r7, #28]
 80135e4:	4413      	add	r3, r2
 80135e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	69ba      	ldr	r2, [r7, #24]
 80135ee:	0151      	lsls	r1, r2, #5
 80135f0:	69fa      	ldr	r2, [r7, #28]
 80135f2:	440a      	add	r2, r1
 80135f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80135f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80135fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80135fe:	2300      	movs	r3, #0
}
 8013600:	4618      	mov	r0, r3
 8013602:	3720      	adds	r7, #32
 8013604:	46bd      	mov	sp, r7
 8013606:	bd80      	pop	{r7, pc}
 8013608:	fff80000 	.word	0xfff80000
 801360c:	e007ffff 	.word	0xe007ffff
 8013610:	1ff80000 	.word	0x1ff80000

08013614 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013614:	b480      	push	{r7}
 8013616:	b087      	sub	sp, #28
 8013618:	af00      	add	r7, sp, #0
 801361a:	6078      	str	r0, [r7, #4]
 801361c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801361e:	2300      	movs	r3, #0
 8013620:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8013622:	2300      	movs	r3, #0
 8013624:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801362a:	683b      	ldr	r3, [r7, #0]
 801362c:	785b      	ldrb	r3, [r3, #1]
 801362e:	2b01      	cmp	r3, #1
 8013630:	d14a      	bne.n	80136c8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013632:	683b      	ldr	r3, [r7, #0]
 8013634:	781b      	ldrb	r3, [r3, #0]
 8013636:	015a      	lsls	r2, r3, #5
 8013638:	693b      	ldr	r3, [r7, #16]
 801363a:	4413      	add	r3, r2
 801363c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013646:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801364a:	f040 8086 	bne.w	801375a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801364e:	683b      	ldr	r3, [r7, #0]
 8013650:	781b      	ldrb	r3, [r3, #0]
 8013652:	015a      	lsls	r2, r3, #5
 8013654:	693b      	ldr	r3, [r7, #16]
 8013656:	4413      	add	r3, r2
 8013658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	683a      	ldr	r2, [r7, #0]
 8013660:	7812      	ldrb	r2, [r2, #0]
 8013662:	0151      	lsls	r1, r2, #5
 8013664:	693a      	ldr	r2, [r7, #16]
 8013666:	440a      	add	r2, r1
 8013668:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801366c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013670:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8013672:	683b      	ldr	r3, [r7, #0]
 8013674:	781b      	ldrb	r3, [r3, #0]
 8013676:	015a      	lsls	r2, r3, #5
 8013678:	693b      	ldr	r3, [r7, #16]
 801367a:	4413      	add	r3, r2
 801367c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	683a      	ldr	r2, [r7, #0]
 8013684:	7812      	ldrb	r2, [r2, #0]
 8013686:	0151      	lsls	r1, r2, #5
 8013688:	693a      	ldr	r2, [r7, #16]
 801368a:	440a      	add	r2, r1
 801368c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013690:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013694:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	3301      	adds	r3, #1
 801369a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	f242 7210 	movw	r2, #10000	; 0x2710
 80136a2:	4293      	cmp	r3, r2
 80136a4:	d902      	bls.n	80136ac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80136a6:	2301      	movs	r3, #1
 80136a8:	75fb      	strb	r3, [r7, #23]
          break;
 80136aa:	e056      	b.n	801375a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80136ac:	683b      	ldr	r3, [r7, #0]
 80136ae:	781b      	ldrb	r3, [r3, #0]
 80136b0:	015a      	lsls	r2, r3, #5
 80136b2:	693b      	ldr	r3, [r7, #16]
 80136b4:	4413      	add	r3, r2
 80136b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80136c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80136c4:	d0e7      	beq.n	8013696 <USB_EPStopXfer+0x82>
 80136c6:	e048      	b.n	801375a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80136c8:	683b      	ldr	r3, [r7, #0]
 80136ca:	781b      	ldrb	r3, [r3, #0]
 80136cc:	015a      	lsls	r2, r3, #5
 80136ce:	693b      	ldr	r3, [r7, #16]
 80136d0:	4413      	add	r3, r2
 80136d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80136dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80136e0:	d13b      	bne.n	801375a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80136e2:	683b      	ldr	r3, [r7, #0]
 80136e4:	781b      	ldrb	r3, [r3, #0]
 80136e6:	015a      	lsls	r2, r3, #5
 80136e8:	693b      	ldr	r3, [r7, #16]
 80136ea:	4413      	add	r3, r2
 80136ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	683a      	ldr	r2, [r7, #0]
 80136f4:	7812      	ldrb	r2, [r2, #0]
 80136f6:	0151      	lsls	r1, r2, #5
 80136f8:	693a      	ldr	r2, [r7, #16]
 80136fa:	440a      	add	r2, r1
 80136fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013700:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013704:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8013706:	683b      	ldr	r3, [r7, #0]
 8013708:	781b      	ldrb	r3, [r3, #0]
 801370a:	015a      	lsls	r2, r3, #5
 801370c:	693b      	ldr	r3, [r7, #16]
 801370e:	4413      	add	r3, r2
 8013710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013714:	681b      	ldr	r3, [r3, #0]
 8013716:	683a      	ldr	r2, [r7, #0]
 8013718:	7812      	ldrb	r2, [r2, #0]
 801371a:	0151      	lsls	r1, r2, #5
 801371c:	693a      	ldr	r2, [r7, #16]
 801371e:	440a      	add	r2, r1
 8013720:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013724:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013728:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	3301      	adds	r3, #1
 801372e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	f242 7210 	movw	r2, #10000	; 0x2710
 8013736:	4293      	cmp	r3, r2
 8013738:	d902      	bls.n	8013740 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801373a:	2301      	movs	r3, #1
 801373c:	75fb      	strb	r3, [r7, #23]
          break;
 801373e:	e00c      	b.n	801375a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8013740:	683b      	ldr	r3, [r7, #0]
 8013742:	781b      	ldrb	r3, [r3, #0]
 8013744:	015a      	lsls	r2, r3, #5
 8013746:	693b      	ldr	r3, [r7, #16]
 8013748:	4413      	add	r3, r2
 801374a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013754:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013758:	d0e7      	beq.n	801372a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801375a:	7dfb      	ldrb	r3, [r7, #23]
}
 801375c:	4618      	mov	r0, r3
 801375e:	371c      	adds	r7, #28
 8013760:	46bd      	mov	sp, r7
 8013762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013766:	4770      	bx	lr

08013768 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8013768:	b480      	push	{r7}
 801376a:	b089      	sub	sp, #36	; 0x24
 801376c:	af00      	add	r7, sp, #0
 801376e:	60f8      	str	r0, [r7, #12]
 8013770:	60b9      	str	r1, [r7, #8]
 8013772:	4611      	mov	r1, r2
 8013774:	461a      	mov	r2, r3
 8013776:	460b      	mov	r3, r1
 8013778:	71fb      	strb	r3, [r7, #7]
 801377a:	4613      	mov	r3, r2
 801377c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8013782:	68bb      	ldr	r3, [r7, #8]
 8013784:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8013786:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801378a:	2b00      	cmp	r3, #0
 801378c:	d123      	bne.n	80137d6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801378e:	88bb      	ldrh	r3, [r7, #4]
 8013790:	3303      	adds	r3, #3
 8013792:	089b      	lsrs	r3, r3, #2
 8013794:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8013796:	2300      	movs	r3, #0
 8013798:	61bb      	str	r3, [r7, #24]
 801379a:	e018      	b.n	80137ce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801379c:	79fb      	ldrb	r3, [r7, #7]
 801379e:	031a      	lsls	r2, r3, #12
 80137a0:	697b      	ldr	r3, [r7, #20]
 80137a2:	4413      	add	r3, r2
 80137a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80137a8:	461a      	mov	r2, r3
 80137aa:	69fb      	ldr	r3, [r7, #28]
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 80137b0:	69fb      	ldr	r3, [r7, #28]
 80137b2:	3301      	adds	r3, #1
 80137b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80137b6:	69fb      	ldr	r3, [r7, #28]
 80137b8:	3301      	adds	r3, #1
 80137ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80137bc:	69fb      	ldr	r3, [r7, #28]
 80137be:	3301      	adds	r3, #1
 80137c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80137c2:	69fb      	ldr	r3, [r7, #28]
 80137c4:	3301      	adds	r3, #1
 80137c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80137c8:	69bb      	ldr	r3, [r7, #24]
 80137ca:	3301      	adds	r3, #1
 80137cc:	61bb      	str	r3, [r7, #24]
 80137ce:	69ba      	ldr	r2, [r7, #24]
 80137d0:	693b      	ldr	r3, [r7, #16]
 80137d2:	429a      	cmp	r2, r3
 80137d4:	d3e2      	bcc.n	801379c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80137d6:	2300      	movs	r3, #0
}
 80137d8:	4618      	mov	r0, r3
 80137da:	3724      	adds	r7, #36	; 0x24
 80137dc:	46bd      	mov	sp, r7
 80137de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e2:	4770      	bx	lr

080137e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80137e4:	b480      	push	{r7}
 80137e6:	b08b      	sub	sp, #44	; 0x2c
 80137e8:	af00      	add	r7, sp, #0
 80137ea:	60f8      	str	r0, [r7, #12]
 80137ec:	60b9      	str	r1, [r7, #8]
 80137ee:	4613      	mov	r3, r2
 80137f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80137f6:	68bb      	ldr	r3, [r7, #8]
 80137f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80137fa:	88fb      	ldrh	r3, [r7, #6]
 80137fc:	089b      	lsrs	r3, r3, #2
 80137fe:	b29b      	uxth	r3, r3
 8013800:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8013802:	88fb      	ldrh	r3, [r7, #6]
 8013804:	f003 0303 	and.w	r3, r3, #3
 8013808:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801380a:	2300      	movs	r3, #0
 801380c:	623b      	str	r3, [r7, #32]
 801380e:	e014      	b.n	801383a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013810:	69bb      	ldr	r3, [r7, #24]
 8013812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013816:	681a      	ldr	r2, [r3, #0]
 8013818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801381a:	601a      	str	r2, [r3, #0]
    pDest++;
 801381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801381e:	3301      	adds	r3, #1
 8013820:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013824:	3301      	adds	r3, #1
 8013826:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801382a:	3301      	adds	r3, #1
 801382c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013830:	3301      	adds	r3, #1
 8013832:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8013834:	6a3b      	ldr	r3, [r7, #32]
 8013836:	3301      	adds	r3, #1
 8013838:	623b      	str	r3, [r7, #32]
 801383a:	6a3a      	ldr	r2, [r7, #32]
 801383c:	697b      	ldr	r3, [r7, #20]
 801383e:	429a      	cmp	r2, r3
 8013840:	d3e6      	bcc.n	8013810 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8013842:	8bfb      	ldrh	r3, [r7, #30]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d01e      	beq.n	8013886 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013848:	2300      	movs	r3, #0
 801384a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801384c:	69bb      	ldr	r3, [r7, #24]
 801384e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013852:	461a      	mov	r2, r3
 8013854:	f107 0310 	add.w	r3, r7, #16
 8013858:	6812      	ldr	r2, [r2, #0]
 801385a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801385c:	693a      	ldr	r2, [r7, #16]
 801385e:	6a3b      	ldr	r3, [r7, #32]
 8013860:	b2db      	uxtb	r3, r3
 8013862:	00db      	lsls	r3, r3, #3
 8013864:	fa22 f303 	lsr.w	r3, r2, r3
 8013868:	b2da      	uxtb	r2, r3
 801386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801386c:	701a      	strb	r2, [r3, #0]
      i++;
 801386e:	6a3b      	ldr	r3, [r7, #32]
 8013870:	3301      	adds	r3, #1
 8013872:	623b      	str	r3, [r7, #32]
      pDest++;
 8013874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013876:	3301      	adds	r3, #1
 8013878:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801387a:	8bfb      	ldrh	r3, [r7, #30]
 801387c:	3b01      	subs	r3, #1
 801387e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8013880:	8bfb      	ldrh	r3, [r7, #30]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d1ea      	bne.n	801385c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8013886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013888:	4618      	mov	r0, r3
 801388a:	372c      	adds	r7, #44	; 0x2c
 801388c:	46bd      	mov	sp, r7
 801388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013892:	4770      	bx	lr

08013894 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013894:	b480      	push	{r7}
 8013896:	b085      	sub	sp, #20
 8013898:	af00      	add	r7, sp, #0
 801389a:	6078      	str	r0, [r7, #4]
 801389c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80138a2:	683b      	ldr	r3, [r7, #0]
 80138a4:	781b      	ldrb	r3, [r3, #0]
 80138a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80138a8:	683b      	ldr	r3, [r7, #0]
 80138aa:	785b      	ldrb	r3, [r3, #1]
 80138ac:	2b01      	cmp	r3, #1
 80138ae:	d12c      	bne.n	801390a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80138b0:	68bb      	ldr	r3, [r7, #8]
 80138b2:	015a      	lsls	r2, r3, #5
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	4413      	add	r3, r2
 80138b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	db12      	blt.n	80138e8 <USB_EPSetStall+0x54>
 80138c2:	68bb      	ldr	r3, [r7, #8]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d00f      	beq.n	80138e8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80138c8:	68bb      	ldr	r3, [r7, #8]
 80138ca:	015a      	lsls	r2, r3, #5
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	4413      	add	r3, r2
 80138d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	68ba      	ldr	r2, [r7, #8]
 80138d8:	0151      	lsls	r1, r2, #5
 80138da:	68fa      	ldr	r2, [r7, #12]
 80138dc:	440a      	add	r2, r1
 80138de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80138e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80138e6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80138e8:	68bb      	ldr	r3, [r7, #8]
 80138ea:	015a      	lsls	r2, r3, #5
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	4413      	add	r3, r2
 80138f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	68ba      	ldr	r2, [r7, #8]
 80138f8:	0151      	lsls	r1, r2, #5
 80138fa:	68fa      	ldr	r2, [r7, #12]
 80138fc:	440a      	add	r2, r1
 80138fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013902:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013906:	6013      	str	r3, [r2, #0]
 8013908:	e02b      	b.n	8013962 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801390a:	68bb      	ldr	r3, [r7, #8]
 801390c:	015a      	lsls	r2, r3, #5
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	4413      	add	r3, r2
 8013912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	2b00      	cmp	r3, #0
 801391a:	db12      	blt.n	8013942 <USB_EPSetStall+0xae>
 801391c:	68bb      	ldr	r3, [r7, #8]
 801391e:	2b00      	cmp	r3, #0
 8013920:	d00f      	beq.n	8013942 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013922:	68bb      	ldr	r3, [r7, #8]
 8013924:	015a      	lsls	r2, r3, #5
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	4413      	add	r3, r2
 801392a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	68ba      	ldr	r2, [r7, #8]
 8013932:	0151      	lsls	r1, r2, #5
 8013934:	68fa      	ldr	r2, [r7, #12]
 8013936:	440a      	add	r2, r1
 8013938:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801393c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013940:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013942:	68bb      	ldr	r3, [r7, #8]
 8013944:	015a      	lsls	r2, r3, #5
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	4413      	add	r3, r2
 801394a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	68ba      	ldr	r2, [r7, #8]
 8013952:	0151      	lsls	r1, r2, #5
 8013954:	68fa      	ldr	r2, [r7, #12]
 8013956:	440a      	add	r2, r1
 8013958:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801395c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013960:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013962:	2300      	movs	r3, #0
}
 8013964:	4618      	mov	r0, r3
 8013966:	3714      	adds	r7, #20
 8013968:	46bd      	mov	sp, r7
 801396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801396e:	4770      	bx	lr

08013970 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013970:	b480      	push	{r7}
 8013972:	b085      	sub	sp, #20
 8013974:	af00      	add	r7, sp, #0
 8013976:	6078      	str	r0, [r7, #4]
 8013978:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801397e:	683b      	ldr	r3, [r7, #0]
 8013980:	781b      	ldrb	r3, [r3, #0]
 8013982:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013984:	683b      	ldr	r3, [r7, #0]
 8013986:	785b      	ldrb	r3, [r3, #1]
 8013988:	2b01      	cmp	r3, #1
 801398a:	d128      	bne.n	80139de <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801398c:	68bb      	ldr	r3, [r7, #8]
 801398e:	015a      	lsls	r2, r3, #5
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	4413      	add	r3, r2
 8013994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	68ba      	ldr	r2, [r7, #8]
 801399c:	0151      	lsls	r1, r2, #5
 801399e:	68fa      	ldr	r2, [r7, #12]
 80139a0:	440a      	add	r2, r1
 80139a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80139a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80139aa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80139ac:	683b      	ldr	r3, [r7, #0]
 80139ae:	791b      	ldrb	r3, [r3, #4]
 80139b0:	2b03      	cmp	r3, #3
 80139b2:	d003      	beq.n	80139bc <USB_EPClearStall+0x4c>
 80139b4:	683b      	ldr	r3, [r7, #0]
 80139b6:	791b      	ldrb	r3, [r3, #4]
 80139b8:	2b02      	cmp	r3, #2
 80139ba:	d138      	bne.n	8013a2e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80139bc:	68bb      	ldr	r3, [r7, #8]
 80139be:	015a      	lsls	r2, r3, #5
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	4413      	add	r3, r2
 80139c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	68ba      	ldr	r2, [r7, #8]
 80139cc:	0151      	lsls	r1, r2, #5
 80139ce:	68fa      	ldr	r2, [r7, #12]
 80139d0:	440a      	add	r2, r1
 80139d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80139d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80139da:	6013      	str	r3, [r2, #0]
 80139dc:	e027      	b.n	8013a2e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80139de:	68bb      	ldr	r3, [r7, #8]
 80139e0:	015a      	lsls	r2, r3, #5
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	4413      	add	r3, r2
 80139e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	68ba      	ldr	r2, [r7, #8]
 80139ee:	0151      	lsls	r1, r2, #5
 80139f0:	68fa      	ldr	r2, [r7, #12]
 80139f2:	440a      	add	r2, r1
 80139f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80139f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80139fc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80139fe:	683b      	ldr	r3, [r7, #0]
 8013a00:	791b      	ldrb	r3, [r3, #4]
 8013a02:	2b03      	cmp	r3, #3
 8013a04:	d003      	beq.n	8013a0e <USB_EPClearStall+0x9e>
 8013a06:	683b      	ldr	r3, [r7, #0]
 8013a08:	791b      	ldrb	r3, [r3, #4]
 8013a0a:	2b02      	cmp	r3, #2
 8013a0c:	d10f      	bne.n	8013a2e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013a0e:	68bb      	ldr	r3, [r7, #8]
 8013a10:	015a      	lsls	r2, r3, #5
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	4413      	add	r3, r2
 8013a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	68ba      	ldr	r2, [r7, #8]
 8013a1e:	0151      	lsls	r1, r2, #5
 8013a20:	68fa      	ldr	r2, [r7, #12]
 8013a22:	440a      	add	r2, r1
 8013a24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013a2c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8013a2e:	2300      	movs	r3, #0
}
 8013a30:	4618      	mov	r0, r3
 8013a32:	3714      	adds	r7, #20
 8013a34:	46bd      	mov	sp, r7
 8013a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a3a:	4770      	bx	lr

08013a3c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8013a3c:	b480      	push	{r7}
 8013a3e:	b085      	sub	sp, #20
 8013a40:	af00      	add	r7, sp, #0
 8013a42:	6078      	str	r0, [r7, #4]
 8013a44:	460b      	mov	r3, r1
 8013a46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	68fa      	ldr	r2, [r7, #12]
 8013a56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013a5a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8013a5e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a66:	681a      	ldr	r2, [r3, #0]
 8013a68:	78fb      	ldrb	r3, [r7, #3]
 8013a6a:	011b      	lsls	r3, r3, #4
 8013a6c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8013a70:	68f9      	ldr	r1, [r7, #12]
 8013a72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013a76:	4313      	orrs	r3, r2
 8013a78:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8013a7a:	2300      	movs	r3, #0
}
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	3714      	adds	r7, #20
 8013a80:	46bd      	mov	sp, r7
 8013a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a86:	4770      	bx	lr

08013a88 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013a88:	b480      	push	{r7}
 8013a8a:	b085      	sub	sp, #20
 8013a8c:	af00      	add	r7, sp, #0
 8013a8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	68fa      	ldr	r2, [r7, #12]
 8013a9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013aa2:	f023 0303 	bic.w	r3, r3, #3
 8013aa6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013aae:	685b      	ldr	r3, [r3, #4]
 8013ab0:	68fa      	ldr	r2, [r7, #12]
 8013ab2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013ab6:	f023 0302 	bic.w	r3, r3, #2
 8013aba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013abc:	2300      	movs	r3, #0
}
 8013abe:	4618      	mov	r0, r3
 8013ac0:	3714      	adds	r7, #20
 8013ac2:	46bd      	mov	sp, r7
 8013ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac8:	4770      	bx	lr

08013aca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013aca:	b480      	push	{r7}
 8013acc:	b085      	sub	sp, #20
 8013ace:	af00      	add	r7, sp, #0
 8013ad0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	68fa      	ldr	r2, [r7, #12]
 8013ae0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013ae4:	f023 0303 	bic.w	r3, r3, #3
 8013ae8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013af0:	685b      	ldr	r3, [r3, #4]
 8013af2:	68fa      	ldr	r2, [r7, #12]
 8013af4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013af8:	f043 0302 	orr.w	r3, r3, #2
 8013afc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013afe:	2300      	movs	r3, #0
}
 8013b00:	4618      	mov	r0, r3
 8013b02:	3714      	adds	r7, #20
 8013b04:	46bd      	mov	sp, r7
 8013b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b0a:	4770      	bx	lr

08013b0c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8013b0c:	b480      	push	{r7}
 8013b0e:	b085      	sub	sp, #20
 8013b10:	af00      	add	r7, sp, #0
 8013b12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	695b      	ldr	r3, [r3, #20]
 8013b18:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	699b      	ldr	r3, [r3, #24]
 8013b1e:	68fa      	ldr	r2, [r7, #12]
 8013b20:	4013      	ands	r3, r2
 8013b22:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013b24:	68fb      	ldr	r3, [r7, #12]
}
 8013b26:	4618      	mov	r0, r3
 8013b28:	3714      	adds	r7, #20
 8013b2a:	46bd      	mov	sp, r7
 8013b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b30:	4770      	bx	lr

08013b32 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013b32:	b480      	push	{r7}
 8013b34:	b085      	sub	sp, #20
 8013b36:	af00      	add	r7, sp, #0
 8013b38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b44:	699b      	ldr	r3, [r3, #24]
 8013b46:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b4e:	69db      	ldr	r3, [r3, #28]
 8013b50:	68ba      	ldr	r2, [r7, #8]
 8013b52:	4013      	ands	r3, r2
 8013b54:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8013b56:	68bb      	ldr	r3, [r7, #8]
 8013b58:	0c1b      	lsrs	r3, r3, #16
}
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	3714      	adds	r7, #20
 8013b5e:	46bd      	mov	sp, r7
 8013b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b64:	4770      	bx	lr

08013b66 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013b66:	b480      	push	{r7}
 8013b68:	b085      	sub	sp, #20
 8013b6a:	af00      	add	r7, sp, #0
 8013b6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b78:	699b      	ldr	r3, [r3, #24]
 8013b7a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b82:	69db      	ldr	r3, [r3, #28]
 8013b84:	68ba      	ldr	r2, [r7, #8]
 8013b86:	4013      	ands	r3, r2
 8013b88:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8013b8a:	68bb      	ldr	r3, [r7, #8]
 8013b8c:	b29b      	uxth	r3, r3
}
 8013b8e:	4618      	mov	r0, r3
 8013b90:	3714      	adds	r7, #20
 8013b92:	46bd      	mov	sp, r7
 8013b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b98:	4770      	bx	lr

08013b9a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013b9a:	b480      	push	{r7}
 8013b9c:	b085      	sub	sp, #20
 8013b9e:	af00      	add	r7, sp, #0
 8013ba0:	6078      	str	r0, [r7, #4]
 8013ba2:	460b      	mov	r3, r1
 8013ba4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8013baa:	78fb      	ldrb	r3, [r7, #3]
 8013bac:	015a      	lsls	r2, r3, #5
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	4413      	add	r3, r2
 8013bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013bb6:	689b      	ldr	r3, [r3, #8]
 8013bb8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013bc0:	695b      	ldr	r3, [r3, #20]
 8013bc2:	68ba      	ldr	r2, [r7, #8]
 8013bc4:	4013      	ands	r3, r2
 8013bc6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013bc8:	68bb      	ldr	r3, [r7, #8]
}
 8013bca:	4618      	mov	r0, r3
 8013bcc:	3714      	adds	r7, #20
 8013bce:	46bd      	mov	sp, r7
 8013bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd4:	4770      	bx	lr

08013bd6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013bd6:	b480      	push	{r7}
 8013bd8:	b087      	sub	sp, #28
 8013bda:	af00      	add	r7, sp, #0
 8013bdc:	6078      	str	r0, [r7, #4]
 8013bde:	460b      	mov	r3, r1
 8013be0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8013be6:	697b      	ldr	r3, [r7, #20]
 8013be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013bec:	691b      	ldr	r3, [r3, #16]
 8013bee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013bf0:	697b      	ldr	r3, [r7, #20]
 8013bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013bf8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013bfa:	78fb      	ldrb	r3, [r7, #3]
 8013bfc:	f003 030f 	and.w	r3, r3, #15
 8013c00:	68fa      	ldr	r2, [r7, #12]
 8013c02:	fa22 f303 	lsr.w	r3, r2, r3
 8013c06:	01db      	lsls	r3, r3, #7
 8013c08:	b2db      	uxtb	r3, r3
 8013c0a:	693a      	ldr	r2, [r7, #16]
 8013c0c:	4313      	orrs	r3, r2
 8013c0e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013c10:	78fb      	ldrb	r3, [r7, #3]
 8013c12:	015a      	lsls	r2, r3, #5
 8013c14:	697b      	ldr	r3, [r7, #20]
 8013c16:	4413      	add	r3, r2
 8013c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c1c:	689b      	ldr	r3, [r3, #8]
 8013c1e:	693a      	ldr	r2, [r7, #16]
 8013c20:	4013      	ands	r3, r2
 8013c22:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013c24:	68bb      	ldr	r3, [r7, #8]
}
 8013c26:	4618      	mov	r0, r3
 8013c28:	371c      	adds	r7, #28
 8013c2a:	46bd      	mov	sp, r7
 8013c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c30:	4770      	bx	lr

08013c32 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013c32:	b480      	push	{r7}
 8013c34:	b083      	sub	sp, #12
 8013c36:	af00      	add	r7, sp, #0
 8013c38:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	695b      	ldr	r3, [r3, #20]
 8013c3e:	f003 0301 	and.w	r3, r3, #1
}
 8013c42:	4618      	mov	r0, r3
 8013c44:	370c      	adds	r7, #12
 8013c46:	46bd      	mov	sp, r7
 8013c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c4c:	4770      	bx	lr
	...

08013c50 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8013c50:	b480      	push	{r7}
 8013c52:	b085      	sub	sp, #20
 8013c54:	af00      	add	r7, sp, #0
 8013c56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c62:	681a      	ldr	r2, [r3, #0]
 8013c64:	68fb      	ldr	r3, [r7, #12]
 8013c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c6a:	4619      	mov	r1, r3
 8013c6c:	4b09      	ldr	r3, [pc, #36]	; (8013c94 <USB_ActivateSetup+0x44>)
 8013c6e:	4013      	ands	r3, r2
 8013c70:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c78:	685b      	ldr	r3, [r3, #4]
 8013c7a:	68fa      	ldr	r2, [r7, #12]
 8013c7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013c84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013c86:	2300      	movs	r3, #0
}
 8013c88:	4618      	mov	r0, r3
 8013c8a:	3714      	adds	r7, #20
 8013c8c:	46bd      	mov	sp, r7
 8013c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c92:	4770      	bx	lr
 8013c94:	fffff800 	.word	0xfffff800

08013c98 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8013c98:	b480      	push	{r7}
 8013c9a:	b087      	sub	sp, #28
 8013c9c:	af00      	add	r7, sp, #0
 8013c9e:	60f8      	str	r0, [r7, #12]
 8013ca0:	460b      	mov	r3, r1
 8013ca2:	607a      	str	r2, [r7, #4]
 8013ca4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	333c      	adds	r3, #60	; 0x3c
 8013cae:	3304      	adds	r3, #4
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8013cb4:	693b      	ldr	r3, [r7, #16]
 8013cb6:	4a26      	ldr	r2, [pc, #152]	; (8013d50 <USB_EP0_OutStart+0xb8>)
 8013cb8:	4293      	cmp	r3, r2
 8013cba:	d90a      	bls.n	8013cd2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013cbc:	697b      	ldr	r3, [r7, #20]
 8013cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013cc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013ccc:	d101      	bne.n	8013cd2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8013cce:	2300      	movs	r3, #0
 8013cd0:	e037      	b.n	8013d42 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8013cd2:	697b      	ldr	r3, [r7, #20]
 8013cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013cd8:	461a      	mov	r2, r3
 8013cda:	2300      	movs	r3, #0
 8013cdc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013cde:	697b      	ldr	r3, [r7, #20]
 8013ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ce4:	691b      	ldr	r3, [r3, #16]
 8013ce6:	697a      	ldr	r2, [r7, #20]
 8013ce8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013cec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013cf0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8013cf2:	697b      	ldr	r3, [r7, #20]
 8013cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013cf8:	691b      	ldr	r3, [r3, #16]
 8013cfa:	697a      	ldr	r2, [r7, #20]
 8013cfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013d00:	f043 0318 	orr.w	r3, r3, #24
 8013d04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8013d06:	697b      	ldr	r3, [r7, #20]
 8013d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d0c:	691b      	ldr	r3, [r3, #16]
 8013d0e:	697a      	ldr	r2, [r7, #20]
 8013d10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013d14:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8013d18:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8013d1a:	7afb      	ldrb	r3, [r7, #11]
 8013d1c:	2b01      	cmp	r3, #1
 8013d1e:	d10f      	bne.n	8013d40 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8013d20:	697b      	ldr	r3, [r7, #20]
 8013d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d26:	461a      	mov	r2, r3
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8013d2c:	697b      	ldr	r3, [r7, #20]
 8013d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	697a      	ldr	r2, [r7, #20]
 8013d36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013d3a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8013d3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013d40:	2300      	movs	r3, #0
}
 8013d42:	4618      	mov	r0, r3
 8013d44:	371c      	adds	r7, #28
 8013d46:	46bd      	mov	sp, r7
 8013d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d4c:	4770      	bx	lr
 8013d4e:	bf00      	nop
 8013d50:	4f54300a 	.word	0x4f54300a

08013d54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013d54:	b480      	push	{r7}
 8013d56:	b085      	sub	sp, #20
 8013d58:	af00      	add	r7, sp, #0
 8013d5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013d5c:	2300      	movs	r3, #0
 8013d5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	3301      	adds	r3, #1
 8013d64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	4a13      	ldr	r2, [pc, #76]	; (8013db8 <USB_CoreReset+0x64>)
 8013d6a:	4293      	cmp	r3, r2
 8013d6c:	d901      	bls.n	8013d72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8013d6e:	2303      	movs	r3, #3
 8013d70:	e01b      	b.n	8013daa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	691b      	ldr	r3, [r3, #16]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	daf2      	bge.n	8013d60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	691b      	ldr	r3, [r3, #16]
 8013d82:	f043 0201 	orr.w	r2, r3, #1
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	3301      	adds	r3, #1
 8013d8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	4a09      	ldr	r2, [pc, #36]	; (8013db8 <USB_CoreReset+0x64>)
 8013d94:	4293      	cmp	r3, r2
 8013d96:	d901      	bls.n	8013d9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8013d98:	2303      	movs	r3, #3
 8013d9a:	e006      	b.n	8013daa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	691b      	ldr	r3, [r3, #16]
 8013da0:	f003 0301 	and.w	r3, r3, #1
 8013da4:	2b01      	cmp	r3, #1
 8013da6:	d0f0      	beq.n	8013d8a <USB_CoreReset+0x36>

  return HAL_OK;
 8013da8:	2300      	movs	r3, #0
}
 8013daa:	4618      	mov	r0, r3
 8013dac:	3714      	adds	r7, #20
 8013dae:	46bd      	mov	sp, r7
 8013db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013db4:	4770      	bx	lr
 8013db6:	bf00      	nop
 8013db8:	00030d40 	.word	0x00030d40

08013dbc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8013dbc:	b580      	push	{r7, lr}
 8013dbe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8013dc0:	4904      	ldr	r1, [pc, #16]	; (8013dd4 <MX_FATFS_Init+0x18>)
 8013dc2:	4805      	ldr	r0, [pc, #20]	; (8013dd8 <MX_FATFS_Init+0x1c>)
 8013dc4:	f002 fa56 	bl	8016274 <FATFS_LinkDriver>
 8013dc8:	4603      	mov	r3, r0
 8013dca:	461a      	mov	r2, r3
 8013dcc:	4b03      	ldr	r3, [pc, #12]	; (8013ddc <MX_FATFS_Init+0x20>)
 8013dce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8013dd0:	bf00      	nop
 8013dd2:	bd80      	pop	{r7, pc}
 8013dd4:	240015a0 	.word	0x240015a0
 8013dd8:	080181f8 	.word	0x080181f8
 8013ddc:	2400159c 	.word	0x2400159c

08013de0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b082      	sub	sp, #8
 8013de4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8013de6:	2300      	movs	r3, #0
 8013de8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8013dea:	f000 f885 	bl	8013ef8 <BSP_SD_IsDetected>
 8013dee:	4603      	mov	r3, r0
 8013df0:	2b01      	cmp	r3, #1
 8013df2:	d001      	beq.n	8013df8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8013df4:	2302      	movs	r3, #2
 8013df6:	e012      	b.n	8013e1e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 8013df8:	480b      	ldr	r0, [pc, #44]	; (8013e28 <BSP_SD_Init+0x48>)
 8013dfa:	f7f8 ff99 	bl	800cd30 <HAL_SD_Init>
 8013dfe:	4603      	mov	r3, r0
 8013e00:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8013e02:	79fb      	ldrb	r3, [r7, #7]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d109      	bne.n	8013e1c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8013e08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8013e0c:	4806      	ldr	r0, [pc, #24]	; (8013e28 <BSP_SD_Init+0x48>)
 8013e0e:	f7f9 fe4f 	bl	800dab0 <HAL_SD_ConfigWideBusOperation>
 8013e12:	4603      	mov	r3, r0
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d001      	beq.n	8013e1c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8013e18:	2301      	movs	r3, #1
 8013e1a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8013e1c:	79fb      	ldrb	r3, [r7, #7]
}
 8013e1e:	4618      	mov	r0, r3
 8013e20:	3708      	adds	r7, #8
 8013e22:	46bd      	mov	sp, r7
 8013e24:	bd80      	pop	{r7, pc}
 8013e26:	bf00      	nop
 8013e28:	24000ed0 	.word	0x24000ed0

08013e2c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8013e2c:	b580      	push	{r7, lr}
 8013e2e:	b086      	sub	sp, #24
 8013e30:	af00      	add	r7, sp, #0
 8013e32:	60f8      	str	r0, [r7, #12]
 8013e34:	60b9      	str	r1, [r7, #8]
 8013e36:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013e38:	2300      	movs	r3, #0
 8013e3a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	68ba      	ldr	r2, [r7, #8]
 8013e40:	68f9      	ldr	r1, [r7, #12]
 8013e42:	4806      	ldr	r0, [pc, #24]	; (8013e5c <BSP_SD_ReadBlocks_DMA+0x30>)
 8013e44:	f7f9 f894 	bl	800cf70 <HAL_SD_ReadBlocks_DMA>
 8013e48:	4603      	mov	r3, r0
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d001      	beq.n	8013e52 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013e4e:	2301      	movs	r3, #1
 8013e50:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8013e54:	4618      	mov	r0, r3
 8013e56:	3718      	adds	r7, #24
 8013e58:	46bd      	mov	sp, r7
 8013e5a:	bd80      	pop	{r7, pc}
 8013e5c:	24000ed0 	.word	0x24000ed0

08013e60 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8013e60:	b580      	push	{r7, lr}
 8013e62:	b086      	sub	sp, #24
 8013e64:	af00      	add	r7, sp, #0
 8013e66:	60f8      	str	r0, [r7, #12]
 8013e68:	60b9      	str	r1, [r7, #8]
 8013e6a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013e6c:	2300      	movs	r3, #0
 8013e6e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	68ba      	ldr	r2, [r7, #8]
 8013e74:	68f9      	ldr	r1, [r7, #12]
 8013e76:	4806      	ldr	r0, [pc, #24]	; (8013e90 <BSP_SD_WriteBlocks_DMA+0x30>)
 8013e78:	f7f9 f922 	bl	800d0c0 <HAL_SD_WriteBlocks_DMA>
 8013e7c:	4603      	mov	r3, r0
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d001      	beq.n	8013e86 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013e82:	2301      	movs	r3, #1
 8013e84:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8013e88:	4618      	mov	r0, r3
 8013e8a:	3718      	adds	r7, #24
 8013e8c:	46bd      	mov	sp, r7
 8013e8e:	bd80      	pop	{r7, pc}
 8013e90:	24000ed0 	.word	0x24000ed0

08013e94 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8013e94:	b580      	push	{r7, lr}
 8013e96:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8013e98:	4805      	ldr	r0, [pc, #20]	; (8013eb0 <BSP_SD_GetCardState+0x1c>)
 8013e9a:	f7f9 ff1b 	bl	800dcd4 <HAL_SD_GetCardState>
 8013e9e:	4603      	mov	r3, r0
 8013ea0:	2b04      	cmp	r3, #4
 8013ea2:	bf14      	ite	ne
 8013ea4:	2301      	movne	r3, #1
 8013ea6:	2300      	moveq	r3, #0
 8013ea8:	b2db      	uxtb	r3, r3
}
 8013eaa:	4618      	mov	r0, r3
 8013eac:	bd80      	pop	{r7, pc}
 8013eae:	bf00      	nop
 8013eb0:	24000ed0 	.word	0x24000ed0

08013eb4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8013eb4:	b580      	push	{r7, lr}
 8013eb6:	b082      	sub	sp, #8
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 8013ebc:	6879      	ldr	r1, [r7, #4]
 8013ebe:	4803      	ldr	r0, [pc, #12]	; (8013ecc <BSP_SD_GetCardInfo+0x18>)
 8013ec0:	f7f9 fdca 	bl	800da58 <HAL_SD_GetCardInfo>
}
 8013ec4:	bf00      	nop
 8013ec6:	3708      	adds	r7, #8
 8013ec8:	46bd      	mov	sp, r7
 8013eca:	bd80      	pop	{r7, pc}
 8013ecc:	24000ed0 	.word	0x24000ed0

08013ed0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013ed0:	b580      	push	{r7, lr}
 8013ed2:	b082      	sub	sp, #8
 8013ed4:	af00      	add	r7, sp, #0
 8013ed6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8013ed8:	f000 f9a0 	bl	801421c <BSP_SD_WriteCpltCallback>
}
 8013edc:	bf00      	nop
 8013ede:	3708      	adds	r7, #8
 8013ee0:	46bd      	mov	sp, r7
 8013ee2:	bd80      	pop	{r7, pc}

08013ee4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013ee4:	b580      	push	{r7, lr}
 8013ee6:	b082      	sub	sp, #8
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8013eec:	f000 f9a2 	bl	8014234 <BSP_SD_ReadCpltCallback>
}
 8013ef0:	bf00      	nop
 8013ef2:	3708      	adds	r7, #8
 8013ef4:	46bd      	mov	sp, r7
 8013ef6:	bd80      	pop	{r7, pc}

08013ef8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8013ef8:	b580      	push	{r7, lr}
 8013efa:	b082      	sub	sp, #8
 8013efc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8013efe:	2301      	movs	r3, #1
 8013f00:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8013f02:	f000 f80b 	bl	8013f1c <BSP_PlatformIsDetected>
 8013f06:	4603      	mov	r3, r0
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d101      	bne.n	8013f10 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8013f0c:	2300      	movs	r3, #0
 8013f0e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8013f10:	79fb      	ldrb	r3, [r7, #7]
 8013f12:	b2db      	uxtb	r3, r3
}
 8013f14:	4618      	mov	r0, r3
 8013f16:	3708      	adds	r7, #8
 8013f18:	46bd      	mov	sp, r7
 8013f1a:	bd80      	pop	{r7, pc}

08013f1c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8013f1c:	b580      	push	{r7, lr}
 8013f1e:	b082      	sub	sp, #8
 8013f20:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8013f22:	2301      	movs	r3, #1
 8013f24:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8013f26:	2104      	movs	r1, #4
 8013f28:	4806      	ldr	r0, [pc, #24]	; (8013f44 <BSP_PlatformIsDetected+0x28>)
 8013f2a:	f7f3 feef 	bl	8007d0c <HAL_GPIO_ReadPin>
 8013f2e:	4603      	mov	r3, r0
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d001      	beq.n	8013f38 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8013f34:	2300      	movs	r3, #0
 8013f36:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8013f38:	79fb      	ldrb	r3, [r7, #7]
}
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	3708      	adds	r7, #8
 8013f3e:	46bd      	mov	sp, r7
 8013f40:	bd80      	pop	{r7, pc}
 8013f42:	bf00      	nop
 8013f44:	58020400 	.word	0x58020400

08013f48 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8013f48:	b580      	push	{r7, lr}
 8013f4a:	b084      	sub	sp, #16
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8013f50:	f7ef fc34 	bl	80037bc <HAL_GetTick>
 8013f54:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8013f56:	e006      	b.n	8013f66 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013f58:	f7ff ff9c 	bl	8013e94 <BSP_SD_GetCardState>
 8013f5c:	4603      	mov	r3, r0
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d101      	bne.n	8013f66 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8013f62:	2300      	movs	r3, #0
 8013f64:	e009      	b.n	8013f7a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8013f66:	f7ef fc29 	bl	80037bc <HAL_GetTick>
 8013f6a:	4602      	mov	r2, r0
 8013f6c:	68fb      	ldr	r3, [r7, #12]
 8013f6e:	1ad3      	subs	r3, r2, r3
 8013f70:	687a      	ldr	r2, [r7, #4]
 8013f72:	429a      	cmp	r2, r3
 8013f74:	d8f0      	bhi.n	8013f58 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8013f76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	3710      	adds	r7, #16
 8013f7e:	46bd      	mov	sp, r7
 8013f80:	bd80      	pop	{r7, pc}
	...

08013f84 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8013f84:	b580      	push	{r7, lr}
 8013f86:	b082      	sub	sp, #8
 8013f88:	af00      	add	r7, sp, #0
 8013f8a:	4603      	mov	r3, r0
 8013f8c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8013f8e:	4b0b      	ldr	r3, [pc, #44]	; (8013fbc <SD_CheckStatus+0x38>)
 8013f90:	2201      	movs	r2, #1
 8013f92:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8013f94:	f7ff ff7e 	bl	8013e94 <BSP_SD_GetCardState>
 8013f98:	4603      	mov	r3, r0
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d107      	bne.n	8013fae <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8013f9e:	4b07      	ldr	r3, [pc, #28]	; (8013fbc <SD_CheckStatus+0x38>)
 8013fa0:	781b      	ldrb	r3, [r3, #0]
 8013fa2:	b2db      	uxtb	r3, r3
 8013fa4:	f023 0301 	bic.w	r3, r3, #1
 8013fa8:	b2da      	uxtb	r2, r3
 8013faa:	4b04      	ldr	r3, [pc, #16]	; (8013fbc <SD_CheckStatus+0x38>)
 8013fac:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8013fae:	4b03      	ldr	r3, [pc, #12]	; (8013fbc <SD_CheckStatus+0x38>)
 8013fb0:	781b      	ldrb	r3, [r3, #0]
 8013fb2:	b2db      	uxtb	r3, r3
}
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	3708      	adds	r7, #8
 8013fb8:	46bd      	mov	sp, r7
 8013fba:	bd80      	pop	{r7, pc}
 8013fbc:	2400000d 	.word	0x2400000d

08013fc0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8013fc0:	b580      	push	{r7, lr}
 8013fc2:	b082      	sub	sp, #8
 8013fc4:	af00      	add	r7, sp, #0
 8013fc6:	4603      	mov	r3, r0
 8013fc8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8013fca:	f7ff ff09 	bl	8013de0 <BSP_SD_Init>
 8013fce:	4603      	mov	r3, r0
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d107      	bne.n	8013fe4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8013fd4:	79fb      	ldrb	r3, [r7, #7]
 8013fd6:	4618      	mov	r0, r3
 8013fd8:	f7ff ffd4 	bl	8013f84 <SD_CheckStatus>
 8013fdc:	4603      	mov	r3, r0
 8013fde:	461a      	mov	r2, r3
 8013fe0:	4b04      	ldr	r3, [pc, #16]	; (8013ff4 <SD_initialize+0x34>)
 8013fe2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8013fe4:	4b03      	ldr	r3, [pc, #12]	; (8013ff4 <SD_initialize+0x34>)
 8013fe6:	781b      	ldrb	r3, [r3, #0]
 8013fe8:	b2db      	uxtb	r3, r3
}
 8013fea:	4618      	mov	r0, r3
 8013fec:	3708      	adds	r7, #8
 8013fee:	46bd      	mov	sp, r7
 8013ff0:	bd80      	pop	{r7, pc}
 8013ff2:	bf00      	nop
 8013ff4:	2400000d 	.word	0x2400000d

08013ff8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8013ff8:	b580      	push	{r7, lr}
 8013ffa:	b082      	sub	sp, #8
 8013ffc:	af00      	add	r7, sp, #0
 8013ffe:	4603      	mov	r3, r0
 8014000:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8014002:	79fb      	ldrb	r3, [r7, #7]
 8014004:	4618      	mov	r0, r3
 8014006:	f7ff ffbd 	bl	8013f84 <SD_CheckStatus>
 801400a:	4603      	mov	r3, r0
}
 801400c:	4618      	mov	r0, r3
 801400e:	3708      	adds	r7, #8
 8014010:	46bd      	mov	sp, r7
 8014012:	bd80      	pop	{r7, pc}

08014014 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8014014:	b580      	push	{r7, lr}
 8014016:	b086      	sub	sp, #24
 8014018:	af00      	add	r7, sp, #0
 801401a:	60b9      	str	r1, [r7, #8]
 801401c:	607a      	str	r2, [r7, #4]
 801401e:	603b      	str	r3, [r7, #0]
 8014020:	4603      	mov	r3, r0
 8014022:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014024:	2301      	movs	r3, #1
 8014026:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014028:	f247 5030 	movw	r0, #30000	; 0x7530
 801402c:	f7ff ff8c 	bl	8013f48 <SD_CheckStatusWithTimeout>
 8014030:	4603      	mov	r3, r0
 8014032:	2b00      	cmp	r3, #0
 8014034:	da01      	bge.n	801403a <SD_read+0x26>
  {
    return res;
 8014036:	7dfb      	ldrb	r3, [r7, #23]
 8014038:	e03b      	b.n	80140b2 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801403a:	683a      	ldr	r2, [r7, #0]
 801403c:	6879      	ldr	r1, [r7, #4]
 801403e:	68b8      	ldr	r0, [r7, #8]
 8014040:	f7ff fef4 	bl	8013e2c <BSP_SD_ReadBlocks_DMA>
 8014044:	4603      	mov	r3, r0
 8014046:	2b00      	cmp	r3, #0
 8014048:	d132      	bne.n	80140b0 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801404a:	4b1c      	ldr	r3, [pc, #112]	; (80140bc <SD_read+0xa8>)
 801404c:	2200      	movs	r2, #0
 801404e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8014050:	f7ef fbb4 	bl	80037bc <HAL_GetTick>
 8014054:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8014056:	bf00      	nop
 8014058:	4b18      	ldr	r3, [pc, #96]	; (80140bc <SD_read+0xa8>)
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	2b00      	cmp	r3, #0
 801405e:	d108      	bne.n	8014072 <SD_read+0x5e>
 8014060:	f7ef fbac 	bl	80037bc <HAL_GetTick>
 8014064:	4602      	mov	r2, r0
 8014066:	693b      	ldr	r3, [r7, #16]
 8014068:	1ad3      	subs	r3, r2, r3
 801406a:	f247 522f 	movw	r2, #29999	; 0x752f
 801406e:	4293      	cmp	r3, r2
 8014070:	d9f2      	bls.n	8014058 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8014072:	4b12      	ldr	r3, [pc, #72]	; (80140bc <SD_read+0xa8>)
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	2b00      	cmp	r3, #0
 8014078:	d102      	bne.n	8014080 <SD_read+0x6c>
      {
        res = RES_ERROR;
 801407a:	2301      	movs	r3, #1
 801407c:	75fb      	strb	r3, [r7, #23]
 801407e:	e017      	b.n	80140b0 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8014080:	4b0e      	ldr	r3, [pc, #56]	; (80140bc <SD_read+0xa8>)
 8014082:	2200      	movs	r2, #0
 8014084:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8014086:	f7ef fb99 	bl	80037bc <HAL_GetTick>
 801408a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801408c:	e007      	b.n	801409e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801408e:	f7ff ff01 	bl	8013e94 <BSP_SD_GetCardState>
 8014092:	4603      	mov	r3, r0
 8014094:	2b00      	cmp	r3, #0
 8014096:	d102      	bne.n	801409e <SD_read+0x8a>
          {
            res = RES_OK;
 8014098:	2300      	movs	r3, #0
 801409a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 801409c:	e008      	b.n	80140b0 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801409e:	f7ef fb8d 	bl	80037bc <HAL_GetTick>
 80140a2:	4602      	mov	r2, r0
 80140a4:	693b      	ldr	r3, [r7, #16]
 80140a6:	1ad3      	subs	r3, r2, r3
 80140a8:	f247 522f 	movw	r2, #29999	; 0x752f
 80140ac:	4293      	cmp	r3, r2
 80140ae:	d9ee      	bls.n	801408e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80140b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80140b2:	4618      	mov	r0, r3
 80140b4:	3718      	adds	r7, #24
 80140b6:	46bd      	mov	sp, r7
 80140b8:	bd80      	pop	{r7, pc}
 80140ba:	bf00      	nop
 80140bc:	240015a8 	.word	0x240015a8

080140c0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80140c0:	b580      	push	{r7, lr}
 80140c2:	b086      	sub	sp, #24
 80140c4:	af00      	add	r7, sp, #0
 80140c6:	60b9      	str	r1, [r7, #8]
 80140c8:	607a      	str	r2, [r7, #4]
 80140ca:	603b      	str	r3, [r7, #0]
 80140cc:	4603      	mov	r3, r0
 80140ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80140d0:	2301      	movs	r3, #1
 80140d2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80140d4:	4b24      	ldr	r3, [pc, #144]	; (8014168 <SD_write+0xa8>)
 80140d6:	2200      	movs	r2, #0
 80140d8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80140da:	f247 5030 	movw	r0, #30000	; 0x7530
 80140de:	f7ff ff33 	bl	8013f48 <SD_CheckStatusWithTimeout>
 80140e2:	4603      	mov	r3, r0
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	da01      	bge.n	80140ec <SD_write+0x2c>
  {
    return res;
 80140e8:	7dfb      	ldrb	r3, [r7, #23]
 80140ea:	e038      	b.n	801415e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80140ec:	683a      	ldr	r2, [r7, #0]
 80140ee:	6879      	ldr	r1, [r7, #4]
 80140f0:	68b8      	ldr	r0, [r7, #8]
 80140f2:	f7ff feb5 	bl	8013e60 <BSP_SD_WriteBlocks_DMA>
 80140f6:	4603      	mov	r3, r0
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d12f      	bne.n	801415c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80140fc:	f7ef fb5e 	bl	80037bc <HAL_GetTick>
 8014100:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8014102:	bf00      	nop
 8014104:	4b18      	ldr	r3, [pc, #96]	; (8014168 <SD_write+0xa8>)
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	2b00      	cmp	r3, #0
 801410a:	d108      	bne.n	801411e <SD_write+0x5e>
 801410c:	f7ef fb56 	bl	80037bc <HAL_GetTick>
 8014110:	4602      	mov	r2, r0
 8014112:	693b      	ldr	r3, [r7, #16]
 8014114:	1ad3      	subs	r3, r2, r3
 8014116:	f247 522f 	movw	r2, #29999	; 0x752f
 801411a:	4293      	cmp	r3, r2
 801411c:	d9f2      	bls.n	8014104 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 801411e:	4b12      	ldr	r3, [pc, #72]	; (8014168 <SD_write+0xa8>)
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	2b00      	cmp	r3, #0
 8014124:	d102      	bne.n	801412c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8014126:	2301      	movs	r3, #1
 8014128:	75fb      	strb	r3, [r7, #23]
 801412a:	e017      	b.n	801415c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 801412c:	4b0e      	ldr	r3, [pc, #56]	; (8014168 <SD_write+0xa8>)
 801412e:	2200      	movs	r2, #0
 8014130:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8014132:	f7ef fb43 	bl	80037bc <HAL_GetTick>
 8014136:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014138:	e007      	b.n	801414a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801413a:	f7ff feab 	bl	8013e94 <BSP_SD_GetCardState>
 801413e:	4603      	mov	r3, r0
 8014140:	2b00      	cmp	r3, #0
 8014142:	d102      	bne.n	801414a <SD_write+0x8a>
          {
            res = RES_OK;
 8014144:	2300      	movs	r3, #0
 8014146:	75fb      	strb	r3, [r7, #23]
            break;
 8014148:	e008      	b.n	801415c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801414a:	f7ef fb37 	bl	80037bc <HAL_GetTick>
 801414e:	4602      	mov	r2, r0
 8014150:	693b      	ldr	r3, [r7, #16]
 8014152:	1ad3      	subs	r3, r2, r3
 8014154:	f247 522f 	movw	r2, #29999	; 0x752f
 8014158:	4293      	cmp	r3, r2
 801415a:	d9ee      	bls.n	801413a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 801415c:	7dfb      	ldrb	r3, [r7, #23]
}
 801415e:	4618      	mov	r0, r3
 8014160:	3718      	adds	r7, #24
 8014162:	46bd      	mov	sp, r7
 8014164:	bd80      	pop	{r7, pc}
 8014166:	bf00      	nop
 8014168:	240015a4 	.word	0x240015a4

0801416c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801416c:	b580      	push	{r7, lr}
 801416e:	b08c      	sub	sp, #48	; 0x30
 8014170:	af00      	add	r7, sp, #0
 8014172:	4603      	mov	r3, r0
 8014174:	603a      	str	r2, [r7, #0]
 8014176:	71fb      	strb	r3, [r7, #7]
 8014178:	460b      	mov	r3, r1
 801417a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801417c:	2301      	movs	r3, #1
 801417e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8014182:	4b25      	ldr	r3, [pc, #148]	; (8014218 <SD_ioctl+0xac>)
 8014184:	781b      	ldrb	r3, [r3, #0]
 8014186:	b2db      	uxtb	r3, r3
 8014188:	f003 0301 	and.w	r3, r3, #1
 801418c:	2b00      	cmp	r3, #0
 801418e:	d001      	beq.n	8014194 <SD_ioctl+0x28>
 8014190:	2303      	movs	r3, #3
 8014192:	e03c      	b.n	801420e <SD_ioctl+0xa2>

  switch (cmd)
 8014194:	79bb      	ldrb	r3, [r7, #6]
 8014196:	2b03      	cmp	r3, #3
 8014198:	d834      	bhi.n	8014204 <SD_ioctl+0x98>
 801419a:	a201      	add	r2, pc, #4	; (adr r2, 80141a0 <SD_ioctl+0x34>)
 801419c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141a0:	080141b1 	.word	0x080141b1
 80141a4:	080141b9 	.word	0x080141b9
 80141a8:	080141d1 	.word	0x080141d1
 80141ac:	080141eb 	.word	0x080141eb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80141b0:	2300      	movs	r3, #0
 80141b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80141b6:	e028      	b.n	801420a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80141b8:	f107 0308 	add.w	r3, r7, #8
 80141bc:	4618      	mov	r0, r3
 80141be:	f7ff fe79 	bl	8013eb4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80141c2:	6a3a      	ldr	r2, [r7, #32]
 80141c4:	683b      	ldr	r3, [r7, #0]
 80141c6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80141c8:	2300      	movs	r3, #0
 80141ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80141ce:	e01c      	b.n	801420a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80141d0:	f107 0308 	add.w	r3, r7, #8
 80141d4:	4618      	mov	r0, r3
 80141d6:	f7ff fe6d 	bl	8013eb4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80141da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141dc:	b29a      	uxth	r2, r3
 80141de:	683b      	ldr	r3, [r7, #0]
 80141e0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80141e2:	2300      	movs	r3, #0
 80141e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80141e8:	e00f      	b.n	801420a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80141ea:	f107 0308 	add.w	r3, r7, #8
 80141ee:	4618      	mov	r0, r3
 80141f0:	f7ff fe60 	bl	8013eb4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80141f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141f6:	0a5a      	lsrs	r2, r3, #9
 80141f8:	683b      	ldr	r3, [r7, #0]
 80141fa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80141fc:	2300      	movs	r3, #0
 80141fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014202:	e002      	b.n	801420a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8014204:	2304      	movs	r3, #4
 8014206:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801420a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801420e:	4618      	mov	r0, r3
 8014210:	3730      	adds	r7, #48	; 0x30
 8014212:	46bd      	mov	sp, r7
 8014214:	bd80      	pop	{r7, pc}
 8014216:	bf00      	nop
 8014218:	2400000d 	.word	0x2400000d

0801421c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 801421c:	b480      	push	{r7}
 801421e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8014220:	4b03      	ldr	r3, [pc, #12]	; (8014230 <BSP_SD_WriteCpltCallback+0x14>)
 8014222:	2201      	movs	r2, #1
 8014224:	601a      	str	r2, [r3, #0]
}
 8014226:	bf00      	nop
 8014228:	46bd      	mov	sp, r7
 801422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801422e:	4770      	bx	lr
 8014230:	240015a4 	.word	0x240015a4

08014234 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8014234:	b480      	push	{r7}
 8014236:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8014238:	4b03      	ldr	r3, [pc, #12]	; (8014248 <BSP_SD_ReadCpltCallback+0x14>)
 801423a:	2201      	movs	r2, #1
 801423c:	601a      	str	r2, [r3, #0]
}
 801423e:	bf00      	nop
 8014240:	46bd      	mov	sp, r7
 8014242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014246:	4770      	bx	lr
 8014248:	240015a8 	.word	0x240015a8

0801424c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801424c:	b580      	push	{r7, lr}
 801424e:	b084      	sub	sp, #16
 8014250:	af00      	add	r7, sp, #0
 8014252:	6078      	str	r0, [r7, #4]
 8014254:	460b      	mov	r3, r1
 8014256:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014258:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801425c:	f002 fd00 	bl	8016c60 <USBD_static_malloc>
 8014260:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8014262:	68fb      	ldr	r3, [r7, #12]
 8014264:	2b00      	cmp	r3, #0
 8014266:	d109      	bne.n	801427c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	32b0      	adds	r2, #176	; 0xb0
 8014272:	2100      	movs	r1, #0
 8014274:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8014278:	2302      	movs	r3, #2
 801427a:	e0d4      	b.n	8014426 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 801427c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8014280:	2100      	movs	r1, #0
 8014282:	68f8      	ldr	r0, [r7, #12]
 8014284:	f002 fd68 	bl	8016d58 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	32b0      	adds	r2, #176	; 0xb0
 8014292:	68f9      	ldr	r1, [r7, #12]
 8014294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	32b0      	adds	r2, #176	; 0xb0
 80142a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	7c1b      	ldrb	r3, [r3, #16]
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d138      	bne.n	8014326 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80142b4:	4b5e      	ldr	r3, [pc, #376]	; (8014430 <USBD_CDC_Init+0x1e4>)
 80142b6:	7819      	ldrb	r1, [r3, #0]
 80142b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80142bc:	2202      	movs	r2, #2
 80142be:	6878      	ldr	r0, [r7, #4]
 80142c0:	f002 fbab 	bl	8016a1a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80142c4:	4b5a      	ldr	r3, [pc, #360]	; (8014430 <USBD_CDC_Init+0x1e4>)
 80142c6:	781b      	ldrb	r3, [r3, #0]
 80142c8:	f003 020f 	and.w	r2, r3, #15
 80142cc:	6879      	ldr	r1, [r7, #4]
 80142ce:	4613      	mov	r3, r2
 80142d0:	009b      	lsls	r3, r3, #2
 80142d2:	4413      	add	r3, r2
 80142d4:	009b      	lsls	r3, r3, #2
 80142d6:	440b      	add	r3, r1
 80142d8:	3324      	adds	r3, #36	; 0x24
 80142da:	2201      	movs	r2, #1
 80142dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80142de:	4b55      	ldr	r3, [pc, #340]	; (8014434 <USBD_CDC_Init+0x1e8>)
 80142e0:	7819      	ldrb	r1, [r3, #0]
 80142e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80142e6:	2202      	movs	r2, #2
 80142e8:	6878      	ldr	r0, [r7, #4]
 80142ea:	f002 fb96 	bl	8016a1a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80142ee:	4b51      	ldr	r3, [pc, #324]	; (8014434 <USBD_CDC_Init+0x1e8>)
 80142f0:	781b      	ldrb	r3, [r3, #0]
 80142f2:	f003 020f 	and.w	r2, r3, #15
 80142f6:	6879      	ldr	r1, [r7, #4]
 80142f8:	4613      	mov	r3, r2
 80142fa:	009b      	lsls	r3, r3, #2
 80142fc:	4413      	add	r3, r2
 80142fe:	009b      	lsls	r3, r3, #2
 8014300:	440b      	add	r3, r1
 8014302:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014306:	2201      	movs	r2, #1
 8014308:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801430a:	4b4b      	ldr	r3, [pc, #300]	; (8014438 <USBD_CDC_Init+0x1ec>)
 801430c:	781b      	ldrb	r3, [r3, #0]
 801430e:	f003 020f 	and.w	r2, r3, #15
 8014312:	6879      	ldr	r1, [r7, #4]
 8014314:	4613      	mov	r3, r2
 8014316:	009b      	lsls	r3, r3, #2
 8014318:	4413      	add	r3, r2
 801431a:	009b      	lsls	r3, r3, #2
 801431c:	440b      	add	r3, r1
 801431e:	3326      	adds	r3, #38	; 0x26
 8014320:	2210      	movs	r2, #16
 8014322:	801a      	strh	r2, [r3, #0]
 8014324:	e035      	b.n	8014392 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014326:	4b42      	ldr	r3, [pc, #264]	; (8014430 <USBD_CDC_Init+0x1e4>)
 8014328:	7819      	ldrb	r1, [r3, #0]
 801432a:	2340      	movs	r3, #64	; 0x40
 801432c:	2202      	movs	r2, #2
 801432e:	6878      	ldr	r0, [r7, #4]
 8014330:	f002 fb73 	bl	8016a1a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014334:	4b3e      	ldr	r3, [pc, #248]	; (8014430 <USBD_CDC_Init+0x1e4>)
 8014336:	781b      	ldrb	r3, [r3, #0]
 8014338:	f003 020f 	and.w	r2, r3, #15
 801433c:	6879      	ldr	r1, [r7, #4]
 801433e:	4613      	mov	r3, r2
 8014340:	009b      	lsls	r3, r3, #2
 8014342:	4413      	add	r3, r2
 8014344:	009b      	lsls	r3, r3, #2
 8014346:	440b      	add	r3, r1
 8014348:	3324      	adds	r3, #36	; 0x24
 801434a:	2201      	movs	r2, #1
 801434c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801434e:	4b39      	ldr	r3, [pc, #228]	; (8014434 <USBD_CDC_Init+0x1e8>)
 8014350:	7819      	ldrb	r1, [r3, #0]
 8014352:	2340      	movs	r3, #64	; 0x40
 8014354:	2202      	movs	r2, #2
 8014356:	6878      	ldr	r0, [r7, #4]
 8014358:	f002 fb5f 	bl	8016a1a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801435c:	4b35      	ldr	r3, [pc, #212]	; (8014434 <USBD_CDC_Init+0x1e8>)
 801435e:	781b      	ldrb	r3, [r3, #0]
 8014360:	f003 020f 	and.w	r2, r3, #15
 8014364:	6879      	ldr	r1, [r7, #4]
 8014366:	4613      	mov	r3, r2
 8014368:	009b      	lsls	r3, r3, #2
 801436a:	4413      	add	r3, r2
 801436c:	009b      	lsls	r3, r3, #2
 801436e:	440b      	add	r3, r1
 8014370:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014374:	2201      	movs	r2, #1
 8014376:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014378:	4b2f      	ldr	r3, [pc, #188]	; (8014438 <USBD_CDC_Init+0x1ec>)
 801437a:	781b      	ldrb	r3, [r3, #0]
 801437c:	f003 020f 	and.w	r2, r3, #15
 8014380:	6879      	ldr	r1, [r7, #4]
 8014382:	4613      	mov	r3, r2
 8014384:	009b      	lsls	r3, r3, #2
 8014386:	4413      	add	r3, r2
 8014388:	009b      	lsls	r3, r3, #2
 801438a:	440b      	add	r3, r1
 801438c:	3326      	adds	r3, #38	; 0x26
 801438e:	2210      	movs	r2, #16
 8014390:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014392:	4b29      	ldr	r3, [pc, #164]	; (8014438 <USBD_CDC_Init+0x1ec>)
 8014394:	7819      	ldrb	r1, [r3, #0]
 8014396:	2308      	movs	r3, #8
 8014398:	2203      	movs	r2, #3
 801439a:	6878      	ldr	r0, [r7, #4]
 801439c:	f002 fb3d 	bl	8016a1a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80143a0:	4b25      	ldr	r3, [pc, #148]	; (8014438 <USBD_CDC_Init+0x1ec>)
 80143a2:	781b      	ldrb	r3, [r3, #0]
 80143a4:	f003 020f 	and.w	r2, r3, #15
 80143a8:	6879      	ldr	r1, [r7, #4]
 80143aa:	4613      	mov	r3, r2
 80143ac:	009b      	lsls	r3, r3, #2
 80143ae:	4413      	add	r3, r2
 80143b0:	009b      	lsls	r3, r3, #2
 80143b2:	440b      	add	r3, r1
 80143b4:	3324      	adds	r3, #36	; 0x24
 80143b6:	2201      	movs	r2, #1
 80143b8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	2200      	movs	r2, #0
 80143be:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80143c8:	687a      	ldr	r2, [r7, #4]
 80143ca:	33b0      	adds	r3, #176	; 0xb0
 80143cc:	009b      	lsls	r3, r3, #2
 80143ce:	4413      	add	r3, r2
 80143d0:	685b      	ldr	r3, [r3, #4]
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	2200      	movs	r2, #0
 80143da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	2200      	movs	r2, #0
 80143e2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d101      	bne.n	80143f4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80143f0:	2302      	movs	r3, #2
 80143f2:	e018      	b.n	8014426 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	7c1b      	ldrb	r3, [r3, #16]
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d10a      	bne.n	8014412 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80143fc:	4b0d      	ldr	r3, [pc, #52]	; (8014434 <USBD_CDC_Init+0x1e8>)
 80143fe:	7819      	ldrb	r1, [r3, #0]
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014406:	f44f 7300 	mov.w	r3, #512	; 0x200
 801440a:	6878      	ldr	r0, [r7, #4]
 801440c:	f002 fbf4 	bl	8016bf8 <USBD_LL_PrepareReceive>
 8014410:	e008      	b.n	8014424 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014412:	4b08      	ldr	r3, [pc, #32]	; (8014434 <USBD_CDC_Init+0x1e8>)
 8014414:	7819      	ldrb	r1, [r3, #0]
 8014416:	68fb      	ldr	r3, [r7, #12]
 8014418:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801441c:	2340      	movs	r3, #64	; 0x40
 801441e:	6878      	ldr	r0, [r7, #4]
 8014420:	f002 fbea 	bl	8016bf8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014424:	2300      	movs	r3, #0
}
 8014426:	4618      	mov	r0, r3
 8014428:	3710      	adds	r7, #16
 801442a:	46bd      	mov	sp, r7
 801442c:	bd80      	pop	{r7, pc}
 801442e:	bf00      	nop
 8014430:	24000097 	.word	0x24000097
 8014434:	24000098 	.word	0x24000098
 8014438:	24000099 	.word	0x24000099

0801443c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801443c:	b580      	push	{r7, lr}
 801443e:	b082      	sub	sp, #8
 8014440:	af00      	add	r7, sp, #0
 8014442:	6078      	str	r0, [r7, #4]
 8014444:	460b      	mov	r3, r1
 8014446:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8014448:	4b3a      	ldr	r3, [pc, #232]	; (8014534 <USBD_CDC_DeInit+0xf8>)
 801444a:	781b      	ldrb	r3, [r3, #0]
 801444c:	4619      	mov	r1, r3
 801444e:	6878      	ldr	r0, [r7, #4]
 8014450:	f002 fb09 	bl	8016a66 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8014454:	4b37      	ldr	r3, [pc, #220]	; (8014534 <USBD_CDC_DeInit+0xf8>)
 8014456:	781b      	ldrb	r3, [r3, #0]
 8014458:	f003 020f 	and.w	r2, r3, #15
 801445c:	6879      	ldr	r1, [r7, #4]
 801445e:	4613      	mov	r3, r2
 8014460:	009b      	lsls	r3, r3, #2
 8014462:	4413      	add	r3, r2
 8014464:	009b      	lsls	r3, r3, #2
 8014466:	440b      	add	r3, r1
 8014468:	3324      	adds	r3, #36	; 0x24
 801446a:	2200      	movs	r2, #0
 801446c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801446e:	4b32      	ldr	r3, [pc, #200]	; (8014538 <USBD_CDC_DeInit+0xfc>)
 8014470:	781b      	ldrb	r3, [r3, #0]
 8014472:	4619      	mov	r1, r3
 8014474:	6878      	ldr	r0, [r7, #4]
 8014476:	f002 faf6 	bl	8016a66 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801447a:	4b2f      	ldr	r3, [pc, #188]	; (8014538 <USBD_CDC_DeInit+0xfc>)
 801447c:	781b      	ldrb	r3, [r3, #0]
 801447e:	f003 020f 	and.w	r2, r3, #15
 8014482:	6879      	ldr	r1, [r7, #4]
 8014484:	4613      	mov	r3, r2
 8014486:	009b      	lsls	r3, r3, #2
 8014488:	4413      	add	r3, r2
 801448a:	009b      	lsls	r3, r3, #2
 801448c:	440b      	add	r3, r1
 801448e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014492:	2200      	movs	r2, #0
 8014494:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8014496:	4b29      	ldr	r3, [pc, #164]	; (801453c <USBD_CDC_DeInit+0x100>)
 8014498:	781b      	ldrb	r3, [r3, #0]
 801449a:	4619      	mov	r1, r3
 801449c:	6878      	ldr	r0, [r7, #4]
 801449e:	f002 fae2 	bl	8016a66 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80144a2:	4b26      	ldr	r3, [pc, #152]	; (801453c <USBD_CDC_DeInit+0x100>)
 80144a4:	781b      	ldrb	r3, [r3, #0]
 80144a6:	f003 020f 	and.w	r2, r3, #15
 80144aa:	6879      	ldr	r1, [r7, #4]
 80144ac:	4613      	mov	r3, r2
 80144ae:	009b      	lsls	r3, r3, #2
 80144b0:	4413      	add	r3, r2
 80144b2:	009b      	lsls	r3, r3, #2
 80144b4:	440b      	add	r3, r1
 80144b6:	3324      	adds	r3, #36	; 0x24
 80144b8:	2200      	movs	r2, #0
 80144ba:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80144bc:	4b1f      	ldr	r3, [pc, #124]	; (801453c <USBD_CDC_DeInit+0x100>)
 80144be:	781b      	ldrb	r3, [r3, #0]
 80144c0:	f003 020f 	and.w	r2, r3, #15
 80144c4:	6879      	ldr	r1, [r7, #4]
 80144c6:	4613      	mov	r3, r2
 80144c8:	009b      	lsls	r3, r3, #2
 80144ca:	4413      	add	r3, r2
 80144cc:	009b      	lsls	r3, r3, #2
 80144ce:	440b      	add	r3, r1
 80144d0:	3326      	adds	r3, #38	; 0x26
 80144d2:	2200      	movs	r2, #0
 80144d4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	32b0      	adds	r2, #176	; 0xb0
 80144e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d01f      	beq.n	8014528 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80144ee:	687a      	ldr	r2, [r7, #4]
 80144f0:	33b0      	adds	r3, #176	; 0xb0
 80144f2:	009b      	lsls	r3, r3, #2
 80144f4:	4413      	add	r3, r2
 80144f6:	685b      	ldr	r3, [r3, #4]
 80144f8:	685b      	ldr	r3, [r3, #4]
 80144fa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	32b0      	adds	r2, #176	; 0xb0
 8014506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801450a:	4618      	mov	r0, r3
 801450c:	f002 fbb6 	bl	8016c7c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	32b0      	adds	r2, #176	; 0xb0
 801451a:	2100      	movs	r1, #0
 801451c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	2200      	movs	r2, #0
 8014524:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014528:	2300      	movs	r3, #0
}
 801452a:	4618      	mov	r0, r3
 801452c:	3708      	adds	r7, #8
 801452e:	46bd      	mov	sp, r7
 8014530:	bd80      	pop	{r7, pc}
 8014532:	bf00      	nop
 8014534:	24000097 	.word	0x24000097
 8014538:	24000098 	.word	0x24000098
 801453c:	24000099 	.word	0x24000099

08014540 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8014540:	b580      	push	{r7, lr}
 8014542:	b086      	sub	sp, #24
 8014544:	af00      	add	r7, sp, #0
 8014546:	6078      	str	r0, [r7, #4]
 8014548:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	32b0      	adds	r2, #176	; 0xb0
 8014554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014558:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801455a:	2300      	movs	r3, #0
 801455c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801455e:	2300      	movs	r3, #0
 8014560:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8014562:	2300      	movs	r3, #0
 8014564:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8014566:	693b      	ldr	r3, [r7, #16]
 8014568:	2b00      	cmp	r3, #0
 801456a:	d101      	bne.n	8014570 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 801456c:	2303      	movs	r3, #3
 801456e:	e0bf      	b.n	80146f0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014570:	683b      	ldr	r3, [r7, #0]
 8014572:	781b      	ldrb	r3, [r3, #0]
 8014574:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014578:	2b00      	cmp	r3, #0
 801457a:	d050      	beq.n	801461e <USBD_CDC_Setup+0xde>
 801457c:	2b20      	cmp	r3, #32
 801457e:	f040 80af 	bne.w	80146e0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8014582:	683b      	ldr	r3, [r7, #0]
 8014584:	88db      	ldrh	r3, [r3, #6]
 8014586:	2b00      	cmp	r3, #0
 8014588:	d03a      	beq.n	8014600 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801458a:	683b      	ldr	r3, [r7, #0]
 801458c:	781b      	ldrb	r3, [r3, #0]
 801458e:	b25b      	sxtb	r3, r3
 8014590:	2b00      	cmp	r3, #0
 8014592:	da1b      	bge.n	80145cc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801459a:	687a      	ldr	r2, [r7, #4]
 801459c:	33b0      	adds	r3, #176	; 0xb0
 801459e:	009b      	lsls	r3, r3, #2
 80145a0:	4413      	add	r3, r2
 80145a2:	685b      	ldr	r3, [r3, #4]
 80145a4:	689b      	ldr	r3, [r3, #8]
 80145a6:	683a      	ldr	r2, [r7, #0]
 80145a8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80145aa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80145ac:	683a      	ldr	r2, [r7, #0]
 80145ae:	88d2      	ldrh	r2, [r2, #6]
 80145b0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80145b2:	683b      	ldr	r3, [r7, #0]
 80145b4:	88db      	ldrh	r3, [r3, #6]
 80145b6:	2b07      	cmp	r3, #7
 80145b8:	bf28      	it	cs
 80145ba:	2307      	movcs	r3, #7
 80145bc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80145be:	693b      	ldr	r3, [r7, #16]
 80145c0:	89fa      	ldrh	r2, [r7, #14]
 80145c2:	4619      	mov	r1, r3
 80145c4:	6878      	ldr	r0, [r7, #4]
 80145c6:	f001 fd89 	bl	80160dc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80145ca:	e090      	b.n	80146ee <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80145cc:	683b      	ldr	r3, [r7, #0]
 80145ce:	785a      	ldrb	r2, [r3, #1]
 80145d0:	693b      	ldr	r3, [r7, #16]
 80145d2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80145d6:	683b      	ldr	r3, [r7, #0]
 80145d8:	88db      	ldrh	r3, [r3, #6]
 80145da:	2b3f      	cmp	r3, #63	; 0x3f
 80145dc:	d803      	bhi.n	80145e6 <USBD_CDC_Setup+0xa6>
 80145de:	683b      	ldr	r3, [r7, #0]
 80145e0:	88db      	ldrh	r3, [r3, #6]
 80145e2:	b2da      	uxtb	r2, r3
 80145e4:	e000      	b.n	80145e8 <USBD_CDC_Setup+0xa8>
 80145e6:	2240      	movs	r2, #64	; 0x40
 80145e8:	693b      	ldr	r3, [r7, #16]
 80145ea:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80145ee:	6939      	ldr	r1, [r7, #16]
 80145f0:	693b      	ldr	r3, [r7, #16]
 80145f2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80145f6:	461a      	mov	r2, r3
 80145f8:	6878      	ldr	r0, [r7, #4]
 80145fa:	f001 fd9b 	bl	8016134 <USBD_CtlPrepareRx>
      break;
 80145fe:	e076      	b.n	80146ee <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014606:	687a      	ldr	r2, [r7, #4]
 8014608:	33b0      	adds	r3, #176	; 0xb0
 801460a:	009b      	lsls	r3, r3, #2
 801460c:	4413      	add	r3, r2
 801460e:	685b      	ldr	r3, [r3, #4]
 8014610:	689b      	ldr	r3, [r3, #8]
 8014612:	683a      	ldr	r2, [r7, #0]
 8014614:	7850      	ldrb	r0, [r2, #1]
 8014616:	2200      	movs	r2, #0
 8014618:	6839      	ldr	r1, [r7, #0]
 801461a:	4798      	blx	r3
      break;
 801461c:	e067      	b.n	80146ee <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801461e:	683b      	ldr	r3, [r7, #0]
 8014620:	785b      	ldrb	r3, [r3, #1]
 8014622:	2b0b      	cmp	r3, #11
 8014624:	d851      	bhi.n	80146ca <USBD_CDC_Setup+0x18a>
 8014626:	a201      	add	r2, pc, #4	; (adr r2, 801462c <USBD_CDC_Setup+0xec>)
 8014628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801462c:	0801465d 	.word	0x0801465d
 8014630:	080146d9 	.word	0x080146d9
 8014634:	080146cb 	.word	0x080146cb
 8014638:	080146cb 	.word	0x080146cb
 801463c:	080146cb 	.word	0x080146cb
 8014640:	080146cb 	.word	0x080146cb
 8014644:	080146cb 	.word	0x080146cb
 8014648:	080146cb 	.word	0x080146cb
 801464c:	080146cb 	.word	0x080146cb
 8014650:	080146cb 	.word	0x080146cb
 8014654:	08014687 	.word	0x08014687
 8014658:	080146b1 	.word	0x080146b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014662:	b2db      	uxtb	r3, r3
 8014664:	2b03      	cmp	r3, #3
 8014666:	d107      	bne.n	8014678 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014668:	f107 030a 	add.w	r3, r7, #10
 801466c:	2202      	movs	r2, #2
 801466e:	4619      	mov	r1, r3
 8014670:	6878      	ldr	r0, [r7, #4]
 8014672:	f001 fd33 	bl	80160dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014676:	e032      	b.n	80146de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014678:	6839      	ldr	r1, [r7, #0]
 801467a:	6878      	ldr	r0, [r7, #4]
 801467c:	f001 fcbd 	bl	8015ffa <USBD_CtlError>
            ret = USBD_FAIL;
 8014680:	2303      	movs	r3, #3
 8014682:	75fb      	strb	r3, [r7, #23]
          break;
 8014684:	e02b      	b.n	80146de <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801468c:	b2db      	uxtb	r3, r3
 801468e:	2b03      	cmp	r3, #3
 8014690:	d107      	bne.n	80146a2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014692:	f107 030d 	add.w	r3, r7, #13
 8014696:	2201      	movs	r2, #1
 8014698:	4619      	mov	r1, r3
 801469a:	6878      	ldr	r0, [r7, #4]
 801469c:	f001 fd1e 	bl	80160dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80146a0:	e01d      	b.n	80146de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80146a2:	6839      	ldr	r1, [r7, #0]
 80146a4:	6878      	ldr	r0, [r7, #4]
 80146a6:	f001 fca8 	bl	8015ffa <USBD_CtlError>
            ret = USBD_FAIL;
 80146aa:	2303      	movs	r3, #3
 80146ac:	75fb      	strb	r3, [r7, #23]
          break;
 80146ae:	e016      	b.n	80146de <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80146b6:	b2db      	uxtb	r3, r3
 80146b8:	2b03      	cmp	r3, #3
 80146ba:	d00f      	beq.n	80146dc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80146bc:	6839      	ldr	r1, [r7, #0]
 80146be:	6878      	ldr	r0, [r7, #4]
 80146c0:	f001 fc9b 	bl	8015ffa <USBD_CtlError>
            ret = USBD_FAIL;
 80146c4:	2303      	movs	r3, #3
 80146c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80146c8:	e008      	b.n	80146dc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80146ca:	6839      	ldr	r1, [r7, #0]
 80146cc:	6878      	ldr	r0, [r7, #4]
 80146ce:	f001 fc94 	bl	8015ffa <USBD_CtlError>
          ret = USBD_FAIL;
 80146d2:	2303      	movs	r3, #3
 80146d4:	75fb      	strb	r3, [r7, #23]
          break;
 80146d6:	e002      	b.n	80146de <USBD_CDC_Setup+0x19e>
          break;
 80146d8:	bf00      	nop
 80146da:	e008      	b.n	80146ee <USBD_CDC_Setup+0x1ae>
          break;
 80146dc:	bf00      	nop
      }
      break;
 80146de:	e006      	b.n	80146ee <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80146e0:	6839      	ldr	r1, [r7, #0]
 80146e2:	6878      	ldr	r0, [r7, #4]
 80146e4:	f001 fc89 	bl	8015ffa <USBD_CtlError>
      ret = USBD_FAIL;
 80146e8:	2303      	movs	r3, #3
 80146ea:	75fb      	strb	r3, [r7, #23]
      break;
 80146ec:	bf00      	nop
  }

  return (uint8_t)ret;
 80146ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80146f0:	4618      	mov	r0, r3
 80146f2:	3718      	adds	r7, #24
 80146f4:	46bd      	mov	sp, r7
 80146f6:	bd80      	pop	{r7, pc}

080146f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80146f8:	b580      	push	{r7, lr}
 80146fa:	b084      	sub	sp, #16
 80146fc:	af00      	add	r7, sp, #0
 80146fe:	6078      	str	r0, [r7, #4]
 8014700:	460b      	mov	r3, r1
 8014702:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801470a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	32b0      	adds	r2, #176	; 0xb0
 8014716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801471a:	2b00      	cmp	r3, #0
 801471c:	d101      	bne.n	8014722 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801471e:	2303      	movs	r3, #3
 8014720:	e065      	b.n	80147ee <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	32b0      	adds	r2, #176	; 0xb0
 801472c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014730:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014732:	78fb      	ldrb	r3, [r7, #3]
 8014734:	f003 020f 	and.w	r2, r3, #15
 8014738:	6879      	ldr	r1, [r7, #4]
 801473a:	4613      	mov	r3, r2
 801473c:	009b      	lsls	r3, r3, #2
 801473e:	4413      	add	r3, r2
 8014740:	009b      	lsls	r3, r3, #2
 8014742:	440b      	add	r3, r1
 8014744:	3318      	adds	r3, #24
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d02f      	beq.n	80147ac <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 801474c:	78fb      	ldrb	r3, [r7, #3]
 801474e:	f003 020f 	and.w	r2, r3, #15
 8014752:	6879      	ldr	r1, [r7, #4]
 8014754:	4613      	mov	r3, r2
 8014756:	009b      	lsls	r3, r3, #2
 8014758:	4413      	add	r3, r2
 801475a:	009b      	lsls	r3, r3, #2
 801475c:	440b      	add	r3, r1
 801475e:	3318      	adds	r3, #24
 8014760:	681a      	ldr	r2, [r3, #0]
 8014762:	78fb      	ldrb	r3, [r7, #3]
 8014764:	f003 010f 	and.w	r1, r3, #15
 8014768:	68f8      	ldr	r0, [r7, #12]
 801476a:	460b      	mov	r3, r1
 801476c:	00db      	lsls	r3, r3, #3
 801476e:	440b      	add	r3, r1
 8014770:	009b      	lsls	r3, r3, #2
 8014772:	4403      	add	r3, r0
 8014774:	3344      	adds	r3, #68	; 0x44
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	fbb2 f1f3 	udiv	r1, r2, r3
 801477c:	fb01 f303 	mul.w	r3, r1, r3
 8014780:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014782:	2b00      	cmp	r3, #0
 8014784:	d112      	bne.n	80147ac <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8014786:	78fb      	ldrb	r3, [r7, #3]
 8014788:	f003 020f 	and.w	r2, r3, #15
 801478c:	6879      	ldr	r1, [r7, #4]
 801478e:	4613      	mov	r3, r2
 8014790:	009b      	lsls	r3, r3, #2
 8014792:	4413      	add	r3, r2
 8014794:	009b      	lsls	r3, r3, #2
 8014796:	440b      	add	r3, r1
 8014798:	3318      	adds	r3, #24
 801479a:	2200      	movs	r2, #0
 801479c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801479e:	78f9      	ldrb	r1, [r7, #3]
 80147a0:	2300      	movs	r3, #0
 80147a2:	2200      	movs	r2, #0
 80147a4:	6878      	ldr	r0, [r7, #4]
 80147a6:	f002 fa06 	bl	8016bb6 <USBD_LL_Transmit>
 80147aa:	e01f      	b.n	80147ec <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80147ac:	68bb      	ldr	r3, [r7, #8]
 80147ae:	2200      	movs	r2, #0
 80147b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80147ba:	687a      	ldr	r2, [r7, #4]
 80147bc:	33b0      	adds	r3, #176	; 0xb0
 80147be:	009b      	lsls	r3, r3, #2
 80147c0:	4413      	add	r3, r2
 80147c2:	685b      	ldr	r3, [r3, #4]
 80147c4:	691b      	ldr	r3, [r3, #16]
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d010      	beq.n	80147ec <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80147d0:	687a      	ldr	r2, [r7, #4]
 80147d2:	33b0      	adds	r3, #176	; 0xb0
 80147d4:	009b      	lsls	r3, r3, #2
 80147d6:	4413      	add	r3, r2
 80147d8:	685b      	ldr	r3, [r3, #4]
 80147da:	691b      	ldr	r3, [r3, #16]
 80147dc:	68ba      	ldr	r2, [r7, #8]
 80147de:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80147e2:	68ba      	ldr	r2, [r7, #8]
 80147e4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80147e8:	78fa      	ldrb	r2, [r7, #3]
 80147ea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80147ec:	2300      	movs	r3, #0
}
 80147ee:	4618      	mov	r0, r3
 80147f0:	3710      	adds	r7, #16
 80147f2:	46bd      	mov	sp, r7
 80147f4:	bd80      	pop	{r7, pc}

080147f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80147f6:	b580      	push	{r7, lr}
 80147f8:	b084      	sub	sp, #16
 80147fa:	af00      	add	r7, sp, #0
 80147fc:	6078      	str	r0, [r7, #4]
 80147fe:	460b      	mov	r3, r1
 8014800:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	32b0      	adds	r2, #176	; 0xb0
 801480c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014810:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	32b0      	adds	r2, #176	; 0xb0
 801481c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014820:	2b00      	cmp	r3, #0
 8014822:	d101      	bne.n	8014828 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8014824:	2303      	movs	r3, #3
 8014826:	e01a      	b.n	801485e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014828:	78fb      	ldrb	r3, [r7, #3]
 801482a:	4619      	mov	r1, r3
 801482c:	6878      	ldr	r0, [r7, #4]
 801482e:	f002 fa04 	bl	8016c3a <USBD_LL_GetRxDataSize>
 8014832:	4602      	mov	r2, r0
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014840:	687a      	ldr	r2, [r7, #4]
 8014842:	33b0      	adds	r3, #176	; 0xb0
 8014844:	009b      	lsls	r3, r3, #2
 8014846:	4413      	add	r3, r2
 8014848:	685b      	ldr	r3, [r3, #4]
 801484a:	68db      	ldr	r3, [r3, #12]
 801484c:	68fa      	ldr	r2, [r7, #12]
 801484e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8014852:	68fa      	ldr	r2, [r7, #12]
 8014854:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8014858:	4611      	mov	r1, r2
 801485a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801485c:	2300      	movs	r3, #0
}
 801485e:	4618      	mov	r0, r3
 8014860:	3710      	adds	r7, #16
 8014862:	46bd      	mov	sp, r7
 8014864:	bd80      	pop	{r7, pc}

08014866 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014866:	b580      	push	{r7, lr}
 8014868:	b084      	sub	sp, #16
 801486a:	af00      	add	r7, sp, #0
 801486c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	32b0      	adds	r2, #176	; 0xb0
 8014878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801487c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	2b00      	cmp	r3, #0
 8014882:	d101      	bne.n	8014888 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014884:	2303      	movs	r3, #3
 8014886:	e025      	b.n	80148d4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801488e:	687a      	ldr	r2, [r7, #4]
 8014890:	33b0      	adds	r3, #176	; 0xb0
 8014892:	009b      	lsls	r3, r3, #2
 8014894:	4413      	add	r3, r2
 8014896:	685b      	ldr	r3, [r3, #4]
 8014898:	2b00      	cmp	r3, #0
 801489a:	d01a      	beq.n	80148d2 <USBD_CDC_EP0_RxReady+0x6c>
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80148a2:	2bff      	cmp	r3, #255	; 0xff
 80148a4:	d015      	beq.n	80148d2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80148ac:	687a      	ldr	r2, [r7, #4]
 80148ae:	33b0      	adds	r3, #176	; 0xb0
 80148b0:	009b      	lsls	r3, r3, #2
 80148b2:	4413      	add	r3, r2
 80148b4:	685b      	ldr	r3, [r3, #4]
 80148b6:	689b      	ldr	r3, [r3, #8]
 80148b8:	68fa      	ldr	r2, [r7, #12]
 80148ba:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80148be:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80148c0:	68fa      	ldr	r2, [r7, #12]
 80148c2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80148c6:	b292      	uxth	r2, r2
 80148c8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	22ff      	movs	r2, #255	; 0xff
 80148ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80148d2:	2300      	movs	r3, #0
}
 80148d4:	4618      	mov	r0, r3
 80148d6:	3710      	adds	r7, #16
 80148d8:	46bd      	mov	sp, r7
 80148da:	bd80      	pop	{r7, pc}

080148dc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80148dc:	b580      	push	{r7, lr}
 80148de:	b086      	sub	sp, #24
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80148e4:	2182      	movs	r1, #130	; 0x82
 80148e6:	4818      	ldr	r0, [pc, #96]	; (8014948 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80148e8:	f000 fd4f 	bl	801538a <USBD_GetEpDesc>
 80148ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80148ee:	2101      	movs	r1, #1
 80148f0:	4815      	ldr	r0, [pc, #84]	; (8014948 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80148f2:	f000 fd4a 	bl	801538a <USBD_GetEpDesc>
 80148f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80148f8:	2181      	movs	r1, #129	; 0x81
 80148fa:	4813      	ldr	r0, [pc, #76]	; (8014948 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80148fc:	f000 fd45 	bl	801538a <USBD_GetEpDesc>
 8014900:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014902:	697b      	ldr	r3, [r7, #20]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d002      	beq.n	801490e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014908:	697b      	ldr	r3, [r7, #20]
 801490a:	2210      	movs	r2, #16
 801490c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801490e:	693b      	ldr	r3, [r7, #16]
 8014910:	2b00      	cmp	r3, #0
 8014912:	d006      	beq.n	8014922 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014914:	693b      	ldr	r3, [r7, #16]
 8014916:	2200      	movs	r2, #0
 8014918:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801491c:	711a      	strb	r2, [r3, #4]
 801491e:	2200      	movs	r2, #0
 8014920:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	2b00      	cmp	r3, #0
 8014926:	d006      	beq.n	8014936 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	2200      	movs	r2, #0
 801492c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014930:	711a      	strb	r2, [r3, #4]
 8014932:	2200      	movs	r2, #0
 8014934:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	2243      	movs	r2, #67	; 0x43
 801493a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801493c:	4b02      	ldr	r3, [pc, #8]	; (8014948 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801493e:	4618      	mov	r0, r3
 8014940:	3718      	adds	r7, #24
 8014942:	46bd      	mov	sp, r7
 8014944:	bd80      	pop	{r7, pc}
 8014946:	bf00      	nop
 8014948:	24000054 	.word	0x24000054

0801494c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801494c:	b580      	push	{r7, lr}
 801494e:	b086      	sub	sp, #24
 8014950:	af00      	add	r7, sp, #0
 8014952:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014954:	2182      	movs	r1, #130	; 0x82
 8014956:	4818      	ldr	r0, [pc, #96]	; (80149b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014958:	f000 fd17 	bl	801538a <USBD_GetEpDesc>
 801495c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801495e:	2101      	movs	r1, #1
 8014960:	4815      	ldr	r0, [pc, #84]	; (80149b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014962:	f000 fd12 	bl	801538a <USBD_GetEpDesc>
 8014966:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014968:	2181      	movs	r1, #129	; 0x81
 801496a:	4813      	ldr	r0, [pc, #76]	; (80149b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801496c:	f000 fd0d 	bl	801538a <USBD_GetEpDesc>
 8014970:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014972:	697b      	ldr	r3, [r7, #20]
 8014974:	2b00      	cmp	r3, #0
 8014976:	d002      	beq.n	801497e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8014978:	697b      	ldr	r3, [r7, #20]
 801497a:	2210      	movs	r2, #16
 801497c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801497e:	693b      	ldr	r3, [r7, #16]
 8014980:	2b00      	cmp	r3, #0
 8014982:	d006      	beq.n	8014992 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014984:	693b      	ldr	r3, [r7, #16]
 8014986:	2200      	movs	r2, #0
 8014988:	711a      	strb	r2, [r3, #4]
 801498a:	2200      	movs	r2, #0
 801498c:	f042 0202 	orr.w	r2, r2, #2
 8014990:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	2b00      	cmp	r3, #0
 8014996:	d006      	beq.n	80149a6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	2200      	movs	r2, #0
 801499c:	711a      	strb	r2, [r3, #4]
 801499e:	2200      	movs	r2, #0
 80149a0:	f042 0202 	orr.w	r2, r2, #2
 80149a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	2243      	movs	r2, #67	; 0x43
 80149aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80149ac:	4b02      	ldr	r3, [pc, #8]	; (80149b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80149ae:	4618      	mov	r0, r3
 80149b0:	3718      	adds	r7, #24
 80149b2:	46bd      	mov	sp, r7
 80149b4:	bd80      	pop	{r7, pc}
 80149b6:	bf00      	nop
 80149b8:	24000054 	.word	0x24000054

080149bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80149bc:	b580      	push	{r7, lr}
 80149be:	b086      	sub	sp, #24
 80149c0:	af00      	add	r7, sp, #0
 80149c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80149c4:	2182      	movs	r1, #130	; 0x82
 80149c6:	4818      	ldr	r0, [pc, #96]	; (8014a28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80149c8:	f000 fcdf 	bl	801538a <USBD_GetEpDesc>
 80149cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80149ce:	2101      	movs	r1, #1
 80149d0:	4815      	ldr	r0, [pc, #84]	; (8014a28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80149d2:	f000 fcda 	bl	801538a <USBD_GetEpDesc>
 80149d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80149d8:	2181      	movs	r1, #129	; 0x81
 80149da:	4813      	ldr	r0, [pc, #76]	; (8014a28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80149dc:	f000 fcd5 	bl	801538a <USBD_GetEpDesc>
 80149e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80149e2:	697b      	ldr	r3, [r7, #20]
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d002      	beq.n	80149ee <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80149e8:	697b      	ldr	r3, [r7, #20]
 80149ea:	2210      	movs	r2, #16
 80149ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80149ee:	693b      	ldr	r3, [r7, #16]
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d006      	beq.n	8014a02 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80149f4:	693b      	ldr	r3, [r7, #16]
 80149f6:	2200      	movs	r2, #0
 80149f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80149fc:	711a      	strb	r2, [r3, #4]
 80149fe:	2200      	movs	r2, #0
 8014a00:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d006      	beq.n	8014a16 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	2200      	movs	r2, #0
 8014a0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014a10:	711a      	strb	r2, [r3, #4]
 8014a12:	2200      	movs	r2, #0
 8014a14:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	2243      	movs	r2, #67	; 0x43
 8014a1a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014a1c:	4b02      	ldr	r3, [pc, #8]	; (8014a28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8014a1e:	4618      	mov	r0, r3
 8014a20:	3718      	adds	r7, #24
 8014a22:	46bd      	mov	sp, r7
 8014a24:	bd80      	pop	{r7, pc}
 8014a26:	bf00      	nop
 8014a28:	24000054 	.word	0x24000054

08014a2c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014a2c:	b480      	push	{r7}
 8014a2e:	b083      	sub	sp, #12
 8014a30:	af00      	add	r7, sp, #0
 8014a32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	220a      	movs	r2, #10
 8014a38:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8014a3a:	4b03      	ldr	r3, [pc, #12]	; (8014a48 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014a3c:	4618      	mov	r0, r3
 8014a3e:	370c      	adds	r7, #12
 8014a40:	46bd      	mov	sp, r7
 8014a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a46:	4770      	bx	lr
 8014a48:	24000010 	.word	0x24000010

08014a4c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8014a4c:	b480      	push	{r7}
 8014a4e:	b083      	sub	sp, #12
 8014a50:	af00      	add	r7, sp, #0
 8014a52:	6078      	str	r0, [r7, #4]
 8014a54:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014a56:	683b      	ldr	r3, [r7, #0]
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d101      	bne.n	8014a60 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014a5c:	2303      	movs	r3, #3
 8014a5e:	e009      	b.n	8014a74 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014a66:	687a      	ldr	r2, [r7, #4]
 8014a68:	33b0      	adds	r3, #176	; 0xb0
 8014a6a:	009b      	lsls	r3, r3, #2
 8014a6c:	4413      	add	r3, r2
 8014a6e:	683a      	ldr	r2, [r7, #0]
 8014a70:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8014a72:	2300      	movs	r3, #0
}
 8014a74:	4618      	mov	r0, r3
 8014a76:	370c      	adds	r7, #12
 8014a78:	46bd      	mov	sp, r7
 8014a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a7e:	4770      	bx	lr

08014a80 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014a80:	b480      	push	{r7}
 8014a82:	b087      	sub	sp, #28
 8014a84:	af00      	add	r7, sp, #0
 8014a86:	60f8      	str	r0, [r7, #12]
 8014a88:	60b9      	str	r1, [r7, #8]
 8014a8a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	32b0      	adds	r2, #176	; 0xb0
 8014a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a9a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014a9c:	697b      	ldr	r3, [r7, #20]
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d101      	bne.n	8014aa6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014aa2:	2303      	movs	r3, #3
 8014aa4:	e008      	b.n	8014ab8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8014aa6:	697b      	ldr	r3, [r7, #20]
 8014aa8:	68ba      	ldr	r2, [r7, #8]
 8014aaa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8014aae:	697b      	ldr	r3, [r7, #20]
 8014ab0:	687a      	ldr	r2, [r7, #4]
 8014ab2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8014ab6:	2300      	movs	r3, #0
}
 8014ab8:	4618      	mov	r0, r3
 8014aba:	371c      	adds	r7, #28
 8014abc:	46bd      	mov	sp, r7
 8014abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac2:	4770      	bx	lr

08014ac4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014ac4:	b480      	push	{r7}
 8014ac6:	b085      	sub	sp, #20
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	6078      	str	r0, [r7, #4]
 8014acc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	32b0      	adds	r2, #176	; 0xb0
 8014ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014adc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d101      	bne.n	8014ae8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8014ae4:	2303      	movs	r3, #3
 8014ae6:	e004      	b.n	8014af2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	683a      	ldr	r2, [r7, #0]
 8014aec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8014af0:	2300      	movs	r3, #0
}
 8014af2:	4618      	mov	r0, r3
 8014af4:	3714      	adds	r7, #20
 8014af6:	46bd      	mov	sp, r7
 8014af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014afc:	4770      	bx	lr
	...

08014b00 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8014b00:	b580      	push	{r7, lr}
 8014b02:	b084      	sub	sp, #16
 8014b04:	af00      	add	r7, sp, #0
 8014b06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	32b0      	adds	r2, #176	; 0xb0
 8014b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b16:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8014b18:	2301      	movs	r3, #1
 8014b1a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014b1c:	68bb      	ldr	r3, [r7, #8]
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d101      	bne.n	8014b26 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014b22:	2303      	movs	r3, #3
 8014b24:	e025      	b.n	8014b72 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8014b26:	68bb      	ldr	r3, [r7, #8]
 8014b28:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d11f      	bne.n	8014b70 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8014b30:	68bb      	ldr	r3, [r7, #8]
 8014b32:	2201      	movs	r2, #1
 8014b34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8014b38:	4b10      	ldr	r3, [pc, #64]	; (8014b7c <USBD_CDC_TransmitPacket+0x7c>)
 8014b3a:	781b      	ldrb	r3, [r3, #0]
 8014b3c:	f003 020f 	and.w	r2, r3, #15
 8014b40:	68bb      	ldr	r3, [r7, #8]
 8014b42:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8014b46:	6878      	ldr	r0, [r7, #4]
 8014b48:	4613      	mov	r3, r2
 8014b4a:	009b      	lsls	r3, r3, #2
 8014b4c:	4413      	add	r3, r2
 8014b4e:	009b      	lsls	r3, r3, #2
 8014b50:	4403      	add	r3, r0
 8014b52:	3318      	adds	r3, #24
 8014b54:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8014b56:	4b09      	ldr	r3, [pc, #36]	; (8014b7c <USBD_CDC_TransmitPacket+0x7c>)
 8014b58:	7819      	ldrb	r1, [r3, #0]
 8014b5a:	68bb      	ldr	r3, [r7, #8]
 8014b5c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8014b60:	68bb      	ldr	r3, [r7, #8]
 8014b62:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014b66:	6878      	ldr	r0, [r7, #4]
 8014b68:	f002 f825 	bl	8016bb6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8014b6c:	2300      	movs	r3, #0
 8014b6e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8014b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b72:	4618      	mov	r0, r3
 8014b74:	3710      	adds	r7, #16
 8014b76:	46bd      	mov	sp, r7
 8014b78:	bd80      	pop	{r7, pc}
 8014b7a:	bf00      	nop
 8014b7c:	24000097 	.word	0x24000097

08014b80 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014b80:	b580      	push	{r7, lr}
 8014b82:	b084      	sub	sp, #16
 8014b84:	af00      	add	r7, sp, #0
 8014b86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	32b0      	adds	r2, #176	; 0xb0
 8014b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b96:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	32b0      	adds	r2, #176	; 0xb0
 8014ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d101      	bne.n	8014bae <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8014baa:	2303      	movs	r3, #3
 8014bac:	e018      	b.n	8014be0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	7c1b      	ldrb	r3, [r3, #16]
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d10a      	bne.n	8014bcc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014bb6:	4b0c      	ldr	r3, [pc, #48]	; (8014be8 <USBD_CDC_ReceivePacket+0x68>)
 8014bb8:	7819      	ldrb	r1, [r3, #0]
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014bc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014bc4:	6878      	ldr	r0, [r7, #4]
 8014bc6:	f002 f817 	bl	8016bf8 <USBD_LL_PrepareReceive>
 8014bca:	e008      	b.n	8014bde <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014bcc:	4b06      	ldr	r3, [pc, #24]	; (8014be8 <USBD_CDC_ReceivePacket+0x68>)
 8014bce:	7819      	ldrb	r1, [r3, #0]
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014bd6:	2340      	movs	r3, #64	; 0x40
 8014bd8:	6878      	ldr	r0, [r7, #4]
 8014bda:	f002 f80d 	bl	8016bf8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014bde:	2300      	movs	r3, #0
}
 8014be0:	4618      	mov	r0, r3
 8014be2:	3710      	adds	r7, #16
 8014be4:	46bd      	mov	sp, r7
 8014be6:	bd80      	pop	{r7, pc}
 8014be8:	24000098 	.word	0x24000098

08014bec <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014bec:	b580      	push	{r7, lr}
 8014bee:	b086      	sub	sp, #24
 8014bf0:	af00      	add	r7, sp, #0
 8014bf2:	60f8      	str	r0, [r7, #12]
 8014bf4:	60b9      	str	r1, [r7, #8]
 8014bf6:	4613      	mov	r3, r2
 8014bf8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d101      	bne.n	8014c04 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014c00:	2303      	movs	r3, #3
 8014c02:	e01f      	b.n	8014c44 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	2200      	movs	r2, #0
 8014c08:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8014c0c:	68fb      	ldr	r3, [r7, #12]
 8014c0e:	2200      	movs	r2, #0
 8014c10:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	2200      	movs	r2, #0
 8014c18:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014c1c:	68bb      	ldr	r3, [r7, #8]
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d003      	beq.n	8014c2a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	68ba      	ldr	r2, [r7, #8]
 8014c26:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	2201      	movs	r2, #1
 8014c2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	79fa      	ldrb	r2, [r7, #7]
 8014c36:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014c38:	68f8      	ldr	r0, [r7, #12]
 8014c3a:	f001 fe81 	bl	8016940 <USBD_LL_Init>
 8014c3e:	4603      	mov	r3, r0
 8014c40:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8014c44:	4618      	mov	r0, r3
 8014c46:	3718      	adds	r7, #24
 8014c48:	46bd      	mov	sp, r7
 8014c4a:	bd80      	pop	{r7, pc}

08014c4c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014c4c:	b580      	push	{r7, lr}
 8014c4e:	b084      	sub	sp, #16
 8014c50:	af00      	add	r7, sp, #0
 8014c52:	6078      	str	r0, [r7, #4]
 8014c54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014c56:	2300      	movs	r3, #0
 8014c58:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8014c5a:	683b      	ldr	r3, [r7, #0]
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d101      	bne.n	8014c64 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014c60:	2303      	movs	r3, #3
 8014c62:	e025      	b.n	8014cb0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	683a      	ldr	r2, [r7, #0]
 8014c68:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	32ae      	adds	r2, #174	; 0xae
 8014c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d00f      	beq.n	8014ca0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	32ae      	adds	r2, #174	; 0xae
 8014c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c90:	f107 020e 	add.w	r2, r7, #14
 8014c94:	4610      	mov	r0, r2
 8014c96:	4798      	blx	r3
 8014c98:	4602      	mov	r2, r0
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8014ca6:	1c5a      	adds	r2, r3, #1
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8014cae:	2300      	movs	r3, #0
}
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	3710      	adds	r7, #16
 8014cb4:	46bd      	mov	sp, r7
 8014cb6:	bd80      	pop	{r7, pc}

08014cb8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8014cb8:	b580      	push	{r7, lr}
 8014cba:	b082      	sub	sp, #8
 8014cbc:	af00      	add	r7, sp, #0
 8014cbe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8014cc0:	6878      	ldr	r0, [r7, #4]
 8014cc2:	f001 fe8f 	bl	80169e4 <USBD_LL_Start>
 8014cc6:	4603      	mov	r3, r0
}
 8014cc8:	4618      	mov	r0, r3
 8014cca:	3708      	adds	r7, #8
 8014ccc:	46bd      	mov	sp, r7
 8014cce:	bd80      	pop	{r7, pc}

08014cd0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8014cd0:	b480      	push	{r7}
 8014cd2:	b083      	sub	sp, #12
 8014cd4:	af00      	add	r7, sp, #0
 8014cd6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014cd8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8014cda:	4618      	mov	r0, r3
 8014cdc:	370c      	adds	r7, #12
 8014cde:	46bd      	mov	sp, r7
 8014ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce4:	4770      	bx	lr

08014ce6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014ce6:	b580      	push	{r7, lr}
 8014ce8:	b084      	sub	sp, #16
 8014cea:	af00      	add	r7, sp, #0
 8014cec:	6078      	str	r0, [r7, #4]
 8014cee:	460b      	mov	r3, r1
 8014cf0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014cf2:	2300      	movs	r3, #0
 8014cf4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d009      	beq.n	8014d14 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	78fa      	ldrb	r2, [r7, #3]
 8014d0a:	4611      	mov	r1, r2
 8014d0c:	6878      	ldr	r0, [r7, #4]
 8014d0e:	4798      	blx	r3
 8014d10:	4603      	mov	r3, r0
 8014d12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d16:	4618      	mov	r0, r3
 8014d18:	3710      	adds	r7, #16
 8014d1a:	46bd      	mov	sp, r7
 8014d1c:	bd80      	pop	{r7, pc}

08014d1e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014d1e:	b580      	push	{r7, lr}
 8014d20:	b084      	sub	sp, #16
 8014d22:	af00      	add	r7, sp, #0
 8014d24:	6078      	str	r0, [r7, #4]
 8014d26:	460b      	mov	r3, r1
 8014d28:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014d2a:	2300      	movs	r3, #0
 8014d2c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014d34:	685b      	ldr	r3, [r3, #4]
 8014d36:	78fa      	ldrb	r2, [r7, #3]
 8014d38:	4611      	mov	r1, r2
 8014d3a:	6878      	ldr	r0, [r7, #4]
 8014d3c:	4798      	blx	r3
 8014d3e:	4603      	mov	r3, r0
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d001      	beq.n	8014d48 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8014d44:	2303      	movs	r3, #3
 8014d46:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d4a:	4618      	mov	r0, r3
 8014d4c:	3710      	adds	r7, #16
 8014d4e:	46bd      	mov	sp, r7
 8014d50:	bd80      	pop	{r7, pc}

08014d52 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014d52:	b580      	push	{r7, lr}
 8014d54:	b084      	sub	sp, #16
 8014d56:	af00      	add	r7, sp, #0
 8014d58:	6078      	str	r0, [r7, #4]
 8014d5a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014d62:	6839      	ldr	r1, [r7, #0]
 8014d64:	4618      	mov	r0, r3
 8014d66:	f001 f90e 	bl	8015f86 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	2201      	movs	r2, #1
 8014d6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8014d78:	461a      	mov	r2, r3
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014d86:	f003 031f 	and.w	r3, r3, #31
 8014d8a:	2b02      	cmp	r3, #2
 8014d8c:	d01a      	beq.n	8014dc4 <USBD_LL_SetupStage+0x72>
 8014d8e:	2b02      	cmp	r3, #2
 8014d90:	d822      	bhi.n	8014dd8 <USBD_LL_SetupStage+0x86>
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d002      	beq.n	8014d9c <USBD_LL_SetupStage+0x4a>
 8014d96:	2b01      	cmp	r3, #1
 8014d98:	d00a      	beq.n	8014db0 <USBD_LL_SetupStage+0x5e>
 8014d9a:	e01d      	b.n	8014dd8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014da2:	4619      	mov	r1, r3
 8014da4:	6878      	ldr	r0, [r7, #4]
 8014da6:	f000 fb65 	bl	8015474 <USBD_StdDevReq>
 8014daa:	4603      	mov	r3, r0
 8014dac:	73fb      	strb	r3, [r7, #15]
      break;
 8014dae:	e020      	b.n	8014df2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014db6:	4619      	mov	r1, r3
 8014db8:	6878      	ldr	r0, [r7, #4]
 8014dba:	f000 fbcd 	bl	8015558 <USBD_StdItfReq>
 8014dbe:	4603      	mov	r3, r0
 8014dc0:	73fb      	strb	r3, [r7, #15]
      break;
 8014dc2:	e016      	b.n	8014df2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014dca:	4619      	mov	r1, r3
 8014dcc:	6878      	ldr	r0, [r7, #4]
 8014dce:	f000 fc2f 	bl	8015630 <USBD_StdEPReq>
 8014dd2:	4603      	mov	r3, r0
 8014dd4:	73fb      	strb	r3, [r7, #15]
      break;
 8014dd6:	e00c      	b.n	8014df2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014dde:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014de2:	b2db      	uxtb	r3, r3
 8014de4:	4619      	mov	r1, r3
 8014de6:	6878      	ldr	r0, [r7, #4]
 8014de8:	f001 fe5c 	bl	8016aa4 <USBD_LL_StallEP>
 8014dec:	4603      	mov	r3, r0
 8014dee:	73fb      	strb	r3, [r7, #15]
      break;
 8014df0:	bf00      	nop
  }

  return ret;
 8014df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8014df4:	4618      	mov	r0, r3
 8014df6:	3710      	adds	r7, #16
 8014df8:	46bd      	mov	sp, r7
 8014dfa:	bd80      	pop	{r7, pc}

08014dfc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8014dfc:	b580      	push	{r7, lr}
 8014dfe:	b086      	sub	sp, #24
 8014e00:	af00      	add	r7, sp, #0
 8014e02:	60f8      	str	r0, [r7, #12]
 8014e04:	460b      	mov	r3, r1
 8014e06:	607a      	str	r2, [r7, #4]
 8014e08:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8014e0a:	2300      	movs	r3, #0
 8014e0c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8014e0e:	7afb      	ldrb	r3, [r7, #11]
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d16e      	bne.n	8014ef2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8014e1a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014e22:	2b03      	cmp	r3, #3
 8014e24:	f040 8098 	bne.w	8014f58 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8014e28:	693b      	ldr	r3, [r7, #16]
 8014e2a:	689a      	ldr	r2, [r3, #8]
 8014e2c:	693b      	ldr	r3, [r7, #16]
 8014e2e:	68db      	ldr	r3, [r3, #12]
 8014e30:	429a      	cmp	r2, r3
 8014e32:	d913      	bls.n	8014e5c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8014e34:	693b      	ldr	r3, [r7, #16]
 8014e36:	689a      	ldr	r2, [r3, #8]
 8014e38:	693b      	ldr	r3, [r7, #16]
 8014e3a:	68db      	ldr	r3, [r3, #12]
 8014e3c:	1ad2      	subs	r2, r2, r3
 8014e3e:	693b      	ldr	r3, [r7, #16]
 8014e40:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8014e42:	693b      	ldr	r3, [r7, #16]
 8014e44:	68da      	ldr	r2, [r3, #12]
 8014e46:	693b      	ldr	r3, [r7, #16]
 8014e48:	689b      	ldr	r3, [r3, #8]
 8014e4a:	4293      	cmp	r3, r2
 8014e4c:	bf28      	it	cs
 8014e4e:	4613      	movcs	r3, r2
 8014e50:	461a      	mov	r2, r3
 8014e52:	6879      	ldr	r1, [r7, #4]
 8014e54:	68f8      	ldr	r0, [r7, #12]
 8014e56:	f001 f98a 	bl	801616e <USBD_CtlContinueRx>
 8014e5a:	e07d      	b.n	8014f58 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8014e5c:	68fb      	ldr	r3, [r7, #12]
 8014e5e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014e62:	f003 031f 	and.w	r3, r3, #31
 8014e66:	2b02      	cmp	r3, #2
 8014e68:	d014      	beq.n	8014e94 <USBD_LL_DataOutStage+0x98>
 8014e6a:	2b02      	cmp	r3, #2
 8014e6c:	d81d      	bhi.n	8014eaa <USBD_LL_DataOutStage+0xae>
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d002      	beq.n	8014e78 <USBD_LL_DataOutStage+0x7c>
 8014e72:	2b01      	cmp	r3, #1
 8014e74:	d003      	beq.n	8014e7e <USBD_LL_DataOutStage+0x82>
 8014e76:	e018      	b.n	8014eaa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8014e78:	2300      	movs	r3, #0
 8014e7a:	75bb      	strb	r3, [r7, #22]
            break;
 8014e7c:	e018      	b.n	8014eb0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8014e84:	b2db      	uxtb	r3, r3
 8014e86:	4619      	mov	r1, r3
 8014e88:	68f8      	ldr	r0, [r7, #12]
 8014e8a:	f000 fa64 	bl	8015356 <USBD_CoreFindIF>
 8014e8e:	4603      	mov	r3, r0
 8014e90:	75bb      	strb	r3, [r7, #22]
            break;
 8014e92:	e00d      	b.n	8014eb0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8014e94:	68fb      	ldr	r3, [r7, #12]
 8014e96:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8014e9a:	b2db      	uxtb	r3, r3
 8014e9c:	4619      	mov	r1, r3
 8014e9e:	68f8      	ldr	r0, [r7, #12]
 8014ea0:	f000 fa66 	bl	8015370 <USBD_CoreFindEP>
 8014ea4:	4603      	mov	r3, r0
 8014ea6:	75bb      	strb	r3, [r7, #22]
            break;
 8014ea8:	e002      	b.n	8014eb0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8014eaa:	2300      	movs	r3, #0
 8014eac:	75bb      	strb	r3, [r7, #22]
            break;
 8014eae:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8014eb0:	7dbb      	ldrb	r3, [r7, #22]
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d119      	bne.n	8014eea <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014ebc:	b2db      	uxtb	r3, r3
 8014ebe:	2b03      	cmp	r3, #3
 8014ec0:	d113      	bne.n	8014eea <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8014ec2:	7dba      	ldrb	r2, [r7, #22]
 8014ec4:	68fb      	ldr	r3, [r7, #12]
 8014ec6:	32ae      	adds	r2, #174	; 0xae
 8014ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ecc:	691b      	ldr	r3, [r3, #16]
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d00b      	beq.n	8014eea <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8014ed2:	7dba      	ldrb	r2, [r7, #22]
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8014eda:	7dba      	ldrb	r2, [r7, #22]
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	32ae      	adds	r2, #174	; 0xae
 8014ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ee4:	691b      	ldr	r3, [r3, #16]
 8014ee6:	68f8      	ldr	r0, [r7, #12]
 8014ee8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8014eea:	68f8      	ldr	r0, [r7, #12]
 8014eec:	f001 f950 	bl	8016190 <USBD_CtlSendStatus>
 8014ef0:	e032      	b.n	8014f58 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8014ef2:	7afb      	ldrb	r3, [r7, #11]
 8014ef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014ef8:	b2db      	uxtb	r3, r3
 8014efa:	4619      	mov	r1, r3
 8014efc:	68f8      	ldr	r0, [r7, #12]
 8014efe:	f000 fa37 	bl	8015370 <USBD_CoreFindEP>
 8014f02:	4603      	mov	r3, r0
 8014f04:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014f06:	7dbb      	ldrb	r3, [r7, #22]
 8014f08:	2bff      	cmp	r3, #255	; 0xff
 8014f0a:	d025      	beq.n	8014f58 <USBD_LL_DataOutStage+0x15c>
 8014f0c:	7dbb      	ldrb	r3, [r7, #22]
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d122      	bne.n	8014f58 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014f18:	b2db      	uxtb	r3, r3
 8014f1a:	2b03      	cmp	r3, #3
 8014f1c:	d117      	bne.n	8014f4e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8014f1e:	7dba      	ldrb	r2, [r7, #22]
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	32ae      	adds	r2, #174	; 0xae
 8014f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f28:	699b      	ldr	r3, [r3, #24]
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d00f      	beq.n	8014f4e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8014f2e:	7dba      	ldrb	r2, [r7, #22]
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8014f36:	7dba      	ldrb	r2, [r7, #22]
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	32ae      	adds	r2, #174	; 0xae
 8014f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f40:	699b      	ldr	r3, [r3, #24]
 8014f42:	7afa      	ldrb	r2, [r7, #11]
 8014f44:	4611      	mov	r1, r2
 8014f46:	68f8      	ldr	r0, [r7, #12]
 8014f48:	4798      	blx	r3
 8014f4a:	4603      	mov	r3, r0
 8014f4c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8014f4e:	7dfb      	ldrb	r3, [r7, #23]
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d001      	beq.n	8014f58 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8014f54:	7dfb      	ldrb	r3, [r7, #23]
 8014f56:	e000      	b.n	8014f5a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8014f58:	2300      	movs	r3, #0
}
 8014f5a:	4618      	mov	r0, r3
 8014f5c:	3718      	adds	r7, #24
 8014f5e:	46bd      	mov	sp, r7
 8014f60:	bd80      	pop	{r7, pc}

08014f62 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8014f62:	b580      	push	{r7, lr}
 8014f64:	b086      	sub	sp, #24
 8014f66:	af00      	add	r7, sp, #0
 8014f68:	60f8      	str	r0, [r7, #12]
 8014f6a:	460b      	mov	r3, r1
 8014f6c:	607a      	str	r2, [r7, #4]
 8014f6e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8014f70:	7afb      	ldrb	r3, [r7, #11]
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d16f      	bne.n	8015056 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8014f76:	68fb      	ldr	r3, [r7, #12]
 8014f78:	3314      	adds	r3, #20
 8014f7a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014f82:	2b02      	cmp	r3, #2
 8014f84:	d15a      	bne.n	801503c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8014f86:	693b      	ldr	r3, [r7, #16]
 8014f88:	689a      	ldr	r2, [r3, #8]
 8014f8a:	693b      	ldr	r3, [r7, #16]
 8014f8c:	68db      	ldr	r3, [r3, #12]
 8014f8e:	429a      	cmp	r2, r3
 8014f90:	d914      	bls.n	8014fbc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8014f92:	693b      	ldr	r3, [r7, #16]
 8014f94:	689a      	ldr	r2, [r3, #8]
 8014f96:	693b      	ldr	r3, [r7, #16]
 8014f98:	68db      	ldr	r3, [r3, #12]
 8014f9a:	1ad2      	subs	r2, r2, r3
 8014f9c:	693b      	ldr	r3, [r7, #16]
 8014f9e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8014fa0:	693b      	ldr	r3, [r7, #16]
 8014fa2:	689b      	ldr	r3, [r3, #8]
 8014fa4:	461a      	mov	r2, r3
 8014fa6:	6879      	ldr	r1, [r7, #4]
 8014fa8:	68f8      	ldr	r0, [r7, #12]
 8014faa:	f001 f8b2 	bl	8016112 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014fae:	2300      	movs	r3, #0
 8014fb0:	2200      	movs	r2, #0
 8014fb2:	2100      	movs	r1, #0
 8014fb4:	68f8      	ldr	r0, [r7, #12]
 8014fb6:	f001 fe1f 	bl	8016bf8 <USBD_LL_PrepareReceive>
 8014fba:	e03f      	b.n	801503c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8014fbc:	693b      	ldr	r3, [r7, #16]
 8014fbe:	68da      	ldr	r2, [r3, #12]
 8014fc0:	693b      	ldr	r3, [r7, #16]
 8014fc2:	689b      	ldr	r3, [r3, #8]
 8014fc4:	429a      	cmp	r2, r3
 8014fc6:	d11c      	bne.n	8015002 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8014fc8:	693b      	ldr	r3, [r7, #16]
 8014fca:	685a      	ldr	r2, [r3, #4]
 8014fcc:	693b      	ldr	r3, [r7, #16]
 8014fce:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8014fd0:	429a      	cmp	r2, r3
 8014fd2:	d316      	bcc.n	8015002 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8014fd4:	693b      	ldr	r3, [r7, #16]
 8014fd6:	685a      	ldr	r2, [r3, #4]
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8014fde:	429a      	cmp	r2, r3
 8014fe0:	d20f      	bcs.n	8015002 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8014fe2:	2200      	movs	r2, #0
 8014fe4:	2100      	movs	r1, #0
 8014fe6:	68f8      	ldr	r0, [r7, #12]
 8014fe8:	f001 f893 	bl	8016112 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8014fec:	68fb      	ldr	r3, [r7, #12]
 8014fee:	2200      	movs	r2, #0
 8014ff0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014ff4:	2300      	movs	r3, #0
 8014ff6:	2200      	movs	r2, #0
 8014ff8:	2100      	movs	r1, #0
 8014ffa:	68f8      	ldr	r0, [r7, #12]
 8014ffc:	f001 fdfc 	bl	8016bf8 <USBD_LL_PrepareReceive>
 8015000:	e01c      	b.n	801503c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015002:	68fb      	ldr	r3, [r7, #12]
 8015004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015008:	b2db      	uxtb	r3, r3
 801500a:	2b03      	cmp	r3, #3
 801500c:	d10f      	bne.n	801502e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015014:	68db      	ldr	r3, [r3, #12]
 8015016:	2b00      	cmp	r3, #0
 8015018:	d009      	beq.n	801502e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	2200      	movs	r2, #0
 801501e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015028:	68db      	ldr	r3, [r3, #12]
 801502a:	68f8      	ldr	r0, [r7, #12]
 801502c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801502e:	2180      	movs	r1, #128	; 0x80
 8015030:	68f8      	ldr	r0, [r7, #12]
 8015032:	f001 fd37 	bl	8016aa4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015036:	68f8      	ldr	r0, [r7, #12]
 8015038:	f001 f8bd 	bl	80161b6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8015042:	2b00      	cmp	r3, #0
 8015044:	d03a      	beq.n	80150bc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8015046:	68f8      	ldr	r0, [r7, #12]
 8015048:	f7ff fe42 	bl	8014cd0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801504c:	68fb      	ldr	r3, [r7, #12]
 801504e:	2200      	movs	r2, #0
 8015050:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8015054:	e032      	b.n	80150bc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8015056:	7afb      	ldrb	r3, [r7, #11]
 8015058:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801505c:	b2db      	uxtb	r3, r3
 801505e:	4619      	mov	r1, r3
 8015060:	68f8      	ldr	r0, [r7, #12]
 8015062:	f000 f985 	bl	8015370 <USBD_CoreFindEP>
 8015066:	4603      	mov	r3, r0
 8015068:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801506a:	7dfb      	ldrb	r3, [r7, #23]
 801506c:	2bff      	cmp	r3, #255	; 0xff
 801506e:	d025      	beq.n	80150bc <USBD_LL_DataInStage+0x15a>
 8015070:	7dfb      	ldrb	r3, [r7, #23]
 8015072:	2b00      	cmp	r3, #0
 8015074:	d122      	bne.n	80150bc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015076:	68fb      	ldr	r3, [r7, #12]
 8015078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801507c:	b2db      	uxtb	r3, r3
 801507e:	2b03      	cmp	r3, #3
 8015080:	d11c      	bne.n	80150bc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8015082:	7dfa      	ldrb	r2, [r7, #23]
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	32ae      	adds	r2, #174	; 0xae
 8015088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801508c:	695b      	ldr	r3, [r3, #20]
 801508e:	2b00      	cmp	r3, #0
 8015090:	d014      	beq.n	80150bc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8015092:	7dfa      	ldrb	r2, [r7, #23]
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801509a:	7dfa      	ldrb	r2, [r7, #23]
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	32ae      	adds	r2, #174	; 0xae
 80150a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150a4:	695b      	ldr	r3, [r3, #20]
 80150a6:	7afa      	ldrb	r2, [r7, #11]
 80150a8:	4611      	mov	r1, r2
 80150aa:	68f8      	ldr	r0, [r7, #12]
 80150ac:	4798      	blx	r3
 80150ae:	4603      	mov	r3, r0
 80150b0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80150b2:	7dbb      	ldrb	r3, [r7, #22]
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d001      	beq.n	80150bc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80150b8:	7dbb      	ldrb	r3, [r7, #22]
 80150ba:	e000      	b.n	80150be <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80150bc:	2300      	movs	r3, #0
}
 80150be:	4618      	mov	r0, r3
 80150c0:	3718      	adds	r7, #24
 80150c2:	46bd      	mov	sp, r7
 80150c4:	bd80      	pop	{r7, pc}

080150c6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80150c6:	b580      	push	{r7, lr}
 80150c8:	b084      	sub	sp, #16
 80150ca:	af00      	add	r7, sp, #0
 80150cc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80150ce:	2300      	movs	r3, #0
 80150d0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	2201      	movs	r2, #1
 80150d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	2200      	movs	r2, #0
 80150de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	2200      	movs	r2, #0
 80150e6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	2200      	movs	r2, #0
 80150ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	2200      	movs	r2, #0
 80150f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d014      	beq.n	801512c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015108:	685b      	ldr	r3, [r3, #4]
 801510a:	2b00      	cmp	r3, #0
 801510c:	d00e      	beq.n	801512c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015114:	685b      	ldr	r3, [r3, #4]
 8015116:	687a      	ldr	r2, [r7, #4]
 8015118:	6852      	ldr	r2, [r2, #4]
 801511a:	b2d2      	uxtb	r2, r2
 801511c:	4611      	mov	r1, r2
 801511e:	6878      	ldr	r0, [r7, #4]
 8015120:	4798      	blx	r3
 8015122:	4603      	mov	r3, r0
 8015124:	2b00      	cmp	r3, #0
 8015126:	d001      	beq.n	801512c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8015128:	2303      	movs	r3, #3
 801512a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801512c:	2340      	movs	r3, #64	; 0x40
 801512e:	2200      	movs	r2, #0
 8015130:	2100      	movs	r1, #0
 8015132:	6878      	ldr	r0, [r7, #4]
 8015134:	f001 fc71 	bl	8016a1a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	2201      	movs	r2, #1
 801513c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	2240      	movs	r2, #64	; 0x40
 8015144:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015148:	2340      	movs	r3, #64	; 0x40
 801514a:	2200      	movs	r2, #0
 801514c:	2180      	movs	r1, #128	; 0x80
 801514e:	6878      	ldr	r0, [r7, #4]
 8015150:	f001 fc63 	bl	8016a1a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	2201      	movs	r2, #1
 8015158:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	2240      	movs	r2, #64	; 0x40
 801515e:	621a      	str	r2, [r3, #32]

  return ret;
 8015160:	7bfb      	ldrb	r3, [r7, #15]
}
 8015162:	4618      	mov	r0, r3
 8015164:	3710      	adds	r7, #16
 8015166:	46bd      	mov	sp, r7
 8015168:	bd80      	pop	{r7, pc}

0801516a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801516a:	b480      	push	{r7}
 801516c:	b083      	sub	sp, #12
 801516e:	af00      	add	r7, sp, #0
 8015170:	6078      	str	r0, [r7, #4]
 8015172:	460b      	mov	r3, r1
 8015174:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	78fa      	ldrb	r2, [r7, #3]
 801517a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801517c:	2300      	movs	r3, #0
}
 801517e:	4618      	mov	r0, r3
 8015180:	370c      	adds	r7, #12
 8015182:	46bd      	mov	sp, r7
 8015184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015188:	4770      	bx	lr

0801518a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801518a:	b480      	push	{r7}
 801518c:	b083      	sub	sp, #12
 801518e:	af00      	add	r7, sp, #0
 8015190:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015198:	b2db      	uxtb	r3, r3
 801519a:	2b04      	cmp	r3, #4
 801519c:	d006      	beq.n	80151ac <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80151a4:	b2da      	uxtb	r2, r3
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	2204      	movs	r2, #4
 80151b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80151b4:	2300      	movs	r3, #0
}
 80151b6:	4618      	mov	r0, r3
 80151b8:	370c      	adds	r7, #12
 80151ba:	46bd      	mov	sp, r7
 80151bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151c0:	4770      	bx	lr

080151c2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80151c2:	b480      	push	{r7}
 80151c4:	b083      	sub	sp, #12
 80151c6:	af00      	add	r7, sp, #0
 80151c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80151d0:	b2db      	uxtb	r3, r3
 80151d2:	2b04      	cmp	r3, #4
 80151d4:	d106      	bne.n	80151e4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80151dc:	b2da      	uxtb	r2, r3
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80151e4:	2300      	movs	r3, #0
}
 80151e6:	4618      	mov	r0, r3
 80151e8:	370c      	adds	r7, #12
 80151ea:	46bd      	mov	sp, r7
 80151ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151f0:	4770      	bx	lr

080151f2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80151f2:	b580      	push	{r7, lr}
 80151f4:	b082      	sub	sp, #8
 80151f6:	af00      	add	r7, sp, #0
 80151f8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015200:	b2db      	uxtb	r3, r3
 8015202:	2b03      	cmp	r3, #3
 8015204:	d110      	bne.n	8015228 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801520c:	2b00      	cmp	r3, #0
 801520e:	d00b      	beq.n	8015228 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015216:	69db      	ldr	r3, [r3, #28]
 8015218:	2b00      	cmp	r3, #0
 801521a:	d005      	beq.n	8015228 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015222:	69db      	ldr	r3, [r3, #28]
 8015224:	6878      	ldr	r0, [r7, #4]
 8015226:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8015228:	2300      	movs	r3, #0
}
 801522a:	4618      	mov	r0, r3
 801522c:	3708      	adds	r7, #8
 801522e:	46bd      	mov	sp, r7
 8015230:	bd80      	pop	{r7, pc}

08015232 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8015232:	b580      	push	{r7, lr}
 8015234:	b082      	sub	sp, #8
 8015236:	af00      	add	r7, sp, #0
 8015238:	6078      	str	r0, [r7, #4]
 801523a:	460b      	mov	r3, r1
 801523c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	32ae      	adds	r2, #174	; 0xae
 8015248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801524c:	2b00      	cmp	r3, #0
 801524e:	d101      	bne.n	8015254 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8015250:	2303      	movs	r3, #3
 8015252:	e01c      	b.n	801528e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801525a:	b2db      	uxtb	r3, r3
 801525c:	2b03      	cmp	r3, #3
 801525e:	d115      	bne.n	801528c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	32ae      	adds	r2, #174	; 0xae
 801526a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801526e:	6a1b      	ldr	r3, [r3, #32]
 8015270:	2b00      	cmp	r3, #0
 8015272:	d00b      	beq.n	801528c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	32ae      	adds	r2, #174	; 0xae
 801527e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015282:	6a1b      	ldr	r3, [r3, #32]
 8015284:	78fa      	ldrb	r2, [r7, #3]
 8015286:	4611      	mov	r1, r2
 8015288:	6878      	ldr	r0, [r7, #4]
 801528a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801528c:	2300      	movs	r3, #0
}
 801528e:	4618      	mov	r0, r3
 8015290:	3708      	adds	r7, #8
 8015292:	46bd      	mov	sp, r7
 8015294:	bd80      	pop	{r7, pc}

08015296 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015296:	b580      	push	{r7, lr}
 8015298:	b082      	sub	sp, #8
 801529a:	af00      	add	r7, sp, #0
 801529c:	6078      	str	r0, [r7, #4]
 801529e:	460b      	mov	r3, r1
 80152a0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	32ae      	adds	r2, #174	; 0xae
 80152ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d101      	bne.n	80152b8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80152b4:	2303      	movs	r3, #3
 80152b6:	e01c      	b.n	80152f2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80152be:	b2db      	uxtb	r3, r3
 80152c0:	2b03      	cmp	r3, #3
 80152c2:	d115      	bne.n	80152f0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	32ae      	adds	r2, #174	; 0xae
 80152ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d00b      	beq.n	80152f0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	32ae      	adds	r2, #174	; 0xae
 80152e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152e8:	78fa      	ldrb	r2, [r7, #3]
 80152ea:	4611      	mov	r1, r2
 80152ec:	6878      	ldr	r0, [r7, #4]
 80152ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80152f0:	2300      	movs	r3, #0
}
 80152f2:	4618      	mov	r0, r3
 80152f4:	3708      	adds	r7, #8
 80152f6:	46bd      	mov	sp, r7
 80152f8:	bd80      	pop	{r7, pc}

080152fa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80152fa:	b480      	push	{r7}
 80152fc:	b083      	sub	sp, #12
 80152fe:	af00      	add	r7, sp, #0
 8015300:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015302:	2300      	movs	r3, #0
}
 8015304:	4618      	mov	r0, r3
 8015306:	370c      	adds	r7, #12
 8015308:	46bd      	mov	sp, r7
 801530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801530e:	4770      	bx	lr

08015310 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8015310:	b580      	push	{r7, lr}
 8015312:	b084      	sub	sp, #16
 8015314:	af00      	add	r7, sp, #0
 8015316:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8015318:	2300      	movs	r3, #0
 801531a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	2201      	movs	r2, #1
 8015320:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801532a:	2b00      	cmp	r3, #0
 801532c:	d00e      	beq.n	801534c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015334:	685b      	ldr	r3, [r3, #4]
 8015336:	687a      	ldr	r2, [r7, #4]
 8015338:	6852      	ldr	r2, [r2, #4]
 801533a:	b2d2      	uxtb	r2, r2
 801533c:	4611      	mov	r1, r2
 801533e:	6878      	ldr	r0, [r7, #4]
 8015340:	4798      	blx	r3
 8015342:	4603      	mov	r3, r0
 8015344:	2b00      	cmp	r3, #0
 8015346:	d001      	beq.n	801534c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8015348:	2303      	movs	r3, #3
 801534a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801534c:	7bfb      	ldrb	r3, [r7, #15]
}
 801534e:	4618      	mov	r0, r3
 8015350:	3710      	adds	r7, #16
 8015352:	46bd      	mov	sp, r7
 8015354:	bd80      	pop	{r7, pc}

08015356 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015356:	b480      	push	{r7}
 8015358:	b083      	sub	sp, #12
 801535a:	af00      	add	r7, sp, #0
 801535c:	6078      	str	r0, [r7, #4]
 801535e:	460b      	mov	r3, r1
 8015360:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015362:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015364:	4618      	mov	r0, r3
 8015366:	370c      	adds	r7, #12
 8015368:	46bd      	mov	sp, r7
 801536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801536e:	4770      	bx	lr

08015370 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015370:	b480      	push	{r7}
 8015372:	b083      	sub	sp, #12
 8015374:	af00      	add	r7, sp, #0
 8015376:	6078      	str	r0, [r7, #4]
 8015378:	460b      	mov	r3, r1
 801537a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801537c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801537e:	4618      	mov	r0, r3
 8015380:	370c      	adds	r7, #12
 8015382:	46bd      	mov	sp, r7
 8015384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015388:	4770      	bx	lr

0801538a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801538a:	b580      	push	{r7, lr}
 801538c:	b086      	sub	sp, #24
 801538e:	af00      	add	r7, sp, #0
 8015390:	6078      	str	r0, [r7, #4]
 8015392:	460b      	mov	r3, r1
 8015394:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801539e:	2300      	movs	r3, #0
 80153a0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80153a2:	68fb      	ldr	r3, [r7, #12]
 80153a4:	885b      	ldrh	r3, [r3, #2]
 80153a6:	b29a      	uxth	r2, r3
 80153a8:	68fb      	ldr	r3, [r7, #12]
 80153aa:	781b      	ldrb	r3, [r3, #0]
 80153ac:	b29b      	uxth	r3, r3
 80153ae:	429a      	cmp	r2, r3
 80153b0:	d920      	bls.n	80153f4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	781b      	ldrb	r3, [r3, #0]
 80153b6:	b29b      	uxth	r3, r3
 80153b8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80153ba:	e013      	b.n	80153e4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80153bc:	f107 030a 	add.w	r3, r7, #10
 80153c0:	4619      	mov	r1, r3
 80153c2:	6978      	ldr	r0, [r7, #20]
 80153c4:	f000 f81b 	bl	80153fe <USBD_GetNextDesc>
 80153c8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80153ca:	697b      	ldr	r3, [r7, #20]
 80153cc:	785b      	ldrb	r3, [r3, #1]
 80153ce:	2b05      	cmp	r3, #5
 80153d0:	d108      	bne.n	80153e4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80153d2:	697b      	ldr	r3, [r7, #20]
 80153d4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80153d6:	693b      	ldr	r3, [r7, #16]
 80153d8:	789b      	ldrb	r3, [r3, #2]
 80153da:	78fa      	ldrb	r2, [r7, #3]
 80153dc:	429a      	cmp	r2, r3
 80153de:	d008      	beq.n	80153f2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80153e0:	2300      	movs	r3, #0
 80153e2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	885b      	ldrh	r3, [r3, #2]
 80153e8:	b29a      	uxth	r2, r3
 80153ea:	897b      	ldrh	r3, [r7, #10]
 80153ec:	429a      	cmp	r2, r3
 80153ee:	d8e5      	bhi.n	80153bc <USBD_GetEpDesc+0x32>
 80153f0:	e000      	b.n	80153f4 <USBD_GetEpDesc+0x6a>
          break;
 80153f2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80153f4:	693b      	ldr	r3, [r7, #16]
}
 80153f6:	4618      	mov	r0, r3
 80153f8:	3718      	adds	r7, #24
 80153fa:	46bd      	mov	sp, r7
 80153fc:	bd80      	pop	{r7, pc}

080153fe <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80153fe:	b480      	push	{r7}
 8015400:	b085      	sub	sp, #20
 8015402:	af00      	add	r7, sp, #0
 8015404:	6078      	str	r0, [r7, #4]
 8015406:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801540c:	683b      	ldr	r3, [r7, #0]
 801540e:	881a      	ldrh	r2, [r3, #0]
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	781b      	ldrb	r3, [r3, #0]
 8015414:	b29b      	uxth	r3, r3
 8015416:	4413      	add	r3, r2
 8015418:	b29a      	uxth	r2, r3
 801541a:	683b      	ldr	r3, [r7, #0]
 801541c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801541e:	68fb      	ldr	r3, [r7, #12]
 8015420:	781b      	ldrb	r3, [r3, #0]
 8015422:	461a      	mov	r2, r3
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	4413      	add	r3, r2
 8015428:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801542a:	68fb      	ldr	r3, [r7, #12]
}
 801542c:	4618      	mov	r0, r3
 801542e:	3714      	adds	r7, #20
 8015430:	46bd      	mov	sp, r7
 8015432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015436:	4770      	bx	lr

08015438 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015438:	b480      	push	{r7}
 801543a:	b087      	sub	sp, #28
 801543c:	af00      	add	r7, sp, #0
 801543e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015444:	697b      	ldr	r3, [r7, #20]
 8015446:	781b      	ldrb	r3, [r3, #0]
 8015448:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801544a:	697b      	ldr	r3, [r7, #20]
 801544c:	3301      	adds	r3, #1
 801544e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015450:	697b      	ldr	r3, [r7, #20]
 8015452:	781b      	ldrb	r3, [r3, #0]
 8015454:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015456:	8a3b      	ldrh	r3, [r7, #16]
 8015458:	021b      	lsls	r3, r3, #8
 801545a:	b21a      	sxth	r2, r3
 801545c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015460:	4313      	orrs	r3, r2
 8015462:	b21b      	sxth	r3, r3
 8015464:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015466:	89fb      	ldrh	r3, [r7, #14]
}
 8015468:	4618      	mov	r0, r3
 801546a:	371c      	adds	r7, #28
 801546c:	46bd      	mov	sp, r7
 801546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015472:	4770      	bx	lr

08015474 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015474:	b580      	push	{r7, lr}
 8015476:	b084      	sub	sp, #16
 8015478:	af00      	add	r7, sp, #0
 801547a:	6078      	str	r0, [r7, #4]
 801547c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801547e:	2300      	movs	r3, #0
 8015480:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015482:	683b      	ldr	r3, [r7, #0]
 8015484:	781b      	ldrb	r3, [r3, #0]
 8015486:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801548a:	2b40      	cmp	r3, #64	; 0x40
 801548c:	d005      	beq.n	801549a <USBD_StdDevReq+0x26>
 801548e:	2b40      	cmp	r3, #64	; 0x40
 8015490:	d857      	bhi.n	8015542 <USBD_StdDevReq+0xce>
 8015492:	2b00      	cmp	r3, #0
 8015494:	d00f      	beq.n	80154b6 <USBD_StdDevReq+0x42>
 8015496:	2b20      	cmp	r3, #32
 8015498:	d153      	bne.n	8015542 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	32ae      	adds	r2, #174	; 0xae
 80154a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154a8:	689b      	ldr	r3, [r3, #8]
 80154aa:	6839      	ldr	r1, [r7, #0]
 80154ac:	6878      	ldr	r0, [r7, #4]
 80154ae:	4798      	blx	r3
 80154b0:	4603      	mov	r3, r0
 80154b2:	73fb      	strb	r3, [r7, #15]
      break;
 80154b4:	e04a      	b.n	801554c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80154b6:	683b      	ldr	r3, [r7, #0]
 80154b8:	785b      	ldrb	r3, [r3, #1]
 80154ba:	2b09      	cmp	r3, #9
 80154bc:	d83b      	bhi.n	8015536 <USBD_StdDevReq+0xc2>
 80154be:	a201      	add	r2, pc, #4	; (adr r2, 80154c4 <USBD_StdDevReq+0x50>)
 80154c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80154c4:	08015519 	.word	0x08015519
 80154c8:	0801552d 	.word	0x0801552d
 80154cc:	08015537 	.word	0x08015537
 80154d0:	08015523 	.word	0x08015523
 80154d4:	08015537 	.word	0x08015537
 80154d8:	080154f7 	.word	0x080154f7
 80154dc:	080154ed 	.word	0x080154ed
 80154e0:	08015537 	.word	0x08015537
 80154e4:	0801550f 	.word	0x0801550f
 80154e8:	08015501 	.word	0x08015501
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80154ec:	6839      	ldr	r1, [r7, #0]
 80154ee:	6878      	ldr	r0, [r7, #4]
 80154f0:	f000 fa3c 	bl	801596c <USBD_GetDescriptor>
          break;
 80154f4:	e024      	b.n	8015540 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80154f6:	6839      	ldr	r1, [r7, #0]
 80154f8:	6878      	ldr	r0, [r7, #4]
 80154fa:	f000 fba1 	bl	8015c40 <USBD_SetAddress>
          break;
 80154fe:	e01f      	b.n	8015540 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8015500:	6839      	ldr	r1, [r7, #0]
 8015502:	6878      	ldr	r0, [r7, #4]
 8015504:	f000 fbe0 	bl	8015cc8 <USBD_SetConfig>
 8015508:	4603      	mov	r3, r0
 801550a:	73fb      	strb	r3, [r7, #15]
          break;
 801550c:	e018      	b.n	8015540 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801550e:	6839      	ldr	r1, [r7, #0]
 8015510:	6878      	ldr	r0, [r7, #4]
 8015512:	f000 fc83 	bl	8015e1c <USBD_GetConfig>
          break;
 8015516:	e013      	b.n	8015540 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015518:	6839      	ldr	r1, [r7, #0]
 801551a:	6878      	ldr	r0, [r7, #4]
 801551c:	f000 fcb4 	bl	8015e88 <USBD_GetStatus>
          break;
 8015520:	e00e      	b.n	8015540 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8015522:	6839      	ldr	r1, [r7, #0]
 8015524:	6878      	ldr	r0, [r7, #4]
 8015526:	f000 fce3 	bl	8015ef0 <USBD_SetFeature>
          break;
 801552a:	e009      	b.n	8015540 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801552c:	6839      	ldr	r1, [r7, #0]
 801552e:	6878      	ldr	r0, [r7, #4]
 8015530:	f000 fd07 	bl	8015f42 <USBD_ClrFeature>
          break;
 8015534:	e004      	b.n	8015540 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8015536:	6839      	ldr	r1, [r7, #0]
 8015538:	6878      	ldr	r0, [r7, #4]
 801553a:	f000 fd5e 	bl	8015ffa <USBD_CtlError>
          break;
 801553e:	bf00      	nop
      }
      break;
 8015540:	e004      	b.n	801554c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8015542:	6839      	ldr	r1, [r7, #0]
 8015544:	6878      	ldr	r0, [r7, #4]
 8015546:	f000 fd58 	bl	8015ffa <USBD_CtlError>
      break;
 801554a:	bf00      	nop
  }

  return ret;
 801554c:	7bfb      	ldrb	r3, [r7, #15]
}
 801554e:	4618      	mov	r0, r3
 8015550:	3710      	adds	r7, #16
 8015552:	46bd      	mov	sp, r7
 8015554:	bd80      	pop	{r7, pc}
 8015556:	bf00      	nop

08015558 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015558:	b580      	push	{r7, lr}
 801555a:	b084      	sub	sp, #16
 801555c:	af00      	add	r7, sp, #0
 801555e:	6078      	str	r0, [r7, #4]
 8015560:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015562:	2300      	movs	r3, #0
 8015564:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015566:	683b      	ldr	r3, [r7, #0]
 8015568:	781b      	ldrb	r3, [r3, #0]
 801556a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801556e:	2b40      	cmp	r3, #64	; 0x40
 8015570:	d005      	beq.n	801557e <USBD_StdItfReq+0x26>
 8015572:	2b40      	cmp	r3, #64	; 0x40
 8015574:	d852      	bhi.n	801561c <USBD_StdItfReq+0xc4>
 8015576:	2b00      	cmp	r3, #0
 8015578:	d001      	beq.n	801557e <USBD_StdItfReq+0x26>
 801557a:	2b20      	cmp	r3, #32
 801557c:	d14e      	bne.n	801561c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015584:	b2db      	uxtb	r3, r3
 8015586:	3b01      	subs	r3, #1
 8015588:	2b02      	cmp	r3, #2
 801558a:	d840      	bhi.n	801560e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801558c:	683b      	ldr	r3, [r7, #0]
 801558e:	889b      	ldrh	r3, [r3, #4]
 8015590:	b2db      	uxtb	r3, r3
 8015592:	2b01      	cmp	r3, #1
 8015594:	d836      	bhi.n	8015604 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8015596:	683b      	ldr	r3, [r7, #0]
 8015598:	889b      	ldrh	r3, [r3, #4]
 801559a:	b2db      	uxtb	r3, r3
 801559c:	4619      	mov	r1, r3
 801559e:	6878      	ldr	r0, [r7, #4]
 80155a0:	f7ff fed9 	bl	8015356 <USBD_CoreFindIF>
 80155a4:	4603      	mov	r3, r0
 80155a6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80155a8:	7bbb      	ldrb	r3, [r7, #14]
 80155aa:	2bff      	cmp	r3, #255	; 0xff
 80155ac:	d01d      	beq.n	80155ea <USBD_StdItfReq+0x92>
 80155ae:	7bbb      	ldrb	r3, [r7, #14]
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d11a      	bne.n	80155ea <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80155b4:	7bba      	ldrb	r2, [r7, #14]
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	32ae      	adds	r2, #174	; 0xae
 80155ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155be:	689b      	ldr	r3, [r3, #8]
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d00f      	beq.n	80155e4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80155c4:	7bba      	ldrb	r2, [r7, #14]
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80155cc:	7bba      	ldrb	r2, [r7, #14]
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	32ae      	adds	r2, #174	; 0xae
 80155d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155d6:	689b      	ldr	r3, [r3, #8]
 80155d8:	6839      	ldr	r1, [r7, #0]
 80155da:	6878      	ldr	r0, [r7, #4]
 80155dc:	4798      	blx	r3
 80155de:	4603      	mov	r3, r0
 80155e0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80155e2:	e004      	b.n	80155ee <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80155e4:	2303      	movs	r3, #3
 80155e6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80155e8:	e001      	b.n	80155ee <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80155ea:	2303      	movs	r3, #3
 80155ec:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80155ee:	683b      	ldr	r3, [r7, #0]
 80155f0:	88db      	ldrh	r3, [r3, #6]
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d110      	bne.n	8015618 <USBD_StdItfReq+0xc0>
 80155f6:	7bfb      	ldrb	r3, [r7, #15]
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d10d      	bne.n	8015618 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80155fc:	6878      	ldr	r0, [r7, #4]
 80155fe:	f000 fdc7 	bl	8016190 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8015602:	e009      	b.n	8015618 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8015604:	6839      	ldr	r1, [r7, #0]
 8015606:	6878      	ldr	r0, [r7, #4]
 8015608:	f000 fcf7 	bl	8015ffa <USBD_CtlError>
          break;
 801560c:	e004      	b.n	8015618 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801560e:	6839      	ldr	r1, [r7, #0]
 8015610:	6878      	ldr	r0, [r7, #4]
 8015612:	f000 fcf2 	bl	8015ffa <USBD_CtlError>
          break;
 8015616:	e000      	b.n	801561a <USBD_StdItfReq+0xc2>
          break;
 8015618:	bf00      	nop
      }
      break;
 801561a:	e004      	b.n	8015626 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801561c:	6839      	ldr	r1, [r7, #0]
 801561e:	6878      	ldr	r0, [r7, #4]
 8015620:	f000 fceb 	bl	8015ffa <USBD_CtlError>
      break;
 8015624:	bf00      	nop
  }

  return ret;
 8015626:	7bfb      	ldrb	r3, [r7, #15]
}
 8015628:	4618      	mov	r0, r3
 801562a:	3710      	adds	r7, #16
 801562c:	46bd      	mov	sp, r7
 801562e:	bd80      	pop	{r7, pc}

08015630 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015630:	b580      	push	{r7, lr}
 8015632:	b084      	sub	sp, #16
 8015634:	af00      	add	r7, sp, #0
 8015636:	6078      	str	r0, [r7, #4]
 8015638:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801563a:	2300      	movs	r3, #0
 801563c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801563e:	683b      	ldr	r3, [r7, #0]
 8015640:	889b      	ldrh	r3, [r3, #4]
 8015642:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015644:	683b      	ldr	r3, [r7, #0]
 8015646:	781b      	ldrb	r3, [r3, #0]
 8015648:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801564c:	2b40      	cmp	r3, #64	; 0x40
 801564e:	d007      	beq.n	8015660 <USBD_StdEPReq+0x30>
 8015650:	2b40      	cmp	r3, #64	; 0x40
 8015652:	f200 817f 	bhi.w	8015954 <USBD_StdEPReq+0x324>
 8015656:	2b00      	cmp	r3, #0
 8015658:	d02a      	beq.n	80156b0 <USBD_StdEPReq+0x80>
 801565a:	2b20      	cmp	r3, #32
 801565c:	f040 817a 	bne.w	8015954 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8015660:	7bbb      	ldrb	r3, [r7, #14]
 8015662:	4619      	mov	r1, r3
 8015664:	6878      	ldr	r0, [r7, #4]
 8015666:	f7ff fe83 	bl	8015370 <USBD_CoreFindEP>
 801566a:	4603      	mov	r3, r0
 801566c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801566e:	7b7b      	ldrb	r3, [r7, #13]
 8015670:	2bff      	cmp	r3, #255	; 0xff
 8015672:	f000 8174 	beq.w	801595e <USBD_StdEPReq+0x32e>
 8015676:	7b7b      	ldrb	r3, [r7, #13]
 8015678:	2b00      	cmp	r3, #0
 801567a:	f040 8170 	bne.w	801595e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801567e:	7b7a      	ldrb	r2, [r7, #13]
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8015686:	7b7a      	ldrb	r2, [r7, #13]
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	32ae      	adds	r2, #174	; 0xae
 801568c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015690:	689b      	ldr	r3, [r3, #8]
 8015692:	2b00      	cmp	r3, #0
 8015694:	f000 8163 	beq.w	801595e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015698:	7b7a      	ldrb	r2, [r7, #13]
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	32ae      	adds	r2, #174	; 0xae
 801569e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156a2:	689b      	ldr	r3, [r3, #8]
 80156a4:	6839      	ldr	r1, [r7, #0]
 80156a6:	6878      	ldr	r0, [r7, #4]
 80156a8:	4798      	blx	r3
 80156aa:	4603      	mov	r3, r0
 80156ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80156ae:	e156      	b.n	801595e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80156b0:	683b      	ldr	r3, [r7, #0]
 80156b2:	785b      	ldrb	r3, [r3, #1]
 80156b4:	2b03      	cmp	r3, #3
 80156b6:	d008      	beq.n	80156ca <USBD_StdEPReq+0x9a>
 80156b8:	2b03      	cmp	r3, #3
 80156ba:	f300 8145 	bgt.w	8015948 <USBD_StdEPReq+0x318>
 80156be:	2b00      	cmp	r3, #0
 80156c0:	f000 809b 	beq.w	80157fa <USBD_StdEPReq+0x1ca>
 80156c4:	2b01      	cmp	r3, #1
 80156c6:	d03c      	beq.n	8015742 <USBD_StdEPReq+0x112>
 80156c8:	e13e      	b.n	8015948 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80156d0:	b2db      	uxtb	r3, r3
 80156d2:	2b02      	cmp	r3, #2
 80156d4:	d002      	beq.n	80156dc <USBD_StdEPReq+0xac>
 80156d6:	2b03      	cmp	r3, #3
 80156d8:	d016      	beq.n	8015708 <USBD_StdEPReq+0xd8>
 80156da:	e02c      	b.n	8015736 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80156dc:	7bbb      	ldrb	r3, [r7, #14]
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d00d      	beq.n	80156fe <USBD_StdEPReq+0xce>
 80156e2:	7bbb      	ldrb	r3, [r7, #14]
 80156e4:	2b80      	cmp	r3, #128	; 0x80
 80156e6:	d00a      	beq.n	80156fe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80156e8:	7bbb      	ldrb	r3, [r7, #14]
 80156ea:	4619      	mov	r1, r3
 80156ec:	6878      	ldr	r0, [r7, #4]
 80156ee:	f001 f9d9 	bl	8016aa4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80156f2:	2180      	movs	r1, #128	; 0x80
 80156f4:	6878      	ldr	r0, [r7, #4]
 80156f6:	f001 f9d5 	bl	8016aa4 <USBD_LL_StallEP>
 80156fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80156fc:	e020      	b.n	8015740 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80156fe:	6839      	ldr	r1, [r7, #0]
 8015700:	6878      	ldr	r0, [r7, #4]
 8015702:	f000 fc7a 	bl	8015ffa <USBD_CtlError>
              break;
 8015706:	e01b      	b.n	8015740 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015708:	683b      	ldr	r3, [r7, #0]
 801570a:	885b      	ldrh	r3, [r3, #2]
 801570c:	2b00      	cmp	r3, #0
 801570e:	d10e      	bne.n	801572e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015710:	7bbb      	ldrb	r3, [r7, #14]
 8015712:	2b00      	cmp	r3, #0
 8015714:	d00b      	beq.n	801572e <USBD_StdEPReq+0xfe>
 8015716:	7bbb      	ldrb	r3, [r7, #14]
 8015718:	2b80      	cmp	r3, #128	; 0x80
 801571a:	d008      	beq.n	801572e <USBD_StdEPReq+0xfe>
 801571c:	683b      	ldr	r3, [r7, #0]
 801571e:	88db      	ldrh	r3, [r3, #6]
 8015720:	2b00      	cmp	r3, #0
 8015722:	d104      	bne.n	801572e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015724:	7bbb      	ldrb	r3, [r7, #14]
 8015726:	4619      	mov	r1, r3
 8015728:	6878      	ldr	r0, [r7, #4]
 801572a:	f001 f9bb 	bl	8016aa4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801572e:	6878      	ldr	r0, [r7, #4]
 8015730:	f000 fd2e 	bl	8016190 <USBD_CtlSendStatus>

              break;
 8015734:	e004      	b.n	8015740 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8015736:	6839      	ldr	r1, [r7, #0]
 8015738:	6878      	ldr	r0, [r7, #4]
 801573a:	f000 fc5e 	bl	8015ffa <USBD_CtlError>
              break;
 801573e:	bf00      	nop
          }
          break;
 8015740:	e107      	b.n	8015952 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015748:	b2db      	uxtb	r3, r3
 801574a:	2b02      	cmp	r3, #2
 801574c:	d002      	beq.n	8015754 <USBD_StdEPReq+0x124>
 801574e:	2b03      	cmp	r3, #3
 8015750:	d016      	beq.n	8015780 <USBD_StdEPReq+0x150>
 8015752:	e04b      	b.n	80157ec <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015754:	7bbb      	ldrb	r3, [r7, #14]
 8015756:	2b00      	cmp	r3, #0
 8015758:	d00d      	beq.n	8015776 <USBD_StdEPReq+0x146>
 801575a:	7bbb      	ldrb	r3, [r7, #14]
 801575c:	2b80      	cmp	r3, #128	; 0x80
 801575e:	d00a      	beq.n	8015776 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015760:	7bbb      	ldrb	r3, [r7, #14]
 8015762:	4619      	mov	r1, r3
 8015764:	6878      	ldr	r0, [r7, #4]
 8015766:	f001 f99d 	bl	8016aa4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801576a:	2180      	movs	r1, #128	; 0x80
 801576c:	6878      	ldr	r0, [r7, #4]
 801576e:	f001 f999 	bl	8016aa4 <USBD_LL_StallEP>
 8015772:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015774:	e040      	b.n	80157f8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8015776:	6839      	ldr	r1, [r7, #0]
 8015778:	6878      	ldr	r0, [r7, #4]
 801577a:	f000 fc3e 	bl	8015ffa <USBD_CtlError>
              break;
 801577e:	e03b      	b.n	80157f8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015780:	683b      	ldr	r3, [r7, #0]
 8015782:	885b      	ldrh	r3, [r3, #2]
 8015784:	2b00      	cmp	r3, #0
 8015786:	d136      	bne.n	80157f6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015788:	7bbb      	ldrb	r3, [r7, #14]
 801578a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801578e:	2b00      	cmp	r3, #0
 8015790:	d004      	beq.n	801579c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015792:	7bbb      	ldrb	r3, [r7, #14]
 8015794:	4619      	mov	r1, r3
 8015796:	6878      	ldr	r0, [r7, #4]
 8015798:	f001 f9a3 	bl	8016ae2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801579c:	6878      	ldr	r0, [r7, #4]
 801579e:	f000 fcf7 	bl	8016190 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80157a2:	7bbb      	ldrb	r3, [r7, #14]
 80157a4:	4619      	mov	r1, r3
 80157a6:	6878      	ldr	r0, [r7, #4]
 80157a8:	f7ff fde2 	bl	8015370 <USBD_CoreFindEP>
 80157ac:	4603      	mov	r3, r0
 80157ae:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80157b0:	7b7b      	ldrb	r3, [r7, #13]
 80157b2:	2bff      	cmp	r3, #255	; 0xff
 80157b4:	d01f      	beq.n	80157f6 <USBD_StdEPReq+0x1c6>
 80157b6:	7b7b      	ldrb	r3, [r7, #13]
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d11c      	bne.n	80157f6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80157bc:	7b7a      	ldrb	r2, [r7, #13]
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80157c4:	7b7a      	ldrb	r2, [r7, #13]
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	32ae      	adds	r2, #174	; 0xae
 80157ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80157ce:	689b      	ldr	r3, [r3, #8]
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d010      	beq.n	80157f6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80157d4:	7b7a      	ldrb	r2, [r7, #13]
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	32ae      	adds	r2, #174	; 0xae
 80157da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80157de:	689b      	ldr	r3, [r3, #8]
 80157e0:	6839      	ldr	r1, [r7, #0]
 80157e2:	6878      	ldr	r0, [r7, #4]
 80157e4:	4798      	blx	r3
 80157e6:	4603      	mov	r3, r0
 80157e8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80157ea:	e004      	b.n	80157f6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80157ec:	6839      	ldr	r1, [r7, #0]
 80157ee:	6878      	ldr	r0, [r7, #4]
 80157f0:	f000 fc03 	bl	8015ffa <USBD_CtlError>
              break;
 80157f4:	e000      	b.n	80157f8 <USBD_StdEPReq+0x1c8>
              break;
 80157f6:	bf00      	nop
          }
          break;
 80157f8:	e0ab      	b.n	8015952 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015800:	b2db      	uxtb	r3, r3
 8015802:	2b02      	cmp	r3, #2
 8015804:	d002      	beq.n	801580c <USBD_StdEPReq+0x1dc>
 8015806:	2b03      	cmp	r3, #3
 8015808:	d032      	beq.n	8015870 <USBD_StdEPReq+0x240>
 801580a:	e097      	b.n	801593c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801580c:	7bbb      	ldrb	r3, [r7, #14]
 801580e:	2b00      	cmp	r3, #0
 8015810:	d007      	beq.n	8015822 <USBD_StdEPReq+0x1f2>
 8015812:	7bbb      	ldrb	r3, [r7, #14]
 8015814:	2b80      	cmp	r3, #128	; 0x80
 8015816:	d004      	beq.n	8015822 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8015818:	6839      	ldr	r1, [r7, #0]
 801581a:	6878      	ldr	r0, [r7, #4]
 801581c:	f000 fbed 	bl	8015ffa <USBD_CtlError>
                break;
 8015820:	e091      	b.n	8015946 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015822:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015826:	2b00      	cmp	r3, #0
 8015828:	da0b      	bge.n	8015842 <USBD_StdEPReq+0x212>
 801582a:	7bbb      	ldrb	r3, [r7, #14]
 801582c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015830:	4613      	mov	r3, r2
 8015832:	009b      	lsls	r3, r3, #2
 8015834:	4413      	add	r3, r2
 8015836:	009b      	lsls	r3, r3, #2
 8015838:	3310      	adds	r3, #16
 801583a:	687a      	ldr	r2, [r7, #4]
 801583c:	4413      	add	r3, r2
 801583e:	3304      	adds	r3, #4
 8015840:	e00b      	b.n	801585a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015842:	7bbb      	ldrb	r3, [r7, #14]
 8015844:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015848:	4613      	mov	r3, r2
 801584a:	009b      	lsls	r3, r3, #2
 801584c:	4413      	add	r3, r2
 801584e:	009b      	lsls	r3, r3, #2
 8015850:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015854:	687a      	ldr	r2, [r7, #4]
 8015856:	4413      	add	r3, r2
 8015858:	3304      	adds	r3, #4
 801585a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801585c:	68bb      	ldr	r3, [r7, #8]
 801585e:	2200      	movs	r2, #0
 8015860:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015862:	68bb      	ldr	r3, [r7, #8]
 8015864:	2202      	movs	r2, #2
 8015866:	4619      	mov	r1, r3
 8015868:	6878      	ldr	r0, [r7, #4]
 801586a:	f000 fc37 	bl	80160dc <USBD_CtlSendData>
              break;
 801586e:	e06a      	b.n	8015946 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015870:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015874:	2b00      	cmp	r3, #0
 8015876:	da11      	bge.n	801589c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015878:	7bbb      	ldrb	r3, [r7, #14]
 801587a:	f003 020f 	and.w	r2, r3, #15
 801587e:	6879      	ldr	r1, [r7, #4]
 8015880:	4613      	mov	r3, r2
 8015882:	009b      	lsls	r3, r3, #2
 8015884:	4413      	add	r3, r2
 8015886:	009b      	lsls	r3, r3, #2
 8015888:	440b      	add	r3, r1
 801588a:	3324      	adds	r3, #36	; 0x24
 801588c:	881b      	ldrh	r3, [r3, #0]
 801588e:	2b00      	cmp	r3, #0
 8015890:	d117      	bne.n	80158c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015892:	6839      	ldr	r1, [r7, #0]
 8015894:	6878      	ldr	r0, [r7, #4]
 8015896:	f000 fbb0 	bl	8015ffa <USBD_CtlError>
                  break;
 801589a:	e054      	b.n	8015946 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801589c:	7bbb      	ldrb	r3, [r7, #14]
 801589e:	f003 020f 	and.w	r2, r3, #15
 80158a2:	6879      	ldr	r1, [r7, #4]
 80158a4:	4613      	mov	r3, r2
 80158a6:	009b      	lsls	r3, r3, #2
 80158a8:	4413      	add	r3, r2
 80158aa:	009b      	lsls	r3, r3, #2
 80158ac:	440b      	add	r3, r1
 80158ae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80158b2:	881b      	ldrh	r3, [r3, #0]
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d104      	bne.n	80158c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80158b8:	6839      	ldr	r1, [r7, #0]
 80158ba:	6878      	ldr	r0, [r7, #4]
 80158bc:	f000 fb9d 	bl	8015ffa <USBD_CtlError>
                  break;
 80158c0:	e041      	b.n	8015946 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80158c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	da0b      	bge.n	80158e2 <USBD_StdEPReq+0x2b2>
 80158ca:	7bbb      	ldrb	r3, [r7, #14]
 80158cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80158d0:	4613      	mov	r3, r2
 80158d2:	009b      	lsls	r3, r3, #2
 80158d4:	4413      	add	r3, r2
 80158d6:	009b      	lsls	r3, r3, #2
 80158d8:	3310      	adds	r3, #16
 80158da:	687a      	ldr	r2, [r7, #4]
 80158dc:	4413      	add	r3, r2
 80158de:	3304      	adds	r3, #4
 80158e0:	e00b      	b.n	80158fa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80158e2:	7bbb      	ldrb	r3, [r7, #14]
 80158e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80158e8:	4613      	mov	r3, r2
 80158ea:	009b      	lsls	r3, r3, #2
 80158ec:	4413      	add	r3, r2
 80158ee:	009b      	lsls	r3, r3, #2
 80158f0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80158f4:	687a      	ldr	r2, [r7, #4]
 80158f6:	4413      	add	r3, r2
 80158f8:	3304      	adds	r3, #4
 80158fa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80158fc:	7bbb      	ldrb	r3, [r7, #14]
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d002      	beq.n	8015908 <USBD_StdEPReq+0x2d8>
 8015902:	7bbb      	ldrb	r3, [r7, #14]
 8015904:	2b80      	cmp	r3, #128	; 0x80
 8015906:	d103      	bne.n	8015910 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015908:	68bb      	ldr	r3, [r7, #8]
 801590a:	2200      	movs	r2, #0
 801590c:	601a      	str	r2, [r3, #0]
 801590e:	e00e      	b.n	801592e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015910:	7bbb      	ldrb	r3, [r7, #14]
 8015912:	4619      	mov	r1, r3
 8015914:	6878      	ldr	r0, [r7, #4]
 8015916:	f001 f903 	bl	8016b20 <USBD_LL_IsStallEP>
 801591a:	4603      	mov	r3, r0
 801591c:	2b00      	cmp	r3, #0
 801591e:	d003      	beq.n	8015928 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8015920:	68bb      	ldr	r3, [r7, #8]
 8015922:	2201      	movs	r2, #1
 8015924:	601a      	str	r2, [r3, #0]
 8015926:	e002      	b.n	801592e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8015928:	68bb      	ldr	r3, [r7, #8]
 801592a:	2200      	movs	r2, #0
 801592c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801592e:	68bb      	ldr	r3, [r7, #8]
 8015930:	2202      	movs	r2, #2
 8015932:	4619      	mov	r1, r3
 8015934:	6878      	ldr	r0, [r7, #4]
 8015936:	f000 fbd1 	bl	80160dc <USBD_CtlSendData>
              break;
 801593a:	e004      	b.n	8015946 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801593c:	6839      	ldr	r1, [r7, #0]
 801593e:	6878      	ldr	r0, [r7, #4]
 8015940:	f000 fb5b 	bl	8015ffa <USBD_CtlError>
              break;
 8015944:	bf00      	nop
          }
          break;
 8015946:	e004      	b.n	8015952 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015948:	6839      	ldr	r1, [r7, #0]
 801594a:	6878      	ldr	r0, [r7, #4]
 801594c:	f000 fb55 	bl	8015ffa <USBD_CtlError>
          break;
 8015950:	bf00      	nop
      }
      break;
 8015952:	e005      	b.n	8015960 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8015954:	6839      	ldr	r1, [r7, #0]
 8015956:	6878      	ldr	r0, [r7, #4]
 8015958:	f000 fb4f 	bl	8015ffa <USBD_CtlError>
      break;
 801595c:	e000      	b.n	8015960 <USBD_StdEPReq+0x330>
      break;
 801595e:	bf00      	nop
  }

  return ret;
 8015960:	7bfb      	ldrb	r3, [r7, #15]
}
 8015962:	4618      	mov	r0, r3
 8015964:	3710      	adds	r7, #16
 8015966:	46bd      	mov	sp, r7
 8015968:	bd80      	pop	{r7, pc}
	...

0801596c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801596c:	b580      	push	{r7, lr}
 801596e:	b084      	sub	sp, #16
 8015970:	af00      	add	r7, sp, #0
 8015972:	6078      	str	r0, [r7, #4]
 8015974:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015976:	2300      	movs	r3, #0
 8015978:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801597a:	2300      	movs	r3, #0
 801597c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801597e:	2300      	movs	r3, #0
 8015980:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015982:	683b      	ldr	r3, [r7, #0]
 8015984:	885b      	ldrh	r3, [r3, #2]
 8015986:	0a1b      	lsrs	r3, r3, #8
 8015988:	b29b      	uxth	r3, r3
 801598a:	3b01      	subs	r3, #1
 801598c:	2b06      	cmp	r3, #6
 801598e:	f200 8128 	bhi.w	8015be2 <USBD_GetDescriptor+0x276>
 8015992:	a201      	add	r2, pc, #4	; (adr r2, 8015998 <USBD_GetDescriptor+0x2c>)
 8015994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015998:	080159b5 	.word	0x080159b5
 801599c:	080159cd 	.word	0x080159cd
 80159a0:	08015a0d 	.word	0x08015a0d
 80159a4:	08015be3 	.word	0x08015be3
 80159a8:	08015be3 	.word	0x08015be3
 80159ac:	08015b83 	.word	0x08015b83
 80159b0:	08015baf 	.word	0x08015baf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	687a      	ldr	r2, [r7, #4]
 80159be:	7c12      	ldrb	r2, [r2, #16]
 80159c0:	f107 0108 	add.w	r1, r7, #8
 80159c4:	4610      	mov	r0, r2
 80159c6:	4798      	blx	r3
 80159c8:	60f8      	str	r0, [r7, #12]
      break;
 80159ca:	e112      	b.n	8015bf2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	7c1b      	ldrb	r3, [r3, #16]
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d10d      	bne.n	80159f0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80159da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80159dc:	f107 0208 	add.w	r2, r7, #8
 80159e0:	4610      	mov	r0, r2
 80159e2:	4798      	blx	r3
 80159e4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	3301      	adds	r3, #1
 80159ea:	2202      	movs	r2, #2
 80159ec:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80159ee:	e100      	b.n	8015bf2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80159f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159f8:	f107 0208 	add.w	r2, r7, #8
 80159fc:	4610      	mov	r0, r2
 80159fe:	4798      	blx	r3
 8015a00:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015a02:	68fb      	ldr	r3, [r7, #12]
 8015a04:	3301      	adds	r3, #1
 8015a06:	2202      	movs	r2, #2
 8015a08:	701a      	strb	r2, [r3, #0]
      break;
 8015a0a:	e0f2      	b.n	8015bf2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015a0c:	683b      	ldr	r3, [r7, #0]
 8015a0e:	885b      	ldrh	r3, [r3, #2]
 8015a10:	b2db      	uxtb	r3, r3
 8015a12:	2b05      	cmp	r3, #5
 8015a14:	f200 80ac 	bhi.w	8015b70 <USBD_GetDescriptor+0x204>
 8015a18:	a201      	add	r2, pc, #4	; (adr r2, 8015a20 <USBD_GetDescriptor+0xb4>)
 8015a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a1e:	bf00      	nop
 8015a20:	08015a39 	.word	0x08015a39
 8015a24:	08015a6d 	.word	0x08015a6d
 8015a28:	08015aa1 	.word	0x08015aa1
 8015a2c:	08015ad5 	.word	0x08015ad5
 8015a30:	08015b09 	.word	0x08015b09
 8015a34:	08015b3d 	.word	0x08015b3d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015a3e:	685b      	ldr	r3, [r3, #4]
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d00b      	beq.n	8015a5c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015a4a:	685b      	ldr	r3, [r3, #4]
 8015a4c:	687a      	ldr	r2, [r7, #4]
 8015a4e:	7c12      	ldrb	r2, [r2, #16]
 8015a50:	f107 0108 	add.w	r1, r7, #8
 8015a54:	4610      	mov	r0, r2
 8015a56:	4798      	blx	r3
 8015a58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015a5a:	e091      	b.n	8015b80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015a5c:	6839      	ldr	r1, [r7, #0]
 8015a5e:	6878      	ldr	r0, [r7, #4]
 8015a60:	f000 facb 	bl	8015ffa <USBD_CtlError>
            err++;
 8015a64:	7afb      	ldrb	r3, [r7, #11]
 8015a66:	3301      	adds	r3, #1
 8015a68:	72fb      	strb	r3, [r7, #11]
          break;
 8015a6a:	e089      	b.n	8015b80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015a72:	689b      	ldr	r3, [r3, #8]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d00b      	beq.n	8015a90 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015a7e:	689b      	ldr	r3, [r3, #8]
 8015a80:	687a      	ldr	r2, [r7, #4]
 8015a82:	7c12      	ldrb	r2, [r2, #16]
 8015a84:	f107 0108 	add.w	r1, r7, #8
 8015a88:	4610      	mov	r0, r2
 8015a8a:	4798      	blx	r3
 8015a8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015a8e:	e077      	b.n	8015b80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015a90:	6839      	ldr	r1, [r7, #0]
 8015a92:	6878      	ldr	r0, [r7, #4]
 8015a94:	f000 fab1 	bl	8015ffa <USBD_CtlError>
            err++;
 8015a98:	7afb      	ldrb	r3, [r7, #11]
 8015a9a:	3301      	adds	r3, #1
 8015a9c:	72fb      	strb	r3, [r7, #11]
          break;
 8015a9e:	e06f      	b.n	8015b80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015aa6:	68db      	ldr	r3, [r3, #12]
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d00b      	beq.n	8015ac4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015ab2:	68db      	ldr	r3, [r3, #12]
 8015ab4:	687a      	ldr	r2, [r7, #4]
 8015ab6:	7c12      	ldrb	r2, [r2, #16]
 8015ab8:	f107 0108 	add.w	r1, r7, #8
 8015abc:	4610      	mov	r0, r2
 8015abe:	4798      	blx	r3
 8015ac0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015ac2:	e05d      	b.n	8015b80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015ac4:	6839      	ldr	r1, [r7, #0]
 8015ac6:	6878      	ldr	r0, [r7, #4]
 8015ac8:	f000 fa97 	bl	8015ffa <USBD_CtlError>
            err++;
 8015acc:	7afb      	ldrb	r3, [r7, #11]
 8015ace:	3301      	adds	r3, #1
 8015ad0:	72fb      	strb	r3, [r7, #11]
          break;
 8015ad2:	e055      	b.n	8015b80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015ada:	691b      	ldr	r3, [r3, #16]
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d00b      	beq.n	8015af8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015ae6:	691b      	ldr	r3, [r3, #16]
 8015ae8:	687a      	ldr	r2, [r7, #4]
 8015aea:	7c12      	ldrb	r2, [r2, #16]
 8015aec:	f107 0108 	add.w	r1, r7, #8
 8015af0:	4610      	mov	r0, r2
 8015af2:	4798      	blx	r3
 8015af4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015af6:	e043      	b.n	8015b80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015af8:	6839      	ldr	r1, [r7, #0]
 8015afa:	6878      	ldr	r0, [r7, #4]
 8015afc:	f000 fa7d 	bl	8015ffa <USBD_CtlError>
            err++;
 8015b00:	7afb      	ldrb	r3, [r7, #11]
 8015b02:	3301      	adds	r3, #1
 8015b04:	72fb      	strb	r3, [r7, #11]
          break;
 8015b06:	e03b      	b.n	8015b80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015b0e:	695b      	ldr	r3, [r3, #20]
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	d00b      	beq.n	8015b2c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015b1a:	695b      	ldr	r3, [r3, #20]
 8015b1c:	687a      	ldr	r2, [r7, #4]
 8015b1e:	7c12      	ldrb	r2, [r2, #16]
 8015b20:	f107 0108 	add.w	r1, r7, #8
 8015b24:	4610      	mov	r0, r2
 8015b26:	4798      	blx	r3
 8015b28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015b2a:	e029      	b.n	8015b80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015b2c:	6839      	ldr	r1, [r7, #0]
 8015b2e:	6878      	ldr	r0, [r7, #4]
 8015b30:	f000 fa63 	bl	8015ffa <USBD_CtlError>
            err++;
 8015b34:	7afb      	ldrb	r3, [r7, #11]
 8015b36:	3301      	adds	r3, #1
 8015b38:	72fb      	strb	r3, [r7, #11]
          break;
 8015b3a:	e021      	b.n	8015b80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015b42:	699b      	ldr	r3, [r3, #24]
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d00b      	beq.n	8015b60 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015b4e:	699b      	ldr	r3, [r3, #24]
 8015b50:	687a      	ldr	r2, [r7, #4]
 8015b52:	7c12      	ldrb	r2, [r2, #16]
 8015b54:	f107 0108 	add.w	r1, r7, #8
 8015b58:	4610      	mov	r0, r2
 8015b5a:	4798      	blx	r3
 8015b5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015b5e:	e00f      	b.n	8015b80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015b60:	6839      	ldr	r1, [r7, #0]
 8015b62:	6878      	ldr	r0, [r7, #4]
 8015b64:	f000 fa49 	bl	8015ffa <USBD_CtlError>
            err++;
 8015b68:	7afb      	ldrb	r3, [r7, #11]
 8015b6a:	3301      	adds	r3, #1
 8015b6c:	72fb      	strb	r3, [r7, #11]
          break;
 8015b6e:	e007      	b.n	8015b80 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015b70:	6839      	ldr	r1, [r7, #0]
 8015b72:	6878      	ldr	r0, [r7, #4]
 8015b74:	f000 fa41 	bl	8015ffa <USBD_CtlError>
          err++;
 8015b78:	7afb      	ldrb	r3, [r7, #11]
 8015b7a:	3301      	adds	r3, #1
 8015b7c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8015b7e:	bf00      	nop
      }
      break;
 8015b80:	e037      	b.n	8015bf2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	7c1b      	ldrb	r3, [r3, #16]
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d109      	bne.n	8015b9e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015b92:	f107 0208 	add.w	r2, r7, #8
 8015b96:	4610      	mov	r0, r2
 8015b98:	4798      	blx	r3
 8015b9a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015b9c:	e029      	b.n	8015bf2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015b9e:	6839      	ldr	r1, [r7, #0]
 8015ba0:	6878      	ldr	r0, [r7, #4]
 8015ba2:	f000 fa2a 	bl	8015ffa <USBD_CtlError>
        err++;
 8015ba6:	7afb      	ldrb	r3, [r7, #11]
 8015ba8:	3301      	adds	r3, #1
 8015baa:	72fb      	strb	r3, [r7, #11]
      break;
 8015bac:	e021      	b.n	8015bf2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	7c1b      	ldrb	r3, [r3, #16]
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d10d      	bne.n	8015bd2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015bbe:	f107 0208 	add.w	r2, r7, #8
 8015bc2:	4610      	mov	r0, r2
 8015bc4:	4798      	blx	r3
 8015bc6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	3301      	adds	r3, #1
 8015bcc:	2207      	movs	r2, #7
 8015bce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015bd0:	e00f      	b.n	8015bf2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015bd2:	6839      	ldr	r1, [r7, #0]
 8015bd4:	6878      	ldr	r0, [r7, #4]
 8015bd6:	f000 fa10 	bl	8015ffa <USBD_CtlError>
        err++;
 8015bda:	7afb      	ldrb	r3, [r7, #11]
 8015bdc:	3301      	adds	r3, #1
 8015bde:	72fb      	strb	r3, [r7, #11]
      break;
 8015be0:	e007      	b.n	8015bf2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8015be2:	6839      	ldr	r1, [r7, #0]
 8015be4:	6878      	ldr	r0, [r7, #4]
 8015be6:	f000 fa08 	bl	8015ffa <USBD_CtlError>
      err++;
 8015bea:	7afb      	ldrb	r3, [r7, #11]
 8015bec:	3301      	adds	r3, #1
 8015bee:	72fb      	strb	r3, [r7, #11]
      break;
 8015bf0:	bf00      	nop
  }

  if (err != 0U)
 8015bf2:	7afb      	ldrb	r3, [r7, #11]
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d11e      	bne.n	8015c36 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8015bf8:	683b      	ldr	r3, [r7, #0]
 8015bfa:	88db      	ldrh	r3, [r3, #6]
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d016      	beq.n	8015c2e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8015c00:	893b      	ldrh	r3, [r7, #8]
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d00e      	beq.n	8015c24 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8015c06:	683b      	ldr	r3, [r7, #0]
 8015c08:	88da      	ldrh	r2, [r3, #6]
 8015c0a:	893b      	ldrh	r3, [r7, #8]
 8015c0c:	4293      	cmp	r3, r2
 8015c0e:	bf28      	it	cs
 8015c10:	4613      	movcs	r3, r2
 8015c12:	b29b      	uxth	r3, r3
 8015c14:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015c16:	893b      	ldrh	r3, [r7, #8]
 8015c18:	461a      	mov	r2, r3
 8015c1a:	68f9      	ldr	r1, [r7, #12]
 8015c1c:	6878      	ldr	r0, [r7, #4]
 8015c1e:	f000 fa5d 	bl	80160dc <USBD_CtlSendData>
 8015c22:	e009      	b.n	8015c38 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015c24:	6839      	ldr	r1, [r7, #0]
 8015c26:	6878      	ldr	r0, [r7, #4]
 8015c28:	f000 f9e7 	bl	8015ffa <USBD_CtlError>
 8015c2c:	e004      	b.n	8015c38 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015c2e:	6878      	ldr	r0, [r7, #4]
 8015c30:	f000 faae 	bl	8016190 <USBD_CtlSendStatus>
 8015c34:	e000      	b.n	8015c38 <USBD_GetDescriptor+0x2cc>
    return;
 8015c36:	bf00      	nop
  }
}
 8015c38:	3710      	adds	r7, #16
 8015c3a:	46bd      	mov	sp, r7
 8015c3c:	bd80      	pop	{r7, pc}
 8015c3e:	bf00      	nop

08015c40 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015c40:	b580      	push	{r7, lr}
 8015c42:	b084      	sub	sp, #16
 8015c44:	af00      	add	r7, sp, #0
 8015c46:	6078      	str	r0, [r7, #4]
 8015c48:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015c4a:	683b      	ldr	r3, [r7, #0]
 8015c4c:	889b      	ldrh	r3, [r3, #4]
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d131      	bne.n	8015cb6 <USBD_SetAddress+0x76>
 8015c52:	683b      	ldr	r3, [r7, #0]
 8015c54:	88db      	ldrh	r3, [r3, #6]
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d12d      	bne.n	8015cb6 <USBD_SetAddress+0x76>
 8015c5a:	683b      	ldr	r3, [r7, #0]
 8015c5c:	885b      	ldrh	r3, [r3, #2]
 8015c5e:	2b7f      	cmp	r3, #127	; 0x7f
 8015c60:	d829      	bhi.n	8015cb6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015c62:	683b      	ldr	r3, [r7, #0]
 8015c64:	885b      	ldrh	r3, [r3, #2]
 8015c66:	b2db      	uxtb	r3, r3
 8015c68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015c6c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015c74:	b2db      	uxtb	r3, r3
 8015c76:	2b03      	cmp	r3, #3
 8015c78:	d104      	bne.n	8015c84 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8015c7a:	6839      	ldr	r1, [r7, #0]
 8015c7c:	6878      	ldr	r0, [r7, #4]
 8015c7e:	f000 f9bc 	bl	8015ffa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015c82:	e01d      	b.n	8015cc0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	7bfa      	ldrb	r2, [r7, #15]
 8015c88:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015c8c:	7bfb      	ldrb	r3, [r7, #15]
 8015c8e:	4619      	mov	r1, r3
 8015c90:	6878      	ldr	r0, [r7, #4]
 8015c92:	f000 ff71 	bl	8016b78 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015c96:	6878      	ldr	r0, [r7, #4]
 8015c98:	f000 fa7a 	bl	8016190 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015c9c:	7bfb      	ldrb	r3, [r7, #15]
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	d004      	beq.n	8015cac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	2202      	movs	r2, #2
 8015ca6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015caa:	e009      	b.n	8015cc0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	2201      	movs	r2, #1
 8015cb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015cb4:	e004      	b.n	8015cc0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015cb6:	6839      	ldr	r1, [r7, #0]
 8015cb8:	6878      	ldr	r0, [r7, #4]
 8015cba:	f000 f99e 	bl	8015ffa <USBD_CtlError>
  }
}
 8015cbe:	bf00      	nop
 8015cc0:	bf00      	nop
 8015cc2:	3710      	adds	r7, #16
 8015cc4:	46bd      	mov	sp, r7
 8015cc6:	bd80      	pop	{r7, pc}

08015cc8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015cc8:	b580      	push	{r7, lr}
 8015cca:	b084      	sub	sp, #16
 8015ccc:	af00      	add	r7, sp, #0
 8015cce:	6078      	str	r0, [r7, #4]
 8015cd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015cd2:	2300      	movs	r3, #0
 8015cd4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015cd6:	683b      	ldr	r3, [r7, #0]
 8015cd8:	885b      	ldrh	r3, [r3, #2]
 8015cda:	b2da      	uxtb	r2, r3
 8015cdc:	4b4e      	ldr	r3, [pc, #312]	; (8015e18 <USBD_SetConfig+0x150>)
 8015cde:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015ce0:	4b4d      	ldr	r3, [pc, #308]	; (8015e18 <USBD_SetConfig+0x150>)
 8015ce2:	781b      	ldrb	r3, [r3, #0]
 8015ce4:	2b01      	cmp	r3, #1
 8015ce6:	d905      	bls.n	8015cf4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015ce8:	6839      	ldr	r1, [r7, #0]
 8015cea:	6878      	ldr	r0, [r7, #4]
 8015cec:	f000 f985 	bl	8015ffa <USBD_CtlError>
    return USBD_FAIL;
 8015cf0:	2303      	movs	r3, #3
 8015cf2:	e08c      	b.n	8015e0e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015cfa:	b2db      	uxtb	r3, r3
 8015cfc:	2b02      	cmp	r3, #2
 8015cfe:	d002      	beq.n	8015d06 <USBD_SetConfig+0x3e>
 8015d00:	2b03      	cmp	r3, #3
 8015d02:	d029      	beq.n	8015d58 <USBD_SetConfig+0x90>
 8015d04:	e075      	b.n	8015df2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8015d06:	4b44      	ldr	r3, [pc, #272]	; (8015e18 <USBD_SetConfig+0x150>)
 8015d08:	781b      	ldrb	r3, [r3, #0]
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d020      	beq.n	8015d50 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8015d0e:	4b42      	ldr	r3, [pc, #264]	; (8015e18 <USBD_SetConfig+0x150>)
 8015d10:	781b      	ldrb	r3, [r3, #0]
 8015d12:	461a      	mov	r2, r3
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015d18:	4b3f      	ldr	r3, [pc, #252]	; (8015e18 <USBD_SetConfig+0x150>)
 8015d1a:	781b      	ldrb	r3, [r3, #0]
 8015d1c:	4619      	mov	r1, r3
 8015d1e:	6878      	ldr	r0, [r7, #4]
 8015d20:	f7fe ffe1 	bl	8014ce6 <USBD_SetClassConfig>
 8015d24:	4603      	mov	r3, r0
 8015d26:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8015d28:	7bfb      	ldrb	r3, [r7, #15]
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d008      	beq.n	8015d40 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8015d2e:	6839      	ldr	r1, [r7, #0]
 8015d30:	6878      	ldr	r0, [r7, #4]
 8015d32:	f000 f962 	bl	8015ffa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	2202      	movs	r2, #2
 8015d3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015d3e:	e065      	b.n	8015e0c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015d40:	6878      	ldr	r0, [r7, #4]
 8015d42:	f000 fa25 	bl	8016190 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	2203      	movs	r2, #3
 8015d4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015d4e:	e05d      	b.n	8015e0c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015d50:	6878      	ldr	r0, [r7, #4]
 8015d52:	f000 fa1d 	bl	8016190 <USBD_CtlSendStatus>
      break;
 8015d56:	e059      	b.n	8015e0c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8015d58:	4b2f      	ldr	r3, [pc, #188]	; (8015e18 <USBD_SetConfig+0x150>)
 8015d5a:	781b      	ldrb	r3, [r3, #0]
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d112      	bne.n	8015d86 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	2202      	movs	r2, #2
 8015d64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8015d68:	4b2b      	ldr	r3, [pc, #172]	; (8015e18 <USBD_SetConfig+0x150>)
 8015d6a:	781b      	ldrb	r3, [r3, #0]
 8015d6c:	461a      	mov	r2, r3
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015d72:	4b29      	ldr	r3, [pc, #164]	; (8015e18 <USBD_SetConfig+0x150>)
 8015d74:	781b      	ldrb	r3, [r3, #0]
 8015d76:	4619      	mov	r1, r3
 8015d78:	6878      	ldr	r0, [r7, #4]
 8015d7a:	f7fe ffd0 	bl	8014d1e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8015d7e:	6878      	ldr	r0, [r7, #4]
 8015d80:	f000 fa06 	bl	8016190 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015d84:	e042      	b.n	8015e0c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8015d86:	4b24      	ldr	r3, [pc, #144]	; (8015e18 <USBD_SetConfig+0x150>)
 8015d88:	781b      	ldrb	r3, [r3, #0]
 8015d8a:	461a      	mov	r2, r3
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	685b      	ldr	r3, [r3, #4]
 8015d90:	429a      	cmp	r2, r3
 8015d92:	d02a      	beq.n	8015dea <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	685b      	ldr	r3, [r3, #4]
 8015d98:	b2db      	uxtb	r3, r3
 8015d9a:	4619      	mov	r1, r3
 8015d9c:	6878      	ldr	r0, [r7, #4]
 8015d9e:	f7fe ffbe 	bl	8014d1e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8015da2:	4b1d      	ldr	r3, [pc, #116]	; (8015e18 <USBD_SetConfig+0x150>)
 8015da4:	781b      	ldrb	r3, [r3, #0]
 8015da6:	461a      	mov	r2, r3
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015dac:	4b1a      	ldr	r3, [pc, #104]	; (8015e18 <USBD_SetConfig+0x150>)
 8015dae:	781b      	ldrb	r3, [r3, #0]
 8015db0:	4619      	mov	r1, r3
 8015db2:	6878      	ldr	r0, [r7, #4]
 8015db4:	f7fe ff97 	bl	8014ce6 <USBD_SetClassConfig>
 8015db8:	4603      	mov	r3, r0
 8015dba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8015dbc:	7bfb      	ldrb	r3, [r7, #15]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d00f      	beq.n	8015de2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8015dc2:	6839      	ldr	r1, [r7, #0]
 8015dc4:	6878      	ldr	r0, [r7, #4]
 8015dc6:	f000 f918 	bl	8015ffa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	685b      	ldr	r3, [r3, #4]
 8015dce:	b2db      	uxtb	r3, r3
 8015dd0:	4619      	mov	r1, r3
 8015dd2:	6878      	ldr	r0, [r7, #4]
 8015dd4:	f7fe ffa3 	bl	8014d1e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	2202      	movs	r2, #2
 8015ddc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015de0:	e014      	b.n	8015e0c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015de2:	6878      	ldr	r0, [r7, #4]
 8015de4:	f000 f9d4 	bl	8016190 <USBD_CtlSendStatus>
      break;
 8015de8:	e010      	b.n	8015e0c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015dea:	6878      	ldr	r0, [r7, #4]
 8015dec:	f000 f9d0 	bl	8016190 <USBD_CtlSendStatus>
      break;
 8015df0:	e00c      	b.n	8015e0c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8015df2:	6839      	ldr	r1, [r7, #0]
 8015df4:	6878      	ldr	r0, [r7, #4]
 8015df6:	f000 f900 	bl	8015ffa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015dfa:	4b07      	ldr	r3, [pc, #28]	; (8015e18 <USBD_SetConfig+0x150>)
 8015dfc:	781b      	ldrb	r3, [r3, #0]
 8015dfe:	4619      	mov	r1, r3
 8015e00:	6878      	ldr	r0, [r7, #4]
 8015e02:	f7fe ff8c 	bl	8014d1e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8015e06:	2303      	movs	r3, #3
 8015e08:	73fb      	strb	r3, [r7, #15]
      break;
 8015e0a:	bf00      	nop
  }

  return ret;
 8015e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e0e:	4618      	mov	r0, r3
 8015e10:	3710      	adds	r7, #16
 8015e12:	46bd      	mov	sp, r7
 8015e14:	bd80      	pop	{r7, pc}
 8015e16:	bf00      	nop
 8015e18:	240015ac 	.word	0x240015ac

08015e1c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e1c:	b580      	push	{r7, lr}
 8015e1e:	b082      	sub	sp, #8
 8015e20:	af00      	add	r7, sp, #0
 8015e22:	6078      	str	r0, [r7, #4]
 8015e24:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8015e26:	683b      	ldr	r3, [r7, #0]
 8015e28:	88db      	ldrh	r3, [r3, #6]
 8015e2a:	2b01      	cmp	r3, #1
 8015e2c:	d004      	beq.n	8015e38 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8015e2e:	6839      	ldr	r1, [r7, #0]
 8015e30:	6878      	ldr	r0, [r7, #4]
 8015e32:	f000 f8e2 	bl	8015ffa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8015e36:	e023      	b.n	8015e80 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015e3e:	b2db      	uxtb	r3, r3
 8015e40:	2b02      	cmp	r3, #2
 8015e42:	dc02      	bgt.n	8015e4a <USBD_GetConfig+0x2e>
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	dc03      	bgt.n	8015e50 <USBD_GetConfig+0x34>
 8015e48:	e015      	b.n	8015e76 <USBD_GetConfig+0x5a>
 8015e4a:	2b03      	cmp	r3, #3
 8015e4c:	d00b      	beq.n	8015e66 <USBD_GetConfig+0x4a>
 8015e4e:	e012      	b.n	8015e76 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	2200      	movs	r2, #0
 8015e54:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	3308      	adds	r3, #8
 8015e5a:	2201      	movs	r2, #1
 8015e5c:	4619      	mov	r1, r3
 8015e5e:	6878      	ldr	r0, [r7, #4]
 8015e60:	f000 f93c 	bl	80160dc <USBD_CtlSendData>
        break;
 8015e64:	e00c      	b.n	8015e80 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	3304      	adds	r3, #4
 8015e6a:	2201      	movs	r2, #1
 8015e6c:	4619      	mov	r1, r3
 8015e6e:	6878      	ldr	r0, [r7, #4]
 8015e70:	f000 f934 	bl	80160dc <USBD_CtlSendData>
        break;
 8015e74:	e004      	b.n	8015e80 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8015e76:	6839      	ldr	r1, [r7, #0]
 8015e78:	6878      	ldr	r0, [r7, #4]
 8015e7a:	f000 f8be 	bl	8015ffa <USBD_CtlError>
        break;
 8015e7e:	bf00      	nop
}
 8015e80:	bf00      	nop
 8015e82:	3708      	adds	r7, #8
 8015e84:	46bd      	mov	sp, r7
 8015e86:	bd80      	pop	{r7, pc}

08015e88 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e88:	b580      	push	{r7, lr}
 8015e8a:	b082      	sub	sp, #8
 8015e8c:	af00      	add	r7, sp, #0
 8015e8e:	6078      	str	r0, [r7, #4]
 8015e90:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015e98:	b2db      	uxtb	r3, r3
 8015e9a:	3b01      	subs	r3, #1
 8015e9c:	2b02      	cmp	r3, #2
 8015e9e:	d81e      	bhi.n	8015ede <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8015ea0:	683b      	ldr	r3, [r7, #0]
 8015ea2:	88db      	ldrh	r3, [r3, #6]
 8015ea4:	2b02      	cmp	r3, #2
 8015ea6:	d004      	beq.n	8015eb2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8015ea8:	6839      	ldr	r1, [r7, #0]
 8015eaa:	6878      	ldr	r0, [r7, #4]
 8015eac:	f000 f8a5 	bl	8015ffa <USBD_CtlError>
        break;
 8015eb0:	e01a      	b.n	8015ee8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	2201      	movs	r2, #1
 8015eb6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d005      	beq.n	8015ece <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	68db      	ldr	r3, [r3, #12]
 8015ec6:	f043 0202 	orr.w	r2, r3, #2
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	330c      	adds	r3, #12
 8015ed2:	2202      	movs	r2, #2
 8015ed4:	4619      	mov	r1, r3
 8015ed6:	6878      	ldr	r0, [r7, #4]
 8015ed8:	f000 f900 	bl	80160dc <USBD_CtlSendData>
      break;
 8015edc:	e004      	b.n	8015ee8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8015ede:	6839      	ldr	r1, [r7, #0]
 8015ee0:	6878      	ldr	r0, [r7, #4]
 8015ee2:	f000 f88a 	bl	8015ffa <USBD_CtlError>
      break;
 8015ee6:	bf00      	nop
  }
}
 8015ee8:	bf00      	nop
 8015eea:	3708      	adds	r7, #8
 8015eec:	46bd      	mov	sp, r7
 8015eee:	bd80      	pop	{r7, pc}

08015ef0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015ef0:	b580      	push	{r7, lr}
 8015ef2:	b082      	sub	sp, #8
 8015ef4:	af00      	add	r7, sp, #0
 8015ef6:	6078      	str	r0, [r7, #4]
 8015ef8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015efa:	683b      	ldr	r3, [r7, #0]
 8015efc:	885b      	ldrh	r3, [r3, #2]
 8015efe:	2b01      	cmp	r3, #1
 8015f00:	d107      	bne.n	8015f12 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	2201      	movs	r2, #1
 8015f06:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8015f0a:	6878      	ldr	r0, [r7, #4]
 8015f0c:	f000 f940 	bl	8016190 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8015f10:	e013      	b.n	8015f3a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8015f12:	683b      	ldr	r3, [r7, #0]
 8015f14:	885b      	ldrh	r3, [r3, #2]
 8015f16:	2b02      	cmp	r3, #2
 8015f18:	d10b      	bne.n	8015f32 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8015f1a:	683b      	ldr	r3, [r7, #0]
 8015f1c:	889b      	ldrh	r3, [r3, #4]
 8015f1e:	0a1b      	lsrs	r3, r3, #8
 8015f20:	b29b      	uxth	r3, r3
 8015f22:	b2da      	uxtb	r2, r3
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8015f2a:	6878      	ldr	r0, [r7, #4]
 8015f2c:	f000 f930 	bl	8016190 <USBD_CtlSendStatus>
}
 8015f30:	e003      	b.n	8015f3a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8015f32:	6839      	ldr	r1, [r7, #0]
 8015f34:	6878      	ldr	r0, [r7, #4]
 8015f36:	f000 f860 	bl	8015ffa <USBD_CtlError>
}
 8015f3a:	bf00      	nop
 8015f3c:	3708      	adds	r7, #8
 8015f3e:	46bd      	mov	sp, r7
 8015f40:	bd80      	pop	{r7, pc}

08015f42 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015f42:	b580      	push	{r7, lr}
 8015f44:	b082      	sub	sp, #8
 8015f46:	af00      	add	r7, sp, #0
 8015f48:	6078      	str	r0, [r7, #4]
 8015f4a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015f52:	b2db      	uxtb	r3, r3
 8015f54:	3b01      	subs	r3, #1
 8015f56:	2b02      	cmp	r3, #2
 8015f58:	d80b      	bhi.n	8015f72 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015f5a:	683b      	ldr	r3, [r7, #0]
 8015f5c:	885b      	ldrh	r3, [r3, #2]
 8015f5e:	2b01      	cmp	r3, #1
 8015f60:	d10c      	bne.n	8015f7c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	2200      	movs	r2, #0
 8015f66:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8015f6a:	6878      	ldr	r0, [r7, #4]
 8015f6c:	f000 f910 	bl	8016190 <USBD_CtlSendStatus>
      }
      break;
 8015f70:	e004      	b.n	8015f7c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8015f72:	6839      	ldr	r1, [r7, #0]
 8015f74:	6878      	ldr	r0, [r7, #4]
 8015f76:	f000 f840 	bl	8015ffa <USBD_CtlError>
      break;
 8015f7a:	e000      	b.n	8015f7e <USBD_ClrFeature+0x3c>
      break;
 8015f7c:	bf00      	nop
  }
}
 8015f7e:	bf00      	nop
 8015f80:	3708      	adds	r7, #8
 8015f82:	46bd      	mov	sp, r7
 8015f84:	bd80      	pop	{r7, pc}

08015f86 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8015f86:	b580      	push	{r7, lr}
 8015f88:	b084      	sub	sp, #16
 8015f8a:	af00      	add	r7, sp, #0
 8015f8c:	6078      	str	r0, [r7, #4]
 8015f8e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8015f90:	683b      	ldr	r3, [r7, #0]
 8015f92:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	781a      	ldrb	r2, [r3, #0]
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	3301      	adds	r3, #1
 8015fa0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8015fa2:	68fb      	ldr	r3, [r7, #12]
 8015fa4:	781a      	ldrb	r2, [r3, #0]
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8015faa:	68fb      	ldr	r3, [r7, #12]
 8015fac:	3301      	adds	r3, #1
 8015fae:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8015fb0:	68f8      	ldr	r0, [r7, #12]
 8015fb2:	f7ff fa41 	bl	8015438 <SWAPBYTE>
 8015fb6:	4603      	mov	r3, r0
 8015fb8:	461a      	mov	r2, r3
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	3301      	adds	r3, #1
 8015fc2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015fc4:	68fb      	ldr	r3, [r7, #12]
 8015fc6:	3301      	adds	r3, #1
 8015fc8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8015fca:	68f8      	ldr	r0, [r7, #12]
 8015fcc:	f7ff fa34 	bl	8015438 <SWAPBYTE>
 8015fd0:	4603      	mov	r3, r0
 8015fd2:	461a      	mov	r2, r3
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8015fd8:	68fb      	ldr	r3, [r7, #12]
 8015fda:	3301      	adds	r3, #1
 8015fdc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015fde:	68fb      	ldr	r3, [r7, #12]
 8015fe0:	3301      	adds	r3, #1
 8015fe2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8015fe4:	68f8      	ldr	r0, [r7, #12]
 8015fe6:	f7ff fa27 	bl	8015438 <SWAPBYTE>
 8015fea:	4603      	mov	r3, r0
 8015fec:	461a      	mov	r2, r3
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	80da      	strh	r2, [r3, #6]
}
 8015ff2:	bf00      	nop
 8015ff4:	3710      	adds	r7, #16
 8015ff6:	46bd      	mov	sp, r7
 8015ff8:	bd80      	pop	{r7, pc}

08015ffa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015ffa:	b580      	push	{r7, lr}
 8015ffc:	b082      	sub	sp, #8
 8015ffe:	af00      	add	r7, sp, #0
 8016000:	6078      	str	r0, [r7, #4]
 8016002:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016004:	2180      	movs	r1, #128	; 0x80
 8016006:	6878      	ldr	r0, [r7, #4]
 8016008:	f000 fd4c 	bl	8016aa4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801600c:	2100      	movs	r1, #0
 801600e:	6878      	ldr	r0, [r7, #4]
 8016010:	f000 fd48 	bl	8016aa4 <USBD_LL_StallEP>
}
 8016014:	bf00      	nop
 8016016:	3708      	adds	r7, #8
 8016018:	46bd      	mov	sp, r7
 801601a:	bd80      	pop	{r7, pc}

0801601c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801601c:	b580      	push	{r7, lr}
 801601e:	b086      	sub	sp, #24
 8016020:	af00      	add	r7, sp, #0
 8016022:	60f8      	str	r0, [r7, #12]
 8016024:	60b9      	str	r1, [r7, #8]
 8016026:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016028:	2300      	movs	r3, #0
 801602a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801602c:	68fb      	ldr	r3, [r7, #12]
 801602e:	2b00      	cmp	r3, #0
 8016030:	d036      	beq.n	80160a0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8016032:	68fb      	ldr	r3, [r7, #12]
 8016034:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8016036:	6938      	ldr	r0, [r7, #16]
 8016038:	f000 f836 	bl	80160a8 <USBD_GetLen>
 801603c:	4603      	mov	r3, r0
 801603e:	3301      	adds	r3, #1
 8016040:	b29b      	uxth	r3, r3
 8016042:	005b      	lsls	r3, r3, #1
 8016044:	b29a      	uxth	r2, r3
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801604a:	7dfb      	ldrb	r3, [r7, #23]
 801604c:	68ba      	ldr	r2, [r7, #8]
 801604e:	4413      	add	r3, r2
 8016050:	687a      	ldr	r2, [r7, #4]
 8016052:	7812      	ldrb	r2, [r2, #0]
 8016054:	701a      	strb	r2, [r3, #0]
  idx++;
 8016056:	7dfb      	ldrb	r3, [r7, #23]
 8016058:	3301      	adds	r3, #1
 801605a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801605c:	7dfb      	ldrb	r3, [r7, #23]
 801605e:	68ba      	ldr	r2, [r7, #8]
 8016060:	4413      	add	r3, r2
 8016062:	2203      	movs	r2, #3
 8016064:	701a      	strb	r2, [r3, #0]
  idx++;
 8016066:	7dfb      	ldrb	r3, [r7, #23]
 8016068:	3301      	adds	r3, #1
 801606a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801606c:	e013      	b.n	8016096 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801606e:	7dfb      	ldrb	r3, [r7, #23]
 8016070:	68ba      	ldr	r2, [r7, #8]
 8016072:	4413      	add	r3, r2
 8016074:	693a      	ldr	r2, [r7, #16]
 8016076:	7812      	ldrb	r2, [r2, #0]
 8016078:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801607a:	693b      	ldr	r3, [r7, #16]
 801607c:	3301      	adds	r3, #1
 801607e:	613b      	str	r3, [r7, #16]
    idx++;
 8016080:	7dfb      	ldrb	r3, [r7, #23]
 8016082:	3301      	adds	r3, #1
 8016084:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8016086:	7dfb      	ldrb	r3, [r7, #23]
 8016088:	68ba      	ldr	r2, [r7, #8]
 801608a:	4413      	add	r3, r2
 801608c:	2200      	movs	r2, #0
 801608e:	701a      	strb	r2, [r3, #0]
    idx++;
 8016090:	7dfb      	ldrb	r3, [r7, #23]
 8016092:	3301      	adds	r3, #1
 8016094:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016096:	693b      	ldr	r3, [r7, #16]
 8016098:	781b      	ldrb	r3, [r3, #0]
 801609a:	2b00      	cmp	r3, #0
 801609c:	d1e7      	bne.n	801606e <USBD_GetString+0x52>
 801609e:	e000      	b.n	80160a2 <USBD_GetString+0x86>
    return;
 80160a0:	bf00      	nop
  }
}
 80160a2:	3718      	adds	r7, #24
 80160a4:	46bd      	mov	sp, r7
 80160a6:	bd80      	pop	{r7, pc}

080160a8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80160a8:	b480      	push	{r7}
 80160aa:	b085      	sub	sp, #20
 80160ac:	af00      	add	r7, sp, #0
 80160ae:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80160b0:	2300      	movs	r3, #0
 80160b2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80160b8:	e005      	b.n	80160c6 <USBD_GetLen+0x1e>
  {
    len++;
 80160ba:	7bfb      	ldrb	r3, [r7, #15]
 80160bc:	3301      	adds	r3, #1
 80160be:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80160c0:	68bb      	ldr	r3, [r7, #8]
 80160c2:	3301      	adds	r3, #1
 80160c4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80160c6:	68bb      	ldr	r3, [r7, #8]
 80160c8:	781b      	ldrb	r3, [r3, #0]
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d1f5      	bne.n	80160ba <USBD_GetLen+0x12>
  }

  return len;
 80160ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80160d0:	4618      	mov	r0, r3
 80160d2:	3714      	adds	r7, #20
 80160d4:	46bd      	mov	sp, r7
 80160d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160da:	4770      	bx	lr

080160dc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80160dc:	b580      	push	{r7, lr}
 80160de:	b084      	sub	sp, #16
 80160e0:	af00      	add	r7, sp, #0
 80160e2:	60f8      	str	r0, [r7, #12]
 80160e4:	60b9      	str	r1, [r7, #8]
 80160e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	2202      	movs	r2, #2
 80160ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80160f0:	68fb      	ldr	r3, [r7, #12]
 80160f2:	687a      	ldr	r2, [r7, #4]
 80160f4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80160f6:	68fb      	ldr	r3, [r7, #12]
 80160f8:	687a      	ldr	r2, [r7, #4]
 80160fa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	68ba      	ldr	r2, [r7, #8]
 8016100:	2100      	movs	r1, #0
 8016102:	68f8      	ldr	r0, [r7, #12]
 8016104:	f000 fd57 	bl	8016bb6 <USBD_LL_Transmit>

  return USBD_OK;
 8016108:	2300      	movs	r3, #0
}
 801610a:	4618      	mov	r0, r3
 801610c:	3710      	adds	r7, #16
 801610e:	46bd      	mov	sp, r7
 8016110:	bd80      	pop	{r7, pc}

08016112 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8016112:	b580      	push	{r7, lr}
 8016114:	b084      	sub	sp, #16
 8016116:	af00      	add	r7, sp, #0
 8016118:	60f8      	str	r0, [r7, #12]
 801611a:	60b9      	str	r1, [r7, #8]
 801611c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	68ba      	ldr	r2, [r7, #8]
 8016122:	2100      	movs	r1, #0
 8016124:	68f8      	ldr	r0, [r7, #12]
 8016126:	f000 fd46 	bl	8016bb6 <USBD_LL_Transmit>

  return USBD_OK;
 801612a:	2300      	movs	r3, #0
}
 801612c:	4618      	mov	r0, r3
 801612e:	3710      	adds	r7, #16
 8016130:	46bd      	mov	sp, r7
 8016132:	bd80      	pop	{r7, pc}

08016134 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8016134:	b580      	push	{r7, lr}
 8016136:	b084      	sub	sp, #16
 8016138:	af00      	add	r7, sp, #0
 801613a:	60f8      	str	r0, [r7, #12]
 801613c:	60b9      	str	r1, [r7, #8]
 801613e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8016140:	68fb      	ldr	r3, [r7, #12]
 8016142:	2203      	movs	r2, #3
 8016144:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	687a      	ldr	r2, [r7, #4]
 801614c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	687a      	ldr	r2, [r7, #4]
 8016154:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	68ba      	ldr	r2, [r7, #8]
 801615c:	2100      	movs	r1, #0
 801615e:	68f8      	ldr	r0, [r7, #12]
 8016160:	f000 fd4a 	bl	8016bf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016164:	2300      	movs	r3, #0
}
 8016166:	4618      	mov	r0, r3
 8016168:	3710      	adds	r7, #16
 801616a:	46bd      	mov	sp, r7
 801616c:	bd80      	pop	{r7, pc}

0801616e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801616e:	b580      	push	{r7, lr}
 8016170:	b084      	sub	sp, #16
 8016172:	af00      	add	r7, sp, #0
 8016174:	60f8      	str	r0, [r7, #12]
 8016176:	60b9      	str	r1, [r7, #8]
 8016178:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	68ba      	ldr	r2, [r7, #8]
 801617e:	2100      	movs	r1, #0
 8016180:	68f8      	ldr	r0, [r7, #12]
 8016182:	f000 fd39 	bl	8016bf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016186:	2300      	movs	r3, #0
}
 8016188:	4618      	mov	r0, r3
 801618a:	3710      	adds	r7, #16
 801618c:	46bd      	mov	sp, r7
 801618e:	bd80      	pop	{r7, pc}

08016190 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016190:	b580      	push	{r7, lr}
 8016192:	b082      	sub	sp, #8
 8016194:	af00      	add	r7, sp, #0
 8016196:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	2204      	movs	r2, #4
 801619c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80161a0:	2300      	movs	r3, #0
 80161a2:	2200      	movs	r2, #0
 80161a4:	2100      	movs	r1, #0
 80161a6:	6878      	ldr	r0, [r7, #4]
 80161a8:	f000 fd05 	bl	8016bb6 <USBD_LL_Transmit>

  return USBD_OK;
 80161ac:	2300      	movs	r3, #0
}
 80161ae:	4618      	mov	r0, r3
 80161b0:	3708      	adds	r7, #8
 80161b2:	46bd      	mov	sp, r7
 80161b4:	bd80      	pop	{r7, pc}

080161b6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80161b6:	b580      	push	{r7, lr}
 80161b8:	b082      	sub	sp, #8
 80161ba:	af00      	add	r7, sp, #0
 80161bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	2205      	movs	r2, #5
 80161c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80161c6:	2300      	movs	r3, #0
 80161c8:	2200      	movs	r2, #0
 80161ca:	2100      	movs	r1, #0
 80161cc:	6878      	ldr	r0, [r7, #4]
 80161ce:	f000 fd13 	bl	8016bf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80161d2:	2300      	movs	r3, #0
}
 80161d4:	4618      	mov	r0, r3
 80161d6:	3708      	adds	r7, #8
 80161d8:	46bd      	mov	sp, r7
 80161da:	bd80      	pop	{r7, pc}

080161dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80161dc:	b480      	push	{r7}
 80161de:	b087      	sub	sp, #28
 80161e0:	af00      	add	r7, sp, #0
 80161e2:	60f8      	str	r0, [r7, #12]
 80161e4:	60b9      	str	r1, [r7, #8]
 80161e6:	4613      	mov	r3, r2
 80161e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80161ea:	2301      	movs	r3, #1
 80161ec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80161ee:	2300      	movs	r3, #0
 80161f0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80161f2:	4b1f      	ldr	r3, [pc, #124]	; (8016270 <FATFS_LinkDriverEx+0x94>)
 80161f4:	7a5b      	ldrb	r3, [r3, #9]
 80161f6:	b2db      	uxtb	r3, r3
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d131      	bne.n	8016260 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80161fc:	4b1c      	ldr	r3, [pc, #112]	; (8016270 <FATFS_LinkDriverEx+0x94>)
 80161fe:	7a5b      	ldrb	r3, [r3, #9]
 8016200:	b2db      	uxtb	r3, r3
 8016202:	461a      	mov	r2, r3
 8016204:	4b1a      	ldr	r3, [pc, #104]	; (8016270 <FATFS_LinkDriverEx+0x94>)
 8016206:	2100      	movs	r1, #0
 8016208:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801620a:	4b19      	ldr	r3, [pc, #100]	; (8016270 <FATFS_LinkDriverEx+0x94>)
 801620c:	7a5b      	ldrb	r3, [r3, #9]
 801620e:	b2db      	uxtb	r3, r3
 8016210:	4a17      	ldr	r2, [pc, #92]	; (8016270 <FATFS_LinkDriverEx+0x94>)
 8016212:	009b      	lsls	r3, r3, #2
 8016214:	4413      	add	r3, r2
 8016216:	68fa      	ldr	r2, [r7, #12]
 8016218:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801621a:	4b15      	ldr	r3, [pc, #84]	; (8016270 <FATFS_LinkDriverEx+0x94>)
 801621c:	7a5b      	ldrb	r3, [r3, #9]
 801621e:	b2db      	uxtb	r3, r3
 8016220:	461a      	mov	r2, r3
 8016222:	4b13      	ldr	r3, [pc, #76]	; (8016270 <FATFS_LinkDriverEx+0x94>)
 8016224:	4413      	add	r3, r2
 8016226:	79fa      	ldrb	r2, [r7, #7]
 8016228:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801622a:	4b11      	ldr	r3, [pc, #68]	; (8016270 <FATFS_LinkDriverEx+0x94>)
 801622c:	7a5b      	ldrb	r3, [r3, #9]
 801622e:	b2db      	uxtb	r3, r3
 8016230:	1c5a      	adds	r2, r3, #1
 8016232:	b2d1      	uxtb	r1, r2
 8016234:	4a0e      	ldr	r2, [pc, #56]	; (8016270 <FATFS_LinkDriverEx+0x94>)
 8016236:	7251      	strb	r1, [r2, #9]
 8016238:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801623a:	7dbb      	ldrb	r3, [r7, #22]
 801623c:	3330      	adds	r3, #48	; 0x30
 801623e:	b2da      	uxtb	r2, r3
 8016240:	68bb      	ldr	r3, [r7, #8]
 8016242:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016244:	68bb      	ldr	r3, [r7, #8]
 8016246:	3301      	adds	r3, #1
 8016248:	223a      	movs	r2, #58	; 0x3a
 801624a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801624c:	68bb      	ldr	r3, [r7, #8]
 801624e:	3302      	adds	r3, #2
 8016250:	222f      	movs	r2, #47	; 0x2f
 8016252:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016254:	68bb      	ldr	r3, [r7, #8]
 8016256:	3303      	adds	r3, #3
 8016258:	2200      	movs	r2, #0
 801625a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801625c:	2300      	movs	r3, #0
 801625e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8016260:	7dfb      	ldrb	r3, [r7, #23]
}
 8016262:	4618      	mov	r0, r3
 8016264:	371c      	adds	r7, #28
 8016266:	46bd      	mov	sp, r7
 8016268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801626c:	4770      	bx	lr
 801626e:	bf00      	nop
 8016270:	240015b0 	.word	0x240015b0

08016274 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016274:	b580      	push	{r7, lr}
 8016276:	b082      	sub	sp, #8
 8016278:	af00      	add	r7, sp, #0
 801627a:	6078      	str	r0, [r7, #4]
 801627c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801627e:	2200      	movs	r2, #0
 8016280:	6839      	ldr	r1, [r7, #0]
 8016282:	6878      	ldr	r0, [r7, #4]
 8016284:	f7ff ffaa 	bl	80161dc <FATFS_LinkDriverEx>
 8016288:	4603      	mov	r3, r0
}
 801628a:	4618      	mov	r0, r3
 801628c:	3708      	adds	r7, #8
 801628e:	46bd      	mov	sp, r7
 8016290:	bd80      	pop	{r7, pc}
	...

08016294 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016294:	b580      	push	{r7, lr}
 8016296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8016298:	2201      	movs	r2, #1
 801629a:	4913      	ldr	r1, [pc, #76]	; (80162e8 <MX_USB_DEVICE_Init+0x54>)
 801629c:	4813      	ldr	r0, [pc, #76]	; (80162ec <MX_USB_DEVICE_Init+0x58>)
 801629e:	f7fe fca5 	bl	8014bec <USBD_Init>
 80162a2:	4603      	mov	r3, r0
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d001      	beq.n	80162ac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80162a8:	f7ec fa2a 	bl	8002700 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 80162ac:	4910      	ldr	r1, [pc, #64]	; (80162f0 <MX_USB_DEVICE_Init+0x5c>)
 80162ae:	480f      	ldr	r0, [pc, #60]	; (80162ec <MX_USB_DEVICE_Init+0x58>)
 80162b0:	f7fe fccc 	bl	8014c4c <USBD_RegisterClass>
 80162b4:	4603      	mov	r3, r0
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d001      	beq.n	80162be <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80162ba:	f7ec fa21 	bl	8002700 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 80162be:	490d      	ldr	r1, [pc, #52]	; (80162f4 <MX_USB_DEVICE_Init+0x60>)
 80162c0:	480a      	ldr	r0, [pc, #40]	; (80162ec <MX_USB_DEVICE_Init+0x58>)
 80162c2:	f7fe fbc3 	bl	8014a4c <USBD_CDC_RegisterInterface>
 80162c6:	4603      	mov	r3, r0
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d001      	beq.n	80162d0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80162cc:	f7ec fa18 	bl	8002700 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 80162d0:	4806      	ldr	r0, [pc, #24]	; (80162ec <MX_USB_DEVICE_Init+0x58>)
 80162d2:	f7fe fcf1 	bl	8014cb8 <USBD_Start>
 80162d6:	4603      	mov	r3, r0
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d001      	beq.n	80162e0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80162dc:	f7ec fa10 	bl	8002700 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80162e0:	f7f3 f960 	bl	80095a4 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80162e4:	bf00      	nop
 80162e6:	bd80      	pop	{r7, pc}
 80162e8:	240000b0 	.word	0x240000b0
 80162ec:	240015bc 	.word	0x240015bc
 80162f0:	2400001c 	.word	0x2400001c
 80162f4:	2400009c 	.word	0x2400009c

080162f8 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80162f8:	b580      	push	{r7, lr}
 80162fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80162fc:	2200      	movs	r2, #0
 80162fe:	4905      	ldr	r1, [pc, #20]	; (8016314 <CDC_Init_HS+0x1c>)
 8016300:	4805      	ldr	r0, [pc, #20]	; (8016318 <CDC_Init_HS+0x20>)
 8016302:	f7fe fbbd 	bl	8014a80 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8016306:	4905      	ldr	r1, [pc, #20]	; (801631c <CDC_Init_HS+0x24>)
 8016308:	4803      	ldr	r0, [pc, #12]	; (8016318 <CDC_Init_HS+0x20>)
 801630a:	f7fe fbdb 	bl	8014ac4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801630e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8016310:	4618      	mov	r0, r3
 8016312:	bd80      	pop	{r7, pc}
 8016314:	24002098 	.word	0x24002098
 8016318:	240015bc 	.word	0x240015bc
 801631c:	24001898 	.word	0x24001898

08016320 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8016320:	b480      	push	{r7}
 8016322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8016324:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8016326:	4618      	mov	r0, r3
 8016328:	46bd      	mov	sp, r7
 801632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801632e:	4770      	bx	lr

08016330 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016330:	b480      	push	{r7}
 8016332:	b083      	sub	sp, #12
 8016334:	af00      	add	r7, sp, #0
 8016336:	4603      	mov	r3, r0
 8016338:	6039      	str	r1, [r7, #0]
 801633a:	71fb      	strb	r3, [r7, #7]
 801633c:	4613      	mov	r3, r2
 801633e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8016340:	79fb      	ldrb	r3, [r7, #7]
 8016342:	2b23      	cmp	r3, #35	; 0x23
 8016344:	d84a      	bhi.n	80163dc <CDC_Control_HS+0xac>
 8016346:	a201      	add	r2, pc, #4	; (adr r2, 801634c <CDC_Control_HS+0x1c>)
 8016348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801634c:	080163dd 	.word	0x080163dd
 8016350:	080163dd 	.word	0x080163dd
 8016354:	080163dd 	.word	0x080163dd
 8016358:	080163dd 	.word	0x080163dd
 801635c:	080163dd 	.word	0x080163dd
 8016360:	080163dd 	.word	0x080163dd
 8016364:	080163dd 	.word	0x080163dd
 8016368:	080163dd 	.word	0x080163dd
 801636c:	080163dd 	.word	0x080163dd
 8016370:	080163dd 	.word	0x080163dd
 8016374:	080163dd 	.word	0x080163dd
 8016378:	080163dd 	.word	0x080163dd
 801637c:	080163dd 	.word	0x080163dd
 8016380:	080163dd 	.word	0x080163dd
 8016384:	080163dd 	.word	0x080163dd
 8016388:	080163dd 	.word	0x080163dd
 801638c:	080163dd 	.word	0x080163dd
 8016390:	080163dd 	.word	0x080163dd
 8016394:	080163dd 	.word	0x080163dd
 8016398:	080163dd 	.word	0x080163dd
 801639c:	080163dd 	.word	0x080163dd
 80163a0:	080163dd 	.word	0x080163dd
 80163a4:	080163dd 	.word	0x080163dd
 80163a8:	080163dd 	.word	0x080163dd
 80163ac:	080163dd 	.word	0x080163dd
 80163b0:	080163dd 	.word	0x080163dd
 80163b4:	080163dd 	.word	0x080163dd
 80163b8:	080163dd 	.word	0x080163dd
 80163bc:	080163dd 	.word	0x080163dd
 80163c0:	080163dd 	.word	0x080163dd
 80163c4:	080163dd 	.word	0x080163dd
 80163c8:	080163dd 	.word	0x080163dd
 80163cc:	080163dd 	.word	0x080163dd
 80163d0:	080163dd 	.word	0x080163dd
 80163d4:	080163dd 	.word	0x080163dd
 80163d8:	080163dd 	.word	0x080163dd
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80163dc:	bf00      	nop
  }

  return (USBD_OK);
 80163de:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 80163e0:	4618      	mov	r0, r3
 80163e2:	370c      	adds	r7, #12
 80163e4:	46bd      	mov	sp, r7
 80163e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163ea:	4770      	bx	lr

080163ec <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 80163ec:	b580      	push	{r7, lr}
 80163ee:	b084      	sub	sp, #16
 80163f0:	af00      	add	r7, sp, #0
 80163f2:	6078      	str	r0, [r7, #4]
 80163f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80163f6:	6879      	ldr	r1, [r7, #4]
 80163f8:	480e      	ldr	r0, [pc, #56]	; (8016434 <CDC_Receive_HS+0x48>)
 80163fa:	f7fe fb63 	bl	8014ac4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80163fe:	480d      	ldr	r0, [pc, #52]	; (8016434 <CDC_Receive_HS+0x48>)
 8016400:	f7fe fbbe 	bl	8014b80 <USBD_CDC_ReceivePacket>

  extern uint8_t usbDataBuffer[usbBufferLen];
  extern uint32_t usbBytesReady;

  uint32_t cpyLen = *Len;
 8016404:	683b      	ldr	r3, [r7, #0]
 8016406:	681b      	ldr	r3, [r3, #0]
 8016408:	60fb      	str	r3, [r7, #12]
  memcpy(usbDataBuffer + usbBytesReady, Buf, cpyLen);
 801640a:	4b0b      	ldr	r3, [pc, #44]	; (8016438 <CDC_Receive_HS+0x4c>)
 801640c:	681b      	ldr	r3, [r3, #0]
 801640e:	4a0b      	ldr	r2, [pc, #44]	; (801643c <CDC_Receive_HS+0x50>)
 8016410:	4413      	add	r3, r2
 8016412:	68fa      	ldr	r2, [r7, #12]
 8016414:	6879      	ldr	r1, [r7, #4]
 8016416:	4618      	mov	r0, r3
 8016418:	f000 fc90 	bl	8016d3c <memcpy>
  usbBytesReady += cpyLen;
 801641c:	4b06      	ldr	r3, [pc, #24]	; (8016438 <CDC_Receive_HS+0x4c>)
 801641e:	681a      	ldr	r2, [r3, #0]
 8016420:	68fb      	ldr	r3, [r7, #12]
 8016422:	4413      	add	r3, r2
 8016424:	4a04      	ldr	r2, [pc, #16]	; (8016438 <CDC_Receive_HS+0x4c>)
 8016426:	6013      	str	r3, [r2, #0]
  
  return (USBD_OK);
 8016428:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 801642a:	4618      	mov	r0, r3
 801642c:	3710      	adds	r7, #16
 801642e:	46bd      	mov	sp, r7
 8016430:	bd80      	pop	{r7, pc}
 8016432:	bf00      	nop
 8016434:	240015bc 	.word	0x240015bc
 8016438:	24000280 	.word	0x24000280
 801643c:	24000180 	.word	0x24000180

08016440 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8016440:	b580      	push	{r7, lr}
 8016442:	b084      	sub	sp, #16
 8016444:	af00      	add	r7, sp, #0
 8016446:	6078      	str	r0, [r7, #4]
 8016448:	460b      	mov	r3, r1
 801644a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801644c:	2300      	movs	r3, #0
 801644e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8016450:	4b0d      	ldr	r3, [pc, #52]	; (8016488 <CDC_Transmit_HS+0x48>)
 8016452:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016456:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016458:	68bb      	ldr	r3, [r7, #8]
 801645a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801645e:	2b00      	cmp	r3, #0
 8016460:	d001      	beq.n	8016466 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8016462:	2301      	movs	r3, #1
 8016464:	e00b      	b.n	801647e <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8016466:	887b      	ldrh	r3, [r7, #2]
 8016468:	461a      	mov	r2, r3
 801646a:	6879      	ldr	r1, [r7, #4]
 801646c:	4806      	ldr	r0, [pc, #24]	; (8016488 <CDC_Transmit_HS+0x48>)
 801646e:	f7fe fb07 	bl	8014a80 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8016472:	4805      	ldr	r0, [pc, #20]	; (8016488 <CDC_Transmit_HS+0x48>)
 8016474:	f7fe fb44 	bl	8014b00 <USBD_CDC_TransmitPacket>
 8016478:	4603      	mov	r3, r0
 801647a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 801647c:	7bfb      	ldrb	r3, [r7, #15]
}
 801647e:	4618      	mov	r0, r3
 8016480:	3710      	adds	r7, #16
 8016482:	46bd      	mov	sp, r7
 8016484:	bd80      	pop	{r7, pc}
 8016486:	bf00      	nop
 8016488:	240015bc 	.word	0x240015bc

0801648c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801648c:	b480      	push	{r7}
 801648e:	b087      	sub	sp, #28
 8016490:	af00      	add	r7, sp, #0
 8016492:	60f8      	str	r0, [r7, #12]
 8016494:	60b9      	str	r1, [r7, #8]
 8016496:	4613      	mov	r3, r2
 8016498:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801649a:	2300      	movs	r3, #0
 801649c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801649e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80164a2:	4618      	mov	r0, r3
 80164a4:	371c      	adds	r7, #28
 80164a6:	46bd      	mov	sp, r7
 80164a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ac:	4770      	bx	lr
	...

080164b0 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80164b0:	b480      	push	{r7}
 80164b2:	b083      	sub	sp, #12
 80164b4:	af00      	add	r7, sp, #0
 80164b6:	4603      	mov	r3, r0
 80164b8:	6039      	str	r1, [r7, #0]
 80164ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80164bc:	683b      	ldr	r3, [r7, #0]
 80164be:	2212      	movs	r2, #18
 80164c0:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 80164c2:	4b03      	ldr	r3, [pc, #12]	; (80164d0 <USBD_HS_DeviceDescriptor+0x20>)
}
 80164c4:	4618      	mov	r0, r3
 80164c6:	370c      	adds	r7, #12
 80164c8:	46bd      	mov	sp, r7
 80164ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ce:	4770      	bx	lr
 80164d0:	240000cc 	.word	0x240000cc

080164d4 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80164d4:	b480      	push	{r7}
 80164d6:	b083      	sub	sp, #12
 80164d8:	af00      	add	r7, sp, #0
 80164da:	4603      	mov	r3, r0
 80164dc:	6039      	str	r1, [r7, #0]
 80164de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80164e0:	683b      	ldr	r3, [r7, #0]
 80164e2:	2204      	movs	r2, #4
 80164e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80164e6:	4b03      	ldr	r3, [pc, #12]	; (80164f4 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80164e8:	4618      	mov	r0, r3
 80164ea:	370c      	adds	r7, #12
 80164ec:	46bd      	mov	sp, r7
 80164ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164f2:	4770      	bx	lr
 80164f4:	240000e0 	.word	0x240000e0

080164f8 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80164f8:	b580      	push	{r7, lr}
 80164fa:	b082      	sub	sp, #8
 80164fc:	af00      	add	r7, sp, #0
 80164fe:	4603      	mov	r3, r0
 8016500:	6039      	str	r1, [r7, #0]
 8016502:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016504:	79fb      	ldrb	r3, [r7, #7]
 8016506:	2b00      	cmp	r3, #0
 8016508:	d105      	bne.n	8016516 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801650a:	683a      	ldr	r2, [r7, #0]
 801650c:	4907      	ldr	r1, [pc, #28]	; (801652c <USBD_HS_ProductStrDescriptor+0x34>)
 801650e:	4808      	ldr	r0, [pc, #32]	; (8016530 <USBD_HS_ProductStrDescriptor+0x38>)
 8016510:	f7ff fd84 	bl	801601c <USBD_GetString>
 8016514:	e004      	b.n	8016520 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8016516:	683a      	ldr	r2, [r7, #0]
 8016518:	4904      	ldr	r1, [pc, #16]	; (801652c <USBD_HS_ProductStrDescriptor+0x34>)
 801651a:	4805      	ldr	r0, [pc, #20]	; (8016530 <USBD_HS_ProductStrDescriptor+0x38>)
 801651c:	f7ff fd7e 	bl	801601c <USBD_GetString>
  }
  return USBD_StrDesc;
 8016520:	4b02      	ldr	r3, [pc, #8]	; (801652c <USBD_HS_ProductStrDescriptor+0x34>)
}
 8016522:	4618      	mov	r0, r3
 8016524:	3708      	adds	r7, #8
 8016526:	46bd      	mov	sp, r7
 8016528:	bd80      	pop	{r7, pc}
 801652a:	bf00      	nop
 801652c:	24002898 	.word	0x24002898
 8016530:	08018100 	.word	0x08018100

08016534 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016534:	b580      	push	{r7, lr}
 8016536:	b082      	sub	sp, #8
 8016538:	af00      	add	r7, sp, #0
 801653a:	4603      	mov	r3, r0
 801653c:	6039      	str	r1, [r7, #0]
 801653e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016540:	683a      	ldr	r2, [r7, #0]
 8016542:	4904      	ldr	r1, [pc, #16]	; (8016554 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8016544:	4804      	ldr	r0, [pc, #16]	; (8016558 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8016546:	f7ff fd69 	bl	801601c <USBD_GetString>
  return USBD_StrDesc;
 801654a:	4b02      	ldr	r3, [pc, #8]	; (8016554 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 801654c:	4618      	mov	r0, r3
 801654e:	3708      	adds	r7, #8
 8016550:	46bd      	mov	sp, r7
 8016552:	bd80      	pop	{r7, pc}
 8016554:	24002898 	.word	0x24002898
 8016558:	0801811c 	.word	0x0801811c

0801655c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801655c:	b580      	push	{r7, lr}
 801655e:	b082      	sub	sp, #8
 8016560:	af00      	add	r7, sp, #0
 8016562:	4603      	mov	r3, r0
 8016564:	6039      	str	r1, [r7, #0]
 8016566:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016568:	683b      	ldr	r3, [r7, #0]
 801656a:	221a      	movs	r2, #26
 801656c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801656e:	f000 f843 	bl	80165f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8016572:	4b02      	ldr	r3, [pc, #8]	; (801657c <USBD_HS_SerialStrDescriptor+0x20>)
}
 8016574:	4618      	mov	r0, r3
 8016576:	3708      	adds	r7, #8
 8016578:	46bd      	mov	sp, r7
 801657a:	bd80      	pop	{r7, pc}
 801657c:	240000e4 	.word	0x240000e4

08016580 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016580:	b580      	push	{r7, lr}
 8016582:	b082      	sub	sp, #8
 8016584:	af00      	add	r7, sp, #0
 8016586:	4603      	mov	r3, r0
 8016588:	6039      	str	r1, [r7, #0]
 801658a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801658c:	79fb      	ldrb	r3, [r7, #7]
 801658e:	2b00      	cmp	r3, #0
 8016590:	d105      	bne.n	801659e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8016592:	683a      	ldr	r2, [r7, #0]
 8016594:	4907      	ldr	r1, [pc, #28]	; (80165b4 <USBD_HS_ConfigStrDescriptor+0x34>)
 8016596:	4808      	ldr	r0, [pc, #32]	; (80165b8 <USBD_HS_ConfigStrDescriptor+0x38>)
 8016598:	f7ff fd40 	bl	801601c <USBD_GetString>
 801659c:	e004      	b.n	80165a8 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801659e:	683a      	ldr	r2, [r7, #0]
 80165a0:	4904      	ldr	r1, [pc, #16]	; (80165b4 <USBD_HS_ConfigStrDescriptor+0x34>)
 80165a2:	4805      	ldr	r0, [pc, #20]	; (80165b8 <USBD_HS_ConfigStrDescriptor+0x38>)
 80165a4:	f7ff fd3a 	bl	801601c <USBD_GetString>
  }
  return USBD_StrDesc;
 80165a8:	4b02      	ldr	r3, [pc, #8]	; (80165b4 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 80165aa:	4618      	mov	r0, r3
 80165ac:	3708      	adds	r7, #8
 80165ae:	46bd      	mov	sp, r7
 80165b0:	bd80      	pop	{r7, pc}
 80165b2:	bf00      	nop
 80165b4:	24002898 	.word	0x24002898
 80165b8:	08018120 	.word	0x08018120

080165bc <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80165bc:	b580      	push	{r7, lr}
 80165be:	b082      	sub	sp, #8
 80165c0:	af00      	add	r7, sp, #0
 80165c2:	4603      	mov	r3, r0
 80165c4:	6039      	str	r1, [r7, #0]
 80165c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80165c8:	79fb      	ldrb	r3, [r7, #7]
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d105      	bne.n	80165da <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80165ce:	683a      	ldr	r2, [r7, #0]
 80165d0:	4907      	ldr	r1, [pc, #28]	; (80165f0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80165d2:	4808      	ldr	r0, [pc, #32]	; (80165f4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80165d4:	f7ff fd22 	bl	801601c <USBD_GetString>
 80165d8:	e004      	b.n	80165e4 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80165da:	683a      	ldr	r2, [r7, #0]
 80165dc:	4904      	ldr	r1, [pc, #16]	; (80165f0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80165de:	4805      	ldr	r0, [pc, #20]	; (80165f4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80165e0:	f7ff fd1c 	bl	801601c <USBD_GetString>
  }
  return USBD_StrDesc;
 80165e4:	4b02      	ldr	r3, [pc, #8]	; (80165f0 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80165e6:	4618      	mov	r0, r3
 80165e8:	3708      	adds	r7, #8
 80165ea:	46bd      	mov	sp, r7
 80165ec:	bd80      	pop	{r7, pc}
 80165ee:	bf00      	nop
 80165f0:	24002898 	.word	0x24002898
 80165f4:	0801812c 	.word	0x0801812c

080165f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80165f8:	b580      	push	{r7, lr}
 80165fa:	b084      	sub	sp, #16
 80165fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80165fe:	4b0f      	ldr	r3, [pc, #60]	; (801663c <Get_SerialNum+0x44>)
 8016600:	681b      	ldr	r3, [r3, #0]
 8016602:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016604:	4b0e      	ldr	r3, [pc, #56]	; (8016640 <Get_SerialNum+0x48>)
 8016606:	681b      	ldr	r3, [r3, #0]
 8016608:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801660a:	4b0e      	ldr	r3, [pc, #56]	; (8016644 <Get_SerialNum+0x4c>)
 801660c:	681b      	ldr	r3, [r3, #0]
 801660e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016610:	68fa      	ldr	r2, [r7, #12]
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	4413      	add	r3, r2
 8016616:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016618:	68fb      	ldr	r3, [r7, #12]
 801661a:	2b00      	cmp	r3, #0
 801661c:	d009      	beq.n	8016632 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801661e:	2208      	movs	r2, #8
 8016620:	4909      	ldr	r1, [pc, #36]	; (8016648 <Get_SerialNum+0x50>)
 8016622:	68f8      	ldr	r0, [r7, #12]
 8016624:	f000 f814 	bl	8016650 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016628:	2204      	movs	r2, #4
 801662a:	4908      	ldr	r1, [pc, #32]	; (801664c <Get_SerialNum+0x54>)
 801662c:	68b8      	ldr	r0, [r7, #8]
 801662e:	f000 f80f 	bl	8016650 <IntToUnicode>
  }
}
 8016632:	bf00      	nop
 8016634:	3710      	adds	r7, #16
 8016636:	46bd      	mov	sp, r7
 8016638:	bd80      	pop	{r7, pc}
 801663a:	bf00      	nop
 801663c:	1ff1e800 	.word	0x1ff1e800
 8016640:	1ff1e804 	.word	0x1ff1e804
 8016644:	1ff1e808 	.word	0x1ff1e808
 8016648:	240000e6 	.word	0x240000e6
 801664c:	240000f6 	.word	0x240000f6

08016650 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016650:	b480      	push	{r7}
 8016652:	b087      	sub	sp, #28
 8016654:	af00      	add	r7, sp, #0
 8016656:	60f8      	str	r0, [r7, #12]
 8016658:	60b9      	str	r1, [r7, #8]
 801665a:	4613      	mov	r3, r2
 801665c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801665e:	2300      	movs	r3, #0
 8016660:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016662:	2300      	movs	r3, #0
 8016664:	75fb      	strb	r3, [r7, #23]
 8016666:	e027      	b.n	80166b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016668:	68fb      	ldr	r3, [r7, #12]
 801666a:	0f1b      	lsrs	r3, r3, #28
 801666c:	2b09      	cmp	r3, #9
 801666e:	d80b      	bhi.n	8016688 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016670:	68fb      	ldr	r3, [r7, #12]
 8016672:	0f1b      	lsrs	r3, r3, #28
 8016674:	b2da      	uxtb	r2, r3
 8016676:	7dfb      	ldrb	r3, [r7, #23]
 8016678:	005b      	lsls	r3, r3, #1
 801667a:	4619      	mov	r1, r3
 801667c:	68bb      	ldr	r3, [r7, #8]
 801667e:	440b      	add	r3, r1
 8016680:	3230      	adds	r2, #48	; 0x30
 8016682:	b2d2      	uxtb	r2, r2
 8016684:	701a      	strb	r2, [r3, #0]
 8016686:	e00a      	b.n	801669e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016688:	68fb      	ldr	r3, [r7, #12]
 801668a:	0f1b      	lsrs	r3, r3, #28
 801668c:	b2da      	uxtb	r2, r3
 801668e:	7dfb      	ldrb	r3, [r7, #23]
 8016690:	005b      	lsls	r3, r3, #1
 8016692:	4619      	mov	r1, r3
 8016694:	68bb      	ldr	r3, [r7, #8]
 8016696:	440b      	add	r3, r1
 8016698:	3237      	adds	r2, #55	; 0x37
 801669a:	b2d2      	uxtb	r2, r2
 801669c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801669e:	68fb      	ldr	r3, [r7, #12]
 80166a0:	011b      	lsls	r3, r3, #4
 80166a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80166a4:	7dfb      	ldrb	r3, [r7, #23]
 80166a6:	005b      	lsls	r3, r3, #1
 80166a8:	3301      	adds	r3, #1
 80166aa:	68ba      	ldr	r2, [r7, #8]
 80166ac:	4413      	add	r3, r2
 80166ae:	2200      	movs	r2, #0
 80166b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80166b2:	7dfb      	ldrb	r3, [r7, #23]
 80166b4:	3301      	adds	r3, #1
 80166b6:	75fb      	strb	r3, [r7, #23]
 80166b8:	7dfa      	ldrb	r2, [r7, #23]
 80166ba:	79fb      	ldrb	r3, [r7, #7]
 80166bc:	429a      	cmp	r2, r3
 80166be:	d3d3      	bcc.n	8016668 <IntToUnicode+0x18>
  }
}
 80166c0:	bf00      	nop
 80166c2:	bf00      	nop
 80166c4:	371c      	adds	r7, #28
 80166c6:	46bd      	mov	sp, r7
 80166c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166cc:	4770      	bx	lr
	...

080166d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80166d0:	b580      	push	{r7, lr}
 80166d2:	b0b2      	sub	sp, #200	; 0xc8
 80166d4:	af00      	add	r7, sp, #0
 80166d6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80166d8:	f107 0310 	add.w	r3, r7, #16
 80166dc:	22b8      	movs	r2, #184	; 0xb8
 80166de:	2100      	movs	r1, #0
 80166e0:	4618      	mov	r0, r3
 80166e2:	f000 fb39 	bl	8016d58 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	681b      	ldr	r3, [r3, #0]
 80166ea:	4a1a      	ldr	r2, [pc, #104]	; (8016754 <HAL_PCD_MspInit+0x84>)
 80166ec:	4293      	cmp	r3, r2
 80166ee:	d12c      	bne.n	801674a <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80166f0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80166f4:	f04f 0300 	mov.w	r3, #0
 80166f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80166fc:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8016700:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8016704:	f107 0310 	add.w	r3, r7, #16
 8016708:	4618      	mov	r0, r3
 801670a:	f7f3 ff2b 	bl	800a564 <HAL_RCCEx_PeriphCLKConfig>
 801670e:	4603      	mov	r3, r0
 8016710:	2b00      	cmp	r3, #0
 8016712:	d001      	beq.n	8016718 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8016714:	f7eb fff4 	bl	8002700 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8016718:	f7f2 ff44 	bl	80095a4 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 801671c:	4b0e      	ldr	r3, [pc, #56]	; (8016758 <HAL_PCD_MspInit+0x88>)
 801671e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016722:	4a0d      	ldr	r2, [pc, #52]	; (8016758 <HAL_PCD_MspInit+0x88>)
 8016724:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8016728:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801672c:	4b0a      	ldr	r3, [pc, #40]	; (8016758 <HAL_PCD_MspInit+0x88>)
 801672e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016736:	60fb      	str	r3, [r7, #12]
 8016738:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801673a:	2200      	movs	r2, #0
 801673c:	2100      	movs	r1, #0
 801673e:	204d      	movs	r0, #77	; 0x4d
 8016740:	f7ee fccd 	bl	80050de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8016744:	204d      	movs	r0, #77	; 0x4d
 8016746:	f7ee fce4 	bl	8005112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801674a:	bf00      	nop
 801674c:	37c8      	adds	r7, #200	; 0xc8
 801674e:	46bd      	mov	sp, r7
 8016750:	bd80      	pop	{r7, pc}
 8016752:	bf00      	nop
 8016754:	40040000 	.word	0x40040000
 8016758:	58024400 	.word	0x58024400

0801675c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801675c:	b580      	push	{r7, lr}
 801675e:	b082      	sub	sp, #8
 8016760:	af00      	add	r7, sp, #0
 8016762:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8016770:	4619      	mov	r1, r3
 8016772:	4610      	mov	r0, r2
 8016774:	f7fe faed 	bl	8014d52 <USBD_LL_SetupStage>
}
 8016778:	bf00      	nop
 801677a:	3708      	adds	r7, #8
 801677c:	46bd      	mov	sp, r7
 801677e:	bd80      	pop	{r7, pc}

08016780 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016780:	b580      	push	{r7, lr}
 8016782:	b082      	sub	sp, #8
 8016784:	af00      	add	r7, sp, #0
 8016786:	6078      	str	r0, [r7, #4]
 8016788:	460b      	mov	r3, r1
 801678a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016792:	78fa      	ldrb	r2, [r7, #3]
 8016794:	6879      	ldr	r1, [r7, #4]
 8016796:	4613      	mov	r3, r2
 8016798:	00db      	lsls	r3, r3, #3
 801679a:	4413      	add	r3, r2
 801679c:	009b      	lsls	r3, r3, #2
 801679e:	440b      	add	r3, r1
 80167a0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80167a4:	681a      	ldr	r2, [r3, #0]
 80167a6:	78fb      	ldrb	r3, [r7, #3]
 80167a8:	4619      	mov	r1, r3
 80167aa:	f7fe fb27 	bl	8014dfc <USBD_LL_DataOutStage>
}
 80167ae:	bf00      	nop
 80167b0:	3708      	adds	r7, #8
 80167b2:	46bd      	mov	sp, r7
 80167b4:	bd80      	pop	{r7, pc}

080167b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80167b6:	b580      	push	{r7, lr}
 80167b8:	b082      	sub	sp, #8
 80167ba:	af00      	add	r7, sp, #0
 80167bc:	6078      	str	r0, [r7, #4]
 80167be:	460b      	mov	r3, r1
 80167c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80167c8:	78fa      	ldrb	r2, [r7, #3]
 80167ca:	6879      	ldr	r1, [r7, #4]
 80167cc:	4613      	mov	r3, r2
 80167ce:	00db      	lsls	r3, r3, #3
 80167d0:	4413      	add	r3, r2
 80167d2:	009b      	lsls	r3, r3, #2
 80167d4:	440b      	add	r3, r1
 80167d6:	3348      	adds	r3, #72	; 0x48
 80167d8:	681a      	ldr	r2, [r3, #0]
 80167da:	78fb      	ldrb	r3, [r7, #3]
 80167dc:	4619      	mov	r1, r3
 80167de:	f7fe fbc0 	bl	8014f62 <USBD_LL_DataInStage>
}
 80167e2:	bf00      	nop
 80167e4:	3708      	adds	r7, #8
 80167e6:	46bd      	mov	sp, r7
 80167e8:	bd80      	pop	{r7, pc}

080167ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80167ea:	b580      	push	{r7, lr}
 80167ec:	b082      	sub	sp, #8
 80167ee:	af00      	add	r7, sp, #0
 80167f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80167f8:	4618      	mov	r0, r3
 80167fa:	f7fe fcfa 	bl	80151f2 <USBD_LL_SOF>
}
 80167fe:	bf00      	nop
 8016800:	3708      	adds	r7, #8
 8016802:	46bd      	mov	sp, r7
 8016804:	bd80      	pop	{r7, pc}

08016806 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016806:	b580      	push	{r7, lr}
 8016808:	b084      	sub	sp, #16
 801680a:	af00      	add	r7, sp, #0
 801680c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801680e:	2301      	movs	r3, #1
 8016810:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	691b      	ldr	r3, [r3, #16]
 8016816:	2b00      	cmp	r3, #0
 8016818:	d102      	bne.n	8016820 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801681a:	2300      	movs	r3, #0
 801681c:	73fb      	strb	r3, [r7, #15]
 801681e:	e008      	b.n	8016832 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	691b      	ldr	r3, [r3, #16]
 8016824:	2b02      	cmp	r3, #2
 8016826:	d102      	bne.n	801682e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016828:	2301      	movs	r3, #1
 801682a:	73fb      	strb	r3, [r7, #15]
 801682c:	e001      	b.n	8016832 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801682e:	f7eb ff67 	bl	8002700 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016838:	7bfa      	ldrb	r2, [r7, #15]
 801683a:	4611      	mov	r1, r2
 801683c:	4618      	mov	r0, r3
 801683e:	f7fe fc94 	bl	801516a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016848:	4618      	mov	r0, r3
 801684a:	f7fe fc3c 	bl	80150c6 <USBD_LL_Reset>
}
 801684e:	bf00      	nop
 8016850:	3710      	adds	r7, #16
 8016852:	46bd      	mov	sp, r7
 8016854:	bd80      	pop	{r7, pc}
	...

08016858 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016858:	b580      	push	{r7, lr}
 801685a:	b082      	sub	sp, #8
 801685c:	af00      	add	r7, sp, #0
 801685e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016866:	4618      	mov	r0, r3
 8016868:	f7fe fc8f 	bl	801518a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016874:	681b      	ldr	r3, [r3, #0]
 8016876:	687a      	ldr	r2, [r7, #4]
 8016878:	6812      	ldr	r2, [r2, #0]
 801687a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801687e:	f043 0301 	orr.w	r3, r3, #1
 8016882:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	6a1b      	ldr	r3, [r3, #32]
 8016888:	2b00      	cmp	r3, #0
 801688a:	d005      	beq.n	8016898 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801688c:	4b04      	ldr	r3, [pc, #16]	; (80168a0 <HAL_PCD_SuspendCallback+0x48>)
 801688e:	691b      	ldr	r3, [r3, #16]
 8016890:	4a03      	ldr	r2, [pc, #12]	; (80168a0 <HAL_PCD_SuspendCallback+0x48>)
 8016892:	f043 0306 	orr.w	r3, r3, #6
 8016896:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016898:	bf00      	nop
 801689a:	3708      	adds	r7, #8
 801689c:	46bd      	mov	sp, r7
 801689e:	bd80      	pop	{r7, pc}
 80168a0:	e000ed00 	.word	0xe000ed00

080168a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168a4:	b580      	push	{r7, lr}
 80168a6:	b082      	sub	sp, #8
 80168a8:	af00      	add	r7, sp, #0
 80168aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80168b2:	4618      	mov	r0, r3
 80168b4:	f7fe fc85 	bl	80151c2 <USBD_LL_Resume>
}
 80168b8:	bf00      	nop
 80168ba:	3708      	adds	r7, #8
 80168bc:	46bd      	mov	sp, r7
 80168be:	bd80      	pop	{r7, pc}

080168c0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168c0:	b580      	push	{r7, lr}
 80168c2:	b082      	sub	sp, #8
 80168c4:	af00      	add	r7, sp, #0
 80168c6:	6078      	str	r0, [r7, #4]
 80168c8:	460b      	mov	r3, r1
 80168ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80168d2:	78fa      	ldrb	r2, [r7, #3]
 80168d4:	4611      	mov	r1, r2
 80168d6:	4618      	mov	r0, r3
 80168d8:	f7fe fcdd 	bl	8015296 <USBD_LL_IsoOUTIncomplete>
}
 80168dc:	bf00      	nop
 80168de:	3708      	adds	r7, #8
 80168e0:	46bd      	mov	sp, r7
 80168e2:	bd80      	pop	{r7, pc}

080168e4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168e4:	b580      	push	{r7, lr}
 80168e6:	b082      	sub	sp, #8
 80168e8:	af00      	add	r7, sp, #0
 80168ea:	6078      	str	r0, [r7, #4]
 80168ec:	460b      	mov	r3, r1
 80168ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80168f6:	78fa      	ldrb	r2, [r7, #3]
 80168f8:	4611      	mov	r1, r2
 80168fa:	4618      	mov	r0, r3
 80168fc:	f7fe fc99 	bl	8015232 <USBD_LL_IsoINIncomplete>
}
 8016900:	bf00      	nop
 8016902:	3708      	adds	r7, #8
 8016904:	46bd      	mov	sp, r7
 8016906:	bd80      	pop	{r7, pc}

08016908 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016908:	b580      	push	{r7, lr}
 801690a:	b082      	sub	sp, #8
 801690c:	af00      	add	r7, sp, #0
 801690e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016916:	4618      	mov	r0, r3
 8016918:	f7fe fcef 	bl	80152fa <USBD_LL_DevConnected>
}
 801691c:	bf00      	nop
 801691e:	3708      	adds	r7, #8
 8016920:	46bd      	mov	sp, r7
 8016922:	bd80      	pop	{r7, pc}

08016924 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016924:	b580      	push	{r7, lr}
 8016926:	b082      	sub	sp, #8
 8016928:	af00      	add	r7, sp, #0
 801692a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016932:	4618      	mov	r0, r3
 8016934:	f7fe fcec 	bl	8015310 <USBD_LL_DevDisconnected>
}
 8016938:	bf00      	nop
 801693a:	3708      	adds	r7, #8
 801693c:	46bd      	mov	sp, r7
 801693e:	bd80      	pop	{r7, pc}

08016940 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016940:	b580      	push	{r7, lr}
 8016942:	b082      	sub	sp, #8
 8016944:	af00      	add	r7, sp, #0
 8016946:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	781b      	ldrb	r3, [r3, #0]
 801694c:	2b01      	cmp	r3, #1
 801694e:	d140      	bne.n	80169d2 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8016950:	4a22      	ldr	r2, [pc, #136]	; (80169dc <USBD_LL_Init+0x9c>)
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	4a20      	ldr	r2, [pc, #128]	; (80169dc <USBD_LL_Init+0x9c>)
 801695c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8016960:	4b1e      	ldr	r3, [pc, #120]	; (80169dc <USBD_LL_Init+0x9c>)
 8016962:	4a1f      	ldr	r2, [pc, #124]	; (80169e0 <USBD_LL_Init+0xa0>)
 8016964:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8016966:	4b1d      	ldr	r3, [pc, #116]	; (80169dc <USBD_LL_Init+0x9c>)
 8016968:	2209      	movs	r2, #9
 801696a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 801696c:	4b1b      	ldr	r3, [pc, #108]	; (80169dc <USBD_LL_Init+0x9c>)
 801696e:	2202      	movs	r2, #2
 8016970:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8016972:	4b1a      	ldr	r3, [pc, #104]	; (80169dc <USBD_LL_Init+0x9c>)
 8016974:	2200      	movs	r2, #0
 8016976:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8016978:	4b18      	ldr	r3, [pc, #96]	; (80169dc <USBD_LL_Init+0x9c>)
 801697a:	2202      	movs	r2, #2
 801697c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801697e:	4b17      	ldr	r3, [pc, #92]	; (80169dc <USBD_LL_Init+0x9c>)
 8016980:	2200      	movs	r2, #0
 8016982:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8016984:	4b15      	ldr	r3, [pc, #84]	; (80169dc <USBD_LL_Init+0x9c>)
 8016986:	2200      	movs	r2, #0
 8016988:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801698a:	4b14      	ldr	r3, [pc, #80]	; (80169dc <USBD_LL_Init+0x9c>)
 801698c:	2200      	movs	r2, #0
 801698e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8016990:	4b12      	ldr	r3, [pc, #72]	; (80169dc <USBD_LL_Init+0x9c>)
 8016992:	2200      	movs	r2, #0
 8016994:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8016996:	4b11      	ldr	r3, [pc, #68]	; (80169dc <USBD_LL_Init+0x9c>)
 8016998:	2200      	movs	r2, #0
 801699a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801699c:	4b0f      	ldr	r3, [pc, #60]	; (80169dc <USBD_LL_Init+0x9c>)
 801699e:	2200      	movs	r2, #0
 80169a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80169a2:	480e      	ldr	r0, [pc, #56]	; (80169dc <USBD_LL_Init+0x9c>)
 80169a4:	f7f1 fb0b 	bl	8007fbe <HAL_PCD_Init>
 80169a8:	4603      	mov	r3, r0
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	d001      	beq.n	80169b2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80169ae:	f7eb fea7 	bl	8002700 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80169b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80169b6:	4809      	ldr	r0, [pc, #36]	; (80169dc <USBD_LL_Init+0x9c>)
 80169b8:	f7f2 fd79 	bl	80094ae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 80169bc:	2280      	movs	r2, #128	; 0x80
 80169be:	2100      	movs	r1, #0
 80169c0:	4806      	ldr	r0, [pc, #24]	; (80169dc <USBD_LL_Init+0x9c>)
 80169c2:	f7f2 fd2d 	bl	8009420 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 80169c6:	f44f 72ba 	mov.w	r2, #372	; 0x174
 80169ca:	2101      	movs	r1, #1
 80169cc:	4803      	ldr	r0, [pc, #12]	; (80169dc <USBD_LL_Init+0x9c>)
 80169ce:	f7f2 fd27 	bl	8009420 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 80169d2:	2300      	movs	r3, #0
}
 80169d4:	4618      	mov	r0, r3
 80169d6:	3708      	adds	r7, #8
 80169d8:	46bd      	mov	sp, r7
 80169da:	bd80      	pop	{r7, pc}
 80169dc:	24002a98 	.word	0x24002a98
 80169e0:	40040000 	.word	0x40040000

080169e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80169e4:	b580      	push	{r7, lr}
 80169e6:	b084      	sub	sp, #16
 80169e8:	af00      	add	r7, sp, #0
 80169ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80169ec:	2300      	movs	r3, #0
 80169ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80169f0:	2300      	movs	r3, #0
 80169f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80169fa:	4618      	mov	r0, r3
 80169fc:	f7f1 fc03 	bl	8008206 <HAL_PCD_Start>
 8016a00:	4603      	mov	r3, r0
 8016a02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016a04:	7bfb      	ldrb	r3, [r7, #15]
 8016a06:	4618      	mov	r0, r3
 8016a08:	f000 f942 	bl	8016c90 <USBD_Get_USB_Status>
 8016a0c:	4603      	mov	r3, r0
 8016a0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016a10:	7bbb      	ldrb	r3, [r7, #14]
}
 8016a12:	4618      	mov	r0, r3
 8016a14:	3710      	adds	r7, #16
 8016a16:	46bd      	mov	sp, r7
 8016a18:	bd80      	pop	{r7, pc}

08016a1a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016a1a:	b580      	push	{r7, lr}
 8016a1c:	b084      	sub	sp, #16
 8016a1e:	af00      	add	r7, sp, #0
 8016a20:	6078      	str	r0, [r7, #4]
 8016a22:	4608      	mov	r0, r1
 8016a24:	4611      	mov	r1, r2
 8016a26:	461a      	mov	r2, r3
 8016a28:	4603      	mov	r3, r0
 8016a2a:	70fb      	strb	r3, [r7, #3]
 8016a2c:	460b      	mov	r3, r1
 8016a2e:	70bb      	strb	r3, [r7, #2]
 8016a30:	4613      	mov	r3, r2
 8016a32:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a34:	2300      	movs	r3, #0
 8016a36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a38:	2300      	movs	r3, #0
 8016a3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016a42:	78bb      	ldrb	r3, [r7, #2]
 8016a44:	883a      	ldrh	r2, [r7, #0]
 8016a46:	78f9      	ldrb	r1, [r7, #3]
 8016a48:	f7f2 f903 	bl	8008c52 <HAL_PCD_EP_Open>
 8016a4c:	4603      	mov	r3, r0
 8016a4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016a50:	7bfb      	ldrb	r3, [r7, #15]
 8016a52:	4618      	mov	r0, r3
 8016a54:	f000 f91c 	bl	8016c90 <USBD_Get_USB_Status>
 8016a58:	4603      	mov	r3, r0
 8016a5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016a5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8016a5e:	4618      	mov	r0, r3
 8016a60:	3710      	adds	r7, #16
 8016a62:	46bd      	mov	sp, r7
 8016a64:	bd80      	pop	{r7, pc}

08016a66 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016a66:	b580      	push	{r7, lr}
 8016a68:	b084      	sub	sp, #16
 8016a6a:	af00      	add	r7, sp, #0
 8016a6c:	6078      	str	r0, [r7, #4]
 8016a6e:	460b      	mov	r3, r1
 8016a70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a72:	2300      	movs	r3, #0
 8016a74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a76:	2300      	movs	r3, #0
 8016a78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016a80:	78fa      	ldrb	r2, [r7, #3]
 8016a82:	4611      	mov	r1, r2
 8016a84:	4618      	mov	r0, r3
 8016a86:	f7f2 f94c 	bl	8008d22 <HAL_PCD_EP_Close>
 8016a8a:	4603      	mov	r3, r0
 8016a8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016a8e:	7bfb      	ldrb	r3, [r7, #15]
 8016a90:	4618      	mov	r0, r3
 8016a92:	f000 f8fd 	bl	8016c90 <USBD_Get_USB_Status>
 8016a96:	4603      	mov	r3, r0
 8016a98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016a9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8016a9c:	4618      	mov	r0, r3
 8016a9e:	3710      	adds	r7, #16
 8016aa0:	46bd      	mov	sp, r7
 8016aa2:	bd80      	pop	{r7, pc}

08016aa4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016aa4:	b580      	push	{r7, lr}
 8016aa6:	b084      	sub	sp, #16
 8016aa8:	af00      	add	r7, sp, #0
 8016aaa:	6078      	str	r0, [r7, #4]
 8016aac:	460b      	mov	r3, r1
 8016aae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ab0:	2300      	movs	r3, #0
 8016ab2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ab4:	2300      	movs	r3, #0
 8016ab6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016abe:	78fa      	ldrb	r2, [r7, #3]
 8016ac0:	4611      	mov	r1, r2
 8016ac2:	4618      	mov	r0, r3
 8016ac4:	f7f2 fa06 	bl	8008ed4 <HAL_PCD_EP_SetStall>
 8016ac8:	4603      	mov	r3, r0
 8016aca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016acc:	7bfb      	ldrb	r3, [r7, #15]
 8016ace:	4618      	mov	r0, r3
 8016ad0:	f000 f8de 	bl	8016c90 <USBD_Get_USB_Status>
 8016ad4:	4603      	mov	r3, r0
 8016ad6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016ad8:	7bbb      	ldrb	r3, [r7, #14]
}
 8016ada:	4618      	mov	r0, r3
 8016adc:	3710      	adds	r7, #16
 8016ade:	46bd      	mov	sp, r7
 8016ae0:	bd80      	pop	{r7, pc}

08016ae2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016ae2:	b580      	push	{r7, lr}
 8016ae4:	b084      	sub	sp, #16
 8016ae6:	af00      	add	r7, sp, #0
 8016ae8:	6078      	str	r0, [r7, #4]
 8016aea:	460b      	mov	r3, r1
 8016aec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016aee:	2300      	movs	r3, #0
 8016af0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016af2:	2300      	movs	r3, #0
 8016af4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016afc:	78fa      	ldrb	r2, [r7, #3]
 8016afe:	4611      	mov	r1, r2
 8016b00:	4618      	mov	r0, r3
 8016b02:	f7f2 fa4b 	bl	8008f9c <HAL_PCD_EP_ClrStall>
 8016b06:	4603      	mov	r3, r0
 8016b08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016b0a:	7bfb      	ldrb	r3, [r7, #15]
 8016b0c:	4618      	mov	r0, r3
 8016b0e:	f000 f8bf 	bl	8016c90 <USBD_Get_USB_Status>
 8016b12:	4603      	mov	r3, r0
 8016b14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016b16:	7bbb      	ldrb	r3, [r7, #14]
}
 8016b18:	4618      	mov	r0, r3
 8016b1a:	3710      	adds	r7, #16
 8016b1c:	46bd      	mov	sp, r7
 8016b1e:	bd80      	pop	{r7, pc}

08016b20 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016b20:	b480      	push	{r7}
 8016b22:	b085      	sub	sp, #20
 8016b24:	af00      	add	r7, sp, #0
 8016b26:	6078      	str	r0, [r7, #4]
 8016b28:	460b      	mov	r3, r1
 8016b2a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016b32:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016b34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	da0b      	bge.n	8016b54 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016b3c:	78fb      	ldrb	r3, [r7, #3]
 8016b3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016b42:	68f9      	ldr	r1, [r7, #12]
 8016b44:	4613      	mov	r3, r2
 8016b46:	00db      	lsls	r3, r3, #3
 8016b48:	4413      	add	r3, r2
 8016b4a:	009b      	lsls	r3, r3, #2
 8016b4c:	440b      	add	r3, r1
 8016b4e:	333e      	adds	r3, #62	; 0x3e
 8016b50:	781b      	ldrb	r3, [r3, #0]
 8016b52:	e00b      	b.n	8016b6c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016b54:	78fb      	ldrb	r3, [r7, #3]
 8016b56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016b5a:	68f9      	ldr	r1, [r7, #12]
 8016b5c:	4613      	mov	r3, r2
 8016b5e:	00db      	lsls	r3, r3, #3
 8016b60:	4413      	add	r3, r2
 8016b62:	009b      	lsls	r3, r3, #2
 8016b64:	440b      	add	r3, r1
 8016b66:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8016b6a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016b6c:	4618      	mov	r0, r3
 8016b6e:	3714      	adds	r7, #20
 8016b70:	46bd      	mov	sp, r7
 8016b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b76:	4770      	bx	lr

08016b78 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016b78:	b580      	push	{r7, lr}
 8016b7a:	b084      	sub	sp, #16
 8016b7c:	af00      	add	r7, sp, #0
 8016b7e:	6078      	str	r0, [r7, #4]
 8016b80:	460b      	mov	r3, r1
 8016b82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b84:	2300      	movs	r3, #0
 8016b86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b88:	2300      	movs	r3, #0
 8016b8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016b92:	78fa      	ldrb	r2, [r7, #3]
 8016b94:	4611      	mov	r1, r2
 8016b96:	4618      	mov	r0, r3
 8016b98:	f7f2 f836 	bl	8008c08 <HAL_PCD_SetAddress>
 8016b9c:	4603      	mov	r3, r0
 8016b9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016ba0:	7bfb      	ldrb	r3, [r7, #15]
 8016ba2:	4618      	mov	r0, r3
 8016ba4:	f000 f874 	bl	8016c90 <USBD_Get_USB_Status>
 8016ba8:	4603      	mov	r3, r0
 8016baa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016bac:	7bbb      	ldrb	r3, [r7, #14]
}
 8016bae:	4618      	mov	r0, r3
 8016bb0:	3710      	adds	r7, #16
 8016bb2:	46bd      	mov	sp, r7
 8016bb4:	bd80      	pop	{r7, pc}

08016bb6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016bb6:	b580      	push	{r7, lr}
 8016bb8:	b086      	sub	sp, #24
 8016bba:	af00      	add	r7, sp, #0
 8016bbc:	60f8      	str	r0, [r7, #12]
 8016bbe:	607a      	str	r2, [r7, #4]
 8016bc0:	603b      	str	r3, [r7, #0]
 8016bc2:	460b      	mov	r3, r1
 8016bc4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016bc6:	2300      	movs	r3, #0
 8016bc8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016bca:	2300      	movs	r3, #0
 8016bcc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016bd4:	7af9      	ldrb	r1, [r7, #11]
 8016bd6:	683b      	ldr	r3, [r7, #0]
 8016bd8:	687a      	ldr	r2, [r7, #4]
 8016bda:	f7f2 f940 	bl	8008e5e <HAL_PCD_EP_Transmit>
 8016bde:	4603      	mov	r3, r0
 8016be0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016be2:	7dfb      	ldrb	r3, [r7, #23]
 8016be4:	4618      	mov	r0, r3
 8016be6:	f000 f853 	bl	8016c90 <USBD_Get_USB_Status>
 8016bea:	4603      	mov	r3, r0
 8016bec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016bee:	7dbb      	ldrb	r3, [r7, #22]
}
 8016bf0:	4618      	mov	r0, r3
 8016bf2:	3718      	adds	r7, #24
 8016bf4:	46bd      	mov	sp, r7
 8016bf6:	bd80      	pop	{r7, pc}

08016bf8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016bf8:	b580      	push	{r7, lr}
 8016bfa:	b086      	sub	sp, #24
 8016bfc:	af00      	add	r7, sp, #0
 8016bfe:	60f8      	str	r0, [r7, #12]
 8016c00:	607a      	str	r2, [r7, #4]
 8016c02:	603b      	str	r3, [r7, #0]
 8016c04:	460b      	mov	r3, r1
 8016c06:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c08:	2300      	movs	r3, #0
 8016c0a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c0c:	2300      	movs	r3, #0
 8016c0e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016c10:	68fb      	ldr	r3, [r7, #12]
 8016c12:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016c16:	7af9      	ldrb	r1, [r7, #11]
 8016c18:	683b      	ldr	r3, [r7, #0]
 8016c1a:	687a      	ldr	r2, [r7, #4]
 8016c1c:	f7f2 f8cb 	bl	8008db6 <HAL_PCD_EP_Receive>
 8016c20:	4603      	mov	r3, r0
 8016c22:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c24:	7dfb      	ldrb	r3, [r7, #23]
 8016c26:	4618      	mov	r0, r3
 8016c28:	f000 f832 	bl	8016c90 <USBD_Get_USB_Status>
 8016c2c:	4603      	mov	r3, r0
 8016c2e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016c30:	7dbb      	ldrb	r3, [r7, #22]
}
 8016c32:	4618      	mov	r0, r3
 8016c34:	3718      	adds	r7, #24
 8016c36:	46bd      	mov	sp, r7
 8016c38:	bd80      	pop	{r7, pc}

08016c3a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016c3a:	b580      	push	{r7, lr}
 8016c3c:	b082      	sub	sp, #8
 8016c3e:	af00      	add	r7, sp, #0
 8016c40:	6078      	str	r0, [r7, #4]
 8016c42:	460b      	mov	r3, r1
 8016c44:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016c4c:	78fa      	ldrb	r2, [r7, #3]
 8016c4e:	4611      	mov	r1, r2
 8016c50:	4618      	mov	r0, r3
 8016c52:	f7f2 f8ec 	bl	8008e2e <HAL_PCD_EP_GetRxCount>
 8016c56:	4603      	mov	r3, r0
}
 8016c58:	4618      	mov	r0, r3
 8016c5a:	3708      	adds	r7, #8
 8016c5c:	46bd      	mov	sp, r7
 8016c5e:	bd80      	pop	{r7, pc}

08016c60 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016c60:	b480      	push	{r7}
 8016c62:	b083      	sub	sp, #12
 8016c64:	af00      	add	r7, sp, #0
 8016c66:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016c68:	4b03      	ldr	r3, [pc, #12]	; (8016c78 <USBD_static_malloc+0x18>)
}
 8016c6a:	4618      	mov	r0, r3
 8016c6c:	370c      	adds	r7, #12
 8016c6e:	46bd      	mov	sp, r7
 8016c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c74:	4770      	bx	lr
 8016c76:	bf00      	nop
 8016c78:	24002fa4 	.word	0x24002fa4

08016c7c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016c7c:	b480      	push	{r7}
 8016c7e:	b083      	sub	sp, #12
 8016c80:	af00      	add	r7, sp, #0
 8016c82:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8016c84:	bf00      	nop
 8016c86:	370c      	adds	r7, #12
 8016c88:	46bd      	mov	sp, r7
 8016c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c8e:	4770      	bx	lr

08016c90 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016c90:	b480      	push	{r7}
 8016c92:	b085      	sub	sp, #20
 8016c94:	af00      	add	r7, sp, #0
 8016c96:	4603      	mov	r3, r0
 8016c98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c9a:	2300      	movs	r3, #0
 8016c9c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016c9e:	79fb      	ldrb	r3, [r7, #7]
 8016ca0:	2b03      	cmp	r3, #3
 8016ca2:	d817      	bhi.n	8016cd4 <USBD_Get_USB_Status+0x44>
 8016ca4:	a201      	add	r2, pc, #4	; (adr r2, 8016cac <USBD_Get_USB_Status+0x1c>)
 8016ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016caa:	bf00      	nop
 8016cac:	08016cbd 	.word	0x08016cbd
 8016cb0:	08016cc3 	.word	0x08016cc3
 8016cb4:	08016cc9 	.word	0x08016cc9
 8016cb8:	08016ccf 	.word	0x08016ccf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016cbc:	2300      	movs	r3, #0
 8016cbe:	73fb      	strb	r3, [r7, #15]
    break;
 8016cc0:	e00b      	b.n	8016cda <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016cc2:	2303      	movs	r3, #3
 8016cc4:	73fb      	strb	r3, [r7, #15]
    break;
 8016cc6:	e008      	b.n	8016cda <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016cc8:	2301      	movs	r3, #1
 8016cca:	73fb      	strb	r3, [r7, #15]
    break;
 8016ccc:	e005      	b.n	8016cda <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016cce:	2303      	movs	r3, #3
 8016cd0:	73fb      	strb	r3, [r7, #15]
    break;
 8016cd2:	e002      	b.n	8016cda <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016cd4:	2303      	movs	r3, #3
 8016cd6:	73fb      	strb	r3, [r7, #15]
    break;
 8016cd8:	bf00      	nop
  }
  return usb_status;
 8016cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8016cdc:	4618      	mov	r0, r3
 8016cde:	3714      	adds	r7, #20
 8016ce0:	46bd      	mov	sp, r7
 8016ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ce6:	4770      	bx	lr

08016ce8 <__errno>:
 8016ce8:	4b01      	ldr	r3, [pc, #4]	; (8016cf0 <__errno+0x8>)
 8016cea:	6818      	ldr	r0, [r3, #0]
 8016cec:	4770      	bx	lr
 8016cee:	bf00      	nop
 8016cf0:	24000100 	.word	0x24000100

08016cf4 <__libc_init_array>:
 8016cf4:	b570      	push	{r4, r5, r6, lr}
 8016cf6:	4d0d      	ldr	r5, [pc, #52]	; (8016d2c <__libc_init_array+0x38>)
 8016cf8:	4c0d      	ldr	r4, [pc, #52]	; (8016d30 <__libc_init_array+0x3c>)
 8016cfa:	1b64      	subs	r4, r4, r5
 8016cfc:	10a4      	asrs	r4, r4, #2
 8016cfe:	2600      	movs	r6, #0
 8016d00:	42a6      	cmp	r6, r4
 8016d02:	d109      	bne.n	8016d18 <__libc_init_array+0x24>
 8016d04:	4d0b      	ldr	r5, [pc, #44]	; (8016d34 <__libc_init_array+0x40>)
 8016d06:	4c0c      	ldr	r4, [pc, #48]	; (8016d38 <__libc_init_array+0x44>)
 8016d08:	f001 f952 	bl	8017fb0 <_init>
 8016d0c:	1b64      	subs	r4, r4, r5
 8016d0e:	10a4      	asrs	r4, r4, #2
 8016d10:	2600      	movs	r6, #0
 8016d12:	42a6      	cmp	r6, r4
 8016d14:	d105      	bne.n	8016d22 <__libc_init_array+0x2e>
 8016d16:	bd70      	pop	{r4, r5, r6, pc}
 8016d18:	f855 3b04 	ldr.w	r3, [r5], #4
 8016d1c:	4798      	blx	r3
 8016d1e:	3601      	adds	r6, #1
 8016d20:	e7ee      	b.n	8016d00 <__libc_init_array+0xc>
 8016d22:	f855 3b04 	ldr.w	r3, [r5], #4
 8016d26:	4798      	blx	r3
 8016d28:	3601      	adds	r6, #1
 8016d2a:	e7f2      	b.n	8016d12 <__libc_init_array+0x1e>
 8016d2c:	080183c4 	.word	0x080183c4
 8016d30:	080183c4 	.word	0x080183c4
 8016d34:	080183c4 	.word	0x080183c4
 8016d38:	080183c8 	.word	0x080183c8

08016d3c <memcpy>:
 8016d3c:	440a      	add	r2, r1
 8016d3e:	4291      	cmp	r1, r2
 8016d40:	f100 33ff 	add.w	r3, r0, #4294967295
 8016d44:	d100      	bne.n	8016d48 <memcpy+0xc>
 8016d46:	4770      	bx	lr
 8016d48:	b510      	push	{r4, lr}
 8016d4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016d4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016d52:	4291      	cmp	r1, r2
 8016d54:	d1f9      	bne.n	8016d4a <memcpy+0xe>
 8016d56:	bd10      	pop	{r4, pc}

08016d58 <memset>:
 8016d58:	4402      	add	r2, r0
 8016d5a:	4603      	mov	r3, r0
 8016d5c:	4293      	cmp	r3, r2
 8016d5e:	d100      	bne.n	8016d62 <memset+0xa>
 8016d60:	4770      	bx	lr
 8016d62:	f803 1b01 	strb.w	r1, [r3], #1
 8016d66:	e7f9      	b.n	8016d5c <memset+0x4>

08016d68 <siprintf>:
 8016d68:	b40e      	push	{r1, r2, r3}
 8016d6a:	b500      	push	{lr}
 8016d6c:	b09c      	sub	sp, #112	; 0x70
 8016d6e:	ab1d      	add	r3, sp, #116	; 0x74
 8016d70:	9002      	str	r0, [sp, #8]
 8016d72:	9006      	str	r0, [sp, #24]
 8016d74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016d78:	4809      	ldr	r0, [pc, #36]	; (8016da0 <siprintf+0x38>)
 8016d7a:	9107      	str	r1, [sp, #28]
 8016d7c:	9104      	str	r1, [sp, #16]
 8016d7e:	4909      	ldr	r1, [pc, #36]	; (8016da4 <siprintf+0x3c>)
 8016d80:	f853 2b04 	ldr.w	r2, [r3], #4
 8016d84:	9105      	str	r1, [sp, #20]
 8016d86:	6800      	ldr	r0, [r0, #0]
 8016d88:	9301      	str	r3, [sp, #4]
 8016d8a:	a902      	add	r1, sp, #8
 8016d8c:	f000 f89e 	bl	8016ecc <_svfiprintf_r>
 8016d90:	9b02      	ldr	r3, [sp, #8]
 8016d92:	2200      	movs	r2, #0
 8016d94:	701a      	strb	r2, [r3, #0]
 8016d96:	b01c      	add	sp, #112	; 0x70
 8016d98:	f85d eb04 	ldr.w	lr, [sp], #4
 8016d9c:	b003      	add	sp, #12
 8016d9e:	4770      	bx	lr
 8016da0:	24000100 	.word	0x24000100
 8016da4:	ffff0208 	.word	0xffff0208

08016da8 <siscanf>:
 8016da8:	b40e      	push	{r1, r2, r3}
 8016daa:	b510      	push	{r4, lr}
 8016dac:	b09f      	sub	sp, #124	; 0x7c
 8016dae:	ac21      	add	r4, sp, #132	; 0x84
 8016db0:	f44f 7101 	mov.w	r1, #516	; 0x204
 8016db4:	f854 2b04 	ldr.w	r2, [r4], #4
 8016db8:	9201      	str	r2, [sp, #4]
 8016dba:	f8ad 101c 	strh.w	r1, [sp, #28]
 8016dbe:	9004      	str	r0, [sp, #16]
 8016dc0:	9008      	str	r0, [sp, #32]
 8016dc2:	f7e9 faaf 	bl	8000324 <strlen>
 8016dc6:	4b0c      	ldr	r3, [pc, #48]	; (8016df8 <siscanf+0x50>)
 8016dc8:	9005      	str	r0, [sp, #20]
 8016dca:	9009      	str	r0, [sp, #36]	; 0x24
 8016dcc:	930d      	str	r3, [sp, #52]	; 0x34
 8016dce:	480b      	ldr	r0, [pc, #44]	; (8016dfc <siscanf+0x54>)
 8016dd0:	9a01      	ldr	r2, [sp, #4]
 8016dd2:	6800      	ldr	r0, [r0, #0]
 8016dd4:	9403      	str	r4, [sp, #12]
 8016dd6:	2300      	movs	r3, #0
 8016dd8:	9311      	str	r3, [sp, #68]	; 0x44
 8016dda:	9316      	str	r3, [sp, #88]	; 0x58
 8016ddc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016de0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016de4:	a904      	add	r1, sp, #16
 8016de6:	4623      	mov	r3, r4
 8016de8:	f000 f9ca 	bl	8017180 <__ssvfiscanf_r>
 8016dec:	b01f      	add	sp, #124	; 0x7c
 8016dee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016df2:	b003      	add	sp, #12
 8016df4:	4770      	bx	lr
 8016df6:	bf00      	nop
 8016df8:	08016e01 	.word	0x08016e01
 8016dfc:	24000100 	.word	0x24000100

08016e00 <__seofread>:
 8016e00:	2000      	movs	r0, #0
 8016e02:	4770      	bx	lr

08016e04 <strcpy>:
 8016e04:	4603      	mov	r3, r0
 8016e06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016e0a:	f803 2b01 	strb.w	r2, [r3], #1
 8016e0e:	2a00      	cmp	r2, #0
 8016e10:	d1f9      	bne.n	8016e06 <strcpy+0x2>
 8016e12:	4770      	bx	lr

08016e14 <__ssputs_r>:
 8016e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e18:	688e      	ldr	r6, [r1, #8]
 8016e1a:	429e      	cmp	r6, r3
 8016e1c:	4682      	mov	sl, r0
 8016e1e:	460c      	mov	r4, r1
 8016e20:	4690      	mov	r8, r2
 8016e22:	461f      	mov	r7, r3
 8016e24:	d838      	bhi.n	8016e98 <__ssputs_r+0x84>
 8016e26:	898a      	ldrh	r2, [r1, #12]
 8016e28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016e2c:	d032      	beq.n	8016e94 <__ssputs_r+0x80>
 8016e2e:	6825      	ldr	r5, [r4, #0]
 8016e30:	6909      	ldr	r1, [r1, #16]
 8016e32:	eba5 0901 	sub.w	r9, r5, r1
 8016e36:	6965      	ldr	r5, [r4, #20]
 8016e38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016e3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016e40:	3301      	adds	r3, #1
 8016e42:	444b      	add	r3, r9
 8016e44:	106d      	asrs	r5, r5, #1
 8016e46:	429d      	cmp	r5, r3
 8016e48:	bf38      	it	cc
 8016e4a:	461d      	movcc	r5, r3
 8016e4c:	0553      	lsls	r3, r2, #21
 8016e4e:	d531      	bpl.n	8016eb4 <__ssputs_r+0xa0>
 8016e50:	4629      	mov	r1, r5
 8016e52:	f000 ffe5 	bl	8017e20 <_malloc_r>
 8016e56:	4606      	mov	r6, r0
 8016e58:	b950      	cbnz	r0, 8016e70 <__ssputs_r+0x5c>
 8016e5a:	230c      	movs	r3, #12
 8016e5c:	f8ca 3000 	str.w	r3, [sl]
 8016e60:	89a3      	ldrh	r3, [r4, #12]
 8016e62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016e66:	81a3      	strh	r3, [r4, #12]
 8016e68:	f04f 30ff 	mov.w	r0, #4294967295
 8016e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e70:	6921      	ldr	r1, [r4, #16]
 8016e72:	464a      	mov	r2, r9
 8016e74:	f7ff ff62 	bl	8016d3c <memcpy>
 8016e78:	89a3      	ldrh	r3, [r4, #12]
 8016e7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016e82:	81a3      	strh	r3, [r4, #12]
 8016e84:	6126      	str	r6, [r4, #16]
 8016e86:	6165      	str	r5, [r4, #20]
 8016e88:	444e      	add	r6, r9
 8016e8a:	eba5 0509 	sub.w	r5, r5, r9
 8016e8e:	6026      	str	r6, [r4, #0]
 8016e90:	60a5      	str	r5, [r4, #8]
 8016e92:	463e      	mov	r6, r7
 8016e94:	42be      	cmp	r6, r7
 8016e96:	d900      	bls.n	8016e9a <__ssputs_r+0x86>
 8016e98:	463e      	mov	r6, r7
 8016e9a:	6820      	ldr	r0, [r4, #0]
 8016e9c:	4632      	mov	r2, r6
 8016e9e:	4641      	mov	r1, r8
 8016ea0:	f000 ff38 	bl	8017d14 <memmove>
 8016ea4:	68a3      	ldr	r3, [r4, #8]
 8016ea6:	1b9b      	subs	r3, r3, r6
 8016ea8:	60a3      	str	r3, [r4, #8]
 8016eaa:	6823      	ldr	r3, [r4, #0]
 8016eac:	4433      	add	r3, r6
 8016eae:	6023      	str	r3, [r4, #0]
 8016eb0:	2000      	movs	r0, #0
 8016eb2:	e7db      	b.n	8016e6c <__ssputs_r+0x58>
 8016eb4:	462a      	mov	r2, r5
 8016eb6:	f001 f827 	bl	8017f08 <_realloc_r>
 8016eba:	4606      	mov	r6, r0
 8016ebc:	2800      	cmp	r0, #0
 8016ebe:	d1e1      	bne.n	8016e84 <__ssputs_r+0x70>
 8016ec0:	6921      	ldr	r1, [r4, #16]
 8016ec2:	4650      	mov	r0, sl
 8016ec4:	f000 ff40 	bl	8017d48 <_free_r>
 8016ec8:	e7c7      	b.n	8016e5a <__ssputs_r+0x46>
	...

08016ecc <_svfiprintf_r>:
 8016ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ed0:	4698      	mov	r8, r3
 8016ed2:	898b      	ldrh	r3, [r1, #12]
 8016ed4:	061b      	lsls	r3, r3, #24
 8016ed6:	b09d      	sub	sp, #116	; 0x74
 8016ed8:	4607      	mov	r7, r0
 8016eda:	460d      	mov	r5, r1
 8016edc:	4614      	mov	r4, r2
 8016ede:	d50e      	bpl.n	8016efe <_svfiprintf_r+0x32>
 8016ee0:	690b      	ldr	r3, [r1, #16]
 8016ee2:	b963      	cbnz	r3, 8016efe <_svfiprintf_r+0x32>
 8016ee4:	2140      	movs	r1, #64	; 0x40
 8016ee6:	f000 ff9b 	bl	8017e20 <_malloc_r>
 8016eea:	6028      	str	r0, [r5, #0]
 8016eec:	6128      	str	r0, [r5, #16]
 8016eee:	b920      	cbnz	r0, 8016efa <_svfiprintf_r+0x2e>
 8016ef0:	230c      	movs	r3, #12
 8016ef2:	603b      	str	r3, [r7, #0]
 8016ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8016ef8:	e0d1      	b.n	801709e <_svfiprintf_r+0x1d2>
 8016efa:	2340      	movs	r3, #64	; 0x40
 8016efc:	616b      	str	r3, [r5, #20]
 8016efe:	2300      	movs	r3, #0
 8016f00:	9309      	str	r3, [sp, #36]	; 0x24
 8016f02:	2320      	movs	r3, #32
 8016f04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016f08:	f8cd 800c 	str.w	r8, [sp, #12]
 8016f0c:	2330      	movs	r3, #48	; 0x30
 8016f0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80170b8 <_svfiprintf_r+0x1ec>
 8016f12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016f16:	f04f 0901 	mov.w	r9, #1
 8016f1a:	4623      	mov	r3, r4
 8016f1c:	469a      	mov	sl, r3
 8016f1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016f22:	b10a      	cbz	r2, 8016f28 <_svfiprintf_r+0x5c>
 8016f24:	2a25      	cmp	r2, #37	; 0x25
 8016f26:	d1f9      	bne.n	8016f1c <_svfiprintf_r+0x50>
 8016f28:	ebba 0b04 	subs.w	fp, sl, r4
 8016f2c:	d00b      	beq.n	8016f46 <_svfiprintf_r+0x7a>
 8016f2e:	465b      	mov	r3, fp
 8016f30:	4622      	mov	r2, r4
 8016f32:	4629      	mov	r1, r5
 8016f34:	4638      	mov	r0, r7
 8016f36:	f7ff ff6d 	bl	8016e14 <__ssputs_r>
 8016f3a:	3001      	adds	r0, #1
 8016f3c:	f000 80aa 	beq.w	8017094 <_svfiprintf_r+0x1c8>
 8016f40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016f42:	445a      	add	r2, fp
 8016f44:	9209      	str	r2, [sp, #36]	; 0x24
 8016f46:	f89a 3000 	ldrb.w	r3, [sl]
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	f000 80a2 	beq.w	8017094 <_svfiprintf_r+0x1c8>
 8016f50:	2300      	movs	r3, #0
 8016f52:	f04f 32ff 	mov.w	r2, #4294967295
 8016f56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016f5a:	f10a 0a01 	add.w	sl, sl, #1
 8016f5e:	9304      	str	r3, [sp, #16]
 8016f60:	9307      	str	r3, [sp, #28]
 8016f62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016f66:	931a      	str	r3, [sp, #104]	; 0x68
 8016f68:	4654      	mov	r4, sl
 8016f6a:	2205      	movs	r2, #5
 8016f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016f70:	4851      	ldr	r0, [pc, #324]	; (80170b8 <_svfiprintf_r+0x1ec>)
 8016f72:	f7e9 f9e5 	bl	8000340 <memchr>
 8016f76:	9a04      	ldr	r2, [sp, #16]
 8016f78:	b9d8      	cbnz	r0, 8016fb2 <_svfiprintf_r+0xe6>
 8016f7a:	06d0      	lsls	r0, r2, #27
 8016f7c:	bf44      	itt	mi
 8016f7e:	2320      	movmi	r3, #32
 8016f80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016f84:	0711      	lsls	r1, r2, #28
 8016f86:	bf44      	itt	mi
 8016f88:	232b      	movmi	r3, #43	; 0x2b
 8016f8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016f8e:	f89a 3000 	ldrb.w	r3, [sl]
 8016f92:	2b2a      	cmp	r3, #42	; 0x2a
 8016f94:	d015      	beq.n	8016fc2 <_svfiprintf_r+0xf6>
 8016f96:	9a07      	ldr	r2, [sp, #28]
 8016f98:	4654      	mov	r4, sl
 8016f9a:	2000      	movs	r0, #0
 8016f9c:	f04f 0c0a 	mov.w	ip, #10
 8016fa0:	4621      	mov	r1, r4
 8016fa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016fa6:	3b30      	subs	r3, #48	; 0x30
 8016fa8:	2b09      	cmp	r3, #9
 8016faa:	d94e      	bls.n	801704a <_svfiprintf_r+0x17e>
 8016fac:	b1b0      	cbz	r0, 8016fdc <_svfiprintf_r+0x110>
 8016fae:	9207      	str	r2, [sp, #28]
 8016fb0:	e014      	b.n	8016fdc <_svfiprintf_r+0x110>
 8016fb2:	eba0 0308 	sub.w	r3, r0, r8
 8016fb6:	fa09 f303 	lsl.w	r3, r9, r3
 8016fba:	4313      	orrs	r3, r2
 8016fbc:	9304      	str	r3, [sp, #16]
 8016fbe:	46a2      	mov	sl, r4
 8016fc0:	e7d2      	b.n	8016f68 <_svfiprintf_r+0x9c>
 8016fc2:	9b03      	ldr	r3, [sp, #12]
 8016fc4:	1d19      	adds	r1, r3, #4
 8016fc6:	681b      	ldr	r3, [r3, #0]
 8016fc8:	9103      	str	r1, [sp, #12]
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	bfbb      	ittet	lt
 8016fce:	425b      	neglt	r3, r3
 8016fd0:	f042 0202 	orrlt.w	r2, r2, #2
 8016fd4:	9307      	strge	r3, [sp, #28]
 8016fd6:	9307      	strlt	r3, [sp, #28]
 8016fd8:	bfb8      	it	lt
 8016fda:	9204      	strlt	r2, [sp, #16]
 8016fdc:	7823      	ldrb	r3, [r4, #0]
 8016fde:	2b2e      	cmp	r3, #46	; 0x2e
 8016fe0:	d10c      	bne.n	8016ffc <_svfiprintf_r+0x130>
 8016fe2:	7863      	ldrb	r3, [r4, #1]
 8016fe4:	2b2a      	cmp	r3, #42	; 0x2a
 8016fe6:	d135      	bne.n	8017054 <_svfiprintf_r+0x188>
 8016fe8:	9b03      	ldr	r3, [sp, #12]
 8016fea:	1d1a      	adds	r2, r3, #4
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	9203      	str	r2, [sp, #12]
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	bfb8      	it	lt
 8016ff4:	f04f 33ff 	movlt.w	r3, #4294967295
 8016ff8:	3402      	adds	r4, #2
 8016ffa:	9305      	str	r3, [sp, #20]
 8016ffc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80170c8 <_svfiprintf_r+0x1fc>
 8017000:	7821      	ldrb	r1, [r4, #0]
 8017002:	2203      	movs	r2, #3
 8017004:	4650      	mov	r0, sl
 8017006:	f7e9 f99b 	bl	8000340 <memchr>
 801700a:	b140      	cbz	r0, 801701e <_svfiprintf_r+0x152>
 801700c:	2340      	movs	r3, #64	; 0x40
 801700e:	eba0 000a 	sub.w	r0, r0, sl
 8017012:	fa03 f000 	lsl.w	r0, r3, r0
 8017016:	9b04      	ldr	r3, [sp, #16]
 8017018:	4303      	orrs	r3, r0
 801701a:	3401      	adds	r4, #1
 801701c:	9304      	str	r3, [sp, #16]
 801701e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017022:	4826      	ldr	r0, [pc, #152]	; (80170bc <_svfiprintf_r+0x1f0>)
 8017024:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017028:	2206      	movs	r2, #6
 801702a:	f7e9 f989 	bl	8000340 <memchr>
 801702e:	2800      	cmp	r0, #0
 8017030:	d038      	beq.n	80170a4 <_svfiprintf_r+0x1d8>
 8017032:	4b23      	ldr	r3, [pc, #140]	; (80170c0 <_svfiprintf_r+0x1f4>)
 8017034:	bb1b      	cbnz	r3, 801707e <_svfiprintf_r+0x1b2>
 8017036:	9b03      	ldr	r3, [sp, #12]
 8017038:	3307      	adds	r3, #7
 801703a:	f023 0307 	bic.w	r3, r3, #7
 801703e:	3308      	adds	r3, #8
 8017040:	9303      	str	r3, [sp, #12]
 8017042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017044:	4433      	add	r3, r6
 8017046:	9309      	str	r3, [sp, #36]	; 0x24
 8017048:	e767      	b.n	8016f1a <_svfiprintf_r+0x4e>
 801704a:	fb0c 3202 	mla	r2, ip, r2, r3
 801704e:	460c      	mov	r4, r1
 8017050:	2001      	movs	r0, #1
 8017052:	e7a5      	b.n	8016fa0 <_svfiprintf_r+0xd4>
 8017054:	2300      	movs	r3, #0
 8017056:	3401      	adds	r4, #1
 8017058:	9305      	str	r3, [sp, #20]
 801705a:	4619      	mov	r1, r3
 801705c:	f04f 0c0a 	mov.w	ip, #10
 8017060:	4620      	mov	r0, r4
 8017062:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017066:	3a30      	subs	r2, #48	; 0x30
 8017068:	2a09      	cmp	r2, #9
 801706a:	d903      	bls.n	8017074 <_svfiprintf_r+0x1a8>
 801706c:	2b00      	cmp	r3, #0
 801706e:	d0c5      	beq.n	8016ffc <_svfiprintf_r+0x130>
 8017070:	9105      	str	r1, [sp, #20]
 8017072:	e7c3      	b.n	8016ffc <_svfiprintf_r+0x130>
 8017074:	fb0c 2101 	mla	r1, ip, r1, r2
 8017078:	4604      	mov	r4, r0
 801707a:	2301      	movs	r3, #1
 801707c:	e7f0      	b.n	8017060 <_svfiprintf_r+0x194>
 801707e:	ab03      	add	r3, sp, #12
 8017080:	9300      	str	r3, [sp, #0]
 8017082:	462a      	mov	r2, r5
 8017084:	4b0f      	ldr	r3, [pc, #60]	; (80170c4 <_svfiprintf_r+0x1f8>)
 8017086:	a904      	add	r1, sp, #16
 8017088:	4638      	mov	r0, r7
 801708a:	f3af 8000 	nop.w
 801708e:	1c42      	adds	r2, r0, #1
 8017090:	4606      	mov	r6, r0
 8017092:	d1d6      	bne.n	8017042 <_svfiprintf_r+0x176>
 8017094:	89ab      	ldrh	r3, [r5, #12]
 8017096:	065b      	lsls	r3, r3, #25
 8017098:	f53f af2c 	bmi.w	8016ef4 <_svfiprintf_r+0x28>
 801709c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801709e:	b01d      	add	sp, #116	; 0x74
 80170a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170a4:	ab03      	add	r3, sp, #12
 80170a6:	9300      	str	r3, [sp, #0]
 80170a8:	462a      	mov	r2, r5
 80170aa:	4b06      	ldr	r3, [pc, #24]	; (80170c4 <_svfiprintf_r+0x1f8>)
 80170ac:	a904      	add	r1, sp, #16
 80170ae:	4638      	mov	r0, r7
 80170b0:	f000 fa4c 	bl	801754c <_printf_i>
 80170b4:	e7eb      	b.n	801708e <_svfiprintf_r+0x1c2>
 80170b6:	bf00      	nop
 80170b8:	0801820c 	.word	0x0801820c
 80170bc:	08018216 	.word	0x08018216
 80170c0:	00000000 	.word	0x00000000
 80170c4:	08016e15 	.word	0x08016e15
 80170c8:	08018212 	.word	0x08018212

080170cc <_sungetc_r>:
 80170cc:	b538      	push	{r3, r4, r5, lr}
 80170ce:	1c4b      	adds	r3, r1, #1
 80170d0:	4614      	mov	r4, r2
 80170d2:	d103      	bne.n	80170dc <_sungetc_r+0x10>
 80170d4:	f04f 35ff 	mov.w	r5, #4294967295
 80170d8:	4628      	mov	r0, r5
 80170da:	bd38      	pop	{r3, r4, r5, pc}
 80170dc:	8993      	ldrh	r3, [r2, #12]
 80170de:	f023 0320 	bic.w	r3, r3, #32
 80170e2:	8193      	strh	r3, [r2, #12]
 80170e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80170e6:	6852      	ldr	r2, [r2, #4]
 80170e8:	b2cd      	uxtb	r5, r1
 80170ea:	b18b      	cbz	r3, 8017110 <_sungetc_r+0x44>
 80170ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80170ee:	4293      	cmp	r3, r2
 80170f0:	dd08      	ble.n	8017104 <_sungetc_r+0x38>
 80170f2:	6823      	ldr	r3, [r4, #0]
 80170f4:	1e5a      	subs	r2, r3, #1
 80170f6:	6022      	str	r2, [r4, #0]
 80170f8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80170fc:	6863      	ldr	r3, [r4, #4]
 80170fe:	3301      	adds	r3, #1
 8017100:	6063      	str	r3, [r4, #4]
 8017102:	e7e9      	b.n	80170d8 <_sungetc_r+0xc>
 8017104:	4621      	mov	r1, r4
 8017106:	f000 fdc9 	bl	8017c9c <__submore>
 801710a:	2800      	cmp	r0, #0
 801710c:	d0f1      	beq.n	80170f2 <_sungetc_r+0x26>
 801710e:	e7e1      	b.n	80170d4 <_sungetc_r+0x8>
 8017110:	6921      	ldr	r1, [r4, #16]
 8017112:	6823      	ldr	r3, [r4, #0]
 8017114:	b151      	cbz	r1, 801712c <_sungetc_r+0x60>
 8017116:	4299      	cmp	r1, r3
 8017118:	d208      	bcs.n	801712c <_sungetc_r+0x60>
 801711a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801711e:	42a9      	cmp	r1, r5
 8017120:	d104      	bne.n	801712c <_sungetc_r+0x60>
 8017122:	3b01      	subs	r3, #1
 8017124:	3201      	adds	r2, #1
 8017126:	6023      	str	r3, [r4, #0]
 8017128:	6062      	str	r2, [r4, #4]
 801712a:	e7d5      	b.n	80170d8 <_sungetc_r+0xc>
 801712c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8017130:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017134:	6363      	str	r3, [r4, #52]	; 0x34
 8017136:	2303      	movs	r3, #3
 8017138:	63a3      	str	r3, [r4, #56]	; 0x38
 801713a:	4623      	mov	r3, r4
 801713c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8017140:	6023      	str	r3, [r4, #0]
 8017142:	2301      	movs	r3, #1
 8017144:	e7dc      	b.n	8017100 <_sungetc_r+0x34>

08017146 <__ssrefill_r>:
 8017146:	b510      	push	{r4, lr}
 8017148:	460c      	mov	r4, r1
 801714a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801714c:	b169      	cbz	r1, 801716a <__ssrefill_r+0x24>
 801714e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017152:	4299      	cmp	r1, r3
 8017154:	d001      	beq.n	801715a <__ssrefill_r+0x14>
 8017156:	f000 fdf7 	bl	8017d48 <_free_r>
 801715a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801715c:	6063      	str	r3, [r4, #4]
 801715e:	2000      	movs	r0, #0
 8017160:	6360      	str	r0, [r4, #52]	; 0x34
 8017162:	b113      	cbz	r3, 801716a <__ssrefill_r+0x24>
 8017164:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017166:	6023      	str	r3, [r4, #0]
 8017168:	bd10      	pop	{r4, pc}
 801716a:	6923      	ldr	r3, [r4, #16]
 801716c:	6023      	str	r3, [r4, #0]
 801716e:	2300      	movs	r3, #0
 8017170:	6063      	str	r3, [r4, #4]
 8017172:	89a3      	ldrh	r3, [r4, #12]
 8017174:	f043 0320 	orr.w	r3, r3, #32
 8017178:	81a3      	strh	r3, [r4, #12]
 801717a:	f04f 30ff 	mov.w	r0, #4294967295
 801717e:	e7f3      	b.n	8017168 <__ssrefill_r+0x22>

08017180 <__ssvfiscanf_r>:
 8017180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017184:	460c      	mov	r4, r1
 8017186:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801718a:	2100      	movs	r1, #0
 801718c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8017190:	49a6      	ldr	r1, [pc, #664]	; (801742c <__ssvfiscanf_r+0x2ac>)
 8017192:	91a0      	str	r1, [sp, #640]	; 0x280
 8017194:	f10d 0804 	add.w	r8, sp, #4
 8017198:	49a5      	ldr	r1, [pc, #660]	; (8017430 <__ssvfiscanf_r+0x2b0>)
 801719a:	4fa6      	ldr	r7, [pc, #664]	; (8017434 <__ssvfiscanf_r+0x2b4>)
 801719c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8017438 <__ssvfiscanf_r+0x2b8>
 80171a0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80171a4:	4606      	mov	r6, r0
 80171a6:	91a1      	str	r1, [sp, #644]	; 0x284
 80171a8:	9300      	str	r3, [sp, #0]
 80171aa:	7813      	ldrb	r3, [r2, #0]
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	f000 815a 	beq.w	8017466 <__ssvfiscanf_r+0x2e6>
 80171b2:	5dd9      	ldrb	r1, [r3, r7]
 80171b4:	f011 0108 	ands.w	r1, r1, #8
 80171b8:	f102 0501 	add.w	r5, r2, #1
 80171bc:	d019      	beq.n	80171f2 <__ssvfiscanf_r+0x72>
 80171be:	6863      	ldr	r3, [r4, #4]
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	dd0f      	ble.n	80171e4 <__ssvfiscanf_r+0x64>
 80171c4:	6823      	ldr	r3, [r4, #0]
 80171c6:	781a      	ldrb	r2, [r3, #0]
 80171c8:	5cba      	ldrb	r2, [r7, r2]
 80171ca:	0712      	lsls	r2, r2, #28
 80171cc:	d401      	bmi.n	80171d2 <__ssvfiscanf_r+0x52>
 80171ce:	462a      	mov	r2, r5
 80171d0:	e7eb      	b.n	80171aa <__ssvfiscanf_r+0x2a>
 80171d2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80171d4:	3201      	adds	r2, #1
 80171d6:	9245      	str	r2, [sp, #276]	; 0x114
 80171d8:	6862      	ldr	r2, [r4, #4]
 80171da:	3301      	adds	r3, #1
 80171dc:	3a01      	subs	r2, #1
 80171de:	6062      	str	r2, [r4, #4]
 80171e0:	6023      	str	r3, [r4, #0]
 80171e2:	e7ec      	b.n	80171be <__ssvfiscanf_r+0x3e>
 80171e4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80171e6:	4621      	mov	r1, r4
 80171e8:	4630      	mov	r0, r6
 80171ea:	4798      	blx	r3
 80171ec:	2800      	cmp	r0, #0
 80171ee:	d0e9      	beq.n	80171c4 <__ssvfiscanf_r+0x44>
 80171f0:	e7ed      	b.n	80171ce <__ssvfiscanf_r+0x4e>
 80171f2:	2b25      	cmp	r3, #37	; 0x25
 80171f4:	d012      	beq.n	801721c <__ssvfiscanf_r+0x9c>
 80171f6:	469a      	mov	sl, r3
 80171f8:	6863      	ldr	r3, [r4, #4]
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	f340 8091 	ble.w	8017322 <__ssvfiscanf_r+0x1a2>
 8017200:	6822      	ldr	r2, [r4, #0]
 8017202:	7813      	ldrb	r3, [r2, #0]
 8017204:	4553      	cmp	r3, sl
 8017206:	f040 812e 	bne.w	8017466 <__ssvfiscanf_r+0x2e6>
 801720a:	6863      	ldr	r3, [r4, #4]
 801720c:	3b01      	subs	r3, #1
 801720e:	6063      	str	r3, [r4, #4]
 8017210:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8017212:	3201      	adds	r2, #1
 8017214:	3301      	adds	r3, #1
 8017216:	6022      	str	r2, [r4, #0]
 8017218:	9345      	str	r3, [sp, #276]	; 0x114
 801721a:	e7d8      	b.n	80171ce <__ssvfiscanf_r+0x4e>
 801721c:	9141      	str	r1, [sp, #260]	; 0x104
 801721e:	9143      	str	r1, [sp, #268]	; 0x10c
 8017220:	7853      	ldrb	r3, [r2, #1]
 8017222:	2b2a      	cmp	r3, #42	; 0x2a
 8017224:	bf02      	ittt	eq
 8017226:	2310      	moveq	r3, #16
 8017228:	1c95      	addeq	r5, r2, #2
 801722a:	9341      	streq	r3, [sp, #260]	; 0x104
 801722c:	220a      	movs	r2, #10
 801722e:	46aa      	mov	sl, r5
 8017230:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8017234:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8017238:	2b09      	cmp	r3, #9
 801723a:	d91d      	bls.n	8017278 <__ssvfiscanf_r+0xf8>
 801723c:	487e      	ldr	r0, [pc, #504]	; (8017438 <__ssvfiscanf_r+0x2b8>)
 801723e:	2203      	movs	r2, #3
 8017240:	f7e9 f87e 	bl	8000340 <memchr>
 8017244:	b140      	cbz	r0, 8017258 <__ssvfiscanf_r+0xd8>
 8017246:	2301      	movs	r3, #1
 8017248:	eba0 0009 	sub.w	r0, r0, r9
 801724c:	fa03 f000 	lsl.w	r0, r3, r0
 8017250:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017252:	4318      	orrs	r0, r3
 8017254:	9041      	str	r0, [sp, #260]	; 0x104
 8017256:	4655      	mov	r5, sl
 8017258:	f815 3b01 	ldrb.w	r3, [r5], #1
 801725c:	2b78      	cmp	r3, #120	; 0x78
 801725e:	d806      	bhi.n	801726e <__ssvfiscanf_r+0xee>
 8017260:	2b57      	cmp	r3, #87	; 0x57
 8017262:	d810      	bhi.n	8017286 <__ssvfiscanf_r+0x106>
 8017264:	2b25      	cmp	r3, #37	; 0x25
 8017266:	d0c6      	beq.n	80171f6 <__ssvfiscanf_r+0x76>
 8017268:	d856      	bhi.n	8017318 <__ssvfiscanf_r+0x198>
 801726a:	2b00      	cmp	r3, #0
 801726c:	d064      	beq.n	8017338 <__ssvfiscanf_r+0x1b8>
 801726e:	2303      	movs	r3, #3
 8017270:	9347      	str	r3, [sp, #284]	; 0x11c
 8017272:	230a      	movs	r3, #10
 8017274:	9342      	str	r3, [sp, #264]	; 0x108
 8017276:	e071      	b.n	801735c <__ssvfiscanf_r+0x1dc>
 8017278:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801727a:	fb02 1103 	mla	r1, r2, r3, r1
 801727e:	3930      	subs	r1, #48	; 0x30
 8017280:	9143      	str	r1, [sp, #268]	; 0x10c
 8017282:	4655      	mov	r5, sl
 8017284:	e7d3      	b.n	801722e <__ssvfiscanf_r+0xae>
 8017286:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801728a:	2a20      	cmp	r2, #32
 801728c:	d8ef      	bhi.n	801726e <__ssvfiscanf_r+0xee>
 801728e:	a101      	add	r1, pc, #4	; (adr r1, 8017294 <__ssvfiscanf_r+0x114>)
 8017290:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017294:	08017347 	.word	0x08017347
 8017298:	0801726f 	.word	0x0801726f
 801729c:	0801726f 	.word	0x0801726f
 80172a0:	080173a5 	.word	0x080173a5
 80172a4:	0801726f 	.word	0x0801726f
 80172a8:	0801726f 	.word	0x0801726f
 80172ac:	0801726f 	.word	0x0801726f
 80172b0:	0801726f 	.word	0x0801726f
 80172b4:	0801726f 	.word	0x0801726f
 80172b8:	0801726f 	.word	0x0801726f
 80172bc:	0801726f 	.word	0x0801726f
 80172c0:	080173bb 	.word	0x080173bb
 80172c4:	08017391 	.word	0x08017391
 80172c8:	0801731f 	.word	0x0801731f
 80172cc:	0801731f 	.word	0x0801731f
 80172d0:	0801731f 	.word	0x0801731f
 80172d4:	0801726f 	.word	0x0801726f
 80172d8:	08017395 	.word	0x08017395
 80172dc:	0801726f 	.word	0x0801726f
 80172e0:	0801726f 	.word	0x0801726f
 80172e4:	0801726f 	.word	0x0801726f
 80172e8:	0801726f 	.word	0x0801726f
 80172ec:	080173cb 	.word	0x080173cb
 80172f0:	0801739d 	.word	0x0801739d
 80172f4:	0801733f 	.word	0x0801733f
 80172f8:	0801726f 	.word	0x0801726f
 80172fc:	0801726f 	.word	0x0801726f
 8017300:	080173c7 	.word	0x080173c7
 8017304:	0801726f 	.word	0x0801726f
 8017308:	08017391 	.word	0x08017391
 801730c:	0801726f 	.word	0x0801726f
 8017310:	0801726f 	.word	0x0801726f
 8017314:	08017347 	.word	0x08017347
 8017318:	3b45      	subs	r3, #69	; 0x45
 801731a:	2b02      	cmp	r3, #2
 801731c:	d8a7      	bhi.n	801726e <__ssvfiscanf_r+0xee>
 801731e:	2305      	movs	r3, #5
 8017320:	e01b      	b.n	801735a <__ssvfiscanf_r+0x1da>
 8017322:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017324:	4621      	mov	r1, r4
 8017326:	4630      	mov	r0, r6
 8017328:	4798      	blx	r3
 801732a:	2800      	cmp	r0, #0
 801732c:	f43f af68 	beq.w	8017200 <__ssvfiscanf_r+0x80>
 8017330:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017332:	2800      	cmp	r0, #0
 8017334:	f040 808d 	bne.w	8017452 <__ssvfiscanf_r+0x2d2>
 8017338:	f04f 30ff 	mov.w	r0, #4294967295
 801733c:	e08f      	b.n	801745e <__ssvfiscanf_r+0x2de>
 801733e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017340:	f042 0220 	orr.w	r2, r2, #32
 8017344:	9241      	str	r2, [sp, #260]	; 0x104
 8017346:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017348:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801734c:	9241      	str	r2, [sp, #260]	; 0x104
 801734e:	2210      	movs	r2, #16
 8017350:	2b6f      	cmp	r3, #111	; 0x6f
 8017352:	9242      	str	r2, [sp, #264]	; 0x108
 8017354:	bf34      	ite	cc
 8017356:	2303      	movcc	r3, #3
 8017358:	2304      	movcs	r3, #4
 801735a:	9347      	str	r3, [sp, #284]	; 0x11c
 801735c:	6863      	ldr	r3, [r4, #4]
 801735e:	2b00      	cmp	r3, #0
 8017360:	dd42      	ble.n	80173e8 <__ssvfiscanf_r+0x268>
 8017362:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017364:	0659      	lsls	r1, r3, #25
 8017366:	d404      	bmi.n	8017372 <__ssvfiscanf_r+0x1f2>
 8017368:	6823      	ldr	r3, [r4, #0]
 801736a:	781a      	ldrb	r2, [r3, #0]
 801736c:	5cba      	ldrb	r2, [r7, r2]
 801736e:	0712      	lsls	r2, r2, #28
 8017370:	d441      	bmi.n	80173f6 <__ssvfiscanf_r+0x276>
 8017372:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8017374:	2b02      	cmp	r3, #2
 8017376:	dc50      	bgt.n	801741a <__ssvfiscanf_r+0x29a>
 8017378:	466b      	mov	r3, sp
 801737a:	4622      	mov	r2, r4
 801737c:	a941      	add	r1, sp, #260	; 0x104
 801737e:	4630      	mov	r0, r6
 8017380:	f000 fa0a 	bl	8017798 <_scanf_chars>
 8017384:	2801      	cmp	r0, #1
 8017386:	d06e      	beq.n	8017466 <__ssvfiscanf_r+0x2e6>
 8017388:	2802      	cmp	r0, #2
 801738a:	f47f af20 	bne.w	80171ce <__ssvfiscanf_r+0x4e>
 801738e:	e7cf      	b.n	8017330 <__ssvfiscanf_r+0x1b0>
 8017390:	220a      	movs	r2, #10
 8017392:	e7dd      	b.n	8017350 <__ssvfiscanf_r+0x1d0>
 8017394:	2300      	movs	r3, #0
 8017396:	9342      	str	r3, [sp, #264]	; 0x108
 8017398:	2303      	movs	r3, #3
 801739a:	e7de      	b.n	801735a <__ssvfiscanf_r+0x1da>
 801739c:	2308      	movs	r3, #8
 801739e:	9342      	str	r3, [sp, #264]	; 0x108
 80173a0:	2304      	movs	r3, #4
 80173a2:	e7da      	b.n	801735a <__ssvfiscanf_r+0x1da>
 80173a4:	4629      	mov	r1, r5
 80173a6:	4640      	mov	r0, r8
 80173a8:	f000 fb48 	bl	8017a3c <__sccl>
 80173ac:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80173ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80173b2:	9341      	str	r3, [sp, #260]	; 0x104
 80173b4:	4605      	mov	r5, r0
 80173b6:	2301      	movs	r3, #1
 80173b8:	e7cf      	b.n	801735a <__ssvfiscanf_r+0x1da>
 80173ba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80173bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80173c0:	9341      	str	r3, [sp, #260]	; 0x104
 80173c2:	2300      	movs	r3, #0
 80173c4:	e7c9      	b.n	801735a <__ssvfiscanf_r+0x1da>
 80173c6:	2302      	movs	r3, #2
 80173c8:	e7c7      	b.n	801735a <__ssvfiscanf_r+0x1da>
 80173ca:	9841      	ldr	r0, [sp, #260]	; 0x104
 80173cc:	06c3      	lsls	r3, r0, #27
 80173ce:	f53f aefe 	bmi.w	80171ce <__ssvfiscanf_r+0x4e>
 80173d2:	9b00      	ldr	r3, [sp, #0]
 80173d4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80173d6:	1d19      	adds	r1, r3, #4
 80173d8:	9100      	str	r1, [sp, #0]
 80173da:	681b      	ldr	r3, [r3, #0]
 80173dc:	f010 0f01 	tst.w	r0, #1
 80173e0:	bf14      	ite	ne
 80173e2:	801a      	strhne	r2, [r3, #0]
 80173e4:	601a      	streq	r2, [r3, #0]
 80173e6:	e6f2      	b.n	80171ce <__ssvfiscanf_r+0x4e>
 80173e8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80173ea:	4621      	mov	r1, r4
 80173ec:	4630      	mov	r0, r6
 80173ee:	4798      	blx	r3
 80173f0:	2800      	cmp	r0, #0
 80173f2:	d0b6      	beq.n	8017362 <__ssvfiscanf_r+0x1e2>
 80173f4:	e79c      	b.n	8017330 <__ssvfiscanf_r+0x1b0>
 80173f6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80173f8:	3201      	adds	r2, #1
 80173fa:	9245      	str	r2, [sp, #276]	; 0x114
 80173fc:	6862      	ldr	r2, [r4, #4]
 80173fe:	3a01      	subs	r2, #1
 8017400:	2a00      	cmp	r2, #0
 8017402:	6062      	str	r2, [r4, #4]
 8017404:	dd02      	ble.n	801740c <__ssvfiscanf_r+0x28c>
 8017406:	3301      	adds	r3, #1
 8017408:	6023      	str	r3, [r4, #0]
 801740a:	e7ad      	b.n	8017368 <__ssvfiscanf_r+0x1e8>
 801740c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801740e:	4621      	mov	r1, r4
 8017410:	4630      	mov	r0, r6
 8017412:	4798      	blx	r3
 8017414:	2800      	cmp	r0, #0
 8017416:	d0a7      	beq.n	8017368 <__ssvfiscanf_r+0x1e8>
 8017418:	e78a      	b.n	8017330 <__ssvfiscanf_r+0x1b0>
 801741a:	2b04      	cmp	r3, #4
 801741c:	dc0e      	bgt.n	801743c <__ssvfiscanf_r+0x2bc>
 801741e:	466b      	mov	r3, sp
 8017420:	4622      	mov	r2, r4
 8017422:	a941      	add	r1, sp, #260	; 0x104
 8017424:	4630      	mov	r0, r6
 8017426:	f000 fa11 	bl	801784c <_scanf_i>
 801742a:	e7ab      	b.n	8017384 <__ssvfiscanf_r+0x204>
 801742c:	080170cd 	.word	0x080170cd
 8017430:	08017147 	.word	0x08017147
 8017434:	0801825b 	.word	0x0801825b
 8017438:	08018212 	.word	0x08018212
 801743c:	4b0b      	ldr	r3, [pc, #44]	; (801746c <__ssvfiscanf_r+0x2ec>)
 801743e:	2b00      	cmp	r3, #0
 8017440:	f43f aec5 	beq.w	80171ce <__ssvfiscanf_r+0x4e>
 8017444:	466b      	mov	r3, sp
 8017446:	4622      	mov	r2, r4
 8017448:	a941      	add	r1, sp, #260	; 0x104
 801744a:	4630      	mov	r0, r6
 801744c:	f3af 8000 	nop.w
 8017450:	e798      	b.n	8017384 <__ssvfiscanf_r+0x204>
 8017452:	89a3      	ldrh	r3, [r4, #12]
 8017454:	f013 0f40 	tst.w	r3, #64	; 0x40
 8017458:	bf18      	it	ne
 801745a:	f04f 30ff 	movne.w	r0, #4294967295
 801745e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8017462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017466:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017468:	e7f9      	b.n	801745e <__ssvfiscanf_r+0x2de>
 801746a:	bf00      	nop
 801746c:	00000000 	.word	0x00000000

08017470 <_printf_common>:
 8017470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017474:	4616      	mov	r6, r2
 8017476:	4699      	mov	r9, r3
 8017478:	688a      	ldr	r2, [r1, #8]
 801747a:	690b      	ldr	r3, [r1, #16]
 801747c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017480:	4293      	cmp	r3, r2
 8017482:	bfb8      	it	lt
 8017484:	4613      	movlt	r3, r2
 8017486:	6033      	str	r3, [r6, #0]
 8017488:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801748c:	4607      	mov	r7, r0
 801748e:	460c      	mov	r4, r1
 8017490:	b10a      	cbz	r2, 8017496 <_printf_common+0x26>
 8017492:	3301      	adds	r3, #1
 8017494:	6033      	str	r3, [r6, #0]
 8017496:	6823      	ldr	r3, [r4, #0]
 8017498:	0699      	lsls	r1, r3, #26
 801749a:	bf42      	ittt	mi
 801749c:	6833      	ldrmi	r3, [r6, #0]
 801749e:	3302      	addmi	r3, #2
 80174a0:	6033      	strmi	r3, [r6, #0]
 80174a2:	6825      	ldr	r5, [r4, #0]
 80174a4:	f015 0506 	ands.w	r5, r5, #6
 80174a8:	d106      	bne.n	80174b8 <_printf_common+0x48>
 80174aa:	f104 0a19 	add.w	sl, r4, #25
 80174ae:	68e3      	ldr	r3, [r4, #12]
 80174b0:	6832      	ldr	r2, [r6, #0]
 80174b2:	1a9b      	subs	r3, r3, r2
 80174b4:	42ab      	cmp	r3, r5
 80174b6:	dc26      	bgt.n	8017506 <_printf_common+0x96>
 80174b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80174bc:	1e13      	subs	r3, r2, #0
 80174be:	6822      	ldr	r2, [r4, #0]
 80174c0:	bf18      	it	ne
 80174c2:	2301      	movne	r3, #1
 80174c4:	0692      	lsls	r2, r2, #26
 80174c6:	d42b      	bmi.n	8017520 <_printf_common+0xb0>
 80174c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80174cc:	4649      	mov	r1, r9
 80174ce:	4638      	mov	r0, r7
 80174d0:	47c0      	blx	r8
 80174d2:	3001      	adds	r0, #1
 80174d4:	d01e      	beq.n	8017514 <_printf_common+0xa4>
 80174d6:	6823      	ldr	r3, [r4, #0]
 80174d8:	68e5      	ldr	r5, [r4, #12]
 80174da:	6832      	ldr	r2, [r6, #0]
 80174dc:	f003 0306 	and.w	r3, r3, #6
 80174e0:	2b04      	cmp	r3, #4
 80174e2:	bf08      	it	eq
 80174e4:	1aad      	subeq	r5, r5, r2
 80174e6:	68a3      	ldr	r3, [r4, #8]
 80174e8:	6922      	ldr	r2, [r4, #16]
 80174ea:	bf0c      	ite	eq
 80174ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80174f0:	2500      	movne	r5, #0
 80174f2:	4293      	cmp	r3, r2
 80174f4:	bfc4      	itt	gt
 80174f6:	1a9b      	subgt	r3, r3, r2
 80174f8:	18ed      	addgt	r5, r5, r3
 80174fa:	2600      	movs	r6, #0
 80174fc:	341a      	adds	r4, #26
 80174fe:	42b5      	cmp	r5, r6
 8017500:	d11a      	bne.n	8017538 <_printf_common+0xc8>
 8017502:	2000      	movs	r0, #0
 8017504:	e008      	b.n	8017518 <_printf_common+0xa8>
 8017506:	2301      	movs	r3, #1
 8017508:	4652      	mov	r2, sl
 801750a:	4649      	mov	r1, r9
 801750c:	4638      	mov	r0, r7
 801750e:	47c0      	blx	r8
 8017510:	3001      	adds	r0, #1
 8017512:	d103      	bne.n	801751c <_printf_common+0xac>
 8017514:	f04f 30ff 	mov.w	r0, #4294967295
 8017518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801751c:	3501      	adds	r5, #1
 801751e:	e7c6      	b.n	80174ae <_printf_common+0x3e>
 8017520:	18e1      	adds	r1, r4, r3
 8017522:	1c5a      	adds	r2, r3, #1
 8017524:	2030      	movs	r0, #48	; 0x30
 8017526:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801752a:	4422      	add	r2, r4
 801752c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017530:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017534:	3302      	adds	r3, #2
 8017536:	e7c7      	b.n	80174c8 <_printf_common+0x58>
 8017538:	2301      	movs	r3, #1
 801753a:	4622      	mov	r2, r4
 801753c:	4649      	mov	r1, r9
 801753e:	4638      	mov	r0, r7
 8017540:	47c0      	blx	r8
 8017542:	3001      	adds	r0, #1
 8017544:	d0e6      	beq.n	8017514 <_printf_common+0xa4>
 8017546:	3601      	adds	r6, #1
 8017548:	e7d9      	b.n	80174fe <_printf_common+0x8e>
	...

0801754c <_printf_i>:
 801754c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017550:	7e0f      	ldrb	r7, [r1, #24]
 8017552:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017554:	2f78      	cmp	r7, #120	; 0x78
 8017556:	4691      	mov	r9, r2
 8017558:	4680      	mov	r8, r0
 801755a:	460c      	mov	r4, r1
 801755c:	469a      	mov	sl, r3
 801755e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017562:	d807      	bhi.n	8017574 <_printf_i+0x28>
 8017564:	2f62      	cmp	r7, #98	; 0x62
 8017566:	d80a      	bhi.n	801757e <_printf_i+0x32>
 8017568:	2f00      	cmp	r7, #0
 801756a:	f000 80d8 	beq.w	801771e <_printf_i+0x1d2>
 801756e:	2f58      	cmp	r7, #88	; 0x58
 8017570:	f000 80a3 	beq.w	80176ba <_printf_i+0x16e>
 8017574:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017578:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801757c:	e03a      	b.n	80175f4 <_printf_i+0xa8>
 801757e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017582:	2b15      	cmp	r3, #21
 8017584:	d8f6      	bhi.n	8017574 <_printf_i+0x28>
 8017586:	a101      	add	r1, pc, #4	; (adr r1, 801758c <_printf_i+0x40>)
 8017588:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801758c:	080175e5 	.word	0x080175e5
 8017590:	080175f9 	.word	0x080175f9
 8017594:	08017575 	.word	0x08017575
 8017598:	08017575 	.word	0x08017575
 801759c:	08017575 	.word	0x08017575
 80175a0:	08017575 	.word	0x08017575
 80175a4:	080175f9 	.word	0x080175f9
 80175a8:	08017575 	.word	0x08017575
 80175ac:	08017575 	.word	0x08017575
 80175b0:	08017575 	.word	0x08017575
 80175b4:	08017575 	.word	0x08017575
 80175b8:	08017705 	.word	0x08017705
 80175bc:	08017629 	.word	0x08017629
 80175c0:	080176e7 	.word	0x080176e7
 80175c4:	08017575 	.word	0x08017575
 80175c8:	08017575 	.word	0x08017575
 80175cc:	08017727 	.word	0x08017727
 80175d0:	08017575 	.word	0x08017575
 80175d4:	08017629 	.word	0x08017629
 80175d8:	08017575 	.word	0x08017575
 80175dc:	08017575 	.word	0x08017575
 80175e0:	080176ef 	.word	0x080176ef
 80175e4:	682b      	ldr	r3, [r5, #0]
 80175e6:	1d1a      	adds	r2, r3, #4
 80175e8:	681b      	ldr	r3, [r3, #0]
 80175ea:	602a      	str	r2, [r5, #0]
 80175ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80175f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80175f4:	2301      	movs	r3, #1
 80175f6:	e0a3      	b.n	8017740 <_printf_i+0x1f4>
 80175f8:	6820      	ldr	r0, [r4, #0]
 80175fa:	6829      	ldr	r1, [r5, #0]
 80175fc:	0606      	lsls	r6, r0, #24
 80175fe:	f101 0304 	add.w	r3, r1, #4
 8017602:	d50a      	bpl.n	801761a <_printf_i+0xce>
 8017604:	680e      	ldr	r6, [r1, #0]
 8017606:	602b      	str	r3, [r5, #0]
 8017608:	2e00      	cmp	r6, #0
 801760a:	da03      	bge.n	8017614 <_printf_i+0xc8>
 801760c:	232d      	movs	r3, #45	; 0x2d
 801760e:	4276      	negs	r6, r6
 8017610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017614:	485e      	ldr	r0, [pc, #376]	; (8017790 <_printf_i+0x244>)
 8017616:	230a      	movs	r3, #10
 8017618:	e019      	b.n	801764e <_printf_i+0x102>
 801761a:	680e      	ldr	r6, [r1, #0]
 801761c:	602b      	str	r3, [r5, #0]
 801761e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017622:	bf18      	it	ne
 8017624:	b236      	sxthne	r6, r6
 8017626:	e7ef      	b.n	8017608 <_printf_i+0xbc>
 8017628:	682b      	ldr	r3, [r5, #0]
 801762a:	6820      	ldr	r0, [r4, #0]
 801762c:	1d19      	adds	r1, r3, #4
 801762e:	6029      	str	r1, [r5, #0]
 8017630:	0601      	lsls	r1, r0, #24
 8017632:	d501      	bpl.n	8017638 <_printf_i+0xec>
 8017634:	681e      	ldr	r6, [r3, #0]
 8017636:	e002      	b.n	801763e <_printf_i+0xf2>
 8017638:	0646      	lsls	r6, r0, #25
 801763a:	d5fb      	bpl.n	8017634 <_printf_i+0xe8>
 801763c:	881e      	ldrh	r6, [r3, #0]
 801763e:	4854      	ldr	r0, [pc, #336]	; (8017790 <_printf_i+0x244>)
 8017640:	2f6f      	cmp	r7, #111	; 0x6f
 8017642:	bf0c      	ite	eq
 8017644:	2308      	moveq	r3, #8
 8017646:	230a      	movne	r3, #10
 8017648:	2100      	movs	r1, #0
 801764a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801764e:	6865      	ldr	r5, [r4, #4]
 8017650:	60a5      	str	r5, [r4, #8]
 8017652:	2d00      	cmp	r5, #0
 8017654:	bfa2      	ittt	ge
 8017656:	6821      	ldrge	r1, [r4, #0]
 8017658:	f021 0104 	bicge.w	r1, r1, #4
 801765c:	6021      	strge	r1, [r4, #0]
 801765e:	b90e      	cbnz	r6, 8017664 <_printf_i+0x118>
 8017660:	2d00      	cmp	r5, #0
 8017662:	d04d      	beq.n	8017700 <_printf_i+0x1b4>
 8017664:	4615      	mov	r5, r2
 8017666:	fbb6 f1f3 	udiv	r1, r6, r3
 801766a:	fb03 6711 	mls	r7, r3, r1, r6
 801766e:	5dc7      	ldrb	r7, [r0, r7]
 8017670:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017674:	4637      	mov	r7, r6
 8017676:	42bb      	cmp	r3, r7
 8017678:	460e      	mov	r6, r1
 801767a:	d9f4      	bls.n	8017666 <_printf_i+0x11a>
 801767c:	2b08      	cmp	r3, #8
 801767e:	d10b      	bne.n	8017698 <_printf_i+0x14c>
 8017680:	6823      	ldr	r3, [r4, #0]
 8017682:	07de      	lsls	r6, r3, #31
 8017684:	d508      	bpl.n	8017698 <_printf_i+0x14c>
 8017686:	6923      	ldr	r3, [r4, #16]
 8017688:	6861      	ldr	r1, [r4, #4]
 801768a:	4299      	cmp	r1, r3
 801768c:	bfde      	ittt	le
 801768e:	2330      	movle	r3, #48	; 0x30
 8017690:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017694:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017698:	1b52      	subs	r2, r2, r5
 801769a:	6122      	str	r2, [r4, #16]
 801769c:	f8cd a000 	str.w	sl, [sp]
 80176a0:	464b      	mov	r3, r9
 80176a2:	aa03      	add	r2, sp, #12
 80176a4:	4621      	mov	r1, r4
 80176a6:	4640      	mov	r0, r8
 80176a8:	f7ff fee2 	bl	8017470 <_printf_common>
 80176ac:	3001      	adds	r0, #1
 80176ae:	d14c      	bne.n	801774a <_printf_i+0x1fe>
 80176b0:	f04f 30ff 	mov.w	r0, #4294967295
 80176b4:	b004      	add	sp, #16
 80176b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80176ba:	4835      	ldr	r0, [pc, #212]	; (8017790 <_printf_i+0x244>)
 80176bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80176c0:	6829      	ldr	r1, [r5, #0]
 80176c2:	6823      	ldr	r3, [r4, #0]
 80176c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80176c8:	6029      	str	r1, [r5, #0]
 80176ca:	061d      	lsls	r5, r3, #24
 80176cc:	d514      	bpl.n	80176f8 <_printf_i+0x1ac>
 80176ce:	07df      	lsls	r7, r3, #31
 80176d0:	bf44      	itt	mi
 80176d2:	f043 0320 	orrmi.w	r3, r3, #32
 80176d6:	6023      	strmi	r3, [r4, #0]
 80176d8:	b91e      	cbnz	r6, 80176e2 <_printf_i+0x196>
 80176da:	6823      	ldr	r3, [r4, #0]
 80176dc:	f023 0320 	bic.w	r3, r3, #32
 80176e0:	6023      	str	r3, [r4, #0]
 80176e2:	2310      	movs	r3, #16
 80176e4:	e7b0      	b.n	8017648 <_printf_i+0xfc>
 80176e6:	6823      	ldr	r3, [r4, #0]
 80176e8:	f043 0320 	orr.w	r3, r3, #32
 80176ec:	6023      	str	r3, [r4, #0]
 80176ee:	2378      	movs	r3, #120	; 0x78
 80176f0:	4828      	ldr	r0, [pc, #160]	; (8017794 <_printf_i+0x248>)
 80176f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80176f6:	e7e3      	b.n	80176c0 <_printf_i+0x174>
 80176f8:	0659      	lsls	r1, r3, #25
 80176fa:	bf48      	it	mi
 80176fc:	b2b6      	uxthmi	r6, r6
 80176fe:	e7e6      	b.n	80176ce <_printf_i+0x182>
 8017700:	4615      	mov	r5, r2
 8017702:	e7bb      	b.n	801767c <_printf_i+0x130>
 8017704:	682b      	ldr	r3, [r5, #0]
 8017706:	6826      	ldr	r6, [r4, #0]
 8017708:	6961      	ldr	r1, [r4, #20]
 801770a:	1d18      	adds	r0, r3, #4
 801770c:	6028      	str	r0, [r5, #0]
 801770e:	0635      	lsls	r5, r6, #24
 8017710:	681b      	ldr	r3, [r3, #0]
 8017712:	d501      	bpl.n	8017718 <_printf_i+0x1cc>
 8017714:	6019      	str	r1, [r3, #0]
 8017716:	e002      	b.n	801771e <_printf_i+0x1d2>
 8017718:	0670      	lsls	r0, r6, #25
 801771a:	d5fb      	bpl.n	8017714 <_printf_i+0x1c8>
 801771c:	8019      	strh	r1, [r3, #0]
 801771e:	2300      	movs	r3, #0
 8017720:	6123      	str	r3, [r4, #16]
 8017722:	4615      	mov	r5, r2
 8017724:	e7ba      	b.n	801769c <_printf_i+0x150>
 8017726:	682b      	ldr	r3, [r5, #0]
 8017728:	1d1a      	adds	r2, r3, #4
 801772a:	602a      	str	r2, [r5, #0]
 801772c:	681d      	ldr	r5, [r3, #0]
 801772e:	6862      	ldr	r2, [r4, #4]
 8017730:	2100      	movs	r1, #0
 8017732:	4628      	mov	r0, r5
 8017734:	f7e8 fe04 	bl	8000340 <memchr>
 8017738:	b108      	cbz	r0, 801773e <_printf_i+0x1f2>
 801773a:	1b40      	subs	r0, r0, r5
 801773c:	6060      	str	r0, [r4, #4]
 801773e:	6863      	ldr	r3, [r4, #4]
 8017740:	6123      	str	r3, [r4, #16]
 8017742:	2300      	movs	r3, #0
 8017744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017748:	e7a8      	b.n	801769c <_printf_i+0x150>
 801774a:	6923      	ldr	r3, [r4, #16]
 801774c:	462a      	mov	r2, r5
 801774e:	4649      	mov	r1, r9
 8017750:	4640      	mov	r0, r8
 8017752:	47d0      	blx	sl
 8017754:	3001      	adds	r0, #1
 8017756:	d0ab      	beq.n	80176b0 <_printf_i+0x164>
 8017758:	6823      	ldr	r3, [r4, #0]
 801775a:	079b      	lsls	r3, r3, #30
 801775c:	d413      	bmi.n	8017786 <_printf_i+0x23a>
 801775e:	68e0      	ldr	r0, [r4, #12]
 8017760:	9b03      	ldr	r3, [sp, #12]
 8017762:	4298      	cmp	r0, r3
 8017764:	bfb8      	it	lt
 8017766:	4618      	movlt	r0, r3
 8017768:	e7a4      	b.n	80176b4 <_printf_i+0x168>
 801776a:	2301      	movs	r3, #1
 801776c:	4632      	mov	r2, r6
 801776e:	4649      	mov	r1, r9
 8017770:	4640      	mov	r0, r8
 8017772:	47d0      	blx	sl
 8017774:	3001      	adds	r0, #1
 8017776:	d09b      	beq.n	80176b0 <_printf_i+0x164>
 8017778:	3501      	adds	r5, #1
 801777a:	68e3      	ldr	r3, [r4, #12]
 801777c:	9903      	ldr	r1, [sp, #12]
 801777e:	1a5b      	subs	r3, r3, r1
 8017780:	42ab      	cmp	r3, r5
 8017782:	dcf2      	bgt.n	801776a <_printf_i+0x21e>
 8017784:	e7eb      	b.n	801775e <_printf_i+0x212>
 8017786:	2500      	movs	r5, #0
 8017788:	f104 0619 	add.w	r6, r4, #25
 801778c:	e7f5      	b.n	801777a <_printf_i+0x22e>
 801778e:	bf00      	nop
 8017790:	0801821d 	.word	0x0801821d
 8017794:	0801822e 	.word	0x0801822e

08017798 <_scanf_chars>:
 8017798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801779c:	4615      	mov	r5, r2
 801779e:	688a      	ldr	r2, [r1, #8]
 80177a0:	4680      	mov	r8, r0
 80177a2:	460c      	mov	r4, r1
 80177a4:	b932      	cbnz	r2, 80177b4 <_scanf_chars+0x1c>
 80177a6:	698a      	ldr	r2, [r1, #24]
 80177a8:	2a00      	cmp	r2, #0
 80177aa:	bf0c      	ite	eq
 80177ac:	2201      	moveq	r2, #1
 80177ae:	f04f 32ff 	movne.w	r2, #4294967295
 80177b2:	608a      	str	r2, [r1, #8]
 80177b4:	6822      	ldr	r2, [r4, #0]
 80177b6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8017848 <_scanf_chars+0xb0>
 80177ba:	06d1      	lsls	r1, r2, #27
 80177bc:	bf5f      	itttt	pl
 80177be:	681a      	ldrpl	r2, [r3, #0]
 80177c0:	1d11      	addpl	r1, r2, #4
 80177c2:	6019      	strpl	r1, [r3, #0]
 80177c4:	6816      	ldrpl	r6, [r2, #0]
 80177c6:	2700      	movs	r7, #0
 80177c8:	69a0      	ldr	r0, [r4, #24]
 80177ca:	b188      	cbz	r0, 80177f0 <_scanf_chars+0x58>
 80177cc:	2801      	cmp	r0, #1
 80177ce:	d107      	bne.n	80177e0 <_scanf_chars+0x48>
 80177d0:	682a      	ldr	r2, [r5, #0]
 80177d2:	7811      	ldrb	r1, [r2, #0]
 80177d4:	6962      	ldr	r2, [r4, #20]
 80177d6:	5c52      	ldrb	r2, [r2, r1]
 80177d8:	b952      	cbnz	r2, 80177f0 <_scanf_chars+0x58>
 80177da:	2f00      	cmp	r7, #0
 80177dc:	d031      	beq.n	8017842 <_scanf_chars+0xaa>
 80177de:	e022      	b.n	8017826 <_scanf_chars+0x8e>
 80177e0:	2802      	cmp	r0, #2
 80177e2:	d120      	bne.n	8017826 <_scanf_chars+0x8e>
 80177e4:	682b      	ldr	r3, [r5, #0]
 80177e6:	781b      	ldrb	r3, [r3, #0]
 80177e8:	f813 3009 	ldrb.w	r3, [r3, r9]
 80177ec:	071b      	lsls	r3, r3, #28
 80177ee:	d41a      	bmi.n	8017826 <_scanf_chars+0x8e>
 80177f0:	6823      	ldr	r3, [r4, #0]
 80177f2:	06da      	lsls	r2, r3, #27
 80177f4:	bf5e      	ittt	pl
 80177f6:	682b      	ldrpl	r3, [r5, #0]
 80177f8:	781b      	ldrbpl	r3, [r3, #0]
 80177fa:	f806 3b01 	strbpl.w	r3, [r6], #1
 80177fe:	682a      	ldr	r2, [r5, #0]
 8017800:	686b      	ldr	r3, [r5, #4]
 8017802:	3201      	adds	r2, #1
 8017804:	602a      	str	r2, [r5, #0]
 8017806:	68a2      	ldr	r2, [r4, #8]
 8017808:	3b01      	subs	r3, #1
 801780a:	3a01      	subs	r2, #1
 801780c:	606b      	str	r3, [r5, #4]
 801780e:	3701      	adds	r7, #1
 8017810:	60a2      	str	r2, [r4, #8]
 8017812:	b142      	cbz	r2, 8017826 <_scanf_chars+0x8e>
 8017814:	2b00      	cmp	r3, #0
 8017816:	dcd7      	bgt.n	80177c8 <_scanf_chars+0x30>
 8017818:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801781c:	4629      	mov	r1, r5
 801781e:	4640      	mov	r0, r8
 8017820:	4798      	blx	r3
 8017822:	2800      	cmp	r0, #0
 8017824:	d0d0      	beq.n	80177c8 <_scanf_chars+0x30>
 8017826:	6823      	ldr	r3, [r4, #0]
 8017828:	f013 0310 	ands.w	r3, r3, #16
 801782c:	d105      	bne.n	801783a <_scanf_chars+0xa2>
 801782e:	68e2      	ldr	r2, [r4, #12]
 8017830:	3201      	adds	r2, #1
 8017832:	60e2      	str	r2, [r4, #12]
 8017834:	69a2      	ldr	r2, [r4, #24]
 8017836:	b102      	cbz	r2, 801783a <_scanf_chars+0xa2>
 8017838:	7033      	strb	r3, [r6, #0]
 801783a:	6923      	ldr	r3, [r4, #16]
 801783c:	443b      	add	r3, r7
 801783e:	6123      	str	r3, [r4, #16]
 8017840:	2000      	movs	r0, #0
 8017842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017846:	bf00      	nop
 8017848:	0801825b 	.word	0x0801825b

0801784c <_scanf_i>:
 801784c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017850:	4698      	mov	r8, r3
 8017852:	4b76      	ldr	r3, [pc, #472]	; (8017a2c <_scanf_i+0x1e0>)
 8017854:	460c      	mov	r4, r1
 8017856:	4682      	mov	sl, r0
 8017858:	4616      	mov	r6, r2
 801785a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801785e:	b087      	sub	sp, #28
 8017860:	ab03      	add	r3, sp, #12
 8017862:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017866:	4b72      	ldr	r3, [pc, #456]	; (8017a30 <_scanf_i+0x1e4>)
 8017868:	69a1      	ldr	r1, [r4, #24]
 801786a:	4a72      	ldr	r2, [pc, #456]	; (8017a34 <_scanf_i+0x1e8>)
 801786c:	2903      	cmp	r1, #3
 801786e:	bf18      	it	ne
 8017870:	461a      	movne	r2, r3
 8017872:	68a3      	ldr	r3, [r4, #8]
 8017874:	9201      	str	r2, [sp, #4]
 8017876:	1e5a      	subs	r2, r3, #1
 8017878:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801787c:	bf88      	it	hi
 801787e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017882:	4627      	mov	r7, r4
 8017884:	bf82      	ittt	hi
 8017886:	eb03 0905 	addhi.w	r9, r3, r5
 801788a:	f240 135d 	movwhi	r3, #349	; 0x15d
 801788e:	60a3      	strhi	r3, [r4, #8]
 8017890:	f857 3b1c 	ldr.w	r3, [r7], #28
 8017894:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8017898:	bf98      	it	ls
 801789a:	f04f 0900 	movls.w	r9, #0
 801789e:	6023      	str	r3, [r4, #0]
 80178a0:	463d      	mov	r5, r7
 80178a2:	f04f 0b00 	mov.w	fp, #0
 80178a6:	6831      	ldr	r1, [r6, #0]
 80178a8:	ab03      	add	r3, sp, #12
 80178aa:	7809      	ldrb	r1, [r1, #0]
 80178ac:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80178b0:	2202      	movs	r2, #2
 80178b2:	f7e8 fd45 	bl	8000340 <memchr>
 80178b6:	b328      	cbz	r0, 8017904 <_scanf_i+0xb8>
 80178b8:	f1bb 0f01 	cmp.w	fp, #1
 80178bc:	d159      	bne.n	8017972 <_scanf_i+0x126>
 80178be:	6862      	ldr	r2, [r4, #4]
 80178c0:	b92a      	cbnz	r2, 80178ce <_scanf_i+0x82>
 80178c2:	6822      	ldr	r2, [r4, #0]
 80178c4:	2308      	movs	r3, #8
 80178c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80178ca:	6063      	str	r3, [r4, #4]
 80178cc:	6022      	str	r2, [r4, #0]
 80178ce:	6822      	ldr	r2, [r4, #0]
 80178d0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80178d4:	6022      	str	r2, [r4, #0]
 80178d6:	68a2      	ldr	r2, [r4, #8]
 80178d8:	1e51      	subs	r1, r2, #1
 80178da:	60a1      	str	r1, [r4, #8]
 80178dc:	b192      	cbz	r2, 8017904 <_scanf_i+0xb8>
 80178de:	6832      	ldr	r2, [r6, #0]
 80178e0:	1c51      	adds	r1, r2, #1
 80178e2:	6031      	str	r1, [r6, #0]
 80178e4:	7812      	ldrb	r2, [r2, #0]
 80178e6:	f805 2b01 	strb.w	r2, [r5], #1
 80178ea:	6872      	ldr	r2, [r6, #4]
 80178ec:	3a01      	subs	r2, #1
 80178ee:	2a00      	cmp	r2, #0
 80178f0:	6072      	str	r2, [r6, #4]
 80178f2:	dc07      	bgt.n	8017904 <_scanf_i+0xb8>
 80178f4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80178f8:	4631      	mov	r1, r6
 80178fa:	4650      	mov	r0, sl
 80178fc:	4790      	blx	r2
 80178fe:	2800      	cmp	r0, #0
 8017900:	f040 8085 	bne.w	8017a0e <_scanf_i+0x1c2>
 8017904:	f10b 0b01 	add.w	fp, fp, #1
 8017908:	f1bb 0f03 	cmp.w	fp, #3
 801790c:	d1cb      	bne.n	80178a6 <_scanf_i+0x5a>
 801790e:	6863      	ldr	r3, [r4, #4]
 8017910:	b90b      	cbnz	r3, 8017916 <_scanf_i+0xca>
 8017912:	230a      	movs	r3, #10
 8017914:	6063      	str	r3, [r4, #4]
 8017916:	6863      	ldr	r3, [r4, #4]
 8017918:	4947      	ldr	r1, [pc, #284]	; (8017a38 <_scanf_i+0x1ec>)
 801791a:	6960      	ldr	r0, [r4, #20]
 801791c:	1ac9      	subs	r1, r1, r3
 801791e:	f000 f88d 	bl	8017a3c <__sccl>
 8017922:	f04f 0b00 	mov.w	fp, #0
 8017926:	68a3      	ldr	r3, [r4, #8]
 8017928:	6822      	ldr	r2, [r4, #0]
 801792a:	2b00      	cmp	r3, #0
 801792c:	d03d      	beq.n	80179aa <_scanf_i+0x15e>
 801792e:	6831      	ldr	r1, [r6, #0]
 8017930:	6960      	ldr	r0, [r4, #20]
 8017932:	f891 c000 	ldrb.w	ip, [r1]
 8017936:	f810 000c 	ldrb.w	r0, [r0, ip]
 801793a:	2800      	cmp	r0, #0
 801793c:	d035      	beq.n	80179aa <_scanf_i+0x15e>
 801793e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8017942:	d124      	bne.n	801798e <_scanf_i+0x142>
 8017944:	0510      	lsls	r0, r2, #20
 8017946:	d522      	bpl.n	801798e <_scanf_i+0x142>
 8017948:	f10b 0b01 	add.w	fp, fp, #1
 801794c:	f1b9 0f00 	cmp.w	r9, #0
 8017950:	d003      	beq.n	801795a <_scanf_i+0x10e>
 8017952:	3301      	adds	r3, #1
 8017954:	f109 39ff 	add.w	r9, r9, #4294967295
 8017958:	60a3      	str	r3, [r4, #8]
 801795a:	6873      	ldr	r3, [r6, #4]
 801795c:	3b01      	subs	r3, #1
 801795e:	2b00      	cmp	r3, #0
 8017960:	6073      	str	r3, [r6, #4]
 8017962:	dd1b      	ble.n	801799c <_scanf_i+0x150>
 8017964:	6833      	ldr	r3, [r6, #0]
 8017966:	3301      	adds	r3, #1
 8017968:	6033      	str	r3, [r6, #0]
 801796a:	68a3      	ldr	r3, [r4, #8]
 801796c:	3b01      	subs	r3, #1
 801796e:	60a3      	str	r3, [r4, #8]
 8017970:	e7d9      	b.n	8017926 <_scanf_i+0xda>
 8017972:	f1bb 0f02 	cmp.w	fp, #2
 8017976:	d1ae      	bne.n	80178d6 <_scanf_i+0x8a>
 8017978:	6822      	ldr	r2, [r4, #0]
 801797a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801797e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8017982:	d1bf      	bne.n	8017904 <_scanf_i+0xb8>
 8017984:	2310      	movs	r3, #16
 8017986:	6063      	str	r3, [r4, #4]
 8017988:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801798c:	e7a2      	b.n	80178d4 <_scanf_i+0x88>
 801798e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8017992:	6022      	str	r2, [r4, #0]
 8017994:	780b      	ldrb	r3, [r1, #0]
 8017996:	f805 3b01 	strb.w	r3, [r5], #1
 801799a:	e7de      	b.n	801795a <_scanf_i+0x10e>
 801799c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80179a0:	4631      	mov	r1, r6
 80179a2:	4650      	mov	r0, sl
 80179a4:	4798      	blx	r3
 80179a6:	2800      	cmp	r0, #0
 80179a8:	d0df      	beq.n	801796a <_scanf_i+0x11e>
 80179aa:	6823      	ldr	r3, [r4, #0]
 80179ac:	05db      	lsls	r3, r3, #23
 80179ae:	d50d      	bpl.n	80179cc <_scanf_i+0x180>
 80179b0:	42bd      	cmp	r5, r7
 80179b2:	d909      	bls.n	80179c8 <_scanf_i+0x17c>
 80179b4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80179b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80179bc:	4632      	mov	r2, r6
 80179be:	4650      	mov	r0, sl
 80179c0:	4798      	blx	r3
 80179c2:	f105 39ff 	add.w	r9, r5, #4294967295
 80179c6:	464d      	mov	r5, r9
 80179c8:	42bd      	cmp	r5, r7
 80179ca:	d02d      	beq.n	8017a28 <_scanf_i+0x1dc>
 80179cc:	6822      	ldr	r2, [r4, #0]
 80179ce:	f012 0210 	ands.w	r2, r2, #16
 80179d2:	d113      	bne.n	80179fc <_scanf_i+0x1b0>
 80179d4:	702a      	strb	r2, [r5, #0]
 80179d6:	6863      	ldr	r3, [r4, #4]
 80179d8:	9e01      	ldr	r6, [sp, #4]
 80179da:	4639      	mov	r1, r7
 80179dc:	4650      	mov	r0, sl
 80179de:	47b0      	blx	r6
 80179e0:	6821      	ldr	r1, [r4, #0]
 80179e2:	f8d8 3000 	ldr.w	r3, [r8]
 80179e6:	f011 0f20 	tst.w	r1, #32
 80179ea:	d013      	beq.n	8017a14 <_scanf_i+0x1c8>
 80179ec:	1d1a      	adds	r2, r3, #4
 80179ee:	f8c8 2000 	str.w	r2, [r8]
 80179f2:	681b      	ldr	r3, [r3, #0]
 80179f4:	6018      	str	r0, [r3, #0]
 80179f6:	68e3      	ldr	r3, [r4, #12]
 80179f8:	3301      	adds	r3, #1
 80179fa:	60e3      	str	r3, [r4, #12]
 80179fc:	1bed      	subs	r5, r5, r7
 80179fe:	44ab      	add	fp, r5
 8017a00:	6925      	ldr	r5, [r4, #16]
 8017a02:	445d      	add	r5, fp
 8017a04:	6125      	str	r5, [r4, #16]
 8017a06:	2000      	movs	r0, #0
 8017a08:	b007      	add	sp, #28
 8017a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a0e:	f04f 0b00 	mov.w	fp, #0
 8017a12:	e7ca      	b.n	80179aa <_scanf_i+0x15e>
 8017a14:	1d1a      	adds	r2, r3, #4
 8017a16:	f8c8 2000 	str.w	r2, [r8]
 8017a1a:	681b      	ldr	r3, [r3, #0]
 8017a1c:	f011 0f01 	tst.w	r1, #1
 8017a20:	bf14      	ite	ne
 8017a22:	8018      	strhne	r0, [r3, #0]
 8017a24:	6018      	streq	r0, [r3, #0]
 8017a26:	e7e6      	b.n	80179f6 <_scanf_i+0x1aa>
 8017a28:	2001      	movs	r0, #1
 8017a2a:	e7ed      	b.n	8017a08 <_scanf_i+0x1bc>
 8017a2c:	0801813c 	.word	0x0801813c
 8017a30:	08017c99 	.word	0x08017c99
 8017a34:	08017bb1 	.word	0x08017bb1
 8017a38:	08018258 	.word	0x08018258

08017a3c <__sccl>:
 8017a3c:	b570      	push	{r4, r5, r6, lr}
 8017a3e:	780b      	ldrb	r3, [r1, #0]
 8017a40:	4604      	mov	r4, r0
 8017a42:	2b5e      	cmp	r3, #94	; 0x5e
 8017a44:	bf0b      	itete	eq
 8017a46:	784b      	ldrbeq	r3, [r1, #1]
 8017a48:	1c48      	addne	r0, r1, #1
 8017a4a:	1c88      	addeq	r0, r1, #2
 8017a4c:	2200      	movne	r2, #0
 8017a4e:	bf08      	it	eq
 8017a50:	2201      	moveq	r2, #1
 8017a52:	1e61      	subs	r1, r4, #1
 8017a54:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8017a58:	f801 2f01 	strb.w	r2, [r1, #1]!
 8017a5c:	42a9      	cmp	r1, r5
 8017a5e:	d1fb      	bne.n	8017a58 <__sccl+0x1c>
 8017a60:	b90b      	cbnz	r3, 8017a66 <__sccl+0x2a>
 8017a62:	3801      	subs	r0, #1
 8017a64:	bd70      	pop	{r4, r5, r6, pc}
 8017a66:	f082 0201 	eor.w	r2, r2, #1
 8017a6a:	54e2      	strb	r2, [r4, r3]
 8017a6c:	4605      	mov	r5, r0
 8017a6e:	4628      	mov	r0, r5
 8017a70:	f810 1b01 	ldrb.w	r1, [r0], #1
 8017a74:	292d      	cmp	r1, #45	; 0x2d
 8017a76:	d006      	beq.n	8017a86 <__sccl+0x4a>
 8017a78:	295d      	cmp	r1, #93	; 0x5d
 8017a7a:	d0f3      	beq.n	8017a64 <__sccl+0x28>
 8017a7c:	b909      	cbnz	r1, 8017a82 <__sccl+0x46>
 8017a7e:	4628      	mov	r0, r5
 8017a80:	e7f0      	b.n	8017a64 <__sccl+0x28>
 8017a82:	460b      	mov	r3, r1
 8017a84:	e7f1      	b.n	8017a6a <__sccl+0x2e>
 8017a86:	786e      	ldrb	r6, [r5, #1]
 8017a88:	2e5d      	cmp	r6, #93	; 0x5d
 8017a8a:	d0fa      	beq.n	8017a82 <__sccl+0x46>
 8017a8c:	42b3      	cmp	r3, r6
 8017a8e:	dcf8      	bgt.n	8017a82 <__sccl+0x46>
 8017a90:	3502      	adds	r5, #2
 8017a92:	4619      	mov	r1, r3
 8017a94:	3101      	adds	r1, #1
 8017a96:	428e      	cmp	r6, r1
 8017a98:	5462      	strb	r2, [r4, r1]
 8017a9a:	dcfb      	bgt.n	8017a94 <__sccl+0x58>
 8017a9c:	1af1      	subs	r1, r6, r3
 8017a9e:	3901      	subs	r1, #1
 8017aa0:	1c58      	adds	r0, r3, #1
 8017aa2:	42b3      	cmp	r3, r6
 8017aa4:	bfa8      	it	ge
 8017aa6:	2100      	movge	r1, #0
 8017aa8:	1843      	adds	r3, r0, r1
 8017aaa:	e7e0      	b.n	8017a6e <__sccl+0x32>

08017aac <_strtol_l.constprop.0>:
 8017aac:	2b01      	cmp	r3, #1
 8017aae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ab2:	d001      	beq.n	8017ab8 <_strtol_l.constprop.0+0xc>
 8017ab4:	2b24      	cmp	r3, #36	; 0x24
 8017ab6:	d906      	bls.n	8017ac6 <_strtol_l.constprop.0+0x1a>
 8017ab8:	f7ff f916 	bl	8016ce8 <__errno>
 8017abc:	2316      	movs	r3, #22
 8017abe:	6003      	str	r3, [r0, #0]
 8017ac0:	2000      	movs	r0, #0
 8017ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ac6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8017bac <_strtol_l.constprop.0+0x100>
 8017aca:	460d      	mov	r5, r1
 8017acc:	462e      	mov	r6, r5
 8017ace:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017ad2:	f814 700c 	ldrb.w	r7, [r4, ip]
 8017ad6:	f017 0708 	ands.w	r7, r7, #8
 8017ada:	d1f7      	bne.n	8017acc <_strtol_l.constprop.0+0x20>
 8017adc:	2c2d      	cmp	r4, #45	; 0x2d
 8017ade:	d132      	bne.n	8017b46 <_strtol_l.constprop.0+0x9a>
 8017ae0:	782c      	ldrb	r4, [r5, #0]
 8017ae2:	2701      	movs	r7, #1
 8017ae4:	1cb5      	adds	r5, r6, #2
 8017ae6:	2b00      	cmp	r3, #0
 8017ae8:	d05b      	beq.n	8017ba2 <_strtol_l.constprop.0+0xf6>
 8017aea:	2b10      	cmp	r3, #16
 8017aec:	d109      	bne.n	8017b02 <_strtol_l.constprop.0+0x56>
 8017aee:	2c30      	cmp	r4, #48	; 0x30
 8017af0:	d107      	bne.n	8017b02 <_strtol_l.constprop.0+0x56>
 8017af2:	782c      	ldrb	r4, [r5, #0]
 8017af4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017af8:	2c58      	cmp	r4, #88	; 0x58
 8017afa:	d14d      	bne.n	8017b98 <_strtol_l.constprop.0+0xec>
 8017afc:	786c      	ldrb	r4, [r5, #1]
 8017afe:	2310      	movs	r3, #16
 8017b00:	3502      	adds	r5, #2
 8017b02:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8017b06:	f108 38ff 	add.w	r8, r8, #4294967295
 8017b0a:	f04f 0c00 	mov.w	ip, #0
 8017b0e:	fbb8 f9f3 	udiv	r9, r8, r3
 8017b12:	4666      	mov	r6, ip
 8017b14:	fb03 8a19 	mls	sl, r3, r9, r8
 8017b18:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8017b1c:	f1be 0f09 	cmp.w	lr, #9
 8017b20:	d816      	bhi.n	8017b50 <_strtol_l.constprop.0+0xa4>
 8017b22:	4674      	mov	r4, lr
 8017b24:	42a3      	cmp	r3, r4
 8017b26:	dd24      	ble.n	8017b72 <_strtol_l.constprop.0+0xc6>
 8017b28:	f1bc 0f00 	cmp.w	ip, #0
 8017b2c:	db1e      	blt.n	8017b6c <_strtol_l.constprop.0+0xc0>
 8017b2e:	45b1      	cmp	r9, r6
 8017b30:	d31c      	bcc.n	8017b6c <_strtol_l.constprop.0+0xc0>
 8017b32:	d101      	bne.n	8017b38 <_strtol_l.constprop.0+0x8c>
 8017b34:	45a2      	cmp	sl, r4
 8017b36:	db19      	blt.n	8017b6c <_strtol_l.constprop.0+0xc0>
 8017b38:	fb06 4603 	mla	r6, r6, r3, r4
 8017b3c:	f04f 0c01 	mov.w	ip, #1
 8017b40:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017b44:	e7e8      	b.n	8017b18 <_strtol_l.constprop.0+0x6c>
 8017b46:	2c2b      	cmp	r4, #43	; 0x2b
 8017b48:	bf04      	itt	eq
 8017b4a:	782c      	ldrbeq	r4, [r5, #0]
 8017b4c:	1cb5      	addeq	r5, r6, #2
 8017b4e:	e7ca      	b.n	8017ae6 <_strtol_l.constprop.0+0x3a>
 8017b50:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8017b54:	f1be 0f19 	cmp.w	lr, #25
 8017b58:	d801      	bhi.n	8017b5e <_strtol_l.constprop.0+0xb2>
 8017b5a:	3c37      	subs	r4, #55	; 0x37
 8017b5c:	e7e2      	b.n	8017b24 <_strtol_l.constprop.0+0x78>
 8017b5e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8017b62:	f1be 0f19 	cmp.w	lr, #25
 8017b66:	d804      	bhi.n	8017b72 <_strtol_l.constprop.0+0xc6>
 8017b68:	3c57      	subs	r4, #87	; 0x57
 8017b6a:	e7db      	b.n	8017b24 <_strtol_l.constprop.0+0x78>
 8017b6c:	f04f 3cff 	mov.w	ip, #4294967295
 8017b70:	e7e6      	b.n	8017b40 <_strtol_l.constprop.0+0x94>
 8017b72:	f1bc 0f00 	cmp.w	ip, #0
 8017b76:	da05      	bge.n	8017b84 <_strtol_l.constprop.0+0xd8>
 8017b78:	2322      	movs	r3, #34	; 0x22
 8017b7a:	6003      	str	r3, [r0, #0]
 8017b7c:	4646      	mov	r6, r8
 8017b7e:	b942      	cbnz	r2, 8017b92 <_strtol_l.constprop.0+0xe6>
 8017b80:	4630      	mov	r0, r6
 8017b82:	e79e      	b.n	8017ac2 <_strtol_l.constprop.0+0x16>
 8017b84:	b107      	cbz	r7, 8017b88 <_strtol_l.constprop.0+0xdc>
 8017b86:	4276      	negs	r6, r6
 8017b88:	2a00      	cmp	r2, #0
 8017b8a:	d0f9      	beq.n	8017b80 <_strtol_l.constprop.0+0xd4>
 8017b8c:	f1bc 0f00 	cmp.w	ip, #0
 8017b90:	d000      	beq.n	8017b94 <_strtol_l.constprop.0+0xe8>
 8017b92:	1e69      	subs	r1, r5, #1
 8017b94:	6011      	str	r1, [r2, #0]
 8017b96:	e7f3      	b.n	8017b80 <_strtol_l.constprop.0+0xd4>
 8017b98:	2430      	movs	r4, #48	; 0x30
 8017b9a:	2b00      	cmp	r3, #0
 8017b9c:	d1b1      	bne.n	8017b02 <_strtol_l.constprop.0+0x56>
 8017b9e:	2308      	movs	r3, #8
 8017ba0:	e7af      	b.n	8017b02 <_strtol_l.constprop.0+0x56>
 8017ba2:	2c30      	cmp	r4, #48	; 0x30
 8017ba4:	d0a5      	beq.n	8017af2 <_strtol_l.constprop.0+0x46>
 8017ba6:	230a      	movs	r3, #10
 8017ba8:	e7ab      	b.n	8017b02 <_strtol_l.constprop.0+0x56>
 8017baa:	bf00      	nop
 8017bac:	0801825b 	.word	0x0801825b

08017bb0 <_strtol_r>:
 8017bb0:	f7ff bf7c 	b.w	8017aac <_strtol_l.constprop.0>

08017bb4 <_strtoul_l.constprop.0>:
 8017bb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017bb8:	4f36      	ldr	r7, [pc, #216]	; (8017c94 <_strtoul_l.constprop.0+0xe0>)
 8017bba:	4686      	mov	lr, r0
 8017bbc:	460d      	mov	r5, r1
 8017bbe:	4628      	mov	r0, r5
 8017bc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017bc4:	5de6      	ldrb	r6, [r4, r7]
 8017bc6:	f016 0608 	ands.w	r6, r6, #8
 8017bca:	d1f8      	bne.n	8017bbe <_strtoul_l.constprop.0+0xa>
 8017bcc:	2c2d      	cmp	r4, #45	; 0x2d
 8017bce:	d12f      	bne.n	8017c30 <_strtoul_l.constprop.0+0x7c>
 8017bd0:	782c      	ldrb	r4, [r5, #0]
 8017bd2:	2601      	movs	r6, #1
 8017bd4:	1c85      	adds	r5, r0, #2
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d057      	beq.n	8017c8a <_strtoul_l.constprop.0+0xd6>
 8017bda:	2b10      	cmp	r3, #16
 8017bdc:	d109      	bne.n	8017bf2 <_strtoul_l.constprop.0+0x3e>
 8017bde:	2c30      	cmp	r4, #48	; 0x30
 8017be0:	d107      	bne.n	8017bf2 <_strtoul_l.constprop.0+0x3e>
 8017be2:	7828      	ldrb	r0, [r5, #0]
 8017be4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8017be8:	2858      	cmp	r0, #88	; 0x58
 8017bea:	d149      	bne.n	8017c80 <_strtoul_l.constprop.0+0xcc>
 8017bec:	786c      	ldrb	r4, [r5, #1]
 8017bee:	2310      	movs	r3, #16
 8017bf0:	3502      	adds	r5, #2
 8017bf2:	f04f 38ff 	mov.w	r8, #4294967295
 8017bf6:	2700      	movs	r7, #0
 8017bf8:	fbb8 f8f3 	udiv	r8, r8, r3
 8017bfc:	fb03 f908 	mul.w	r9, r3, r8
 8017c00:	ea6f 0909 	mvn.w	r9, r9
 8017c04:	4638      	mov	r0, r7
 8017c06:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8017c0a:	f1bc 0f09 	cmp.w	ip, #9
 8017c0e:	d814      	bhi.n	8017c3a <_strtoul_l.constprop.0+0x86>
 8017c10:	4664      	mov	r4, ip
 8017c12:	42a3      	cmp	r3, r4
 8017c14:	dd22      	ble.n	8017c5c <_strtoul_l.constprop.0+0xa8>
 8017c16:	2f00      	cmp	r7, #0
 8017c18:	db1d      	blt.n	8017c56 <_strtoul_l.constprop.0+0xa2>
 8017c1a:	4580      	cmp	r8, r0
 8017c1c:	d31b      	bcc.n	8017c56 <_strtoul_l.constprop.0+0xa2>
 8017c1e:	d101      	bne.n	8017c24 <_strtoul_l.constprop.0+0x70>
 8017c20:	45a1      	cmp	r9, r4
 8017c22:	db18      	blt.n	8017c56 <_strtoul_l.constprop.0+0xa2>
 8017c24:	fb00 4003 	mla	r0, r0, r3, r4
 8017c28:	2701      	movs	r7, #1
 8017c2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017c2e:	e7ea      	b.n	8017c06 <_strtoul_l.constprop.0+0x52>
 8017c30:	2c2b      	cmp	r4, #43	; 0x2b
 8017c32:	bf04      	itt	eq
 8017c34:	782c      	ldrbeq	r4, [r5, #0]
 8017c36:	1c85      	addeq	r5, r0, #2
 8017c38:	e7cd      	b.n	8017bd6 <_strtoul_l.constprop.0+0x22>
 8017c3a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8017c3e:	f1bc 0f19 	cmp.w	ip, #25
 8017c42:	d801      	bhi.n	8017c48 <_strtoul_l.constprop.0+0x94>
 8017c44:	3c37      	subs	r4, #55	; 0x37
 8017c46:	e7e4      	b.n	8017c12 <_strtoul_l.constprop.0+0x5e>
 8017c48:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8017c4c:	f1bc 0f19 	cmp.w	ip, #25
 8017c50:	d804      	bhi.n	8017c5c <_strtoul_l.constprop.0+0xa8>
 8017c52:	3c57      	subs	r4, #87	; 0x57
 8017c54:	e7dd      	b.n	8017c12 <_strtoul_l.constprop.0+0x5e>
 8017c56:	f04f 37ff 	mov.w	r7, #4294967295
 8017c5a:	e7e6      	b.n	8017c2a <_strtoul_l.constprop.0+0x76>
 8017c5c:	2f00      	cmp	r7, #0
 8017c5e:	da07      	bge.n	8017c70 <_strtoul_l.constprop.0+0xbc>
 8017c60:	2322      	movs	r3, #34	; 0x22
 8017c62:	f8ce 3000 	str.w	r3, [lr]
 8017c66:	f04f 30ff 	mov.w	r0, #4294967295
 8017c6a:	b932      	cbnz	r2, 8017c7a <_strtoul_l.constprop.0+0xc6>
 8017c6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017c70:	b106      	cbz	r6, 8017c74 <_strtoul_l.constprop.0+0xc0>
 8017c72:	4240      	negs	r0, r0
 8017c74:	2a00      	cmp	r2, #0
 8017c76:	d0f9      	beq.n	8017c6c <_strtoul_l.constprop.0+0xb8>
 8017c78:	b107      	cbz	r7, 8017c7c <_strtoul_l.constprop.0+0xc8>
 8017c7a:	1e69      	subs	r1, r5, #1
 8017c7c:	6011      	str	r1, [r2, #0]
 8017c7e:	e7f5      	b.n	8017c6c <_strtoul_l.constprop.0+0xb8>
 8017c80:	2430      	movs	r4, #48	; 0x30
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	d1b5      	bne.n	8017bf2 <_strtoul_l.constprop.0+0x3e>
 8017c86:	2308      	movs	r3, #8
 8017c88:	e7b3      	b.n	8017bf2 <_strtoul_l.constprop.0+0x3e>
 8017c8a:	2c30      	cmp	r4, #48	; 0x30
 8017c8c:	d0a9      	beq.n	8017be2 <_strtoul_l.constprop.0+0x2e>
 8017c8e:	230a      	movs	r3, #10
 8017c90:	e7af      	b.n	8017bf2 <_strtoul_l.constprop.0+0x3e>
 8017c92:	bf00      	nop
 8017c94:	0801825b 	.word	0x0801825b

08017c98 <_strtoul_r>:
 8017c98:	f7ff bf8c 	b.w	8017bb4 <_strtoul_l.constprop.0>

08017c9c <__submore>:
 8017c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ca0:	460c      	mov	r4, r1
 8017ca2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017ca4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017ca8:	4299      	cmp	r1, r3
 8017caa:	d11d      	bne.n	8017ce8 <__submore+0x4c>
 8017cac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017cb0:	f000 f8b6 	bl	8017e20 <_malloc_r>
 8017cb4:	b918      	cbnz	r0, 8017cbe <__submore+0x22>
 8017cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8017cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017cbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017cc2:	63a3      	str	r3, [r4, #56]	; 0x38
 8017cc4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8017cc8:	6360      	str	r0, [r4, #52]	; 0x34
 8017cca:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8017cce:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8017cd2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8017cd6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017cda:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8017cde:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8017ce2:	6020      	str	r0, [r4, #0]
 8017ce4:	2000      	movs	r0, #0
 8017ce6:	e7e8      	b.n	8017cba <__submore+0x1e>
 8017ce8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8017cea:	0077      	lsls	r7, r6, #1
 8017cec:	463a      	mov	r2, r7
 8017cee:	f000 f90b 	bl	8017f08 <_realloc_r>
 8017cf2:	4605      	mov	r5, r0
 8017cf4:	2800      	cmp	r0, #0
 8017cf6:	d0de      	beq.n	8017cb6 <__submore+0x1a>
 8017cf8:	eb00 0806 	add.w	r8, r0, r6
 8017cfc:	4601      	mov	r1, r0
 8017cfe:	4632      	mov	r2, r6
 8017d00:	4640      	mov	r0, r8
 8017d02:	f7ff f81b 	bl	8016d3c <memcpy>
 8017d06:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8017d0a:	f8c4 8000 	str.w	r8, [r4]
 8017d0e:	e7e9      	b.n	8017ce4 <__submore+0x48>

08017d10 <__retarget_lock_acquire_recursive>:
 8017d10:	4770      	bx	lr

08017d12 <__retarget_lock_release_recursive>:
 8017d12:	4770      	bx	lr

08017d14 <memmove>:
 8017d14:	4288      	cmp	r0, r1
 8017d16:	b510      	push	{r4, lr}
 8017d18:	eb01 0402 	add.w	r4, r1, r2
 8017d1c:	d902      	bls.n	8017d24 <memmove+0x10>
 8017d1e:	4284      	cmp	r4, r0
 8017d20:	4623      	mov	r3, r4
 8017d22:	d807      	bhi.n	8017d34 <memmove+0x20>
 8017d24:	1e43      	subs	r3, r0, #1
 8017d26:	42a1      	cmp	r1, r4
 8017d28:	d008      	beq.n	8017d3c <memmove+0x28>
 8017d2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017d2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017d32:	e7f8      	b.n	8017d26 <memmove+0x12>
 8017d34:	4402      	add	r2, r0
 8017d36:	4601      	mov	r1, r0
 8017d38:	428a      	cmp	r2, r1
 8017d3a:	d100      	bne.n	8017d3e <memmove+0x2a>
 8017d3c:	bd10      	pop	{r4, pc}
 8017d3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017d42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017d46:	e7f7      	b.n	8017d38 <memmove+0x24>

08017d48 <_free_r>:
 8017d48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017d4a:	2900      	cmp	r1, #0
 8017d4c:	d044      	beq.n	8017dd8 <_free_r+0x90>
 8017d4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017d52:	9001      	str	r0, [sp, #4]
 8017d54:	2b00      	cmp	r3, #0
 8017d56:	f1a1 0404 	sub.w	r4, r1, #4
 8017d5a:	bfb8      	it	lt
 8017d5c:	18e4      	addlt	r4, r4, r3
 8017d5e:	f000 f913 	bl	8017f88 <__malloc_lock>
 8017d62:	4a1e      	ldr	r2, [pc, #120]	; (8017ddc <_free_r+0x94>)
 8017d64:	9801      	ldr	r0, [sp, #4]
 8017d66:	6813      	ldr	r3, [r2, #0]
 8017d68:	b933      	cbnz	r3, 8017d78 <_free_r+0x30>
 8017d6a:	6063      	str	r3, [r4, #4]
 8017d6c:	6014      	str	r4, [r2, #0]
 8017d6e:	b003      	add	sp, #12
 8017d70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017d74:	f000 b90e 	b.w	8017f94 <__malloc_unlock>
 8017d78:	42a3      	cmp	r3, r4
 8017d7a:	d908      	bls.n	8017d8e <_free_r+0x46>
 8017d7c:	6825      	ldr	r5, [r4, #0]
 8017d7e:	1961      	adds	r1, r4, r5
 8017d80:	428b      	cmp	r3, r1
 8017d82:	bf01      	itttt	eq
 8017d84:	6819      	ldreq	r1, [r3, #0]
 8017d86:	685b      	ldreq	r3, [r3, #4]
 8017d88:	1949      	addeq	r1, r1, r5
 8017d8a:	6021      	streq	r1, [r4, #0]
 8017d8c:	e7ed      	b.n	8017d6a <_free_r+0x22>
 8017d8e:	461a      	mov	r2, r3
 8017d90:	685b      	ldr	r3, [r3, #4]
 8017d92:	b10b      	cbz	r3, 8017d98 <_free_r+0x50>
 8017d94:	42a3      	cmp	r3, r4
 8017d96:	d9fa      	bls.n	8017d8e <_free_r+0x46>
 8017d98:	6811      	ldr	r1, [r2, #0]
 8017d9a:	1855      	adds	r5, r2, r1
 8017d9c:	42a5      	cmp	r5, r4
 8017d9e:	d10b      	bne.n	8017db8 <_free_r+0x70>
 8017da0:	6824      	ldr	r4, [r4, #0]
 8017da2:	4421      	add	r1, r4
 8017da4:	1854      	adds	r4, r2, r1
 8017da6:	42a3      	cmp	r3, r4
 8017da8:	6011      	str	r1, [r2, #0]
 8017daa:	d1e0      	bne.n	8017d6e <_free_r+0x26>
 8017dac:	681c      	ldr	r4, [r3, #0]
 8017dae:	685b      	ldr	r3, [r3, #4]
 8017db0:	6053      	str	r3, [r2, #4]
 8017db2:	4421      	add	r1, r4
 8017db4:	6011      	str	r1, [r2, #0]
 8017db6:	e7da      	b.n	8017d6e <_free_r+0x26>
 8017db8:	d902      	bls.n	8017dc0 <_free_r+0x78>
 8017dba:	230c      	movs	r3, #12
 8017dbc:	6003      	str	r3, [r0, #0]
 8017dbe:	e7d6      	b.n	8017d6e <_free_r+0x26>
 8017dc0:	6825      	ldr	r5, [r4, #0]
 8017dc2:	1961      	adds	r1, r4, r5
 8017dc4:	428b      	cmp	r3, r1
 8017dc6:	bf04      	itt	eq
 8017dc8:	6819      	ldreq	r1, [r3, #0]
 8017dca:	685b      	ldreq	r3, [r3, #4]
 8017dcc:	6063      	str	r3, [r4, #4]
 8017dce:	bf04      	itt	eq
 8017dd0:	1949      	addeq	r1, r1, r5
 8017dd2:	6021      	streq	r1, [r4, #0]
 8017dd4:	6054      	str	r4, [r2, #4]
 8017dd6:	e7ca      	b.n	8017d6e <_free_r+0x26>
 8017dd8:	b003      	add	sp, #12
 8017dda:	bd30      	pop	{r4, r5, pc}
 8017ddc:	240031cc 	.word	0x240031cc

08017de0 <sbrk_aligned>:
 8017de0:	b570      	push	{r4, r5, r6, lr}
 8017de2:	4e0e      	ldr	r6, [pc, #56]	; (8017e1c <sbrk_aligned+0x3c>)
 8017de4:	460c      	mov	r4, r1
 8017de6:	6831      	ldr	r1, [r6, #0]
 8017de8:	4605      	mov	r5, r0
 8017dea:	b911      	cbnz	r1, 8017df2 <sbrk_aligned+0x12>
 8017dec:	f000 f8bc 	bl	8017f68 <_sbrk_r>
 8017df0:	6030      	str	r0, [r6, #0]
 8017df2:	4621      	mov	r1, r4
 8017df4:	4628      	mov	r0, r5
 8017df6:	f000 f8b7 	bl	8017f68 <_sbrk_r>
 8017dfa:	1c43      	adds	r3, r0, #1
 8017dfc:	d00a      	beq.n	8017e14 <sbrk_aligned+0x34>
 8017dfe:	1cc4      	adds	r4, r0, #3
 8017e00:	f024 0403 	bic.w	r4, r4, #3
 8017e04:	42a0      	cmp	r0, r4
 8017e06:	d007      	beq.n	8017e18 <sbrk_aligned+0x38>
 8017e08:	1a21      	subs	r1, r4, r0
 8017e0a:	4628      	mov	r0, r5
 8017e0c:	f000 f8ac 	bl	8017f68 <_sbrk_r>
 8017e10:	3001      	adds	r0, #1
 8017e12:	d101      	bne.n	8017e18 <sbrk_aligned+0x38>
 8017e14:	f04f 34ff 	mov.w	r4, #4294967295
 8017e18:	4620      	mov	r0, r4
 8017e1a:	bd70      	pop	{r4, r5, r6, pc}
 8017e1c:	240031d0 	.word	0x240031d0

08017e20 <_malloc_r>:
 8017e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e24:	1ccd      	adds	r5, r1, #3
 8017e26:	f025 0503 	bic.w	r5, r5, #3
 8017e2a:	3508      	adds	r5, #8
 8017e2c:	2d0c      	cmp	r5, #12
 8017e2e:	bf38      	it	cc
 8017e30:	250c      	movcc	r5, #12
 8017e32:	2d00      	cmp	r5, #0
 8017e34:	4607      	mov	r7, r0
 8017e36:	db01      	blt.n	8017e3c <_malloc_r+0x1c>
 8017e38:	42a9      	cmp	r1, r5
 8017e3a:	d905      	bls.n	8017e48 <_malloc_r+0x28>
 8017e3c:	230c      	movs	r3, #12
 8017e3e:	603b      	str	r3, [r7, #0]
 8017e40:	2600      	movs	r6, #0
 8017e42:	4630      	mov	r0, r6
 8017e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e48:	4e2e      	ldr	r6, [pc, #184]	; (8017f04 <_malloc_r+0xe4>)
 8017e4a:	f000 f89d 	bl	8017f88 <__malloc_lock>
 8017e4e:	6833      	ldr	r3, [r6, #0]
 8017e50:	461c      	mov	r4, r3
 8017e52:	bb34      	cbnz	r4, 8017ea2 <_malloc_r+0x82>
 8017e54:	4629      	mov	r1, r5
 8017e56:	4638      	mov	r0, r7
 8017e58:	f7ff ffc2 	bl	8017de0 <sbrk_aligned>
 8017e5c:	1c43      	adds	r3, r0, #1
 8017e5e:	4604      	mov	r4, r0
 8017e60:	d14d      	bne.n	8017efe <_malloc_r+0xde>
 8017e62:	6834      	ldr	r4, [r6, #0]
 8017e64:	4626      	mov	r6, r4
 8017e66:	2e00      	cmp	r6, #0
 8017e68:	d140      	bne.n	8017eec <_malloc_r+0xcc>
 8017e6a:	6823      	ldr	r3, [r4, #0]
 8017e6c:	4631      	mov	r1, r6
 8017e6e:	4638      	mov	r0, r7
 8017e70:	eb04 0803 	add.w	r8, r4, r3
 8017e74:	f000 f878 	bl	8017f68 <_sbrk_r>
 8017e78:	4580      	cmp	r8, r0
 8017e7a:	d13a      	bne.n	8017ef2 <_malloc_r+0xd2>
 8017e7c:	6821      	ldr	r1, [r4, #0]
 8017e7e:	3503      	adds	r5, #3
 8017e80:	1a6d      	subs	r5, r5, r1
 8017e82:	f025 0503 	bic.w	r5, r5, #3
 8017e86:	3508      	adds	r5, #8
 8017e88:	2d0c      	cmp	r5, #12
 8017e8a:	bf38      	it	cc
 8017e8c:	250c      	movcc	r5, #12
 8017e8e:	4629      	mov	r1, r5
 8017e90:	4638      	mov	r0, r7
 8017e92:	f7ff ffa5 	bl	8017de0 <sbrk_aligned>
 8017e96:	3001      	adds	r0, #1
 8017e98:	d02b      	beq.n	8017ef2 <_malloc_r+0xd2>
 8017e9a:	6823      	ldr	r3, [r4, #0]
 8017e9c:	442b      	add	r3, r5
 8017e9e:	6023      	str	r3, [r4, #0]
 8017ea0:	e00e      	b.n	8017ec0 <_malloc_r+0xa0>
 8017ea2:	6822      	ldr	r2, [r4, #0]
 8017ea4:	1b52      	subs	r2, r2, r5
 8017ea6:	d41e      	bmi.n	8017ee6 <_malloc_r+0xc6>
 8017ea8:	2a0b      	cmp	r2, #11
 8017eaa:	d916      	bls.n	8017eda <_malloc_r+0xba>
 8017eac:	1961      	adds	r1, r4, r5
 8017eae:	42a3      	cmp	r3, r4
 8017eb0:	6025      	str	r5, [r4, #0]
 8017eb2:	bf18      	it	ne
 8017eb4:	6059      	strne	r1, [r3, #4]
 8017eb6:	6863      	ldr	r3, [r4, #4]
 8017eb8:	bf08      	it	eq
 8017eba:	6031      	streq	r1, [r6, #0]
 8017ebc:	5162      	str	r2, [r4, r5]
 8017ebe:	604b      	str	r3, [r1, #4]
 8017ec0:	4638      	mov	r0, r7
 8017ec2:	f104 060b 	add.w	r6, r4, #11
 8017ec6:	f000 f865 	bl	8017f94 <__malloc_unlock>
 8017eca:	f026 0607 	bic.w	r6, r6, #7
 8017ece:	1d23      	adds	r3, r4, #4
 8017ed0:	1af2      	subs	r2, r6, r3
 8017ed2:	d0b6      	beq.n	8017e42 <_malloc_r+0x22>
 8017ed4:	1b9b      	subs	r3, r3, r6
 8017ed6:	50a3      	str	r3, [r4, r2]
 8017ed8:	e7b3      	b.n	8017e42 <_malloc_r+0x22>
 8017eda:	6862      	ldr	r2, [r4, #4]
 8017edc:	42a3      	cmp	r3, r4
 8017ede:	bf0c      	ite	eq
 8017ee0:	6032      	streq	r2, [r6, #0]
 8017ee2:	605a      	strne	r2, [r3, #4]
 8017ee4:	e7ec      	b.n	8017ec0 <_malloc_r+0xa0>
 8017ee6:	4623      	mov	r3, r4
 8017ee8:	6864      	ldr	r4, [r4, #4]
 8017eea:	e7b2      	b.n	8017e52 <_malloc_r+0x32>
 8017eec:	4634      	mov	r4, r6
 8017eee:	6876      	ldr	r6, [r6, #4]
 8017ef0:	e7b9      	b.n	8017e66 <_malloc_r+0x46>
 8017ef2:	230c      	movs	r3, #12
 8017ef4:	603b      	str	r3, [r7, #0]
 8017ef6:	4638      	mov	r0, r7
 8017ef8:	f000 f84c 	bl	8017f94 <__malloc_unlock>
 8017efc:	e7a1      	b.n	8017e42 <_malloc_r+0x22>
 8017efe:	6025      	str	r5, [r4, #0]
 8017f00:	e7de      	b.n	8017ec0 <_malloc_r+0xa0>
 8017f02:	bf00      	nop
 8017f04:	240031cc 	.word	0x240031cc

08017f08 <_realloc_r>:
 8017f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f0c:	4680      	mov	r8, r0
 8017f0e:	4614      	mov	r4, r2
 8017f10:	460e      	mov	r6, r1
 8017f12:	b921      	cbnz	r1, 8017f1e <_realloc_r+0x16>
 8017f14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017f18:	4611      	mov	r1, r2
 8017f1a:	f7ff bf81 	b.w	8017e20 <_malloc_r>
 8017f1e:	b92a      	cbnz	r2, 8017f2c <_realloc_r+0x24>
 8017f20:	f7ff ff12 	bl	8017d48 <_free_r>
 8017f24:	4625      	mov	r5, r4
 8017f26:	4628      	mov	r0, r5
 8017f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f2c:	f000 f838 	bl	8017fa0 <_malloc_usable_size_r>
 8017f30:	4284      	cmp	r4, r0
 8017f32:	4607      	mov	r7, r0
 8017f34:	d802      	bhi.n	8017f3c <_realloc_r+0x34>
 8017f36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017f3a:	d812      	bhi.n	8017f62 <_realloc_r+0x5a>
 8017f3c:	4621      	mov	r1, r4
 8017f3e:	4640      	mov	r0, r8
 8017f40:	f7ff ff6e 	bl	8017e20 <_malloc_r>
 8017f44:	4605      	mov	r5, r0
 8017f46:	2800      	cmp	r0, #0
 8017f48:	d0ed      	beq.n	8017f26 <_realloc_r+0x1e>
 8017f4a:	42bc      	cmp	r4, r7
 8017f4c:	4622      	mov	r2, r4
 8017f4e:	4631      	mov	r1, r6
 8017f50:	bf28      	it	cs
 8017f52:	463a      	movcs	r2, r7
 8017f54:	f7fe fef2 	bl	8016d3c <memcpy>
 8017f58:	4631      	mov	r1, r6
 8017f5a:	4640      	mov	r0, r8
 8017f5c:	f7ff fef4 	bl	8017d48 <_free_r>
 8017f60:	e7e1      	b.n	8017f26 <_realloc_r+0x1e>
 8017f62:	4635      	mov	r5, r6
 8017f64:	e7df      	b.n	8017f26 <_realloc_r+0x1e>
	...

08017f68 <_sbrk_r>:
 8017f68:	b538      	push	{r3, r4, r5, lr}
 8017f6a:	4d06      	ldr	r5, [pc, #24]	; (8017f84 <_sbrk_r+0x1c>)
 8017f6c:	2300      	movs	r3, #0
 8017f6e:	4604      	mov	r4, r0
 8017f70:	4608      	mov	r0, r1
 8017f72:	602b      	str	r3, [r5, #0]
 8017f74:	f7eb fac4 	bl	8003500 <_sbrk>
 8017f78:	1c43      	adds	r3, r0, #1
 8017f7a:	d102      	bne.n	8017f82 <_sbrk_r+0x1a>
 8017f7c:	682b      	ldr	r3, [r5, #0]
 8017f7e:	b103      	cbz	r3, 8017f82 <_sbrk_r+0x1a>
 8017f80:	6023      	str	r3, [r4, #0]
 8017f82:	bd38      	pop	{r3, r4, r5, pc}
 8017f84:	240031c4 	.word	0x240031c4

08017f88 <__malloc_lock>:
 8017f88:	4801      	ldr	r0, [pc, #4]	; (8017f90 <__malloc_lock+0x8>)
 8017f8a:	f7ff bec1 	b.w	8017d10 <__retarget_lock_acquire_recursive>
 8017f8e:	bf00      	nop
 8017f90:	240031c8 	.word	0x240031c8

08017f94 <__malloc_unlock>:
 8017f94:	4801      	ldr	r0, [pc, #4]	; (8017f9c <__malloc_unlock+0x8>)
 8017f96:	f7ff bebc 	b.w	8017d12 <__retarget_lock_release_recursive>
 8017f9a:	bf00      	nop
 8017f9c:	240031c8 	.word	0x240031c8

08017fa0 <_malloc_usable_size_r>:
 8017fa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017fa4:	1f18      	subs	r0, r3, #4
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	bfbc      	itt	lt
 8017faa:	580b      	ldrlt	r3, [r1, r0]
 8017fac:	18c0      	addlt	r0, r0, r3
 8017fae:	4770      	bx	lr

08017fb0 <_init>:
 8017fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017fb2:	bf00      	nop
 8017fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017fb6:	bc08      	pop	{r3}
 8017fb8:	469e      	mov	lr, r3
 8017fba:	4770      	bx	lr

08017fbc <_fini>:
 8017fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017fbe:	bf00      	nop
 8017fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017fc2:	bc08      	pop	{r3}
 8017fc4:	469e      	mov	lr, r3
 8017fc6:	4770      	bx	lr
