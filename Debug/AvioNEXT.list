
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018120  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003dc  080183f0  080183f0  000283f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080187cc  080187cc  000287cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080187d4  080187d4  000287d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080187d8  080187d8  000287d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000150  24000000  080187dc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000031f4  24000150  0801892c  00030150  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  24003344  0801892c  00033344  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030150  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0003017e  2**0
                  CONTENTS, READONLY
 11 .debug_info   000357c0  00000000  00000000  000301c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00006242  00000000  00000000  00065981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002ae8  00000000  00000000  0006bbc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000214b  00000000  00000000  0006e6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003de3d  00000000  00000000  000707fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003a931  00000000  00000000  000ae638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017d42a  00000000  00000000  000e8f69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000c2c8  00000000  00000000  00266394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  0027265c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000150 	.word	0x24000150
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080183d8 	.word	0x080183d8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000154 	.word	0x24000154
 800030c:	080183d8 	.word	0x080183d8

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b970 	b.w	80006d8 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9e08      	ldr	r6, [sp, #32]
 8000416:	460d      	mov	r5, r1
 8000418:	4604      	mov	r4, r0
 800041a:	460f      	mov	r7, r1
 800041c:	2b00      	cmp	r3, #0
 800041e:	d14a      	bne.n	80004b6 <__udivmoddi4+0xa6>
 8000420:	428a      	cmp	r2, r1
 8000422:	4694      	mov	ip, r2
 8000424:	d965      	bls.n	80004f2 <__udivmoddi4+0xe2>
 8000426:	fab2 f382 	clz	r3, r2
 800042a:	b143      	cbz	r3, 800043e <__udivmoddi4+0x2e>
 800042c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000430:	f1c3 0220 	rsb	r2, r3, #32
 8000434:	409f      	lsls	r7, r3
 8000436:	fa20 f202 	lsr.w	r2, r0, r2
 800043a:	4317      	orrs	r7, r2
 800043c:	409c      	lsls	r4, r3
 800043e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000442:	fa1f f58c 	uxth.w	r5, ip
 8000446:	fbb7 f1fe 	udiv	r1, r7, lr
 800044a:	0c22      	lsrs	r2, r4, #16
 800044c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000450:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000454:	fb01 f005 	mul.w	r0, r1, r5
 8000458:	4290      	cmp	r0, r2
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x62>
 800045c:	eb1c 0202 	adds.w	r2, ip, r2
 8000460:	f101 37ff 	add.w	r7, r1, #4294967295
 8000464:	f080 811c 	bcs.w	80006a0 <__udivmoddi4+0x290>
 8000468:	4290      	cmp	r0, r2
 800046a:	f240 8119 	bls.w	80006a0 <__udivmoddi4+0x290>
 800046e:	3902      	subs	r1, #2
 8000470:	4462      	add	r2, ip
 8000472:	1a12      	subs	r2, r2, r0
 8000474:	b2a4      	uxth	r4, r4
 8000476:	fbb2 f0fe 	udiv	r0, r2, lr
 800047a:	fb0e 2210 	mls	r2, lr, r0, r2
 800047e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000482:	fb00 f505 	mul.w	r5, r0, r5
 8000486:	42a5      	cmp	r5, r4
 8000488:	d90a      	bls.n	80004a0 <__udivmoddi4+0x90>
 800048a:	eb1c 0404 	adds.w	r4, ip, r4
 800048e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000492:	f080 8107 	bcs.w	80006a4 <__udivmoddi4+0x294>
 8000496:	42a5      	cmp	r5, r4
 8000498:	f240 8104 	bls.w	80006a4 <__udivmoddi4+0x294>
 800049c:	4464      	add	r4, ip
 800049e:	3802      	subs	r0, #2
 80004a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80004a4:	1b64      	subs	r4, r4, r5
 80004a6:	2100      	movs	r1, #0
 80004a8:	b11e      	cbz	r6, 80004b2 <__udivmoddi4+0xa2>
 80004aa:	40dc      	lsrs	r4, r3
 80004ac:	2300      	movs	r3, #0
 80004ae:	e9c6 4300 	strd	r4, r3, [r6]
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0xbc>
 80004ba:	2e00      	cmp	r6, #0
 80004bc:	f000 80ed 	beq.w	800069a <__udivmoddi4+0x28a>
 80004c0:	2100      	movs	r1, #0
 80004c2:	e9c6 0500 	strd	r0, r5, [r6]
 80004c6:	4608      	mov	r0, r1
 80004c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004cc:	fab3 f183 	clz	r1, r3
 80004d0:	2900      	cmp	r1, #0
 80004d2:	d149      	bne.n	8000568 <__udivmoddi4+0x158>
 80004d4:	42ab      	cmp	r3, r5
 80004d6:	d302      	bcc.n	80004de <__udivmoddi4+0xce>
 80004d8:	4282      	cmp	r2, r0
 80004da:	f200 80f8 	bhi.w	80006ce <__udivmoddi4+0x2be>
 80004de:	1a84      	subs	r4, r0, r2
 80004e0:	eb65 0203 	sbc.w	r2, r5, r3
 80004e4:	2001      	movs	r0, #1
 80004e6:	4617      	mov	r7, r2
 80004e8:	2e00      	cmp	r6, #0
 80004ea:	d0e2      	beq.n	80004b2 <__udivmoddi4+0xa2>
 80004ec:	e9c6 4700 	strd	r4, r7, [r6]
 80004f0:	e7df      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004f2:	b902      	cbnz	r2, 80004f6 <__udivmoddi4+0xe6>
 80004f4:	deff      	udf	#255	; 0xff
 80004f6:	fab2 f382 	clz	r3, r2
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	f040 8090 	bne.w	8000620 <__udivmoddi4+0x210>
 8000500:	1a8a      	subs	r2, r1, r2
 8000502:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000506:	fa1f fe8c 	uxth.w	lr, ip
 800050a:	2101      	movs	r1, #1
 800050c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000510:	fb07 2015 	mls	r0, r7, r5, r2
 8000514:	0c22      	lsrs	r2, r4, #16
 8000516:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800051a:	fb0e f005 	mul.w	r0, lr, r5
 800051e:	4290      	cmp	r0, r2
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x124>
 8000522:	eb1c 0202 	adds.w	r2, ip, r2
 8000526:	f105 38ff 	add.w	r8, r5, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x122>
 800052c:	4290      	cmp	r0, r2
 800052e:	f200 80cb 	bhi.w	80006c8 <__udivmoddi4+0x2b8>
 8000532:	4645      	mov	r5, r8
 8000534:	1a12      	subs	r2, r2, r0
 8000536:	b2a4      	uxth	r4, r4
 8000538:	fbb2 f0f7 	udiv	r0, r2, r7
 800053c:	fb07 2210 	mls	r2, r7, r0, r2
 8000540:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000544:	fb0e fe00 	mul.w	lr, lr, r0
 8000548:	45a6      	cmp	lr, r4
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x14e>
 800054c:	eb1c 0404 	adds.w	r4, ip, r4
 8000550:	f100 32ff 	add.w	r2, r0, #4294967295
 8000554:	d202      	bcs.n	800055c <__udivmoddi4+0x14c>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f200 80bb 	bhi.w	80006d2 <__udivmoddi4+0x2c2>
 800055c:	4610      	mov	r0, r2
 800055e:	eba4 040e 	sub.w	r4, r4, lr
 8000562:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000566:	e79f      	b.n	80004a8 <__udivmoddi4+0x98>
 8000568:	f1c1 0720 	rsb	r7, r1, #32
 800056c:	408b      	lsls	r3, r1
 800056e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000572:	ea4c 0c03 	orr.w	ip, ip, r3
 8000576:	fa05 f401 	lsl.w	r4, r5, r1
 800057a:	fa20 f307 	lsr.w	r3, r0, r7
 800057e:	40fd      	lsrs	r5, r7
 8000580:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000584:	4323      	orrs	r3, r4
 8000586:	fbb5 f8f9 	udiv	r8, r5, r9
 800058a:	fa1f fe8c 	uxth.w	lr, ip
 800058e:	fb09 5518 	mls	r5, r9, r8, r5
 8000592:	0c1c      	lsrs	r4, r3, #16
 8000594:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000598:	fb08 f50e 	mul.w	r5, r8, lr
 800059c:	42a5      	cmp	r5, r4
 800059e:	fa02 f201 	lsl.w	r2, r2, r1
 80005a2:	fa00 f001 	lsl.w	r0, r0, r1
 80005a6:	d90b      	bls.n	80005c0 <__udivmoddi4+0x1b0>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80005b0:	f080 8088 	bcs.w	80006c4 <__udivmoddi4+0x2b4>
 80005b4:	42a5      	cmp	r5, r4
 80005b6:	f240 8085 	bls.w	80006c4 <__udivmoddi4+0x2b4>
 80005ba:	f1a8 0802 	sub.w	r8, r8, #2
 80005be:	4464      	add	r4, ip
 80005c0:	1b64      	subs	r4, r4, r5
 80005c2:	b29d      	uxth	r5, r3
 80005c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80005c8:	fb09 4413 	mls	r4, r9, r3, r4
 80005cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005d4:	45a6      	cmp	lr, r4
 80005d6:	d908      	bls.n	80005ea <__udivmoddi4+0x1da>
 80005d8:	eb1c 0404 	adds.w	r4, ip, r4
 80005dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80005e0:	d26c      	bcs.n	80006bc <__udivmoddi4+0x2ac>
 80005e2:	45a6      	cmp	lr, r4
 80005e4:	d96a      	bls.n	80006bc <__udivmoddi4+0x2ac>
 80005e6:	3b02      	subs	r3, #2
 80005e8:	4464      	add	r4, ip
 80005ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ee:	fba3 9502 	umull	r9, r5, r3, r2
 80005f2:	eba4 040e 	sub.w	r4, r4, lr
 80005f6:	42ac      	cmp	r4, r5
 80005f8:	46c8      	mov	r8, r9
 80005fa:	46ae      	mov	lr, r5
 80005fc:	d356      	bcc.n	80006ac <__udivmoddi4+0x29c>
 80005fe:	d053      	beq.n	80006a8 <__udivmoddi4+0x298>
 8000600:	b156      	cbz	r6, 8000618 <__udivmoddi4+0x208>
 8000602:	ebb0 0208 	subs.w	r2, r0, r8
 8000606:	eb64 040e 	sbc.w	r4, r4, lr
 800060a:	fa04 f707 	lsl.w	r7, r4, r7
 800060e:	40ca      	lsrs	r2, r1
 8000610:	40cc      	lsrs	r4, r1
 8000612:	4317      	orrs	r7, r2
 8000614:	e9c6 7400 	strd	r7, r4, [r6]
 8000618:	4618      	mov	r0, r3
 800061a:	2100      	movs	r1, #0
 800061c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000620:	f1c3 0120 	rsb	r1, r3, #32
 8000624:	fa02 fc03 	lsl.w	ip, r2, r3
 8000628:	fa20 f201 	lsr.w	r2, r0, r1
 800062c:	fa25 f101 	lsr.w	r1, r5, r1
 8000630:	409d      	lsls	r5, r3
 8000632:	432a      	orrs	r2, r5
 8000634:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000638:	fa1f fe8c 	uxth.w	lr, ip
 800063c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000640:	fb07 1510 	mls	r5, r7, r0, r1
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800064a:	fb00 f50e 	mul.w	r5, r0, lr
 800064e:	428d      	cmp	r5, r1
 8000650:	fa04 f403 	lsl.w	r4, r4, r3
 8000654:	d908      	bls.n	8000668 <__udivmoddi4+0x258>
 8000656:	eb1c 0101 	adds.w	r1, ip, r1
 800065a:	f100 38ff 	add.w	r8, r0, #4294967295
 800065e:	d22f      	bcs.n	80006c0 <__udivmoddi4+0x2b0>
 8000660:	428d      	cmp	r5, r1
 8000662:	d92d      	bls.n	80006c0 <__udivmoddi4+0x2b0>
 8000664:	3802      	subs	r0, #2
 8000666:	4461      	add	r1, ip
 8000668:	1b49      	subs	r1, r1, r5
 800066a:	b292      	uxth	r2, r2
 800066c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000670:	fb07 1115 	mls	r1, r7, r5, r1
 8000674:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000678:	fb05 f10e 	mul.w	r1, r5, lr
 800067c:	4291      	cmp	r1, r2
 800067e:	d908      	bls.n	8000692 <__udivmoddi4+0x282>
 8000680:	eb1c 0202 	adds.w	r2, ip, r2
 8000684:	f105 38ff 	add.w	r8, r5, #4294967295
 8000688:	d216      	bcs.n	80006b8 <__udivmoddi4+0x2a8>
 800068a:	4291      	cmp	r1, r2
 800068c:	d914      	bls.n	80006b8 <__udivmoddi4+0x2a8>
 800068e:	3d02      	subs	r5, #2
 8000690:	4462      	add	r2, ip
 8000692:	1a52      	subs	r2, r2, r1
 8000694:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000698:	e738      	b.n	800050c <__udivmoddi4+0xfc>
 800069a:	4631      	mov	r1, r6
 800069c:	4630      	mov	r0, r6
 800069e:	e708      	b.n	80004b2 <__udivmoddi4+0xa2>
 80006a0:	4639      	mov	r1, r7
 80006a2:	e6e6      	b.n	8000472 <__udivmoddi4+0x62>
 80006a4:	4610      	mov	r0, r2
 80006a6:	e6fb      	b.n	80004a0 <__udivmoddi4+0x90>
 80006a8:	4548      	cmp	r0, r9
 80006aa:	d2a9      	bcs.n	8000600 <__udivmoddi4+0x1f0>
 80006ac:	ebb9 0802 	subs.w	r8, r9, r2
 80006b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80006b4:	3b01      	subs	r3, #1
 80006b6:	e7a3      	b.n	8000600 <__udivmoddi4+0x1f0>
 80006b8:	4645      	mov	r5, r8
 80006ba:	e7ea      	b.n	8000692 <__udivmoddi4+0x282>
 80006bc:	462b      	mov	r3, r5
 80006be:	e794      	b.n	80005ea <__udivmoddi4+0x1da>
 80006c0:	4640      	mov	r0, r8
 80006c2:	e7d1      	b.n	8000668 <__udivmoddi4+0x258>
 80006c4:	46d0      	mov	r8, sl
 80006c6:	e77b      	b.n	80005c0 <__udivmoddi4+0x1b0>
 80006c8:	3d02      	subs	r5, #2
 80006ca:	4462      	add	r2, ip
 80006cc:	e732      	b.n	8000534 <__udivmoddi4+0x124>
 80006ce:	4608      	mov	r0, r1
 80006d0:	e70a      	b.n	80004e8 <__udivmoddi4+0xd8>
 80006d2:	4464      	add	r4, ip
 80006d4:	3802      	subs	r0, #2
 80006d6:	e742      	b.n	800055e <__udivmoddi4+0x14e>

080006d8 <__aeabi_idiv0>:
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop

080006dc <HG2_Write_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);

	return reg_value;
}

void HG2_Write_Register(uint8_t addr, uint8_t data){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	460a      	mov	r2, r1
 80006e6:	71fb      	strb	r3, [r7, #7]
 80006e8:	4613      	mov	r3, r2
 80006ea:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f2:	480c      	ldr	r0, [pc, #48]	; (8000724 <HG2_Write_Register+0x48>)
 80006f4:	f007 fcc2 	bl	800807c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80006f8:	1df9      	adds	r1, r7, #7
 80006fa:	2364      	movs	r3, #100	; 0x64
 80006fc:	2201      	movs	r2, #1
 80006fe:	480a      	ldr	r0, [pc, #40]	; (8000728 <HG2_Write_Register+0x4c>)
 8000700:	f00e fa58 	bl	800ebb4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000704:	1db9      	adds	r1, r7, #6
 8000706:	2364      	movs	r3, #100	; 0x64
 8000708:	2201      	movs	r2, #1
 800070a:	4807      	ldr	r0, [pc, #28]	; (8000728 <HG2_Write_Register+0x4c>)
 800070c:	f00e fa52 	bl	800ebb4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 8000710:	2201      	movs	r2, #1
 8000712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000716:	4803      	ldr	r0, [pc, #12]	; (8000724 <HG2_Write_Register+0x48>)
 8000718:	f007 fcb0 	bl	800807c <HAL_GPIO_WritePin>

}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	58020c00 	.word	0x58020c00
 8000728:	24000fc0 	.word	0x24000fc0

0800072c <LG2_Read_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
}



uint8_t LG2_Read_Register(uint8_t addr){
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	addr |= (1<<7);
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800073c:	b2db      	uxtb	r3, r3
 800073e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <LG2_Read_Register+0x50>)
 8000748:	f007 fc98 	bl	800807c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 800074c:	1df9      	adds	r1, r7, #7
 800074e:	2364      	movs	r3, #100	; 0x64
 8000750:	2201      	movs	r2, #1
 8000752:	480b      	ldr	r0, [pc, #44]	; (8000780 <LG2_Read_Register+0x54>)
 8000754:	f00e fa2e 	bl	800ebb4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &reg_value, 1, 100);
 8000758:	f107 010f 	add.w	r1, r7, #15
 800075c:	2364      	movs	r3, #100	; 0x64
 800075e:	2201      	movs	r2, #1
 8000760:	4807      	ldr	r0, [pc, #28]	; (8000780 <LG2_Read_Register+0x54>)
 8000762:	f00e fc23 	bl	800efac <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <LG2_Read_Register+0x50>)
 800076e:	f007 fc85 	bl	800807c <HAL_GPIO_WritePin>

	return reg_value;
 8000772:	7bfb      	ldrb	r3, [r7, #15]
}
 8000774:	4618      	mov	r0, r3
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	58020c00 	.word	0x58020c00
 8000780:	24000fc0 	.word	0x24000fc0

08000784 <LG2_Write_Register>:

void LG2_Write_Register(uint8_t addr, uint8_t data){
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	460a      	mov	r2, r1
 800078e:	71fb      	strb	r3, [r7, #7]
 8000790:	4613      	mov	r3, r2
 8000792:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 7180 	mov.w	r1, #256	; 0x100
 800079a:	480c      	ldr	r0, [pc, #48]	; (80007cc <LG2_Write_Register+0x48>)
 800079c:	f007 fc6e 	bl	800807c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80007a0:	1df9      	adds	r1, r7, #7
 80007a2:	2364      	movs	r3, #100	; 0x64
 80007a4:	2201      	movs	r2, #1
 80007a6:	480a      	ldr	r0, [pc, #40]	; (80007d0 <LG2_Write_Register+0x4c>)
 80007a8:	f00e fa04 	bl	800ebb4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 80007ac:	1db9      	adds	r1, r7, #6
 80007ae:	2364      	movs	r3, #100	; 0x64
 80007b0:	2201      	movs	r2, #1
 80007b2:	4807      	ldr	r0, [pc, #28]	; (80007d0 <LG2_Write_Register+0x4c>)
 80007b4:	f00e f9fe 	bl	800ebb4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 80007b8:	2201      	movs	r2, #1
 80007ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007be:	4803      	ldr	r0, [pc, #12]	; (80007cc <LG2_Write_Register+0x48>)
 80007c0:	f007 fc5c 	bl	800807c <HAL_GPIO_WritePin>

}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	58020c00 	.word	0x58020c00
 80007d0:	24000fc0 	.word	0x24000fc0

080007d4 <LG2_Get_Gyro_X>:

float LG2_Get_Gyro_X(){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x22);
 80007da:	2022      	movs	r0, #34	; 0x22
 80007dc:	f7ff ffa6 	bl	800072c <LG2_Read_Register>
 80007e0:	4603      	mov	r3, r0
 80007e2:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x23);
 80007e4:	2023      	movs	r0, #35	; 0x23
 80007e6:	f7ff ffa1 	bl	800072c <LG2_Read_Register>
 80007ea:	4603      	mov	r3, r0
 80007ec:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80007ee:	79bb      	ldrb	r3, [r7, #6]
 80007f0:	021b      	lsls	r3, r3, #8
 80007f2:	b21a      	sxth	r2, r3
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	4313      	orrs	r3, r2
 80007fa:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 80007fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000800:	ee07 3a90 	vmov	s15, r3
 8000804:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000808:	eddf 6a08 	vldr	s13, [pc, #32]	; 800082c <LG2_Get_Gyro_X+0x58>
 800080c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000810:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000830 <LG2_Get_Gyro_X+0x5c>
 8000814:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000818:	edc7 7a00 	vstr	s15, [r7]
	return omega;
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	ee07 3a90 	vmov	s15, r3
}
 8000822:	eeb0 0a67 	vmov.f32	s0, s15
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	46fffe00 	.word	0x46fffe00
 8000830:	437a0000 	.word	0x437a0000

08000834 <LG2_Get_Gyro_Y>:

float LG2_Get_Gyro_Y(){
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x24);
 800083a:	2024      	movs	r0, #36	; 0x24
 800083c:	f7ff ff76 	bl	800072c <LG2_Read_Register>
 8000840:	4603      	mov	r3, r0
 8000842:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x25);
 8000844:	2025      	movs	r0, #37	; 0x25
 8000846:	f7ff ff71 	bl	800072c <LG2_Read_Register>
 800084a:	4603      	mov	r3, r0
 800084c:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	b21a      	sxth	r2, r3
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	b21b      	sxth	r3, r3
 8000858:	4313      	orrs	r3, r2
 800085a:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 800085c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000860:	ee07 3a90 	vmov	s15, r3
 8000864:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000868:	eddf 6a08 	vldr	s13, [pc, #32]	; 800088c <LG2_Get_Gyro_Y+0x58>
 800086c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000870:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000890 <LG2_Get_Gyro_Y+0x5c>
 8000874:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000878:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	ee07 3a90 	vmov	s15, r3
}
 8000882:	eeb0 0a67 	vmov.f32	s0, s15
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	46fffe00 	.word	0x46fffe00
 8000890:	437a0000 	.word	0x437a0000
 8000894:	00000000 	.word	0x00000000

08000898 <LG2_Get_Gyro_Z>:

float LG2_Get_Gyro_Z(){
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x26);
 800089e:	2026      	movs	r0, #38	; 0x26
 80008a0:	f7ff ff44 	bl	800072c <LG2_Read_Register>
 80008a4:	4603      	mov	r3, r0
 80008a6:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x27);
 80008a8:	2027      	movs	r0, #39	; 0x27
 80008aa:	f7ff ff3f 	bl	800072c <LG2_Read_Register>
 80008ae:	4603      	mov	r3, r0
 80008b0:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80008b2:	79bb      	ldrb	r3, [r7, #6]
 80008b4:	021b      	lsls	r3, r3, #8
 80008b6:	b21a      	sxth	r2, r3
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	b21b      	sxth	r3, r3
 80008bc:	4313      	orrs	r3, r2
 80008be:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767.0) * 250.0;
 80008c0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008c4:	ee07 3a90 	vmov	s15, r3
 80008c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008cc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80008d0:	ed9f 5b09 	vldr	d5, [pc, #36]	; 80008f8 <LG2_Get_Gyro_Z+0x60>
 80008d4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008d8:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000900 <LG2_Get_Gyro_Z+0x68>
 80008dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008e0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008e4:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	ee07 3a90 	vmov	s15, r3
}
 80008ee:	eeb0 0a67 	vmov.f32	s0, s15
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	00000000 	.word	0x00000000
 80008fc:	40dfffc0 	.word	0x40dfffc0
 8000900:	00000000 	.word	0x00000000
 8000904:	406f4000 	.word	0x406f4000

08000908 <setServo>:
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;


void setServo(int servoNum, float angle){
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal =(int)( 3000 + (4000 * (angle/180)));
 8000914:	ed97 7a00 	vldr	s14, [r7]
 8000918:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000988 <setServo+0x80>
 800091c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000920:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800098c <setServo+0x84>
 8000924:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000928:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000990 <setServo+0x88>
 800092c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000930:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000934:	ee17 3a90 	vmov	r3, s15
 8000938:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	3b01      	subs	r3, #1
 800093e:	2b03      	cmp	r3, #3
 8000940:	d81a      	bhi.n	8000978 <setServo+0x70>
 8000942:	a201      	add	r2, pc, #4	; (adr r2, 8000948 <setServo+0x40>)
 8000944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000948:	08000959 	.word	0x08000959
 800094c:	08000961 	.word	0x08000961
 8000950:	08000969 	.word	0x08000969
 8000954:	08000971 	.word	0x08000971
		case 1:
			TIM4->CCR4 = timerVal;
 8000958:	4a0e      	ldr	r2, [pc, #56]	; (8000994 <setServo+0x8c>)
 800095a:	89fb      	ldrh	r3, [r7, #14]
 800095c:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 800095e:	e00c      	b.n	800097a <setServo+0x72>
		case 2:
			TIM4->CCR3 = timerVal;
 8000960:	4a0c      	ldr	r2, [pc, #48]	; (8000994 <setServo+0x8c>)
 8000962:	89fb      	ldrh	r3, [r7, #14]
 8000964:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 8000966:	e008      	b.n	800097a <setServo+0x72>
		case 3:
			TIM4->CCR2 = timerVal;
 8000968:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <setServo+0x8c>)
 800096a:	89fb      	ldrh	r3, [r7, #14]
 800096c:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 800096e:	e004      	b.n	800097a <setServo+0x72>
		case 4:
			TIM4->CCR1 = timerVal;
 8000970:	4a08      	ldr	r2, [pc, #32]	; (8000994 <setServo+0x8c>)
 8000972:	89fb      	ldrh	r3, [r7, #14]
 8000974:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8000976:	e000      	b.n	800097a <setServo+0x72>

		default:
			break;
 8000978:	bf00      	nop
	}
}
 800097a:	bf00      	nop
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	43340000 	.word	0x43340000
 800098c:	457a0000 	.word	0x457a0000
 8000990:	453b8000 	.word	0x453b8000
 8000994:	40000800 	.word	0x40000800

08000998 <setLEDs>:

void setLEDs(void) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b08e      	sub	sp, #56	; 0x38
 800099c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 800099e:	2300      	movs	r3, #0
 80009a0:	637b      	str	r3, [r7, #52]	; 0x34
 80009a2:	e181      	b.n	8000ca8 <setLEDs+0x310>
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 80009a4:	4aa1      	ldr	r2, [pc, #644]	; (8000c2c <setLEDs+0x294>)
 80009a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80009ac:	2b03      	cmp	r3, #3
 80009ae:	f200 8177 	bhi.w	8000ca0 <setLEDs+0x308>
 80009b2:	a201      	add	r2, pc, #4	; (adr r2, 80009b8 <setLEDs+0x20>)
 80009b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b8:	080009c9 	.word	0x080009c9
 80009bc:	08000a79 	.word	0x08000a79
 80009c0:	08000b29 	.word	0x08000b29
 80009c4:	08000bd9 	.word	0x08000bd9
		case 0:
			for (int j = 0; j < 3; j++) {
 80009c8:	2300      	movs	r3, #0
 80009ca:	633b      	str	r3, [r7, #48]	; 0x30
 80009cc:	e042      	b.n	8000a54 <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 80009ce:	2300      	movs	r3, #0
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009d2:	e039      	b.n	8000a48 <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 80009d4:	4996      	ldr	r1, [pc, #600]	; (8000c30 <setLEDs+0x298>)
 80009d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009d8:	4613      	mov	r3, r2
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	4413      	add	r3, r2
 80009de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80009e0:	4413      	add	r3, r2
 80009e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009e6:	2180      	movs	r1, #128	; 0x80
 80009e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009ea:	fa41 f202 	asr.w	r2, r1, r2
 80009ee:	4013      	ands	r3, r2
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d013      	beq.n	8000a1c <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 80009f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009f6:	00da      	lsls	r2, r3, #3
 80009f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009fa:	18d1      	adds	r1, r2, r3
 80009fc:	4a8b      	ldr	r2, [pc, #556]	; (8000c2c <setLEDs+0x294>)
 80009fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	4413      	add	r3, r2
 8000a04:	685a      	ldr	r2, [r3, #4]
 8000a06:	4613      	mov	r3, r2
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	4413      	add	r3, r2
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	440b      	add	r3, r1
 8000a10:	3308      	adds	r3, #8
 8000a12:	4a88      	ldr	r2, [pc, #544]	; (8000c34 <setLEDs+0x29c>)
 8000a14:	213c      	movs	r1, #60	; 0x3c
 8000a16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a1a:	e012      	b.n	8000a42 <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a1e:	00da      	lsls	r2, r3, #3
 8000a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a22:	18d1      	adds	r1, r2, r3
 8000a24:	4a81      	ldr	r2, [pc, #516]	; (8000c2c <setLEDs+0x294>)
 8000a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a28:	00db      	lsls	r3, r3, #3
 8000a2a:	4413      	add	r3, r2
 8000a2c:	685a      	ldr	r2, [r3, #4]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	4413      	add	r3, r2
 8000a34:	00db      	lsls	r3, r3, #3
 8000a36:	440b      	add	r3, r1
 8000a38:	3308      	adds	r3, #8
 8000a3a:	4a7e      	ldr	r2, [pc, #504]	; (8000c34 <setLEDs+0x29c>)
 8000a3c:	211e      	movs	r1, #30
 8000a3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a44:	3301      	adds	r3, #1
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4a:	2b07      	cmp	r3, #7
 8000a4c:	ddc2      	ble.n	80009d4 <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 8000a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a50:	3301      	adds	r3, #1
 8000a52:	633b      	str	r3, [r7, #48]	; 0x30
 8000a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	ddb9      	ble.n	80009ce <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000a5a:	2380      	movs	r3, #128	; 0x80
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a5e:	e007      	b.n	8000a70 <setLEDs+0xd8>
				LED_PWM_Data_0[i] = 0;
 8000a60:	4a74      	ldr	r2, [pc, #464]	; (8000c34 <setLEDs+0x29c>)
 8000a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a64:	2100      	movs	r1, #0
 8000a66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a72:	2bb1      	cmp	r3, #177	; 0xb1
 8000a74:	ddf4      	ble.n	8000a60 <setLEDs+0xc8>
			}
			break;
 8000a76:	e114      	b.n	8000ca2 <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a7c:	e042      	b.n	8000b04 <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
 8000a82:	e039      	b.n	8000af8 <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000a84:	496a      	ldr	r1, [pc, #424]	; (8000c30 <setLEDs+0x298>)
 8000a86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a88:	4613      	mov	r3, r2
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	4413      	add	r3, r2
 8000a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a90:	4413      	add	r3, r2
 8000a92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a96:	2180      	movs	r1, #128	; 0x80
 8000a98:	6a3a      	ldr	r2, [r7, #32]
 8000a9a:	fa41 f202 	asr.w	r2, r1, r2
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d013      	beq.n	8000acc <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa6:	00da      	lsls	r2, r3, #3
 8000aa8:	6a3b      	ldr	r3, [r7, #32]
 8000aaa:	18d1      	adds	r1, r2, r3
 8000aac:	4a5f      	ldr	r2, [pc, #380]	; (8000c2c <setLEDs+0x294>)
 8000aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	4413      	add	r3, r2
 8000ab4:	685a      	ldr	r2, [r3, #4]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	4413      	add	r3, r2
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	440b      	add	r3, r1
 8000ac0:	3308      	adds	r3, #8
 8000ac2:	4a5d      	ldr	r2, [pc, #372]	; (8000c38 <setLEDs+0x2a0>)
 8000ac4:	213c      	movs	r1, #60	; 0x3c
 8000ac6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000aca:	e012      	b.n	8000af2 <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ace:	00da      	lsls	r2, r3, #3
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
 8000ad2:	18d1      	adds	r1, r2, r3
 8000ad4:	4a55      	ldr	r2, [pc, #340]	; (8000c2c <setLEDs+0x294>)
 8000ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	4413      	add	r3, r2
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	4413      	add	r3, r2
 8000ae4:	00db      	lsls	r3, r3, #3
 8000ae6:	440b      	add	r3, r1
 8000ae8:	3308      	adds	r3, #8
 8000aea:	4a53      	ldr	r2, [pc, #332]	; (8000c38 <setLEDs+0x2a0>)
 8000aec:	211e      	movs	r1, #30
 8000aee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000af2:	6a3b      	ldr	r3, [r7, #32]
 8000af4:	3301      	adds	r3, #1
 8000af6:	623b      	str	r3, [r7, #32]
 8000af8:	6a3b      	ldr	r3, [r7, #32]
 8000afa:	2b07      	cmp	r3, #7
 8000afc:	ddc2      	ble.n	8000a84 <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 8000afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b00:	3301      	adds	r3, #1
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
 8000b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	ddb9      	ble.n	8000a7e <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000b0a:	2380      	movs	r3, #128	; 0x80
 8000b0c:	61fb      	str	r3, [r7, #28]
 8000b0e:	e007      	b.n	8000b20 <setLEDs+0x188>
				LED_PWM_Data_1[i] = 0;
 8000b10:	4a49      	ldr	r2, [pc, #292]	; (8000c38 <setLEDs+0x2a0>)
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	2100      	movs	r1, #0
 8000b16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	61fb      	str	r3, [r7, #28]
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	2bb1      	cmp	r3, #177	; 0xb1
 8000b24:	ddf4      	ble.n	8000b10 <setLEDs+0x178>
			}
			break;
 8000b26:	e0bc      	b.n	8000ca2 <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61bb      	str	r3, [r7, #24]
 8000b2c:	e042      	b.n	8000bb4 <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	e039      	b.n	8000ba8 <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000b34:	493e      	ldr	r1, [pc, #248]	; (8000c30 <setLEDs+0x298>)
 8000b36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b38:	4613      	mov	r3, r2
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	4413      	add	r3, r2
 8000b3e:	69ba      	ldr	r2, [r7, #24]
 8000b40:	4413      	add	r3, r2
 8000b42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b46:	2180      	movs	r1, #128	; 0x80
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	fa41 f202 	asr.w	r2, r1, r2
 8000b4e:	4013      	ands	r3, r2
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d013      	beq.n	8000b7c <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	00da      	lsls	r2, r3, #3
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	18d1      	adds	r1, r2, r3
 8000b5c:	4a33      	ldr	r2, [pc, #204]	; (8000c2c <setLEDs+0x294>)
 8000b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	4413      	add	r3, r2
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	4613      	mov	r3, r2
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	4413      	add	r3, r2
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	440b      	add	r3, r1
 8000b70:	3308      	adds	r3, #8
 8000b72:	4a32      	ldr	r2, [pc, #200]	; (8000c3c <setLEDs+0x2a4>)
 8000b74:	213c      	movs	r1, #60	; 0x3c
 8000b76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000b7a:	e012      	b.n	8000ba2 <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	00da      	lsls	r2, r3, #3
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	18d1      	adds	r1, r2, r3
 8000b84:	4a29      	ldr	r2, [pc, #164]	; (8000c2c <setLEDs+0x294>)
 8000b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	4413      	add	r3, r2
 8000b8c:	685a      	ldr	r2, [r3, #4]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	4413      	add	r3, r2
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	440b      	add	r3, r1
 8000b98:	3308      	adds	r3, #8
 8000b9a:	4a28      	ldr	r2, [pc, #160]	; (8000c3c <setLEDs+0x2a4>)
 8000b9c:	211e      	movs	r1, #30
 8000b9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	2b07      	cmp	r3, #7
 8000bac:	ddc2      	ble.n	8000b34 <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	61bb      	str	r3, [r7, #24]
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	ddb9      	ble.n	8000b2e <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000bba:	2338      	movs	r3, #56	; 0x38
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	e007      	b.n	8000bd0 <setLEDs+0x238>
				LED_PWM_Data_2[i] = 0;
 8000bc0:	4a1e      	ldr	r2, [pc, #120]	; (8000c3c <setLEDs+0x2a4>)
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	2b69      	cmp	r3, #105	; 0x69
 8000bd4:	ddf4      	ble.n	8000bc0 <setLEDs+0x228>
			}
			break;
 8000bd6:	e064      	b.n	8000ca2 <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	e04e      	b.n	8000c7c <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	e045      	b.n	8000c70 <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000be4:	4912      	ldr	r1, [pc, #72]	; (8000c30 <setLEDs+0x298>)
 8000be6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000be8:	4613      	mov	r3, r2
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	4413      	add	r3, r2
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bf6:	2180      	movs	r1, #128	; 0x80
 8000bf8:	68ba      	ldr	r2, [r7, #8]
 8000bfa:	fa41 f202 	asr.w	r2, r1, r2
 8000bfe:	4013      	ands	r3, r2
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d01f      	beq.n	8000c44 <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	00da      	lsls	r2, r3, #3
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	18d1      	adds	r1, r2, r3
 8000c0c:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <setLEDs+0x294>)
 8000c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	4413      	add	r3, r2
 8000c14:	685a      	ldr	r2, [r3, #4]
 8000c16:	4613      	mov	r3, r2
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	4413      	add	r3, r2
 8000c1c:	00db      	lsls	r3, r3, #3
 8000c1e:	440b      	add	r3, r1
 8000c20:	3308      	adds	r3, #8
 8000c22:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <setLEDs+0x2a8>)
 8000c24:	213c      	movs	r1, #60	; 0x3c
 8000c26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000c2a:	e01e      	b.n	8000c6a <setLEDs+0x2d2>
 8000c2c:	080185b8 	.word	0x080185b8
 8000c30:	24000b50 	.word	0x24000b50
 8000c34:	24000270 	.word	0x24000270
 8000c38:	24000538 	.word	0x24000538
 8000c3c:	24000800 	.word	0x24000800
 8000c40:	240009a8 	.word	0x240009a8
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	00da      	lsls	r2, r3, #3
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	18d1      	adds	r1, r2, r3
 8000c4c:	4a26      	ldr	r2, [pc, #152]	; (8000ce8 <setLEDs+0x350>)
 8000c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	4413      	add	r3, r2
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	4613      	mov	r3, r2
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	4413      	add	r3, r2
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	440b      	add	r3, r1
 8000c60:	3308      	adds	r3, #8
 8000c62:	4a22      	ldr	r2, [pc, #136]	; (8000cec <setLEDs+0x354>)
 8000c64:	211e      	movs	r1, #30
 8000c66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	2b07      	cmp	r3, #7
 8000c74:	ddb6      	ble.n	8000be4 <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	ddad      	ble.n	8000bde <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000c82:	2338      	movs	r3, #56	; 0x38
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	e007      	b.n	8000c98 <setLEDs+0x300>
				LED_PWM_Data_3[i] = 0;
 8000c88:	4a18      	ldr	r2, [pc, #96]	; (8000cec <setLEDs+0x354>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	3301      	adds	r3, #1
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b69      	cmp	r3, #105	; 0x69
 8000c9c:	ddf4      	ble.n	8000c88 <setLEDs+0x2f0>
			}
			break;
 8000c9e:	e000      	b.n	8000ca2 <setLEDs+0x30a>
		default:
			break;
 8000ca0:	bf00      	nop
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 8000ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8000ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000caa:	2b0d      	cmp	r3, #13
 8000cac:	f77f ae7a 	ble.w	80009a4 <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0, (NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
 8000cb0:	23b2      	movs	r3, #178	; 0xb2
 8000cb2:	4a0f      	ldr	r2, [pc, #60]	; (8000cf0 <setLEDs+0x358>)
 8000cb4:	210c      	movs	r1, #12
 8000cb6:	480f      	ldr	r0, [pc, #60]	; (8000cf4 <setLEDs+0x35c>)
 8000cb8:	f00e fdbc 	bl	800f834 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1, (NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
 8000cbc:	23b2      	movs	r3, #178	; 0xb2
 8000cbe:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <setLEDs+0x360>)
 8000cc0:	2108      	movs	r1, #8
 8000cc2:	480e      	ldr	r0, [pc, #56]	; (8000cfc <setLEDs+0x364>)
 8000cc4:	f00e fdb6 	bl	800f834 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2, (NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
 8000cc8:	236a      	movs	r3, #106	; 0x6a
 8000cca:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <setLEDs+0x368>)
 8000ccc:	2104      	movs	r1, #4
 8000cce:	480d      	ldr	r0, [pc, #52]	; (8000d04 <setLEDs+0x36c>)
 8000cd0:	f00e fdb0 	bl	800f834 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3, (NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3
 8000cd4:	236a      	movs	r3, #106	; 0x6a
 8000cd6:	4a05      	ldr	r2, [pc, #20]	; (8000cec <setLEDs+0x354>)
 8000cd8:	2100      	movs	r1, #0
 8000cda:	480a      	ldr	r0, [pc, #40]	; (8000d04 <setLEDs+0x36c>)
 8000cdc:	f00e fdaa 	bl	800f834 <HAL_TIM_PWM_Start_DMA>

}
 8000ce0:	bf00      	nop
 8000ce2:	3738      	adds	r7, #56	; 0x38
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	080185b8 	.word	0x080185b8
 8000cec:	240009a8 	.word	0x240009a8
 8000cf0:	24000270 	.word	0x24000270
 8000cf4:	240011b4 	.word	0x240011b4
 8000cf8:	24000538 	.word	0x24000538
 8000cfc:	240010d0 	.word	0x240010d0
 8000d00:	24000800 	.word	0x24000800
 8000d04:	2400111c 	.word	0x2400111c

08000d08 <LoRA_Read_Register>:
	}
}



uint8_t LoRA_Read_Register(uint8_t addr){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d18:	480d      	ldr	r0, [pc, #52]	; (8000d50 <LoRA_Read_Register+0x48>)
 8000d1a:	f007 f9af 	bl	800807c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000d1e:	1df9      	adds	r1, r7, #7
 8000d20:	2364      	movs	r3, #100	; 0x64
 8000d22:	2201      	movs	r2, #1
 8000d24:	480b      	ldr	r0, [pc, #44]	; (8000d54 <LoRA_Read_Register+0x4c>)
 8000d26:	f00d ff45 	bl	800ebb4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 8000d2a:	f107 010f 	add.w	r1, r7, #15
 8000d2e:	2364      	movs	r3, #100	; 0x64
 8000d30:	2201      	movs	r2, #1
 8000d32:	4808      	ldr	r0, [pc, #32]	; (8000d54 <LoRA_Read_Register+0x4c>)
 8000d34:	f00e f93a 	bl	800efac <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d3e:	4804      	ldr	r0, [pc, #16]	; (8000d50 <LoRA_Read_Register+0x48>)
 8000d40:	f007 f99c 	bl	800807c <HAL_GPIO_WritePin>

	return reg_value;
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	58020000 	.word	0x58020000
 8000d54:	24001048 	.word	0x24001048

08000d58 <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	460a      	mov	r2, r1
 8000d62:	71fb      	strb	r3, [r7, #7]
 8000d64:	4613      	mov	r3, r2
 8000d66:	71bb      	strb	r3, [r7, #6]
	addr |= (1<<7);
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d78:	480c      	ldr	r0, [pc, #48]	; (8000dac <LoRA_Write_Register+0x54>)
 8000d7a:	f007 f97f 	bl	800807c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000d7e:	1df9      	adds	r1, r7, #7
 8000d80:	2364      	movs	r3, #100	; 0x64
 8000d82:	2201      	movs	r2, #1
 8000d84:	480a      	ldr	r0, [pc, #40]	; (8000db0 <LoRA_Write_Register+0x58>)
 8000d86:	f00d ff15 	bl	800ebb4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8000d8a:	1db9      	adds	r1, r7, #6
 8000d8c:	2364      	movs	r3, #100	; 0x64
 8000d8e:	2201      	movs	r2, #1
 8000d90:	4807      	ldr	r0, [pc, #28]	; (8000db0 <LoRA_Write_Register+0x58>)
 8000d92:	f00d ff0f 	bl	800ebb4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d96:	2201      	movs	r2, #1
 8000d98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d9c:	4803      	ldr	r0, [pc, #12]	; (8000dac <LoRA_Write_Register+0x54>)
 8000d9e:	f007 f96d 	bl	800807c <HAL_GPIO_WritePin>

}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	58020000 	.word	0x58020000
 8000db0:	24001048 	.word	0x24001048

08000db4 <LoRA_sleep>:


void LoRA_sleep(void){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000db8:	2180      	movs	r1, #128	; 0x80
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f7ff ffcc 	bl	8000d58 <LoRA_Write_Register>
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency){
 8000dc4:	b5b0      	push	{r4, r5, r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8000dcc:	6879      	ldr	r1, [r7, #4]
 8000dce:	17c8      	asrs	r0, r1, #31
 8000dd0:	460a      	mov	r2, r1
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	1355      	asrs	r5, r2, #13
 8000dd6:	04d4      	lsls	r4, r2, #19
 8000dd8:	4a18      	ldr	r2, [pc, #96]	; (8000e3c <LoRA_set_frequency+0x78>)
 8000dda:	f04f 0300 	mov.w	r3, #0
 8000dde:	4620      	mov	r0, r4
 8000de0:	4629      	mov	r1, r5
 8000de2:	f7ff fafd 	bl	80003e0 <__aeabi_uldivmod>
 8000de6:	4602      	mov	r2, r0
 8000de8:	460b      	mov	r3, r1
 8000dea:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8000dee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000df2:	f04f 0200 	mov.w	r2, #0
 8000df6:	f04f 0300 	mov.w	r3, #0
 8000dfa:	0c02      	lsrs	r2, r0, #16
 8000dfc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e00:	0c0b      	lsrs	r3, r1, #16
 8000e02:	b2d3      	uxtb	r3, r2
 8000e04:	4619      	mov	r1, r3
 8000e06:	2006      	movs	r0, #6
 8000e08:	f7ff ffa6 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t)(frf >> 8));
 8000e0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e10:	f04f 0200 	mov.w	r2, #0
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	0a02      	lsrs	r2, r0, #8
 8000e1a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000e1e:	0a0b      	lsrs	r3, r1, #8
 8000e20:	b2d3      	uxtb	r3, r2
 8000e22:	4619      	mov	r1, r3
 8000e24:	2007      	movs	r0, #7
 8000e26:	f7ff ff97 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8000e2a:	7a3b      	ldrb	r3, [r7, #8]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	2008      	movs	r0, #8
 8000e30:	f7ff ff92 	bl	8000d58 <LoRA_Write_Register>
}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e3c:	01e84800 	.word	0x01e84800

08000e40 <LoRA_idle>:

void LoRA_idle(){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8000e44:	2181      	movs	r1, #129	; 0x81
 8000e46:	2001      	movs	r0, #1
 8000e48:	f7ff ff86 	bl	8000d58 <LoRA_Write_Register>
}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <LoRA_setOCP>:

void LoRA_setOCP(uint8_t mA){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
	  uint8_t ocpTrim = 27;
 8000e5a:	231b      	movs	r3, #27
 8000e5c:	73fb      	strb	r3, [r7, #15]

	  if (mA <= 120) {
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	2b78      	cmp	r3, #120	; 0x78
 8000e62:	d809      	bhi.n	8000e78 <LoRA_setOCP+0x28>
	    ocpTrim = (mA - 45) / 5;
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	3b2d      	subs	r3, #45	; 0x2d
 8000e68:	4a11      	ldr	r2, [pc, #68]	; (8000eb0 <LoRA_setOCP+0x60>)
 8000e6a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e6e:	1052      	asrs	r2, r2, #1
 8000e70:	17db      	asrs	r3, r3, #31
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	73fb      	strb	r3, [r7, #15]
 8000e76:	e00b      	b.n	8000e90 <LoRA_setOCP+0x40>
	  } else if (mA <=240) {
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	2bf0      	cmp	r3, #240	; 0xf0
 8000e7c:	d808      	bhi.n	8000e90 <LoRA_setOCP+0x40>
	    ocpTrim = (mA + 30) / 10;
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	331e      	adds	r3, #30
 8000e82:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <LoRA_setOCP+0x60>)
 8000e84:	fb82 1203 	smull	r1, r2, r2, r3
 8000e88:	1092      	asrs	r2, r2, #2
 8000e8a:	17db      	asrs	r3, r3, #31
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	73fb      	strb	r3, [r7, #15]
	  }

	  LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	f003 031f 	and.w	r3, r3, #31
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	f043 0320 	orr.w	r3, r3, #32
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	200b      	movs	r0, #11
 8000ea2:	f7ff ff59 	bl	8000d58 <LoRA_Write_Register>
}
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	66666667 	.word	0x66666667

08000eb4 <LoRA_setTxPower>:

void LoRA_setTxPower(int level){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
    // PA BOOST
    if (level > 17) {
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b11      	cmp	r3, #17
 8000ec0:	dd0f      	ble.n	8000ee2 <LoRA_setTxPower+0x2e>
      if (level > 20) {
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b14      	cmp	r3, #20
 8000ec6:	dd01      	ble.n	8000ecc <LoRA_setTxPower+0x18>
        level = 20;
 8000ec8:	2314      	movs	r3, #20
 8000eca:	607b      	str	r3, [r7, #4]
      }

      // subtract 3 from level, so 18 - 20 maps to 15 - 17
      level -= 3;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b03      	subs	r3, #3
 8000ed0:	607b      	str	r3, [r7, #4]

      // High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
      LoRA_Write_Register(REG_PA_DAC, 0x87);
 8000ed2:	2187      	movs	r1, #135	; 0x87
 8000ed4:	204d      	movs	r0, #77	; 0x4d
 8000ed6:	f7ff ff3f 	bl	8000d58 <LoRA_Write_Register>
      LoRA_setOCP(140);
 8000eda:	208c      	movs	r0, #140	; 0x8c
 8000edc:	f7ff ffb8 	bl	8000e50 <LoRA_setOCP>
 8000ee0:	e00b      	b.n	8000efa <LoRA_setTxPower+0x46>
    } else {
      if (level < 2) {
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	dc01      	bgt.n	8000eec <LoRA_setTxPower+0x38>
        level = 2;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	607b      	str	r3, [r7, #4]
      }
      //Default value PA_HF/LF or +17dBm
      LoRA_Write_Register(REG_PA_DAC, 0x84);
 8000eec:	2184      	movs	r1, #132	; 0x84
 8000eee:	204d      	movs	r0, #77	; 0x4d
 8000ef0:	f7ff ff32 	bl	8000d58 <LoRA_Write_Register>
      LoRA_setOCP(100);
 8000ef4:	2064      	movs	r0, #100	; 0x64
 8000ef6:	f7ff ffab 	bl	8000e50 <LoRA_setOCP>
    }

    LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	3b02      	subs	r3, #2
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	b25b      	sxtb	r3, r3
 8000f04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f08:	b25b      	sxtb	r3, r3
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	2009      	movs	r0, #9
 8000f10:	f7ff ff22 	bl	8000d58 <LoRA_Write_Register>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode(){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1, LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 8000f20:	201d      	movs	r0, #29
 8000f22:	f7ff fef1 	bl	8000d08 <LoRA_Read_Register>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f023 0301 	bic.w	r3, r3, #1
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	4619      	mov	r1, r3
 8000f30:	201d      	movs	r0, #29
 8000f32:	f7ff ff11 	bl	8000d58 <LoRA_Write_Register>
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <LoRA_begin>:

void LoRA_begin(long frequency){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b09c      	sub	sp, #112	; 0x70
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8000f44:	2201      	movs	r2, #1
 8000f46:	2101      	movs	r1, #1
 8000f48:	4822      	ldr	r0, [pc, #136]	; (8000fd4 <LoRA_begin+0x98>)
 8000f4a:	f007 f897 	bl	800807c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f54:	4820      	ldr	r0, [pc, #128]	; (8000fd8 <LoRA_begin+0x9c>)
 8000f56:	f007 f891 	bl	800807c <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 8000f5a:	2042      	movs	r0, #66	; 0x42
 8000f5c:	f7ff fed4 	bl	8000d08 <LoRA_Read_Register>
 8000f60:	4603      	mov	r3, r0
 8000f62:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    char data_debug[100];
	sprintf( data_debug,  "%x\n", version);
 8000f66:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000f6a:	f107 0308 	add.w	r3, r7, #8
 8000f6e:	491b      	ldr	r1, [pc, #108]	; (8000fdc <LoRA_begin+0xa0>)
 8000f70:	4618      	mov	r0, r3
 8000f72:	f016 f8cb 	bl	801710c <siprintf>
	CDC_Transmit_HS(data_debug, strlen(data_debug));
 8000f76:	f107 0308 	add.w	r3, r7, #8
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff f9d2 	bl	8000324 <strlen>
 8000f80:	4602      	mov	r2, r0
 8000f82:	f107 0308 	add.w	r3, r7, #8
 8000f86:	4611      	mov	r1, r2
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f015 fc6b 	bl	8016864 <CDC_Transmit_HS>

	LoRA_sleep();
 8000f8e:	f7ff ff11 	bl	8000db4 <LoRA_sleep>
	LoRA_set_frequency(868000000);
 8000f92:	4813      	ldr	r0, [pc, #76]	; (8000fe0 <LoRA_begin+0xa4>)
 8000f94:	f7ff ff16 	bl	8000dc4 <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 8000f98:	2100      	movs	r1, #0
 8000f9a:	200f      	movs	r0, #15
 8000f9c:	f7ff fedc 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	200e      	movs	r0, #14
 8000fa4:	f7ff fed8 	bl	8000d58 <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 8000fa8:	200c      	movs	r0, #12
 8000faa:	f7ff fead 	bl	8000d08 <LoRA_Read_Register>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	f043 0303 	orr.w	r3, r3, #3
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	200c      	movs	r0, #12
 8000fba:	f7ff fecd 	bl	8000d58 <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8000fbe:	2104      	movs	r1, #4
 8000fc0:	2026      	movs	r0, #38	; 0x26
 8000fc2:	f7ff fec9 	bl	8000d58 <LoRA_Write_Register>

	LoRA_setTxPower(17);
 8000fc6:	2011      	movs	r0, #17
 8000fc8:	f7ff ff74 	bl	8000eb4 <LoRA_setTxPower>

}
 8000fcc:	bf00      	nop
 8000fce:	3770      	adds	r7, #112	; 0x70
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	58020c00 	.word	0x58020c00
 8000fd8:	58020000 	.word	0x58020000
 8000fdc:	080183f0 	.word	0x080183f0
 8000fe0:	33bca100 	.word	0x33bca100

08000fe4 <LoRA_beginPacket>:


void LoRA_beginPacket(){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	LoRA_explicit_header_mode();
 8000fe8:	f7ff ff98 	bl	8000f1c <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8000fec:	2100      	movs	r1, #0
 8000fee:	200d      	movs	r0, #13
 8000ff0:	f7ff feb2 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, 0);
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2022      	movs	r0, #34	; 0x22
 8000ff8:	f7ff feae 	bl	8000d58 <LoRA_Write_Register>
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <LoRA_endPacket>:

void LoRA_endPacket(){
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8001004:	2183      	movs	r1, #131	; 0x83
 8001006:	2001      	movs	r0, #1
 8001008:	f7ff fea6 	bl	8000d58 <LoRA_Write_Register>

	while((LoRA_Read_Register(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0){
 800100c:	bf00      	nop
 800100e:	2012      	movs	r0, #18
 8001010:	f7ff fe7a 	bl	8000d08 <LoRA_Read_Register>
 8001014:	4603      	mov	r3, r0
 8001016:	f003 0308 	and.w	r3, r3, #8
 800101a:	2b00      	cmp	r3, #0
 800101c:	d0f7      	beq.n	800100e <LoRA_endPacket+0xe>

	}
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 800101e:	2185      	movs	r1, #133	; 0x85
 8001020:	2001      	movs	r0, #1
 8001022:	f7ff fe99 	bl	8000d58 <LoRA_Write_Register>

	LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8001026:	2108      	movs	r1, #8
 8001028:	2012      	movs	r0, #18
 800102a:	f7ff fe95 	bl	8000d58 <LoRA_Write_Register>

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}

08001032 <LoRA_parsePacket>:


int LoRA_parsePacket(){
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
	int packetLenght = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	607b      	str	r3, [r7, #4]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 800103c:	2012      	movs	r0, #18
 800103e:	f7ff fe63 	bl	8000d08 <LoRA_Read_Register>
 8001042:	4603      	mov	r3, r0
 8001044:	603b      	str	r3, [r7, #0]

	LoRA_explicit_header_mode();
 8001046:	f7ff ff69 	bl	8000f1c <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	4619      	mov	r1, r3
 8001050:	2012      	movs	r0, #18
 8001052:	f7ff fe81 	bl	8000d58 <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800105c:	2b00      	cmp	r3, #0
 800105e:	d016      	beq.n	800108e <LoRA_parsePacket+0x5c>
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	f003 0320 	and.w	r3, r3, #32
 8001066:	2b00      	cmp	r3, #0
 8001068:	d111      	bne.n	800108e <LoRA_parsePacket+0x5c>
		packetLenght = LoRA_Read_Register(REG_RX_NB_BYTES);
 800106a:	2013      	movs	r0, #19
 800106c:	f7ff fe4c 	bl	8000d08 <LoRA_Read_Register>
 8001070:	4603      	mov	r3, r0
 8001072:	607b      	str	r3, [r7, #4]
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 8001074:	2010      	movs	r0, #16
 8001076:	f7ff fe47 	bl	8000d08 <LoRA_Read_Register>
 800107a:	4603      	mov	r3, r0
 800107c:	4619      	mov	r1, r3
 800107e:	200d      	movs	r0, #13
 8001080:	f7ff fe6a 	bl	8000d58 <LoRA_Write_Register>
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8001084:	2185      	movs	r1, #133	; 0x85
 8001086:	2001      	movs	r0, #1
 8001088:	f7ff fe66 	bl	8000d58 <LoRA_Write_Register>
 800108c:	e00d      	b.n	80010aa <LoRA_parsePacket+0x78>

		//LoRA_idle();
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS)){
 800108e:	2001      	movs	r0, #1
 8001090:	f7ff fe3a 	bl	8000d08 <LoRA_Read_Register>
 8001094:	4603      	mov	r3, r0
 8001096:	2b85      	cmp	r3, #133	; 0x85
 8001098:	d007      	beq.n	80010aa <LoRA_parsePacket+0x78>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 800109a:	2100      	movs	r1, #0
 800109c:	200d      	movs	r0, #13
 800109e:	f7ff fe5b 	bl	8000d58 <LoRA_Write_Register>

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 80010a2:	2185      	movs	r1, #133	; 0x85
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff fe57 	bl	8000d58 <LoRA_Write_Register>
	}
	return packetLenght;
 80010aa:	687b      	ldr	r3, [r7, #4]

}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <LoRA_sendPacket>:

void LoRA_sendPacket(char * data){
 80010b4:	b5b0      	push	{r4, r5, r7, lr}
 80010b6:	b0c4      	sub	sp, #272	; 0x110
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80010c2:	6018      	str	r0, [r3, #0]
	LoRA_idle();
 80010c4:	f7ff febc 	bl	8000e40 <LoRA_idle>

	char debug[MAX_PAYLOAD_LENGHT];
	if(recv_packet(debug, MAX_PAYLOAD_LENGHT)) {
 80010c8:	f107 030c 	add.w	r3, r7, #12
 80010cc:	21fa      	movs	r1, #250	; 0xfa
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 f8dc 	bl	800128c <recv_packet>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d022      	beq.n	8001120 <LoRA_sendPacket+0x6c>
		HAL_Delay(100);
 80010da:	2064      	movs	r0, #100	; 0x64
 80010dc:	f002 fd1c 	bl	8003b18 <HAL_Delay>
		strcat(debug, " was thrown away");
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff f91d 	bl	8000324 <strlen>
 80010ea:	4603      	mov	r3, r0
 80010ec:	461a      	mov	r2, r3
 80010ee:	f107 030c 	add.w	r3, r7, #12
 80010f2:	4413      	add	r3, r2
 80010f4:	4a32      	ldr	r2, [pc, #200]	; (80011c0 <LoRA_sendPacket+0x10c>)
 80010f6:	461d      	mov	r5, r3
 80010f8:	4614      	mov	r4, r2
 80010fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010fc:	6028      	str	r0, [r5, #0]
 80010fe:	6069      	str	r1, [r5, #4]
 8001100:	60aa      	str	r2, [r5, #8]
 8001102:	60eb      	str	r3, [r5, #12]
 8001104:	7823      	ldrb	r3, [r4, #0]
 8001106:	742b      	strb	r3, [r5, #16]
		CDC_Transmit_HS(debug, strlen(debug));
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff f909 	bl	8000324 <strlen>
 8001112:	4602      	mov	r2, r0
 8001114:	f107 030c 	add.w	r3, r7, #12
 8001118:	4611      	mov	r1, r2
 800111a:	4618      	mov	r0, r3
 800111c:	f015 fba2 	bl	8016864 <CDC_Transmit_HS>
	}



	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 8001120:	2012      	movs	r0, #18
 8001122:	f7ff fdf1 	bl	8000d08 <LoRA_Read_Register>
 8001126:	4603      	mov	r3, r0
 8001128:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	/*char debug[250];
	sprintf(debug, "here: %d\n", (irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK));
	CDC_Transmit_HS(debug, strlen(debug));
	HAL_Delay(100);*/
	if(!((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0))
 800112c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001134:	2b00      	cmp	r3, #0
 8001136:	d005      	beq.n	8001144 <LoRA_sendPacket+0x90>
 8001138:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800113c:	f003 0320 	and.w	r3, r3, #32
 8001140:	2b00      	cmp	r3, #0
 8001142:	d033      	beq.n	80011ac <LoRA_sendPacket+0xf8>
	{
		//CDC_Transmit_HS("here1\n", strlen("here1\n"));
		LoRA_beginPacket();
 8001144:	f7ff ff4e 	bl	8000fe4 <LoRA_beginPacket>
    	for(int i = 0; i < strlen(data); i++){
 8001148:	2300      	movs	r3, #0
 800114a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800114e:	e011      	b.n	8001174 <LoRA_sendPacket+0xc0>
    		LoRA_Write_Register(REG_FIFO, data[i]);
 8001150:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001154:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001158:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800115c:	6812      	ldr	r2, [r2, #0]
 800115e:	4413      	add	r3, r2
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	4619      	mov	r1, r3
 8001164:	2000      	movs	r0, #0
 8001166:	f7ff fdf7 	bl	8000d58 <LoRA_Write_Register>
    	for(int i = 0; i < strlen(data); i++){
 800116a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800116e:	3301      	adds	r3, #1
 8001170:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001174:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001178:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800117c:	6818      	ldr	r0, [r3, #0]
 800117e:	f7ff f8d1 	bl	8000324 <strlen>
 8001182:	4602      	mov	r2, r0
 8001184:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001188:	429a      	cmp	r2, r3
 800118a:	d8e1      	bhi.n	8001150 <LoRA_sendPacket+0x9c>
    	}
    	LoRA_Write_Register(REG_PAYLOAD_LENGTH, strlen(data));
 800118c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001190:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001194:	6818      	ldr	r0, [r3, #0]
 8001196:	f7ff f8c5 	bl	8000324 <strlen>
 800119a:	4603      	mov	r3, r0
 800119c:	b2db      	uxtb	r3, r3
 800119e:	4619      	mov	r1, r3
 80011a0:	2022      	movs	r0, #34	; 0x22
 80011a2:	f7ff fdd9 	bl	8000d58 <LoRA_Write_Register>
    	LoRA_endPacket();
 80011a6:	f7ff ff2b 	bl	8001000 <LoRA_endPacket>
 80011aa:	e004      	b.n	80011b6 <LoRA_sendPacket+0x102>
    	HAL_Delay(100);
    	CDC_Transmit_HS(sent, strlen(sent));*/
	}
	else {
		//CDC_Transmit_HS("here2\n", strlen("here2\n"));
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 80011ac:	2185      	movs	r1, #133	; 0x85
 80011ae:	2001      	movs	r0, #1
 80011b0:	f7ff fdd2 	bl	8000d58 <LoRA_Write_Register>
	}
	/*char sent[300];
	sprintf(sent, "\nsent: %s\n", data);
	HAL_Delay(100);
	CDC_Transmit_HS(sent, strlen(sent));*/
}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80011bc:	46bd      	mov	sp, r7
 80011be:	bdb0      	pop	{r4, r5, r7, pc}
 80011c0:	080183f4 	.word	0x080183f4

080011c4 <disarm>:
	int status = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
	return status;
}

int disarm(char* state)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2102      	movs	r1, #2
 80011d0:	4827      	ldr	r0, [pc, #156]	; (8001270 <disarm+0xac>)
 80011d2:	f006 ff53 	bl	800807c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2104      	movs	r1, #4
 80011da:	4825      	ldr	r0, [pc, #148]	; (8001270 <disarm+0xac>)
 80011dc:	f006 ff4e 	bl	800807c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2102      	movs	r1, #2
 80011e4:	4823      	ldr	r0, [pc, #140]	; (8001274 <disarm+0xb0>)
 80011e6:	f006 ff49 	bl	800807c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011f0:	4821      	ldr	r0, [pc, #132]	; (8001278 <disarm+0xb4>)
 80011f2:	f006 ff43 	bl	800807c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011fc:	481e      	ldr	r0, [pc, #120]	; (8001278 <disarm+0xb4>)
 80011fe:	f006 ff3d 	bl	800807c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001208:	481b      	ldr	r0, [pc, #108]	; (8001278 <disarm+0xb4>)
 800120a:	f006 ff37 	bl	800807c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2102      	movs	r1, #2
 8001212:	481a      	ldr	r0, [pc, #104]	; (800127c <disarm+0xb8>)
 8001214:	f006 ff32 	bl	800807c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 8001218:	2200      	movs	r2, #0
 800121a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800121e:	4818      	ldr	r0, [pc, #96]	; (8001280 <disarm+0xbc>)
 8001220:	f006 ff2c 	bl	800807c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 8001224:	2200      	movs	r2, #0
 8001226:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800122a:	4815      	ldr	r0, [pc, #84]	; (8001280 <disarm+0xbc>)
 800122c:	f006 ff26 	bl	800807c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 8001230:	2200      	movs	r2, #0
 8001232:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001236:	4812      	ldr	r0, [pc, #72]	; (8001280 <disarm+0xbc>)
 8001238:	f006 ff20 	bl	800807c <HAL_GPIO_WritePin>

  LED_Color_Data[7][0] = 255;
 800123c:	4b11      	ldr	r3, [pc, #68]	; (8001284 <disarm+0xc0>)
 800123e:	22ff      	movs	r2, #255	; 0xff
 8001240:	655a      	str	r2, [r3, #84]	; 0x54
  LED_Color_Data[7][1] = 0;
 8001242:	4b10      	ldr	r3, [pc, #64]	; (8001284 <disarm+0xc0>)
 8001244:	2200      	movs	r2, #0
 8001246:	659a      	str	r2, [r3, #88]	; 0x58
  LED_Color_Data[7][2] = 0;
 8001248:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <disarm+0xc0>)
 800124a:	2200      	movs	r2, #0
 800124c:	65da      	str	r2, [r3, #92]	; 0x5c
  setLEDs();
 800124e:	f7ff fba3 	bl	8000998 <setLEDs>

  strcpy(state,"DISARMED");
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	490c      	ldr	r1, [pc, #48]	; (8001288 <disarm+0xc4>)
 8001256:	461a      	mov	r2, r3
 8001258:	460b      	mov	r3, r1
 800125a:	cb03      	ldmia	r3!, {r0, r1}
 800125c:	6010      	str	r0, [r2, #0]
 800125e:	6051      	str	r1, [r2, #4]
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	7213      	strb	r3, [r2, #8]
  return 0;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	58020000 	.word	0x58020000
 8001274:	58020400 	.word	0x58020400
 8001278:	58021400 	.word	0x58021400
 800127c:	58021800 	.word	0x58021800
 8001280:	58021000 	.word	0x58021000
 8001284:	24000b50 	.word	0x24000b50
 8001288:	08018408 	.word	0x08018408

0800128c <recv_packet>:
  setLEDs();
  return 0;
}

int recv_packet(char* LoRA_data, int max_length)
{
 800128c:	b590      	push	{r4, r7, lr}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  int packet_length = LoRA_parsePacket();
 8001296:	f7ff fecc 	bl	8001032 <LoRA_parsePacket>
 800129a:	60b8      	str	r0, [r7, #8]
  if(max_length-1 < packet_length) //-1 for the null terminator
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	dc01      	bgt.n	80012a8 <recv_packet+0x1c>
  {
    return 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	e01c      	b.n	80012e2 <recv_packet+0x56>
  }
  if(packet_length){
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d018      	beq.n	80012e0 <recv_packet+0x54>
    for(int i = 0; i < packet_length; i++){
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	e00a      	b.n	80012ca <recv_packet+0x3e>
      LoRA_data[i] = LoRA_Read_Register(0x00);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	18d4      	adds	r4, r2, r3
 80012ba:	2000      	movs	r0, #0
 80012bc:	f7ff fd24 	bl	8000d08 <LoRA_Read_Register>
 80012c0:	4603      	mov	r3, r0
 80012c2:	7023      	strb	r3, [r4, #0]
    for(int i = 0; i < packet_length; i++){
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	3301      	adds	r3, #1
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	dbf0      	blt.n	80012b4 <recv_packet+0x28>
    }
    LoRA_data[packet_length] = '\0';
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	4413      	add	r3, r2
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]

    /*char rec[300];
    sprintf(rec, "received: %s\n", LoRA_data);
    CDC_Transmit_HS(rec, strlen(rec));*/
    return packet_length;
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	e000      	b.n	80012e2 <recv_packet+0x56>
  }
  else{
    return 0;
 80012e0:	2300      	movs	r3, #0
  }
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd90      	pop	{r4, r7, pc}

080012ea <reliable_send_packet>:

void reliable_send_packet(char *LoRA_data) {
 80012ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012ee:	b087      	sub	sp, #28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	466b      	mov	r3, sp
 80012f6:	461e      	mov	r6, r3
	//CDC_Transmit_HS("debug\n", strlen("debug\n"));
	uint16_t length = strlen(LoRA_data) + 1; //+1 for the \0
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff f813 	bl	8000324 <strlen>
 80012fe:	4603      	mov	r3, r0
 8001300:	b29b      	uxth	r3, r3
 8001302:	3301      	adds	r3, #1
 8001304:	827b      	strh	r3, [r7, #18]
	char acknowledge[length];
 8001306:	8a79      	ldrh	r1, [r7, #18]
 8001308:	460b      	mov	r3, r1
 800130a:	3b01      	subs	r3, #1
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	b28b      	uxth	r3, r1
 8001310:	2200      	movs	r2, #0
 8001312:	4698      	mov	r8, r3
 8001314:	4691      	mov	r9, r2
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001322:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001326:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800132a:	b28b      	uxth	r3, r1
 800132c:	2200      	movs	r2, #0
 800132e:	461c      	mov	r4, r3
 8001330:	4615      	mov	r5, r2
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	f04f 0300 	mov.w	r3, #0
 800133a:	00eb      	lsls	r3, r5, #3
 800133c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001340:	00e2      	lsls	r2, r4, #3
 8001342:	460b      	mov	r3, r1
 8001344:	3307      	adds	r3, #7
 8001346:	08db      	lsrs	r3, r3, #3
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	ebad 0d03 	sub.w	sp, sp, r3
 800134e:	466b      	mov	r3, sp
 8001350:	3300      	adds	r3, #0
 8001352:	60bb      	str	r3, [r7, #8]
	uint32_t lastTime = HAL_GetTick();
 8001354:	f002 fbd4 	bl	8003b00 <HAL_GetTick>
 8001358:	6178      	str	r0, [r7, #20]
	LoRA_sendPacket(LoRA_data);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff feaa 	bl	80010b4 <LoRA_sendPacket>
	while (1) {

		if (recv_packet(acknowledge, length)) {
 8001360:	8a7b      	ldrh	r3, [r7, #18]
 8001362:	4619      	mov	r1, r3
 8001364:	68b8      	ldr	r0, [r7, #8]
 8001366:	f7ff ff91 	bl	800128c <recv_packet>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d009      	beq.n	8001384 <reliable_send_packet+0x9a>
			//cehck crc
			if (strcmp(acknowledge, LoRA_data) != 0) {
 8001370:	6879      	ldr	r1, [r7, #4]
 8001372:	68b8      	ldr	r0, [r7, #8]
 8001374:	f7fe ffcc 	bl	8000310 <strcmp>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d011      	beq.n	80013a2 <reliable_send_packet+0xb8>
				LoRA_sendPacket(LoRA_data);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff fe98 	bl	80010b4 <LoRA_sendPacket>
			} else {
				break;
			}
		}

		if (HAL_GetTick() - lastTime > 1000) {
 8001384:	f002 fbbc 	bl	8003b00 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001392:	d9e5      	bls.n	8001360 <reliable_send_packet+0x76>
	    	//CDC_Transmit_HS("debug\n", strlen("debug\n"));
			LoRA_sendPacket(LoRA_data);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f7ff fe8d 	bl	80010b4 <LoRA_sendPacket>
			lastTime = HAL_GetTick();
 800139a:	f002 fbb1 	bl	8003b00 <HAL_GetTick>
 800139e:	6178      	str	r0, [r7, #20]
		if (recv_packet(acknowledge, length)) {
 80013a0:	e7de      	b.n	8001360 <reliable_send_packet+0x76>
				break;
 80013a2:	bf00      	nop
 80013a4:	46b5      	mov	sp, r6
		}
	}
}
 80013a6:	bf00      	nop
 80013a8:	371c      	adds	r7, #28
 80013aa:	46bd      	mov	sp, r7
 80013ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080013b0 <usbReceiveHandle>:

		reliable_send_packet(message);
	}
}

int usbReceiveHandle(char* output){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	uint32_t temp = usbBytesReady;
 80013b8:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <usbReceiveHandle+0x38>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	60fb      	str	r3, [r7, #12]

	if(temp > 0){
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d00c      	beq.n	80013de <usbReceiveHandle+0x2e>
		if(temp > 256){
			//crash(2);
		}
		memcpy(output, usbDataBuffer, temp);
 80013c4:	68fa      	ldr	r2, [r7, #12]
 80013c6:	4909      	ldr	r1, [pc, #36]	; (80013ec <usbReceiveHandle+0x3c>)
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f015 ff29 	bl	8017220 <memcpy>
		output[temp] = '\0';
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4413      	add	r3, r2
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]
		usbBytesReady = 0;
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <usbReceiveHandle+0x38>)
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
	}
	return temp;
 80013de:	68fb      	ldr	r3, [r7, #12]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	2400026c 	.word	0x2400026c
 80013ec:	2400016c 	.word	0x2400016c

080013f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f2:	f6ad 4d14 	subw	sp, sp, #3092	; 0xc14
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 80013f8:	4bdb      	ldr	r3, [pc, #876]	; (8001768 <main+0x378>)
 80013fa:	f507 6439 	add.w	r4, r7, #2960	; 0xb90
 80013fe:	461d      	mov	r5, r3
 8001400:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001404:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001408:	c403      	stmia	r4!, {r0, r1}
 800140a:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800140c:	f002 faf2 	bl	80039f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001410:	f000 fb78 	bl	8001b04 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001414:	f000 fbee 	bl	8001bf4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001418:	f001 f976 	bl	8002708 <MX_GPIO_Init>
  MX_DMA_Init();
 800141c:	f001 f914 	bl	8002648 <MX_DMA_Init>
  MX_SPI3_Init();
 8001420:	f000 fe6e 	bl	8002100 <MX_SPI3_Init>
  MX_FDCAN3_Init();
 8001424:	f000 fcfe 	bl	8001e24 <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 8001428:	f001 f8c2 	bl	80025b0 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800142c:	f000 fc14 	bl	8001c58 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001430:	f000 ff78 	bl	8002324 <MX_TIM4_Init>
  MX_ADC3_Init();
 8001434:	f000 fc88 	bl	8001d48 <MX_ADC3_Init>
  MX_SPI2_Init();
 8001438:	f000 fe0c 	bl	8002054 <MX_SPI2_Init>
  MX_I2C2_Init();
 800143c:	f000 fd56 	bl	8001eec <MX_I2C2_Init>
  MX_TIM2_Init();
 8001440:	f000 feb4 	bl	80021ac <MX_TIM2_Init>
  MX_TIM5_Init();
 8001444:	f000 ffea 	bl	800241c <MX_TIM5_Init>
  MX_TIM3_Init();
 8001448:	f000 ff08 	bl	800225c <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 800144c:	f015 f934 	bl	80166b8 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8001450:	f000 fdaa 	bl	8001fa8 <MX_SPI1_Init>
  MX_UART4_Init();
 8001454:	f001 f860 	bl	8002518 <MX_UART4_Init>
  MX_FATFS_Init();
 8001458:	f012 fec2 	bl	80141e0 <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 800145c:	f000 fd86 	bl	8001f6c <MX_SDMMC2_SD_Init>
  MX_TIM13_Init();
 8001460:	f001 f836 	bl	80024d0 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

	const int MAX = 50;
 8001464:	2332      	movs	r3, #50	; 0x32
 8001466:	f8c7 3bf4 	str.w	r3, [r7, #3060]	; 0xbf4
	const double SPEED = 2.0/2000;
 800146a:	a3bd      	add	r3, pc, #756	; (adr r3, 8001760 <main+0x370>)
 800146c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001470:	f607 31e8 	addw	r1, r7, #3048	; 0xbe8
 8001474:	e9c1 2300 	strd	r2, r3, [r1]
	const double r_offset = 0;
 8001478:	f04f 0200 	mov.w	r2, #0
 800147c:	f04f 0300 	mov.w	r3, #0
 8001480:	f507 613e 	add.w	r1, r7, #3040	; 0xbe0
 8001484:	e9c1 2300 	strd	r2, r3, [r1]
	const double g_offset = 1;
 8001488:	f04f 0200 	mov.w	r2, #0
 800148c:	4bb7      	ldr	r3, [pc, #732]	; (800176c <main+0x37c>)
 800148e:	f607 31d8 	addw	r1, r7, #3032	; 0xbd8
 8001492:	e9c1 2300 	strd	r2, r3, [r1]
	const double b_offset = 2;
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800149e:	f507 613d 	add.w	r1, r7, #3024	; 0xbd0
 80014a2:	e9c1 2300 	strd	r2, r3, [r1]

	LG2_Write_Register(0x10, 0b00111100); //Accelerometer setup - CTRL1_XL
 80014a6:	213c      	movs	r1, #60	; 0x3c
 80014a8:	2010      	movs	r0, #16
 80014aa:	f7ff f96b 	bl	8000784 <LG2_Write_Register>
	LG2_Write_Register(0x11, 0b00110000); //Gyroscope setup - CTRL2_G
 80014ae:	2130      	movs	r1, #48	; 0x30
 80014b0:	2011      	movs	r0, #17
 80014b2:	f7ff f967 	bl	8000784 <LG2_Write_Register>
	LG2_Write_Register(0x13, 0b00000100); //disables I2C - CTRL4_C
 80014b6:	2104      	movs	r1, #4
 80014b8:	2013      	movs	r0, #19
 80014ba:	f7ff f963 	bl	8000784 <LG2_Write_Register>

	HAL_Delay(3000);
 80014be:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80014c2:	f002 fb29 	bl	8003b18 <HAL_Delay>
	HG2_Write_Register(0x1C, 0b10111111);
 80014c6:	21bf      	movs	r1, #191	; 0xbf
 80014c8:	201c      	movs	r0, #28
 80014ca:	f7ff f907 	bl	80006dc <HG2_Write_Register>
	HAL_Delay(2);
 80014ce:	2002      	movs	r0, #2
 80014d0:	f002 fb22 	bl	8003b18 <HAL_Delay>

	HG2_Write_Register(0x1B, 0b01011000);
 80014d4:	2158      	movs	r1, #88	; 0x58
 80014d6:	201b      	movs	r0, #27
 80014d8:	f7ff f900 	bl	80006dc <HG2_Write_Register>
	HG2_Write_Register(0x1B, 0b11011000);
 80014dc:	21d8      	movs	r1, #216	; 0xd8
 80014de:	201b      	movs	r0, #27
 80014e0:	f7ff f8fc 	bl	80006dc <HG2_Write_Register>

	float rotZ = 0;
 80014e4:	f04f 0300 	mov.w	r3, #0
 80014e8:	f607 32cc 	addw	r2, r7, #3020	; 0xbcc
 80014ec:	6013      	str	r3, [r2, #0]
	uint32_t lastTime = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	f8c7 3c0c 	str.w	r3, [r7, #3084]	; 0xc0c

	float calOmegaX = 0;
 80014f4:	f04f 0300 	mov.w	r3, #0
 80014f8:	f607 4208 	addw	r2, r7, #3080	; 0xc08
 80014fc:	6013      	str	r3, [r2, #0]
	float calOmegaY = 0;
 80014fe:	f04f 0300 	mov.w	r3, #0
 8001502:	f607 4204 	addw	r2, r7, #3076	; 0xc04
 8001506:	6013      	str	r3, [r2, #0]
	float calOmegaZ = 0;
 8001508:	f04f 0300 	mov.w	r3, #0
 800150c:	f507 6240 	add.w	r2, r7, #3072	; 0xc00
 8001510:	6013      	str	r3, [r2, #0]
	//HAL_Delay(2000);
	for(int i = 0; i < 500; i++){
 8001512:	2300      	movs	r3, #0
 8001514:	f8c7 3bfc 	str.w	r3, [r7, #3068]	; 0xbfc
 8001518:	e02e      	b.n	8001578 <main+0x188>
		calOmegaX += LG2_Get_Gyro_X();
 800151a:	f7ff f95b 	bl	80007d4 <LG2_Get_Gyro_X>
 800151e:	eeb0 7a40 	vmov.f32	s14, s0
 8001522:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 8001526:	edd3 7a00 	vldr	s15, [r3]
 800152a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800152e:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 8001532:	edc3 7a00 	vstr	s15, [r3]
		calOmegaY += LG2_Get_Gyro_Y();
 8001536:	f7ff f97d 	bl	8000834 <LG2_Get_Gyro_Y>
 800153a:	eeb0 7a40 	vmov.f32	s14, s0
 800153e:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 8001542:	edd3 7a00 	vldr	s15, [r3]
 8001546:	ee77 7a87 	vadd.f32	s15, s15, s14
 800154a:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 800154e:	edc3 7a00 	vstr	s15, [r3]
		calOmegaZ += LG2_Get_Gyro_Z();
 8001552:	f7ff f9a1 	bl	8000898 <LG2_Get_Gyro_Z>
 8001556:	eeb0 7a40 	vmov.f32	s14, s0
 800155a:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 800155e:	edd3 7a00 	vldr	s15, [r3]
 8001562:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001566:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 800156a:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < 500; i++){
 800156e:	f8d7 3bfc 	ldr.w	r3, [r7, #3068]	; 0xbfc
 8001572:	3301      	adds	r3, #1
 8001574:	f8c7 3bfc 	str.w	r3, [r7, #3068]	; 0xbfc
 8001578:	f8d7 3bfc 	ldr.w	r3, [r7, #3068]	; 0xbfc
 800157c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001580:	dbcb      	blt.n	800151a <main+0x12a>

		//HAL_Delay(20);
	}
	calOmegaX /= 500;
 8001582:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 8001586:	ed93 7a00 	vldr	s14, [r3]
 800158a:	eddf 6a79 	vldr	s13, [pc, #484]	; 8001770 <main+0x380>
 800158e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001592:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 8001596:	edc3 7a00 	vstr	s15, [r3]
	calOmegaY /= 500;
 800159a:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 800159e:	ed93 7a00 	vldr	s14, [r3]
 80015a2:	eddf 6a73 	vldr	s13, [pc, #460]	; 8001770 <main+0x380>
 80015a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015aa:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 80015ae:	edc3 7a00 	vstr	s15, [r3]
	calOmegaZ /= 500;
 80015b2:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80015b6:	ed93 7a00 	vldr	s14, [r3]
 80015ba:	eddf 6a6d 	vldr	s13, [pc, #436]	; 8001770 <main+0x380>
 80015be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015c2:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80015c6:	edc3 7a00 	vstr	s15, [r3]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 80015ca:	2201      	movs	r2, #1
 80015cc:	2101      	movs	r1, #1
 80015ce:	4869      	ldr	r0, [pc, #420]	; (8001774 <main+0x384>)
 80015d0:	f006 fd54 	bl	800807c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80015d4:	20c8      	movs	r0, #200	; 0xc8
 80015d6:	f002 fa9f 	bl	8003b18 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);
 80015da:	2200      	movs	r2, #0
 80015dc:	2101      	movs	r1, #1
 80015de:	4865      	ldr	r0, [pc, #404]	; (8001774 <main+0x384>)
 80015e0:	f006 fd4c 	bl	800807c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80015e4:	20c8      	movs	r0, #200	; 0xc8
 80015e6:	f002 fa97 	bl	8003b18 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 80015ea:	2201      	movs	r2, #1
 80015ec:	2101      	movs	r1, #1
 80015ee:	4861      	ldr	r0, [pc, #388]	; (8001774 <main+0x384>)
 80015f0:	f006 fd44 	bl	800807c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80015f4:	20c8      	movs	r0, #200	; 0xc8
 80015f6:	f002 fa8f 	bl	8003b18 <HAL_Delay>


	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 80015fa:	2201      	movs	r2, #1
 80015fc:	2104      	movs	r1, #4
 80015fe:	485e      	ldr	r0, [pc, #376]	; (8001778 <main+0x388>)
 8001600:	f006 fd3c 	bl	800807c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 8001604:	2201      	movs	r2, #1
 8001606:	2108      	movs	r1, #8
 8001608:	485b      	ldr	r0, [pc, #364]	; (8001778 <main+0x388>)
 800160a:	f006 fd37 	bl	800807c <HAL_GPIO_WritePin>


    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800160e:	2100      	movs	r1, #0
 8001610:	485a      	ldr	r0, [pc, #360]	; (800177c <main+0x38c>)
 8001612:	f00d fff3 	bl	800f5fc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001616:	2104      	movs	r1, #4
 8001618:	4858      	ldr	r0, [pc, #352]	; (800177c <main+0x38c>)
 800161a:	f00d ffef 	bl	800f5fc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800161e:	2108      	movs	r1, #8
 8001620:	4856      	ldr	r0, [pc, #344]	; (800177c <main+0x38c>)
 8001622:	f00d ffeb 	bl	800f5fc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001626:	210c      	movs	r1, #12
 8001628:	4854      	ldr	r0, [pc, #336]	; (800177c <main+0x38c>)
 800162a:	f00d ffe7 	bl	800f5fc <HAL_TIM_PWM_Start>

    setServo(1, 90);
 800162e:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8001780 <main+0x390>
 8001632:	2001      	movs	r0, #1
 8001634:	f7ff f968 	bl	8000908 <setServo>
    setServo(2, 180);
 8001638:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8001784 <main+0x394>
 800163c:	2002      	movs	r0, #2
 800163e:	f7ff f963 	bl	8000908 <setServo>
    setServo(3, 0);
 8001642:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8001788 <main+0x398>
 8001646:	2003      	movs	r0, #3
 8001648:	f7ff f95e 	bl	8000908 <setServo>
    setServo(4, 45);
 800164c:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 800178c <main+0x39c>
 8001650:	2004      	movs	r0, #4
 8001652:	f7ff f959 	bl	8000908 <setServo>
		LoRA_sendPacket("whatever");
		HAL_Delay(1000);
	}
*/

	int connected = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	f8c7 3bc8 	str.w	r3, [r7, #3016]	; 0xbc8
	long last_packet = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	f8c7 3bc4 	str.w	r3, [r7, #3012]	; 0xbc4
	int ARMED = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	f8c7 3bc0 	str.w	r3, [r7, #3008]	; 0xbc0

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//HAL_ADC_Start_DMA(&hadc3, &read_Data, 1);

  int max_packet_count = 0;
 8001668:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 800166c:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
  int stream_counter = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	f8c7 3bbc 	str.w	r3, [r7, #3004]	; 0xbbc
  char state[MAX_PAYLOAD_LENGHT] = "";
 800167a:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 800167e:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	3304      	adds	r3, #4
 8001688:	22f6      	movs	r2, #246	; 0xf6
 800168a:	2100      	movs	r1, #0
 800168c:	4618      	mov	r0, r3
 800168e:	f015 fd8b 	bl	80171a8 <memset>
  char command[MAX_PAYLOAD_LENGHT];
  char acknowledge[MAX_PAYLOAD_LENGHT];
  char previous_packet[MAX_PAYLOAD_LENGHT] = "";
 8001692:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001696:	f5a3 63db 	sub.w	r3, r3, #1752	; 0x6d8
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	3304      	adds	r3, #4
 80016a0:	22f6      	movs	r2, #246	; 0xf6
 80016a2:	2100      	movs	r1, #0
 80016a4:	4618      	mov	r0, r3
 80016a6:	f015 fd7f 	bl	80171a8 <memset>
  char recieved_packet[MAX_PAYLOAD_LENGHT];
  char response_packet[MAX_PAYLOAD_LENGHT];
  char sendMessage[MAX_PAYLOAD_LENGHT];
  int last = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	f8c7 3bb8 	str.w	r3, [r7, #3000]	; 0xbb8
  int packets_streamed = 50;
 80016b0:	2332      	movs	r3, #50	; 0x32
 80016b2:	f8c7 3bb4 	str.w	r3, [r7, #2996]	; 0xbb4
  int packetId;
  int have_recieved_anything = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
  char communication_state[50] = "SENDING RELIABLE";
 80016bc:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80016c0:	f5a3 6620 	sub.w	r6, r3, #2560	; 0xa00
 80016c4:	4b32      	ldr	r3, [pc, #200]	; (8001790 <main+0x3a0>)
 80016c6:	4634      	mov	r4, r6
 80016c8:	461d      	mov	r5, r3
 80016ca:	6828      	ldr	r0, [r5, #0]
 80016cc:	6869      	ldr	r1, [r5, #4]
 80016ce:	68aa      	ldr	r2, [r5, #8]
 80016d0:	68eb      	ldr	r3, [r5, #12]
 80016d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016d4:	7c2b      	ldrb	r3, [r5, #16]
 80016d6:	7023      	strb	r3, [r4, #0]
 80016d8:	f106 0311 	add.w	r3, r6, #17
 80016dc:	2221      	movs	r2, #33	; 0x21
 80016de:	2100      	movs	r1, #0
 80016e0:	4618      	mov	r0, r3
 80016e2:	f015 fd61 	bl	80171a8 <memset>
  uint32_t previousTime = HAL_GetTick();
 80016e6:	f002 fa0b 	bl	8003b00 <HAL_GetTick>
 80016ea:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
  disarm(state);
 80016ee:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fd66 	bl	80011c4 <disarm>
  LoRA_begin(868000000);
 80016f8:	4826      	ldr	r0, [pc, #152]	; (8001794 <main+0x3a4>)
 80016fa:	f7ff fc1f 	bl	8000f3c <LoRA_begin>
	sprintf(debug, "Debug: %s\n", input);
	CDC_Transmit_HS(debug, strlen(debug));
  }*/

while (1) {
    if(strcmp(communication_state,"RECEIVING RELIABLE") == 0)
 80016fe:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001702:	4925      	ldr	r1, [pc, #148]	; (8001798 <main+0x3a8>)
 8001704:	4618      	mov	r0, r3
 8001706:	f7fe fe03 	bl	8000310 <strcmp>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	f040 8089 	bne.w	8001824 <main+0x434>
    {
      if(recv_packet(recieved_packet, MAX_PAYLOAD_LENGHT))
 8001712:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001716:	21fa      	movs	r1, #250	; 0xfa
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fdb7 	bl	800128c <recv_packet>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	f000 81bc 	beq.w	8001a9e <main+0x6ae>
      {
    	have_recieved_anything = 1;
 8001726:	2301      	movs	r3, #1
 8001728:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
        previousTime = HAL_GetTick();
 800172c:	f002 f9e8 	bl	8003b00 <HAL_GetTick>
 8001730:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        //HAL_Delay(100);
        //CDC_Transmit_HS("is arm 0succ\n", strlen("is arm 0succ\n"));
        //HAL_Delay(100);
        if(sscanf(recieved_packet, "$ %s", state) == 1)
 8001734:	f607 022c 	addw	r2, r7, #2092	; 0x82c
 8001738:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800173c:	4917      	ldr	r1, [pc, #92]	; (800179c <main+0x3ac>)
 800173e:	4618      	mov	r0, r3
 8001740:	f015 fd04 	bl	801714c <siscanf>
 8001744:	4603      	mov	r3, r0
 8001746:	2b01      	cmp	r3, #1
 8001748:	d12a      	bne.n	80017a0 <main+0x3b0>
        {
          strcpy(communication_state,"SENDING RELIABLE");
 800174a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800174e:	4a10      	ldr	r2, [pc, #64]	; (8001790 <main+0x3a0>)
 8001750:	461c      	mov	r4, r3
 8001752:	4615      	mov	r5, r2
 8001754:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001758:	682b      	ldr	r3, [r5, #0]
 800175a:	7023      	strb	r3, [r4, #0]
 800175c:	e19f      	b.n	8001a9e <main+0x6ae>
 800175e:	bf00      	nop
 8001760:	d2f1a9fc 	.word	0xd2f1a9fc
 8001764:	3f50624d 	.word	0x3f50624d
 8001768:	08018504 	.word	0x08018504
 800176c:	3ff00000 	.word	0x3ff00000
 8001770:	43fa0000 	.word	0x43fa0000
 8001774:	58020c00 	.word	0x58020c00
 8001778:	58021800 	.word	0x58021800
 800177c:	24001168 	.word	0x24001168
 8001780:	42b40000 	.word	0x42b40000
 8001784:	43340000 	.word	0x43340000
 8001788:	00000000 	.word	0x00000000
 800178c:	42340000 	.word	0x42340000
 8001790:	08018470 	.word	0x08018470
 8001794:	33bca100 	.word	0x33bca100
 8001798:	08018454 	.word	0x08018454
 800179c:	08018468 	.word	0x08018468
        }
        else if(sscanf(recieved_packet, "! %d", &max_packet_count) == 1)
 80017a0:	f607 1228 	addw	r2, r7, #2344	; 0x928
 80017a4:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80017a8:	49c8      	ldr	r1, [pc, #800]	; (8001acc <main+0x6dc>)
 80017aa:	4618      	mov	r0, r3
 80017ac:	f015 fcce 	bl	801714c <siscanf>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d10b      	bne.n	80017ce <main+0x3de>
        {
          strcpy(communication_state,"SENDING STREAM");
 80017b6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80017ba:	4ac5      	ldr	r2, [pc, #788]	; (8001ad0 <main+0x6e0>)
 80017bc:	461c      	mov	r4, r3
 80017be:	4613      	mov	r3, r2
 80017c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017c2:	c407      	stmia	r4!, {r0, r1, r2}
 80017c4:	8023      	strh	r3, [r4, #0]
 80017c6:	3402      	adds	r4, #2
 80017c8:	0c1b      	lsrs	r3, r3, #16
 80017ca:	7023      	strb	r3, [r4, #0]
 80017cc:	e167      	b.n	8001a9e <main+0x6ae>
        }
        else if(strcmp(recieved_packet, previous_packet)==0)
 80017ce:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 80017d2:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80017d6:	4611      	mov	r1, r2
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe fd99 	bl	8000310 <strcmp>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d105      	bne.n	80017f0 <main+0x400>
        {
          //send acknowledge again
          LoRA_sendPacket(recieved_packet);
 80017e4:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fc63 	bl	80010b4 <LoRA_sendPacket>
 80017ee:	e156      	b.n	8001a9e <main+0x6ae>
        }
        else
        {
          //CDC_Transmit_HS("is arm 1succ\n", strlen("is arm 1succ\n"));
          //HAL_Delay(100);
          strcpy(previous_packet, recieved_packet);
 80017f0:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 80017f4:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80017f8:	4611      	mov	r1, r2
 80017fa:	4618      	mov	r0, r3
 80017fc:	f015 fd08 	bl	8017210 <strcpy>
          //HAL_Delay(100);
          LoRA_sendPacket(recieved_packet);
 8001800:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff fc55 	bl	80010b4 <LoRA_sendPacket>
          //HAL_Delay(100);
          /*char debug[250];
          sprintf(debug, "new packet: %s\n", recieved_packet);*/
          CDC_Transmit_HS(recieved_packet, strlen(recieved_packet));
 800180a:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800180e:	4618      	mov	r0, r3
 8001810:	f7fe fd88 	bl	8000324 <strlen>
 8001814:	4602      	mov	r2, r0
 8001816:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800181a:	4611      	mov	r1, r2
 800181c:	4618      	mov	r0, r3
 800181e:	f015 f821 	bl	8016864 <CDC_Transmit_HS>
 8001822:	e13c      	b.n	8001a9e <main+0x6ae>

        }
      }
    }
    else if(strcmp(communication_state,"RECEIVING STREAM") == 0)
 8001824:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001828:	49aa      	ldr	r1, [pc, #680]	; (8001ad4 <main+0x6e4>)
 800182a:	4618      	mov	r0, r3
 800182c:	f7fe fd70 	bl	8000310 <strcmp>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d14a      	bne.n	80018cc <main+0x4dc>
    {
      if(recv_packet(recieved_packet, MAX_PAYLOAD_LENGHT))
 8001836:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800183a:	21fa      	movs	r1, #250	; 0xfa
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fd25 	bl	800128c <recv_packet>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d025      	beq.n	8001894 <main+0x4a4>
      {
        previousTime = HAL_GetTick();
 8001848:	f002 f95a 	bl	8003b00 <HAL_GetTick>
 800184c:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        if(sscanf(recieved_packet, "$ %s", state) == 1)
 8001850:	f607 022c 	addw	r2, r7, #2092	; 0x82c
 8001854:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001858:	499f      	ldr	r1, [pc, #636]	; (8001ad8 <main+0x6e8>)
 800185a:	4618      	mov	r0, r3
 800185c:	f015 fc76 	bl	801714c <siscanf>
 8001860:	4603      	mov	r3, r0
 8001862:	2b01      	cmp	r3, #1
 8001864:	d109      	bne.n	800187a <main+0x48a>
        {
          strcpy(communication_state,"SENDING RELIABLE");
 8001866:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800186a:	4a9c      	ldr	r2, [pc, #624]	; (8001adc <main+0x6ec>)
 800186c:	461c      	mov	r4, r3
 800186e:	4615      	mov	r5, r2
 8001870:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001872:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001874:	682b      	ldr	r3, [r5, #0]
 8001876:	7023      	strb	r3, [r4, #0]
 8001878:	e111      	b.n	8001a9e <main+0x6ae>
        }
        else
        {
          CDC_Transmit_HS(recieved_packet, strlen(recieved_packet));
 800187a:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800187e:	4618      	mov	r0, r3
 8001880:	f7fe fd50 	bl	8000324 <strlen>
 8001884:	4602      	mov	r2, r0
 8001886:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800188a:	4611      	mov	r1, r2
 800188c:	4618      	mov	r0, r3
 800188e:	f014 ffe9 	bl	8016864 <CDC_Transmit_HS>
 8001892:	e104      	b.n	8001a9e <main+0x6ae>
        }
      }
      else if(HAL_GetTick()-previousTime > 1000)
 8001894:	f002 f934 	bl	8003b00 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	f8d7 3bf8 	ldr.w	r3, [r7, #3064]	; 0xbf8
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018a4:	f240 80fb 	bls.w	8001a9e <main+0x6ae>
      {
        previousTime = HAL_GetTick();
 80018a8:	f002 f92a 	bl	8003b00 <HAL_GetTick>
 80018ac:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        //give up SENDING
        sprintf(sendMessage, "! %d", packets_streamed);
 80018b0:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80018b4:	f8d7 2bb4 	ldr.w	r2, [r7, #2996]	; 0xbb4
 80018b8:	4984      	ldr	r1, [pc, #528]	; (8001acc <main+0x6dc>)
 80018ba:	4618      	mov	r0, r3
 80018bc:	f015 fc26 	bl	801710c <siprintf>
        LoRA_sendPacket(sendMessage);
 80018c0:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fbf5 	bl	80010b4 <LoRA_sendPacket>
 80018ca:	e0e8      	b.n	8001a9e <main+0x6ae>
      }
    }
    else if(strcmp(communication_state,"SENDING STREAM") == 0)
 80018cc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80018d0:	497f      	ldr	r1, [pc, #508]	; (8001ad0 <main+0x6e0>)
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fd1c 	bl	8000310 <strcmp>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d121      	bne.n	8001922 <main+0x532>
    {
      if(max_packet_count == 0)
 80018de:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80018e2:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d10e      	bne.n	800190a <main+0x51a>
      {
        strcpy(communication_state,"TRANSITIONING");
 80018ec:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80018f0:	4a7b      	ldr	r2, [pc, #492]	; (8001ae0 <main+0x6f0>)
 80018f2:	461c      	mov	r4, r3
 80018f4:	4613      	mov	r3, r2
 80018f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018f8:	c407      	stmia	r4!, {r0, r1, r2}
 80018fa:	8023      	strh	r3, [r4, #0]
        have_recieved_anything = 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
        LoRA_sendPacket("$");
 8001902:	4878      	ldr	r0, [pc, #480]	; (8001ae4 <main+0x6f4>)
 8001904:	f7ff fbd6 	bl	80010b4 <LoRA_sendPacket>
 8001908:	e0c9      	b.n	8001a9e <main+0x6ae>
      }
      else
      {
        //send whatever
        max_packet_count--;
 800190a:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 800190e:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	1e5a      	subs	r2, r3, #1
 8001916:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 800191a:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	e0bd      	b.n	8001a9e <main+0x6ae>
      }

    }
    else if(strcmp(communication_state,"SENDING RELIABLE") == 0)
 8001922:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001926:	496d      	ldr	r1, [pc, #436]	; (8001adc <main+0x6ec>)
 8001928:	4618      	mov	r0, r3
 800192a:	f7fe fcf1 	bl	8000310 <strcmp>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d166      	bne.n	8001a02 <main+0x612>
    {
    	reliable_send_packet("*");
 8001934:	486c      	ldr	r0, [pc, #432]	; (8001ae8 <main+0x6f8>)
 8001936:	f7ff fcd8 	bl	80012ea <reliable_send_packet>
    	sprintf(response_packet, "\nState of other board: %s\n> ", state);
 800193a:	f607 022c 	addw	r2, r7, #2092	; 0x82c
 800193e:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8001942:	496a      	ldr	r1, [pc, #424]	; (8001aec <main+0x6fc>)
 8001944:	4618      	mov	r0, r3
 8001946:	f015 fbe1 	bl	801710c <siprintf>
	  	CDC_Transmit_HS(response_packet, strlen(response_packet));
 800194a:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800194e:	4618      	mov	r0, r3
 8001950:	f7fe fce8 	bl	8000324 <strlen>
 8001954:	4602      	mov	r2, r0
 8001956:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800195a:	4611      	mov	r1, r2
 800195c:	4618      	mov	r0, r3
 800195e:	f014 ff81 	bl	8016864 <CDC_Transmit_HS>
	  	//CDC_Transmit_HS("", strlen("> "));
    	//get input
    	char input[usbBufferLen];
    	//usbReceiveHandle(input);

    	while(!usbReceiveHandle(input))
 8001962:	bf00      	nop
 8001964:	1d3b      	adds	r3, r7, #4
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fd22 	bl	80013b0 <usbReceiveHandle>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f8      	beq.n	8001964 <main+0x574>
    	{}

      reliable_send_packet(input);
 8001972:	1d3b      	adds	r3, r7, #4
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff fcb8 	bl	80012ea <reliable_send_packet>

	  	char debug[usbBufferLen+10];
	  	sprintf(debug, "%s\n", input);
 800197a:	1d3a      	adds	r2, r7, #4
 800197c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001980:	495b      	ldr	r1, [pc, #364]	; (8001af0 <main+0x700>)
 8001982:	4618      	mov	r0, r3
 8001984:	f015 fbc2 	bl	801710c <siprintf>
	  	CDC_Transmit_HS(debug, strlen(debug));
 8001988:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800198c:	4618      	mov	r0, r3
 800198e:	f7fe fcc9 	bl	8000324 <strlen>
 8001992:	4602      	mov	r2, r0
 8001994:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001998:	4611      	mov	r1, r2
 800199a:	4618      	mov	r0, r3
 800199c:	f014 ff62 	bl	8016864 <CDC_Transmit_HS>

      if(strcmp(input,"FIRE")==0)
 80019a0:	1d3b      	adds	r3, r7, #4
 80019a2:	4954      	ldr	r1, [pc, #336]	; (8001af4 <main+0x704>)
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe fcb3 	bl	8000310 <strcmp>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d116      	bne.n	80019de <main+0x5ee>
      {
        strcpy(communication_state,"RECEIVING STREAM");
 80019b0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80019b4:	4a47      	ldr	r2, [pc, #284]	; (8001ad4 <main+0x6e4>)
 80019b6:	461c      	mov	r4, r3
 80019b8:	4615      	mov	r5, r2
 80019ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019be:	682b      	ldr	r3, [r5, #0]
 80019c0:	7023      	strb	r3, [r4, #0]
        sprintf(sendMessage, "! %d", packets_streamed);
 80019c2:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80019c6:	f8d7 2bb4 	ldr.w	r2, [r7, #2996]	; 0xbb4
 80019ca:	4940      	ldr	r1, [pc, #256]	; (8001acc <main+0x6dc>)
 80019cc:	4618      	mov	r0, r3
 80019ce:	f015 fb9d 	bl	801710c <siprintf>
        LoRA_sendPacket(sendMessage);
 80019d2:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fb6c 	bl	80010b4 <LoRA_sendPacket>
 80019dc:	e05f      	b.n	8001a9e <main+0x6ae>
      }
      else
      {
        strcpy(communication_state,"TRANSITIONING");
 80019de:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80019e2:	4a3f      	ldr	r2, [pc, #252]	; (8001ae0 <main+0x6f0>)
 80019e4:	461c      	mov	r4, r3
 80019e6:	4613      	mov	r3, r2
 80019e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019ea:	c407      	stmia	r4!, {r0, r1, r2}
 80019ec:	8023      	strh	r3, [r4, #0]
        have_recieved_anything = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
        HAL_Delay(100);
 80019f4:	2064      	movs	r0, #100	; 0x64
 80019f6:	f002 f88f 	bl	8003b18 <HAL_Delay>
        LoRA_sendPacket("$");
 80019fa:	483a      	ldr	r0, [pc, #232]	; (8001ae4 <main+0x6f4>)
 80019fc:	f7ff fb5a 	bl	80010b4 <LoRA_sendPacket>
 8001a00:	e04d      	b.n	8001a9e <main+0x6ae>
      }
    }
    else if(strcmp(communication_state,"TRANSITIONING") == 0)
 8001a02:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001a06:	4936      	ldr	r1, [pc, #216]	; (8001ae0 <main+0x6f0>)
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7fe fc81 	bl	8000310 <strcmp>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d144      	bne.n	8001a9e <main+0x6ae>
    {

        if(recv_packet(recieved_packet, MAX_PAYLOAD_LENGHT))
 8001a14:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001a18:	21fa      	movs	r1, #250	; 0xfa
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff fc36 	bl	800128c <recv_packet>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d02b      	beq.n	8001a7e <main+0x68e>
        {
          CDC_Transmit_HS("transitioning\n", strlen("transitioning\n"));
 8001a26:	210e      	movs	r1, #14
 8001a28:	4833      	ldr	r0, [pc, #204]	; (8001af8 <main+0x708>)
 8001a2a:	f014 ff1b 	bl	8016864 <CDC_Transmit_HS>
          previousTime = HAL_GetTick();
 8001a2e:	f002 f867 	bl	8003b00 <HAL_GetTick>
 8001a32:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
          if(strcmp(recieved_packet, "*")==0)
 8001a36:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001a3a:	492b      	ldr	r1, [pc, #172]	; (8001ae8 <main+0x6f8>)
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7fe fc67 	bl	8000310 <strcmp>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d12a      	bne.n	8001a9e <main+0x6ae>
          {
        	strcpy(previous_packet, recieved_packet);
 8001a48:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 8001a4c:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8001a50:	4611      	mov	r1, r2
 8001a52:	4618      	mov	r0, r3
 8001a54:	f015 fbdc 	bl	8017210 <strcpy>
        	strcpy(communication_state, "RECEIVING RELIABLE");
 8001a58:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001a5c:	4a27      	ldr	r2, [pc, #156]	; (8001afc <main+0x70c>)
 8001a5e:	461c      	mov	r4, r3
 8001a60:	4615      	mov	r5, r2
 8001a62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a66:	682b      	ldr	r3, [r5, #0]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	8022      	strh	r2, [r4, #0]
 8001a6c:	3402      	adds	r4, #2
 8001a6e:	0c1b      	lsrs	r3, r3, #16
 8001a70:	7023      	strb	r3, [r4, #0]
            LoRA_sendPacket(recieved_packet);
 8001a72:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fb1c 	bl	80010b4 <LoRA_sendPacket>
 8001a7c:	e00f      	b.n	8001a9e <main+0x6ae>
          }
        }
        else if (HAL_GetTick()-previousTime > 300)
 8001a7e:	f002 f83f 	bl	8003b00 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	f8d7 3bf8 	ldr.w	r3, [r7, #3064]	; 0xbf8
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001a8e:	d906      	bls.n	8001a9e <main+0x6ae>
        {
          previousTime = HAL_GetTick();
 8001a90:	f002 f836 	bl	8003b00 <HAL_GetTick>
 8001a94:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
		  LoRA_sendPacket("$");
 8001a98:	4812      	ldr	r0, [pc, #72]	; (8001ae4 <main+0x6f4>)
 8001a9a:	f7ff fb0b 	bl	80010b4 <LoRA_sendPacket>
//			LED_Color_Data[i][0] = (uint32_t)MAX*triangle_space(color_offset+r_offset);
//			LED_Color_Data[i][1] = (uint32_t)MAX*triangle_space(color_offset+g_offset);
//			LED_Color_Data[i][2] = (uint32_t)MAX*triangle_space(color_offset+b_offset);
//		}

		float timeElapsed = ((float)(HAL_GetTick() - lastTime)) / 1000;
 8001a9e:	f002 f82f 	bl	8003b00 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	f8d7 3c0c 	ldr.w	r3, [r7, #3084]	; 0xc0c
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	ee07 3a90 	vmov	s15, r3
 8001aae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ab2:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001b00 <main+0x710>
 8001ab6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aba:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 8001abe:	edc3 7a00 	vstr	s15, [r3]

		//float GyroX = LG2_Get_Gyro_X() - calOmegaX;
		//float GyroY = LG2_Get_Gyro_Y() - calOmegaY;
		//float GyroZ = LG2_Get_Gyro_Z() - calOmegaZ;

		lastTime = HAL_GetTick();
 8001ac2:	f002 f81d 	bl	8003b00 <HAL_GetTick>
 8001ac6:	f8c7 0c0c 	str.w	r0, [r7, #3084]	; 0xc0c
while (1) {
 8001aca:	e618      	b.n	80016fe <main+0x30e>
 8001acc:	08018484 	.word	0x08018484
 8001ad0:	0801848c 	.word	0x0801848c
 8001ad4:	0801849c 	.word	0x0801849c
 8001ad8:	08018468 	.word	0x08018468
 8001adc:	08018470 	.word	0x08018470
 8001ae0:	080184b0 	.word	0x080184b0
 8001ae4:	080184c0 	.word	0x080184c0
 8001ae8:	080184c4 	.word	0x080184c4
 8001aec:	080184c8 	.word	0x080184c8
 8001af0:	080184e8 	.word	0x080184e8
 8001af4:	080184ec 	.word	0x080184ec
 8001af8:	080184f4 	.word	0x080184f4
 8001afc:	08018454 	.word	0x08018454
 8001b00:	447a0000 	.word	0x447a0000

08001b04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b09c      	sub	sp, #112	; 0x70
 8001b08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b0e:	224c      	movs	r2, #76	; 0x4c
 8001b10:	2100      	movs	r1, #0
 8001b12:	4618      	mov	r0, r3
 8001b14:	f015 fb48 	bl	80171a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	2220      	movs	r2, #32
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f015 fb42 	bl	80171a8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001b24:	2002      	movs	r0, #2
 8001b26:	f007 febd 	bl	80098a4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	603b      	str	r3, [r7, #0]
 8001b2e:	4b30      	ldr	r3, [pc, #192]	; (8001bf0 <SystemClock_Config+0xec>)
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b36:	4a2e      	ldr	r2, [pc, #184]	; (8001bf0 <SystemClock_Config+0xec>)
 8001b38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b3c:	6193      	str	r3, [r2, #24]
 8001b3e:	4b2c      	ldr	r3, [pc, #176]	; (8001bf0 <SystemClock_Config+0xec>)
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b46:	603b      	str	r3, [r7, #0]
 8001b48:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001b4a:	bf00      	nop
 8001b4c:	4b28      	ldr	r3, [pc, #160]	; (8001bf0 <SystemClock_Config+0xec>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b58:	d1f8      	bne.n	8001b4c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001b5a:	2322      	movs	r3, #34	; 0x22
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001b62:	2340      	movs	r3, #64	; 0x40
 8001b64:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001b66:	2301      	movs	r3, #1
 8001b68:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b72:	2304      	movs	r3, #4
 8001b74:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001b76:	230c      	movs	r3, #12
 8001b78:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8001b7e:	230c      	movs	r3, #12
 8001b80:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b82:	2302      	movs	r3, #2
 8001b84:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001b86:	230c      	movs	r3, #12
 8001b88:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b96:	4618      	mov	r0, r3
 8001b98:	f007 fece 	bl	8009938 <HAL_RCC_OscConfig>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001ba2:	f000 ff1b 	bl	80029dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ba6:	233f      	movs	r3, #63	; 0x3f
 8001ba8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001baa:	2303      	movs	r3, #3
 8001bac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001bb2:	2308      	movs	r3, #8
 8001bb4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001bb6:	2340      	movs	r3, #64	; 0x40
 8001bb8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001bba:	2340      	movs	r3, #64	; 0x40
 8001bbc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001bbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bc2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001bc4:	2340      	movs	r3, #64	; 0x40
 8001bc6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001bc8:	1d3b      	adds	r3, r7, #4
 8001bca:	2101      	movs	r1, #1
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f008 fa8d 	bl	800a0ec <HAL_RCC_ClockConfig>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001bd8:	f000 ff00 	bl	80029dc <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001bdc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001be0:	2100      	movs	r1, #0
 8001be2:	2000      	movs	r0, #0
 8001be4:	f008 fc38 	bl	800a458 <HAL_RCC_MCOConfig>
}
 8001be8:	bf00      	nop
 8001bea:	3770      	adds	r7, #112	; 0x70
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	58024800 	.word	0x58024800

08001bf4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b0ae      	sub	sp, #184	; 0xb8
 8001bf8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bfa:	463b      	mov	r3, r7
 8001bfc:	22b8      	movs	r2, #184	; 0xb8
 8001bfe:	2100      	movs	r1, #0
 8001c00:	4618      	mov	r0, r3
 8001c02:	f015 fad1 	bl	80171a8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 8001c06:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8001c0a:	f04f 0300 	mov.w	r3, #0
 8001c0e:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001c12:	2304      	movs	r3, #4
 8001c14:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001c16:	230c      	movs	r3, #12
 8001c18:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001c22:	2302      	movs	r3, #2
 8001c24:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001c26:	23c0      	movs	r3, #192	; 0xc0
 8001c28:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001c32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c36:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c3e:	463b      	mov	r3, r7
 8001c40:	4618      	mov	r0, r3
 8001c42:	f008 fe49 	bl	800a8d8 <HAL_RCCEx_PeriphCLKConfig>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8001c4c:	f000 fec6 	bl	80029dc <Error_Handler>
  }
}
 8001c50:	bf00      	nop
 8001c52:	37b8      	adds	r7, #184	; 0xb8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08c      	sub	sp, #48	; 0x30
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001c6a:	463b      	mov	r3, r7
 8001c6c:	2224      	movs	r2, #36	; 0x24
 8001c6e:	2100      	movs	r1, #0
 8001c70:	4618      	mov	r0, r3
 8001c72:	f015 fa99 	bl	80171a8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c76:	4b31      	ldr	r3, [pc, #196]	; (8001d3c <MX_ADC1_Init+0xe4>)
 8001c78:	4a31      	ldr	r2, [pc, #196]	; (8001d40 <MX_ADC1_Init+0xe8>)
 8001c7a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001c7c:	4b2f      	ldr	r3, [pc, #188]	; (8001d3c <MX_ADC1_Init+0xe4>)
 8001c7e:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001c82:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001c84:	4b2d      	ldr	r3, [pc, #180]	; (8001d3c <MX_ADC1_Init+0xe4>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c8a:	4b2c      	ldr	r3, [pc, #176]	; (8001d3c <MX_ADC1_Init+0xe4>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c90:	4b2a      	ldr	r3, [pc, #168]	; (8001d3c <MX_ADC1_Init+0xe4>)
 8001c92:	2204      	movs	r2, #4
 8001c94:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001c96:	4b29      	ldr	r3, [pc, #164]	; (8001d3c <MX_ADC1_Init+0xe4>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c9c:	4b27      	ldr	r3, [pc, #156]	; (8001d3c <MX_ADC1_Init+0xe4>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001ca2:	4b26      	ldr	r3, [pc, #152]	; (8001d3c <MX_ADC1_Init+0xe4>)
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ca8:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <MX_ADC1_Init+0xe4>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cb0:	4b22      	ldr	r3, [pc, #136]	; (8001d3c <MX_ADC1_Init+0xe4>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cb6:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <MX_ADC1_Init+0xe4>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001cbc:	4b1f      	ldr	r3, [pc, #124]	; (8001d3c <MX_ADC1_Init+0xe4>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001cc2:	4b1e      	ldr	r3, [pc, #120]	; (8001d3c <MX_ADC1_Init+0xe4>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001cc8:	4b1c      	ldr	r3, [pc, #112]	; (8001d3c <MX_ADC1_Init+0xe4>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001cce:	4b1b      	ldr	r3, [pc, #108]	; (8001d3c <MX_ADC1_Init+0xe4>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001cd6:	4819      	ldr	r0, [pc, #100]	; (8001d3c <MX_ADC1_Init+0xe4>)
 8001cd8:	f002 f99e 	bl	8004018 <HAL_ADC_Init>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001ce2:	f000 fe7b 	bl	80029dc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001cea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4812      	ldr	r0, [pc, #72]	; (8001d3c <MX_ADC1_Init+0xe4>)
 8001cf2:	f003 f9d9 	bl	80050a8 <HAL_ADCEx_MultiModeConfigChannel>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001cfc:	f000 fe6e 	bl	80029dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001d00:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <MX_ADC1_Init+0xec>)
 8001d02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d04:	2306      	movs	r3, #6
 8001d06:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001d0c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001d10:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d12:	2304      	movs	r3, #4
 8001d14:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d20:	463b      	mov	r3, r7
 8001d22:	4619      	mov	r1, r3
 8001d24:	4805      	ldr	r0, [pc, #20]	; (8001d3c <MX_ADC1_Init+0xe4>)
 8001d26:	f002 fb7f 	bl	8004428 <HAL_ADC_ConfigChannel>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001d30:	f000 fe54 	bl	80029dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d34:	bf00      	nop
 8001d36:	3730      	adds	r7, #48	; 0x30
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	24000bf8 	.word	0x24000bf8
 8001d40:	40022000 	.word	0x40022000
 8001d44:	2a000400 	.word	0x2a000400

08001d48 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08a      	sub	sp, #40	; 0x28
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d4e:	1d3b      	adds	r3, r7, #4
 8001d50:	2224      	movs	r2, #36	; 0x24
 8001d52:	2100      	movs	r1, #0
 8001d54:	4618      	mov	r0, r3
 8001d56:	f015 fa27 	bl	80171a8 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001d5a:	4b2f      	ldr	r3, [pc, #188]	; (8001e18 <MX_ADC3_Init+0xd0>)
 8001d5c:	4a2f      	ldr	r2, [pc, #188]	; (8001e1c <MX_ADC3_Init+0xd4>)
 8001d5e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001d60:	4b2d      	ldr	r3, [pc, #180]	; (8001e18 <MX_ADC3_Init+0xd0>)
 8001d62:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001d66:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001d68:	4b2b      	ldr	r3, [pc, #172]	; (8001e18 <MX_ADC3_Init+0xd0>)
 8001d6a:	2208      	movs	r2, #8
 8001d6c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001d6e:	4b2a      	ldr	r3, [pc, #168]	; (8001e18 <MX_ADC3_Init+0xd0>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d74:	4b28      	ldr	r3, [pc, #160]	; (8001e18 <MX_ADC3_Init+0xd0>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d7a:	4b27      	ldr	r3, [pc, #156]	; (8001e18 <MX_ADC3_Init+0xd0>)
 8001d7c:	2204      	movs	r2, #4
 8001d7e:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001d80:	4b25      	ldr	r3, [pc, #148]	; (8001e18 <MX_ADC3_Init+0xd0>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001d86:	4b24      	ldr	r3, [pc, #144]	; (8001e18 <MX_ADC3_Init+0xd0>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001d8c:	4b22      	ldr	r3, [pc, #136]	; (8001e18 <MX_ADC3_Init+0xd0>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001d92:	4b21      	ldr	r3, [pc, #132]	; (8001e18 <MX_ADC3_Init+0xd0>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d9a:	4b1f      	ldr	r3, [pc, #124]	; (8001e18 <MX_ADC3_Init+0xd0>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001da0:	4b1d      	ldr	r3, [pc, #116]	; (8001e18 <MX_ADC3_Init+0xd0>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001da6:	4b1c      	ldr	r3, [pc, #112]	; (8001e18 <MX_ADC3_Init+0xd0>)
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001dae:	4b1a      	ldr	r3, [pc, #104]	; (8001e18 <MX_ADC3_Init+0xd0>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001db4:	4b18      	ldr	r3, [pc, #96]	; (8001e18 <MX_ADC3_Init+0xd0>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001dba:	4b17      	ldr	r3, [pc, #92]	; (8001e18 <MX_ADC3_Init+0xd0>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001dc0:	4b15      	ldr	r3, [pc, #84]	; (8001e18 <MX_ADC3_Init+0xd0>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001dc6:	4b14      	ldr	r3, [pc, #80]	; (8001e18 <MX_ADC3_Init+0xd0>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001dce:	4812      	ldr	r0, [pc, #72]	; (8001e18 <MX_ADC3_Init+0xd0>)
 8001dd0:	f002 f922 	bl	8004018 <HAL_ADC_Init>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001dda:	f000 fdff 	bl	80029dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001dde:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <MX_ADC3_Init+0xd8>)
 8001de0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001de2:	2306      	movs	r3, #6
 8001de4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8001de6:	2300      	movs	r3, #0
 8001de8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001dea:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001dee:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001df0:	2304      	movs	r3, #4
 8001df2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001dfc:	1d3b      	adds	r3, r7, #4
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4805      	ldr	r0, [pc, #20]	; (8001e18 <MX_ADC3_Init+0xd0>)
 8001e02:	f002 fb11 	bl	8004428 <HAL_ADC_ConfigChannel>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8001e0c:	f000 fde6 	bl	80029dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001e10:	bf00      	nop
 8001e12:	3728      	adds	r7, #40	; 0x28
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	24000c68 	.word	0x24000c68
 8001e1c:	58026000 	.word	0x58026000
 8001e20:	04300002 	.word	0x04300002

08001e24 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001e28:	4b2e      	ldr	r3, [pc, #184]	; (8001ee4 <MX_FDCAN3_Init+0xc0>)
 8001e2a:	4a2f      	ldr	r2, [pc, #188]	; (8001ee8 <MX_FDCAN3_Init+0xc4>)
 8001e2c:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001e2e:	4b2d      	ldr	r3, [pc, #180]	; (8001ee4 <MX_FDCAN3_Init+0xc0>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001e34:	4b2b      	ldr	r3, [pc, #172]	; (8001ee4 <MX_FDCAN3_Init+0xc0>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8001e3a:	4b2a      	ldr	r3, [pc, #168]	; (8001ee4 <MX_FDCAN3_Init+0xc0>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001e40:	4b28      	ldr	r3, [pc, #160]	; (8001ee4 <MX_FDCAN3_Init+0xc0>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001e46:	4b27      	ldr	r3, [pc, #156]	; (8001ee4 <MX_FDCAN3_Init+0xc0>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8001e4c:	4b25      	ldr	r3, [pc, #148]	; (8001ee4 <MX_FDCAN3_Init+0xc0>)
 8001e4e:	2210      	movs	r2, #16
 8001e50:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001e52:	4b24      	ldr	r3, [pc, #144]	; (8001ee4 <MX_FDCAN3_Init+0xc0>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8001e58:	4b22      	ldr	r3, [pc, #136]	; (8001ee4 <MX_FDCAN3_Init+0xc0>)
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8001e5e:	4b21      	ldr	r3, [pc, #132]	; (8001ee4 <MX_FDCAN3_Init+0xc0>)
 8001e60:	2202      	movs	r2, #2
 8001e62:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8001e64:	4b1f      	ldr	r3, [pc, #124]	; (8001ee4 <MX_FDCAN3_Init+0xc0>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8001e6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ee4 <MX_FDCAN3_Init+0xc0>)
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8001e70:	4b1c      	ldr	r3, [pc, #112]	; (8001ee4 <MX_FDCAN3_Init+0xc0>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8001e76:	4b1b      	ldr	r3, [pc, #108]	; (8001ee4 <MX_FDCAN3_Init+0xc0>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8001e7c:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <MX_FDCAN3_Init+0xc0>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8001e82:	4b18      	ldr	r3, [pc, #96]	; (8001ee4 <MX_FDCAN3_Init+0xc0>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8001e88:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <MX_FDCAN3_Init+0xc0>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8001e8e:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <MX_FDCAN3_Init+0xc0>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001e94:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <MX_FDCAN3_Init+0xc0>)
 8001e96:	2204      	movs	r2, #4
 8001e98:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8001e9a:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <MX_FDCAN3_Init+0xc0>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001ea0:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <MX_FDCAN3_Init+0xc0>)
 8001ea2:	2204      	movs	r2, #4
 8001ea4:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8001ea6:	4b0f      	ldr	r3, [pc, #60]	; (8001ee4 <MX_FDCAN3_Init+0xc0>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001eac:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <MX_FDCAN3_Init+0xc0>)
 8001eae:	2204      	movs	r2, #4
 8001eb0:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8001eb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <MX_FDCAN3_Init+0xc0>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8001eb8:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <MX_FDCAN3_Init+0xc0>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8001ebe:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <MX_FDCAN3_Init+0xc0>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001ec4:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <MX_FDCAN3_Init+0xc0>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001eca:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <MX_FDCAN3_Init+0xc0>)
 8001ecc:	2204      	movs	r2, #4
 8001ece:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001ed0:	4804      	ldr	r0, [pc, #16]	; (8001ee4 <MX_FDCAN3_Init+0xc0>)
 8001ed2:	f005 fbaf 	bl	8007634 <HAL_FDCAN_Init>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8001edc:	f000 fd7e 	bl	80029dc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8001ee0:	bf00      	nop
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	24000dc8 	.word	0x24000dc8
 8001ee8:	4000d400 	.word	0x4000d400

08001eec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001ef0:	4b1b      	ldr	r3, [pc, #108]	; (8001f60 <MX_I2C2_Init+0x74>)
 8001ef2:	4a1c      	ldr	r2, [pc, #112]	; (8001f64 <MX_I2C2_Init+0x78>)
 8001ef4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001ef6:	4b1a      	ldr	r3, [pc, #104]	; (8001f60 <MX_I2C2_Init+0x74>)
 8001ef8:	4a1b      	ldr	r2, [pc, #108]	; (8001f68 <MX_I2C2_Init+0x7c>)
 8001efa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001efc:	4b18      	ldr	r3, [pc, #96]	; (8001f60 <MX_I2C2_Init+0x74>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f02:	4b17      	ldr	r3, [pc, #92]	; (8001f60 <MX_I2C2_Init+0x74>)
 8001f04:	2201      	movs	r2, #1
 8001f06:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f08:	4b15      	ldr	r3, [pc, #84]	; (8001f60 <MX_I2C2_Init+0x74>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001f0e:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <MX_I2C2_Init+0x74>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f14:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <MX_I2C2_Init+0x74>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f1a:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <MX_I2C2_Init+0x74>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f20:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <MX_I2C2_Init+0x74>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001f26:	480e      	ldr	r0, [pc, #56]	; (8001f60 <MX_I2C2_Init+0x74>)
 8001f28:	f006 f8c2 	bl	80080b0 <HAL_I2C_Init>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001f32:	f000 fd53 	bl	80029dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f36:	2100      	movs	r1, #0
 8001f38:	4809      	ldr	r0, [pc, #36]	; (8001f60 <MX_I2C2_Init+0x74>)
 8001f3a:	f006 f963 	bl	8008204 <HAL_I2CEx_ConfigAnalogFilter>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001f44:	f000 fd4a 	bl	80029dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001f48:	2100      	movs	r1, #0
 8001f4a:	4805      	ldr	r0, [pc, #20]	; (8001f60 <MX_I2C2_Init+0x74>)
 8001f4c:	f006 f9a5 	bl	800829a <HAL_I2CEx_ConfigDigitalFilter>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001f56:	f000 fd41 	bl	80029dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	24000e68 	.word	0x24000e68
 8001f64:	40005800 	.word	0x40005800
 8001f68:	20303e5d 	.word	0x20303e5d

08001f6c <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8001f70:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <MX_SDMMC2_SD_Init+0x34>)
 8001f72:	4a0c      	ldr	r2, [pc, #48]	; (8001fa4 <MX_SDMMC2_SD_Init+0x38>)
 8001f74:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001f76:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <MX_SDMMC2_SD_Init+0x34>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001f7c:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <MX_SDMMC2_SD_Init+0x34>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001f82:	4b07      	ldr	r3, [pc, #28]	; (8001fa0 <MX_SDMMC2_SD_Init+0x34>)
 8001f84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f88:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001f8a:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <MX_SDMMC2_SD_Init+0x34>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 8001f90:	4b03      	ldr	r3, [pc, #12]	; (8001fa0 <MX_SDMMC2_SD_Init+0x34>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8001f96:	bf00      	nop
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	24000ebc 	.word	0x24000ebc
 8001fa4:	48022400 	.word	0x48022400

08001fa8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001fac:	4b27      	ldr	r3, [pc, #156]	; (800204c <MX_SPI1_Init+0xa4>)
 8001fae:	4a28      	ldr	r2, [pc, #160]	; (8002050 <MX_SPI1_Init+0xa8>)
 8001fb0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fb2:	4b26      	ldr	r3, [pc, #152]	; (800204c <MX_SPI1_Init+0xa4>)
 8001fb4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001fb8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fba:	4b24      	ldr	r3, [pc, #144]	; (800204c <MX_SPI1_Init+0xa4>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fc0:	4b22      	ldr	r3, [pc, #136]	; (800204c <MX_SPI1_Init+0xa4>)
 8001fc2:	2207      	movs	r2, #7
 8001fc4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fc6:	4b21      	ldr	r3, [pc, #132]	; (800204c <MX_SPI1_Init+0xa4>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fcc:	4b1f      	ldr	r3, [pc, #124]	; (800204c <MX_SPI1_Init+0xa4>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fd2:	4b1e      	ldr	r3, [pc, #120]	; (800204c <MX_SPI1_Init+0xa4>)
 8001fd4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001fd8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001fda:	4b1c      	ldr	r3, [pc, #112]	; (800204c <MX_SPI1_Init+0xa4>)
 8001fdc:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001fe0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fe2:	4b1a      	ldr	r3, [pc, #104]	; (800204c <MX_SPI1_Init+0xa4>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fe8:	4b18      	ldr	r3, [pc, #96]	; (800204c <MX_SPI1_Init+0xa4>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fee:	4b17      	ldr	r3, [pc, #92]	; (800204c <MX_SPI1_Init+0xa4>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001ff4:	4b15      	ldr	r3, [pc, #84]	; (800204c <MX_SPI1_Init+0xa4>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ffa:	4b14      	ldr	r3, [pc, #80]	; (800204c <MX_SPI1_Init+0xa4>)
 8001ffc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002000:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002002:	4b12      	ldr	r3, [pc, #72]	; (800204c <MX_SPI1_Init+0xa4>)
 8002004:	2200      	movs	r2, #0
 8002006:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002008:	4b10      	ldr	r3, [pc, #64]	; (800204c <MX_SPI1_Init+0xa4>)
 800200a:	2200      	movs	r2, #0
 800200c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800200e:	4b0f      	ldr	r3, [pc, #60]	; (800204c <MX_SPI1_Init+0xa4>)
 8002010:	2200      	movs	r2, #0
 8002012:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002014:	4b0d      	ldr	r3, [pc, #52]	; (800204c <MX_SPI1_Init+0xa4>)
 8002016:	2200      	movs	r2, #0
 8002018:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800201a:	4b0c      	ldr	r3, [pc, #48]	; (800204c <MX_SPI1_Init+0xa4>)
 800201c:	2200      	movs	r2, #0
 800201e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002020:	4b0a      	ldr	r3, [pc, #40]	; (800204c <MX_SPI1_Init+0xa4>)
 8002022:	2200      	movs	r2, #0
 8002024:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002026:	4b09      	ldr	r3, [pc, #36]	; (800204c <MX_SPI1_Init+0xa4>)
 8002028:	2200      	movs	r2, #0
 800202a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800202c:	4b07      	ldr	r3, [pc, #28]	; (800204c <MX_SPI1_Init+0xa4>)
 800202e:	2200      	movs	r2, #0
 8002030:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002032:	4b06      	ldr	r3, [pc, #24]	; (800204c <MX_SPI1_Init+0xa4>)
 8002034:	2200      	movs	r2, #0
 8002036:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002038:	4804      	ldr	r0, [pc, #16]	; (800204c <MX_SPI1_Init+0xa4>)
 800203a:	f00c fc97 	bl	800e96c <HAL_SPI_Init>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8002044:	f000 fcca 	bl	80029dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002048:	bf00      	nop
 800204a:	bd80      	pop	{r7, pc}
 800204c:	24000f38 	.word	0x24000f38
 8002050:	40013000 	.word	0x40013000

08002054 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002058:	4b27      	ldr	r3, [pc, #156]	; (80020f8 <MX_SPI2_Init+0xa4>)
 800205a:	4a28      	ldr	r2, [pc, #160]	; (80020fc <MX_SPI2_Init+0xa8>)
 800205c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800205e:	4b26      	ldr	r3, [pc, #152]	; (80020f8 <MX_SPI2_Init+0xa4>)
 8002060:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002064:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002066:	4b24      	ldr	r3, [pc, #144]	; (80020f8 <MX_SPI2_Init+0xa4>)
 8002068:	2200      	movs	r2, #0
 800206a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800206c:	4b22      	ldr	r3, [pc, #136]	; (80020f8 <MX_SPI2_Init+0xa4>)
 800206e:	2207      	movs	r2, #7
 8002070:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002072:	4b21      	ldr	r3, [pc, #132]	; (80020f8 <MX_SPI2_Init+0xa4>)
 8002074:	2200      	movs	r2, #0
 8002076:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002078:	4b1f      	ldr	r3, [pc, #124]	; (80020f8 <MX_SPI2_Init+0xa4>)
 800207a:	2200      	movs	r2, #0
 800207c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800207e:	4b1e      	ldr	r3, [pc, #120]	; (80020f8 <MX_SPI2_Init+0xa4>)
 8002080:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002084:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002086:	4b1c      	ldr	r3, [pc, #112]	; (80020f8 <MX_SPI2_Init+0xa4>)
 8002088:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800208c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800208e:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <MX_SPI2_Init+0xa4>)
 8002090:	2200      	movs	r2, #0
 8002092:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002094:	4b18      	ldr	r3, [pc, #96]	; (80020f8 <MX_SPI2_Init+0xa4>)
 8002096:	2200      	movs	r2, #0
 8002098:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800209a:	4b17      	ldr	r3, [pc, #92]	; (80020f8 <MX_SPI2_Init+0xa4>)
 800209c:	2200      	movs	r2, #0
 800209e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80020a0:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <MX_SPI2_Init+0xa4>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020a6:	4b14      	ldr	r3, [pc, #80]	; (80020f8 <MX_SPI2_Init+0xa4>)
 80020a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020ac:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80020ae:	4b12      	ldr	r3, [pc, #72]	; (80020f8 <MX_SPI2_Init+0xa4>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80020b4:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <MX_SPI2_Init+0xa4>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80020ba:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <MX_SPI2_Init+0xa4>)
 80020bc:	2200      	movs	r2, #0
 80020be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80020c0:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <MX_SPI2_Init+0xa4>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80020c6:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <MX_SPI2_Init+0xa4>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80020cc:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <MX_SPI2_Init+0xa4>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80020d2:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <MX_SPI2_Init+0xa4>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80020d8:	4b07      	ldr	r3, [pc, #28]	; (80020f8 <MX_SPI2_Init+0xa4>)
 80020da:	2200      	movs	r2, #0
 80020dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <MX_SPI2_Init+0xa4>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80020e4:	4804      	ldr	r0, [pc, #16]	; (80020f8 <MX_SPI2_Init+0xa4>)
 80020e6:	f00c fc41 	bl	800e96c <HAL_SPI_Init>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80020f0:	f000 fc74 	bl	80029dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80020f4:	bf00      	nop
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	24000fc0 	.word	0x24000fc0
 80020fc:	40003800 	.word	0x40003800

08002100 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002104:	4b27      	ldr	r3, [pc, #156]	; (80021a4 <MX_SPI3_Init+0xa4>)
 8002106:	4a28      	ldr	r2, [pc, #160]	; (80021a8 <MX_SPI3_Init+0xa8>)
 8002108:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800210a:	4b26      	ldr	r3, [pc, #152]	; (80021a4 <MX_SPI3_Init+0xa4>)
 800210c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002110:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002112:	4b24      	ldr	r3, [pc, #144]	; (80021a4 <MX_SPI3_Init+0xa4>)
 8002114:	2200      	movs	r2, #0
 8002116:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002118:	4b22      	ldr	r3, [pc, #136]	; (80021a4 <MX_SPI3_Init+0xa4>)
 800211a:	2207      	movs	r2, #7
 800211c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800211e:	4b21      	ldr	r3, [pc, #132]	; (80021a4 <MX_SPI3_Init+0xa4>)
 8002120:	2200      	movs	r2, #0
 8002122:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002124:	4b1f      	ldr	r3, [pc, #124]	; (80021a4 <MX_SPI3_Init+0xa4>)
 8002126:	2200      	movs	r2, #0
 8002128:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800212a:	4b1e      	ldr	r3, [pc, #120]	; (80021a4 <MX_SPI3_Init+0xa4>)
 800212c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002130:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002132:	4b1c      	ldr	r3, [pc, #112]	; (80021a4 <MX_SPI3_Init+0xa4>)
 8002134:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002138:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800213a:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <MX_SPI3_Init+0xa4>)
 800213c:	2200      	movs	r2, #0
 800213e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002140:	4b18      	ldr	r3, [pc, #96]	; (80021a4 <MX_SPI3_Init+0xa4>)
 8002142:	2200      	movs	r2, #0
 8002144:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002146:	4b17      	ldr	r3, [pc, #92]	; (80021a4 <MX_SPI3_Init+0xa4>)
 8002148:	2200      	movs	r2, #0
 800214a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800214c:	4b15      	ldr	r3, [pc, #84]	; (80021a4 <MX_SPI3_Init+0xa4>)
 800214e:	2200      	movs	r2, #0
 8002150:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002152:	4b14      	ldr	r3, [pc, #80]	; (80021a4 <MX_SPI3_Init+0xa4>)
 8002154:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002158:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800215a:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <MX_SPI3_Init+0xa4>)
 800215c:	2200      	movs	r2, #0
 800215e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002160:	4b10      	ldr	r3, [pc, #64]	; (80021a4 <MX_SPI3_Init+0xa4>)
 8002162:	2200      	movs	r2, #0
 8002164:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002166:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <MX_SPI3_Init+0xa4>)
 8002168:	2200      	movs	r2, #0
 800216a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800216c:	4b0d      	ldr	r3, [pc, #52]	; (80021a4 <MX_SPI3_Init+0xa4>)
 800216e:	2200      	movs	r2, #0
 8002170:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002172:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <MX_SPI3_Init+0xa4>)
 8002174:	2200      	movs	r2, #0
 8002176:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002178:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <MX_SPI3_Init+0xa4>)
 800217a:	2200      	movs	r2, #0
 800217c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800217e:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <MX_SPI3_Init+0xa4>)
 8002180:	2200      	movs	r2, #0
 8002182:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002184:	4b07      	ldr	r3, [pc, #28]	; (80021a4 <MX_SPI3_Init+0xa4>)
 8002186:	2200      	movs	r2, #0
 8002188:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800218a:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <MX_SPI3_Init+0xa4>)
 800218c:	2200      	movs	r2, #0
 800218e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002190:	4804      	ldr	r0, [pc, #16]	; (80021a4 <MX_SPI3_Init+0xa4>)
 8002192:	f00c fbeb 	bl	800e96c <HAL_SPI_Init>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 800219c:	f000 fc1e 	bl	80029dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80021a0:	bf00      	nop
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	24001048 	.word	0x24001048
 80021a8:	40003c00 	.word	0x40003c00

080021ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08a      	sub	sp, #40	; 0x28
 80021b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021b2:	f107 031c 	add.w	r3, r7, #28
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	605a      	str	r2, [r3, #4]
 80021bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021be:	463b      	mov	r3, r7
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
 80021ca:	611a      	str	r2, [r3, #16]
 80021cc:	615a      	str	r2, [r3, #20]
 80021ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021d0:	4b21      	ldr	r3, [pc, #132]	; (8002258 <MX_TIM2_Init+0xac>)
 80021d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80021d8:	4b1f      	ldr	r3, [pc, #124]	; (8002258 <MX_TIM2_Init+0xac>)
 80021da:	2200      	movs	r2, #0
 80021dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021de:	4b1e      	ldr	r3, [pc, #120]	; (8002258 <MX_TIM2_Init+0xac>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 80021e4:	4b1c      	ldr	r3, [pc, #112]	; (8002258 <MX_TIM2_Init+0xac>)
 80021e6:	225a      	movs	r2, #90	; 0x5a
 80021e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ea:	4b1b      	ldr	r3, [pc, #108]	; (8002258 <MX_TIM2_Init+0xac>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021f0:	4b19      	ldr	r3, [pc, #100]	; (8002258 <MX_TIM2_Init+0xac>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80021f6:	4818      	ldr	r0, [pc, #96]	; (8002258 <MX_TIM2_Init+0xac>)
 80021f8:	f00d f9a8 	bl	800f54c <HAL_TIM_PWM_Init>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002202:	f000 fbeb 	bl	80029dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800220a:	2300      	movs	r3, #0
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800220e:	f107 031c 	add.w	r3, r7, #28
 8002212:	4619      	mov	r1, r3
 8002214:	4810      	ldr	r0, [pc, #64]	; (8002258 <MX_TIM2_Init+0xac>)
 8002216:	f00e fc2f 	bl	8010a78 <HAL_TIMEx_MasterConfigSynchronization>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002220:	f000 fbdc 	bl	80029dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002224:	2360      	movs	r3, #96	; 0x60
 8002226:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002228:	2300      	movs	r3, #0
 800222a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800222c:	2300      	movs	r3, #0
 800222e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002230:	2300      	movs	r3, #0
 8002232:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002234:	463b      	mov	r3, r7
 8002236:	2208      	movs	r2, #8
 8002238:	4619      	mov	r1, r3
 800223a:	4807      	ldr	r0, [pc, #28]	; (8002258 <MX_TIM2_Init+0xac>)
 800223c:	f00d fe4e 	bl	800fedc <HAL_TIM_PWM_ConfigChannel>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002246:	f000 fbc9 	bl	80029dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800224a:	4803      	ldr	r0, [pc, #12]	; (8002258 <MX_TIM2_Init+0xac>)
 800224c:	f001 f8e4 	bl	8003418 <HAL_TIM_MspPostInit>

}
 8002250:	bf00      	nop
 8002252:	3728      	adds	r7, #40	; 0x28
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	240010d0 	.word	0x240010d0

0800225c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b08a      	sub	sp, #40	; 0x28
 8002260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002262:	f107 031c 	add.w	r3, r7, #28
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	605a      	str	r2, [r3, #4]
 800226c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800226e:	463b      	mov	r3, r7
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	60da      	str	r2, [r3, #12]
 800227a:	611a      	str	r2, [r3, #16]
 800227c:	615a      	str	r2, [r3, #20]
 800227e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002280:	4b26      	ldr	r3, [pc, #152]	; (800231c <MX_TIM3_Init+0xc0>)
 8002282:	4a27      	ldr	r2, [pc, #156]	; (8002320 <MX_TIM3_Init+0xc4>)
 8002284:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002286:	4b25      	ldr	r3, [pc, #148]	; (800231c <MX_TIM3_Init+0xc0>)
 8002288:	2200      	movs	r2, #0
 800228a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800228c:	4b23      	ldr	r3, [pc, #140]	; (800231c <MX_TIM3_Init+0xc0>)
 800228e:	2200      	movs	r2, #0
 8002290:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 8002292:	4b22      	ldr	r3, [pc, #136]	; (800231c <MX_TIM3_Init+0xc0>)
 8002294:	225a      	movs	r2, #90	; 0x5a
 8002296:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002298:	4b20      	ldr	r3, [pc, #128]	; (800231c <MX_TIM3_Init+0xc0>)
 800229a:	2200      	movs	r2, #0
 800229c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800229e:	4b1f      	ldr	r3, [pc, #124]	; (800231c <MX_TIM3_Init+0xc0>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80022a4:	481d      	ldr	r0, [pc, #116]	; (800231c <MX_TIM3_Init+0xc0>)
 80022a6:	f00d f951 	bl	800f54c <HAL_TIM_PWM_Init>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80022b0:	f000 fb94 	bl	80029dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022b4:	2300      	movs	r3, #0
 80022b6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022b8:	2300      	movs	r3, #0
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022bc:	f107 031c 	add.w	r3, r7, #28
 80022c0:	4619      	mov	r1, r3
 80022c2:	4816      	ldr	r0, [pc, #88]	; (800231c <MX_TIM3_Init+0xc0>)
 80022c4:	f00e fbd8 	bl	8010a78 <HAL_TIMEx_MasterConfigSynchronization>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80022ce:	f000 fb85 	bl	80029dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022d2:	2360      	movs	r3, #96	; 0x60
 80022d4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80022d6:	2300      	movs	r3, #0
 80022d8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022da:	2300      	movs	r3, #0
 80022dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022de:	2300      	movs	r3, #0
 80022e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022e2:	463b      	mov	r3, r7
 80022e4:	2200      	movs	r2, #0
 80022e6:	4619      	mov	r1, r3
 80022e8:	480c      	ldr	r0, [pc, #48]	; (800231c <MX_TIM3_Init+0xc0>)
 80022ea:	f00d fdf7 	bl	800fedc <HAL_TIM_PWM_ConfigChannel>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80022f4:	f000 fb72 	bl	80029dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022f8:	463b      	mov	r3, r7
 80022fa:	2204      	movs	r2, #4
 80022fc:	4619      	mov	r1, r3
 80022fe:	4807      	ldr	r0, [pc, #28]	; (800231c <MX_TIM3_Init+0xc0>)
 8002300:	f00d fdec 	bl	800fedc <HAL_TIM_PWM_ConfigChannel>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800230a:	f000 fb67 	bl	80029dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800230e:	4803      	ldr	r0, [pc, #12]	; (800231c <MX_TIM3_Init+0xc0>)
 8002310:	f001 f882 	bl	8003418 <HAL_TIM_MspPostInit>

}
 8002314:	bf00      	nop
 8002316:	3728      	adds	r7, #40	; 0x28
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	2400111c 	.word	0x2400111c
 8002320:	40000400 	.word	0x40000400

08002324 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08a      	sub	sp, #40	; 0x28
 8002328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800232a:	f107 031c 	add.w	r3, r7, #28
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	605a      	str	r2, [r3, #4]
 8002334:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002336:	463b      	mov	r3, r7
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	60da      	str	r2, [r3, #12]
 8002342:	611a      	str	r2, [r3, #16]
 8002344:	615a      	str	r2, [r3, #20]
 8002346:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002348:	4b32      	ldr	r3, [pc, #200]	; (8002414 <MX_TIM4_Init+0xf0>)
 800234a:	4a33      	ldr	r2, [pc, #204]	; (8002418 <MX_TIM4_Init+0xf4>)
 800234c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 28;
 800234e:	4b31      	ldr	r3, [pc, #196]	; (8002414 <MX_TIM4_Init+0xf0>)
 8002350:	221c      	movs	r2, #28
 8002352:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002354:	4b2f      	ldr	r3, [pc, #188]	; (8002414 <MX_TIM4_Init+0xf0>)
 8002356:	2200      	movs	r2, #0
 8002358:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 800235a:	4b2e      	ldr	r3, [pc, #184]	; (8002414 <MX_TIM4_Init+0xf0>)
 800235c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002360:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002362:	4b2c      	ldr	r3, [pc, #176]	; (8002414 <MX_TIM4_Init+0xf0>)
 8002364:	2200      	movs	r2, #0
 8002366:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002368:	4b2a      	ldr	r3, [pc, #168]	; (8002414 <MX_TIM4_Init+0xf0>)
 800236a:	2200      	movs	r2, #0
 800236c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800236e:	4829      	ldr	r0, [pc, #164]	; (8002414 <MX_TIM4_Init+0xf0>)
 8002370:	f00d f8ec 	bl	800f54c <HAL_TIM_PWM_Init>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800237a:	f000 fb2f 	bl	80029dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800237e:	2300      	movs	r3, #0
 8002380:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002382:	2300      	movs	r3, #0
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002386:	f107 031c 	add.w	r3, r7, #28
 800238a:	4619      	mov	r1, r3
 800238c:	4821      	ldr	r0, [pc, #132]	; (8002414 <MX_TIM4_Init+0xf0>)
 800238e:	f00e fb73 	bl	8010a78 <HAL_TIMEx_MasterConfigSynchronization>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002398:	f000 fb20 	bl	80029dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800239c:	2360      	movs	r3, #96	; 0x60
 800239e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80023a0:	2300      	movs	r3, #0
 80023a2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023a4:	2300      	movs	r3, #0
 80023a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023a8:	2300      	movs	r3, #0
 80023aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023ac:	463b      	mov	r3, r7
 80023ae:	2200      	movs	r2, #0
 80023b0:	4619      	mov	r1, r3
 80023b2:	4818      	ldr	r0, [pc, #96]	; (8002414 <MX_TIM4_Init+0xf0>)
 80023b4:	f00d fd92 	bl	800fedc <HAL_TIM_PWM_ConfigChannel>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80023be:	f000 fb0d 	bl	80029dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023c2:	463b      	mov	r3, r7
 80023c4:	2204      	movs	r2, #4
 80023c6:	4619      	mov	r1, r3
 80023c8:	4812      	ldr	r0, [pc, #72]	; (8002414 <MX_TIM4_Init+0xf0>)
 80023ca:	f00d fd87 	bl	800fedc <HAL_TIM_PWM_ConfigChannel>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80023d4:	f000 fb02 	bl	80029dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023d8:	463b      	mov	r3, r7
 80023da:	2208      	movs	r2, #8
 80023dc:	4619      	mov	r1, r3
 80023de:	480d      	ldr	r0, [pc, #52]	; (8002414 <MX_TIM4_Init+0xf0>)
 80023e0:	f00d fd7c 	bl	800fedc <HAL_TIM_PWM_ConfigChannel>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80023ea:	f000 faf7 	bl	80029dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023ee:	463b      	mov	r3, r7
 80023f0:	220c      	movs	r2, #12
 80023f2:	4619      	mov	r1, r3
 80023f4:	4807      	ldr	r0, [pc, #28]	; (8002414 <MX_TIM4_Init+0xf0>)
 80023f6:	f00d fd71 	bl	800fedc <HAL_TIM_PWM_ConfigChannel>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8002400:	f000 faec 	bl	80029dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002404:	4803      	ldr	r0, [pc, #12]	; (8002414 <MX_TIM4_Init+0xf0>)
 8002406:	f001 f807 	bl	8003418 <HAL_TIM_MspPostInit>

}
 800240a:	bf00      	nop
 800240c:	3728      	adds	r7, #40	; 0x28
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	24001168 	.word	0x24001168
 8002418:	40000800 	.word	0x40000800

0800241c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08a      	sub	sp, #40	; 0x28
 8002420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002422:	f107 031c 	add.w	r3, r7, #28
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	605a      	str	r2, [r3, #4]
 800242c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800242e:	463b      	mov	r3, r7
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	605a      	str	r2, [r3, #4]
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	60da      	str	r2, [r3, #12]
 800243a:	611a      	str	r2, [r3, #16]
 800243c:	615a      	str	r2, [r3, #20]
 800243e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002440:	4b21      	ldr	r3, [pc, #132]	; (80024c8 <MX_TIM5_Init+0xac>)
 8002442:	4a22      	ldr	r2, [pc, #136]	; (80024cc <MX_TIM5_Init+0xb0>)
 8002444:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002446:	4b20      	ldr	r3, [pc, #128]	; (80024c8 <MX_TIM5_Init+0xac>)
 8002448:	2200      	movs	r2, #0
 800244a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800244c:	4b1e      	ldr	r3, [pc, #120]	; (80024c8 <MX_TIM5_Init+0xac>)
 800244e:	2200      	movs	r2, #0
 8002450:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 8002452:	4b1d      	ldr	r3, [pc, #116]	; (80024c8 <MX_TIM5_Init+0xac>)
 8002454:	225a      	movs	r2, #90	; 0x5a
 8002456:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002458:	4b1b      	ldr	r3, [pc, #108]	; (80024c8 <MX_TIM5_Init+0xac>)
 800245a:	2200      	movs	r2, #0
 800245c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800245e:	4b1a      	ldr	r3, [pc, #104]	; (80024c8 <MX_TIM5_Init+0xac>)
 8002460:	2200      	movs	r2, #0
 8002462:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002464:	4818      	ldr	r0, [pc, #96]	; (80024c8 <MX_TIM5_Init+0xac>)
 8002466:	f00d f871 	bl	800f54c <HAL_TIM_PWM_Init>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002470:	f000 fab4 	bl	80029dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002474:	2300      	movs	r3, #0
 8002476:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002478:	2300      	movs	r3, #0
 800247a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800247c:	f107 031c 	add.w	r3, r7, #28
 8002480:	4619      	mov	r1, r3
 8002482:	4811      	ldr	r0, [pc, #68]	; (80024c8 <MX_TIM5_Init+0xac>)
 8002484:	f00e faf8 	bl	8010a78 <HAL_TIMEx_MasterConfigSynchronization>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800248e:	f000 faa5 	bl	80029dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002492:	2360      	movs	r3, #96	; 0x60
 8002494:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800249a:	2300      	movs	r3, #0
 800249c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800249e:	2300      	movs	r3, #0
 80024a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80024a2:	463b      	mov	r3, r7
 80024a4:	220c      	movs	r2, #12
 80024a6:	4619      	mov	r1, r3
 80024a8:	4807      	ldr	r0, [pc, #28]	; (80024c8 <MX_TIM5_Init+0xac>)
 80024aa:	f00d fd17 	bl	800fedc <HAL_TIM_PWM_ConfigChannel>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80024b4:	f000 fa92 	bl	80029dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80024b8:	4803      	ldr	r0, [pc, #12]	; (80024c8 <MX_TIM5_Init+0xac>)
 80024ba:	f000 ffad 	bl	8003418 <HAL_TIM_MspPostInit>

}
 80024be:	bf00      	nop
 80024c0:	3728      	adds	r7, #40	; 0x28
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	240011b4 	.word	0x240011b4
 80024cc:	40000c00 	.word	0x40000c00

080024d0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80024d4:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <MX_TIM13_Init+0x40>)
 80024d6:	4a0f      	ldr	r2, [pc, #60]	; (8002514 <MX_TIM13_Init+0x44>)
 80024d8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 95;
 80024da:	4b0d      	ldr	r3, [pc, #52]	; (8002510 <MX_TIM13_Init+0x40>)
 80024dc:	225f      	movs	r2, #95	; 0x5f
 80024de:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024e0:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <MX_TIM13_Init+0x40>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 80024e6:	4b0a      	ldr	r3, [pc, #40]	; (8002510 <MX_TIM13_Init+0x40>)
 80024e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024ec:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ee:	4b08      	ldr	r3, [pc, #32]	; (8002510 <MX_TIM13_Init+0x40>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024f4:	4b06      	ldr	r3, [pc, #24]	; (8002510 <MX_TIM13_Init+0x40>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80024fa:	4805      	ldr	r0, [pc, #20]	; (8002510 <MX_TIM13_Init+0x40>)
 80024fc:	f00c ffcf 	bl	800f49e <HAL_TIM_Base_Init>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8002506:	f000 fa69 	bl	80029dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	24001200 	.word	0x24001200
 8002514:	40001c00 	.word	0x40001c00

08002518 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800251c:	4b22      	ldr	r3, [pc, #136]	; (80025a8 <MX_UART4_Init+0x90>)
 800251e:	4a23      	ldr	r2, [pc, #140]	; (80025ac <MX_UART4_Init+0x94>)
 8002520:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002522:	4b21      	ldr	r3, [pc, #132]	; (80025a8 <MX_UART4_Init+0x90>)
 8002524:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002528:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800252a:	4b1f      	ldr	r3, [pc, #124]	; (80025a8 <MX_UART4_Init+0x90>)
 800252c:	2200      	movs	r2, #0
 800252e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002530:	4b1d      	ldr	r3, [pc, #116]	; (80025a8 <MX_UART4_Init+0x90>)
 8002532:	2200      	movs	r2, #0
 8002534:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002536:	4b1c      	ldr	r3, [pc, #112]	; (80025a8 <MX_UART4_Init+0x90>)
 8002538:	2200      	movs	r2, #0
 800253a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800253c:	4b1a      	ldr	r3, [pc, #104]	; (80025a8 <MX_UART4_Init+0x90>)
 800253e:	220c      	movs	r2, #12
 8002540:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002542:	4b19      	ldr	r3, [pc, #100]	; (80025a8 <MX_UART4_Init+0x90>)
 8002544:	2200      	movs	r2, #0
 8002546:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002548:	4b17      	ldr	r3, [pc, #92]	; (80025a8 <MX_UART4_Init+0x90>)
 800254a:	2200      	movs	r2, #0
 800254c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800254e:	4b16      	ldr	r3, [pc, #88]	; (80025a8 <MX_UART4_Init+0x90>)
 8002550:	2200      	movs	r2, #0
 8002552:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002554:	4b14      	ldr	r3, [pc, #80]	; (80025a8 <MX_UART4_Init+0x90>)
 8002556:	2200      	movs	r2, #0
 8002558:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800255a:	4b13      	ldr	r3, [pc, #76]	; (80025a8 <MX_UART4_Init+0x90>)
 800255c:	2200      	movs	r2, #0
 800255e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002560:	4811      	ldr	r0, [pc, #68]	; (80025a8 <MX_UART4_Init+0x90>)
 8002562:	f00e fb43 	bl	8010bec <HAL_UART_Init>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800256c:	f000 fa36 	bl	80029dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002570:	2100      	movs	r1, #0
 8002572:	480d      	ldr	r0, [pc, #52]	; (80025a8 <MX_UART4_Init+0x90>)
 8002574:	f00f fc49 	bl	8011e0a <HAL_UARTEx_SetTxFifoThreshold>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800257e:	f000 fa2d 	bl	80029dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002582:	2100      	movs	r1, #0
 8002584:	4808      	ldr	r0, [pc, #32]	; (80025a8 <MX_UART4_Init+0x90>)
 8002586:	f00f fc7e 	bl	8011e86 <HAL_UARTEx_SetRxFifoThreshold>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002590:	f000 fa24 	bl	80029dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002594:	4804      	ldr	r0, [pc, #16]	; (80025a8 <MX_UART4_Init+0x90>)
 8002596:	f00f fbff 	bl	8011d98 <HAL_UARTEx_DisableFifoMode>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80025a0:	f000 fa1c 	bl	80029dc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80025a4:	bf00      	nop
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	240014a4 	.word	0x240014a4
 80025ac:	40004c00 	.word	0x40004c00

080025b0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80025b4:	4b22      	ldr	r3, [pc, #136]	; (8002640 <MX_USART6_UART_Init+0x90>)
 80025b6:	4a23      	ldr	r2, [pc, #140]	; (8002644 <MX_USART6_UART_Init+0x94>)
 80025b8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80025ba:	4b21      	ldr	r3, [pc, #132]	; (8002640 <MX_USART6_UART_Init+0x90>)
 80025bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025c0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80025c2:	4b1f      	ldr	r3, [pc, #124]	; (8002640 <MX_USART6_UART_Init+0x90>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80025c8:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <MX_USART6_UART_Init+0x90>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80025ce:	4b1c      	ldr	r3, [pc, #112]	; (8002640 <MX_USART6_UART_Init+0x90>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80025d4:	4b1a      	ldr	r3, [pc, #104]	; (8002640 <MX_USART6_UART_Init+0x90>)
 80025d6:	220c      	movs	r2, #12
 80025d8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025da:	4b19      	ldr	r3, [pc, #100]	; (8002640 <MX_USART6_UART_Init+0x90>)
 80025dc:	2200      	movs	r2, #0
 80025de:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80025e0:	4b17      	ldr	r3, [pc, #92]	; (8002640 <MX_USART6_UART_Init+0x90>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025e6:	4b16      	ldr	r3, [pc, #88]	; (8002640 <MX_USART6_UART_Init+0x90>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025ec:	4b14      	ldr	r3, [pc, #80]	; (8002640 <MX_USART6_UART_Init+0x90>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025f2:	4b13      	ldr	r3, [pc, #76]	; (8002640 <MX_USART6_UART_Init+0x90>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80025f8:	4811      	ldr	r0, [pc, #68]	; (8002640 <MX_USART6_UART_Init+0x90>)
 80025fa:	f00e faf7 	bl	8010bec <HAL_UART_Init>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002604:	f000 f9ea 	bl	80029dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002608:	2100      	movs	r1, #0
 800260a:	480d      	ldr	r0, [pc, #52]	; (8002640 <MX_USART6_UART_Init+0x90>)
 800260c:	f00f fbfd 	bl	8011e0a <HAL_UARTEx_SetTxFifoThreshold>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8002616:	f000 f9e1 	bl	80029dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800261a:	2100      	movs	r1, #0
 800261c:	4808      	ldr	r0, [pc, #32]	; (8002640 <MX_USART6_UART_Init+0x90>)
 800261e:	f00f fc32 	bl	8011e86 <HAL_UARTEx_SetRxFifoThreshold>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002628:	f000 f9d8 	bl	80029dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 800262c:	4804      	ldr	r0, [pc, #16]	; (8002640 <MX_USART6_UART_Init+0x90>)
 800262e:	f00f fbb3 	bl	8011d98 <HAL_UARTEx_DisableFifoMode>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002638:	f000 f9d0 	bl	80029dc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800263c:	bf00      	nop
 800263e:	bd80      	pop	{r7, pc}
 8002640:	24001538 	.word	0x24001538
 8002644:	40011400 	.word	0x40011400

08002648 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800264e:	4b2d      	ldr	r3, [pc, #180]	; (8002704 <MX_DMA_Init+0xbc>)
 8002650:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002654:	4a2b      	ldr	r2, [pc, #172]	; (8002704 <MX_DMA_Init+0xbc>)
 8002656:	f043 0301 	orr.w	r3, r3, #1
 800265a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800265e:	4b29      	ldr	r3, [pc, #164]	; (8002704 <MX_DMA_Init+0xbc>)
 8002660:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	607b      	str	r3, [r7, #4]
 800266a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800266c:	4b25      	ldr	r3, [pc, #148]	; (8002704 <MX_DMA_Init+0xbc>)
 800266e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002672:	4a24      	ldr	r2, [pc, #144]	; (8002704 <MX_DMA_Init+0xbc>)
 8002674:	f043 0302 	orr.w	r3, r3, #2
 8002678:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800267c:	4b21      	ldr	r3, [pc, #132]	; (8002704 <MX_DMA_Init+0xbc>)
 800267e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	603b      	str	r3, [r7, #0]
 8002688:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800268a:	2200      	movs	r2, #0
 800268c:	2100      	movs	r1, #0
 800268e:	200b      	movs	r0, #11
 8002690:	f002 fec7 	bl	8005422 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002694:	200b      	movs	r0, #11
 8002696:	f002 fede 	bl	8005456 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800269a:	2200      	movs	r2, #0
 800269c:	2100      	movs	r1, #0
 800269e:	200c      	movs	r0, #12
 80026a0:	f002 febf 	bl	8005422 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80026a4:	200c      	movs	r0, #12
 80026a6:	f002 fed6 	bl	8005456 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80026aa:	2200      	movs	r2, #0
 80026ac:	2100      	movs	r1, #0
 80026ae:	200d      	movs	r0, #13
 80026b0:	f002 feb7 	bl	8005422 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80026b4:	200d      	movs	r0, #13
 80026b6:	f002 fece 	bl	8005456 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80026ba:	2200      	movs	r2, #0
 80026bc:	2100      	movs	r1, #0
 80026be:	200e      	movs	r0, #14
 80026c0:	f002 feaf 	bl	8005422 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80026c4:	200e      	movs	r0, #14
 80026c6:	f002 fec6 	bl	8005456 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80026ca:	2200      	movs	r2, #0
 80026cc:	2100      	movs	r1, #0
 80026ce:	200f      	movs	r0, #15
 80026d0:	f002 fea7 	bl	8005422 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80026d4:	200f      	movs	r0, #15
 80026d6:	f002 febe 	bl	8005456 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80026da:	2200      	movs	r2, #0
 80026dc:	2100      	movs	r1, #0
 80026de:	2010      	movs	r0, #16
 80026e0:	f002 fe9f 	bl	8005422 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80026e4:	2010      	movs	r0, #16
 80026e6:	f002 feb6 	bl	8005456 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80026ea:	2200      	movs	r2, #0
 80026ec:	2100      	movs	r1, #0
 80026ee:	2046      	movs	r0, #70	; 0x46
 80026f0:	f002 fe97 	bl	8005422 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80026f4:	2046      	movs	r0, #70	; 0x46
 80026f6:	f002 feae 	bl	8005456 <HAL_NVIC_EnableIRQ>

}
 80026fa:	bf00      	nop
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	58024400 	.word	0x58024400

08002708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b08c      	sub	sp, #48	; 0x30
 800270c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800270e:	f107 031c 	add.w	r3, r7, #28
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	605a      	str	r2, [r3, #4]
 8002718:	609a      	str	r2, [r3, #8]
 800271a:	60da      	str	r2, [r3, #12]
 800271c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800271e:	4ba7      	ldr	r3, [pc, #668]	; (80029bc <MX_GPIO_Init+0x2b4>)
 8002720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002724:	4aa5      	ldr	r2, [pc, #660]	; (80029bc <MX_GPIO_Init+0x2b4>)
 8002726:	f043 0310 	orr.w	r3, r3, #16
 800272a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800272e:	4ba3      	ldr	r3, [pc, #652]	; (80029bc <MX_GPIO_Init+0x2b4>)
 8002730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002734:	f003 0310 	and.w	r3, r3, #16
 8002738:	61bb      	str	r3, [r7, #24]
 800273a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800273c:	4b9f      	ldr	r3, [pc, #636]	; (80029bc <MX_GPIO_Init+0x2b4>)
 800273e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002742:	4a9e      	ldr	r2, [pc, #632]	; (80029bc <MX_GPIO_Init+0x2b4>)
 8002744:	f043 0320 	orr.w	r3, r3, #32
 8002748:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800274c:	4b9b      	ldr	r3, [pc, #620]	; (80029bc <MX_GPIO_Init+0x2b4>)
 800274e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002752:	f003 0320 	and.w	r3, r3, #32
 8002756:	617b      	str	r3, [r7, #20]
 8002758:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800275a:	4b98      	ldr	r3, [pc, #608]	; (80029bc <MX_GPIO_Init+0x2b4>)
 800275c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002760:	4a96      	ldr	r2, [pc, #600]	; (80029bc <MX_GPIO_Init+0x2b4>)
 8002762:	f043 0304 	orr.w	r3, r3, #4
 8002766:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800276a:	4b94      	ldr	r3, [pc, #592]	; (80029bc <MX_GPIO_Init+0x2b4>)
 800276c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	613b      	str	r3, [r7, #16]
 8002776:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002778:	4b90      	ldr	r3, [pc, #576]	; (80029bc <MX_GPIO_Init+0x2b4>)
 800277a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800277e:	4a8f      	ldr	r2, [pc, #572]	; (80029bc <MX_GPIO_Init+0x2b4>)
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002788:	4b8c      	ldr	r3, [pc, #560]	; (80029bc <MX_GPIO_Init+0x2b4>)
 800278a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002796:	4b89      	ldr	r3, [pc, #548]	; (80029bc <MX_GPIO_Init+0x2b4>)
 8002798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800279c:	4a87      	ldr	r2, [pc, #540]	; (80029bc <MX_GPIO_Init+0x2b4>)
 800279e:	f043 0302 	orr.w	r3, r3, #2
 80027a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027a6:	4b85      	ldr	r3, [pc, #532]	; (80029bc <MX_GPIO_Init+0x2b4>)
 80027a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80027b4:	4b81      	ldr	r3, [pc, #516]	; (80029bc <MX_GPIO_Init+0x2b4>)
 80027b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ba:	4a80      	ldr	r2, [pc, #512]	; (80029bc <MX_GPIO_Init+0x2b4>)
 80027bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027c4:	4b7d      	ldr	r3, [pc, #500]	; (80029bc <MX_GPIO_Init+0x2b4>)
 80027c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ce:	607b      	str	r3, [r7, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027d2:	4b7a      	ldr	r3, [pc, #488]	; (80029bc <MX_GPIO_Init+0x2b4>)
 80027d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027d8:	4a78      	ldr	r2, [pc, #480]	; (80029bc <MX_GPIO_Init+0x2b4>)
 80027da:	f043 0308 	orr.w	r3, r3, #8
 80027de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027e2:	4b76      	ldr	r3, [pc, #472]	; (80029bc <MX_GPIO_Init+0x2b4>)
 80027e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027e8:	f003 0308 	and.w	r3, r3, #8
 80027ec:	603b      	str	r3, [r7, #0]
 80027ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 80027f0:	2200      	movs	r2, #0
 80027f2:	f241 5104 	movw	r1, #5380	; 0x1504
 80027f6:	4872      	ldr	r0, [pc, #456]	; (80029c0 <MX_GPIO_Init+0x2b8>)
 80027f8:	f005 fc40 	bl	800807c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|ARM2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 80027fc:	2200      	movs	r2, #0
 80027fe:	f248 0106 	movw	r1, #32774	; 0x8006
 8002802:	4870      	ldr	r0, [pc, #448]	; (80029c4 <MX_GPIO_Init+0x2bc>)
 8002804:	f005 fc3a 	bl	800807c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002808:	2200      	movs	r2, #0
 800280a:	2130      	movs	r1, #48	; 0x30
 800280c:	486e      	ldr	r0, [pc, #440]	; (80029c8 <MX_GPIO_Init+0x2c0>)
 800280e:	f005 fc35 	bl	800807c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|PYRO1_Pin, GPIO_PIN_RESET);
 8002812:	2200      	movs	r2, #0
 8002814:	2103      	movs	r1, #3
 8002816:	486d      	ldr	r0, [pc, #436]	; (80029cc <MX_GPIO_Init+0x2c4>)
 8002818:	f005 fc30 	bl	800807c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 800281c:	2200      	movs	r2, #0
 800281e:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8002822:	486b      	ldr	r0, [pc, #428]	; (80029d0 <MX_GPIO_Init+0x2c8>)
 8002824:	f005 fc2a 	bl	800807c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8002828:	2200      	movs	r2, #0
 800282a:	210e      	movs	r1, #14
 800282c:	4869      	ldr	r0, [pc, #420]	; (80029d4 <MX_GPIO_Init+0x2cc>)
 800282e:	f005 fc25 	bl	800807c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_SET);
 8002832:	2201      	movs	r2, #1
 8002834:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002838:	4867      	ldr	r0, [pc, #412]	; (80029d8 <MX_GPIO_Init+0x2d0>)
 800283a:	f005 fc1f 	bl	800807c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 800283e:	2200      	movs	r2, #0
 8002840:	2101      	movs	r1, #1
 8002842:	4865      	ldr	r0, [pc, #404]	; (80029d8 <MX_GPIO_Init+0x2d0>)
 8002844:	f005 fc1a 	bl	800807c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 8002848:	f241 5304 	movw	r3, #5380	; 0x1504
 800284c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800284e:	2301      	movs	r3, #1
 8002850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002852:	2300      	movs	r3, #0
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002856:	2300      	movs	r3, #0
 8002858:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800285a:	f107 031c 	add.w	r3, r7, #28
 800285e:	4619      	mov	r1, r3
 8002860:	4857      	ldr	r0, [pc, #348]	; (80029c0 <MX_GPIO_Init+0x2b8>)
 8002862:	f005 fa4b 	bl	8007cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin ARM2_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|ARM2_Pin|GPIO_PIN_15;
 8002866:	f248 0306 	movw	r3, #32774	; 0x8006
 800286a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800286c:	2301      	movs	r3, #1
 800286e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002870:	2300      	movs	r3, #0
 8002872:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002874:	2300      	movs	r3, #0
 8002876:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002878:	f107 031c 	add.w	r3, r7, #28
 800287c:	4619      	mov	r1, r3
 800287e:	4851      	ldr	r0, [pc, #324]	; (80029c4 <MX_GPIO_Init+0x2bc>)
 8002880:	f005 fa3c 	bl	8007cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002884:	2330      	movs	r3, #48	; 0x30
 8002886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002888:	2301      	movs	r3, #1
 800288a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288c:	2300      	movs	r3, #0
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002890:	2300      	movs	r3, #0
 8002892:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002894:	f107 031c 	add.w	r3, r7, #28
 8002898:	4619      	mov	r1, r3
 800289a:	484b      	ldr	r0, [pc, #300]	; (80029c8 <MX_GPIO_Init+0x2c0>)
 800289c:	f005 fa2e 	bl	8007cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PYRO1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|PYRO1_Pin;
 80028a0:	2303      	movs	r3, #3
 80028a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028a4:	2301      	movs	r3, #1
 80028a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a8:	2300      	movs	r3, #0
 80028aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ac:	2300      	movs	r3, #0
 80028ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b0:	f107 031c 	add.w	r3, r7, #28
 80028b4:	4619      	mov	r1, r3
 80028b6:	4845      	ldr	r0, [pc, #276]	; (80029cc <MX_GPIO_Init+0x2c4>)
 80028b8:	f005 fa20 	bl	8007cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 80028bc:	2304      	movs	r3, #4
 80028be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028c0:	2300      	movs	r3, #0
 80028c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028c4:	2301      	movs	r3, #1
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 80028c8:	f107 031c 	add.w	r3, r7, #28
 80028cc:	4619      	mov	r1, r3
 80028ce:	483f      	ldr	r0, [pc, #252]	; (80029cc <MX_GPIO_Init+0x2c4>)
 80028d0:	f005 fa14 	bl	8007cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 80028d4:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 80028d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028da:	2301      	movs	r3, #1
 80028dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e2:	2300      	movs	r3, #0
 80028e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028e6:	f107 031c 	add.w	r3, r7, #28
 80028ea:	4619      	mov	r1, r3
 80028ec:	4838      	ldr	r0, [pc, #224]	; (80029d0 <MX_GPIO_Init+0x2c8>)
 80028ee:	f005 fa05 	bl	8007cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 80028f2:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80028f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028f8:	2300      	movs	r3, #0
 80028fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028fc:	2301      	movs	r3, #1
 80028fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002900:	f107 031c 	add.w	r3, r7, #28
 8002904:	4619      	mov	r1, r3
 8002906:	4832      	ldr	r0, [pc, #200]	; (80029d0 <MX_GPIO_Init+0x2c8>)
 8002908:	f005 f9f8 	bl	8007cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 800290c:	2301      	movs	r3, #1
 800290e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002910:	2300      	movs	r3, #0
 8002912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002914:	2301      	movs	r3, #1
 8002916:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 8002918:	f107 031c 	add.w	r3, r7, #28
 800291c:	4619      	mov	r1, r3
 800291e:	482d      	ldr	r0, [pc, #180]	; (80029d4 <MX_GPIO_Init+0x2cc>)
 8002920:	f005 f9ec 	bl	8007cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 8002924:	230e      	movs	r3, #14
 8002926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002928:	2301      	movs	r3, #1
 800292a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292c:	2300      	movs	r3, #0
 800292e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002930:	2300      	movs	r3, #0
 8002932:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002934:	f107 031c 	add.w	r3, r7, #28
 8002938:	4619      	mov	r1, r3
 800293a:	4826      	ldr	r0, [pc, #152]	; (80029d4 <MX_GPIO_Init+0x2cc>)
 800293c:	f005 f9de 	bl	8007cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 8002940:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8002944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002946:	2300      	movs	r3, #0
 8002948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800294a:	2301      	movs	r3, #1
 800294c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800294e:	f107 031c 	add.w	r3, r7, #28
 8002952:	4619      	mov	r1, r3
 8002954:	481a      	ldr	r0, [pc, #104]	; (80029c0 <MX_GPIO_Init+0x2b8>)
 8002956:	f005 f9d1 	bl	8007cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0;
 800295a:	f240 7301 	movw	r3, #1793	; 0x701
 800295e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002960:	2301      	movs	r3, #1
 8002962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002964:	2300      	movs	r3, #0
 8002966:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002968:	2300      	movs	r3, #0
 800296a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800296c:	f107 031c 	add.w	r3, r7, #28
 8002970:	4619      	mov	r1, r3
 8002972:	4819      	ldr	r0, [pc, #100]	; (80029d8 <MX_GPIO_Init+0x2d0>)
 8002974:	f005 f9c2 	bl	8007cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 8002978:	2310      	movs	r3, #16
 800297a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800297c:	2300      	movs	r3, #0
 800297e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002980:	2300      	movs	r3, #0
 8002982:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002984:	f107 031c 	add.w	r3, r7, #28
 8002988:	4619      	mov	r1, r3
 800298a:	4812      	ldr	r0, [pc, #72]	; (80029d4 <MX_GPIO_Init+0x2cc>)
 800298c:	f005 f9b6 	bl	8007cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002990:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002996:	2302      	movs	r3, #2
 8002998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299a:	2300      	movs	r3, #0
 800299c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299e:	2300      	movs	r3, #0
 80029a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80029a2:	2300      	movs	r3, #0
 80029a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a6:	f107 031c 	add.w	r3, r7, #28
 80029aa:	4619      	mov	r1, r3
 80029ac:	4805      	ldr	r0, [pc, #20]	; (80029c4 <MX_GPIO_Init+0x2bc>)
 80029ae:	f005 f9a5 	bl	8007cfc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80029b2:	bf00      	nop
 80029b4:	3730      	adds	r7, #48	; 0x30
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	58024400 	.word	0x58024400
 80029c0:	58021000 	.word	0x58021000
 80029c4:	58020000 	.word	0x58020000
 80029c8:	58020800 	.word	0x58020800
 80029cc:	58020400 	.word	0x58020400
 80029d0:	58021400 	.word	0x58021400
 80029d4:	58021800 	.word	0x58021800
 80029d8:	58020c00 	.word	0x58020c00

080029dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029e0:	b672      	cpsid	i
}
 80029e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80029e4:	e7fe      	b.n	80029e4 <Error_Handler+0x8>
	...

080029e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ee:	4b0a      	ldr	r3, [pc, #40]	; (8002a18 <HAL_MspInit+0x30>)
 80029f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80029f4:	4a08      	ldr	r2, [pc, #32]	; (8002a18 <HAL_MspInit+0x30>)
 80029f6:	f043 0302 	orr.w	r3, r3, #2
 80029fa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80029fe:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <HAL_MspInit+0x30>)
 8002a00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	607b      	str	r3, [r7, #4]
 8002a0a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	58024400 	.word	0x58024400

08002a1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08c      	sub	sp, #48	; 0x30
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a24:	f107 031c 	add.w	r3, r7, #28
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	605a      	str	r2, [r3, #4]
 8002a2e:	609a      	str	r2, [r3, #8]
 8002a30:	60da      	str	r2, [r3, #12]
 8002a32:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a5d      	ldr	r2, [pc, #372]	; (8002bb0 <HAL_ADC_MspInit+0x194>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d159      	bne.n	8002af2 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002a3e:	4b5d      	ldr	r3, [pc, #372]	; (8002bb4 <HAL_ADC_MspInit+0x198>)
 8002a40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002a44:	4a5b      	ldr	r2, [pc, #364]	; (8002bb4 <HAL_ADC_MspInit+0x198>)
 8002a46:	f043 0320 	orr.w	r3, r3, #32
 8002a4a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002a4e:	4b59      	ldr	r3, [pc, #356]	; (8002bb4 <HAL_ADC_MspInit+0x198>)
 8002a50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002a54:	f003 0320 	and.w	r3, r3, #32
 8002a58:	61bb      	str	r3, [r7, #24]
 8002a5a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a5c:	4b55      	ldr	r3, [pc, #340]	; (8002bb4 <HAL_ADC_MspInit+0x198>)
 8002a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a62:	4a54      	ldr	r2, [pc, #336]	; (8002bb4 <HAL_ADC_MspInit+0x198>)
 8002a64:	f043 0304 	orr.w	r3, r3, #4
 8002a68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a6c:	4b51      	ldr	r3, [pc, #324]	; (8002bb4 <HAL_ADC_MspInit+0x198>)
 8002a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a72:	f003 0304 	and.w	r3, r3, #4
 8002a76:	617b      	str	r3, [r7, #20]
 8002a78:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = ARM_CHECK_Pin;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a82:	2300      	movs	r3, #0
 8002a84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002a86:	f107 031c 	add.w	r3, r7, #28
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	484a      	ldr	r0, [pc, #296]	; (8002bb8 <HAL_ADC_MspInit+0x19c>)
 8002a8e:	f005 f935 	bl	8007cfc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 8002a92:	4b4a      	ldr	r3, [pc, #296]	; (8002bbc <HAL_ADC_MspInit+0x1a0>)
 8002a94:	4a4a      	ldr	r2, [pc, #296]	; (8002bc0 <HAL_ADC_MspInit+0x1a4>)
 8002a96:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002a98:	4b48      	ldr	r3, [pc, #288]	; (8002bbc <HAL_ADC_MspInit+0x1a0>)
 8002a9a:	2209      	movs	r2, #9
 8002a9c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a9e:	4b47      	ldr	r3, [pc, #284]	; (8002bbc <HAL_ADC_MspInit+0x1a0>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aa4:	4b45      	ldr	r3, [pc, #276]	; (8002bbc <HAL_ADC_MspInit+0x1a0>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002aaa:	4b44      	ldr	r3, [pc, #272]	; (8002bbc <HAL_ADC_MspInit+0x1a0>)
 8002aac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ab0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ab2:	4b42      	ldr	r3, [pc, #264]	; (8002bbc <HAL_ADC_MspInit+0x1a0>)
 8002ab4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ab8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002aba:	4b40      	ldr	r3, [pc, #256]	; (8002bbc <HAL_ADC_MspInit+0x1a0>)
 8002abc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ac0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002ac2:	4b3e      	ldr	r3, [pc, #248]	; (8002bbc <HAL_ADC_MspInit+0x1a0>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002ac8:	4b3c      	ldr	r3, [pc, #240]	; (8002bbc <HAL_ADC_MspInit+0x1a0>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ace:	4b3b      	ldr	r3, [pc, #236]	; (8002bbc <HAL_ADC_MspInit+0x1a0>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ad4:	4839      	ldr	r0, [pc, #228]	; (8002bbc <HAL_ADC_MspInit+0x1a0>)
 8002ad6:	f002 fcd9 	bl	800548c <HAL_DMA_Init>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002ae0:	f7ff ff7c 	bl	80029dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a35      	ldr	r2, [pc, #212]	; (8002bbc <HAL_ADC_MspInit+0x1a0>)
 8002ae8:	659a      	str	r2, [r3, #88]	; 0x58
 8002aea:	4a34      	ldr	r2, [pc, #208]	; (8002bbc <HAL_ADC_MspInit+0x1a0>)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002af0:	e059      	b.n	8002ba6 <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a33      	ldr	r2, [pc, #204]	; (8002bc4 <HAL_ADC_MspInit+0x1a8>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d154      	bne.n	8002ba6 <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002afc:	4b2d      	ldr	r3, [pc, #180]	; (8002bb4 <HAL_ADC_MspInit+0x198>)
 8002afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b02:	4a2c      	ldr	r2, [pc, #176]	; (8002bb4 <HAL_ADC_MspInit+0x198>)
 8002b04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b0c:	4b29      	ldr	r3, [pc, #164]	; (8002bb4 <HAL_ADC_MspInit+0x198>)
 8002b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b16:	613b      	str	r3, [r7, #16]
 8002b18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b1a:	4b26      	ldr	r3, [pc, #152]	; (8002bb4 <HAL_ADC_MspInit+0x198>)
 8002b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b20:	4a24      	ldr	r2, [pc, #144]	; (8002bb4 <HAL_ADC_MspInit+0x198>)
 8002b22:	f043 0304 	orr.w	r3, r3, #4
 8002b26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b2a:	4b22      	ldr	r3, [pc, #136]	; (8002bb4 <HAL_ADC_MspInit+0x198>)
 8002b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002b38:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002b3c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002b40:	f001 f80e 	bl	8003b60 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8002b44:	4b20      	ldr	r3, [pc, #128]	; (8002bc8 <HAL_ADC_MspInit+0x1ac>)
 8002b46:	4a21      	ldr	r2, [pc, #132]	; (8002bcc <HAL_ADC_MspInit+0x1b0>)
 8002b48:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002b4a:	4b1f      	ldr	r3, [pc, #124]	; (8002bc8 <HAL_ADC_MspInit+0x1ac>)
 8002b4c:	2273      	movs	r2, #115	; 0x73
 8002b4e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b50:	4b1d      	ldr	r3, [pc, #116]	; (8002bc8 <HAL_ADC_MspInit+0x1ac>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b56:	4b1c      	ldr	r3, [pc, #112]	; (8002bc8 <HAL_ADC_MspInit+0x1ac>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002b5c:	4b1a      	ldr	r3, [pc, #104]	; (8002bc8 <HAL_ADC_MspInit+0x1ac>)
 8002b5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b62:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b64:	4b18      	ldr	r3, [pc, #96]	; (8002bc8 <HAL_ADC_MspInit+0x1ac>)
 8002b66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b6a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b6c:	4b16      	ldr	r3, [pc, #88]	; (8002bc8 <HAL_ADC_MspInit+0x1ac>)
 8002b6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b72:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002b74:	4b14      	ldr	r3, [pc, #80]	; (8002bc8 <HAL_ADC_MspInit+0x1ac>)
 8002b76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b7a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002b7c:	4b12      	ldr	r3, [pc, #72]	; (8002bc8 <HAL_ADC_MspInit+0x1ac>)
 8002b7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b82:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b84:	4b10      	ldr	r3, [pc, #64]	; (8002bc8 <HAL_ADC_MspInit+0x1ac>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002b8a:	480f      	ldr	r0, [pc, #60]	; (8002bc8 <HAL_ADC_MspInit+0x1ac>)
 8002b8c:	f002 fc7e 	bl	800548c <HAL_DMA_Init>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 8002b96:	f7ff ff21 	bl	80029dc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a0a      	ldr	r2, [pc, #40]	; (8002bc8 <HAL_ADC_MspInit+0x1ac>)
 8002b9e:	659a      	str	r2, [r3, #88]	; 0x58
 8002ba0:	4a09      	ldr	r2, [pc, #36]	; (8002bc8 <HAL_ADC_MspInit+0x1ac>)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002ba6:	bf00      	nop
 8002ba8:	3730      	adds	r7, #48	; 0x30
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40022000 	.word	0x40022000
 8002bb4:	58024400 	.word	0x58024400
 8002bb8:	58020800 	.word	0x58020800
 8002bbc:	24000cd8 	.word	0x24000cd8
 8002bc0:	40020088 	.word	0x40020088
 8002bc4:	58026000 	.word	0x58026000
 8002bc8:	24000d50 	.word	0x24000d50
 8002bcc:	400204b8 	.word	0x400204b8

08002bd0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b0b8      	sub	sp, #224	; 0xe0
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	605a      	str	r2, [r3, #4]
 8002be2:	609a      	str	r2, [r3, #8]
 8002be4:	60da      	str	r2, [r3, #12]
 8002be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002be8:	f107 0310 	add.w	r3, r7, #16
 8002bec:	22b8      	movs	r2, #184	; 0xb8
 8002bee:	2100      	movs	r1, #0
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f014 fad9 	bl	80171a8 <memset>
  if(hfdcan->Instance==FDCAN3)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a26      	ldr	r2, [pc, #152]	; (8002c94 <HAL_FDCAN_MspInit+0xc4>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d145      	bne.n	8002c8c <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002c00:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002c0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002c10:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c12:	f107 0310 	add.w	r3, r7, #16
 8002c16:	4618      	mov	r0, r3
 8002c18:	f007 fe5e 	bl	800a8d8 <HAL_RCCEx_PeriphCLKConfig>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8002c22:	f7ff fedb 	bl	80029dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002c26:	4b1c      	ldr	r3, [pc, #112]	; (8002c98 <HAL_FDCAN_MspInit+0xc8>)
 8002c28:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002c2c:	4a1a      	ldr	r2, [pc, #104]	; (8002c98 <HAL_FDCAN_MspInit+0xc8>)
 8002c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c32:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002c36:	4b18      	ldr	r3, [pc, #96]	; (8002c98 <HAL_FDCAN_MspInit+0xc8>)
 8002c38:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c44:	4b14      	ldr	r3, [pc, #80]	; (8002c98 <HAL_FDCAN_MspInit+0xc8>)
 8002c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c4a:	4a13      	ldr	r2, [pc, #76]	; (8002c98 <HAL_FDCAN_MspInit+0xc8>)
 8002c4c:	f043 0320 	orr.w	r3, r3, #32
 8002c50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c54:	4b10      	ldr	r3, [pc, #64]	; (8002c98 <HAL_FDCAN_MspInit+0xc8>)
 8002c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c5a:	f003 0320 	and.w	r3, r3, #32
 8002c5e:	60bb      	str	r3, [r7, #8]
 8002c60:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c62:	23c0      	movs	r3, #192	; 0xc0
 8002c64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c74:	2300      	movs	r3, #0
 8002c76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c80:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c84:	4619      	mov	r1, r3
 8002c86:	4805      	ldr	r0, [pc, #20]	; (8002c9c <HAL_FDCAN_MspInit+0xcc>)
 8002c88:	f005 f838 	bl	8007cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8002c8c:	bf00      	nop
 8002c8e:	37e0      	adds	r7, #224	; 0xe0
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	4000d400 	.word	0x4000d400
 8002c98:	58024400 	.word	0x58024400
 8002c9c:	58021400 	.word	0x58021400

08002ca0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b0b8      	sub	sp, #224	; 0xe0
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	605a      	str	r2, [r3, #4]
 8002cb2:	609a      	str	r2, [r3, #8]
 8002cb4:	60da      	str	r2, [r3, #12]
 8002cb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cb8:	f107 0310 	add.w	r3, r7, #16
 8002cbc:	22b8      	movs	r2, #184	; 0xb8
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f014 fa71 	bl	80171a8 <memset>
  if(hi2c->Instance==I2C2)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a2a      	ldr	r2, [pc, #168]	; (8002d74 <HAL_I2C_MspInit+0xd4>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d14d      	bne.n	8002d6c <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002cd0:	f04f 0208 	mov.w	r2, #8
 8002cd4:	f04f 0300 	mov.w	r3, #0
 8002cd8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ce2:	f107 0310 	add.w	r3, r7, #16
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f007 fdf6 	bl	800a8d8 <HAL_RCCEx_PeriphCLKConfig>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002cf2:	f7ff fe73 	bl	80029dc <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002cf6:	4b20      	ldr	r3, [pc, #128]	; (8002d78 <HAL_I2C_MspInit+0xd8>)
 8002cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cfc:	4a1e      	ldr	r2, [pc, #120]	; (8002d78 <HAL_I2C_MspInit+0xd8>)
 8002cfe:	f043 0320 	orr.w	r3, r3, #32
 8002d02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d06:	4b1c      	ldr	r3, [pc, #112]	; (8002d78 <HAL_I2C_MspInit+0xd8>)
 8002d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d0c:	f003 0320 	and.w	r3, r3, #32
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d14:	2303      	movs	r3, #3
 8002d16:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d1a:	2312      	movs	r3, #18
 8002d1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d20:	2300      	movs	r3, #0
 8002d22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d26:	2300      	movs	r3, #0
 8002d28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002d2c:	2304      	movs	r3, #4
 8002d2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d32:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d36:	4619      	mov	r1, r3
 8002d38:	4810      	ldr	r0, [pc, #64]	; (8002d7c <HAL_I2C_MspInit+0xdc>)
 8002d3a:	f004 ffdf 	bl	8007cfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002d3e:	4b0e      	ldr	r3, [pc, #56]	; (8002d78 <HAL_I2C_MspInit+0xd8>)
 8002d40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d44:	4a0c      	ldr	r2, [pc, #48]	; (8002d78 <HAL_I2C_MspInit+0xd8>)
 8002d46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d4a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d4e:	4b0a      	ldr	r3, [pc, #40]	; (8002d78 <HAL_I2C_MspInit+0xd8>)
 8002d50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d58:	60bb      	str	r3, [r7, #8]
 8002d5a:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	2101      	movs	r1, #1
 8002d60:	2021      	movs	r0, #33	; 0x21
 8002d62:	f002 fb5e 	bl	8005422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002d66:	2021      	movs	r0, #33	; 0x21
 8002d68:	f002 fb75 	bl	8005456 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002d6c:	bf00      	nop
 8002d6e:	37e0      	adds	r7, #224	; 0xe0
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40005800 	.word	0x40005800
 8002d78:	58024400 	.word	0x58024400
 8002d7c:	58021400 	.word	0x58021400

08002d80 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b0ba      	sub	sp, #232	; 0xe8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d88:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	605a      	str	r2, [r3, #4]
 8002d92:	609a      	str	r2, [r3, #8]
 8002d94:	60da      	str	r2, [r3, #12]
 8002d96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d98:	f107 0318 	add.w	r3, r7, #24
 8002d9c:	22b8      	movs	r2, #184	; 0xb8
 8002d9e:	2100      	movs	r1, #0
 8002da0:	4618      	mov	r0, r3
 8002da2:	f014 fa01 	bl	80171a8 <memset>
  if(hsd->Instance==SDMMC2)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a5d      	ldr	r2, [pc, #372]	; (8002f20 <HAL_SD_MspInit+0x1a0>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	f040 80b3 	bne.w	8002f18 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002db2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002db6:	f04f 0300 	mov.w	r3, #0
 8002dba:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dc2:	f107 0318 	add.w	r3, r7, #24
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f007 fd86 	bl	800a8d8 <HAL_RCCEx_PeriphCLKConfig>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8002dd2:	f7ff fe03 	bl	80029dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8002dd6:	4b53      	ldr	r3, [pc, #332]	; (8002f24 <HAL_SD_MspInit+0x1a4>)
 8002dd8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002ddc:	4a51      	ldr	r2, [pc, #324]	; (8002f24 <HAL_SD_MspInit+0x1a4>)
 8002dde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002de2:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002de6:	4b4f      	ldr	r3, [pc, #316]	; (8002f24 <HAL_SD_MspInit+0x1a4>)
 8002de8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002dec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002df0:	617b      	str	r3, [r7, #20]
 8002df2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002df4:	4b4b      	ldr	r3, [pc, #300]	; (8002f24 <HAL_SD_MspInit+0x1a4>)
 8002df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dfa:	4a4a      	ldr	r2, [pc, #296]	; (8002f24 <HAL_SD_MspInit+0x1a4>)
 8002dfc:	f043 0308 	orr.w	r3, r3, #8
 8002e00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e04:	4b47      	ldr	r3, [pc, #284]	; (8002f24 <HAL_SD_MspInit+0x1a4>)
 8002e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	613b      	str	r3, [r7, #16]
 8002e10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e12:	4b44      	ldr	r3, [pc, #272]	; (8002f24 <HAL_SD_MspInit+0x1a4>)
 8002e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e18:	4a42      	ldr	r2, [pc, #264]	; (8002f24 <HAL_SD_MspInit+0x1a4>)
 8002e1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e22:	4b40      	ldr	r3, [pc, #256]	; (8002f24 <HAL_SD_MspInit+0x1a4>)
 8002e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2c:	60fb      	str	r3, [r7, #12]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002e30:	2340      	movs	r3, #64	; 0x40
 8002e32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e36:	2302      	movs	r3, #2
 8002e38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e42:	2303      	movs	r3, #3
 8002e44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002e48:	230b      	movs	r3, #11
 8002e4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e4e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e52:	4619      	mov	r1, r3
 8002e54:	4834      	ldr	r0, [pc, #208]	; (8002f28 <HAL_SD_MspInit+0x1a8>)
 8002e56:	f004 ff51 	bl	8007cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002e5a:	2380      	movs	r3, #128	; 0x80
 8002e5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e60:	2302      	movs	r3, #2
 8002e62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e66:	2301      	movs	r3, #1
 8002e68:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002e72:	230b      	movs	r3, #11
 8002e74:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e78:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	482a      	ldr	r0, [pc, #168]	; (8002f28 <HAL_SD_MspInit+0x1a8>)
 8002e80:	f004 ff3c 	bl	8007cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e92:	2301      	movs	r3, #1
 8002e94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002e9e:	230b      	movs	r3, #11
 8002ea0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ea4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4820      	ldr	r0, [pc, #128]	; (8002f2c <HAL_SD_MspInit+0x1ac>)
 8002eac:	f004 ff26 	bl	8007cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002eb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002eb4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb8:	2302      	movs	r3, #2
 8002eba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002eca:	230b      	movs	r3, #11
 8002ecc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ed0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4815      	ldr	r0, [pc, #84]	; (8002f2c <HAL_SD_MspInit+0x1ac>)
 8002ed8:	f004 ff10 	bl	8007cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002edc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002ee0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eea:	2300      	movs	r3, #0
 8002eec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8002ef6:	230a      	movs	r3, #10
 8002ef8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002efc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f00:	4619      	mov	r1, r3
 8002f02:	480a      	ldr	r0, [pc, #40]	; (8002f2c <HAL_SD_MspInit+0x1ac>)
 8002f04:	f004 fefa 	bl	8007cfc <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8002f08:	2200      	movs	r2, #0
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	207c      	movs	r0, #124	; 0x7c
 8002f0e:	f002 fa88 	bl	8005422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8002f12:	207c      	movs	r0, #124	; 0x7c
 8002f14:	f002 fa9f 	bl	8005456 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8002f18:	bf00      	nop
 8002f1a:	37e8      	adds	r7, #232	; 0xe8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	48022400 	.word	0x48022400
 8002f24:	58024400 	.word	0x58024400
 8002f28:	58020c00 	.word	0x58020c00
 8002f2c:	58021800 	.word	0x58021800

08002f30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b08e      	sub	sp, #56	; 0x38
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	605a      	str	r2, [r3, #4]
 8002f42:	609a      	str	r2, [r3, #8]
 8002f44:	60da      	str	r2, [r3, #12]
 8002f46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a4f      	ldr	r2, [pc, #316]	; (800308c <HAL_SPI_MspInit+0x15c>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d12e      	bne.n	8002fb0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f52:	4b4f      	ldr	r3, [pc, #316]	; (8003090 <HAL_SPI_MspInit+0x160>)
 8002f54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f58:	4a4d      	ldr	r2, [pc, #308]	; (8003090 <HAL_SPI_MspInit+0x160>)
 8002f5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f5e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002f62:	4b4b      	ldr	r3, [pc, #300]	; (8003090 <HAL_SPI_MspInit+0x160>)
 8002f64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f6c:	623b      	str	r3, [r7, #32]
 8002f6e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f70:	4b47      	ldr	r3, [pc, #284]	; (8003090 <HAL_SPI_MspInit+0x160>)
 8002f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f76:	4a46      	ldr	r2, [pc, #280]	; (8003090 <HAL_SPI_MspInit+0x160>)
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f80:	4b43      	ldr	r3, [pc, #268]	; (8003090 <HAL_SPI_MspInit+0x160>)
 8002f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	61fb      	str	r3, [r7, #28]
 8002f8c:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002f8e:	23e0      	movs	r3, #224	; 0xe0
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f92:	2302      	movs	r3, #2
 8002f94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f96:	2300      	movs	r3, #0
 8002f98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f9e:	2305      	movs	r3, #5
 8002fa0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	483a      	ldr	r0, [pc, #232]	; (8003094 <HAL_SPI_MspInit+0x164>)
 8002faa:	f004 fea7 	bl	8007cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002fae:	e068      	b.n	8003082 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a38      	ldr	r2, [pc, #224]	; (8003098 <HAL_SPI_MspInit+0x168>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d12f      	bne.n	800301a <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002fba:	4b35      	ldr	r3, [pc, #212]	; (8003090 <HAL_SPI_MspInit+0x160>)
 8002fbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fc0:	4a33      	ldr	r2, [pc, #204]	; (8003090 <HAL_SPI_MspInit+0x160>)
 8002fc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fc6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002fca:	4b31      	ldr	r3, [pc, #196]	; (8003090 <HAL_SPI_MspInit+0x160>)
 8002fcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fd4:	61bb      	str	r3, [r7, #24]
 8002fd6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fd8:	4b2d      	ldr	r3, [pc, #180]	; (8003090 <HAL_SPI_MspInit+0x160>)
 8002fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fde:	4a2c      	ldr	r2, [pc, #176]	; (8003090 <HAL_SPI_MspInit+0x160>)
 8002fe0:	f043 0302 	orr.w	r3, r3, #2
 8002fe4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fe8:	4b29      	ldr	r3, [pc, #164]	; (8003090 <HAL_SPI_MspInit+0x160>)
 8002fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	617b      	str	r3, [r7, #20]
 8002ff4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002ff6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002ffa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003000:	2300      	movs	r3, #0
 8003002:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003004:	2300      	movs	r3, #0
 8003006:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003008:	2305      	movs	r3, #5
 800300a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800300c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003010:	4619      	mov	r1, r3
 8003012:	4822      	ldr	r0, [pc, #136]	; (800309c <HAL_SPI_MspInit+0x16c>)
 8003014:	f004 fe72 	bl	8007cfc <HAL_GPIO_Init>
}
 8003018:	e033      	b.n	8003082 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a20      	ldr	r2, [pc, #128]	; (80030a0 <HAL_SPI_MspInit+0x170>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d12e      	bne.n	8003082 <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003024:	4b1a      	ldr	r3, [pc, #104]	; (8003090 <HAL_SPI_MspInit+0x160>)
 8003026:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800302a:	4a19      	ldr	r2, [pc, #100]	; (8003090 <HAL_SPI_MspInit+0x160>)
 800302c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003030:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003034:	4b16      	ldr	r3, [pc, #88]	; (8003090 <HAL_SPI_MspInit+0x160>)
 8003036:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800303a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800303e:	613b      	str	r3, [r7, #16]
 8003040:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003042:	4b13      	ldr	r3, [pc, #76]	; (8003090 <HAL_SPI_MspInit+0x160>)
 8003044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003048:	4a11      	ldr	r2, [pc, #68]	; (8003090 <HAL_SPI_MspInit+0x160>)
 800304a:	f043 0304 	orr.w	r3, r3, #4
 800304e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003052:	4b0f      	ldr	r3, [pc, #60]	; (8003090 <HAL_SPI_MspInit+0x160>)
 8003054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	60fb      	str	r3, [r7, #12]
 800305e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003060:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003064:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003066:	2302      	movs	r3, #2
 8003068:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306a:	2300      	movs	r3, #0
 800306c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800306e:	2300      	movs	r3, #0
 8003070:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003072:	2306      	movs	r3, #6
 8003074:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800307a:	4619      	mov	r1, r3
 800307c:	4809      	ldr	r0, [pc, #36]	; (80030a4 <HAL_SPI_MspInit+0x174>)
 800307e:	f004 fe3d 	bl	8007cfc <HAL_GPIO_Init>
}
 8003082:	bf00      	nop
 8003084:	3738      	adds	r7, #56	; 0x38
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40013000 	.word	0x40013000
 8003090:	58024400 	.word	0x58024400
 8003094:	58020000 	.word	0x58020000
 8003098:	40003800 	.word	0x40003800
 800309c:	58020400 	.word	0x58020400
 80030a0:	40003c00 	.word	0x40003c00
 80030a4:	58020800 	.word	0x58020800

080030a8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b08c      	sub	sp, #48	; 0x30
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b0:	f107 031c 	add.w	r3, r7, #28
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	605a      	str	r2, [r3, #4]
 80030ba:	609a      	str	r2, [r3, #8]
 80030bc:	60da      	str	r2, [r3, #12]
 80030be:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c8:	d15d      	bne.n	8003186 <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030ca:	4b8e      	ldr	r3, [pc, #568]	; (8003304 <HAL_TIM_PWM_MspInit+0x25c>)
 80030cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030d0:	4a8c      	ldr	r2, [pc, #560]	; (8003304 <HAL_TIM_PWM_MspInit+0x25c>)
 80030d2:	f043 0301 	orr.w	r3, r3, #1
 80030d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80030da:	4b8a      	ldr	r3, [pc, #552]	; (8003304 <HAL_TIM_PWM_MspInit+0x25c>)
 80030dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	61bb      	str	r3, [r7, #24]
 80030e6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030e8:	4b86      	ldr	r3, [pc, #536]	; (8003304 <HAL_TIM_PWM_MspInit+0x25c>)
 80030ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030ee:	4a85      	ldr	r2, [pc, #532]	; (8003304 <HAL_TIM_PWM_MspInit+0x25c>)
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030f8:	4b82      	ldr	r3, [pc, #520]	; (8003304 <HAL_TIM_PWM_MspInit+0x25c>)
 80030fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	617b      	str	r3, [r7, #20]
 8003104:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003106:	2301      	movs	r3, #1
 8003108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310a:	2302      	movs	r3, #2
 800310c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310e:	2300      	movs	r3, #0
 8003110:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003112:	2300      	movs	r3, #0
 8003114:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003116:	2301      	movs	r3, #1
 8003118:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800311a:	f107 031c 	add.w	r3, r7, #28
 800311e:	4619      	mov	r1, r3
 8003120:	4879      	ldr	r0, [pc, #484]	; (8003308 <HAL_TIM_PWM_MspInit+0x260>)
 8003122:	f004 fdeb 	bl	8007cfc <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 8003126:	4b79      	ldr	r3, [pc, #484]	; (800330c <HAL_TIM_PWM_MspInit+0x264>)
 8003128:	4a79      	ldr	r2, [pc, #484]	; (8003310 <HAL_TIM_PWM_MspInit+0x268>)
 800312a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 800312c:	4b77      	ldr	r3, [pc, #476]	; (800330c <HAL_TIM_PWM_MspInit+0x264>)
 800312e:	2214      	movs	r2, #20
 8003130:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003132:	4b76      	ldr	r3, [pc, #472]	; (800330c <HAL_TIM_PWM_MspInit+0x264>)
 8003134:	2240      	movs	r2, #64	; 0x40
 8003136:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003138:	4b74      	ldr	r3, [pc, #464]	; (800330c <HAL_TIM_PWM_MspInit+0x264>)
 800313a:	2200      	movs	r2, #0
 800313c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800313e:	4b73      	ldr	r3, [pc, #460]	; (800330c <HAL_TIM_PWM_MspInit+0x264>)
 8003140:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003144:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003146:	4b71      	ldr	r3, [pc, #452]	; (800330c <HAL_TIM_PWM_MspInit+0x264>)
 8003148:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800314c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800314e:	4b6f      	ldr	r3, [pc, #444]	; (800330c <HAL_TIM_PWM_MspInit+0x264>)
 8003150:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003154:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8003156:	4b6d      	ldr	r3, [pc, #436]	; (800330c <HAL_TIM_PWM_MspInit+0x264>)
 8003158:	2200      	movs	r2, #0
 800315a:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800315c:	4b6b      	ldr	r3, [pc, #428]	; (800330c <HAL_TIM_PWM_MspInit+0x264>)
 800315e:	2200      	movs	r2, #0
 8003160:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003162:	4b6a      	ldr	r3, [pc, #424]	; (800330c <HAL_TIM_PWM_MspInit+0x264>)
 8003164:	2200      	movs	r2, #0
 8003166:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8003168:	4868      	ldr	r0, [pc, #416]	; (800330c <HAL_TIM_PWM_MspInit+0x264>)
 800316a:	f002 f98f 	bl	800548c <HAL_DMA_Init>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 8003174:	f7ff fc32 	bl	80029dc <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a64      	ldr	r2, [pc, #400]	; (800330c <HAL_TIM_PWM_MspInit+0x264>)
 800317c:	62da      	str	r2, [r3, #44]	; 0x2c
 800317e:	4a63      	ldr	r2, [pc, #396]	; (800330c <HAL_TIM_PWM_MspInit+0x264>)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003184:	e119      	b.n	80033ba <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a62      	ldr	r2, [pc, #392]	; (8003314 <HAL_TIM_PWM_MspInit+0x26c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d16d      	bne.n	800326c <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003190:	4b5c      	ldr	r3, [pc, #368]	; (8003304 <HAL_TIM_PWM_MspInit+0x25c>)
 8003192:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003196:	4a5b      	ldr	r2, [pc, #364]	; (8003304 <HAL_TIM_PWM_MspInit+0x25c>)
 8003198:	f043 0302 	orr.w	r3, r3, #2
 800319c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80031a0:	4b58      	ldr	r3, [pc, #352]	; (8003304 <HAL_TIM_PWM_MspInit+0x25c>)
 80031a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	613b      	str	r3, [r7, #16]
 80031ac:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 80031ae:	4b5a      	ldr	r3, [pc, #360]	; (8003318 <HAL_TIM_PWM_MspInit+0x270>)
 80031b0:	4a5a      	ldr	r2, [pc, #360]	; (800331c <HAL_TIM_PWM_MspInit+0x274>)
 80031b2:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 80031b4:	4b58      	ldr	r3, [pc, #352]	; (8003318 <HAL_TIM_PWM_MspInit+0x270>)
 80031b6:	2218      	movs	r2, #24
 80031b8:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031ba:	4b57      	ldr	r3, [pc, #348]	; (8003318 <HAL_TIM_PWM_MspInit+0x270>)
 80031bc:	2240      	movs	r2, #64	; 0x40
 80031be:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80031c0:	4b55      	ldr	r3, [pc, #340]	; (8003318 <HAL_TIM_PWM_MspInit+0x270>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80031c6:	4b54      	ldr	r3, [pc, #336]	; (8003318 <HAL_TIM_PWM_MspInit+0x270>)
 80031c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031cc:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80031ce:	4b52      	ldr	r3, [pc, #328]	; (8003318 <HAL_TIM_PWM_MspInit+0x270>)
 80031d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031d4:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80031d6:	4b50      	ldr	r3, [pc, #320]	; (8003318 <HAL_TIM_PWM_MspInit+0x270>)
 80031d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031dc:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 80031de:	4b4e      	ldr	r3, [pc, #312]	; (8003318 <HAL_TIM_PWM_MspInit+0x270>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80031e4:	4b4c      	ldr	r3, [pc, #304]	; (8003318 <HAL_TIM_PWM_MspInit+0x270>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031ea:	4b4b      	ldr	r3, [pc, #300]	; (8003318 <HAL_TIM_PWM_MspInit+0x270>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 80031f0:	4849      	ldr	r0, [pc, #292]	; (8003318 <HAL_TIM_PWM_MspInit+0x270>)
 80031f2:	f002 f94b 	bl	800548c <HAL_DMA_Init>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 80031fc:	f7ff fbee 	bl	80029dc <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a45      	ldr	r2, [pc, #276]	; (8003318 <HAL_TIM_PWM_MspInit+0x270>)
 8003204:	629a      	str	r2, [r3, #40]	; 0x28
 8003206:	4a44      	ldr	r2, [pc, #272]	; (8003318 <HAL_TIM_PWM_MspInit+0x270>)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 800320c:	4b44      	ldr	r3, [pc, #272]	; (8003320 <HAL_TIM_PWM_MspInit+0x278>)
 800320e:	4a45      	ldr	r2, [pc, #276]	; (8003324 <HAL_TIM_PWM_MspInit+0x27c>)
 8003210:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8003212:	4b43      	ldr	r3, [pc, #268]	; (8003320 <HAL_TIM_PWM_MspInit+0x278>)
 8003214:	2217      	movs	r2, #23
 8003216:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003218:	4b41      	ldr	r3, [pc, #260]	; (8003320 <HAL_TIM_PWM_MspInit+0x278>)
 800321a:	2240      	movs	r2, #64	; 0x40
 800321c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800321e:	4b40      	ldr	r3, [pc, #256]	; (8003320 <HAL_TIM_PWM_MspInit+0x278>)
 8003220:	2200      	movs	r2, #0
 8003222:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003224:	4b3e      	ldr	r3, [pc, #248]	; (8003320 <HAL_TIM_PWM_MspInit+0x278>)
 8003226:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800322a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800322c:	4b3c      	ldr	r3, [pc, #240]	; (8003320 <HAL_TIM_PWM_MspInit+0x278>)
 800322e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003232:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003234:	4b3a      	ldr	r3, [pc, #232]	; (8003320 <HAL_TIM_PWM_MspInit+0x278>)
 8003236:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800323a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 800323c:	4b38      	ldr	r3, [pc, #224]	; (8003320 <HAL_TIM_PWM_MspInit+0x278>)
 800323e:	2200      	movs	r2, #0
 8003240:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003242:	4b37      	ldr	r3, [pc, #220]	; (8003320 <HAL_TIM_PWM_MspInit+0x278>)
 8003244:	2200      	movs	r2, #0
 8003246:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003248:	4b35      	ldr	r3, [pc, #212]	; (8003320 <HAL_TIM_PWM_MspInit+0x278>)
 800324a:	2200      	movs	r2, #0
 800324c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 800324e:	4834      	ldr	r0, [pc, #208]	; (8003320 <HAL_TIM_PWM_MspInit+0x278>)
 8003250:	f002 f91c 	bl	800548c <HAL_DMA_Init>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 800325a:	f7ff fbbf 	bl	80029dc <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a2f      	ldr	r2, [pc, #188]	; (8003320 <HAL_TIM_PWM_MspInit+0x278>)
 8003262:	625a      	str	r2, [r3, #36]	; 0x24
 8003264:	4a2e      	ldr	r2, [pc, #184]	; (8003320 <HAL_TIM_PWM_MspInit+0x278>)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6393      	str	r3, [r2, #56]	; 0x38
}
 800326a:	e0a6      	b.n	80033ba <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a2d      	ldr	r2, [pc, #180]	; (8003328 <HAL_TIM_PWM_MspInit+0x280>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d15e      	bne.n	8003334 <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003276:	4b23      	ldr	r3, [pc, #140]	; (8003304 <HAL_TIM_PWM_MspInit+0x25c>)
 8003278:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800327c:	4a21      	ldr	r2, [pc, #132]	; (8003304 <HAL_TIM_PWM_MspInit+0x25c>)
 800327e:	f043 0304 	orr.w	r3, r3, #4
 8003282:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003286:	4b1f      	ldr	r3, [pc, #124]	; (8003304 <HAL_TIM_PWM_MspInit+0x25c>)
 8003288:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	60fb      	str	r3, [r7, #12]
 8003292:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 8003294:	4b25      	ldr	r3, [pc, #148]	; (800332c <HAL_TIM_PWM_MspInit+0x284>)
 8003296:	4a26      	ldr	r2, [pc, #152]	; (8003330 <HAL_TIM_PWM_MspInit+0x288>)
 8003298:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 800329a:	4b24      	ldr	r3, [pc, #144]	; (800332c <HAL_TIM_PWM_MspInit+0x284>)
 800329c:	221f      	movs	r2, #31
 800329e:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032a0:	4b22      	ldr	r3, [pc, #136]	; (800332c <HAL_TIM_PWM_MspInit+0x284>)
 80032a2:	2240      	movs	r2, #64	; 0x40
 80032a4:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80032a6:	4b21      	ldr	r3, [pc, #132]	; (800332c <HAL_TIM_PWM_MspInit+0x284>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80032ac:	4b1f      	ldr	r3, [pc, #124]	; (800332c <HAL_TIM_PWM_MspInit+0x284>)
 80032ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032b2:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80032b4:	4b1d      	ldr	r3, [pc, #116]	; (800332c <HAL_TIM_PWM_MspInit+0x284>)
 80032b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032ba:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80032bc:	4b1b      	ldr	r3, [pc, #108]	; (800332c <HAL_TIM_PWM_MspInit+0x284>)
 80032be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80032c2:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 80032c4:	4b19      	ldr	r3, [pc, #100]	; (800332c <HAL_TIM_PWM_MspInit+0x284>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80032ca:	4b18      	ldr	r3, [pc, #96]	; (800332c <HAL_TIM_PWM_MspInit+0x284>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032d0:	4b16      	ldr	r3, [pc, #88]	; (800332c <HAL_TIM_PWM_MspInit+0x284>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 80032d6:	4815      	ldr	r0, [pc, #84]	; (800332c <HAL_TIM_PWM_MspInit+0x284>)
 80032d8:	f002 f8d8 	bl	800548c <HAL_DMA_Init>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 80032e2:	f7ff fb7b 	bl	80029dc <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a10      	ldr	r2, [pc, #64]	; (800332c <HAL_TIM_PWM_MspInit+0x284>)
 80032ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80032ec:	4a0f      	ldr	r2, [pc, #60]	; (800332c <HAL_TIM_PWM_MspInit+0x284>)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80032f2:	2200      	movs	r2, #0
 80032f4:	2100      	movs	r1, #0
 80032f6:	201e      	movs	r0, #30
 80032f8:	f002 f893 	bl	8005422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80032fc:	201e      	movs	r0, #30
 80032fe:	f002 f8aa 	bl	8005456 <HAL_NVIC_EnableIRQ>
}
 8003302:	e05a      	b.n	80033ba <HAL_TIM_PWM_MspInit+0x312>
 8003304:	58024400 	.word	0x58024400
 8003308:	58020000 	.word	0x58020000
 800330c:	2400124c 	.word	0x2400124c
 8003310:	40020028 	.word	0x40020028
 8003314:	40000400 	.word	0x40000400
 8003318:	240012c4 	.word	0x240012c4
 800331c:	40020058 	.word	0x40020058
 8003320:	2400133c 	.word	0x2400133c
 8003324:	40020070 	.word	0x40020070
 8003328:	40000800 	.word	0x40000800
 800332c:	240013b4 	.word	0x240013b4
 8003330:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a22      	ldr	r2, [pc, #136]	; (80033c4 <HAL_TIM_PWM_MspInit+0x31c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d13d      	bne.n	80033ba <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800333e:	4b22      	ldr	r3, [pc, #136]	; (80033c8 <HAL_TIM_PWM_MspInit+0x320>)
 8003340:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003344:	4a20      	ldr	r2, [pc, #128]	; (80033c8 <HAL_TIM_PWM_MspInit+0x320>)
 8003346:	f043 0308 	orr.w	r3, r3, #8
 800334a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800334e:	4b1e      	ldr	r3, [pc, #120]	; (80033c8 <HAL_TIM_PWM_MspInit+0x320>)
 8003350:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003354:	f003 0308 	and.w	r3, r3, #8
 8003358:	60bb      	str	r3, [r7, #8]
 800335a:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 800335c:	4b1b      	ldr	r3, [pc, #108]	; (80033cc <HAL_TIM_PWM_MspInit+0x324>)
 800335e:	4a1c      	ldr	r2, [pc, #112]	; (80033d0 <HAL_TIM_PWM_MspInit+0x328>)
 8003360:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 8003362:	4b1a      	ldr	r3, [pc, #104]	; (80033cc <HAL_TIM_PWM_MspInit+0x324>)
 8003364:	223a      	movs	r2, #58	; 0x3a
 8003366:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003368:	4b18      	ldr	r3, [pc, #96]	; (80033cc <HAL_TIM_PWM_MspInit+0x324>)
 800336a:	2240      	movs	r2, #64	; 0x40
 800336c:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800336e:	4b17      	ldr	r3, [pc, #92]	; (80033cc <HAL_TIM_PWM_MspInit+0x324>)
 8003370:	2200      	movs	r2, #0
 8003372:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8003374:	4b15      	ldr	r3, [pc, #84]	; (80033cc <HAL_TIM_PWM_MspInit+0x324>)
 8003376:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800337a:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800337c:	4b13      	ldr	r3, [pc, #76]	; (80033cc <HAL_TIM_PWM_MspInit+0x324>)
 800337e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003382:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003384:	4b11      	ldr	r3, [pc, #68]	; (80033cc <HAL_TIM_PWM_MspInit+0x324>)
 8003386:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800338a:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 800338c:	4b0f      	ldr	r3, [pc, #60]	; (80033cc <HAL_TIM_PWM_MspInit+0x324>)
 800338e:	2200      	movs	r2, #0
 8003390:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8003392:	4b0e      	ldr	r3, [pc, #56]	; (80033cc <HAL_TIM_PWM_MspInit+0x324>)
 8003394:	2200      	movs	r2, #0
 8003396:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003398:	4b0c      	ldr	r3, [pc, #48]	; (80033cc <HAL_TIM_PWM_MspInit+0x324>)
 800339a:	2200      	movs	r2, #0
 800339c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 800339e:	480b      	ldr	r0, [pc, #44]	; (80033cc <HAL_TIM_PWM_MspInit+0x324>)
 80033a0:	f002 f874 	bl	800548c <HAL_DMA_Init>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 80033aa:	f7ff fb17 	bl	80029dc <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a06      	ldr	r2, [pc, #24]	; (80033cc <HAL_TIM_PWM_MspInit+0x324>)
 80033b2:	631a      	str	r2, [r3, #48]	; 0x30
 80033b4:	4a05      	ldr	r2, [pc, #20]	; (80033cc <HAL_TIM_PWM_MspInit+0x324>)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80033ba:	bf00      	nop
 80033bc:	3730      	adds	r7, #48	; 0x30
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	40000c00 	.word	0x40000c00
 80033c8:	58024400 	.word	0x58024400
 80033cc:	2400142c 	.word	0x2400142c
 80033d0:	40020040 	.word	0x40020040

080033d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a0b      	ldr	r2, [pc, #44]	; (8003410 <HAL_TIM_Base_MspInit+0x3c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d10e      	bne.n	8003404 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80033e6:	4b0b      	ldr	r3, [pc, #44]	; (8003414 <HAL_TIM_Base_MspInit+0x40>)
 80033e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033ec:	4a09      	ldr	r2, [pc, #36]	; (8003414 <HAL_TIM_Base_MspInit+0x40>)
 80033ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80033f6:	4b07      	ldr	r3, [pc, #28]	; (8003414 <HAL_TIM_Base_MspInit+0x40>)
 80033f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8003404:	bf00      	nop
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	40001c00 	.word	0x40001c00
 8003414:	58024400 	.word	0x58024400

08003418 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b08c      	sub	sp, #48	; 0x30
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003420:	f107 031c 	add.w	r3, r7, #28
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	605a      	str	r2, [r3, #4]
 800342a:	609a      	str	r2, [r3, #8]
 800342c:	60da      	str	r2, [r3, #12]
 800342e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003438:	d120      	bne.n	800347c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800343a:	4b52      	ldr	r3, [pc, #328]	; (8003584 <HAL_TIM_MspPostInit+0x16c>)
 800343c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003440:	4a50      	ldr	r2, [pc, #320]	; (8003584 <HAL_TIM_MspPostInit+0x16c>)
 8003442:	f043 0302 	orr.w	r3, r3, #2
 8003446:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800344a:	4b4e      	ldr	r3, [pc, #312]	; (8003584 <HAL_TIM_MspPostInit+0x16c>)
 800344c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	61bb      	str	r3, [r7, #24]
 8003456:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003458:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800345c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800345e:	2302      	movs	r3, #2
 8003460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003462:	2302      	movs	r3, #2
 8003464:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003466:	2300      	movs	r3, #0
 8003468:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800346a:	2301      	movs	r3, #1
 800346c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800346e:	f107 031c 	add.w	r3, r7, #28
 8003472:	4619      	mov	r1, r3
 8003474:	4844      	ldr	r0, [pc, #272]	; (8003588 <HAL_TIM_MspPostInit+0x170>)
 8003476:	f004 fc41 	bl	8007cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800347a:	e07f      	b.n	800357c <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a42      	ldr	r2, [pc, #264]	; (800358c <HAL_TIM_MspPostInit+0x174>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d11f      	bne.n	80034c6 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003486:	4b3f      	ldr	r3, [pc, #252]	; (8003584 <HAL_TIM_MspPostInit+0x16c>)
 8003488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800348c:	4a3d      	ldr	r2, [pc, #244]	; (8003584 <HAL_TIM_MspPostInit+0x16c>)
 800348e:	f043 0302 	orr.w	r3, r3, #2
 8003492:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003496:	4b3b      	ldr	r3, [pc, #236]	; (8003584 <HAL_TIM_MspPostInit+0x16c>)
 8003498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	617b      	str	r3, [r7, #20]
 80034a2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80034a4:	2330      	movs	r3, #48	; 0x30
 80034a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a8:	2302      	movs	r3, #2
 80034aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80034ac:	2302      	movs	r3, #2
 80034ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b0:	2300      	movs	r3, #0
 80034b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80034b4:	2302      	movs	r3, #2
 80034b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034b8:	f107 031c 	add.w	r3, r7, #28
 80034bc:	4619      	mov	r1, r3
 80034be:	4832      	ldr	r0, [pc, #200]	; (8003588 <HAL_TIM_MspPostInit+0x170>)
 80034c0:	f004 fc1c 	bl	8007cfc <HAL_GPIO_Init>
}
 80034c4:	e05a      	b.n	800357c <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a31      	ldr	r2, [pc, #196]	; (8003590 <HAL_TIM_MspPostInit+0x178>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d131      	bne.n	8003534 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034d0:	4b2c      	ldr	r3, [pc, #176]	; (8003584 <HAL_TIM_MspPostInit+0x16c>)
 80034d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034d6:	4a2b      	ldr	r2, [pc, #172]	; (8003584 <HAL_TIM_MspPostInit+0x16c>)
 80034d8:	f043 0308 	orr.w	r3, r3, #8
 80034dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034e0:	4b28      	ldr	r3, [pc, #160]	; (8003584 <HAL_TIM_MspPostInit+0x16c>)
 80034e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034e6:	f003 0308 	and.w	r3, r3, #8
 80034ea:	613b      	str	r3, [r7, #16]
 80034ec:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80034ee:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80034f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f4:	2302      	movs	r3, #2
 80034f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f8:	2300      	movs	r3, #0
 80034fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034fc:	2300      	movs	r3, #0
 80034fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003500:	2302      	movs	r3, #2
 8003502:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003504:	f107 031c 	add.w	r3, r7, #28
 8003508:	4619      	mov	r1, r3
 800350a:	4822      	ldr	r0, [pc, #136]	; (8003594 <HAL_TIM_MspPostInit+0x17c>)
 800350c:	f004 fbf6 	bl	8007cfc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003510:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003516:	2302      	movs	r3, #2
 8003518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800351a:	2302      	movs	r3, #2
 800351c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800351e:	2300      	movs	r3, #0
 8003520:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003522:	2302      	movs	r3, #2
 8003524:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003526:	f107 031c 	add.w	r3, r7, #28
 800352a:	4619      	mov	r1, r3
 800352c:	4819      	ldr	r0, [pc, #100]	; (8003594 <HAL_TIM_MspPostInit+0x17c>)
 800352e:	f004 fbe5 	bl	8007cfc <HAL_GPIO_Init>
}
 8003532:	e023      	b.n	800357c <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a17      	ldr	r2, [pc, #92]	; (8003598 <HAL_TIM_MspPostInit+0x180>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d11e      	bne.n	800357c <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800353e:	4b11      	ldr	r3, [pc, #68]	; (8003584 <HAL_TIM_MspPostInit+0x16c>)
 8003540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003544:	4a0f      	ldr	r2, [pc, #60]	; (8003584 <HAL_TIM_MspPostInit+0x16c>)
 8003546:	f043 0301 	orr.w	r3, r3, #1
 800354a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800354e:	4b0d      	ldr	r3, [pc, #52]	; (8003584 <HAL_TIM_MspPostInit+0x16c>)
 8003550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	60fb      	str	r3, [r7, #12]
 800355a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800355c:	2308      	movs	r3, #8
 800355e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003560:	2302      	movs	r3, #2
 8003562:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003564:	2302      	movs	r3, #2
 8003566:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003568:	2300      	movs	r3, #0
 800356a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800356c:	2302      	movs	r3, #2
 800356e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003570:	f107 031c 	add.w	r3, r7, #28
 8003574:	4619      	mov	r1, r3
 8003576:	4809      	ldr	r0, [pc, #36]	; (800359c <HAL_TIM_MspPostInit+0x184>)
 8003578:	f004 fbc0 	bl	8007cfc <HAL_GPIO_Init>
}
 800357c:	bf00      	nop
 800357e:	3730      	adds	r7, #48	; 0x30
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	58024400 	.word	0x58024400
 8003588:	58020400 	.word	0x58020400
 800358c:	40000400 	.word	0x40000400
 8003590:	40000800 	.word	0x40000800
 8003594:	58020c00 	.word	0x58020c00
 8003598:	40000c00 	.word	0x40000c00
 800359c:	58020000 	.word	0x58020000

080035a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b0ba      	sub	sp, #232	; 0xe8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	605a      	str	r2, [r3, #4]
 80035b2:	609a      	str	r2, [r3, #8]
 80035b4:	60da      	str	r2, [r3, #12]
 80035b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035b8:	f107 0318 	add.w	r3, r7, #24
 80035bc:	22b8      	movs	r2, #184	; 0xb8
 80035be:	2100      	movs	r1, #0
 80035c0:	4618      	mov	r0, r3
 80035c2:	f013 fdf1 	bl	80171a8 <memset>
  if(huart->Instance==UART4)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a4d      	ldr	r2, [pc, #308]	; (8003700 <HAL_UART_MspInit+0x160>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d147      	bne.n	8003660 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80035d0:	f04f 0202 	mov.w	r2, #2
 80035d4:	f04f 0300 	mov.w	r3, #0
 80035d8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80035dc:	2300      	movs	r3, #0
 80035de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035e2:	f107 0318 	add.w	r3, r7, #24
 80035e6:	4618      	mov	r0, r3
 80035e8:	f007 f976 	bl	800a8d8 <HAL_RCCEx_PeriphCLKConfig>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80035f2:	f7ff f9f3 	bl	80029dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80035f6:	4b43      	ldr	r3, [pc, #268]	; (8003704 <HAL_UART_MspInit+0x164>)
 80035f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035fc:	4a41      	ldr	r2, [pc, #260]	; (8003704 <HAL_UART_MspInit+0x164>)
 80035fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003602:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003606:	4b3f      	ldr	r3, [pc, #252]	; (8003704 <HAL_UART_MspInit+0x164>)
 8003608:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800360c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003610:	617b      	str	r3, [r7, #20]
 8003612:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003614:	4b3b      	ldr	r3, [pc, #236]	; (8003704 <HAL_UART_MspInit+0x164>)
 8003616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800361a:	4a3a      	ldr	r2, [pc, #232]	; (8003704 <HAL_UART_MspInit+0x164>)
 800361c:	f043 0302 	orr.w	r3, r3, #2
 8003620:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003624:	4b37      	ldr	r3, [pc, #220]	; (8003704 <HAL_UART_MspInit+0x164>)
 8003626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	613b      	str	r3, [r7, #16]
 8003630:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003632:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003636:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800363a:	2302      	movs	r3, #2
 800363c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003640:	2300      	movs	r3, #0
 8003642:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003646:	2300      	movs	r3, #0
 8003648:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800364c:	2308      	movs	r3, #8
 800364e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003652:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003656:	4619      	mov	r1, r3
 8003658:	482b      	ldr	r0, [pc, #172]	; (8003708 <HAL_UART_MspInit+0x168>)
 800365a:	f004 fb4f 	bl	8007cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800365e:	e04a      	b.n	80036f6 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a29      	ldr	r2, [pc, #164]	; (800370c <HAL_UART_MspInit+0x16c>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d145      	bne.n	80036f6 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800366a:	f04f 0201 	mov.w	r2, #1
 800366e:	f04f 0300 	mov.w	r3, #0
 8003672:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003676:	2300      	movs	r3, #0
 8003678:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800367c:	f107 0318 	add.w	r3, r7, #24
 8003680:	4618      	mov	r0, r3
 8003682:	f007 f929 	bl	800a8d8 <HAL_RCCEx_PeriphCLKConfig>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 800368c:	f7ff f9a6 	bl	80029dc <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003690:	4b1c      	ldr	r3, [pc, #112]	; (8003704 <HAL_UART_MspInit+0x164>)
 8003692:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003696:	4a1b      	ldr	r2, [pc, #108]	; (8003704 <HAL_UART_MspInit+0x164>)
 8003698:	f043 0320 	orr.w	r3, r3, #32
 800369c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80036a0:	4b18      	ldr	r3, [pc, #96]	; (8003704 <HAL_UART_MspInit+0x164>)
 80036a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036a6:	f003 0320 	and.w	r3, r3, #32
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036ae:	4b15      	ldr	r3, [pc, #84]	; (8003704 <HAL_UART_MspInit+0x164>)
 80036b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036b4:	4a13      	ldr	r2, [pc, #76]	; (8003704 <HAL_UART_MspInit+0x164>)
 80036b6:	f043 0304 	orr.w	r3, r3, #4
 80036ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036be:	4b11      	ldr	r3, [pc, #68]	; (8003704 <HAL_UART_MspInit+0x164>)
 80036c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	60bb      	str	r3, [r7, #8]
 80036ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80036cc:	23c0      	movs	r3, #192	; 0xc0
 80036ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d2:	2302      	movs	r3, #2
 80036d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d8:	2300      	movs	r3, #0
 80036da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036de:	2300      	movs	r3, #0
 80036e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80036e4:	2307      	movs	r3, #7
 80036e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036ea:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80036ee:	4619      	mov	r1, r3
 80036f0:	4807      	ldr	r0, [pc, #28]	; (8003710 <HAL_UART_MspInit+0x170>)
 80036f2:	f004 fb03 	bl	8007cfc <HAL_GPIO_Init>
}
 80036f6:	bf00      	nop
 80036f8:	37e8      	adds	r7, #232	; 0xe8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	40004c00 	.word	0x40004c00
 8003704:	58024400 	.word	0x58024400
 8003708:	58020400 	.word	0x58020400
 800370c:	40011400 	.word	0x40011400
 8003710:	58020800 	.word	0x58020800

08003714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003718:	e7fe      	b.n	8003718 <NMI_Handler+0x4>

0800371a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800371a:	b480      	push	{r7}
 800371c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800371e:	e7fe      	b.n	800371e <HardFault_Handler+0x4>

08003720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003724:	e7fe      	b.n	8003724 <MemManage_Handler+0x4>

08003726 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003726:	b480      	push	{r7}
 8003728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800372a:	e7fe      	b.n	800372a <BusFault_Handler+0x4>

0800372c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003730:	e7fe      	b.n	8003730 <UsageFault_Handler+0x4>

08003732 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003732:	b480      	push	{r7}
 8003734:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003736:	bf00      	nop
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003744:	bf00      	nop
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800374e:	b480      	push	{r7}
 8003750:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003752:	bf00      	nop
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003760:	f000 f9ba 	bl	8003ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003764:	bf00      	nop
 8003766:	bd80      	pop	{r7, pc}

08003768 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 800376c:	4802      	ldr	r0, [pc, #8]	; (8003778 <DMA1_Stream0_IRQHandler+0x10>)
 800376e:	f002 fc4f 	bl	8006010 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003772:	bf00      	nop
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	240013b4 	.word	0x240013b4

0800377c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8003780:	4802      	ldr	r0, [pc, #8]	; (800378c <DMA1_Stream1_IRQHandler+0x10>)
 8003782:	f002 fc45 	bl	8006010 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003786:	bf00      	nop
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	2400124c 	.word	0x2400124c

08003790 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8003794:	4802      	ldr	r0, [pc, #8]	; (80037a0 <DMA1_Stream2_IRQHandler+0x10>)
 8003796:	f002 fc3b 	bl	8006010 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800379a:	bf00      	nop
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	2400142c 	.word	0x2400142c

080037a4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 80037a8:	4802      	ldr	r0, [pc, #8]	; (80037b4 <DMA1_Stream3_IRQHandler+0x10>)
 80037aa:	f002 fc31 	bl	8006010 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80037ae:	bf00      	nop
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	240012c4 	.word	0x240012c4

080037b8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 80037bc:	4802      	ldr	r0, [pc, #8]	; (80037c8 <DMA1_Stream4_IRQHandler+0x10>)
 80037be:	f002 fc27 	bl	8006010 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80037c2:	bf00      	nop
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	2400133c 	.word	0x2400133c

080037cc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80037d0:	4802      	ldr	r0, [pc, #8]	; (80037dc <DMA1_Stream5_IRQHandler+0x10>)
 80037d2:	f002 fc1d 	bl	8006010 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80037d6:	bf00      	nop
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	24000cd8 	.word	0x24000cd8

080037e0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80037e4:	4802      	ldr	r0, [pc, #8]	; (80037f0 <TIM4_IRQHandler+0x10>)
 80037e6:	f00c fa59 	bl	800fc9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80037ea:	bf00      	nop
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	24001168 	.word	0x24001168

080037f4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80037f8:	4802      	ldr	r0, [pc, #8]	; (8003804 <I2C2_EV_IRQHandler+0x10>)
 80037fa:	f004 fce9 	bl	80081d0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80037fe:	bf00      	nop
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	24000e68 	.word	0x24000e68

08003808 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800380c:	4802      	ldr	r0, [pc, #8]	; (8003818 <DMA2_Stream7_IRQHandler+0x10>)
 800380e:	f002 fbff 	bl	8006010 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003812:	bf00      	nop
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	24000d50 	.word	0x24000d50

0800381c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003820:	4802      	ldr	r0, [pc, #8]	; (800382c <OTG_HS_IRQHandler+0x10>)
 8003822:	f004 fedf 	bl	80085e4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8003826:	bf00      	nop
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	24002ad0 	.word	0x24002ad0

08003830 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8003834:	4802      	ldr	r0, [pc, #8]	; (8003840 <SDMMC2_IRQHandler+0x10>)
 8003836:	f009 fea5 	bl	800d584 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 800383a:	bf00      	nop
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	24000ebc 	.word	0x24000ebc

08003844 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800384c:	4a14      	ldr	r2, [pc, #80]	; (80038a0 <_sbrk+0x5c>)
 800384e:	4b15      	ldr	r3, [pc, #84]	; (80038a4 <_sbrk+0x60>)
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003858:	4b13      	ldr	r3, [pc, #76]	; (80038a8 <_sbrk+0x64>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d102      	bne.n	8003866 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003860:	4b11      	ldr	r3, [pc, #68]	; (80038a8 <_sbrk+0x64>)
 8003862:	4a12      	ldr	r2, [pc, #72]	; (80038ac <_sbrk+0x68>)
 8003864:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003866:	4b10      	ldr	r3, [pc, #64]	; (80038a8 <_sbrk+0x64>)
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4413      	add	r3, r2
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	429a      	cmp	r2, r3
 8003872:	d207      	bcs.n	8003884 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003874:	f013 fca0 	bl	80171b8 <__errno>
 8003878:	4603      	mov	r3, r0
 800387a:	220c      	movs	r2, #12
 800387c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800387e:	f04f 33ff 	mov.w	r3, #4294967295
 8003882:	e009      	b.n	8003898 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003884:	4b08      	ldr	r3, [pc, #32]	; (80038a8 <_sbrk+0x64>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800388a:	4b07      	ldr	r3, [pc, #28]	; (80038a8 <_sbrk+0x64>)
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4413      	add	r3, r2
 8003892:	4a05      	ldr	r2, [pc, #20]	; (80038a8 <_sbrk+0x64>)
 8003894:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003896:	68fb      	ldr	r3, [r7, #12]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	24050000 	.word	0x24050000
 80038a4:	00000800 	.word	0x00000800
 80038a8:	240015cc 	.word	0x240015cc
 80038ac:	24003348 	.word	0x24003348

080038b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80038b4:	4b32      	ldr	r3, [pc, #200]	; (8003980 <SystemInit+0xd0>)
 80038b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ba:	4a31      	ldr	r2, [pc, #196]	; (8003980 <SystemInit+0xd0>)
 80038bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80038c4:	4b2f      	ldr	r3, [pc, #188]	; (8003984 <SystemInit+0xd4>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 030f 	and.w	r3, r3, #15
 80038cc:	2b06      	cmp	r3, #6
 80038ce:	d807      	bhi.n	80038e0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80038d0:	4b2c      	ldr	r3, [pc, #176]	; (8003984 <SystemInit+0xd4>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f023 030f 	bic.w	r3, r3, #15
 80038d8:	4a2a      	ldr	r2, [pc, #168]	; (8003984 <SystemInit+0xd4>)
 80038da:	f043 0307 	orr.w	r3, r3, #7
 80038de:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80038e0:	4b29      	ldr	r3, [pc, #164]	; (8003988 <SystemInit+0xd8>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a28      	ldr	r2, [pc, #160]	; (8003988 <SystemInit+0xd8>)
 80038e6:	f043 0301 	orr.w	r3, r3, #1
 80038ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80038ec:	4b26      	ldr	r3, [pc, #152]	; (8003988 <SystemInit+0xd8>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80038f2:	4b25      	ldr	r3, [pc, #148]	; (8003988 <SystemInit+0xd8>)
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	4924      	ldr	r1, [pc, #144]	; (8003988 <SystemInit+0xd8>)
 80038f8:	4b24      	ldr	r3, [pc, #144]	; (800398c <SystemInit+0xdc>)
 80038fa:	4013      	ands	r3, r2
 80038fc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80038fe:	4b21      	ldr	r3, [pc, #132]	; (8003984 <SystemInit+0xd4>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b00      	cmp	r3, #0
 8003908:	d007      	beq.n	800391a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800390a:	4b1e      	ldr	r3, [pc, #120]	; (8003984 <SystemInit+0xd4>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f023 030f 	bic.w	r3, r3, #15
 8003912:	4a1c      	ldr	r2, [pc, #112]	; (8003984 <SystemInit+0xd4>)
 8003914:	f043 0307 	orr.w	r3, r3, #7
 8003918:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800391a:	4b1b      	ldr	r3, [pc, #108]	; (8003988 <SystemInit+0xd8>)
 800391c:	2200      	movs	r2, #0
 800391e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003920:	4b19      	ldr	r3, [pc, #100]	; (8003988 <SystemInit+0xd8>)
 8003922:	2200      	movs	r2, #0
 8003924:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003926:	4b18      	ldr	r3, [pc, #96]	; (8003988 <SystemInit+0xd8>)
 8003928:	2200      	movs	r2, #0
 800392a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800392c:	4b16      	ldr	r3, [pc, #88]	; (8003988 <SystemInit+0xd8>)
 800392e:	4a18      	ldr	r2, [pc, #96]	; (8003990 <SystemInit+0xe0>)
 8003930:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003932:	4b15      	ldr	r3, [pc, #84]	; (8003988 <SystemInit+0xd8>)
 8003934:	4a17      	ldr	r2, [pc, #92]	; (8003994 <SystemInit+0xe4>)
 8003936:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003938:	4b13      	ldr	r3, [pc, #76]	; (8003988 <SystemInit+0xd8>)
 800393a:	4a17      	ldr	r2, [pc, #92]	; (8003998 <SystemInit+0xe8>)
 800393c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800393e:	4b12      	ldr	r3, [pc, #72]	; (8003988 <SystemInit+0xd8>)
 8003940:	2200      	movs	r2, #0
 8003942:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003944:	4b10      	ldr	r3, [pc, #64]	; (8003988 <SystemInit+0xd8>)
 8003946:	4a14      	ldr	r2, [pc, #80]	; (8003998 <SystemInit+0xe8>)
 8003948:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800394a:	4b0f      	ldr	r3, [pc, #60]	; (8003988 <SystemInit+0xd8>)
 800394c:	2200      	movs	r2, #0
 800394e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003950:	4b0d      	ldr	r3, [pc, #52]	; (8003988 <SystemInit+0xd8>)
 8003952:	4a11      	ldr	r2, [pc, #68]	; (8003998 <SystemInit+0xe8>)
 8003954:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003956:	4b0c      	ldr	r3, [pc, #48]	; (8003988 <SystemInit+0xd8>)
 8003958:	2200      	movs	r2, #0
 800395a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800395c:	4b0a      	ldr	r3, [pc, #40]	; (8003988 <SystemInit+0xd8>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a09      	ldr	r2, [pc, #36]	; (8003988 <SystemInit+0xd8>)
 8003962:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003966:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003968:	4b07      	ldr	r3, [pc, #28]	; (8003988 <SystemInit+0xd8>)
 800396a:	2200      	movs	r2, #0
 800396c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800396e:	4b0b      	ldr	r3, [pc, #44]	; (800399c <SystemInit+0xec>)
 8003970:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003974:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003976:	bf00      	nop
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	e000ed00 	.word	0xe000ed00
 8003984:	52002000 	.word	0x52002000
 8003988:	58024400 	.word	0x58024400
 800398c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003990:	02020200 	.word	0x02020200
 8003994:	01ff0000 	.word	0x01ff0000
 8003998:	01010280 	.word	0x01010280
 800399c:	52004000 	.word	0x52004000

080039a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80039a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80039a4:	f7ff ff84 	bl	80038b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80039a8:	480c      	ldr	r0, [pc, #48]	; (80039dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80039aa:	490d      	ldr	r1, [pc, #52]	; (80039e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80039ac:	4a0d      	ldr	r2, [pc, #52]	; (80039e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80039ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039b0:	e002      	b.n	80039b8 <LoopCopyDataInit>

080039b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039b6:	3304      	adds	r3, #4

080039b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039bc:	d3f9      	bcc.n	80039b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039be:	4a0a      	ldr	r2, [pc, #40]	; (80039e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80039c0:	4c0a      	ldr	r4, [pc, #40]	; (80039ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80039c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039c4:	e001      	b.n	80039ca <LoopFillZerobss>

080039c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039c8:	3204      	adds	r2, #4

080039ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039cc:	d3fb      	bcc.n	80039c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80039ce:	f013 fbf9 	bl	80171c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039d2:	f7fd fd0d 	bl	80013f0 <main>
  bx  lr
 80039d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80039d8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80039dc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80039e0:	24000150 	.word	0x24000150
  ldr r2, =_sidata
 80039e4:	080187dc 	.word	0x080187dc
  ldr r2, =_sbss
 80039e8:	24000150 	.word	0x24000150
  ldr r4, =_ebss
 80039ec:	24003344 	.word	0x24003344

080039f0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039f0:	e7fe      	b.n	80039f0 <ADC3_IRQHandler>
	...

080039f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039fa:	2003      	movs	r0, #3
 80039fc:	f001 fd06 	bl	800540c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003a00:	f006 fd94 	bl	800a52c <HAL_RCC_GetSysClockFreq>
 8003a04:	4602      	mov	r2, r0
 8003a06:	4b15      	ldr	r3, [pc, #84]	; (8003a5c <HAL_Init+0x68>)
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	0a1b      	lsrs	r3, r3, #8
 8003a0c:	f003 030f 	and.w	r3, r3, #15
 8003a10:	4913      	ldr	r1, [pc, #76]	; (8003a60 <HAL_Init+0x6c>)
 8003a12:	5ccb      	ldrb	r3, [r1, r3]
 8003a14:	f003 031f 	and.w	r3, r3, #31
 8003a18:	fa22 f303 	lsr.w	r3, r2, r3
 8003a1c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a1e:	4b0f      	ldr	r3, [pc, #60]	; (8003a5c <HAL_Init+0x68>)
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	f003 030f 	and.w	r3, r3, #15
 8003a26:	4a0e      	ldr	r2, [pc, #56]	; (8003a60 <HAL_Init+0x6c>)
 8003a28:	5cd3      	ldrb	r3, [r2, r3]
 8003a2a:	f003 031f 	and.w	r3, r3, #31
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	fa22 f303 	lsr.w	r3, r2, r3
 8003a34:	4a0b      	ldr	r2, [pc, #44]	; (8003a64 <HAL_Init+0x70>)
 8003a36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a38:	4a0b      	ldr	r2, [pc, #44]	; (8003a68 <HAL_Init+0x74>)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a3e:	200f      	movs	r0, #15
 8003a40:	f000 f814 	bl	8003a6c <HAL_InitTick>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e002      	b.n	8003a54 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003a4e:	f7fe ffcb 	bl	80029e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	58024400 	.word	0x58024400
 8003a60:	08018628 	.word	0x08018628
 8003a64:	24000004 	.word	0x24000004
 8003a68:	24000000 	.word	0x24000000

08003a6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003a74:	4b15      	ldr	r3, [pc, #84]	; (8003acc <HAL_InitTick+0x60>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e021      	b.n	8003ac4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003a80:	4b13      	ldr	r3, [pc, #76]	; (8003ad0 <HAL_InitTick+0x64>)
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	4b11      	ldr	r3, [pc, #68]	; (8003acc <HAL_InitTick+0x60>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	4619      	mov	r1, r3
 8003a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a96:	4618      	mov	r0, r3
 8003a98:	f001 fceb 	bl	8005472 <HAL_SYSTICK_Config>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e00e      	b.n	8003ac4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2b0f      	cmp	r3, #15
 8003aaa:	d80a      	bhi.n	8003ac2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003aac:	2200      	movs	r2, #0
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab4:	f001 fcb5 	bl	8005422 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ab8:	4a06      	ldr	r2, [pc, #24]	; (8003ad4 <HAL_InitTick+0x68>)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	e000      	b.n	8003ac4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	2400000c 	.word	0x2400000c
 8003ad0:	24000000 	.word	0x24000000
 8003ad4:	24000008 	.word	0x24000008

08003ad8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003adc:	4b06      	ldr	r3, [pc, #24]	; (8003af8 <HAL_IncTick+0x20>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	4b06      	ldr	r3, [pc, #24]	; (8003afc <HAL_IncTick+0x24>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	4a04      	ldr	r2, [pc, #16]	; (8003afc <HAL_IncTick+0x24>)
 8003aea:	6013      	str	r3, [r2, #0]
}
 8003aec:	bf00      	nop
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	2400000c 	.word	0x2400000c
 8003afc:	240015d0 	.word	0x240015d0

08003b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0
  return uwTick;
 8003b04:	4b03      	ldr	r3, [pc, #12]	; (8003b14 <HAL_GetTick+0x14>)
 8003b06:	681b      	ldr	r3, [r3, #0]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	240015d0 	.word	0x240015d0

08003b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b20:	f7ff ffee 	bl	8003b00 <HAL_GetTick>
 8003b24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b30:	d005      	beq.n	8003b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b32:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <HAL_Delay+0x44>)
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	461a      	mov	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b3e:	bf00      	nop
 8003b40:	f7ff ffde 	bl	8003b00 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d8f7      	bhi.n	8003b40 <HAL_Delay+0x28>
  {
  }
}
 8003b50:	bf00      	nop
 8003b52:	bf00      	nop
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	2400000c 	.word	0x2400000c

08003b60 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003b6a:	4b07      	ldr	r3, [pc, #28]	; (8003b88 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	43db      	mvns	r3, r3
 8003b72:	401a      	ands	r2, r3
 8003b74:	4904      	ldr	r1, [pc, #16]	; (8003b88 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	604b      	str	r3, [r1, #4]
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	58000400 	.word	0x58000400

08003b8c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	609a      	str	r2, [r3, #8]
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
 8003bba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	609a      	str	r2, [r3, #8]
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
 8003c00:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	3360      	adds	r3, #96	; 0x60
 8003c06:	461a      	mov	r2, r3
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4413      	add	r3, r2
 8003c0e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4a10      	ldr	r2, [pc, #64]	; (8003c54 <LL_ADC_SetOffset+0x60>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d10b      	bne.n	8003c30 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003c2e:	e00b      	b.n	8003c48 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	430b      	orrs	r3, r1
 8003c42:	431a      	orrs	r2, r3
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	601a      	str	r2, [r3, #0]
}
 8003c48:	bf00      	nop
 8003c4a:	371c      	adds	r7, #28
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	58026000 	.word	0x58026000

08003c58 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	3360      	adds	r3, #96	; 0x60
 8003c66:	461a      	mov	r2, r3
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	f003 031f 	and.w	r3, r3, #31
 8003c9e:	6879      	ldr	r1, [r7, #4]
 8003ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	611a      	str	r2, [r3, #16]
}
 8003caa:	bf00      	nop
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
	...

08003cb8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b087      	sub	sp, #28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	4a0c      	ldr	r2, [pc, #48]	; (8003cf8 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d00e      	beq.n	8003cea <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	3360      	adds	r3, #96	; 0x60
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4413      	add	r3, r2
 8003cd8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	601a      	str	r2, [r3, #0]
  }
}
 8003cea:	bf00      	nop
 8003cec:	371c      	adds	r7, #28
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	58026000 	.word	0x58026000

08003cfc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b087      	sub	sp, #28
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4a0c      	ldr	r2, [pc, #48]	; (8003d3c <LL_ADC_SetOffsetSaturation+0x40>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d10e      	bne.n	8003d2e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	3360      	adds	r3, #96	; 0x60
 8003d14:	461a      	mov	r2, r3
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	4413      	add	r3, r2
 8003d1c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003d2e:	bf00      	nop
 8003d30:	371c      	adds	r7, #28
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	58026000 	.word	0x58026000

08003d40 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b087      	sub	sp, #28
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	4a0c      	ldr	r2, [pc, #48]	; (8003d80 <LL_ADC_SetOffsetSign+0x40>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d10e      	bne.n	8003d72 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	3360      	adds	r3, #96	; 0x60
 8003d58:	461a      	mov	r2, r3
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4413      	add	r3, r2
 8003d60:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	431a      	orrs	r2, r3
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003d72:	bf00      	nop
 8003d74:	371c      	adds	r7, #28
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	58026000 	.word	0x58026000

08003d84 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b087      	sub	sp, #28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	3360      	adds	r3, #96	; 0x60
 8003d94:	461a      	mov	r2, r3
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4413      	add	r3, r2
 8003d9c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	4a0c      	ldr	r2, [pc, #48]	; (8003dd4 <LL_ADC_SetOffsetState+0x50>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d108      	bne.n	8003db8 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	431a      	orrs	r2, r3
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003db6:	e007      	b.n	8003dc8 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	601a      	str	r2, [r3, #0]
}
 8003dc8:	bf00      	nop
 8003dca:	371c      	adds	r7, #28
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr
 8003dd4:	58026000 	.word	0x58026000

08003dd8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b087      	sub	sp, #28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	3330      	adds	r3, #48	; 0x30
 8003de8:	461a      	mov	r2, r3
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	0a1b      	lsrs	r3, r3, #8
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	f003 030c 	and.w	r3, r3, #12
 8003df4:	4413      	add	r3, r2
 8003df6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	f003 031f 	and.w	r3, r3, #31
 8003e02:	211f      	movs	r1, #31
 8003e04:	fa01 f303 	lsl.w	r3, r1, r3
 8003e08:	43db      	mvns	r3, r3
 8003e0a:	401a      	ands	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	0e9b      	lsrs	r3, r3, #26
 8003e10:	f003 011f 	and.w	r1, r3, #31
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	f003 031f 	and.w	r3, r3, #31
 8003e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003e24:	bf00      	nop
 8003e26:	371c      	adds	r7, #28
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b087      	sub	sp, #28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	3314      	adds	r3, #20
 8003e40:	461a      	mov	r2, r3
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	0e5b      	lsrs	r3, r3, #25
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	4413      	add	r3, r2
 8003e4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	0d1b      	lsrs	r3, r3, #20
 8003e58:	f003 031f 	and.w	r3, r3, #31
 8003e5c:	2107      	movs	r1, #7
 8003e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e62:	43db      	mvns	r3, r3
 8003e64:	401a      	ands	r2, r3
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	0d1b      	lsrs	r3, r3, #20
 8003e6a:	f003 031f 	and.w	r3, r3, #31
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	fa01 f303 	lsl.w	r3, r1, r3
 8003e74:	431a      	orrs	r2, r3
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003e7a:	bf00      	nop
 8003e7c:	371c      	adds	r7, #28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
	...

08003e88 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4a1a      	ldr	r2, [pc, #104]	; (8003f00 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d115      	bne.n	8003ec8 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ea8:	43db      	mvns	r3, r3
 8003eaa:	401a      	ands	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f003 0318 	and.w	r3, r3, #24
 8003eb2:	4914      	ldr	r1, [pc, #80]	; (8003f04 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003eb4:	40d9      	lsrs	r1, r3
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	400b      	ands	r3, r1
 8003eba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003ec6:	e014      	b.n	8003ef2 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	401a      	ands	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f003 0318 	and.w	r3, r3, #24
 8003ede:	4909      	ldr	r1, [pc, #36]	; (8003f04 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003ee0:	40d9      	lsrs	r1, r3
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	400b      	ands	r3, r1
 8003ee6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003eea:	431a      	orrs	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003ef2:	bf00      	nop
 8003ef4:	3714      	adds	r7, #20
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	58026000 	.word	0x58026000
 8003f04:	000fffff 	.word	0x000fffff

08003f08 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	4b04      	ldr	r3, [pc, #16]	; (8003f28 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003f16:	4013      	ands	r3, r2
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6093      	str	r3, [r2, #8]
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr
 8003f28:	5fffffc0 	.word	0x5fffffc0

08003f2c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f40:	d101      	bne.n	8003f46 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003f42:	2301      	movs	r3, #1
 8003f44:	e000      	b.n	8003f48 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689a      	ldr	r2, [r3, #8]
 8003f60:	4b05      	ldr	r3, [pc, #20]	; (8003f78 <LL_ADC_EnableInternalRegulator+0x24>)
 8003f62:	4013      	ands	r3, r2
 8003f64:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr
 8003f78:	6fffffc0 	.word	0x6fffffc0

08003f7c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f90:	d101      	bne.n	8003f96 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003f92:	2301      	movs	r3, #1
 8003f94:	e000      	b.n	8003f98 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d101      	bne.n	8003fbc <LL_ADC_IsEnabled+0x18>
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e000      	b.n	8003fbe <LL_ADC_IsEnabled+0x1a>
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 0304 	and.w	r3, r3, #4
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d101      	bne.n	8003fe2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e000      	b.n	8003fe4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f003 0308 	and.w	r3, r3, #8
 8004000:	2b08      	cmp	r3, #8
 8004002:	d101      	bne.n	8004008 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004004:	2301      	movs	r3, #1
 8004006:	e000      	b.n	800400a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
	...

08004018 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004018:	b590      	push	{r4, r7, lr}
 800401a:	b089      	sub	sp, #36	; 0x24
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004020:	2300      	movs	r3, #0
 8004022:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004024:	2300      	movs	r3, #0
 8004026:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e1ee      	b.n	8004410 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800403c:	2b00      	cmp	r3, #0
 800403e:	d109      	bne.n	8004054 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7fe fceb 	bl	8002a1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff ff67 	bl	8003f2c <LL_ADC_IsDeepPowerDownEnabled>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d004      	beq.n	800406e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4618      	mov	r0, r3
 800406a:	f7ff ff4d 	bl	8003f08 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4618      	mov	r0, r3
 8004074:	f7ff ff82 	bl	8003f7c <LL_ADC_IsInternalRegulatorEnabled>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d114      	bne.n	80040a8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f7ff ff66 	bl	8003f54 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004088:	4b8e      	ldr	r3, [pc, #568]	; (80042c4 <HAL_ADC_Init+0x2ac>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	099b      	lsrs	r3, r3, #6
 800408e:	4a8e      	ldr	r2, [pc, #568]	; (80042c8 <HAL_ADC_Init+0x2b0>)
 8004090:	fba2 2303 	umull	r2, r3, r2, r3
 8004094:	099b      	lsrs	r3, r3, #6
 8004096:	3301      	adds	r3, #1
 8004098:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800409a:	e002      	b.n	80040a2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	3b01      	subs	r3, #1
 80040a0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1f9      	bne.n	800409c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7ff ff65 	bl	8003f7c <LL_ADC_IsInternalRegulatorEnabled>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10d      	bne.n	80040d4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040bc:	f043 0210 	orr.w	r2, r3, #16
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040c8:	f043 0201 	orr.w	r2, r3, #1
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4618      	mov	r0, r3
 80040da:	f7ff ff76 	bl	8003fca <LL_ADC_REG_IsConversionOngoing>
 80040de:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040e4:	f003 0310 	and.w	r3, r3, #16
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f040 8188 	bne.w	80043fe <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f040 8184 	bne.w	80043fe <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040fa:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80040fe:	f043 0202 	orr.w	r2, r3, #2
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4618      	mov	r0, r3
 800410c:	f7ff ff4a 	bl	8003fa4 <LL_ADC_IsEnabled>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d136      	bne.n	8004184 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a6c      	ldr	r2, [pc, #432]	; (80042cc <HAL_ADC_Init+0x2b4>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d004      	beq.n	800412a <HAL_ADC_Init+0x112>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a6a      	ldr	r2, [pc, #424]	; (80042d0 <HAL_ADC_Init+0x2b8>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d10e      	bne.n	8004148 <HAL_ADC_Init+0x130>
 800412a:	4868      	ldr	r0, [pc, #416]	; (80042cc <HAL_ADC_Init+0x2b4>)
 800412c:	f7ff ff3a 	bl	8003fa4 <LL_ADC_IsEnabled>
 8004130:	4604      	mov	r4, r0
 8004132:	4867      	ldr	r0, [pc, #412]	; (80042d0 <HAL_ADC_Init+0x2b8>)
 8004134:	f7ff ff36 	bl	8003fa4 <LL_ADC_IsEnabled>
 8004138:	4603      	mov	r3, r0
 800413a:	4323      	orrs	r3, r4
 800413c:	2b00      	cmp	r3, #0
 800413e:	bf0c      	ite	eq
 8004140:	2301      	moveq	r3, #1
 8004142:	2300      	movne	r3, #0
 8004144:	b2db      	uxtb	r3, r3
 8004146:	e008      	b.n	800415a <HAL_ADC_Init+0x142>
 8004148:	4862      	ldr	r0, [pc, #392]	; (80042d4 <HAL_ADC_Init+0x2bc>)
 800414a:	f7ff ff2b 	bl	8003fa4 <LL_ADC_IsEnabled>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	bf0c      	ite	eq
 8004154:	2301      	moveq	r3, #1
 8004156:	2300      	movne	r3, #0
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d012      	beq.n	8004184 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a5a      	ldr	r2, [pc, #360]	; (80042cc <HAL_ADC_Init+0x2b4>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d004      	beq.n	8004172 <HAL_ADC_Init+0x15a>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a58      	ldr	r2, [pc, #352]	; (80042d0 <HAL_ADC_Init+0x2b8>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d101      	bne.n	8004176 <HAL_ADC_Init+0x15e>
 8004172:	4a59      	ldr	r2, [pc, #356]	; (80042d8 <HAL_ADC_Init+0x2c0>)
 8004174:	e000      	b.n	8004178 <HAL_ADC_Init+0x160>
 8004176:	4a59      	ldr	r2, [pc, #356]	; (80042dc <HAL_ADC_Init+0x2c4>)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	4619      	mov	r1, r3
 800417e:	4610      	mov	r0, r2
 8004180:	f7ff fd04 	bl	8003b8c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a52      	ldr	r2, [pc, #328]	; (80042d4 <HAL_ADC_Init+0x2bc>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d129      	bne.n	80041e2 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	7e5b      	ldrb	r3, [r3, #25]
 8004192:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004198:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800419e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	d013      	beq.n	80041d0 <HAL_ADC_Init+0x1b8>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	2b0c      	cmp	r3, #12
 80041ae:	d00d      	beq.n	80041cc <HAL_ADC_Init+0x1b4>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	2b1c      	cmp	r3, #28
 80041b6:	d007      	beq.n	80041c8 <HAL_ADC_Init+0x1b0>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	2b18      	cmp	r3, #24
 80041be:	d101      	bne.n	80041c4 <HAL_ADC_Init+0x1ac>
 80041c0:	2318      	movs	r3, #24
 80041c2:	e006      	b.n	80041d2 <HAL_ADC_Init+0x1ba>
 80041c4:	2300      	movs	r3, #0
 80041c6:	e004      	b.n	80041d2 <HAL_ADC_Init+0x1ba>
 80041c8:	2310      	movs	r3, #16
 80041ca:	e002      	b.n	80041d2 <HAL_ADC_Init+0x1ba>
 80041cc:	2308      	movs	r3, #8
 80041ce:	e000      	b.n	80041d2 <HAL_ADC_Init+0x1ba>
 80041d0:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80041d2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041da:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80041dc:	4313      	orrs	r3, r2
 80041de:	61bb      	str	r3, [r7, #24]
 80041e0:	e00e      	b.n	8004200 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	7e5b      	ldrb	r3, [r3, #25]
 80041e6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80041ec:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80041f2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041fa:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80041fc:	4313      	orrs	r3, r2
 80041fe:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d106      	bne.n	8004218 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	3b01      	subs	r3, #1
 8004210:	045b      	lsls	r3, r3, #17
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	4313      	orrs	r3, r2
 8004216:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421c:	2b00      	cmp	r3, #0
 800421e:	d009      	beq.n	8004234 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004224:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	4313      	orrs	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a26      	ldr	r2, [pc, #152]	; (80042d4 <HAL_ADC_Init+0x2bc>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d115      	bne.n	800426a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68da      	ldr	r2, [r3, #12]
 8004244:	4b26      	ldr	r3, [pc, #152]	; (80042e0 <HAL_ADC_Init+0x2c8>)
 8004246:	4013      	ands	r3, r2
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	6812      	ldr	r2, [r2, #0]
 800424c:	69b9      	ldr	r1, [r7, #24]
 800424e:	430b      	orrs	r3, r1
 8004250:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	611a      	str	r2, [r3, #16]
 8004268:	e009      	b.n	800427e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68da      	ldr	r2, [r3, #12]
 8004270:	4b1c      	ldr	r3, [pc, #112]	; (80042e4 <HAL_ADC_Init+0x2cc>)
 8004272:	4013      	ands	r3, r2
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6812      	ldr	r2, [r2, #0]
 8004278:	69b9      	ldr	r1, [r7, #24]
 800427a:	430b      	orrs	r3, r1
 800427c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f7ff fea1 	bl	8003fca <LL_ADC_REG_IsConversionOngoing>
 8004288:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff feae 	bl	8003ff0 <LL_ADC_INJ_IsConversionOngoing>
 8004294:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	2b00      	cmp	r3, #0
 800429a:	f040 808e 	bne.w	80043ba <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f040 808a 	bne.w	80043ba <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a0a      	ldr	r2, [pc, #40]	; (80042d4 <HAL_ADC_Init+0x2bc>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d11b      	bne.n	80042e8 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	7e1b      	ldrb	r3, [r3, #24]
 80042b4:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80042bc:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80042be:	4313      	orrs	r3, r2
 80042c0:	61bb      	str	r3, [r7, #24]
 80042c2:	e018      	b.n	80042f6 <HAL_ADC_Init+0x2de>
 80042c4:	24000000 	.word	0x24000000
 80042c8:	053e2d63 	.word	0x053e2d63
 80042cc:	40022000 	.word	0x40022000
 80042d0:	40022100 	.word	0x40022100
 80042d4:	58026000 	.word	0x58026000
 80042d8:	40022300 	.word	0x40022300
 80042dc:	58026300 	.word	0x58026300
 80042e0:	fff04007 	.word	0xfff04007
 80042e4:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	7e1b      	ldrb	r3, [r3, #24]
 80042ec:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 80042f2:	4313      	orrs	r3, r2
 80042f4:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68da      	ldr	r2, [r3, #12]
 80042fc:	4b46      	ldr	r3, [pc, #280]	; (8004418 <HAL_ADC_Init+0x400>)
 80042fe:	4013      	ands	r3, r2
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6812      	ldr	r2, [r2, #0]
 8004304:	69b9      	ldr	r1, [r7, #24]
 8004306:	430b      	orrs	r3, r1
 8004308:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004310:	2b01      	cmp	r3, #1
 8004312:	d137      	bne.n	8004384 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004318:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a3f      	ldr	r2, [pc, #252]	; (800441c <HAL_ADC_Init+0x404>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d116      	bne.n	8004352 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	691a      	ldr	r2, [r3, #16]
 800432a:	4b3d      	ldr	r3, [pc, #244]	; (8004420 <HAL_ADC_Init+0x408>)
 800432c:	4013      	ands	r3, r2
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004336:	4311      	orrs	r1, r2
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800433c:	4311      	orrs	r1, r2
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004342:	430a      	orrs	r2, r1
 8004344:	431a      	orrs	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0201 	orr.w	r2, r2, #1
 800434e:	611a      	str	r2, [r3, #16]
 8004350:	e020      	b.n	8004394 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	691a      	ldr	r2, [r3, #16]
 8004358:	4b32      	ldr	r3, [pc, #200]	; (8004424 <HAL_ADC_Init+0x40c>)
 800435a:	4013      	ands	r3, r2
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004360:	3a01      	subs	r2, #1
 8004362:	0411      	lsls	r1, r2, #16
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004368:	4311      	orrs	r1, r2
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800436e:	4311      	orrs	r1, r2
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004374:	430a      	orrs	r2, r1
 8004376:	431a      	orrs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f042 0201 	orr.w	r2, r2, #1
 8004380:	611a      	str	r2, [r3, #16]
 8004382:	e007      	b.n	8004394 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	691a      	ldr	r2, [r3, #16]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 0201 	bic.w	r2, r2, #1
 8004392:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a1b      	ldr	r2, [pc, #108]	; (800441c <HAL_ADC_Init+0x404>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d002      	beq.n	80043ba <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 fd63 	bl	8004e80 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d10c      	bne.n	80043dc <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c8:	f023 010f 	bic.w	r1, r3, #15
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	69db      	ldr	r3, [r3, #28]
 80043d0:	1e5a      	subs	r2, r3, #1
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	631a      	str	r2, [r3, #48]	; 0x30
 80043da:	e007      	b.n	80043ec <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 020f 	bic.w	r2, r2, #15
 80043ea:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043f0:	f023 0303 	bic.w	r3, r3, #3
 80043f4:	f043 0201 	orr.w	r2, r3, #1
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	661a      	str	r2, [r3, #96]	; 0x60
 80043fc:	e007      	b.n	800440e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004402:	f043 0210 	orr.w	r2, r3, #16
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800440e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3724      	adds	r7, #36	; 0x24
 8004414:	46bd      	mov	sp, r7
 8004416:	bd90      	pop	{r4, r7, pc}
 8004418:	ffffbffc 	.word	0xffffbffc
 800441c:	58026000 	.word	0x58026000
 8004420:	fc00f81f 	.word	0xfc00f81f
 8004424:	fc00f81e 	.word	0xfc00f81e

08004428 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004428:	b590      	push	{r4, r7, lr}
 800442a:	b0b9      	sub	sp, #228	; 0xe4
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004432:	2300      	movs	r3, #0
 8004434:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004438:	2300      	movs	r3, #0
 800443a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004442:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	4aa9      	ldr	r2, [pc, #676]	; (80046f0 <HAL_ADC_ConfigChannel+0x2c8>)
 800444a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004452:	2b01      	cmp	r3, #1
 8004454:	d102      	bne.n	800445c <HAL_ADC_ConfigChannel+0x34>
 8004456:	2302      	movs	r3, #2
 8004458:	f000 bcfa 	b.w	8004e50 <HAL_ADC_ConfigChannel+0xa28>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4618      	mov	r0, r3
 800446a:	f7ff fdae 	bl	8003fca <LL_ADC_REG_IsConversionOngoing>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	f040 84de 	bne.w	8004e32 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a9e      	ldr	r2, [pc, #632]	; (80046f4 <HAL_ADC_ConfigChannel+0x2cc>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d033      	beq.n	80044e8 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004488:	2b00      	cmp	r3, #0
 800448a:	d108      	bne.n	800449e <HAL_ADC_ConfigChannel+0x76>
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	0e9b      	lsrs	r3, r3, #26
 8004492:	f003 031f 	and.w	r3, r3, #31
 8004496:	2201      	movs	r2, #1
 8004498:	fa02 f303 	lsl.w	r3, r2, r3
 800449c:	e01d      	b.n	80044da <HAL_ADC_ConfigChannel+0xb2>
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044aa:	fa93 f3a3 	rbit	r3, r3
 80044ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80044b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80044b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80044ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80044c2:	2320      	movs	r3, #32
 80044c4:	e004      	b.n	80044d0 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80044c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80044ca:	fab3 f383 	clz	r3, r3
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	f003 031f 	and.w	r3, r3, #31
 80044d4:	2201      	movs	r2, #1
 80044d6:	fa02 f303 	lsl.w	r3, r2, r3
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	6812      	ldr	r2, [r2, #0]
 80044de:	69d1      	ldr	r1, [r2, #28]
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	6812      	ldr	r2, [r2, #0]
 80044e4:	430b      	orrs	r3, r1
 80044e6:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6818      	ldr	r0, [r3, #0]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	6859      	ldr	r1, [r3, #4]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	461a      	mov	r2, r3
 80044f6:	f7ff fc6f 	bl	8003dd8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4618      	mov	r0, r3
 8004500:	f7ff fd63 	bl	8003fca <LL_ADC_REG_IsConversionOngoing>
 8004504:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff fd6f 	bl	8003ff0 <LL_ADC_INJ_IsConversionOngoing>
 8004512:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004516:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800451a:	2b00      	cmp	r3, #0
 800451c:	f040 8270 	bne.w	8004a00 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004520:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004524:	2b00      	cmp	r3, #0
 8004526:	f040 826b 	bne.w	8004a00 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6818      	ldr	r0, [r3, #0]
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	6819      	ldr	r1, [r3, #0]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	461a      	mov	r2, r3
 8004538:	f7ff fc7a 	bl	8003e30 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a6c      	ldr	r2, [pc, #432]	; (80046f4 <HAL_ADC_ConfigChannel+0x2cc>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d10d      	bne.n	8004562 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	695a      	ldr	r2, [r3, #20]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	08db      	lsrs	r3, r3, #3
 8004552:	f003 0303 	and.w	r3, r3, #3
 8004556:	005b      	lsls	r3, r3, #1
 8004558:	fa02 f303 	lsl.w	r3, r2, r3
 800455c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004560:	e032      	b.n	80045c8 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004562:	4b65      	ldr	r3, [pc, #404]	; (80046f8 <HAL_ADC_ConfigChannel+0x2d0>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800456a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800456e:	d10b      	bne.n	8004588 <HAL_ADC_ConfigChannel+0x160>
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	695a      	ldr	r2, [r3, #20]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	089b      	lsrs	r3, r3, #2
 800457c:	f003 0307 	and.w	r3, r3, #7
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	fa02 f303 	lsl.w	r3, r2, r3
 8004586:	e01d      	b.n	80045c4 <HAL_ADC_ConfigChannel+0x19c>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f003 0310 	and.w	r3, r3, #16
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10b      	bne.n	80045ae <HAL_ADC_ConfigChannel+0x186>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	695a      	ldr	r2, [r3, #20]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	089b      	lsrs	r3, r3, #2
 80045a2:	f003 0307 	and.w	r3, r3, #7
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ac:	e00a      	b.n	80045c4 <HAL_ADC_ConfigChannel+0x19c>
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	695a      	ldr	r2, [r3, #20]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	089b      	lsrs	r3, r3, #2
 80045ba:	f003 0304 	and.w	r3, r3, #4
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	fa02 f303 	lsl.w	r3, r2, r3
 80045c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	2b04      	cmp	r3, #4
 80045ce:	d048      	beq.n	8004662 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6818      	ldr	r0, [r3, #0]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	6919      	ldr	r1, [r3, #16]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045e0:	f7ff fb08 	bl	8003bf4 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a42      	ldr	r2, [pc, #264]	; (80046f4 <HAL_ADC_ConfigChannel+0x2cc>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d119      	bne.n	8004622 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6818      	ldr	r0, [r3, #0]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	6919      	ldr	r1, [r3, #16]
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	461a      	mov	r2, r3
 80045fc:	f7ff fba0 	bl	8003d40 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6818      	ldr	r0, [r3, #0]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	6919      	ldr	r1, [r3, #16]
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d102      	bne.n	8004618 <HAL_ADC_ConfigChannel+0x1f0>
 8004612:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004616:	e000      	b.n	800461a <HAL_ADC_ConfigChannel+0x1f2>
 8004618:	2300      	movs	r3, #0
 800461a:	461a      	mov	r2, r3
 800461c:	f7ff fb6e 	bl	8003cfc <LL_ADC_SetOffsetSaturation>
 8004620:	e1ee      	b.n	8004a00 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6818      	ldr	r0, [r3, #0]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	6919      	ldr	r1, [r3, #16]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004630:	2b01      	cmp	r3, #1
 8004632:	d102      	bne.n	800463a <HAL_ADC_ConfigChannel+0x212>
 8004634:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004638:	e000      	b.n	800463c <HAL_ADC_ConfigChannel+0x214>
 800463a:	2300      	movs	r3, #0
 800463c:	461a      	mov	r2, r3
 800463e:	f7ff fb3b 	bl	8003cb8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6818      	ldr	r0, [r3, #0]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	6919      	ldr	r1, [r3, #16]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	7e1b      	ldrb	r3, [r3, #24]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d102      	bne.n	8004658 <HAL_ADC_ConfigChannel+0x230>
 8004652:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004656:	e000      	b.n	800465a <HAL_ADC_ConfigChannel+0x232>
 8004658:	2300      	movs	r3, #0
 800465a:	461a      	mov	r2, r3
 800465c:	f7ff fb12 	bl	8003c84 <LL_ADC_SetDataRightShift>
 8004660:	e1ce      	b.n	8004a00 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a23      	ldr	r2, [pc, #140]	; (80046f4 <HAL_ADC_ConfigChannel+0x2cc>)
 8004668:	4293      	cmp	r3, r2
 800466a:	f040 8181 	bne.w	8004970 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2100      	movs	r1, #0
 8004674:	4618      	mov	r0, r3
 8004676:	f7ff faef 	bl	8003c58 <LL_ADC_GetOffsetChannel>
 800467a:	4603      	mov	r3, r0
 800467c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10a      	bne.n	800469a <HAL_ADC_ConfigChannel+0x272>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2100      	movs	r1, #0
 800468a:	4618      	mov	r0, r3
 800468c:	f7ff fae4 	bl	8003c58 <LL_ADC_GetOffsetChannel>
 8004690:	4603      	mov	r3, r0
 8004692:	0e9b      	lsrs	r3, r3, #26
 8004694:	f003 021f 	and.w	r2, r3, #31
 8004698:	e01e      	b.n	80046d8 <HAL_ADC_ConfigChannel+0x2b0>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2100      	movs	r1, #0
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7ff fad9 	bl	8003c58 <LL_ADC_GetOffsetChannel>
 80046a6:	4603      	mov	r3, r0
 80046a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80046b0:	fa93 f3a3 	rbit	r3, r3
 80046b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80046b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80046bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80046c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80046c8:	2320      	movs	r3, #32
 80046ca:	e004      	b.n	80046d6 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80046cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80046d0:	fab3 f383 	clz	r3, r3
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	461a      	mov	r2, r3
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10b      	bne.n	80046fc <HAL_ADC_ConfigChannel+0x2d4>
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	0e9b      	lsrs	r3, r3, #26
 80046ea:	f003 031f 	and.w	r3, r3, #31
 80046ee:	e01e      	b.n	800472e <HAL_ADC_ConfigChannel+0x306>
 80046f0:	47ff0000 	.word	0x47ff0000
 80046f4:	58026000 	.word	0x58026000
 80046f8:	5c001000 	.word	0x5c001000
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004704:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004708:	fa93 f3a3 	rbit	r3, r3
 800470c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004710:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004714:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004718:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d101      	bne.n	8004724 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8004720:	2320      	movs	r3, #32
 8004722:	e004      	b.n	800472e <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8004724:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004728:	fab3 f383 	clz	r3, r3
 800472c:	b2db      	uxtb	r3, r3
 800472e:	429a      	cmp	r2, r3
 8004730:	d106      	bne.n	8004740 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2200      	movs	r2, #0
 8004738:	2100      	movs	r1, #0
 800473a:	4618      	mov	r0, r3
 800473c:	f7ff fb22 	bl	8003d84 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2101      	movs	r1, #1
 8004746:	4618      	mov	r0, r3
 8004748:	f7ff fa86 	bl	8003c58 <LL_ADC_GetOffsetChannel>
 800474c:	4603      	mov	r3, r0
 800474e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10a      	bne.n	800476c <HAL_ADC_ConfigChannel+0x344>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2101      	movs	r1, #1
 800475c:	4618      	mov	r0, r3
 800475e:	f7ff fa7b 	bl	8003c58 <LL_ADC_GetOffsetChannel>
 8004762:	4603      	mov	r3, r0
 8004764:	0e9b      	lsrs	r3, r3, #26
 8004766:	f003 021f 	and.w	r2, r3, #31
 800476a:	e01e      	b.n	80047aa <HAL_ADC_ConfigChannel+0x382>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2101      	movs	r1, #1
 8004772:	4618      	mov	r0, r3
 8004774:	f7ff fa70 	bl	8003c58 <LL_ADC_GetOffsetChannel>
 8004778:	4603      	mov	r3, r0
 800477a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800477e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004782:	fa93 f3a3 	rbit	r3, r3
 8004786:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800478a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800478e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004792:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 800479a:	2320      	movs	r3, #32
 800479c:	e004      	b.n	80047a8 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800479e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80047a2:	fab3 f383 	clz	r3, r3
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	461a      	mov	r2, r3
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d105      	bne.n	80047c2 <HAL_ADC_ConfigChannel+0x39a>
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	0e9b      	lsrs	r3, r3, #26
 80047bc:	f003 031f 	and.w	r3, r3, #31
 80047c0:	e018      	b.n	80047f4 <HAL_ADC_ConfigChannel+0x3cc>
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80047ce:	fa93 f3a3 	rbit	r3, r3
 80047d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80047d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80047da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80047de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80047e6:	2320      	movs	r3, #32
 80047e8:	e004      	b.n	80047f4 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80047ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047ee:	fab3 f383 	clz	r3, r3
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d106      	bne.n	8004806 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2200      	movs	r2, #0
 80047fe:	2101      	movs	r1, #1
 8004800:	4618      	mov	r0, r3
 8004802:	f7ff fabf 	bl	8003d84 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2102      	movs	r1, #2
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff fa23 	bl	8003c58 <LL_ADC_GetOffsetChannel>
 8004812:	4603      	mov	r3, r0
 8004814:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004818:	2b00      	cmp	r3, #0
 800481a:	d10a      	bne.n	8004832 <HAL_ADC_ConfigChannel+0x40a>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2102      	movs	r1, #2
 8004822:	4618      	mov	r0, r3
 8004824:	f7ff fa18 	bl	8003c58 <LL_ADC_GetOffsetChannel>
 8004828:	4603      	mov	r3, r0
 800482a:	0e9b      	lsrs	r3, r3, #26
 800482c:	f003 021f 	and.w	r2, r3, #31
 8004830:	e01e      	b.n	8004870 <HAL_ADC_ConfigChannel+0x448>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2102      	movs	r1, #2
 8004838:	4618      	mov	r0, r3
 800483a:	f7ff fa0d 	bl	8003c58 <LL_ADC_GetOffsetChannel>
 800483e:	4603      	mov	r3, r0
 8004840:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004844:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004848:	fa93 f3a3 	rbit	r3, r3
 800484c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004850:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004854:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004858:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800485c:	2b00      	cmp	r3, #0
 800485e:	d101      	bne.n	8004864 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8004860:	2320      	movs	r3, #32
 8004862:	e004      	b.n	800486e <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8004864:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004868:	fab3 f383 	clz	r3, r3
 800486c:	b2db      	uxtb	r3, r3
 800486e:	461a      	mov	r2, r3
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004878:	2b00      	cmp	r3, #0
 800487a:	d105      	bne.n	8004888 <HAL_ADC_ConfigChannel+0x460>
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	0e9b      	lsrs	r3, r3, #26
 8004882:	f003 031f 	and.w	r3, r3, #31
 8004886:	e014      	b.n	80048b2 <HAL_ADC_ConfigChannel+0x48a>
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800488e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004890:	fa93 f3a3 	rbit	r3, r3
 8004894:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004896:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004898:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800489c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80048a4:	2320      	movs	r3, #32
 80048a6:	e004      	b.n	80048b2 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 80048a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80048ac:	fab3 f383 	clz	r3, r3
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d106      	bne.n	80048c4 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2200      	movs	r2, #0
 80048bc:	2102      	movs	r1, #2
 80048be:	4618      	mov	r0, r3
 80048c0:	f7ff fa60 	bl	8003d84 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2103      	movs	r1, #3
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7ff f9c4 	bl	8003c58 <LL_ADC_GetOffsetChannel>
 80048d0:	4603      	mov	r3, r0
 80048d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10a      	bne.n	80048f0 <HAL_ADC_ConfigChannel+0x4c8>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2103      	movs	r1, #3
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7ff f9b9 	bl	8003c58 <LL_ADC_GetOffsetChannel>
 80048e6:	4603      	mov	r3, r0
 80048e8:	0e9b      	lsrs	r3, r3, #26
 80048ea:	f003 021f 	and.w	r2, r3, #31
 80048ee:	e017      	b.n	8004920 <HAL_ADC_ConfigChannel+0x4f8>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2103      	movs	r1, #3
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7ff f9ae 	bl	8003c58 <LL_ADC_GetOffsetChannel>
 80048fc:	4603      	mov	r3, r0
 80048fe:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004900:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004902:	fa93 f3a3 	rbit	r3, r3
 8004906:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800490a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800490c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004912:	2320      	movs	r3, #32
 8004914:	e003      	b.n	800491e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004916:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004918:	fab3 f383 	clz	r3, r3
 800491c:	b2db      	uxtb	r3, r3
 800491e:	461a      	mov	r2, r3
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004928:	2b00      	cmp	r3, #0
 800492a:	d105      	bne.n	8004938 <HAL_ADC_ConfigChannel+0x510>
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	0e9b      	lsrs	r3, r3, #26
 8004932:	f003 031f 	and.w	r3, r3, #31
 8004936:	e011      	b.n	800495c <HAL_ADC_ConfigChannel+0x534>
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800493e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004940:	fa93 f3a3 	rbit	r3, r3
 8004944:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004946:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004948:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800494a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8004950:	2320      	movs	r3, #32
 8004952:	e003      	b.n	800495c <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8004954:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004956:	fab3 f383 	clz	r3, r3
 800495a:	b2db      	uxtb	r3, r3
 800495c:	429a      	cmp	r2, r3
 800495e:	d14f      	bne.n	8004a00 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2200      	movs	r2, #0
 8004966:	2103      	movs	r1, #3
 8004968:	4618      	mov	r0, r3
 800496a:	f7ff fa0b 	bl	8003d84 <LL_ADC_SetOffsetState>
 800496e:	e047      	b.n	8004a00 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004976:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	069b      	lsls	r3, r3, #26
 8004980:	429a      	cmp	r2, r3
 8004982:	d107      	bne.n	8004994 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004992:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800499a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	069b      	lsls	r3, r3, #26
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d107      	bne.n	80049b8 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80049b6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	069b      	lsls	r3, r3, #26
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d107      	bne.n	80049dc <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80049da:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	069b      	lsls	r3, r3, #26
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d107      	bne.n	8004a00 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80049fe:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7ff facd 	bl	8003fa4 <LL_ADC_IsEnabled>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f040 8219 	bne.w	8004e44 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6818      	ldr	r0, [r3, #0]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	6819      	ldr	r1, [r3, #0]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	f7ff fa32 	bl	8003e88 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	4aa1      	ldr	r2, [pc, #644]	; (8004cb0 <HAL_ADC_ConfigChannel+0x888>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	f040 812e 	bne.w	8004c8c <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10b      	bne.n	8004a58 <HAL_ADC_ConfigChannel+0x630>
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	0e9b      	lsrs	r3, r3, #26
 8004a46:	3301      	adds	r3, #1
 8004a48:	f003 031f 	and.w	r3, r3, #31
 8004a4c:	2b09      	cmp	r3, #9
 8004a4e:	bf94      	ite	ls
 8004a50:	2301      	movls	r3, #1
 8004a52:	2300      	movhi	r3, #0
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	e019      	b.n	8004a8c <HAL_ADC_ConfigChannel+0x664>
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a60:	fa93 f3a3 	rbit	r3, r3
 8004a64:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a68:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8004a70:	2320      	movs	r3, #32
 8004a72:	e003      	b.n	8004a7c <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8004a74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a76:	fab3 f383 	clz	r3, r3
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	f003 031f 	and.w	r3, r3, #31
 8004a82:	2b09      	cmp	r3, #9
 8004a84:	bf94      	ite	ls
 8004a86:	2301      	movls	r3, #1
 8004a88:	2300      	movhi	r3, #0
 8004a8a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d079      	beq.n	8004b84 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d107      	bne.n	8004aac <HAL_ADC_ConfigChannel+0x684>
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	0e9b      	lsrs	r3, r3, #26
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	069b      	lsls	r3, r3, #26
 8004aa6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004aaa:	e015      	b.n	8004ad8 <HAL_ADC_ConfigChannel+0x6b0>
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ab4:	fa93 f3a3 	rbit	r3, r3
 8004ab8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004abc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004abe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d101      	bne.n	8004ac8 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004ac4:	2320      	movs	r3, #32
 8004ac6:	e003      	b.n	8004ad0 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004ac8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004aca:	fab3 f383 	clz	r3, r3
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	069b      	lsls	r3, r3, #26
 8004ad4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d109      	bne.n	8004af8 <HAL_ADC_ConfigChannel+0x6d0>
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	0e9b      	lsrs	r3, r3, #26
 8004aea:	3301      	adds	r3, #1
 8004aec:	f003 031f 	and.w	r3, r3, #31
 8004af0:	2101      	movs	r1, #1
 8004af2:	fa01 f303 	lsl.w	r3, r1, r3
 8004af6:	e017      	b.n	8004b28 <HAL_ADC_ConfigChannel+0x700>
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004afe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b00:	fa93 f3a3 	rbit	r3, r3
 8004b04:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b08:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004b0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004b10:	2320      	movs	r3, #32
 8004b12:	e003      	b.n	8004b1c <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8004b14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b16:	fab3 f383 	clz	r3, r3
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	f003 031f 	and.w	r3, r3, #31
 8004b22:	2101      	movs	r1, #1
 8004b24:	fa01 f303 	lsl.w	r3, r1, r3
 8004b28:	ea42 0103 	orr.w	r1, r2, r3
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10a      	bne.n	8004b4e <HAL_ADC_ConfigChannel+0x726>
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	0e9b      	lsrs	r3, r3, #26
 8004b3e:	3301      	adds	r3, #1
 8004b40:	f003 021f 	and.w	r2, r3, #31
 8004b44:	4613      	mov	r3, r2
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	4413      	add	r3, r2
 8004b4a:	051b      	lsls	r3, r3, #20
 8004b4c:	e018      	b.n	8004b80 <HAL_ADC_ConfigChannel+0x758>
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b56:	fa93 f3a3 	rbit	r3, r3
 8004b5a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8004b66:	2320      	movs	r3, #32
 8004b68:	e003      	b.n	8004b72 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8004b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b6c:	fab3 f383 	clz	r3, r3
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	3301      	adds	r3, #1
 8004b74:	f003 021f 	and.w	r2, r3, #31
 8004b78:	4613      	mov	r3, r2
 8004b7a:	005b      	lsls	r3, r3, #1
 8004b7c:	4413      	add	r3, r2
 8004b7e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b80:	430b      	orrs	r3, r1
 8004b82:	e07e      	b.n	8004c82 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d107      	bne.n	8004ba0 <HAL_ADC_ConfigChannel+0x778>
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	0e9b      	lsrs	r3, r3, #26
 8004b96:	3301      	adds	r3, #1
 8004b98:	069b      	lsls	r3, r3, #26
 8004b9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b9e:	e015      	b.n	8004bcc <HAL_ADC_ConfigChannel+0x7a4>
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba8:	fa93 f3a3 	rbit	r3, r3
 8004bac:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004bb8:	2320      	movs	r3, #32
 8004bba:	e003      	b.n	8004bc4 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bbe:	fab3 f383 	clz	r3, r3
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	069b      	lsls	r3, r3, #26
 8004bc8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d109      	bne.n	8004bec <HAL_ADC_ConfigChannel+0x7c4>
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	0e9b      	lsrs	r3, r3, #26
 8004bde:	3301      	adds	r3, #1
 8004be0:	f003 031f 	and.w	r3, r3, #31
 8004be4:	2101      	movs	r1, #1
 8004be6:	fa01 f303 	lsl.w	r3, r1, r3
 8004bea:	e017      	b.n	8004c1c <HAL_ADC_ConfigChannel+0x7f4>
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	fa93 f3a3 	rbit	r3, r3
 8004bf8:	61bb      	str	r3, [r7, #24]
  return result;
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004bfe:	6a3b      	ldr	r3, [r7, #32]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004c04:	2320      	movs	r3, #32
 8004c06:	e003      	b.n	8004c10 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	fab3 f383 	clz	r3, r3
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	3301      	adds	r3, #1
 8004c12:	f003 031f 	and.w	r3, r3, #31
 8004c16:	2101      	movs	r1, #1
 8004c18:	fa01 f303 	lsl.w	r3, r1, r3
 8004c1c:	ea42 0103 	orr.w	r1, r2, r3
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10d      	bne.n	8004c48 <HAL_ADC_ConfigChannel+0x820>
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	0e9b      	lsrs	r3, r3, #26
 8004c32:	3301      	adds	r3, #1
 8004c34:	f003 021f 	and.w	r2, r3, #31
 8004c38:	4613      	mov	r3, r2
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	4413      	add	r3, r2
 8004c3e:	3b1e      	subs	r3, #30
 8004c40:	051b      	lsls	r3, r3, #20
 8004c42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c46:	e01b      	b.n	8004c80 <HAL_ADC_ConfigChannel+0x858>
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	fa93 f3a3 	rbit	r3, r3
 8004c54:	60fb      	str	r3, [r7, #12]
  return result;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d101      	bne.n	8004c64 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004c60:	2320      	movs	r3, #32
 8004c62:	e003      	b.n	8004c6c <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	fab3 f383 	clz	r3, r3
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	f003 021f 	and.w	r2, r3, #31
 8004c72:	4613      	mov	r3, r2
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	4413      	add	r3, r2
 8004c78:	3b1e      	subs	r3, #30
 8004c7a:	051b      	lsls	r3, r3, #20
 8004c7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c80:	430b      	orrs	r3, r1
 8004c82:	683a      	ldr	r2, [r7, #0]
 8004c84:	6892      	ldr	r2, [r2, #8]
 8004c86:	4619      	mov	r1, r3
 8004c88:	f7ff f8d2 	bl	8003e30 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f280 80d7 	bge.w	8004e44 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a06      	ldr	r2, [pc, #24]	; (8004cb4 <HAL_ADC_ConfigChannel+0x88c>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d004      	beq.n	8004caa <HAL_ADC_ConfigChannel+0x882>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a04      	ldr	r2, [pc, #16]	; (8004cb8 <HAL_ADC_ConfigChannel+0x890>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d10a      	bne.n	8004cc0 <HAL_ADC_ConfigChannel+0x898>
 8004caa:	4b04      	ldr	r3, [pc, #16]	; (8004cbc <HAL_ADC_ConfigChannel+0x894>)
 8004cac:	e009      	b.n	8004cc2 <HAL_ADC_ConfigChannel+0x89a>
 8004cae:	bf00      	nop
 8004cb0:	47ff0000 	.word	0x47ff0000
 8004cb4:	40022000 	.word	0x40022000
 8004cb8:	40022100 	.word	0x40022100
 8004cbc:	40022300 	.word	0x40022300
 8004cc0:	4b65      	ldr	r3, [pc, #404]	; (8004e58 <HAL_ADC_ConfigChannel+0xa30>)
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7fe ff88 	bl	8003bd8 <LL_ADC_GetCommonPathInternalCh>
 8004cc8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a62      	ldr	r2, [pc, #392]	; (8004e5c <HAL_ADC_ConfigChannel+0xa34>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d004      	beq.n	8004ce0 <HAL_ADC_ConfigChannel+0x8b8>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a61      	ldr	r2, [pc, #388]	; (8004e60 <HAL_ADC_ConfigChannel+0xa38>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d10e      	bne.n	8004cfe <HAL_ADC_ConfigChannel+0x8d6>
 8004ce0:	485e      	ldr	r0, [pc, #376]	; (8004e5c <HAL_ADC_ConfigChannel+0xa34>)
 8004ce2:	f7ff f95f 	bl	8003fa4 <LL_ADC_IsEnabled>
 8004ce6:	4604      	mov	r4, r0
 8004ce8:	485d      	ldr	r0, [pc, #372]	; (8004e60 <HAL_ADC_ConfigChannel+0xa38>)
 8004cea:	f7ff f95b 	bl	8003fa4 <LL_ADC_IsEnabled>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	4323      	orrs	r3, r4
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	bf0c      	ite	eq
 8004cf6:	2301      	moveq	r3, #1
 8004cf8:	2300      	movne	r3, #0
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	e008      	b.n	8004d10 <HAL_ADC_ConfigChannel+0x8e8>
 8004cfe:	4859      	ldr	r0, [pc, #356]	; (8004e64 <HAL_ADC_ConfigChannel+0xa3c>)
 8004d00:	f7ff f950 	bl	8003fa4 <LL_ADC_IsEnabled>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	bf0c      	ite	eq
 8004d0a:	2301      	moveq	r3, #1
 8004d0c:	2300      	movne	r3, #0
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 8084 	beq.w	8004e1e <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a53      	ldr	r2, [pc, #332]	; (8004e68 <HAL_ADC_ConfigChannel+0xa40>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d132      	bne.n	8004d86 <HAL_ADC_ConfigChannel+0x95e>
 8004d20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d12c      	bne.n	8004d86 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a4c      	ldr	r2, [pc, #304]	; (8004e64 <HAL_ADC_ConfigChannel+0xa3c>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	f040 8086 	bne.w	8004e44 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a47      	ldr	r2, [pc, #284]	; (8004e5c <HAL_ADC_ConfigChannel+0xa34>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d004      	beq.n	8004d4c <HAL_ADC_ConfigChannel+0x924>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a46      	ldr	r2, [pc, #280]	; (8004e60 <HAL_ADC_ConfigChannel+0xa38>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d101      	bne.n	8004d50 <HAL_ADC_ConfigChannel+0x928>
 8004d4c:	4a47      	ldr	r2, [pc, #284]	; (8004e6c <HAL_ADC_ConfigChannel+0xa44>)
 8004d4e:	e000      	b.n	8004d52 <HAL_ADC_ConfigChannel+0x92a>
 8004d50:	4a41      	ldr	r2, [pc, #260]	; (8004e58 <HAL_ADC_ConfigChannel+0xa30>)
 8004d52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d56:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	f7fe ff28 	bl	8003bb2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d62:	4b43      	ldr	r3, [pc, #268]	; (8004e70 <HAL_ADC_ConfigChannel+0xa48>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	099b      	lsrs	r3, r3, #6
 8004d68:	4a42      	ldr	r2, [pc, #264]	; (8004e74 <HAL_ADC_ConfigChannel+0xa4c>)
 8004d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6e:	099b      	lsrs	r3, r3, #6
 8004d70:	3301      	adds	r3, #1
 8004d72:	005b      	lsls	r3, r3, #1
 8004d74:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004d76:	e002      	b.n	8004d7e <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1f9      	bne.n	8004d78 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d84:	e05e      	b.n	8004e44 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a3b      	ldr	r2, [pc, #236]	; (8004e78 <HAL_ADC_ConfigChannel+0xa50>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d120      	bne.n	8004dd2 <HAL_ADC_ConfigChannel+0x9aa>
 8004d90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d11a      	bne.n	8004dd2 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a30      	ldr	r2, [pc, #192]	; (8004e64 <HAL_ADC_ConfigChannel+0xa3c>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d14e      	bne.n	8004e44 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a2c      	ldr	r2, [pc, #176]	; (8004e5c <HAL_ADC_ConfigChannel+0xa34>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d004      	beq.n	8004dba <HAL_ADC_ConfigChannel+0x992>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a2a      	ldr	r2, [pc, #168]	; (8004e60 <HAL_ADC_ConfigChannel+0xa38>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d101      	bne.n	8004dbe <HAL_ADC_ConfigChannel+0x996>
 8004dba:	4a2c      	ldr	r2, [pc, #176]	; (8004e6c <HAL_ADC_ConfigChannel+0xa44>)
 8004dbc:	e000      	b.n	8004dc0 <HAL_ADC_ConfigChannel+0x998>
 8004dbe:	4a26      	ldr	r2, [pc, #152]	; (8004e58 <HAL_ADC_ConfigChannel+0xa30>)
 8004dc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004dc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dc8:	4619      	mov	r1, r3
 8004dca:	4610      	mov	r0, r2
 8004dcc:	f7fe fef1 	bl	8003bb2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004dd0:	e038      	b.n	8004e44 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a29      	ldr	r2, [pc, #164]	; (8004e7c <HAL_ADC_ConfigChannel+0xa54>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d133      	bne.n	8004e44 <HAL_ADC_ConfigChannel+0xa1c>
 8004ddc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004de0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d12d      	bne.n	8004e44 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a1d      	ldr	r2, [pc, #116]	; (8004e64 <HAL_ADC_ConfigChannel+0xa3c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d128      	bne.n	8004e44 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a19      	ldr	r2, [pc, #100]	; (8004e5c <HAL_ADC_ConfigChannel+0xa34>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d004      	beq.n	8004e06 <HAL_ADC_ConfigChannel+0x9de>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a17      	ldr	r2, [pc, #92]	; (8004e60 <HAL_ADC_ConfigChannel+0xa38>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d101      	bne.n	8004e0a <HAL_ADC_ConfigChannel+0x9e2>
 8004e06:	4a19      	ldr	r2, [pc, #100]	; (8004e6c <HAL_ADC_ConfigChannel+0xa44>)
 8004e08:	e000      	b.n	8004e0c <HAL_ADC_ConfigChannel+0x9e4>
 8004e0a:	4a13      	ldr	r2, [pc, #76]	; (8004e58 <HAL_ADC_ConfigChannel+0xa30>)
 8004e0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e14:	4619      	mov	r1, r3
 8004e16:	4610      	mov	r0, r2
 8004e18:	f7fe fecb 	bl	8003bb2 <LL_ADC_SetCommonPathInternalCh>
 8004e1c:	e012      	b.n	8004e44 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e22:	f043 0220 	orr.w	r2, r3, #32
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004e30:	e008      	b.n	8004e44 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e36:	f043 0220 	orr.w	r2, r3, #32
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004e4c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	37e4      	adds	r7, #228	; 0xe4
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd90      	pop	{r4, r7, pc}
 8004e58:	58026300 	.word	0x58026300
 8004e5c:	40022000 	.word	0x40022000
 8004e60:	40022100 	.word	0x40022100
 8004e64:	58026000 	.word	0x58026000
 8004e68:	c7520000 	.word	0xc7520000
 8004e6c:	40022300 	.word	0x40022300
 8004e70:	24000000 	.word	0x24000000
 8004e74:	053e2d63 	.word	0x053e2d63
 8004e78:	c3210000 	.word	0xc3210000
 8004e7c:	cb840000 	.word	0xcb840000

08004e80 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a6c      	ldr	r2, [pc, #432]	; (8005040 <ADC_ConfigureBoostMode+0x1c0>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d004      	beq.n	8004e9c <ADC_ConfigureBoostMode+0x1c>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a6b      	ldr	r2, [pc, #428]	; (8005044 <ADC_ConfigureBoostMode+0x1c4>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d109      	bne.n	8004eb0 <ADC_ConfigureBoostMode+0x30>
 8004e9c:	4b6a      	ldr	r3, [pc, #424]	; (8005048 <ADC_ConfigureBoostMode+0x1c8>)
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	bf14      	ite	ne
 8004ea8:	2301      	movne	r3, #1
 8004eaa:	2300      	moveq	r3, #0
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	e008      	b.n	8004ec2 <ADC_ConfigureBoostMode+0x42>
 8004eb0:	4b66      	ldr	r3, [pc, #408]	; (800504c <ADC_ConfigureBoostMode+0x1cc>)
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	bf14      	ite	ne
 8004ebc:	2301      	movne	r3, #1
 8004ebe:	2300      	moveq	r3, #0
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d01c      	beq.n	8004f00 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004ec6:	f005 fcab 	bl	800a820 <HAL_RCC_GetHCLKFreq>
 8004eca:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ed4:	d010      	beq.n	8004ef8 <ADC_ConfigureBoostMode+0x78>
 8004ed6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004eda:	d873      	bhi.n	8004fc4 <ADC_ConfigureBoostMode+0x144>
 8004edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ee0:	d002      	beq.n	8004ee8 <ADC_ConfigureBoostMode+0x68>
 8004ee2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ee6:	d16d      	bne.n	8004fc4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	0c1b      	lsrs	r3, r3, #16
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef4:	60fb      	str	r3, [r7, #12]
        break;
 8004ef6:	e068      	b.n	8004fca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	089b      	lsrs	r3, r3, #2
 8004efc:	60fb      	str	r3, [r7, #12]
        break;
 8004efe:	e064      	b.n	8004fca <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004f00:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004f04:	f04f 0100 	mov.w	r1, #0
 8004f08:	f006 fe86 	bl	800bc18 <HAL_RCCEx_GetPeriphCLKFreq>
 8004f0c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004f16:	d051      	beq.n	8004fbc <ADC_ConfigureBoostMode+0x13c>
 8004f18:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004f1c:	d854      	bhi.n	8004fc8 <ADC_ConfigureBoostMode+0x148>
 8004f1e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004f22:	d047      	beq.n	8004fb4 <ADC_ConfigureBoostMode+0x134>
 8004f24:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004f28:	d84e      	bhi.n	8004fc8 <ADC_ConfigureBoostMode+0x148>
 8004f2a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004f2e:	d03d      	beq.n	8004fac <ADC_ConfigureBoostMode+0x12c>
 8004f30:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004f34:	d848      	bhi.n	8004fc8 <ADC_ConfigureBoostMode+0x148>
 8004f36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f3a:	d033      	beq.n	8004fa4 <ADC_ConfigureBoostMode+0x124>
 8004f3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f40:	d842      	bhi.n	8004fc8 <ADC_ConfigureBoostMode+0x148>
 8004f42:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004f46:	d029      	beq.n	8004f9c <ADC_ConfigureBoostMode+0x11c>
 8004f48:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004f4c:	d83c      	bhi.n	8004fc8 <ADC_ConfigureBoostMode+0x148>
 8004f4e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004f52:	d01a      	beq.n	8004f8a <ADC_ConfigureBoostMode+0x10a>
 8004f54:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004f58:	d836      	bhi.n	8004fc8 <ADC_ConfigureBoostMode+0x148>
 8004f5a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004f5e:	d014      	beq.n	8004f8a <ADC_ConfigureBoostMode+0x10a>
 8004f60:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004f64:	d830      	bhi.n	8004fc8 <ADC_ConfigureBoostMode+0x148>
 8004f66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f6a:	d00e      	beq.n	8004f8a <ADC_ConfigureBoostMode+0x10a>
 8004f6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f70:	d82a      	bhi.n	8004fc8 <ADC_ConfigureBoostMode+0x148>
 8004f72:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004f76:	d008      	beq.n	8004f8a <ADC_ConfigureBoostMode+0x10a>
 8004f78:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004f7c:	d824      	bhi.n	8004fc8 <ADC_ConfigureBoostMode+0x148>
 8004f7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f82:	d002      	beq.n	8004f8a <ADC_ConfigureBoostMode+0x10a>
 8004f84:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f88:	d11e      	bne.n	8004fc8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	0c9b      	lsrs	r3, r3, #18
 8004f90:	005b      	lsls	r3, r3, #1
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f98:	60fb      	str	r3, [r7, #12]
        break;
 8004f9a:	e016      	b.n	8004fca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	091b      	lsrs	r3, r3, #4
 8004fa0:	60fb      	str	r3, [r7, #12]
        break;
 8004fa2:	e012      	b.n	8004fca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	095b      	lsrs	r3, r3, #5
 8004fa8:	60fb      	str	r3, [r7, #12]
        break;
 8004faa:	e00e      	b.n	8004fca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	099b      	lsrs	r3, r3, #6
 8004fb0:	60fb      	str	r3, [r7, #12]
        break;
 8004fb2:	e00a      	b.n	8004fca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	09db      	lsrs	r3, r3, #7
 8004fb8:	60fb      	str	r3, [r7, #12]
        break;
 8004fba:	e006      	b.n	8004fca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	0a1b      	lsrs	r3, r3, #8
 8004fc0:	60fb      	str	r3, [r7, #12]
        break;
 8004fc2:	e002      	b.n	8004fca <ADC_ConfigureBoostMode+0x14a>
        break;
 8004fc4:	bf00      	nop
 8004fc6:	e000      	b.n	8004fca <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004fc8:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	085b      	lsrs	r3, r3, #1
 8004fce:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4a1f      	ldr	r2, [pc, #124]	; (8005050 <ADC_ConfigureBoostMode+0x1d0>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d808      	bhi.n	8004fea <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689a      	ldr	r2, [r3, #8]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004fe6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004fe8:	e025      	b.n	8005036 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	4a19      	ldr	r2, [pc, #100]	; (8005054 <ADC_ConfigureBoostMode+0x1d4>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d80a      	bhi.n	8005008 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005004:	609a      	str	r2, [r3, #8]
}
 8005006:	e016      	b.n	8005036 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	4a13      	ldr	r2, [pc, #76]	; (8005058 <ADC_ConfigureBoostMode+0x1d8>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d80a      	bhi.n	8005026 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005022:	609a      	str	r2, [r3, #8]
}
 8005024:	e007      	b.n	8005036 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005034:	609a      	str	r2, [r3, #8]
}
 8005036:	bf00      	nop
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	40022000 	.word	0x40022000
 8005044:	40022100 	.word	0x40022100
 8005048:	40022300 	.word	0x40022300
 800504c:	58026300 	.word	0x58026300
 8005050:	005f5e10 	.word	0x005f5e10
 8005054:	00bebc20 	.word	0x00bebc20
 8005058:	017d7840 	.word	0x017d7840

0800505c <LL_ADC_IsEnabled>:
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	2b01      	cmp	r3, #1
 800506e:	d101      	bne.n	8005074 <LL_ADC_IsEnabled+0x18>
 8005070:	2301      	movs	r3, #1
 8005072:	e000      	b.n	8005076 <LL_ADC_IsEnabled+0x1a>
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <LL_ADC_REG_IsConversionOngoing>:
{
 8005082:	b480      	push	{r7}
 8005084:	b083      	sub	sp, #12
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f003 0304 	and.w	r3, r3, #4
 8005092:	2b04      	cmp	r3, #4
 8005094:	d101      	bne.n	800509a <LL_ADC_REG_IsConversionOngoing+0x18>
 8005096:	2301      	movs	r3, #1
 8005098:	e000      	b.n	800509c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80050a8:	b590      	push	{r4, r7, lr}
 80050aa:	b0a3      	sub	sp, #140	; 0x8c
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050b2:	2300      	movs	r3, #0
 80050b4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d101      	bne.n	80050c6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80050c2:	2302      	movs	r3, #2
 80050c4:	e0c1      	b.n	800524a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80050ce:	2300      	movs	r3, #0
 80050d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80050d2:	2300      	movs	r3, #0
 80050d4:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a5e      	ldr	r2, [pc, #376]	; (8005254 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d102      	bne.n	80050e6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80050e0:	4b5d      	ldr	r3, [pc, #372]	; (8005258 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	e001      	b.n	80050ea <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80050e6:	2300      	movs	r3, #0
 80050e8:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10b      	bne.n	8005108 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050f4:	f043 0220 	orr.w	r2, r3, #32
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e0a0      	b.n	800524a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4618      	mov	r0, r3
 800510c:	f7ff ffb9 	bl	8005082 <LL_ADC_REG_IsConversionOngoing>
 8005110:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4618      	mov	r0, r3
 800511a:	f7ff ffb2 	bl	8005082 <LL_ADC_REG_IsConversionOngoing>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	f040 8081 	bne.w	8005228 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005126:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800512a:	2b00      	cmp	r3, #0
 800512c:	d17c      	bne.n	8005228 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a48      	ldr	r2, [pc, #288]	; (8005254 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d004      	beq.n	8005142 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a46      	ldr	r2, [pc, #280]	; (8005258 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d101      	bne.n	8005146 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8005142:	4b46      	ldr	r3, [pc, #280]	; (800525c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005144:	e000      	b.n	8005148 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8005146:	4b46      	ldr	r3, [pc, #280]	; (8005260 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005148:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d039      	beq.n	80051c6 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005152:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	431a      	orrs	r2, r3
 8005160:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005162:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a3a      	ldr	r2, [pc, #232]	; (8005254 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d004      	beq.n	8005178 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a39      	ldr	r2, [pc, #228]	; (8005258 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d10e      	bne.n	8005196 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005178:	4836      	ldr	r0, [pc, #216]	; (8005254 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800517a:	f7ff ff6f 	bl	800505c <LL_ADC_IsEnabled>
 800517e:	4604      	mov	r4, r0
 8005180:	4835      	ldr	r0, [pc, #212]	; (8005258 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005182:	f7ff ff6b 	bl	800505c <LL_ADC_IsEnabled>
 8005186:	4603      	mov	r3, r0
 8005188:	4323      	orrs	r3, r4
 800518a:	2b00      	cmp	r3, #0
 800518c:	bf0c      	ite	eq
 800518e:	2301      	moveq	r3, #1
 8005190:	2300      	movne	r3, #0
 8005192:	b2db      	uxtb	r3, r3
 8005194:	e008      	b.n	80051a8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8005196:	4833      	ldr	r0, [pc, #204]	; (8005264 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005198:	f7ff ff60 	bl	800505c <LL_ADC_IsEnabled>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	bf0c      	ite	eq
 80051a2:	2301      	moveq	r3, #1
 80051a4:	2300      	movne	r3, #0
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d047      	beq.n	800523c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80051ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80051ae:	689a      	ldr	r2, [r3, #8]
 80051b0:	4b2d      	ldr	r3, [pc, #180]	; (8005268 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80051b2:	4013      	ands	r3, r2
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	6811      	ldr	r1, [r2, #0]
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	6892      	ldr	r2, [r2, #8]
 80051bc:	430a      	orrs	r2, r1
 80051be:	431a      	orrs	r2, r3
 80051c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80051c2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80051c4:	e03a      	b.n	800523c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80051c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80051d0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a1f      	ldr	r2, [pc, #124]	; (8005254 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d004      	beq.n	80051e6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a1d      	ldr	r2, [pc, #116]	; (8005258 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d10e      	bne.n	8005204 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80051e6:	481b      	ldr	r0, [pc, #108]	; (8005254 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80051e8:	f7ff ff38 	bl	800505c <LL_ADC_IsEnabled>
 80051ec:	4604      	mov	r4, r0
 80051ee:	481a      	ldr	r0, [pc, #104]	; (8005258 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80051f0:	f7ff ff34 	bl	800505c <LL_ADC_IsEnabled>
 80051f4:	4603      	mov	r3, r0
 80051f6:	4323      	orrs	r3, r4
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	bf0c      	ite	eq
 80051fc:	2301      	moveq	r3, #1
 80051fe:	2300      	movne	r3, #0
 8005200:	b2db      	uxtb	r3, r3
 8005202:	e008      	b.n	8005216 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8005204:	4817      	ldr	r0, [pc, #92]	; (8005264 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005206:	f7ff ff29 	bl	800505c <LL_ADC_IsEnabled>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	bf0c      	ite	eq
 8005210:	2301      	moveq	r3, #1
 8005212:	2300      	movne	r3, #0
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d010      	beq.n	800523c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800521a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800521c:	689a      	ldr	r2, [r3, #8]
 800521e:	4b12      	ldr	r3, [pc, #72]	; (8005268 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005220:	4013      	ands	r3, r2
 8005222:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005224:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005226:	e009      	b.n	800523c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800522c:	f043 0220 	orr.w	r2, r3, #32
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800523a:	e000      	b.n	800523e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800523c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005246:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800524a:	4618      	mov	r0, r3
 800524c:	378c      	adds	r7, #140	; 0x8c
 800524e:	46bd      	mov	sp, r7
 8005250:	bd90      	pop	{r4, r7, pc}
 8005252:	bf00      	nop
 8005254:	40022000 	.word	0x40022000
 8005258:	40022100 	.word	0x40022100
 800525c:	40022300 	.word	0x40022300
 8005260:	58026300 	.word	0x58026300
 8005264:	58026000 	.word	0x58026000
 8005268:	fffff0e0 	.word	0xfffff0e0

0800526c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f003 0307 	and.w	r3, r3, #7
 800527a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800527c:	4b0b      	ldr	r3, [pc, #44]	; (80052ac <__NVIC_SetPriorityGrouping+0x40>)
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005288:	4013      	ands	r3, r2
 800528a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005294:	4b06      	ldr	r3, [pc, #24]	; (80052b0 <__NVIC_SetPriorityGrouping+0x44>)
 8005296:	4313      	orrs	r3, r2
 8005298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800529a:	4a04      	ldr	r2, [pc, #16]	; (80052ac <__NVIC_SetPriorityGrouping+0x40>)
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	60d3      	str	r3, [r2, #12]
}
 80052a0:	bf00      	nop
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	e000ed00 	.word	0xe000ed00
 80052b0:	05fa0000 	.word	0x05fa0000

080052b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80052b4:	b480      	push	{r7}
 80052b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052b8:	4b04      	ldr	r3, [pc, #16]	; (80052cc <__NVIC_GetPriorityGrouping+0x18>)
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	0a1b      	lsrs	r3, r3, #8
 80052be:	f003 0307 	and.w	r3, r3, #7
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	e000ed00 	.word	0xe000ed00

080052d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	4603      	mov	r3, r0
 80052d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80052da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	db0b      	blt.n	80052fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052e2:	88fb      	ldrh	r3, [r7, #6]
 80052e4:	f003 021f 	and.w	r2, r3, #31
 80052e8:	4907      	ldr	r1, [pc, #28]	; (8005308 <__NVIC_EnableIRQ+0x38>)
 80052ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052ee:	095b      	lsrs	r3, r3, #5
 80052f0:	2001      	movs	r0, #1
 80052f2:	fa00 f202 	lsl.w	r2, r0, r2
 80052f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80052fa:	bf00      	nop
 80052fc:	370c      	adds	r7, #12
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	e000e100 	.word	0xe000e100

0800530c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	4603      	mov	r3, r0
 8005314:	6039      	str	r1, [r7, #0]
 8005316:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005318:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800531c:	2b00      	cmp	r3, #0
 800531e:	db0a      	blt.n	8005336 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	b2da      	uxtb	r2, r3
 8005324:	490c      	ldr	r1, [pc, #48]	; (8005358 <__NVIC_SetPriority+0x4c>)
 8005326:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800532a:	0112      	lsls	r2, r2, #4
 800532c:	b2d2      	uxtb	r2, r2
 800532e:	440b      	add	r3, r1
 8005330:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005334:	e00a      	b.n	800534c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	b2da      	uxtb	r2, r3
 800533a:	4908      	ldr	r1, [pc, #32]	; (800535c <__NVIC_SetPriority+0x50>)
 800533c:	88fb      	ldrh	r3, [r7, #6]
 800533e:	f003 030f 	and.w	r3, r3, #15
 8005342:	3b04      	subs	r3, #4
 8005344:	0112      	lsls	r2, r2, #4
 8005346:	b2d2      	uxtb	r2, r2
 8005348:	440b      	add	r3, r1
 800534a:	761a      	strb	r2, [r3, #24]
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr
 8005358:	e000e100 	.word	0xe000e100
 800535c:	e000ed00 	.word	0xe000ed00

08005360 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005360:	b480      	push	{r7}
 8005362:	b089      	sub	sp, #36	; 0x24
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f003 0307 	and.w	r3, r3, #7
 8005372:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	f1c3 0307 	rsb	r3, r3, #7
 800537a:	2b04      	cmp	r3, #4
 800537c:	bf28      	it	cs
 800537e:	2304      	movcs	r3, #4
 8005380:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	3304      	adds	r3, #4
 8005386:	2b06      	cmp	r3, #6
 8005388:	d902      	bls.n	8005390 <NVIC_EncodePriority+0x30>
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	3b03      	subs	r3, #3
 800538e:	e000      	b.n	8005392 <NVIC_EncodePriority+0x32>
 8005390:	2300      	movs	r3, #0
 8005392:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005394:	f04f 32ff 	mov.w	r2, #4294967295
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	fa02 f303 	lsl.w	r3, r2, r3
 800539e:	43da      	mvns	r2, r3
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	401a      	ands	r2, r3
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053a8:	f04f 31ff 	mov.w	r1, #4294967295
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	fa01 f303 	lsl.w	r3, r1, r3
 80053b2:	43d9      	mvns	r1, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053b8:	4313      	orrs	r3, r2
         );
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3724      	adds	r7, #36	; 0x24
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
	...

080053c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	3b01      	subs	r3, #1
 80053d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053d8:	d301      	bcc.n	80053de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80053da:	2301      	movs	r3, #1
 80053dc:	e00f      	b.n	80053fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80053de:	4a0a      	ldr	r2, [pc, #40]	; (8005408 <SysTick_Config+0x40>)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	3b01      	subs	r3, #1
 80053e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80053e6:	210f      	movs	r1, #15
 80053e8:	f04f 30ff 	mov.w	r0, #4294967295
 80053ec:	f7ff ff8e 	bl	800530c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053f0:	4b05      	ldr	r3, [pc, #20]	; (8005408 <SysTick_Config+0x40>)
 80053f2:	2200      	movs	r2, #0
 80053f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80053f6:	4b04      	ldr	r3, [pc, #16]	; (8005408 <SysTick_Config+0x40>)
 80053f8:	2207      	movs	r2, #7
 80053fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	e000e010 	.word	0xe000e010

0800540c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7ff ff29 	bl	800526c <__NVIC_SetPriorityGrouping>
}
 800541a:	bf00      	nop
 800541c:	3708      	adds	r7, #8
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005422:	b580      	push	{r7, lr}
 8005424:	b086      	sub	sp, #24
 8005426:	af00      	add	r7, sp, #0
 8005428:	4603      	mov	r3, r0
 800542a:	60b9      	str	r1, [r7, #8]
 800542c:	607a      	str	r2, [r7, #4]
 800542e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005430:	f7ff ff40 	bl	80052b4 <__NVIC_GetPriorityGrouping>
 8005434:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	68b9      	ldr	r1, [r7, #8]
 800543a:	6978      	ldr	r0, [r7, #20]
 800543c:	f7ff ff90 	bl	8005360 <NVIC_EncodePriority>
 8005440:	4602      	mov	r2, r0
 8005442:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005446:	4611      	mov	r1, r2
 8005448:	4618      	mov	r0, r3
 800544a:	f7ff ff5f 	bl	800530c <__NVIC_SetPriority>
}
 800544e:	bf00      	nop
 8005450:	3718      	adds	r7, #24
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b082      	sub	sp, #8
 800545a:	af00      	add	r7, sp, #0
 800545c:	4603      	mov	r3, r0
 800545e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005460:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005464:	4618      	mov	r0, r3
 8005466:	f7ff ff33 	bl	80052d0 <__NVIC_EnableIRQ>
}
 800546a:	bf00      	nop
 800546c:	3708      	adds	r7, #8
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005472:	b580      	push	{r7, lr}
 8005474:	b082      	sub	sp, #8
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f7ff ffa4 	bl	80053c8 <SysTick_Config>
 8005480:	4603      	mov	r3, r0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3708      	adds	r7, #8
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
	...

0800548c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005494:	f7fe fb34 	bl	8003b00 <HAL_GetTick>
 8005498:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d101      	bne.n	80054a4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e312      	b.n	8005aca <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a66      	ldr	r2, [pc, #408]	; (8005644 <HAL_DMA_Init+0x1b8>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d04a      	beq.n	8005544 <HAL_DMA_Init+0xb8>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a65      	ldr	r2, [pc, #404]	; (8005648 <HAL_DMA_Init+0x1bc>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d045      	beq.n	8005544 <HAL_DMA_Init+0xb8>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a63      	ldr	r2, [pc, #396]	; (800564c <HAL_DMA_Init+0x1c0>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d040      	beq.n	8005544 <HAL_DMA_Init+0xb8>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a62      	ldr	r2, [pc, #392]	; (8005650 <HAL_DMA_Init+0x1c4>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d03b      	beq.n	8005544 <HAL_DMA_Init+0xb8>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a60      	ldr	r2, [pc, #384]	; (8005654 <HAL_DMA_Init+0x1c8>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d036      	beq.n	8005544 <HAL_DMA_Init+0xb8>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a5f      	ldr	r2, [pc, #380]	; (8005658 <HAL_DMA_Init+0x1cc>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d031      	beq.n	8005544 <HAL_DMA_Init+0xb8>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a5d      	ldr	r2, [pc, #372]	; (800565c <HAL_DMA_Init+0x1d0>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d02c      	beq.n	8005544 <HAL_DMA_Init+0xb8>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a5c      	ldr	r2, [pc, #368]	; (8005660 <HAL_DMA_Init+0x1d4>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d027      	beq.n	8005544 <HAL_DMA_Init+0xb8>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a5a      	ldr	r2, [pc, #360]	; (8005664 <HAL_DMA_Init+0x1d8>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d022      	beq.n	8005544 <HAL_DMA_Init+0xb8>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a59      	ldr	r2, [pc, #356]	; (8005668 <HAL_DMA_Init+0x1dc>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d01d      	beq.n	8005544 <HAL_DMA_Init+0xb8>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a57      	ldr	r2, [pc, #348]	; (800566c <HAL_DMA_Init+0x1e0>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d018      	beq.n	8005544 <HAL_DMA_Init+0xb8>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a56      	ldr	r2, [pc, #344]	; (8005670 <HAL_DMA_Init+0x1e4>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d013      	beq.n	8005544 <HAL_DMA_Init+0xb8>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a54      	ldr	r2, [pc, #336]	; (8005674 <HAL_DMA_Init+0x1e8>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d00e      	beq.n	8005544 <HAL_DMA_Init+0xb8>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a53      	ldr	r2, [pc, #332]	; (8005678 <HAL_DMA_Init+0x1ec>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d009      	beq.n	8005544 <HAL_DMA_Init+0xb8>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a51      	ldr	r2, [pc, #324]	; (800567c <HAL_DMA_Init+0x1f0>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d004      	beq.n	8005544 <HAL_DMA_Init+0xb8>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a50      	ldr	r2, [pc, #320]	; (8005680 <HAL_DMA_Init+0x1f4>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d101      	bne.n	8005548 <HAL_DMA_Init+0xbc>
 8005544:	2301      	movs	r3, #1
 8005546:	e000      	b.n	800554a <HAL_DMA_Init+0xbe>
 8005548:	2300      	movs	r3, #0
 800554a:	2b00      	cmp	r3, #0
 800554c:	f000 813c 	beq.w	80057c8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a37      	ldr	r2, [pc, #220]	; (8005644 <HAL_DMA_Init+0x1b8>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d04a      	beq.n	8005600 <HAL_DMA_Init+0x174>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a36      	ldr	r2, [pc, #216]	; (8005648 <HAL_DMA_Init+0x1bc>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d045      	beq.n	8005600 <HAL_DMA_Init+0x174>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a34      	ldr	r2, [pc, #208]	; (800564c <HAL_DMA_Init+0x1c0>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d040      	beq.n	8005600 <HAL_DMA_Init+0x174>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a33      	ldr	r2, [pc, #204]	; (8005650 <HAL_DMA_Init+0x1c4>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d03b      	beq.n	8005600 <HAL_DMA_Init+0x174>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a31      	ldr	r2, [pc, #196]	; (8005654 <HAL_DMA_Init+0x1c8>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d036      	beq.n	8005600 <HAL_DMA_Init+0x174>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a30      	ldr	r2, [pc, #192]	; (8005658 <HAL_DMA_Init+0x1cc>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d031      	beq.n	8005600 <HAL_DMA_Init+0x174>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a2e      	ldr	r2, [pc, #184]	; (800565c <HAL_DMA_Init+0x1d0>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d02c      	beq.n	8005600 <HAL_DMA_Init+0x174>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a2d      	ldr	r2, [pc, #180]	; (8005660 <HAL_DMA_Init+0x1d4>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d027      	beq.n	8005600 <HAL_DMA_Init+0x174>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a2b      	ldr	r2, [pc, #172]	; (8005664 <HAL_DMA_Init+0x1d8>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d022      	beq.n	8005600 <HAL_DMA_Init+0x174>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a2a      	ldr	r2, [pc, #168]	; (8005668 <HAL_DMA_Init+0x1dc>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d01d      	beq.n	8005600 <HAL_DMA_Init+0x174>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a28      	ldr	r2, [pc, #160]	; (800566c <HAL_DMA_Init+0x1e0>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d018      	beq.n	8005600 <HAL_DMA_Init+0x174>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a27      	ldr	r2, [pc, #156]	; (8005670 <HAL_DMA_Init+0x1e4>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d013      	beq.n	8005600 <HAL_DMA_Init+0x174>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a25      	ldr	r2, [pc, #148]	; (8005674 <HAL_DMA_Init+0x1e8>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d00e      	beq.n	8005600 <HAL_DMA_Init+0x174>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a24      	ldr	r2, [pc, #144]	; (8005678 <HAL_DMA_Init+0x1ec>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d009      	beq.n	8005600 <HAL_DMA_Init+0x174>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a22      	ldr	r2, [pc, #136]	; (800567c <HAL_DMA_Init+0x1f0>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d004      	beq.n	8005600 <HAL_DMA_Init+0x174>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a21      	ldr	r2, [pc, #132]	; (8005680 <HAL_DMA_Init+0x1f4>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d108      	bne.n	8005612 <HAL_DMA_Init+0x186>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 0201 	bic.w	r2, r2, #1
 800560e:	601a      	str	r2, [r3, #0]
 8005610:	e007      	b.n	8005622 <HAL_DMA_Init+0x196>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 0201 	bic.w	r2, r2, #1
 8005620:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005622:	e02f      	b.n	8005684 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005624:	f7fe fa6c 	bl	8003b00 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b05      	cmp	r3, #5
 8005630:	d928      	bls.n	8005684 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2220      	movs	r2, #32
 8005636:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2203      	movs	r2, #3
 800563c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e242      	b.n	8005aca <HAL_DMA_Init+0x63e>
 8005644:	40020010 	.word	0x40020010
 8005648:	40020028 	.word	0x40020028
 800564c:	40020040 	.word	0x40020040
 8005650:	40020058 	.word	0x40020058
 8005654:	40020070 	.word	0x40020070
 8005658:	40020088 	.word	0x40020088
 800565c:	400200a0 	.word	0x400200a0
 8005660:	400200b8 	.word	0x400200b8
 8005664:	40020410 	.word	0x40020410
 8005668:	40020428 	.word	0x40020428
 800566c:	40020440 	.word	0x40020440
 8005670:	40020458 	.word	0x40020458
 8005674:	40020470 	.word	0x40020470
 8005678:	40020488 	.word	0x40020488
 800567c:	400204a0 	.word	0x400204a0
 8005680:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1c8      	bne.n	8005624 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	4b83      	ldr	r3, [pc, #524]	; (80058ac <HAL_DMA_Init+0x420>)
 800569e:	4013      	ands	r3, r2
 80056a0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80056aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	699b      	ldr	r3, [r3, #24]
 80056bc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056c2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a1b      	ldr	r3, [r3, #32]
 80056c8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	2b04      	cmp	r3, #4
 80056d6:	d107      	bne.n	80056e8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e0:	4313      	orrs	r3, r2
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	2b28      	cmp	r3, #40	; 0x28
 80056ee:	d903      	bls.n	80056f8 <HAL_DMA_Init+0x26c>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	2b2e      	cmp	r3, #46	; 0x2e
 80056f6:	d91f      	bls.n	8005738 <HAL_DMA_Init+0x2ac>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	2b3e      	cmp	r3, #62	; 0x3e
 80056fe:	d903      	bls.n	8005708 <HAL_DMA_Init+0x27c>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	2b42      	cmp	r3, #66	; 0x42
 8005706:	d917      	bls.n	8005738 <HAL_DMA_Init+0x2ac>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	2b46      	cmp	r3, #70	; 0x46
 800570e:	d903      	bls.n	8005718 <HAL_DMA_Init+0x28c>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	2b48      	cmp	r3, #72	; 0x48
 8005716:	d90f      	bls.n	8005738 <HAL_DMA_Init+0x2ac>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	2b4e      	cmp	r3, #78	; 0x4e
 800571e:	d903      	bls.n	8005728 <HAL_DMA_Init+0x29c>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	2b52      	cmp	r3, #82	; 0x52
 8005726:	d907      	bls.n	8005738 <HAL_DMA_Init+0x2ac>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	2b73      	cmp	r3, #115	; 0x73
 800572e:	d905      	bls.n	800573c <HAL_DMA_Init+0x2b0>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	2b77      	cmp	r3, #119	; 0x77
 8005736:	d801      	bhi.n	800573c <HAL_DMA_Init+0x2b0>
 8005738:	2301      	movs	r3, #1
 800573a:	e000      	b.n	800573e <HAL_DMA_Init+0x2b2>
 800573c:	2300      	movs	r3, #0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d003      	beq.n	800574a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005748:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	f023 0307 	bic.w	r3, r3, #7
 8005760:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	4313      	orrs	r3, r2
 800576a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005770:	2b04      	cmp	r3, #4
 8005772:	d117      	bne.n	80057a4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	4313      	orrs	r3, r2
 800577c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00e      	beq.n	80057a4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f001 fdca 	bl	8007320 <DMA_CheckFifoParam>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d008      	beq.n	80057a4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2240      	movs	r2, #64	; 0x40
 8005796:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e192      	b.n	8005aca <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f001 fd05 	bl	80071bc <DMA_CalcBaseAndBitshift>
 80057b2:	4603      	mov	r3, r0
 80057b4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ba:	f003 031f 	and.w	r3, r3, #31
 80057be:	223f      	movs	r2, #63	; 0x3f
 80057c0:	409a      	lsls	r2, r3
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	609a      	str	r2, [r3, #8]
 80057c6:	e0c8      	b.n	800595a <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a38      	ldr	r2, [pc, #224]	; (80058b0 <HAL_DMA_Init+0x424>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d022      	beq.n	8005818 <HAL_DMA_Init+0x38c>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a37      	ldr	r2, [pc, #220]	; (80058b4 <HAL_DMA_Init+0x428>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d01d      	beq.n	8005818 <HAL_DMA_Init+0x38c>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a35      	ldr	r2, [pc, #212]	; (80058b8 <HAL_DMA_Init+0x42c>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d018      	beq.n	8005818 <HAL_DMA_Init+0x38c>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a34      	ldr	r2, [pc, #208]	; (80058bc <HAL_DMA_Init+0x430>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d013      	beq.n	8005818 <HAL_DMA_Init+0x38c>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a32      	ldr	r2, [pc, #200]	; (80058c0 <HAL_DMA_Init+0x434>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d00e      	beq.n	8005818 <HAL_DMA_Init+0x38c>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a31      	ldr	r2, [pc, #196]	; (80058c4 <HAL_DMA_Init+0x438>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d009      	beq.n	8005818 <HAL_DMA_Init+0x38c>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a2f      	ldr	r2, [pc, #188]	; (80058c8 <HAL_DMA_Init+0x43c>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d004      	beq.n	8005818 <HAL_DMA_Init+0x38c>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a2e      	ldr	r2, [pc, #184]	; (80058cc <HAL_DMA_Init+0x440>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d101      	bne.n	800581c <HAL_DMA_Init+0x390>
 8005818:	2301      	movs	r3, #1
 800581a:	e000      	b.n	800581e <HAL_DMA_Init+0x392>
 800581c:	2300      	movs	r3, #0
 800581e:	2b00      	cmp	r3, #0
 8005820:	f000 8092 	beq.w	8005948 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a21      	ldr	r2, [pc, #132]	; (80058b0 <HAL_DMA_Init+0x424>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d021      	beq.n	8005872 <HAL_DMA_Init+0x3e6>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a20      	ldr	r2, [pc, #128]	; (80058b4 <HAL_DMA_Init+0x428>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d01c      	beq.n	8005872 <HAL_DMA_Init+0x3e6>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a1e      	ldr	r2, [pc, #120]	; (80058b8 <HAL_DMA_Init+0x42c>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d017      	beq.n	8005872 <HAL_DMA_Init+0x3e6>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a1d      	ldr	r2, [pc, #116]	; (80058bc <HAL_DMA_Init+0x430>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d012      	beq.n	8005872 <HAL_DMA_Init+0x3e6>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a1b      	ldr	r2, [pc, #108]	; (80058c0 <HAL_DMA_Init+0x434>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d00d      	beq.n	8005872 <HAL_DMA_Init+0x3e6>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a1a      	ldr	r2, [pc, #104]	; (80058c4 <HAL_DMA_Init+0x438>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d008      	beq.n	8005872 <HAL_DMA_Init+0x3e6>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a18      	ldr	r2, [pc, #96]	; (80058c8 <HAL_DMA_Init+0x43c>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d003      	beq.n	8005872 <HAL_DMA_Init+0x3e6>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a17      	ldr	r2, [pc, #92]	; (80058cc <HAL_DMA_Init+0x440>)
 8005870:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2202      	movs	r2, #2
 8005876:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	4b10      	ldr	r3, [pc, #64]	; (80058d0 <HAL_DMA_Init+0x444>)
 800588e:	4013      	ands	r3, r2
 8005890:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	2b40      	cmp	r3, #64	; 0x40
 8005898:	d01c      	beq.n	80058d4 <HAL_DMA_Init+0x448>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	2b80      	cmp	r3, #128	; 0x80
 80058a0:	d102      	bne.n	80058a8 <HAL_DMA_Init+0x41c>
 80058a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80058a6:	e016      	b.n	80058d6 <HAL_DMA_Init+0x44a>
 80058a8:	2300      	movs	r3, #0
 80058aa:	e014      	b.n	80058d6 <HAL_DMA_Init+0x44a>
 80058ac:	fe10803f 	.word	0xfe10803f
 80058b0:	58025408 	.word	0x58025408
 80058b4:	5802541c 	.word	0x5802541c
 80058b8:	58025430 	.word	0x58025430
 80058bc:	58025444 	.word	0x58025444
 80058c0:	58025458 	.word	0x58025458
 80058c4:	5802546c 	.word	0x5802546c
 80058c8:	58025480 	.word	0x58025480
 80058cc:	58025494 	.word	0x58025494
 80058d0:	fffe000f 	.word	0xfffe000f
 80058d4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	68d2      	ldr	r2, [r2, #12]
 80058da:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80058dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80058e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80058ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80058f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80058fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005904:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	4313      	orrs	r3, r2
 800590a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	461a      	mov	r2, r3
 800591a:	4b6e      	ldr	r3, [pc, #440]	; (8005ad4 <HAL_DMA_Init+0x648>)
 800591c:	4413      	add	r3, r2
 800591e:	4a6e      	ldr	r2, [pc, #440]	; (8005ad8 <HAL_DMA_Init+0x64c>)
 8005920:	fba2 2303 	umull	r2, r3, r2, r3
 8005924:	091b      	lsrs	r3, r3, #4
 8005926:	009a      	lsls	r2, r3, #2
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f001 fc45 	bl	80071bc <DMA_CalcBaseAndBitshift>
 8005932:	4603      	mov	r3, r0
 8005934:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800593a:	f003 031f 	and.w	r3, r3, #31
 800593e:	2201      	movs	r2, #1
 8005940:	409a      	lsls	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	605a      	str	r2, [r3, #4]
 8005946:	e008      	b.n	800595a <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2240      	movs	r2, #64	; 0x40
 800594c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2203      	movs	r2, #3
 8005952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e0b7      	b.n	8005aca <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a5f      	ldr	r2, [pc, #380]	; (8005adc <HAL_DMA_Init+0x650>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d072      	beq.n	8005a4a <HAL_DMA_Init+0x5be>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a5d      	ldr	r2, [pc, #372]	; (8005ae0 <HAL_DMA_Init+0x654>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d06d      	beq.n	8005a4a <HAL_DMA_Init+0x5be>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a5c      	ldr	r2, [pc, #368]	; (8005ae4 <HAL_DMA_Init+0x658>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d068      	beq.n	8005a4a <HAL_DMA_Init+0x5be>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a5a      	ldr	r2, [pc, #360]	; (8005ae8 <HAL_DMA_Init+0x65c>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d063      	beq.n	8005a4a <HAL_DMA_Init+0x5be>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a59      	ldr	r2, [pc, #356]	; (8005aec <HAL_DMA_Init+0x660>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d05e      	beq.n	8005a4a <HAL_DMA_Init+0x5be>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a57      	ldr	r2, [pc, #348]	; (8005af0 <HAL_DMA_Init+0x664>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d059      	beq.n	8005a4a <HAL_DMA_Init+0x5be>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a56      	ldr	r2, [pc, #344]	; (8005af4 <HAL_DMA_Init+0x668>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d054      	beq.n	8005a4a <HAL_DMA_Init+0x5be>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a54      	ldr	r2, [pc, #336]	; (8005af8 <HAL_DMA_Init+0x66c>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d04f      	beq.n	8005a4a <HAL_DMA_Init+0x5be>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a53      	ldr	r2, [pc, #332]	; (8005afc <HAL_DMA_Init+0x670>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d04a      	beq.n	8005a4a <HAL_DMA_Init+0x5be>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a51      	ldr	r2, [pc, #324]	; (8005b00 <HAL_DMA_Init+0x674>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d045      	beq.n	8005a4a <HAL_DMA_Init+0x5be>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a50      	ldr	r2, [pc, #320]	; (8005b04 <HAL_DMA_Init+0x678>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d040      	beq.n	8005a4a <HAL_DMA_Init+0x5be>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a4e      	ldr	r2, [pc, #312]	; (8005b08 <HAL_DMA_Init+0x67c>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d03b      	beq.n	8005a4a <HAL_DMA_Init+0x5be>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a4d      	ldr	r2, [pc, #308]	; (8005b0c <HAL_DMA_Init+0x680>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d036      	beq.n	8005a4a <HAL_DMA_Init+0x5be>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a4b      	ldr	r2, [pc, #300]	; (8005b10 <HAL_DMA_Init+0x684>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d031      	beq.n	8005a4a <HAL_DMA_Init+0x5be>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a4a      	ldr	r2, [pc, #296]	; (8005b14 <HAL_DMA_Init+0x688>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d02c      	beq.n	8005a4a <HAL_DMA_Init+0x5be>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a48      	ldr	r2, [pc, #288]	; (8005b18 <HAL_DMA_Init+0x68c>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d027      	beq.n	8005a4a <HAL_DMA_Init+0x5be>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a47      	ldr	r2, [pc, #284]	; (8005b1c <HAL_DMA_Init+0x690>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d022      	beq.n	8005a4a <HAL_DMA_Init+0x5be>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a45      	ldr	r2, [pc, #276]	; (8005b20 <HAL_DMA_Init+0x694>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d01d      	beq.n	8005a4a <HAL_DMA_Init+0x5be>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a44      	ldr	r2, [pc, #272]	; (8005b24 <HAL_DMA_Init+0x698>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d018      	beq.n	8005a4a <HAL_DMA_Init+0x5be>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a42      	ldr	r2, [pc, #264]	; (8005b28 <HAL_DMA_Init+0x69c>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d013      	beq.n	8005a4a <HAL_DMA_Init+0x5be>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a41      	ldr	r2, [pc, #260]	; (8005b2c <HAL_DMA_Init+0x6a0>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d00e      	beq.n	8005a4a <HAL_DMA_Init+0x5be>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a3f      	ldr	r2, [pc, #252]	; (8005b30 <HAL_DMA_Init+0x6a4>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d009      	beq.n	8005a4a <HAL_DMA_Init+0x5be>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a3e      	ldr	r2, [pc, #248]	; (8005b34 <HAL_DMA_Init+0x6a8>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d004      	beq.n	8005a4a <HAL_DMA_Init+0x5be>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a3c      	ldr	r2, [pc, #240]	; (8005b38 <HAL_DMA_Init+0x6ac>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d101      	bne.n	8005a4e <HAL_DMA_Init+0x5c2>
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e000      	b.n	8005a50 <HAL_DMA_Init+0x5c4>
 8005a4e:	2300      	movs	r3, #0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d032      	beq.n	8005aba <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f001 fcdf 	bl	8007418 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	2b80      	cmp	r3, #128	; 0x80
 8005a60:	d102      	bne.n	8005a68 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685a      	ldr	r2, [r3, #4]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a70:	b2d2      	uxtb	r2, r2
 8005a72:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005a7c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d010      	beq.n	8005aa8 <HAL_DMA_Init+0x61c>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	2b08      	cmp	r3, #8
 8005a8c:	d80c      	bhi.n	8005aa8 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f001 fd5c 	bl	800754c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a98:	2200      	movs	r2, #0
 8005a9a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005aa4:	605a      	str	r2, [r3, #4]
 8005aa6:	e008      	b.n	8005aba <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3718      	adds	r7, #24
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	a7fdabf8 	.word	0xa7fdabf8
 8005ad8:	cccccccd 	.word	0xcccccccd
 8005adc:	40020010 	.word	0x40020010
 8005ae0:	40020028 	.word	0x40020028
 8005ae4:	40020040 	.word	0x40020040
 8005ae8:	40020058 	.word	0x40020058
 8005aec:	40020070 	.word	0x40020070
 8005af0:	40020088 	.word	0x40020088
 8005af4:	400200a0 	.word	0x400200a0
 8005af8:	400200b8 	.word	0x400200b8
 8005afc:	40020410 	.word	0x40020410
 8005b00:	40020428 	.word	0x40020428
 8005b04:	40020440 	.word	0x40020440
 8005b08:	40020458 	.word	0x40020458
 8005b0c:	40020470 	.word	0x40020470
 8005b10:	40020488 	.word	0x40020488
 8005b14:	400204a0 	.word	0x400204a0
 8005b18:	400204b8 	.word	0x400204b8
 8005b1c:	58025408 	.word	0x58025408
 8005b20:	5802541c 	.word	0x5802541c
 8005b24:	58025430 	.word	0x58025430
 8005b28:	58025444 	.word	0x58025444
 8005b2c:	58025458 	.word	0x58025458
 8005b30:	5802546c 	.word	0x5802546c
 8005b34:	58025480 	.word	0x58025480
 8005b38:	58025494 	.word	0x58025494

08005b3c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
 8005b48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e226      	b.n	8005fa6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d101      	bne.n	8005b66 <HAL_DMA_Start_IT+0x2a>
 8005b62:	2302      	movs	r3, #2
 8005b64:	e21f      	b.n	8005fa6 <HAL_DMA_Start_IT+0x46a>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	f040 820a 	bne.w	8005f90 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2202      	movs	r2, #2
 8005b80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a68      	ldr	r2, [pc, #416]	; (8005d30 <HAL_DMA_Start_IT+0x1f4>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d04a      	beq.n	8005c2a <HAL_DMA_Start_IT+0xee>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a66      	ldr	r2, [pc, #408]	; (8005d34 <HAL_DMA_Start_IT+0x1f8>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d045      	beq.n	8005c2a <HAL_DMA_Start_IT+0xee>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a65      	ldr	r2, [pc, #404]	; (8005d38 <HAL_DMA_Start_IT+0x1fc>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d040      	beq.n	8005c2a <HAL_DMA_Start_IT+0xee>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a63      	ldr	r2, [pc, #396]	; (8005d3c <HAL_DMA_Start_IT+0x200>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d03b      	beq.n	8005c2a <HAL_DMA_Start_IT+0xee>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a62      	ldr	r2, [pc, #392]	; (8005d40 <HAL_DMA_Start_IT+0x204>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d036      	beq.n	8005c2a <HAL_DMA_Start_IT+0xee>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a60      	ldr	r2, [pc, #384]	; (8005d44 <HAL_DMA_Start_IT+0x208>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d031      	beq.n	8005c2a <HAL_DMA_Start_IT+0xee>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a5f      	ldr	r2, [pc, #380]	; (8005d48 <HAL_DMA_Start_IT+0x20c>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d02c      	beq.n	8005c2a <HAL_DMA_Start_IT+0xee>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a5d      	ldr	r2, [pc, #372]	; (8005d4c <HAL_DMA_Start_IT+0x210>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d027      	beq.n	8005c2a <HAL_DMA_Start_IT+0xee>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a5c      	ldr	r2, [pc, #368]	; (8005d50 <HAL_DMA_Start_IT+0x214>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d022      	beq.n	8005c2a <HAL_DMA_Start_IT+0xee>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a5a      	ldr	r2, [pc, #360]	; (8005d54 <HAL_DMA_Start_IT+0x218>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d01d      	beq.n	8005c2a <HAL_DMA_Start_IT+0xee>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a59      	ldr	r2, [pc, #356]	; (8005d58 <HAL_DMA_Start_IT+0x21c>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d018      	beq.n	8005c2a <HAL_DMA_Start_IT+0xee>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a57      	ldr	r2, [pc, #348]	; (8005d5c <HAL_DMA_Start_IT+0x220>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d013      	beq.n	8005c2a <HAL_DMA_Start_IT+0xee>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a56      	ldr	r2, [pc, #344]	; (8005d60 <HAL_DMA_Start_IT+0x224>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d00e      	beq.n	8005c2a <HAL_DMA_Start_IT+0xee>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a54      	ldr	r2, [pc, #336]	; (8005d64 <HAL_DMA_Start_IT+0x228>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d009      	beq.n	8005c2a <HAL_DMA_Start_IT+0xee>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a53      	ldr	r2, [pc, #332]	; (8005d68 <HAL_DMA_Start_IT+0x22c>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d004      	beq.n	8005c2a <HAL_DMA_Start_IT+0xee>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a51      	ldr	r2, [pc, #324]	; (8005d6c <HAL_DMA_Start_IT+0x230>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d108      	bne.n	8005c3c <HAL_DMA_Start_IT+0x100>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f022 0201 	bic.w	r2, r2, #1
 8005c38:	601a      	str	r2, [r3, #0]
 8005c3a:	e007      	b.n	8005c4c <HAL_DMA_Start_IT+0x110>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f022 0201 	bic.w	r2, r2, #1
 8005c4a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	68b9      	ldr	r1, [r7, #8]
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f001 f906 	bl	8006e64 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a34      	ldr	r2, [pc, #208]	; (8005d30 <HAL_DMA_Start_IT+0x1f4>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d04a      	beq.n	8005cf8 <HAL_DMA_Start_IT+0x1bc>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a33      	ldr	r2, [pc, #204]	; (8005d34 <HAL_DMA_Start_IT+0x1f8>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d045      	beq.n	8005cf8 <HAL_DMA_Start_IT+0x1bc>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a31      	ldr	r2, [pc, #196]	; (8005d38 <HAL_DMA_Start_IT+0x1fc>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d040      	beq.n	8005cf8 <HAL_DMA_Start_IT+0x1bc>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a30      	ldr	r2, [pc, #192]	; (8005d3c <HAL_DMA_Start_IT+0x200>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d03b      	beq.n	8005cf8 <HAL_DMA_Start_IT+0x1bc>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a2e      	ldr	r2, [pc, #184]	; (8005d40 <HAL_DMA_Start_IT+0x204>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d036      	beq.n	8005cf8 <HAL_DMA_Start_IT+0x1bc>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a2d      	ldr	r2, [pc, #180]	; (8005d44 <HAL_DMA_Start_IT+0x208>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d031      	beq.n	8005cf8 <HAL_DMA_Start_IT+0x1bc>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a2b      	ldr	r2, [pc, #172]	; (8005d48 <HAL_DMA_Start_IT+0x20c>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d02c      	beq.n	8005cf8 <HAL_DMA_Start_IT+0x1bc>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a2a      	ldr	r2, [pc, #168]	; (8005d4c <HAL_DMA_Start_IT+0x210>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d027      	beq.n	8005cf8 <HAL_DMA_Start_IT+0x1bc>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a28      	ldr	r2, [pc, #160]	; (8005d50 <HAL_DMA_Start_IT+0x214>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d022      	beq.n	8005cf8 <HAL_DMA_Start_IT+0x1bc>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a27      	ldr	r2, [pc, #156]	; (8005d54 <HAL_DMA_Start_IT+0x218>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d01d      	beq.n	8005cf8 <HAL_DMA_Start_IT+0x1bc>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a25      	ldr	r2, [pc, #148]	; (8005d58 <HAL_DMA_Start_IT+0x21c>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d018      	beq.n	8005cf8 <HAL_DMA_Start_IT+0x1bc>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a24      	ldr	r2, [pc, #144]	; (8005d5c <HAL_DMA_Start_IT+0x220>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d013      	beq.n	8005cf8 <HAL_DMA_Start_IT+0x1bc>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a22      	ldr	r2, [pc, #136]	; (8005d60 <HAL_DMA_Start_IT+0x224>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d00e      	beq.n	8005cf8 <HAL_DMA_Start_IT+0x1bc>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a21      	ldr	r2, [pc, #132]	; (8005d64 <HAL_DMA_Start_IT+0x228>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d009      	beq.n	8005cf8 <HAL_DMA_Start_IT+0x1bc>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a1f      	ldr	r2, [pc, #124]	; (8005d68 <HAL_DMA_Start_IT+0x22c>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d004      	beq.n	8005cf8 <HAL_DMA_Start_IT+0x1bc>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a1e      	ldr	r2, [pc, #120]	; (8005d6c <HAL_DMA_Start_IT+0x230>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d101      	bne.n	8005cfc <HAL_DMA_Start_IT+0x1c0>
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e000      	b.n	8005cfe <HAL_DMA_Start_IT+0x1c2>
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d036      	beq.n	8005d70 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f023 021e 	bic.w	r2, r3, #30
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f042 0216 	orr.w	r2, r2, #22
 8005d14:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d03e      	beq.n	8005d9c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f042 0208 	orr.w	r2, r2, #8
 8005d2c:	601a      	str	r2, [r3, #0]
 8005d2e:	e035      	b.n	8005d9c <HAL_DMA_Start_IT+0x260>
 8005d30:	40020010 	.word	0x40020010
 8005d34:	40020028 	.word	0x40020028
 8005d38:	40020040 	.word	0x40020040
 8005d3c:	40020058 	.word	0x40020058
 8005d40:	40020070 	.word	0x40020070
 8005d44:	40020088 	.word	0x40020088
 8005d48:	400200a0 	.word	0x400200a0
 8005d4c:	400200b8 	.word	0x400200b8
 8005d50:	40020410 	.word	0x40020410
 8005d54:	40020428 	.word	0x40020428
 8005d58:	40020440 	.word	0x40020440
 8005d5c:	40020458 	.word	0x40020458
 8005d60:	40020470 	.word	0x40020470
 8005d64:	40020488 	.word	0x40020488
 8005d68:	400204a0 	.word	0x400204a0
 8005d6c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f023 020e 	bic.w	r2, r3, #14
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f042 020a 	orr.w	r2, r2, #10
 8005d82:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d007      	beq.n	8005d9c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f042 0204 	orr.w	r2, r2, #4
 8005d9a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a83      	ldr	r2, [pc, #524]	; (8005fb0 <HAL_DMA_Start_IT+0x474>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d072      	beq.n	8005e8c <HAL_DMA_Start_IT+0x350>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a82      	ldr	r2, [pc, #520]	; (8005fb4 <HAL_DMA_Start_IT+0x478>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d06d      	beq.n	8005e8c <HAL_DMA_Start_IT+0x350>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a80      	ldr	r2, [pc, #512]	; (8005fb8 <HAL_DMA_Start_IT+0x47c>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d068      	beq.n	8005e8c <HAL_DMA_Start_IT+0x350>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a7f      	ldr	r2, [pc, #508]	; (8005fbc <HAL_DMA_Start_IT+0x480>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d063      	beq.n	8005e8c <HAL_DMA_Start_IT+0x350>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a7d      	ldr	r2, [pc, #500]	; (8005fc0 <HAL_DMA_Start_IT+0x484>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d05e      	beq.n	8005e8c <HAL_DMA_Start_IT+0x350>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a7c      	ldr	r2, [pc, #496]	; (8005fc4 <HAL_DMA_Start_IT+0x488>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d059      	beq.n	8005e8c <HAL_DMA_Start_IT+0x350>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a7a      	ldr	r2, [pc, #488]	; (8005fc8 <HAL_DMA_Start_IT+0x48c>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d054      	beq.n	8005e8c <HAL_DMA_Start_IT+0x350>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a79      	ldr	r2, [pc, #484]	; (8005fcc <HAL_DMA_Start_IT+0x490>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d04f      	beq.n	8005e8c <HAL_DMA_Start_IT+0x350>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a77      	ldr	r2, [pc, #476]	; (8005fd0 <HAL_DMA_Start_IT+0x494>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d04a      	beq.n	8005e8c <HAL_DMA_Start_IT+0x350>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a76      	ldr	r2, [pc, #472]	; (8005fd4 <HAL_DMA_Start_IT+0x498>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d045      	beq.n	8005e8c <HAL_DMA_Start_IT+0x350>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a74      	ldr	r2, [pc, #464]	; (8005fd8 <HAL_DMA_Start_IT+0x49c>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d040      	beq.n	8005e8c <HAL_DMA_Start_IT+0x350>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a73      	ldr	r2, [pc, #460]	; (8005fdc <HAL_DMA_Start_IT+0x4a0>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d03b      	beq.n	8005e8c <HAL_DMA_Start_IT+0x350>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a71      	ldr	r2, [pc, #452]	; (8005fe0 <HAL_DMA_Start_IT+0x4a4>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d036      	beq.n	8005e8c <HAL_DMA_Start_IT+0x350>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a70      	ldr	r2, [pc, #448]	; (8005fe4 <HAL_DMA_Start_IT+0x4a8>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d031      	beq.n	8005e8c <HAL_DMA_Start_IT+0x350>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a6e      	ldr	r2, [pc, #440]	; (8005fe8 <HAL_DMA_Start_IT+0x4ac>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d02c      	beq.n	8005e8c <HAL_DMA_Start_IT+0x350>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a6d      	ldr	r2, [pc, #436]	; (8005fec <HAL_DMA_Start_IT+0x4b0>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d027      	beq.n	8005e8c <HAL_DMA_Start_IT+0x350>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a6b      	ldr	r2, [pc, #428]	; (8005ff0 <HAL_DMA_Start_IT+0x4b4>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d022      	beq.n	8005e8c <HAL_DMA_Start_IT+0x350>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a6a      	ldr	r2, [pc, #424]	; (8005ff4 <HAL_DMA_Start_IT+0x4b8>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d01d      	beq.n	8005e8c <HAL_DMA_Start_IT+0x350>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a68      	ldr	r2, [pc, #416]	; (8005ff8 <HAL_DMA_Start_IT+0x4bc>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d018      	beq.n	8005e8c <HAL_DMA_Start_IT+0x350>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a67      	ldr	r2, [pc, #412]	; (8005ffc <HAL_DMA_Start_IT+0x4c0>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d013      	beq.n	8005e8c <HAL_DMA_Start_IT+0x350>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a65      	ldr	r2, [pc, #404]	; (8006000 <HAL_DMA_Start_IT+0x4c4>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d00e      	beq.n	8005e8c <HAL_DMA_Start_IT+0x350>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a64      	ldr	r2, [pc, #400]	; (8006004 <HAL_DMA_Start_IT+0x4c8>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d009      	beq.n	8005e8c <HAL_DMA_Start_IT+0x350>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a62      	ldr	r2, [pc, #392]	; (8006008 <HAL_DMA_Start_IT+0x4cc>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d004      	beq.n	8005e8c <HAL_DMA_Start_IT+0x350>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a61      	ldr	r2, [pc, #388]	; (800600c <HAL_DMA_Start_IT+0x4d0>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d101      	bne.n	8005e90 <HAL_DMA_Start_IT+0x354>
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e000      	b.n	8005e92 <HAL_DMA_Start_IT+0x356>
 8005e90:	2300      	movs	r3, #0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d01a      	beq.n	8005ecc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d007      	beq.n	8005eb4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005eb2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d007      	beq.n	8005ecc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ec6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005eca:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a37      	ldr	r2, [pc, #220]	; (8005fb0 <HAL_DMA_Start_IT+0x474>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d04a      	beq.n	8005f6c <HAL_DMA_Start_IT+0x430>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a36      	ldr	r2, [pc, #216]	; (8005fb4 <HAL_DMA_Start_IT+0x478>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d045      	beq.n	8005f6c <HAL_DMA_Start_IT+0x430>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a34      	ldr	r2, [pc, #208]	; (8005fb8 <HAL_DMA_Start_IT+0x47c>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d040      	beq.n	8005f6c <HAL_DMA_Start_IT+0x430>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a33      	ldr	r2, [pc, #204]	; (8005fbc <HAL_DMA_Start_IT+0x480>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d03b      	beq.n	8005f6c <HAL_DMA_Start_IT+0x430>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a31      	ldr	r2, [pc, #196]	; (8005fc0 <HAL_DMA_Start_IT+0x484>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d036      	beq.n	8005f6c <HAL_DMA_Start_IT+0x430>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a30      	ldr	r2, [pc, #192]	; (8005fc4 <HAL_DMA_Start_IT+0x488>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d031      	beq.n	8005f6c <HAL_DMA_Start_IT+0x430>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a2e      	ldr	r2, [pc, #184]	; (8005fc8 <HAL_DMA_Start_IT+0x48c>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d02c      	beq.n	8005f6c <HAL_DMA_Start_IT+0x430>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a2d      	ldr	r2, [pc, #180]	; (8005fcc <HAL_DMA_Start_IT+0x490>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d027      	beq.n	8005f6c <HAL_DMA_Start_IT+0x430>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a2b      	ldr	r2, [pc, #172]	; (8005fd0 <HAL_DMA_Start_IT+0x494>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d022      	beq.n	8005f6c <HAL_DMA_Start_IT+0x430>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a2a      	ldr	r2, [pc, #168]	; (8005fd4 <HAL_DMA_Start_IT+0x498>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d01d      	beq.n	8005f6c <HAL_DMA_Start_IT+0x430>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a28      	ldr	r2, [pc, #160]	; (8005fd8 <HAL_DMA_Start_IT+0x49c>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d018      	beq.n	8005f6c <HAL_DMA_Start_IT+0x430>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a27      	ldr	r2, [pc, #156]	; (8005fdc <HAL_DMA_Start_IT+0x4a0>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d013      	beq.n	8005f6c <HAL_DMA_Start_IT+0x430>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a25      	ldr	r2, [pc, #148]	; (8005fe0 <HAL_DMA_Start_IT+0x4a4>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d00e      	beq.n	8005f6c <HAL_DMA_Start_IT+0x430>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a24      	ldr	r2, [pc, #144]	; (8005fe4 <HAL_DMA_Start_IT+0x4a8>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d009      	beq.n	8005f6c <HAL_DMA_Start_IT+0x430>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a22      	ldr	r2, [pc, #136]	; (8005fe8 <HAL_DMA_Start_IT+0x4ac>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d004      	beq.n	8005f6c <HAL_DMA_Start_IT+0x430>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a21      	ldr	r2, [pc, #132]	; (8005fec <HAL_DMA_Start_IT+0x4b0>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d108      	bne.n	8005f7e <HAL_DMA_Start_IT+0x442>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f042 0201 	orr.w	r2, r2, #1
 8005f7a:	601a      	str	r2, [r3, #0]
 8005f7c:	e012      	b.n	8005fa4 <HAL_DMA_Start_IT+0x468>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f042 0201 	orr.w	r2, r2, #1
 8005f8c:	601a      	str	r2, [r3, #0]
 8005f8e:	e009      	b.n	8005fa4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f96:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3718      	adds	r7, #24
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	40020010 	.word	0x40020010
 8005fb4:	40020028 	.word	0x40020028
 8005fb8:	40020040 	.word	0x40020040
 8005fbc:	40020058 	.word	0x40020058
 8005fc0:	40020070 	.word	0x40020070
 8005fc4:	40020088 	.word	0x40020088
 8005fc8:	400200a0 	.word	0x400200a0
 8005fcc:	400200b8 	.word	0x400200b8
 8005fd0:	40020410 	.word	0x40020410
 8005fd4:	40020428 	.word	0x40020428
 8005fd8:	40020440 	.word	0x40020440
 8005fdc:	40020458 	.word	0x40020458
 8005fe0:	40020470 	.word	0x40020470
 8005fe4:	40020488 	.word	0x40020488
 8005fe8:	400204a0 	.word	0x400204a0
 8005fec:	400204b8 	.word	0x400204b8
 8005ff0:	58025408 	.word	0x58025408
 8005ff4:	5802541c 	.word	0x5802541c
 8005ff8:	58025430 	.word	0x58025430
 8005ffc:	58025444 	.word	0x58025444
 8006000:	58025458 	.word	0x58025458
 8006004:	5802546c 	.word	0x5802546c
 8006008:	58025480 	.word	0x58025480
 800600c:	58025494 	.word	0x58025494

08006010 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b08a      	sub	sp, #40	; 0x28
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006018:	2300      	movs	r3, #0
 800601a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800601c:	4b67      	ldr	r3, [pc, #412]	; (80061bc <HAL_DMA_IRQHandler+0x1ac>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a67      	ldr	r2, [pc, #412]	; (80061c0 <HAL_DMA_IRQHandler+0x1b0>)
 8006022:	fba2 2303 	umull	r2, r3, r2, r3
 8006026:	0a9b      	lsrs	r3, r3, #10
 8006028:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800602e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006034:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a5f      	ldr	r2, [pc, #380]	; (80061c4 <HAL_DMA_IRQHandler+0x1b4>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d04a      	beq.n	80060e2 <HAL_DMA_IRQHandler+0xd2>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a5d      	ldr	r2, [pc, #372]	; (80061c8 <HAL_DMA_IRQHandler+0x1b8>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d045      	beq.n	80060e2 <HAL_DMA_IRQHandler+0xd2>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a5c      	ldr	r2, [pc, #368]	; (80061cc <HAL_DMA_IRQHandler+0x1bc>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d040      	beq.n	80060e2 <HAL_DMA_IRQHandler+0xd2>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a5a      	ldr	r2, [pc, #360]	; (80061d0 <HAL_DMA_IRQHandler+0x1c0>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d03b      	beq.n	80060e2 <HAL_DMA_IRQHandler+0xd2>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a59      	ldr	r2, [pc, #356]	; (80061d4 <HAL_DMA_IRQHandler+0x1c4>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d036      	beq.n	80060e2 <HAL_DMA_IRQHandler+0xd2>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a57      	ldr	r2, [pc, #348]	; (80061d8 <HAL_DMA_IRQHandler+0x1c8>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d031      	beq.n	80060e2 <HAL_DMA_IRQHandler+0xd2>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a56      	ldr	r2, [pc, #344]	; (80061dc <HAL_DMA_IRQHandler+0x1cc>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d02c      	beq.n	80060e2 <HAL_DMA_IRQHandler+0xd2>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a54      	ldr	r2, [pc, #336]	; (80061e0 <HAL_DMA_IRQHandler+0x1d0>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d027      	beq.n	80060e2 <HAL_DMA_IRQHandler+0xd2>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a53      	ldr	r2, [pc, #332]	; (80061e4 <HAL_DMA_IRQHandler+0x1d4>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d022      	beq.n	80060e2 <HAL_DMA_IRQHandler+0xd2>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a51      	ldr	r2, [pc, #324]	; (80061e8 <HAL_DMA_IRQHandler+0x1d8>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d01d      	beq.n	80060e2 <HAL_DMA_IRQHandler+0xd2>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a50      	ldr	r2, [pc, #320]	; (80061ec <HAL_DMA_IRQHandler+0x1dc>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d018      	beq.n	80060e2 <HAL_DMA_IRQHandler+0xd2>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a4e      	ldr	r2, [pc, #312]	; (80061f0 <HAL_DMA_IRQHandler+0x1e0>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d013      	beq.n	80060e2 <HAL_DMA_IRQHandler+0xd2>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a4d      	ldr	r2, [pc, #308]	; (80061f4 <HAL_DMA_IRQHandler+0x1e4>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d00e      	beq.n	80060e2 <HAL_DMA_IRQHandler+0xd2>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a4b      	ldr	r2, [pc, #300]	; (80061f8 <HAL_DMA_IRQHandler+0x1e8>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d009      	beq.n	80060e2 <HAL_DMA_IRQHandler+0xd2>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a4a      	ldr	r2, [pc, #296]	; (80061fc <HAL_DMA_IRQHandler+0x1ec>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d004      	beq.n	80060e2 <HAL_DMA_IRQHandler+0xd2>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a48      	ldr	r2, [pc, #288]	; (8006200 <HAL_DMA_IRQHandler+0x1f0>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d101      	bne.n	80060e6 <HAL_DMA_IRQHandler+0xd6>
 80060e2:	2301      	movs	r3, #1
 80060e4:	e000      	b.n	80060e8 <HAL_DMA_IRQHandler+0xd8>
 80060e6:	2300      	movs	r3, #0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 842b 	beq.w	8006944 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060f2:	f003 031f 	and.w	r3, r3, #31
 80060f6:	2208      	movs	r2, #8
 80060f8:	409a      	lsls	r2, r3
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	4013      	ands	r3, r2
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f000 80a2 	beq.w	8006248 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a2e      	ldr	r2, [pc, #184]	; (80061c4 <HAL_DMA_IRQHandler+0x1b4>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d04a      	beq.n	80061a4 <HAL_DMA_IRQHandler+0x194>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a2d      	ldr	r2, [pc, #180]	; (80061c8 <HAL_DMA_IRQHandler+0x1b8>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d045      	beq.n	80061a4 <HAL_DMA_IRQHandler+0x194>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a2b      	ldr	r2, [pc, #172]	; (80061cc <HAL_DMA_IRQHandler+0x1bc>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d040      	beq.n	80061a4 <HAL_DMA_IRQHandler+0x194>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a2a      	ldr	r2, [pc, #168]	; (80061d0 <HAL_DMA_IRQHandler+0x1c0>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d03b      	beq.n	80061a4 <HAL_DMA_IRQHandler+0x194>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a28      	ldr	r2, [pc, #160]	; (80061d4 <HAL_DMA_IRQHandler+0x1c4>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d036      	beq.n	80061a4 <HAL_DMA_IRQHandler+0x194>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a27      	ldr	r2, [pc, #156]	; (80061d8 <HAL_DMA_IRQHandler+0x1c8>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d031      	beq.n	80061a4 <HAL_DMA_IRQHandler+0x194>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a25      	ldr	r2, [pc, #148]	; (80061dc <HAL_DMA_IRQHandler+0x1cc>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d02c      	beq.n	80061a4 <HAL_DMA_IRQHandler+0x194>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a24      	ldr	r2, [pc, #144]	; (80061e0 <HAL_DMA_IRQHandler+0x1d0>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d027      	beq.n	80061a4 <HAL_DMA_IRQHandler+0x194>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a22      	ldr	r2, [pc, #136]	; (80061e4 <HAL_DMA_IRQHandler+0x1d4>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d022      	beq.n	80061a4 <HAL_DMA_IRQHandler+0x194>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a21      	ldr	r2, [pc, #132]	; (80061e8 <HAL_DMA_IRQHandler+0x1d8>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d01d      	beq.n	80061a4 <HAL_DMA_IRQHandler+0x194>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a1f      	ldr	r2, [pc, #124]	; (80061ec <HAL_DMA_IRQHandler+0x1dc>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d018      	beq.n	80061a4 <HAL_DMA_IRQHandler+0x194>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a1e      	ldr	r2, [pc, #120]	; (80061f0 <HAL_DMA_IRQHandler+0x1e0>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d013      	beq.n	80061a4 <HAL_DMA_IRQHandler+0x194>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a1c      	ldr	r2, [pc, #112]	; (80061f4 <HAL_DMA_IRQHandler+0x1e4>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d00e      	beq.n	80061a4 <HAL_DMA_IRQHandler+0x194>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a1b      	ldr	r2, [pc, #108]	; (80061f8 <HAL_DMA_IRQHandler+0x1e8>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d009      	beq.n	80061a4 <HAL_DMA_IRQHandler+0x194>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a19      	ldr	r2, [pc, #100]	; (80061fc <HAL_DMA_IRQHandler+0x1ec>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d004      	beq.n	80061a4 <HAL_DMA_IRQHandler+0x194>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a18      	ldr	r2, [pc, #96]	; (8006200 <HAL_DMA_IRQHandler+0x1f0>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d12f      	bne.n	8006204 <HAL_DMA_IRQHandler+0x1f4>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0304 	and.w	r3, r3, #4
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	bf14      	ite	ne
 80061b2:	2301      	movne	r3, #1
 80061b4:	2300      	moveq	r3, #0
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	e02e      	b.n	8006218 <HAL_DMA_IRQHandler+0x208>
 80061ba:	bf00      	nop
 80061bc:	24000000 	.word	0x24000000
 80061c0:	1b4e81b5 	.word	0x1b4e81b5
 80061c4:	40020010 	.word	0x40020010
 80061c8:	40020028 	.word	0x40020028
 80061cc:	40020040 	.word	0x40020040
 80061d0:	40020058 	.word	0x40020058
 80061d4:	40020070 	.word	0x40020070
 80061d8:	40020088 	.word	0x40020088
 80061dc:	400200a0 	.word	0x400200a0
 80061e0:	400200b8 	.word	0x400200b8
 80061e4:	40020410 	.word	0x40020410
 80061e8:	40020428 	.word	0x40020428
 80061ec:	40020440 	.word	0x40020440
 80061f0:	40020458 	.word	0x40020458
 80061f4:	40020470 	.word	0x40020470
 80061f8:	40020488 	.word	0x40020488
 80061fc:	400204a0 	.word	0x400204a0
 8006200:	400204b8 	.word	0x400204b8
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0308 	and.w	r3, r3, #8
 800620e:	2b00      	cmp	r3, #0
 8006210:	bf14      	ite	ne
 8006212:	2301      	movne	r3, #1
 8006214:	2300      	moveq	r3, #0
 8006216:	b2db      	uxtb	r3, r3
 8006218:	2b00      	cmp	r3, #0
 800621a:	d015      	beq.n	8006248 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f022 0204 	bic.w	r2, r2, #4
 800622a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006230:	f003 031f 	and.w	r3, r3, #31
 8006234:	2208      	movs	r2, #8
 8006236:	409a      	lsls	r2, r3
 8006238:	6a3b      	ldr	r3, [r7, #32]
 800623a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006240:	f043 0201 	orr.w	r2, r3, #1
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800624c:	f003 031f 	and.w	r3, r3, #31
 8006250:	69ba      	ldr	r2, [r7, #24]
 8006252:	fa22 f303 	lsr.w	r3, r2, r3
 8006256:	f003 0301 	and.w	r3, r3, #1
 800625a:	2b00      	cmp	r3, #0
 800625c:	d06e      	beq.n	800633c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a69      	ldr	r2, [pc, #420]	; (8006408 <HAL_DMA_IRQHandler+0x3f8>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d04a      	beq.n	80062fe <HAL_DMA_IRQHandler+0x2ee>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a67      	ldr	r2, [pc, #412]	; (800640c <HAL_DMA_IRQHandler+0x3fc>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d045      	beq.n	80062fe <HAL_DMA_IRQHandler+0x2ee>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a66      	ldr	r2, [pc, #408]	; (8006410 <HAL_DMA_IRQHandler+0x400>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d040      	beq.n	80062fe <HAL_DMA_IRQHandler+0x2ee>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a64      	ldr	r2, [pc, #400]	; (8006414 <HAL_DMA_IRQHandler+0x404>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d03b      	beq.n	80062fe <HAL_DMA_IRQHandler+0x2ee>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a63      	ldr	r2, [pc, #396]	; (8006418 <HAL_DMA_IRQHandler+0x408>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d036      	beq.n	80062fe <HAL_DMA_IRQHandler+0x2ee>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a61      	ldr	r2, [pc, #388]	; (800641c <HAL_DMA_IRQHandler+0x40c>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d031      	beq.n	80062fe <HAL_DMA_IRQHandler+0x2ee>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a60      	ldr	r2, [pc, #384]	; (8006420 <HAL_DMA_IRQHandler+0x410>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d02c      	beq.n	80062fe <HAL_DMA_IRQHandler+0x2ee>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a5e      	ldr	r2, [pc, #376]	; (8006424 <HAL_DMA_IRQHandler+0x414>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d027      	beq.n	80062fe <HAL_DMA_IRQHandler+0x2ee>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a5d      	ldr	r2, [pc, #372]	; (8006428 <HAL_DMA_IRQHandler+0x418>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d022      	beq.n	80062fe <HAL_DMA_IRQHandler+0x2ee>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a5b      	ldr	r2, [pc, #364]	; (800642c <HAL_DMA_IRQHandler+0x41c>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d01d      	beq.n	80062fe <HAL_DMA_IRQHandler+0x2ee>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a5a      	ldr	r2, [pc, #360]	; (8006430 <HAL_DMA_IRQHandler+0x420>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d018      	beq.n	80062fe <HAL_DMA_IRQHandler+0x2ee>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a58      	ldr	r2, [pc, #352]	; (8006434 <HAL_DMA_IRQHandler+0x424>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d013      	beq.n	80062fe <HAL_DMA_IRQHandler+0x2ee>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a57      	ldr	r2, [pc, #348]	; (8006438 <HAL_DMA_IRQHandler+0x428>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d00e      	beq.n	80062fe <HAL_DMA_IRQHandler+0x2ee>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a55      	ldr	r2, [pc, #340]	; (800643c <HAL_DMA_IRQHandler+0x42c>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d009      	beq.n	80062fe <HAL_DMA_IRQHandler+0x2ee>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a54      	ldr	r2, [pc, #336]	; (8006440 <HAL_DMA_IRQHandler+0x430>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d004      	beq.n	80062fe <HAL_DMA_IRQHandler+0x2ee>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a52      	ldr	r2, [pc, #328]	; (8006444 <HAL_DMA_IRQHandler+0x434>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d10a      	bne.n	8006314 <HAL_DMA_IRQHandler+0x304>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	695b      	ldr	r3, [r3, #20]
 8006304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006308:	2b00      	cmp	r3, #0
 800630a:	bf14      	ite	ne
 800630c:	2301      	movne	r3, #1
 800630e:	2300      	moveq	r3, #0
 8006310:	b2db      	uxtb	r3, r3
 8006312:	e003      	b.n	800631c <HAL_DMA_IRQHandler+0x30c>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2300      	movs	r3, #0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00d      	beq.n	800633c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006324:	f003 031f 	and.w	r3, r3, #31
 8006328:	2201      	movs	r2, #1
 800632a:	409a      	lsls	r2, r3
 800632c:	6a3b      	ldr	r3, [r7, #32]
 800632e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006334:	f043 0202 	orr.w	r2, r3, #2
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006340:	f003 031f 	and.w	r3, r3, #31
 8006344:	2204      	movs	r2, #4
 8006346:	409a      	lsls	r2, r3
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	4013      	ands	r3, r2
 800634c:	2b00      	cmp	r3, #0
 800634e:	f000 808f 	beq.w	8006470 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a2c      	ldr	r2, [pc, #176]	; (8006408 <HAL_DMA_IRQHandler+0x3f8>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d04a      	beq.n	80063f2 <HAL_DMA_IRQHandler+0x3e2>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a2a      	ldr	r2, [pc, #168]	; (800640c <HAL_DMA_IRQHandler+0x3fc>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d045      	beq.n	80063f2 <HAL_DMA_IRQHandler+0x3e2>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a29      	ldr	r2, [pc, #164]	; (8006410 <HAL_DMA_IRQHandler+0x400>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d040      	beq.n	80063f2 <HAL_DMA_IRQHandler+0x3e2>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a27      	ldr	r2, [pc, #156]	; (8006414 <HAL_DMA_IRQHandler+0x404>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d03b      	beq.n	80063f2 <HAL_DMA_IRQHandler+0x3e2>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a26      	ldr	r2, [pc, #152]	; (8006418 <HAL_DMA_IRQHandler+0x408>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d036      	beq.n	80063f2 <HAL_DMA_IRQHandler+0x3e2>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a24      	ldr	r2, [pc, #144]	; (800641c <HAL_DMA_IRQHandler+0x40c>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d031      	beq.n	80063f2 <HAL_DMA_IRQHandler+0x3e2>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a23      	ldr	r2, [pc, #140]	; (8006420 <HAL_DMA_IRQHandler+0x410>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d02c      	beq.n	80063f2 <HAL_DMA_IRQHandler+0x3e2>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a21      	ldr	r2, [pc, #132]	; (8006424 <HAL_DMA_IRQHandler+0x414>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d027      	beq.n	80063f2 <HAL_DMA_IRQHandler+0x3e2>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a20      	ldr	r2, [pc, #128]	; (8006428 <HAL_DMA_IRQHandler+0x418>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d022      	beq.n	80063f2 <HAL_DMA_IRQHandler+0x3e2>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a1e      	ldr	r2, [pc, #120]	; (800642c <HAL_DMA_IRQHandler+0x41c>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d01d      	beq.n	80063f2 <HAL_DMA_IRQHandler+0x3e2>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a1d      	ldr	r2, [pc, #116]	; (8006430 <HAL_DMA_IRQHandler+0x420>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d018      	beq.n	80063f2 <HAL_DMA_IRQHandler+0x3e2>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a1b      	ldr	r2, [pc, #108]	; (8006434 <HAL_DMA_IRQHandler+0x424>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d013      	beq.n	80063f2 <HAL_DMA_IRQHandler+0x3e2>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a1a      	ldr	r2, [pc, #104]	; (8006438 <HAL_DMA_IRQHandler+0x428>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d00e      	beq.n	80063f2 <HAL_DMA_IRQHandler+0x3e2>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a18      	ldr	r2, [pc, #96]	; (800643c <HAL_DMA_IRQHandler+0x42c>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d009      	beq.n	80063f2 <HAL_DMA_IRQHandler+0x3e2>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a17      	ldr	r2, [pc, #92]	; (8006440 <HAL_DMA_IRQHandler+0x430>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d004      	beq.n	80063f2 <HAL_DMA_IRQHandler+0x3e2>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a15      	ldr	r2, [pc, #84]	; (8006444 <HAL_DMA_IRQHandler+0x434>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d12a      	bne.n	8006448 <HAL_DMA_IRQHandler+0x438>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0302 	and.w	r3, r3, #2
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	bf14      	ite	ne
 8006400:	2301      	movne	r3, #1
 8006402:	2300      	moveq	r3, #0
 8006404:	b2db      	uxtb	r3, r3
 8006406:	e023      	b.n	8006450 <HAL_DMA_IRQHandler+0x440>
 8006408:	40020010 	.word	0x40020010
 800640c:	40020028 	.word	0x40020028
 8006410:	40020040 	.word	0x40020040
 8006414:	40020058 	.word	0x40020058
 8006418:	40020070 	.word	0x40020070
 800641c:	40020088 	.word	0x40020088
 8006420:	400200a0 	.word	0x400200a0
 8006424:	400200b8 	.word	0x400200b8
 8006428:	40020410 	.word	0x40020410
 800642c:	40020428 	.word	0x40020428
 8006430:	40020440 	.word	0x40020440
 8006434:	40020458 	.word	0x40020458
 8006438:	40020470 	.word	0x40020470
 800643c:	40020488 	.word	0x40020488
 8006440:	400204a0 	.word	0x400204a0
 8006444:	400204b8 	.word	0x400204b8
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2300      	movs	r3, #0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00d      	beq.n	8006470 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006458:	f003 031f 	and.w	r3, r3, #31
 800645c:	2204      	movs	r2, #4
 800645e:	409a      	lsls	r2, r3
 8006460:	6a3b      	ldr	r3, [r7, #32]
 8006462:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006468:	f043 0204 	orr.w	r2, r3, #4
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006474:	f003 031f 	and.w	r3, r3, #31
 8006478:	2210      	movs	r2, #16
 800647a:	409a      	lsls	r2, r3
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	4013      	ands	r3, r2
 8006480:	2b00      	cmp	r3, #0
 8006482:	f000 80a6 	beq.w	80065d2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a85      	ldr	r2, [pc, #532]	; (80066a0 <HAL_DMA_IRQHandler+0x690>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d04a      	beq.n	8006526 <HAL_DMA_IRQHandler+0x516>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a83      	ldr	r2, [pc, #524]	; (80066a4 <HAL_DMA_IRQHandler+0x694>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d045      	beq.n	8006526 <HAL_DMA_IRQHandler+0x516>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a82      	ldr	r2, [pc, #520]	; (80066a8 <HAL_DMA_IRQHandler+0x698>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d040      	beq.n	8006526 <HAL_DMA_IRQHandler+0x516>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a80      	ldr	r2, [pc, #512]	; (80066ac <HAL_DMA_IRQHandler+0x69c>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d03b      	beq.n	8006526 <HAL_DMA_IRQHandler+0x516>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a7f      	ldr	r2, [pc, #508]	; (80066b0 <HAL_DMA_IRQHandler+0x6a0>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d036      	beq.n	8006526 <HAL_DMA_IRQHandler+0x516>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a7d      	ldr	r2, [pc, #500]	; (80066b4 <HAL_DMA_IRQHandler+0x6a4>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d031      	beq.n	8006526 <HAL_DMA_IRQHandler+0x516>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a7c      	ldr	r2, [pc, #496]	; (80066b8 <HAL_DMA_IRQHandler+0x6a8>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d02c      	beq.n	8006526 <HAL_DMA_IRQHandler+0x516>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a7a      	ldr	r2, [pc, #488]	; (80066bc <HAL_DMA_IRQHandler+0x6ac>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d027      	beq.n	8006526 <HAL_DMA_IRQHandler+0x516>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a79      	ldr	r2, [pc, #484]	; (80066c0 <HAL_DMA_IRQHandler+0x6b0>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d022      	beq.n	8006526 <HAL_DMA_IRQHandler+0x516>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a77      	ldr	r2, [pc, #476]	; (80066c4 <HAL_DMA_IRQHandler+0x6b4>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d01d      	beq.n	8006526 <HAL_DMA_IRQHandler+0x516>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a76      	ldr	r2, [pc, #472]	; (80066c8 <HAL_DMA_IRQHandler+0x6b8>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d018      	beq.n	8006526 <HAL_DMA_IRQHandler+0x516>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a74      	ldr	r2, [pc, #464]	; (80066cc <HAL_DMA_IRQHandler+0x6bc>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d013      	beq.n	8006526 <HAL_DMA_IRQHandler+0x516>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a73      	ldr	r2, [pc, #460]	; (80066d0 <HAL_DMA_IRQHandler+0x6c0>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d00e      	beq.n	8006526 <HAL_DMA_IRQHandler+0x516>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a71      	ldr	r2, [pc, #452]	; (80066d4 <HAL_DMA_IRQHandler+0x6c4>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d009      	beq.n	8006526 <HAL_DMA_IRQHandler+0x516>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a70      	ldr	r2, [pc, #448]	; (80066d8 <HAL_DMA_IRQHandler+0x6c8>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d004      	beq.n	8006526 <HAL_DMA_IRQHandler+0x516>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a6e      	ldr	r2, [pc, #440]	; (80066dc <HAL_DMA_IRQHandler+0x6cc>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d10a      	bne.n	800653c <HAL_DMA_IRQHandler+0x52c>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0308 	and.w	r3, r3, #8
 8006530:	2b00      	cmp	r3, #0
 8006532:	bf14      	ite	ne
 8006534:	2301      	movne	r3, #1
 8006536:	2300      	moveq	r3, #0
 8006538:	b2db      	uxtb	r3, r3
 800653a:	e009      	b.n	8006550 <HAL_DMA_IRQHandler+0x540>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 0304 	and.w	r3, r3, #4
 8006546:	2b00      	cmp	r3, #0
 8006548:	bf14      	ite	ne
 800654a:	2301      	movne	r3, #1
 800654c:	2300      	moveq	r3, #0
 800654e:	b2db      	uxtb	r3, r3
 8006550:	2b00      	cmp	r3, #0
 8006552:	d03e      	beq.n	80065d2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006558:	f003 031f 	and.w	r3, r3, #31
 800655c:	2210      	movs	r2, #16
 800655e:	409a      	lsls	r2, r3
 8006560:	6a3b      	ldr	r3, [r7, #32]
 8006562:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d018      	beq.n	80065a4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800657c:	2b00      	cmp	r3, #0
 800657e:	d108      	bne.n	8006592 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006584:	2b00      	cmp	r3, #0
 8006586:	d024      	beq.n	80065d2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	4798      	blx	r3
 8006590:	e01f      	b.n	80065d2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006596:	2b00      	cmp	r3, #0
 8006598:	d01b      	beq.n	80065d2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	4798      	blx	r3
 80065a2:	e016      	b.n	80065d2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d107      	bne.n	80065c2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f022 0208 	bic.w	r2, r2, #8
 80065c0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d003      	beq.n	80065d2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065d6:	f003 031f 	and.w	r3, r3, #31
 80065da:	2220      	movs	r2, #32
 80065dc:	409a      	lsls	r2, r3
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	4013      	ands	r3, r2
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f000 8110 	beq.w	8006808 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a2c      	ldr	r2, [pc, #176]	; (80066a0 <HAL_DMA_IRQHandler+0x690>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d04a      	beq.n	8006688 <HAL_DMA_IRQHandler+0x678>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a2b      	ldr	r2, [pc, #172]	; (80066a4 <HAL_DMA_IRQHandler+0x694>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d045      	beq.n	8006688 <HAL_DMA_IRQHandler+0x678>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a29      	ldr	r2, [pc, #164]	; (80066a8 <HAL_DMA_IRQHandler+0x698>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d040      	beq.n	8006688 <HAL_DMA_IRQHandler+0x678>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a28      	ldr	r2, [pc, #160]	; (80066ac <HAL_DMA_IRQHandler+0x69c>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d03b      	beq.n	8006688 <HAL_DMA_IRQHandler+0x678>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a26      	ldr	r2, [pc, #152]	; (80066b0 <HAL_DMA_IRQHandler+0x6a0>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d036      	beq.n	8006688 <HAL_DMA_IRQHandler+0x678>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a25      	ldr	r2, [pc, #148]	; (80066b4 <HAL_DMA_IRQHandler+0x6a4>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d031      	beq.n	8006688 <HAL_DMA_IRQHandler+0x678>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a23      	ldr	r2, [pc, #140]	; (80066b8 <HAL_DMA_IRQHandler+0x6a8>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d02c      	beq.n	8006688 <HAL_DMA_IRQHandler+0x678>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a22      	ldr	r2, [pc, #136]	; (80066bc <HAL_DMA_IRQHandler+0x6ac>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d027      	beq.n	8006688 <HAL_DMA_IRQHandler+0x678>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a20      	ldr	r2, [pc, #128]	; (80066c0 <HAL_DMA_IRQHandler+0x6b0>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d022      	beq.n	8006688 <HAL_DMA_IRQHandler+0x678>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a1f      	ldr	r2, [pc, #124]	; (80066c4 <HAL_DMA_IRQHandler+0x6b4>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d01d      	beq.n	8006688 <HAL_DMA_IRQHandler+0x678>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a1d      	ldr	r2, [pc, #116]	; (80066c8 <HAL_DMA_IRQHandler+0x6b8>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d018      	beq.n	8006688 <HAL_DMA_IRQHandler+0x678>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a1c      	ldr	r2, [pc, #112]	; (80066cc <HAL_DMA_IRQHandler+0x6bc>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d013      	beq.n	8006688 <HAL_DMA_IRQHandler+0x678>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a1a      	ldr	r2, [pc, #104]	; (80066d0 <HAL_DMA_IRQHandler+0x6c0>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d00e      	beq.n	8006688 <HAL_DMA_IRQHandler+0x678>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a19      	ldr	r2, [pc, #100]	; (80066d4 <HAL_DMA_IRQHandler+0x6c4>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d009      	beq.n	8006688 <HAL_DMA_IRQHandler+0x678>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a17      	ldr	r2, [pc, #92]	; (80066d8 <HAL_DMA_IRQHandler+0x6c8>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d004      	beq.n	8006688 <HAL_DMA_IRQHandler+0x678>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a16      	ldr	r2, [pc, #88]	; (80066dc <HAL_DMA_IRQHandler+0x6cc>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d12b      	bne.n	80066e0 <HAL_DMA_IRQHandler+0x6d0>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 0310 	and.w	r3, r3, #16
 8006692:	2b00      	cmp	r3, #0
 8006694:	bf14      	ite	ne
 8006696:	2301      	movne	r3, #1
 8006698:	2300      	moveq	r3, #0
 800669a:	b2db      	uxtb	r3, r3
 800669c:	e02a      	b.n	80066f4 <HAL_DMA_IRQHandler+0x6e4>
 800669e:	bf00      	nop
 80066a0:	40020010 	.word	0x40020010
 80066a4:	40020028 	.word	0x40020028
 80066a8:	40020040 	.word	0x40020040
 80066ac:	40020058 	.word	0x40020058
 80066b0:	40020070 	.word	0x40020070
 80066b4:	40020088 	.word	0x40020088
 80066b8:	400200a0 	.word	0x400200a0
 80066bc:	400200b8 	.word	0x400200b8
 80066c0:	40020410 	.word	0x40020410
 80066c4:	40020428 	.word	0x40020428
 80066c8:	40020440 	.word	0x40020440
 80066cc:	40020458 	.word	0x40020458
 80066d0:	40020470 	.word	0x40020470
 80066d4:	40020488 	.word	0x40020488
 80066d8:	400204a0 	.word	0x400204a0
 80066dc:	400204b8 	.word	0x400204b8
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0302 	and.w	r3, r3, #2
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	bf14      	ite	ne
 80066ee:	2301      	movne	r3, #1
 80066f0:	2300      	moveq	r3, #0
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f000 8087 	beq.w	8006808 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066fe:	f003 031f 	and.w	r3, r3, #31
 8006702:	2220      	movs	r2, #32
 8006704:	409a      	lsls	r2, r3
 8006706:	6a3b      	ldr	r3, [r7, #32]
 8006708:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006710:	b2db      	uxtb	r3, r3
 8006712:	2b04      	cmp	r3, #4
 8006714:	d139      	bne.n	800678a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f022 0216 	bic.w	r2, r2, #22
 8006724:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	695a      	ldr	r2, [r3, #20]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006734:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673a:	2b00      	cmp	r3, #0
 800673c:	d103      	bne.n	8006746 <HAL_DMA_IRQHandler+0x736>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006742:	2b00      	cmp	r3, #0
 8006744:	d007      	beq.n	8006756 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f022 0208 	bic.w	r2, r2, #8
 8006754:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800675a:	f003 031f 	and.w	r3, r3, #31
 800675e:	223f      	movs	r2, #63	; 0x3f
 8006760:	409a      	lsls	r2, r3
 8006762:	6a3b      	ldr	r3, [r7, #32]
 8006764:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800677a:	2b00      	cmp	r3, #0
 800677c:	f000 834a 	beq.w	8006e14 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	4798      	blx	r3
          }
          return;
 8006788:	e344      	b.n	8006e14 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d018      	beq.n	80067ca <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d108      	bne.n	80067b8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d02c      	beq.n	8006808 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	4798      	blx	r3
 80067b6:	e027      	b.n	8006808 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d023      	beq.n	8006808 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	4798      	blx	r3
 80067c8:	e01e      	b.n	8006808 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d10f      	bne.n	80067f8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f022 0210 	bic.w	r2, r2, #16
 80067e6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d003      	beq.n	8006808 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800680c:	2b00      	cmp	r3, #0
 800680e:	f000 8306 	beq.w	8006e1e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	2b00      	cmp	r3, #0
 800681c:	f000 8088 	beq.w	8006930 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2204      	movs	r2, #4
 8006824:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a7a      	ldr	r2, [pc, #488]	; (8006a18 <HAL_DMA_IRQHandler+0xa08>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d04a      	beq.n	80068c8 <HAL_DMA_IRQHandler+0x8b8>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a79      	ldr	r2, [pc, #484]	; (8006a1c <HAL_DMA_IRQHandler+0xa0c>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d045      	beq.n	80068c8 <HAL_DMA_IRQHandler+0x8b8>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a77      	ldr	r2, [pc, #476]	; (8006a20 <HAL_DMA_IRQHandler+0xa10>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d040      	beq.n	80068c8 <HAL_DMA_IRQHandler+0x8b8>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a76      	ldr	r2, [pc, #472]	; (8006a24 <HAL_DMA_IRQHandler+0xa14>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d03b      	beq.n	80068c8 <HAL_DMA_IRQHandler+0x8b8>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a74      	ldr	r2, [pc, #464]	; (8006a28 <HAL_DMA_IRQHandler+0xa18>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d036      	beq.n	80068c8 <HAL_DMA_IRQHandler+0x8b8>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a73      	ldr	r2, [pc, #460]	; (8006a2c <HAL_DMA_IRQHandler+0xa1c>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d031      	beq.n	80068c8 <HAL_DMA_IRQHandler+0x8b8>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a71      	ldr	r2, [pc, #452]	; (8006a30 <HAL_DMA_IRQHandler+0xa20>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d02c      	beq.n	80068c8 <HAL_DMA_IRQHandler+0x8b8>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a70      	ldr	r2, [pc, #448]	; (8006a34 <HAL_DMA_IRQHandler+0xa24>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d027      	beq.n	80068c8 <HAL_DMA_IRQHandler+0x8b8>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a6e      	ldr	r2, [pc, #440]	; (8006a38 <HAL_DMA_IRQHandler+0xa28>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d022      	beq.n	80068c8 <HAL_DMA_IRQHandler+0x8b8>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a6d      	ldr	r2, [pc, #436]	; (8006a3c <HAL_DMA_IRQHandler+0xa2c>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d01d      	beq.n	80068c8 <HAL_DMA_IRQHandler+0x8b8>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a6b      	ldr	r2, [pc, #428]	; (8006a40 <HAL_DMA_IRQHandler+0xa30>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d018      	beq.n	80068c8 <HAL_DMA_IRQHandler+0x8b8>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a6a      	ldr	r2, [pc, #424]	; (8006a44 <HAL_DMA_IRQHandler+0xa34>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d013      	beq.n	80068c8 <HAL_DMA_IRQHandler+0x8b8>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a68      	ldr	r2, [pc, #416]	; (8006a48 <HAL_DMA_IRQHandler+0xa38>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d00e      	beq.n	80068c8 <HAL_DMA_IRQHandler+0x8b8>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a67      	ldr	r2, [pc, #412]	; (8006a4c <HAL_DMA_IRQHandler+0xa3c>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d009      	beq.n	80068c8 <HAL_DMA_IRQHandler+0x8b8>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a65      	ldr	r2, [pc, #404]	; (8006a50 <HAL_DMA_IRQHandler+0xa40>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d004      	beq.n	80068c8 <HAL_DMA_IRQHandler+0x8b8>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a64      	ldr	r2, [pc, #400]	; (8006a54 <HAL_DMA_IRQHandler+0xa44>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d108      	bne.n	80068da <HAL_DMA_IRQHandler+0x8ca>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f022 0201 	bic.w	r2, r2, #1
 80068d6:	601a      	str	r2, [r3, #0]
 80068d8:	e007      	b.n	80068ea <HAL_DMA_IRQHandler+0x8da>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f022 0201 	bic.w	r2, r2, #1
 80068e8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	3301      	adds	r3, #1
 80068ee:	60fb      	str	r3, [r7, #12]
 80068f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d307      	bcc.n	8006906 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 0301 	and.w	r3, r3, #1
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1f2      	bne.n	80068ea <HAL_DMA_IRQHandler+0x8da>
 8006904:	e000      	b.n	8006908 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006906:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 0301 	and.w	r3, r3, #1
 8006912:	2b00      	cmp	r3, #0
 8006914:	d004      	beq.n	8006920 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2203      	movs	r2, #3
 800691a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800691e:	e003      	b.n	8006928 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006934:	2b00      	cmp	r3, #0
 8006936:	f000 8272 	beq.w	8006e1e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	4798      	blx	r3
 8006942:	e26c      	b.n	8006e1e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a43      	ldr	r2, [pc, #268]	; (8006a58 <HAL_DMA_IRQHandler+0xa48>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d022      	beq.n	8006994 <HAL_DMA_IRQHandler+0x984>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a42      	ldr	r2, [pc, #264]	; (8006a5c <HAL_DMA_IRQHandler+0xa4c>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d01d      	beq.n	8006994 <HAL_DMA_IRQHandler+0x984>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a40      	ldr	r2, [pc, #256]	; (8006a60 <HAL_DMA_IRQHandler+0xa50>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d018      	beq.n	8006994 <HAL_DMA_IRQHandler+0x984>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a3f      	ldr	r2, [pc, #252]	; (8006a64 <HAL_DMA_IRQHandler+0xa54>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d013      	beq.n	8006994 <HAL_DMA_IRQHandler+0x984>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a3d      	ldr	r2, [pc, #244]	; (8006a68 <HAL_DMA_IRQHandler+0xa58>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d00e      	beq.n	8006994 <HAL_DMA_IRQHandler+0x984>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a3c      	ldr	r2, [pc, #240]	; (8006a6c <HAL_DMA_IRQHandler+0xa5c>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d009      	beq.n	8006994 <HAL_DMA_IRQHandler+0x984>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a3a      	ldr	r2, [pc, #232]	; (8006a70 <HAL_DMA_IRQHandler+0xa60>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d004      	beq.n	8006994 <HAL_DMA_IRQHandler+0x984>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a39      	ldr	r2, [pc, #228]	; (8006a74 <HAL_DMA_IRQHandler+0xa64>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d101      	bne.n	8006998 <HAL_DMA_IRQHandler+0x988>
 8006994:	2301      	movs	r3, #1
 8006996:	e000      	b.n	800699a <HAL_DMA_IRQHandler+0x98a>
 8006998:	2300      	movs	r3, #0
 800699a:	2b00      	cmp	r3, #0
 800699c:	f000 823f 	beq.w	8006e1e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ac:	f003 031f 	and.w	r3, r3, #31
 80069b0:	2204      	movs	r2, #4
 80069b2:	409a      	lsls	r2, r3
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	4013      	ands	r3, r2
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f000 80cd 	beq.w	8006b58 <HAL_DMA_IRQHandler+0xb48>
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	f003 0304 	and.w	r3, r3, #4
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f000 80c7 	beq.w	8006b58 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ce:	f003 031f 	and.w	r3, r3, #31
 80069d2:	2204      	movs	r2, #4
 80069d4:	409a      	lsls	r2, r3
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d049      	beq.n	8006a78 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d109      	bne.n	8006a02 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	f000 8210 	beq.w	8006e18 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a00:	e20a      	b.n	8006e18 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	f000 8206 	beq.w	8006e18 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a14:	e200      	b.n	8006e18 <HAL_DMA_IRQHandler+0xe08>
 8006a16:	bf00      	nop
 8006a18:	40020010 	.word	0x40020010
 8006a1c:	40020028 	.word	0x40020028
 8006a20:	40020040 	.word	0x40020040
 8006a24:	40020058 	.word	0x40020058
 8006a28:	40020070 	.word	0x40020070
 8006a2c:	40020088 	.word	0x40020088
 8006a30:	400200a0 	.word	0x400200a0
 8006a34:	400200b8 	.word	0x400200b8
 8006a38:	40020410 	.word	0x40020410
 8006a3c:	40020428 	.word	0x40020428
 8006a40:	40020440 	.word	0x40020440
 8006a44:	40020458 	.word	0x40020458
 8006a48:	40020470 	.word	0x40020470
 8006a4c:	40020488 	.word	0x40020488
 8006a50:	400204a0 	.word	0x400204a0
 8006a54:	400204b8 	.word	0x400204b8
 8006a58:	58025408 	.word	0x58025408
 8006a5c:	5802541c 	.word	0x5802541c
 8006a60:	58025430 	.word	0x58025430
 8006a64:	58025444 	.word	0x58025444
 8006a68:	58025458 	.word	0x58025458
 8006a6c:	5802546c 	.word	0x5802546c
 8006a70:	58025480 	.word	0x58025480
 8006a74:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	f003 0320 	and.w	r3, r3, #32
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d160      	bne.n	8006b44 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a7f      	ldr	r2, [pc, #508]	; (8006c84 <HAL_DMA_IRQHandler+0xc74>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d04a      	beq.n	8006b22 <HAL_DMA_IRQHandler+0xb12>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a7d      	ldr	r2, [pc, #500]	; (8006c88 <HAL_DMA_IRQHandler+0xc78>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d045      	beq.n	8006b22 <HAL_DMA_IRQHandler+0xb12>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a7c      	ldr	r2, [pc, #496]	; (8006c8c <HAL_DMA_IRQHandler+0xc7c>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d040      	beq.n	8006b22 <HAL_DMA_IRQHandler+0xb12>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a7a      	ldr	r2, [pc, #488]	; (8006c90 <HAL_DMA_IRQHandler+0xc80>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d03b      	beq.n	8006b22 <HAL_DMA_IRQHandler+0xb12>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a79      	ldr	r2, [pc, #484]	; (8006c94 <HAL_DMA_IRQHandler+0xc84>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d036      	beq.n	8006b22 <HAL_DMA_IRQHandler+0xb12>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a77      	ldr	r2, [pc, #476]	; (8006c98 <HAL_DMA_IRQHandler+0xc88>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d031      	beq.n	8006b22 <HAL_DMA_IRQHandler+0xb12>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a76      	ldr	r2, [pc, #472]	; (8006c9c <HAL_DMA_IRQHandler+0xc8c>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d02c      	beq.n	8006b22 <HAL_DMA_IRQHandler+0xb12>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a74      	ldr	r2, [pc, #464]	; (8006ca0 <HAL_DMA_IRQHandler+0xc90>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d027      	beq.n	8006b22 <HAL_DMA_IRQHandler+0xb12>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a73      	ldr	r2, [pc, #460]	; (8006ca4 <HAL_DMA_IRQHandler+0xc94>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d022      	beq.n	8006b22 <HAL_DMA_IRQHandler+0xb12>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a71      	ldr	r2, [pc, #452]	; (8006ca8 <HAL_DMA_IRQHandler+0xc98>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d01d      	beq.n	8006b22 <HAL_DMA_IRQHandler+0xb12>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a70      	ldr	r2, [pc, #448]	; (8006cac <HAL_DMA_IRQHandler+0xc9c>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d018      	beq.n	8006b22 <HAL_DMA_IRQHandler+0xb12>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a6e      	ldr	r2, [pc, #440]	; (8006cb0 <HAL_DMA_IRQHandler+0xca0>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d013      	beq.n	8006b22 <HAL_DMA_IRQHandler+0xb12>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a6d      	ldr	r2, [pc, #436]	; (8006cb4 <HAL_DMA_IRQHandler+0xca4>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d00e      	beq.n	8006b22 <HAL_DMA_IRQHandler+0xb12>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a6b      	ldr	r2, [pc, #428]	; (8006cb8 <HAL_DMA_IRQHandler+0xca8>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d009      	beq.n	8006b22 <HAL_DMA_IRQHandler+0xb12>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a6a      	ldr	r2, [pc, #424]	; (8006cbc <HAL_DMA_IRQHandler+0xcac>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d004      	beq.n	8006b22 <HAL_DMA_IRQHandler+0xb12>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a68      	ldr	r2, [pc, #416]	; (8006cc0 <HAL_DMA_IRQHandler+0xcb0>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d108      	bne.n	8006b34 <HAL_DMA_IRQHandler+0xb24>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f022 0208 	bic.w	r2, r2, #8
 8006b30:	601a      	str	r2, [r3, #0]
 8006b32:	e007      	b.n	8006b44 <HAL_DMA_IRQHandler+0xb34>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f022 0204 	bic.w	r2, r2, #4
 8006b42:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f000 8165 	beq.w	8006e18 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b56:	e15f      	b.n	8006e18 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b5c:	f003 031f 	and.w	r3, r3, #31
 8006b60:	2202      	movs	r2, #2
 8006b62:	409a      	lsls	r2, r3
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	4013      	ands	r3, r2
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f000 80c5 	beq.w	8006cf8 <HAL_DMA_IRQHandler+0xce8>
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	f003 0302 	and.w	r3, r3, #2
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	f000 80bf 	beq.w	8006cf8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b7e:	f003 031f 	and.w	r3, r3, #31
 8006b82:	2202      	movs	r2, #2
 8006b84:	409a      	lsls	r2, r3
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d018      	beq.n	8006bc6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d109      	bne.n	8006bb2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	f000 813a 	beq.w	8006e1c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bb0:	e134      	b.n	8006e1c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	f000 8130 	beq.w	8006e1c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bc4:	e12a      	b.n	8006e1c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	f003 0320 	and.w	r3, r3, #32
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f040 8089 	bne.w	8006ce4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a2b      	ldr	r2, [pc, #172]	; (8006c84 <HAL_DMA_IRQHandler+0xc74>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d04a      	beq.n	8006c72 <HAL_DMA_IRQHandler+0xc62>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a29      	ldr	r2, [pc, #164]	; (8006c88 <HAL_DMA_IRQHandler+0xc78>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d045      	beq.n	8006c72 <HAL_DMA_IRQHandler+0xc62>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a28      	ldr	r2, [pc, #160]	; (8006c8c <HAL_DMA_IRQHandler+0xc7c>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d040      	beq.n	8006c72 <HAL_DMA_IRQHandler+0xc62>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a26      	ldr	r2, [pc, #152]	; (8006c90 <HAL_DMA_IRQHandler+0xc80>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d03b      	beq.n	8006c72 <HAL_DMA_IRQHandler+0xc62>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a25      	ldr	r2, [pc, #148]	; (8006c94 <HAL_DMA_IRQHandler+0xc84>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d036      	beq.n	8006c72 <HAL_DMA_IRQHandler+0xc62>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a23      	ldr	r2, [pc, #140]	; (8006c98 <HAL_DMA_IRQHandler+0xc88>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d031      	beq.n	8006c72 <HAL_DMA_IRQHandler+0xc62>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a22      	ldr	r2, [pc, #136]	; (8006c9c <HAL_DMA_IRQHandler+0xc8c>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d02c      	beq.n	8006c72 <HAL_DMA_IRQHandler+0xc62>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a20      	ldr	r2, [pc, #128]	; (8006ca0 <HAL_DMA_IRQHandler+0xc90>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d027      	beq.n	8006c72 <HAL_DMA_IRQHandler+0xc62>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a1f      	ldr	r2, [pc, #124]	; (8006ca4 <HAL_DMA_IRQHandler+0xc94>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d022      	beq.n	8006c72 <HAL_DMA_IRQHandler+0xc62>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a1d      	ldr	r2, [pc, #116]	; (8006ca8 <HAL_DMA_IRQHandler+0xc98>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d01d      	beq.n	8006c72 <HAL_DMA_IRQHandler+0xc62>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a1c      	ldr	r2, [pc, #112]	; (8006cac <HAL_DMA_IRQHandler+0xc9c>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d018      	beq.n	8006c72 <HAL_DMA_IRQHandler+0xc62>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a1a      	ldr	r2, [pc, #104]	; (8006cb0 <HAL_DMA_IRQHandler+0xca0>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d013      	beq.n	8006c72 <HAL_DMA_IRQHandler+0xc62>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a19      	ldr	r2, [pc, #100]	; (8006cb4 <HAL_DMA_IRQHandler+0xca4>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d00e      	beq.n	8006c72 <HAL_DMA_IRQHandler+0xc62>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a17      	ldr	r2, [pc, #92]	; (8006cb8 <HAL_DMA_IRQHandler+0xca8>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d009      	beq.n	8006c72 <HAL_DMA_IRQHandler+0xc62>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a16      	ldr	r2, [pc, #88]	; (8006cbc <HAL_DMA_IRQHandler+0xcac>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d004      	beq.n	8006c72 <HAL_DMA_IRQHandler+0xc62>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a14      	ldr	r2, [pc, #80]	; (8006cc0 <HAL_DMA_IRQHandler+0xcb0>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d128      	bne.n	8006cc4 <HAL_DMA_IRQHandler+0xcb4>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f022 0214 	bic.w	r2, r2, #20
 8006c80:	601a      	str	r2, [r3, #0]
 8006c82:	e027      	b.n	8006cd4 <HAL_DMA_IRQHandler+0xcc4>
 8006c84:	40020010 	.word	0x40020010
 8006c88:	40020028 	.word	0x40020028
 8006c8c:	40020040 	.word	0x40020040
 8006c90:	40020058 	.word	0x40020058
 8006c94:	40020070 	.word	0x40020070
 8006c98:	40020088 	.word	0x40020088
 8006c9c:	400200a0 	.word	0x400200a0
 8006ca0:	400200b8 	.word	0x400200b8
 8006ca4:	40020410 	.word	0x40020410
 8006ca8:	40020428 	.word	0x40020428
 8006cac:	40020440 	.word	0x40020440
 8006cb0:	40020458 	.word	0x40020458
 8006cb4:	40020470 	.word	0x40020470
 8006cb8:	40020488 	.word	0x40020488
 8006cbc:	400204a0 	.word	0x400204a0
 8006cc0:	400204b8 	.word	0x400204b8
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f022 020a 	bic.w	r2, r2, #10
 8006cd2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f000 8097 	beq.w	8006e1c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cf6:	e091      	b.n	8006e1c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cfc:	f003 031f 	and.w	r3, r3, #31
 8006d00:	2208      	movs	r2, #8
 8006d02:	409a      	lsls	r2, r3
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	4013      	ands	r3, r2
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f000 8088 	beq.w	8006e1e <HAL_DMA_IRQHandler+0xe0e>
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	f003 0308 	and.w	r3, r3, #8
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f000 8082 	beq.w	8006e1e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a41      	ldr	r2, [pc, #260]	; (8006e24 <HAL_DMA_IRQHandler+0xe14>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d04a      	beq.n	8006dba <HAL_DMA_IRQHandler+0xdaa>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a3f      	ldr	r2, [pc, #252]	; (8006e28 <HAL_DMA_IRQHandler+0xe18>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d045      	beq.n	8006dba <HAL_DMA_IRQHandler+0xdaa>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a3e      	ldr	r2, [pc, #248]	; (8006e2c <HAL_DMA_IRQHandler+0xe1c>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d040      	beq.n	8006dba <HAL_DMA_IRQHandler+0xdaa>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a3c      	ldr	r2, [pc, #240]	; (8006e30 <HAL_DMA_IRQHandler+0xe20>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d03b      	beq.n	8006dba <HAL_DMA_IRQHandler+0xdaa>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a3b      	ldr	r2, [pc, #236]	; (8006e34 <HAL_DMA_IRQHandler+0xe24>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d036      	beq.n	8006dba <HAL_DMA_IRQHandler+0xdaa>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a39      	ldr	r2, [pc, #228]	; (8006e38 <HAL_DMA_IRQHandler+0xe28>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d031      	beq.n	8006dba <HAL_DMA_IRQHandler+0xdaa>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a38      	ldr	r2, [pc, #224]	; (8006e3c <HAL_DMA_IRQHandler+0xe2c>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d02c      	beq.n	8006dba <HAL_DMA_IRQHandler+0xdaa>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a36      	ldr	r2, [pc, #216]	; (8006e40 <HAL_DMA_IRQHandler+0xe30>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d027      	beq.n	8006dba <HAL_DMA_IRQHandler+0xdaa>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a35      	ldr	r2, [pc, #212]	; (8006e44 <HAL_DMA_IRQHandler+0xe34>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d022      	beq.n	8006dba <HAL_DMA_IRQHandler+0xdaa>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a33      	ldr	r2, [pc, #204]	; (8006e48 <HAL_DMA_IRQHandler+0xe38>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d01d      	beq.n	8006dba <HAL_DMA_IRQHandler+0xdaa>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a32      	ldr	r2, [pc, #200]	; (8006e4c <HAL_DMA_IRQHandler+0xe3c>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d018      	beq.n	8006dba <HAL_DMA_IRQHandler+0xdaa>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a30      	ldr	r2, [pc, #192]	; (8006e50 <HAL_DMA_IRQHandler+0xe40>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d013      	beq.n	8006dba <HAL_DMA_IRQHandler+0xdaa>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a2f      	ldr	r2, [pc, #188]	; (8006e54 <HAL_DMA_IRQHandler+0xe44>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d00e      	beq.n	8006dba <HAL_DMA_IRQHandler+0xdaa>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a2d      	ldr	r2, [pc, #180]	; (8006e58 <HAL_DMA_IRQHandler+0xe48>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d009      	beq.n	8006dba <HAL_DMA_IRQHandler+0xdaa>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a2c      	ldr	r2, [pc, #176]	; (8006e5c <HAL_DMA_IRQHandler+0xe4c>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d004      	beq.n	8006dba <HAL_DMA_IRQHandler+0xdaa>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a2a      	ldr	r2, [pc, #168]	; (8006e60 <HAL_DMA_IRQHandler+0xe50>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d108      	bne.n	8006dcc <HAL_DMA_IRQHandler+0xdbc>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f022 021c 	bic.w	r2, r2, #28
 8006dc8:	601a      	str	r2, [r3, #0]
 8006dca:	e007      	b.n	8006ddc <HAL_DMA_IRQHandler+0xdcc>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f022 020e 	bic.w	r2, r2, #14
 8006dda:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006de0:	f003 031f 	and.w	r3, r3, #31
 8006de4:	2201      	movs	r2, #1
 8006de6:	409a      	lsls	r2, r3
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2201      	movs	r2, #1
 8006df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d009      	beq.n	8006e1e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	4798      	blx	r3
 8006e12:	e004      	b.n	8006e1e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006e14:	bf00      	nop
 8006e16:	e002      	b.n	8006e1e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e18:	bf00      	nop
 8006e1a:	e000      	b.n	8006e1e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e1c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006e1e:	3728      	adds	r7, #40	; 0x28
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	40020010 	.word	0x40020010
 8006e28:	40020028 	.word	0x40020028
 8006e2c:	40020040 	.word	0x40020040
 8006e30:	40020058 	.word	0x40020058
 8006e34:	40020070 	.word	0x40020070
 8006e38:	40020088 	.word	0x40020088
 8006e3c:	400200a0 	.word	0x400200a0
 8006e40:	400200b8 	.word	0x400200b8
 8006e44:	40020410 	.word	0x40020410
 8006e48:	40020428 	.word	0x40020428
 8006e4c:	40020440 	.word	0x40020440
 8006e50:	40020458 	.word	0x40020458
 8006e54:	40020470 	.word	0x40020470
 8006e58:	40020488 	.word	0x40020488
 8006e5c:	400204a0 	.word	0x400204a0
 8006e60:	400204b8 	.word	0x400204b8

08006e64 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b087      	sub	sp, #28
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	607a      	str	r2, [r7, #4]
 8006e70:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e76:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e7c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a7f      	ldr	r2, [pc, #508]	; (8007080 <DMA_SetConfig+0x21c>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d072      	beq.n	8006f6e <DMA_SetConfig+0x10a>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a7d      	ldr	r2, [pc, #500]	; (8007084 <DMA_SetConfig+0x220>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d06d      	beq.n	8006f6e <DMA_SetConfig+0x10a>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a7c      	ldr	r2, [pc, #496]	; (8007088 <DMA_SetConfig+0x224>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d068      	beq.n	8006f6e <DMA_SetConfig+0x10a>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a7a      	ldr	r2, [pc, #488]	; (800708c <DMA_SetConfig+0x228>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d063      	beq.n	8006f6e <DMA_SetConfig+0x10a>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a79      	ldr	r2, [pc, #484]	; (8007090 <DMA_SetConfig+0x22c>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d05e      	beq.n	8006f6e <DMA_SetConfig+0x10a>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a77      	ldr	r2, [pc, #476]	; (8007094 <DMA_SetConfig+0x230>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d059      	beq.n	8006f6e <DMA_SetConfig+0x10a>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a76      	ldr	r2, [pc, #472]	; (8007098 <DMA_SetConfig+0x234>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d054      	beq.n	8006f6e <DMA_SetConfig+0x10a>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a74      	ldr	r2, [pc, #464]	; (800709c <DMA_SetConfig+0x238>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d04f      	beq.n	8006f6e <DMA_SetConfig+0x10a>
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a73      	ldr	r2, [pc, #460]	; (80070a0 <DMA_SetConfig+0x23c>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d04a      	beq.n	8006f6e <DMA_SetConfig+0x10a>
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a71      	ldr	r2, [pc, #452]	; (80070a4 <DMA_SetConfig+0x240>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d045      	beq.n	8006f6e <DMA_SetConfig+0x10a>
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a70      	ldr	r2, [pc, #448]	; (80070a8 <DMA_SetConfig+0x244>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d040      	beq.n	8006f6e <DMA_SetConfig+0x10a>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a6e      	ldr	r2, [pc, #440]	; (80070ac <DMA_SetConfig+0x248>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d03b      	beq.n	8006f6e <DMA_SetConfig+0x10a>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a6d      	ldr	r2, [pc, #436]	; (80070b0 <DMA_SetConfig+0x24c>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d036      	beq.n	8006f6e <DMA_SetConfig+0x10a>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a6b      	ldr	r2, [pc, #428]	; (80070b4 <DMA_SetConfig+0x250>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d031      	beq.n	8006f6e <DMA_SetConfig+0x10a>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a6a      	ldr	r2, [pc, #424]	; (80070b8 <DMA_SetConfig+0x254>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d02c      	beq.n	8006f6e <DMA_SetConfig+0x10a>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a68      	ldr	r2, [pc, #416]	; (80070bc <DMA_SetConfig+0x258>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d027      	beq.n	8006f6e <DMA_SetConfig+0x10a>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a67      	ldr	r2, [pc, #412]	; (80070c0 <DMA_SetConfig+0x25c>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d022      	beq.n	8006f6e <DMA_SetConfig+0x10a>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a65      	ldr	r2, [pc, #404]	; (80070c4 <DMA_SetConfig+0x260>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d01d      	beq.n	8006f6e <DMA_SetConfig+0x10a>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a64      	ldr	r2, [pc, #400]	; (80070c8 <DMA_SetConfig+0x264>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d018      	beq.n	8006f6e <DMA_SetConfig+0x10a>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a62      	ldr	r2, [pc, #392]	; (80070cc <DMA_SetConfig+0x268>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d013      	beq.n	8006f6e <DMA_SetConfig+0x10a>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a61      	ldr	r2, [pc, #388]	; (80070d0 <DMA_SetConfig+0x26c>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d00e      	beq.n	8006f6e <DMA_SetConfig+0x10a>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a5f      	ldr	r2, [pc, #380]	; (80070d4 <DMA_SetConfig+0x270>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d009      	beq.n	8006f6e <DMA_SetConfig+0x10a>
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a5e      	ldr	r2, [pc, #376]	; (80070d8 <DMA_SetConfig+0x274>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d004      	beq.n	8006f6e <DMA_SetConfig+0x10a>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a5c      	ldr	r2, [pc, #368]	; (80070dc <DMA_SetConfig+0x278>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d101      	bne.n	8006f72 <DMA_SetConfig+0x10e>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e000      	b.n	8006f74 <DMA_SetConfig+0x110>
 8006f72:	2300      	movs	r3, #0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00d      	beq.n	8006f94 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006f80:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d004      	beq.n	8006f94 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f8e:	68fa      	ldr	r2, [r7, #12]
 8006f90:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006f92:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a39      	ldr	r2, [pc, #228]	; (8007080 <DMA_SetConfig+0x21c>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d04a      	beq.n	8007034 <DMA_SetConfig+0x1d0>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a38      	ldr	r2, [pc, #224]	; (8007084 <DMA_SetConfig+0x220>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d045      	beq.n	8007034 <DMA_SetConfig+0x1d0>
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a36      	ldr	r2, [pc, #216]	; (8007088 <DMA_SetConfig+0x224>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d040      	beq.n	8007034 <DMA_SetConfig+0x1d0>
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a35      	ldr	r2, [pc, #212]	; (800708c <DMA_SetConfig+0x228>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d03b      	beq.n	8007034 <DMA_SetConfig+0x1d0>
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a33      	ldr	r2, [pc, #204]	; (8007090 <DMA_SetConfig+0x22c>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d036      	beq.n	8007034 <DMA_SetConfig+0x1d0>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a32      	ldr	r2, [pc, #200]	; (8007094 <DMA_SetConfig+0x230>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d031      	beq.n	8007034 <DMA_SetConfig+0x1d0>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a30      	ldr	r2, [pc, #192]	; (8007098 <DMA_SetConfig+0x234>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d02c      	beq.n	8007034 <DMA_SetConfig+0x1d0>
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a2f      	ldr	r2, [pc, #188]	; (800709c <DMA_SetConfig+0x238>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d027      	beq.n	8007034 <DMA_SetConfig+0x1d0>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a2d      	ldr	r2, [pc, #180]	; (80070a0 <DMA_SetConfig+0x23c>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d022      	beq.n	8007034 <DMA_SetConfig+0x1d0>
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a2c      	ldr	r2, [pc, #176]	; (80070a4 <DMA_SetConfig+0x240>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d01d      	beq.n	8007034 <DMA_SetConfig+0x1d0>
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a2a      	ldr	r2, [pc, #168]	; (80070a8 <DMA_SetConfig+0x244>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d018      	beq.n	8007034 <DMA_SetConfig+0x1d0>
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a29      	ldr	r2, [pc, #164]	; (80070ac <DMA_SetConfig+0x248>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d013      	beq.n	8007034 <DMA_SetConfig+0x1d0>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a27      	ldr	r2, [pc, #156]	; (80070b0 <DMA_SetConfig+0x24c>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d00e      	beq.n	8007034 <DMA_SetConfig+0x1d0>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a26      	ldr	r2, [pc, #152]	; (80070b4 <DMA_SetConfig+0x250>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d009      	beq.n	8007034 <DMA_SetConfig+0x1d0>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a24      	ldr	r2, [pc, #144]	; (80070b8 <DMA_SetConfig+0x254>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d004      	beq.n	8007034 <DMA_SetConfig+0x1d0>
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a23      	ldr	r2, [pc, #140]	; (80070bc <DMA_SetConfig+0x258>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d101      	bne.n	8007038 <DMA_SetConfig+0x1d4>
 8007034:	2301      	movs	r3, #1
 8007036:	e000      	b.n	800703a <DMA_SetConfig+0x1d6>
 8007038:	2300      	movs	r3, #0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d059      	beq.n	80070f2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007042:	f003 031f 	and.w	r3, r3, #31
 8007046:	223f      	movs	r2, #63	; 0x3f
 8007048:	409a      	lsls	r2, r3
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800705c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	683a      	ldr	r2, [r7, #0]
 8007064:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	2b40      	cmp	r3, #64	; 0x40
 800706c:	d138      	bne.n	80070e0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68ba      	ldr	r2, [r7, #8]
 800707c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800707e:	e086      	b.n	800718e <DMA_SetConfig+0x32a>
 8007080:	40020010 	.word	0x40020010
 8007084:	40020028 	.word	0x40020028
 8007088:	40020040 	.word	0x40020040
 800708c:	40020058 	.word	0x40020058
 8007090:	40020070 	.word	0x40020070
 8007094:	40020088 	.word	0x40020088
 8007098:	400200a0 	.word	0x400200a0
 800709c:	400200b8 	.word	0x400200b8
 80070a0:	40020410 	.word	0x40020410
 80070a4:	40020428 	.word	0x40020428
 80070a8:	40020440 	.word	0x40020440
 80070ac:	40020458 	.word	0x40020458
 80070b0:	40020470 	.word	0x40020470
 80070b4:	40020488 	.word	0x40020488
 80070b8:	400204a0 	.word	0x400204a0
 80070bc:	400204b8 	.word	0x400204b8
 80070c0:	58025408 	.word	0x58025408
 80070c4:	5802541c 	.word	0x5802541c
 80070c8:	58025430 	.word	0x58025430
 80070cc:	58025444 	.word	0x58025444
 80070d0:	58025458 	.word	0x58025458
 80070d4:	5802546c 	.word	0x5802546c
 80070d8:	58025480 	.word	0x58025480
 80070dc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	60da      	str	r2, [r3, #12]
}
 80070f0:	e04d      	b.n	800718e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a29      	ldr	r2, [pc, #164]	; (800719c <DMA_SetConfig+0x338>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d022      	beq.n	8007142 <DMA_SetConfig+0x2de>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a27      	ldr	r2, [pc, #156]	; (80071a0 <DMA_SetConfig+0x33c>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d01d      	beq.n	8007142 <DMA_SetConfig+0x2de>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a26      	ldr	r2, [pc, #152]	; (80071a4 <DMA_SetConfig+0x340>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d018      	beq.n	8007142 <DMA_SetConfig+0x2de>
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a24      	ldr	r2, [pc, #144]	; (80071a8 <DMA_SetConfig+0x344>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d013      	beq.n	8007142 <DMA_SetConfig+0x2de>
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a23      	ldr	r2, [pc, #140]	; (80071ac <DMA_SetConfig+0x348>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d00e      	beq.n	8007142 <DMA_SetConfig+0x2de>
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a21      	ldr	r2, [pc, #132]	; (80071b0 <DMA_SetConfig+0x34c>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d009      	beq.n	8007142 <DMA_SetConfig+0x2de>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a20      	ldr	r2, [pc, #128]	; (80071b4 <DMA_SetConfig+0x350>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d004      	beq.n	8007142 <DMA_SetConfig+0x2de>
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a1e      	ldr	r2, [pc, #120]	; (80071b8 <DMA_SetConfig+0x354>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d101      	bne.n	8007146 <DMA_SetConfig+0x2e2>
 8007142:	2301      	movs	r3, #1
 8007144:	e000      	b.n	8007148 <DMA_SetConfig+0x2e4>
 8007146:	2300      	movs	r3, #0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d020      	beq.n	800718e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007150:	f003 031f 	and.w	r3, r3, #31
 8007154:	2201      	movs	r2, #1
 8007156:	409a      	lsls	r2, r3
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	683a      	ldr	r2, [r7, #0]
 8007162:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	2b40      	cmp	r3, #64	; 0x40
 800716a:	d108      	bne.n	800717e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68ba      	ldr	r2, [r7, #8]
 800717a:	60da      	str	r2, [r3, #12]
}
 800717c:	e007      	b.n	800718e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	60da      	str	r2, [r3, #12]
}
 800718e:	bf00      	nop
 8007190:	371c      	adds	r7, #28
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	58025408 	.word	0x58025408
 80071a0:	5802541c 	.word	0x5802541c
 80071a4:	58025430 	.word	0x58025430
 80071a8:	58025444 	.word	0x58025444
 80071ac:	58025458 	.word	0x58025458
 80071b0:	5802546c 	.word	0x5802546c
 80071b4:	58025480 	.word	0x58025480
 80071b8:	58025494 	.word	0x58025494

080071bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80071bc:	b480      	push	{r7}
 80071be:	b085      	sub	sp, #20
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a42      	ldr	r2, [pc, #264]	; (80072d4 <DMA_CalcBaseAndBitshift+0x118>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d04a      	beq.n	8007264 <DMA_CalcBaseAndBitshift+0xa8>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a41      	ldr	r2, [pc, #260]	; (80072d8 <DMA_CalcBaseAndBitshift+0x11c>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d045      	beq.n	8007264 <DMA_CalcBaseAndBitshift+0xa8>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a3f      	ldr	r2, [pc, #252]	; (80072dc <DMA_CalcBaseAndBitshift+0x120>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d040      	beq.n	8007264 <DMA_CalcBaseAndBitshift+0xa8>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a3e      	ldr	r2, [pc, #248]	; (80072e0 <DMA_CalcBaseAndBitshift+0x124>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d03b      	beq.n	8007264 <DMA_CalcBaseAndBitshift+0xa8>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a3c      	ldr	r2, [pc, #240]	; (80072e4 <DMA_CalcBaseAndBitshift+0x128>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d036      	beq.n	8007264 <DMA_CalcBaseAndBitshift+0xa8>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a3b      	ldr	r2, [pc, #236]	; (80072e8 <DMA_CalcBaseAndBitshift+0x12c>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d031      	beq.n	8007264 <DMA_CalcBaseAndBitshift+0xa8>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a39      	ldr	r2, [pc, #228]	; (80072ec <DMA_CalcBaseAndBitshift+0x130>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d02c      	beq.n	8007264 <DMA_CalcBaseAndBitshift+0xa8>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a38      	ldr	r2, [pc, #224]	; (80072f0 <DMA_CalcBaseAndBitshift+0x134>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d027      	beq.n	8007264 <DMA_CalcBaseAndBitshift+0xa8>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a36      	ldr	r2, [pc, #216]	; (80072f4 <DMA_CalcBaseAndBitshift+0x138>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d022      	beq.n	8007264 <DMA_CalcBaseAndBitshift+0xa8>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a35      	ldr	r2, [pc, #212]	; (80072f8 <DMA_CalcBaseAndBitshift+0x13c>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d01d      	beq.n	8007264 <DMA_CalcBaseAndBitshift+0xa8>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a33      	ldr	r2, [pc, #204]	; (80072fc <DMA_CalcBaseAndBitshift+0x140>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d018      	beq.n	8007264 <DMA_CalcBaseAndBitshift+0xa8>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a32      	ldr	r2, [pc, #200]	; (8007300 <DMA_CalcBaseAndBitshift+0x144>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d013      	beq.n	8007264 <DMA_CalcBaseAndBitshift+0xa8>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a30      	ldr	r2, [pc, #192]	; (8007304 <DMA_CalcBaseAndBitshift+0x148>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d00e      	beq.n	8007264 <DMA_CalcBaseAndBitshift+0xa8>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a2f      	ldr	r2, [pc, #188]	; (8007308 <DMA_CalcBaseAndBitshift+0x14c>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d009      	beq.n	8007264 <DMA_CalcBaseAndBitshift+0xa8>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a2d      	ldr	r2, [pc, #180]	; (800730c <DMA_CalcBaseAndBitshift+0x150>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d004      	beq.n	8007264 <DMA_CalcBaseAndBitshift+0xa8>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a2c      	ldr	r2, [pc, #176]	; (8007310 <DMA_CalcBaseAndBitshift+0x154>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d101      	bne.n	8007268 <DMA_CalcBaseAndBitshift+0xac>
 8007264:	2301      	movs	r3, #1
 8007266:	e000      	b.n	800726a <DMA_CalcBaseAndBitshift+0xae>
 8007268:	2300      	movs	r3, #0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d024      	beq.n	80072b8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	b2db      	uxtb	r3, r3
 8007274:	3b10      	subs	r3, #16
 8007276:	4a27      	ldr	r2, [pc, #156]	; (8007314 <DMA_CalcBaseAndBitshift+0x158>)
 8007278:	fba2 2303 	umull	r2, r3, r2, r3
 800727c:	091b      	lsrs	r3, r3, #4
 800727e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f003 0307 	and.w	r3, r3, #7
 8007286:	4a24      	ldr	r2, [pc, #144]	; (8007318 <DMA_CalcBaseAndBitshift+0x15c>)
 8007288:	5cd3      	ldrb	r3, [r2, r3]
 800728a:	461a      	mov	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2b03      	cmp	r3, #3
 8007294:	d908      	bls.n	80072a8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	461a      	mov	r2, r3
 800729c:	4b1f      	ldr	r3, [pc, #124]	; (800731c <DMA_CalcBaseAndBitshift+0x160>)
 800729e:	4013      	ands	r3, r2
 80072a0:	1d1a      	adds	r2, r3, #4
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	659a      	str	r2, [r3, #88]	; 0x58
 80072a6:	e00d      	b.n	80072c4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	461a      	mov	r2, r3
 80072ae:	4b1b      	ldr	r3, [pc, #108]	; (800731c <DMA_CalcBaseAndBitshift+0x160>)
 80072b0:	4013      	ands	r3, r2
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	6593      	str	r3, [r2, #88]	; 0x58
 80072b6:	e005      	b.n	80072c4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3714      	adds	r7, #20
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr
 80072d4:	40020010 	.word	0x40020010
 80072d8:	40020028 	.word	0x40020028
 80072dc:	40020040 	.word	0x40020040
 80072e0:	40020058 	.word	0x40020058
 80072e4:	40020070 	.word	0x40020070
 80072e8:	40020088 	.word	0x40020088
 80072ec:	400200a0 	.word	0x400200a0
 80072f0:	400200b8 	.word	0x400200b8
 80072f4:	40020410 	.word	0x40020410
 80072f8:	40020428 	.word	0x40020428
 80072fc:	40020440 	.word	0x40020440
 8007300:	40020458 	.word	0x40020458
 8007304:	40020470 	.word	0x40020470
 8007308:	40020488 	.word	0x40020488
 800730c:	400204a0 	.word	0x400204a0
 8007310:	400204b8 	.word	0x400204b8
 8007314:	aaaaaaab 	.word	0xaaaaaaab
 8007318:	08018638 	.word	0x08018638
 800731c:	fffffc00 	.word	0xfffffc00

08007320 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007320:	b480      	push	{r7}
 8007322:	b085      	sub	sp, #20
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007328:	2300      	movs	r3, #0
 800732a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	699b      	ldr	r3, [r3, #24]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d120      	bne.n	8007376 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007338:	2b03      	cmp	r3, #3
 800733a:	d858      	bhi.n	80073ee <DMA_CheckFifoParam+0xce>
 800733c:	a201      	add	r2, pc, #4	; (adr r2, 8007344 <DMA_CheckFifoParam+0x24>)
 800733e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007342:	bf00      	nop
 8007344:	08007355 	.word	0x08007355
 8007348:	08007367 	.word	0x08007367
 800734c:	08007355 	.word	0x08007355
 8007350:	080073ef 	.word	0x080073ef
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007358:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d048      	beq.n	80073f2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007364:	e045      	b.n	80073f2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800736a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800736e:	d142      	bne.n	80073f6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007374:	e03f      	b.n	80073f6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	699b      	ldr	r3, [r3, #24]
 800737a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800737e:	d123      	bne.n	80073c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007384:	2b03      	cmp	r3, #3
 8007386:	d838      	bhi.n	80073fa <DMA_CheckFifoParam+0xda>
 8007388:	a201      	add	r2, pc, #4	; (adr r2, 8007390 <DMA_CheckFifoParam+0x70>)
 800738a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738e:	bf00      	nop
 8007390:	080073a1 	.word	0x080073a1
 8007394:	080073a7 	.word	0x080073a7
 8007398:	080073a1 	.word	0x080073a1
 800739c:	080073b9 	.word	0x080073b9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	73fb      	strb	r3, [r7, #15]
        break;
 80073a4:	e030      	b.n	8007408 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d025      	beq.n	80073fe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80073b6:	e022      	b.n	80073fe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80073c0:	d11f      	bne.n	8007402 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80073c6:	e01c      	b.n	8007402 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d902      	bls.n	80073d6 <DMA_CheckFifoParam+0xb6>
 80073d0:	2b03      	cmp	r3, #3
 80073d2:	d003      	beq.n	80073dc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80073d4:	e018      	b.n	8007408 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	73fb      	strb	r3, [r7, #15]
        break;
 80073da:	e015      	b.n	8007408 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00e      	beq.n	8007406 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	73fb      	strb	r3, [r7, #15]
    break;
 80073ec:	e00b      	b.n	8007406 <DMA_CheckFifoParam+0xe6>
        break;
 80073ee:	bf00      	nop
 80073f0:	e00a      	b.n	8007408 <DMA_CheckFifoParam+0xe8>
        break;
 80073f2:	bf00      	nop
 80073f4:	e008      	b.n	8007408 <DMA_CheckFifoParam+0xe8>
        break;
 80073f6:	bf00      	nop
 80073f8:	e006      	b.n	8007408 <DMA_CheckFifoParam+0xe8>
        break;
 80073fa:	bf00      	nop
 80073fc:	e004      	b.n	8007408 <DMA_CheckFifoParam+0xe8>
        break;
 80073fe:	bf00      	nop
 8007400:	e002      	b.n	8007408 <DMA_CheckFifoParam+0xe8>
        break;
 8007402:	bf00      	nop
 8007404:	e000      	b.n	8007408 <DMA_CheckFifoParam+0xe8>
    break;
 8007406:	bf00      	nop
    }
  }

  return status;
 8007408:	7bfb      	ldrb	r3, [r7, #15]
}
 800740a:	4618      	mov	r0, r3
 800740c:	3714      	adds	r7, #20
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr
 8007416:	bf00      	nop

08007418 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007418:	b480      	push	{r7}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a38      	ldr	r2, [pc, #224]	; (800750c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d022      	beq.n	8007476 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a36      	ldr	r2, [pc, #216]	; (8007510 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d01d      	beq.n	8007476 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a35      	ldr	r2, [pc, #212]	; (8007514 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d018      	beq.n	8007476 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a33      	ldr	r2, [pc, #204]	; (8007518 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d013      	beq.n	8007476 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a32      	ldr	r2, [pc, #200]	; (800751c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d00e      	beq.n	8007476 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a30      	ldr	r2, [pc, #192]	; (8007520 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d009      	beq.n	8007476 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a2f      	ldr	r2, [pc, #188]	; (8007524 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d004      	beq.n	8007476 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a2d      	ldr	r2, [pc, #180]	; (8007528 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d101      	bne.n	800747a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007476:	2301      	movs	r3, #1
 8007478:	e000      	b.n	800747c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800747a:	2300      	movs	r3, #0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d01a      	beq.n	80074b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	b2db      	uxtb	r3, r3
 8007486:	3b08      	subs	r3, #8
 8007488:	4a28      	ldr	r2, [pc, #160]	; (800752c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800748a:	fba2 2303 	umull	r2, r3, r2, r3
 800748e:	091b      	lsrs	r3, r3, #4
 8007490:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	4b26      	ldr	r3, [pc, #152]	; (8007530 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007496:	4413      	add	r3, r2
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	461a      	mov	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4a24      	ldr	r2, [pc, #144]	; (8007534 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80074a4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f003 031f 	and.w	r3, r3, #31
 80074ac:	2201      	movs	r2, #1
 80074ae:	409a      	lsls	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80074b4:	e024      	b.n	8007500 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	3b10      	subs	r3, #16
 80074be:	4a1e      	ldr	r2, [pc, #120]	; (8007538 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80074c0:	fba2 2303 	umull	r2, r3, r2, r3
 80074c4:	091b      	lsrs	r3, r3, #4
 80074c6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	4a1c      	ldr	r2, [pc, #112]	; (800753c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d806      	bhi.n	80074de <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	4a1b      	ldr	r2, [pc, #108]	; (8007540 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d902      	bls.n	80074de <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	3308      	adds	r3, #8
 80074dc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80074de:	68fa      	ldr	r2, [r7, #12]
 80074e0:	4b18      	ldr	r3, [pc, #96]	; (8007544 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80074e2:	4413      	add	r3, r2
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	461a      	mov	r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4a16      	ldr	r2, [pc, #88]	; (8007548 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80074f0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f003 031f 	and.w	r3, r3, #31
 80074f8:	2201      	movs	r2, #1
 80074fa:	409a      	lsls	r2, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007500:	bf00      	nop
 8007502:	3714      	adds	r7, #20
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr
 800750c:	58025408 	.word	0x58025408
 8007510:	5802541c 	.word	0x5802541c
 8007514:	58025430 	.word	0x58025430
 8007518:	58025444 	.word	0x58025444
 800751c:	58025458 	.word	0x58025458
 8007520:	5802546c 	.word	0x5802546c
 8007524:	58025480 	.word	0x58025480
 8007528:	58025494 	.word	0x58025494
 800752c:	cccccccd 	.word	0xcccccccd
 8007530:	16009600 	.word	0x16009600
 8007534:	58025880 	.word	0x58025880
 8007538:	aaaaaaab 	.word	0xaaaaaaab
 800753c:	400204b8 	.word	0x400204b8
 8007540:	4002040f 	.word	0x4002040f
 8007544:	10008200 	.word	0x10008200
 8007548:	40020880 	.word	0x40020880

0800754c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	b2db      	uxtb	r3, r3
 800755a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d04a      	beq.n	80075f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2b08      	cmp	r3, #8
 8007566:	d847      	bhi.n	80075f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a25      	ldr	r2, [pc, #148]	; (8007604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d022      	beq.n	80075b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a24      	ldr	r2, [pc, #144]	; (8007608 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d01d      	beq.n	80075b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a22      	ldr	r2, [pc, #136]	; (800760c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d018      	beq.n	80075b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a21      	ldr	r2, [pc, #132]	; (8007610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d013      	beq.n	80075b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a1f      	ldr	r2, [pc, #124]	; (8007614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d00e      	beq.n	80075b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a1e      	ldr	r2, [pc, #120]	; (8007618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d009      	beq.n	80075b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a1c      	ldr	r2, [pc, #112]	; (800761c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d004      	beq.n	80075b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a1b      	ldr	r2, [pc, #108]	; (8007620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d101      	bne.n	80075bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80075b8:	2301      	movs	r3, #1
 80075ba:	e000      	b.n	80075be <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80075bc:	2300      	movs	r3, #0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00a      	beq.n	80075d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	4b17      	ldr	r3, [pc, #92]	; (8007624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80075c6:	4413      	add	r3, r2
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	461a      	mov	r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4a15      	ldr	r2, [pc, #84]	; (8007628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80075d4:	671a      	str	r2, [r3, #112]	; 0x70
 80075d6:	e009      	b.n	80075ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	4b14      	ldr	r3, [pc, #80]	; (800762c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80075dc:	4413      	add	r3, r2
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	461a      	mov	r2, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a11      	ldr	r2, [pc, #68]	; (8007630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80075ea:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	3b01      	subs	r3, #1
 80075f0:	2201      	movs	r2, #1
 80075f2:	409a      	lsls	r2, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80075f8:	bf00      	nop
 80075fa:	3714      	adds	r7, #20
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr
 8007604:	58025408 	.word	0x58025408
 8007608:	5802541c 	.word	0x5802541c
 800760c:	58025430 	.word	0x58025430
 8007610:	58025444 	.word	0x58025444
 8007614:	58025458 	.word	0x58025458
 8007618:	5802546c 	.word	0x5802546c
 800761c:	58025480 	.word	0x58025480
 8007620:	58025494 	.word	0x58025494
 8007624:	1600963f 	.word	0x1600963f
 8007628:	58025940 	.word	0x58025940
 800762c:	1000823f 	.word	0x1000823f
 8007630:	40020940 	.word	0x40020940

08007634 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b098      	sub	sp, #96	; 0x60
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800763c:	4a84      	ldr	r2, [pc, #528]	; (8007850 <HAL_FDCAN_Init+0x21c>)
 800763e:	f107 030c 	add.w	r3, r7, #12
 8007642:	4611      	mov	r1, r2
 8007644:	224c      	movs	r2, #76	; 0x4c
 8007646:	4618      	mov	r0, r3
 8007648:	f00f fdea 	bl	8017220 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d101      	bne.n	8007656 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e1c6      	b.n	80079e4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a7e      	ldr	r2, [pc, #504]	; (8007854 <HAL_FDCAN_Init+0x220>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d106      	bne.n	800766e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007668:	461a      	mov	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007674:	b2db      	uxtb	r3, r3
 8007676:	2b00      	cmp	r3, #0
 8007678:	d106      	bne.n	8007688 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f7fb faa4 	bl	8002bd0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	699a      	ldr	r2, [r3, #24]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f022 0210 	bic.w	r2, r2, #16
 8007696:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007698:	f7fc fa32 	bl	8003b00 <HAL_GetTick>
 800769c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800769e:	e014      	b.n	80076ca <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80076a0:	f7fc fa2e 	bl	8003b00 <HAL_GetTick>
 80076a4:	4602      	mov	r2, r0
 80076a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	2b0a      	cmp	r3, #10
 80076ac:	d90d      	bls.n	80076ca <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80076b4:	f043 0201 	orr.w	r2, r3, #1
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2203      	movs	r2, #3
 80076c2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e18c      	b.n	80079e4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	f003 0308 	and.w	r3, r3, #8
 80076d4:	2b08      	cmp	r3, #8
 80076d6:	d0e3      	beq.n	80076a0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	699a      	ldr	r2, [r3, #24]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f042 0201 	orr.w	r2, r2, #1
 80076e6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80076e8:	f7fc fa0a 	bl	8003b00 <HAL_GetTick>
 80076ec:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80076ee:	e014      	b.n	800771a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80076f0:	f7fc fa06 	bl	8003b00 <HAL_GetTick>
 80076f4:	4602      	mov	r2, r0
 80076f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	2b0a      	cmp	r3, #10
 80076fc:	d90d      	bls.n	800771a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007704:	f043 0201 	orr.w	r2, r3, #1
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2203      	movs	r2, #3
 8007712:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e164      	b.n	80079e4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	699b      	ldr	r3, [r3, #24]
 8007720:	f003 0301 	and.w	r3, r3, #1
 8007724:	2b00      	cmp	r3, #0
 8007726:	d0e3      	beq.n	80076f0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	699a      	ldr	r2, [r3, #24]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f042 0202 	orr.w	r2, r2, #2
 8007736:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	7c1b      	ldrb	r3, [r3, #16]
 800773c:	2b01      	cmp	r3, #1
 800773e:	d108      	bne.n	8007752 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	699a      	ldr	r2, [r3, #24]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800774e:	619a      	str	r2, [r3, #24]
 8007750:	e007      	b.n	8007762 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	699a      	ldr	r2, [r3, #24]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007760:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	7c5b      	ldrb	r3, [r3, #17]
 8007766:	2b01      	cmp	r3, #1
 8007768:	d108      	bne.n	800777c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	699a      	ldr	r2, [r3, #24]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007778:	619a      	str	r2, [r3, #24]
 800777a:	e007      	b.n	800778c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	699a      	ldr	r2, [r3, #24]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800778a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	7c9b      	ldrb	r3, [r3, #18]
 8007790:	2b01      	cmp	r3, #1
 8007792:	d108      	bne.n	80077a6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	699a      	ldr	r2, [r3, #24]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80077a2:	619a      	str	r2, [r3, #24]
 80077a4:	e007      	b.n	80077b6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	699a      	ldr	r2, [r3, #24]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80077b4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	699b      	ldr	r3, [r3, #24]
 80077bc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	689a      	ldr	r2, [r3, #8]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	430a      	orrs	r2, r1
 80077ca:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	699a      	ldr	r2, [r3, #24]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80077da:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	691a      	ldr	r2, [r3, #16]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f022 0210 	bic.w	r2, r2, #16
 80077ea:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d108      	bne.n	8007806 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	699a      	ldr	r2, [r3, #24]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f042 0204 	orr.w	r2, r2, #4
 8007802:	619a      	str	r2, [r3, #24]
 8007804:	e030      	b.n	8007868 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d02c      	beq.n	8007868 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	2b02      	cmp	r3, #2
 8007814:	d020      	beq.n	8007858 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	699a      	ldr	r2, [r3, #24]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007824:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	691a      	ldr	r2, [r3, #16]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f042 0210 	orr.w	r2, r2, #16
 8007834:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	2b03      	cmp	r3, #3
 800783c:	d114      	bne.n	8007868 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	699a      	ldr	r2, [r3, #24]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f042 0220 	orr.w	r2, r2, #32
 800784c:	619a      	str	r2, [r3, #24]
 800784e:	e00b      	b.n	8007868 <HAL_FDCAN_Init+0x234>
 8007850:	08018524 	.word	0x08018524
 8007854:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	699a      	ldr	r2, [r3, #24]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f042 0220 	orr.w	r2, r2, #32
 8007866:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	699b      	ldr	r3, [r3, #24]
 800786c:	3b01      	subs	r3, #1
 800786e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	69db      	ldr	r3, [r3, #28]
 8007874:	3b01      	subs	r3, #1
 8007876:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007878:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a1b      	ldr	r3, [r3, #32]
 800787e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007880:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	695b      	ldr	r3, [r3, #20]
 8007888:	3b01      	subs	r3, #1
 800788a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007890:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007892:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800789c:	d115      	bne.n	80078ca <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a8:	3b01      	subs	r3, #1
 80078aa:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80078ac:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b2:	3b01      	subs	r3, #1
 80078b4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80078b6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078be:	3b01      	subs	r3, #1
 80078c0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80078c6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80078c8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00a      	beq.n	80078e8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	430a      	orrs	r2, r1
 80078e4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078f0:	4413      	add	r3, r2
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d011      	beq.n	800791a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80078fe:	f023 0107 	bic.w	r1, r3, #7
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	3360      	adds	r3, #96	; 0x60
 800790a:	443b      	add	r3, r7
 800790c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	430a      	orrs	r2, r1
 8007916:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791e:	2b00      	cmp	r3, #0
 8007920:	d011      	beq.n	8007946 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800792a:	f023 0107 	bic.w	r1, r3, #7
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	3360      	adds	r3, #96	; 0x60
 8007936:	443b      	add	r3, r7
 8007938:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	430a      	orrs	r2, r1
 8007942:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800794a:	2b00      	cmp	r3, #0
 800794c:	d012      	beq.n	8007974 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007956:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	3360      	adds	r3, #96	; 0x60
 8007962:	443b      	add	r3, r7
 8007964:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007968:	011a      	lsls	r2, r3, #4
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	430a      	orrs	r2, r1
 8007970:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007978:	2b00      	cmp	r3, #0
 800797a:	d012      	beq.n	80079a2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007984:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	3360      	adds	r3, #96	; 0x60
 8007990:	443b      	add	r3, r7
 8007992:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007996:	021a      	lsls	r2, r3, #8
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	430a      	orrs	r2, r1
 800799e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a11      	ldr	r2, [pc, #68]	; (80079ec <HAL_FDCAN_Init+0x3b8>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d107      	bne.n	80079bc <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	689a      	ldr	r2, [r3, #8]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	f022 0203 	bic.w	r2, r2, #3
 80079ba:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 f80b 	bl	80079f0 <FDCAN_CalcultateRamBlockAddresses>
 80079da:	4603      	mov	r3, r0
 80079dc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80079e0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3760      	adds	r7, #96	; 0x60
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	4000a000 	.word	0x4000a000

080079f0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b085      	sub	sp, #20
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079fc:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007a06:	4ba7      	ldr	r3, [pc, #668]	; (8007ca4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a08:	4013      	ands	r3, r2
 8007a0a:	68ba      	ldr	r2, [r7, #8]
 8007a0c:	0091      	lsls	r1, r2, #2
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	6812      	ldr	r2, [r2, #0]
 8007a12:	430b      	orrs	r3, r1
 8007a14:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a20:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a28:	041a      	lsls	r2, r3, #16
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	430a      	orrs	r2, r1
 8007a30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a38:	68ba      	ldr	r2, [r7, #8]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007a46:	4b97      	ldr	r3, [pc, #604]	; (8007ca4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a48:	4013      	ands	r3, r2
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	0091      	lsls	r1, r2, #2
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	6812      	ldr	r2, [r2, #0]
 8007a52:	430b      	orrs	r3, r1
 8007a54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a60:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a68:	041a      	lsls	r2, r3, #16
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	430a      	orrs	r2, r1
 8007a70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a78:	005b      	lsls	r3, r3, #1
 8007a7a:	68ba      	ldr	r2, [r7, #8]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007a88:	4b86      	ldr	r3, [pc, #536]	; (8007ca4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	68ba      	ldr	r2, [r7, #8]
 8007a8e:	0091      	lsls	r1, r2, #2
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	6812      	ldr	r2, [r2, #0]
 8007a94:	430b      	orrs	r3, r1
 8007a96:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007aa2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aaa:	041a      	lsls	r2, r3, #16
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	430a      	orrs	r2, r1
 8007ab2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007abe:	fb02 f303 	mul.w	r3, r2, r3
 8007ac2:	68ba      	ldr	r2, [r7, #8]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007ad0:	4b74      	ldr	r3, [pc, #464]	; (8007ca4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	68ba      	ldr	r2, [r7, #8]
 8007ad6:	0091      	lsls	r1, r2, #2
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	6812      	ldr	r2, [r2, #0]
 8007adc:	430b      	orrs	r3, r1
 8007ade:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007aea:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007af2:	041a      	lsls	r2, r3, #16
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	430a      	orrs	r2, r1
 8007afa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007b06:	fb02 f303 	mul.w	r3, r2, r3
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007b18:	4b62      	ldr	r3, [pc, #392]	; (8007ca4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007b1a:	4013      	ands	r3, r2
 8007b1c:	68ba      	ldr	r2, [r7, #8]
 8007b1e:	0091      	lsls	r1, r2, #2
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	6812      	ldr	r2, [r2, #0]
 8007b24:	430b      	orrs	r3, r1
 8007b26:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007b32:	fb02 f303 	mul.w	r3, r2, r3
 8007b36:	68ba      	ldr	r2, [r7, #8]
 8007b38:	4413      	add	r3, r2
 8007b3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007b44:	4b57      	ldr	r3, [pc, #348]	; (8007ca4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007b46:	4013      	ands	r3, r2
 8007b48:	68ba      	ldr	r2, [r7, #8]
 8007b4a:	0091      	lsls	r1, r2, #2
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	6812      	ldr	r2, [r2, #0]
 8007b50:	430b      	orrs	r3, r1
 8007b52:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b5e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b66:	041a      	lsls	r2, r3, #16
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	430a      	orrs	r2, r1
 8007b6e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b76:	005b      	lsls	r3, r3, #1
 8007b78:	68ba      	ldr	r2, [r7, #8]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007b86:	4b47      	ldr	r3, [pc, #284]	; (8007ca4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007b88:	4013      	ands	r3, r2
 8007b8a:	68ba      	ldr	r2, [r7, #8]
 8007b8c:	0091      	lsls	r1, r2, #2
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	6812      	ldr	r2, [r2, #0]
 8007b92:	430b      	orrs	r3, r1
 8007b94:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007ba0:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ba8:	041a      	lsls	r2, r3, #16
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	430a      	orrs	r2, r1
 8007bb0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007bbc:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bc4:	061a      	lsls	r2, r3, #24
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	430a      	orrs	r2, r1
 8007bcc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bd4:	4b34      	ldr	r3, [pc, #208]	; (8007ca8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007bd6:	4413      	add	r3, r2
 8007bd8:	009a      	lsls	r2, r3, #2
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	441a      	add	r2, r3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bf6:	00db      	lsls	r3, r3, #3
 8007bf8:	441a      	add	r2, r3
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c06:	6879      	ldr	r1, [r7, #4]
 8007c08:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007c0a:	fb01 f303 	mul.w	r3, r1, r3
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	441a      	add	r2, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c1e:	6879      	ldr	r1, [r7, #4]
 8007c20:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007c22:	fb01 f303 	mul.w	r3, r1, r3
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	441a      	add	r2, r3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c36:	6879      	ldr	r1, [r7, #4]
 8007c38:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8007c3a:	fb01 f303 	mul.w	r3, r1, r3
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	441a      	add	r2, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c52:	00db      	lsls	r3, r3, #3
 8007c54:	441a      	add	r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c66:	6879      	ldr	r1, [r7, #4]
 8007c68:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007c6a:	fb01 f303 	mul.w	r3, r1, r3
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	441a      	add	r2, r3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c82:	6879      	ldr	r1, [r7, #4]
 8007c84:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007c86:	fb01 f303 	mul.w	r3, r1, r3
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	441a      	add	r2, r3
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c9a:	4a04      	ldr	r2, [pc, #16]	; (8007cac <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d915      	bls.n	8007ccc <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007ca0:	e006      	b.n	8007cb0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007ca2:	bf00      	nop
 8007ca4:	ffff0003 	.word	0xffff0003
 8007ca8:	10002b00 	.word	0x10002b00
 8007cac:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007cb6:	f043 0220 	orr.w	r2, r3, #32
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2203      	movs	r2, #3
 8007cc4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	e010      	b.n	8007cee <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cd0:	60fb      	str	r3, [r7, #12]
 8007cd2:	e005      	b.n	8007ce0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	3304      	adds	r3, #4
 8007cde:	60fb      	str	r3, [r7, #12]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ce6:	68fa      	ldr	r2, [r7, #12]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d3f3      	bcc.n	8007cd4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3714      	adds	r7, #20
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop

08007cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b089      	sub	sp, #36	; 0x24
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007d06:	2300      	movs	r3, #0
 8007d08:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007d0a:	4b86      	ldr	r3, [pc, #536]	; (8007f24 <HAL_GPIO_Init+0x228>)
 8007d0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007d0e:	e18c      	b.n	800802a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	2101      	movs	r1, #1
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	fa01 f303 	lsl.w	r3, r1, r3
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f000 817e 	beq.w	8008024 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	f003 0303 	and.w	r3, r3, #3
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d005      	beq.n	8007d40 <HAL_GPIO_Init+0x44>
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	f003 0303 	and.w	r3, r3, #3
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d130      	bne.n	8007da2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007d46:	69fb      	ldr	r3, [r7, #28]
 8007d48:	005b      	lsls	r3, r3, #1
 8007d4a:	2203      	movs	r2, #3
 8007d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d50:	43db      	mvns	r3, r3
 8007d52:	69ba      	ldr	r2, [r7, #24]
 8007d54:	4013      	ands	r3, r2
 8007d56:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	68da      	ldr	r2, [r3, #12]
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	005b      	lsls	r3, r3, #1
 8007d60:	fa02 f303 	lsl.w	r3, r2, r3
 8007d64:	69ba      	ldr	r2, [r7, #24]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	69ba      	ldr	r2, [r7, #24]
 8007d6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007d76:	2201      	movs	r2, #1
 8007d78:	69fb      	ldr	r3, [r7, #28]
 8007d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d7e:	43db      	mvns	r3, r3
 8007d80:	69ba      	ldr	r2, [r7, #24]
 8007d82:	4013      	ands	r3, r2
 8007d84:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	091b      	lsrs	r3, r3, #4
 8007d8c:	f003 0201 	and.w	r2, r3, #1
 8007d90:	69fb      	ldr	r3, [r7, #28]
 8007d92:	fa02 f303 	lsl.w	r3, r2, r3
 8007d96:	69ba      	ldr	r2, [r7, #24]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	69ba      	ldr	r2, [r7, #24]
 8007da0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	f003 0303 	and.w	r3, r3, #3
 8007daa:	2b03      	cmp	r3, #3
 8007dac:	d017      	beq.n	8007dde <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	005b      	lsls	r3, r3, #1
 8007db8:	2203      	movs	r2, #3
 8007dba:	fa02 f303 	lsl.w	r3, r2, r3
 8007dbe:	43db      	mvns	r3, r3
 8007dc0:	69ba      	ldr	r2, [r7, #24]
 8007dc2:	4013      	ands	r3, r2
 8007dc4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	689a      	ldr	r2, [r3, #8]
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	005b      	lsls	r3, r3, #1
 8007dce:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd2:	69ba      	ldr	r2, [r7, #24]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	69ba      	ldr	r2, [r7, #24]
 8007ddc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	f003 0303 	and.w	r3, r3, #3
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	d123      	bne.n	8007e32 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	08da      	lsrs	r2, r3, #3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	3208      	adds	r2, #8
 8007df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	f003 0307 	and.w	r3, r3, #7
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	220f      	movs	r2, #15
 8007e02:	fa02 f303 	lsl.w	r3, r2, r3
 8007e06:	43db      	mvns	r3, r3
 8007e08:	69ba      	ldr	r2, [r7, #24]
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	691a      	ldr	r2, [r3, #16]
 8007e12:	69fb      	ldr	r3, [r7, #28]
 8007e14:	f003 0307 	and.w	r3, r3, #7
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e1e:	69ba      	ldr	r2, [r7, #24]
 8007e20:	4313      	orrs	r3, r2
 8007e22:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	08da      	lsrs	r2, r3, #3
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	3208      	adds	r2, #8
 8007e2c:	69b9      	ldr	r1, [r7, #24]
 8007e2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	005b      	lsls	r3, r3, #1
 8007e3c:	2203      	movs	r2, #3
 8007e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e42:	43db      	mvns	r3, r3
 8007e44:	69ba      	ldr	r2, [r7, #24]
 8007e46:	4013      	ands	r3, r2
 8007e48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	f003 0203 	and.w	r2, r3, #3
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	005b      	lsls	r3, r3, #1
 8007e56:	fa02 f303 	lsl.w	r3, r2, r3
 8007e5a:	69ba      	ldr	r2, [r7, #24]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	69ba      	ldr	r2, [r7, #24]
 8007e64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	f000 80d8 	beq.w	8008024 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e74:	4b2c      	ldr	r3, [pc, #176]	; (8007f28 <HAL_GPIO_Init+0x22c>)
 8007e76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e7a:	4a2b      	ldr	r2, [pc, #172]	; (8007f28 <HAL_GPIO_Init+0x22c>)
 8007e7c:	f043 0302 	orr.w	r3, r3, #2
 8007e80:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007e84:	4b28      	ldr	r3, [pc, #160]	; (8007f28 <HAL_GPIO_Init+0x22c>)
 8007e86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e8a:	f003 0302 	and.w	r3, r3, #2
 8007e8e:	60fb      	str	r3, [r7, #12]
 8007e90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007e92:	4a26      	ldr	r2, [pc, #152]	; (8007f2c <HAL_GPIO_Init+0x230>)
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	089b      	lsrs	r3, r3, #2
 8007e98:	3302      	adds	r3, #2
 8007e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	f003 0303 	and.w	r3, r3, #3
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	220f      	movs	r2, #15
 8007eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8007eae:	43db      	mvns	r3, r3
 8007eb0:	69ba      	ldr	r2, [r7, #24]
 8007eb2:	4013      	ands	r3, r2
 8007eb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4a1d      	ldr	r2, [pc, #116]	; (8007f30 <HAL_GPIO_Init+0x234>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d04a      	beq.n	8007f54 <HAL_GPIO_Init+0x258>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4a1c      	ldr	r2, [pc, #112]	; (8007f34 <HAL_GPIO_Init+0x238>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d02b      	beq.n	8007f1e <HAL_GPIO_Init+0x222>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a1b      	ldr	r2, [pc, #108]	; (8007f38 <HAL_GPIO_Init+0x23c>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d025      	beq.n	8007f1a <HAL_GPIO_Init+0x21e>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a1a      	ldr	r2, [pc, #104]	; (8007f3c <HAL_GPIO_Init+0x240>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d01f      	beq.n	8007f16 <HAL_GPIO_Init+0x21a>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a19      	ldr	r2, [pc, #100]	; (8007f40 <HAL_GPIO_Init+0x244>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d019      	beq.n	8007f12 <HAL_GPIO_Init+0x216>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a18      	ldr	r2, [pc, #96]	; (8007f44 <HAL_GPIO_Init+0x248>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d013      	beq.n	8007f0e <HAL_GPIO_Init+0x212>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a17      	ldr	r2, [pc, #92]	; (8007f48 <HAL_GPIO_Init+0x24c>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d00d      	beq.n	8007f0a <HAL_GPIO_Init+0x20e>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a16      	ldr	r2, [pc, #88]	; (8007f4c <HAL_GPIO_Init+0x250>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d007      	beq.n	8007f06 <HAL_GPIO_Init+0x20a>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a15      	ldr	r2, [pc, #84]	; (8007f50 <HAL_GPIO_Init+0x254>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d101      	bne.n	8007f02 <HAL_GPIO_Init+0x206>
 8007efe:	2309      	movs	r3, #9
 8007f00:	e029      	b.n	8007f56 <HAL_GPIO_Init+0x25a>
 8007f02:	230a      	movs	r3, #10
 8007f04:	e027      	b.n	8007f56 <HAL_GPIO_Init+0x25a>
 8007f06:	2307      	movs	r3, #7
 8007f08:	e025      	b.n	8007f56 <HAL_GPIO_Init+0x25a>
 8007f0a:	2306      	movs	r3, #6
 8007f0c:	e023      	b.n	8007f56 <HAL_GPIO_Init+0x25a>
 8007f0e:	2305      	movs	r3, #5
 8007f10:	e021      	b.n	8007f56 <HAL_GPIO_Init+0x25a>
 8007f12:	2304      	movs	r3, #4
 8007f14:	e01f      	b.n	8007f56 <HAL_GPIO_Init+0x25a>
 8007f16:	2303      	movs	r3, #3
 8007f18:	e01d      	b.n	8007f56 <HAL_GPIO_Init+0x25a>
 8007f1a:	2302      	movs	r3, #2
 8007f1c:	e01b      	b.n	8007f56 <HAL_GPIO_Init+0x25a>
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e019      	b.n	8007f56 <HAL_GPIO_Init+0x25a>
 8007f22:	bf00      	nop
 8007f24:	58000080 	.word	0x58000080
 8007f28:	58024400 	.word	0x58024400
 8007f2c:	58000400 	.word	0x58000400
 8007f30:	58020000 	.word	0x58020000
 8007f34:	58020400 	.word	0x58020400
 8007f38:	58020800 	.word	0x58020800
 8007f3c:	58020c00 	.word	0x58020c00
 8007f40:	58021000 	.word	0x58021000
 8007f44:	58021400 	.word	0x58021400
 8007f48:	58021800 	.word	0x58021800
 8007f4c:	58021c00 	.word	0x58021c00
 8007f50:	58022400 	.word	0x58022400
 8007f54:	2300      	movs	r3, #0
 8007f56:	69fa      	ldr	r2, [r7, #28]
 8007f58:	f002 0203 	and.w	r2, r2, #3
 8007f5c:	0092      	lsls	r2, r2, #2
 8007f5e:	4093      	lsls	r3, r2
 8007f60:	69ba      	ldr	r2, [r7, #24]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007f66:	4938      	ldr	r1, [pc, #224]	; (8008048 <HAL_GPIO_Init+0x34c>)
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	089b      	lsrs	r3, r3, #2
 8007f6c:	3302      	adds	r3, #2
 8007f6e:	69ba      	ldr	r2, [r7, #24]
 8007f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	43db      	mvns	r3, r3
 8007f80:	69ba      	ldr	r2, [r7, #24]
 8007f82:	4013      	ands	r3, r2
 8007f84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d003      	beq.n	8007f9a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007f92:	69ba      	ldr	r2, [r7, #24]
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007f9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	43db      	mvns	r3, r3
 8007fae:	69ba      	ldr	r2, [r7, #24]
 8007fb0:	4013      	ands	r3, r2
 8007fb2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d003      	beq.n	8007fc8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007fc0:	69ba      	ldr	r2, [r7, #24]
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007fc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	43db      	mvns	r3, r3
 8007fda:	69ba      	ldr	r2, [r7, #24]
 8007fdc:	4013      	ands	r3, r2
 8007fde:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d003      	beq.n	8007ff4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007fec:	69ba      	ldr	r2, [r7, #24]
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	69ba      	ldr	r2, [r7, #24]
 8007ff8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	43db      	mvns	r3, r3
 8008004:	69ba      	ldr	r2, [r7, #24]
 8008006:	4013      	ands	r3, r2
 8008008:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008012:	2b00      	cmp	r3, #0
 8008014:	d003      	beq.n	800801e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008016:	69ba      	ldr	r2, [r7, #24]
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	4313      	orrs	r3, r2
 800801c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	69ba      	ldr	r2, [r7, #24]
 8008022:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	3301      	adds	r3, #1
 8008028:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	69fb      	ldr	r3, [r7, #28]
 8008030:	fa22 f303 	lsr.w	r3, r2, r3
 8008034:	2b00      	cmp	r3, #0
 8008036:	f47f ae6b 	bne.w	8007d10 <HAL_GPIO_Init+0x14>
  }
}
 800803a:	bf00      	nop
 800803c:	bf00      	nop
 800803e:	3724      	adds	r7, #36	; 0x24
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr
 8008048:	58000400 	.word	0x58000400

0800804c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800804c:	b480      	push	{r7}
 800804e:	b085      	sub	sp, #20
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	460b      	mov	r3, r1
 8008056:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	691a      	ldr	r2, [r3, #16]
 800805c:	887b      	ldrh	r3, [r7, #2]
 800805e:	4013      	ands	r3, r2
 8008060:	2b00      	cmp	r3, #0
 8008062:	d002      	beq.n	800806a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008064:	2301      	movs	r3, #1
 8008066:	73fb      	strb	r3, [r7, #15]
 8008068:	e001      	b.n	800806e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800806a:	2300      	movs	r3, #0
 800806c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800806e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008070:	4618      	mov	r0, r3
 8008072:	3714      	adds	r7, #20
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	460b      	mov	r3, r1
 8008086:	807b      	strh	r3, [r7, #2]
 8008088:	4613      	mov	r3, r2
 800808a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800808c:	787b      	ldrb	r3, [r7, #1]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d003      	beq.n	800809a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008092:	887a      	ldrh	r2, [r7, #2]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008098:	e003      	b.n	80080a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800809a:	887b      	ldrh	r3, [r7, #2]
 800809c:	041a      	lsls	r2, r3, #16
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	619a      	str	r2, [r3, #24]
}
 80080a2:	bf00      	nop
 80080a4:	370c      	adds	r7, #12
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr
	...

080080b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d101      	bne.n	80080c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	e07f      	b.n	80081c2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d106      	bne.n	80080dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f7fa fde2 	bl	8002ca0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2224      	movs	r2, #36	; 0x24
 80080e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f022 0201 	bic.w	r2, r2, #1
 80080f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	685a      	ldr	r2, [r3, #4]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008100:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	689a      	ldr	r2, [r3, #8]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008110:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	2b01      	cmp	r3, #1
 8008118:	d107      	bne.n	800812a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	689a      	ldr	r2, [r3, #8]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008126:	609a      	str	r2, [r3, #8]
 8008128:	e006      	b.n	8008138 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	689a      	ldr	r2, [r3, #8]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008136:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	2b02      	cmp	r3, #2
 800813e:	d104      	bne.n	800814a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008148:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	6859      	ldr	r1, [r3, #4]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	4b1d      	ldr	r3, [pc, #116]	; (80081cc <HAL_I2C_Init+0x11c>)
 8008156:	430b      	orrs	r3, r1
 8008158:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68da      	ldr	r2, [r3, #12]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008168:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	691a      	ldr	r2, [r3, #16]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	695b      	ldr	r3, [r3, #20]
 8008172:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	699b      	ldr	r3, [r3, #24]
 800817a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	430a      	orrs	r2, r1
 8008182:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	69d9      	ldr	r1, [r3, #28]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a1a      	ldr	r2, [r3, #32]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	430a      	orrs	r2, r1
 8008192:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f042 0201 	orr.w	r2, r2, #1
 80081a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2220      	movs	r2, #32
 80081ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80081c0:	2300      	movs	r3, #0
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3708      	adds	r7, #8
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	02008000 	.word	0x02008000

080081d0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d005      	beq.n	80081fc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081f4:	68ba      	ldr	r2, [r7, #8]
 80081f6:	68f9      	ldr	r1, [r7, #12]
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	4798      	blx	r3
  }
}
 80081fc:	bf00      	nop
 80081fe:	3710      	adds	r7, #16
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008214:	b2db      	uxtb	r3, r3
 8008216:	2b20      	cmp	r3, #32
 8008218:	d138      	bne.n	800828c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008220:	2b01      	cmp	r3, #1
 8008222:	d101      	bne.n	8008228 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008224:	2302      	movs	r3, #2
 8008226:	e032      	b.n	800828e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2224      	movs	r2, #36	; 0x24
 8008234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f022 0201 	bic.w	r2, r2, #1
 8008246:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008256:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	6819      	ldr	r1, [r3, #0]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	683a      	ldr	r2, [r7, #0]
 8008264:	430a      	orrs	r2, r1
 8008266:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f042 0201 	orr.w	r2, r2, #1
 8008276:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2220      	movs	r2, #32
 800827c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008288:	2300      	movs	r3, #0
 800828a:	e000      	b.n	800828e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800828c:	2302      	movs	r3, #2
  }
}
 800828e:	4618      	mov	r0, r3
 8008290:	370c      	adds	r7, #12
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr

0800829a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800829a:	b480      	push	{r7}
 800829c:	b085      	sub	sp, #20
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
 80082a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	2b20      	cmp	r3, #32
 80082ae:	d139      	bne.n	8008324 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d101      	bne.n	80082be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80082ba:	2302      	movs	r3, #2
 80082bc:	e033      	b.n	8008326 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2201      	movs	r2, #1
 80082c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2224      	movs	r2, #36	; 0x24
 80082ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f022 0201 	bic.w	r2, r2, #1
 80082dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80082ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	021b      	lsls	r3, r3, #8
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	4313      	orrs	r3, r2
 80082f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f042 0201 	orr.w	r2, r2, #1
 800830e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2220      	movs	r2, #32
 8008314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008320:	2300      	movs	r3, #0
 8008322:	e000      	b.n	8008326 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008324:	2302      	movs	r3, #2
  }
}
 8008326:	4618      	mov	r0, r3
 8008328:	3714      	adds	r7, #20
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr

08008332 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008332:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008334:	b08f      	sub	sp, #60	; 0x3c
 8008336:	af0a      	add	r7, sp, #40	; 0x28
 8008338:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d101      	bne.n	8008344 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008340:	2301      	movs	r3, #1
 8008342:	e116      	b.n	8008572 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8008350:	b2db      	uxtb	r3, r3
 8008352:	2b00      	cmp	r3, #0
 8008354:	d106      	bne.n	8008364 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f00e fbc8 	bl	8016af4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2203      	movs	r2, #3
 8008368:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008374:	2b00      	cmp	r3, #0
 8008376:	d102      	bne.n	800837e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4618      	mov	r0, r3
 8008384:	f00a fcf7 	bl	8012d76 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	603b      	str	r3, [r7, #0]
 800838e:	687e      	ldr	r6, [r7, #4]
 8008390:	466d      	mov	r5, sp
 8008392:	f106 0410 	add.w	r4, r6, #16
 8008396:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008398:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800839a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800839c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800839e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80083a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80083a6:	1d33      	adds	r3, r6, #4
 80083a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80083aa:	6838      	ldr	r0, [r7, #0]
 80083ac:	f00a fbc2 	bl	8012b34 <USB_CoreInit>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d005      	beq.n	80083c2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2202      	movs	r2, #2
 80083ba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	e0d7      	b.n	8008572 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	2100      	movs	r1, #0
 80083c8:	4618      	mov	r0, r3
 80083ca:	f00a fce5 	bl	8012d98 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80083ce:	2300      	movs	r3, #0
 80083d0:	73fb      	strb	r3, [r7, #15]
 80083d2:	e04a      	b.n	800846a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80083d4:	7bfa      	ldrb	r2, [r7, #15]
 80083d6:	6879      	ldr	r1, [r7, #4]
 80083d8:	4613      	mov	r3, r2
 80083da:	00db      	lsls	r3, r3, #3
 80083dc:	4413      	add	r3, r2
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	440b      	add	r3, r1
 80083e2:	333d      	adds	r3, #61	; 0x3d
 80083e4:	2201      	movs	r2, #1
 80083e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80083e8:	7bfa      	ldrb	r2, [r7, #15]
 80083ea:	6879      	ldr	r1, [r7, #4]
 80083ec:	4613      	mov	r3, r2
 80083ee:	00db      	lsls	r3, r3, #3
 80083f0:	4413      	add	r3, r2
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	440b      	add	r3, r1
 80083f6:	333c      	adds	r3, #60	; 0x3c
 80083f8:	7bfa      	ldrb	r2, [r7, #15]
 80083fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80083fc:	7bfa      	ldrb	r2, [r7, #15]
 80083fe:	7bfb      	ldrb	r3, [r7, #15]
 8008400:	b298      	uxth	r0, r3
 8008402:	6879      	ldr	r1, [r7, #4]
 8008404:	4613      	mov	r3, r2
 8008406:	00db      	lsls	r3, r3, #3
 8008408:	4413      	add	r3, r2
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	440b      	add	r3, r1
 800840e:	3356      	adds	r3, #86	; 0x56
 8008410:	4602      	mov	r2, r0
 8008412:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008414:	7bfa      	ldrb	r2, [r7, #15]
 8008416:	6879      	ldr	r1, [r7, #4]
 8008418:	4613      	mov	r3, r2
 800841a:	00db      	lsls	r3, r3, #3
 800841c:	4413      	add	r3, r2
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	440b      	add	r3, r1
 8008422:	3340      	adds	r3, #64	; 0x40
 8008424:	2200      	movs	r2, #0
 8008426:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008428:	7bfa      	ldrb	r2, [r7, #15]
 800842a:	6879      	ldr	r1, [r7, #4]
 800842c:	4613      	mov	r3, r2
 800842e:	00db      	lsls	r3, r3, #3
 8008430:	4413      	add	r3, r2
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	440b      	add	r3, r1
 8008436:	3344      	adds	r3, #68	; 0x44
 8008438:	2200      	movs	r2, #0
 800843a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800843c:	7bfa      	ldrb	r2, [r7, #15]
 800843e:	6879      	ldr	r1, [r7, #4]
 8008440:	4613      	mov	r3, r2
 8008442:	00db      	lsls	r3, r3, #3
 8008444:	4413      	add	r3, r2
 8008446:	009b      	lsls	r3, r3, #2
 8008448:	440b      	add	r3, r1
 800844a:	3348      	adds	r3, #72	; 0x48
 800844c:	2200      	movs	r2, #0
 800844e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008450:	7bfa      	ldrb	r2, [r7, #15]
 8008452:	6879      	ldr	r1, [r7, #4]
 8008454:	4613      	mov	r3, r2
 8008456:	00db      	lsls	r3, r3, #3
 8008458:	4413      	add	r3, r2
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	440b      	add	r3, r1
 800845e:	334c      	adds	r3, #76	; 0x4c
 8008460:	2200      	movs	r2, #0
 8008462:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008464:	7bfb      	ldrb	r3, [r7, #15]
 8008466:	3301      	adds	r3, #1
 8008468:	73fb      	strb	r3, [r7, #15]
 800846a:	7bfa      	ldrb	r2, [r7, #15]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	429a      	cmp	r2, r3
 8008472:	d3af      	bcc.n	80083d4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008474:	2300      	movs	r3, #0
 8008476:	73fb      	strb	r3, [r7, #15]
 8008478:	e044      	b.n	8008504 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800847a:	7bfa      	ldrb	r2, [r7, #15]
 800847c:	6879      	ldr	r1, [r7, #4]
 800847e:	4613      	mov	r3, r2
 8008480:	00db      	lsls	r3, r3, #3
 8008482:	4413      	add	r3, r2
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	440b      	add	r3, r1
 8008488:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800848c:	2200      	movs	r2, #0
 800848e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008490:	7bfa      	ldrb	r2, [r7, #15]
 8008492:	6879      	ldr	r1, [r7, #4]
 8008494:	4613      	mov	r3, r2
 8008496:	00db      	lsls	r3, r3, #3
 8008498:	4413      	add	r3, r2
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	440b      	add	r3, r1
 800849e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80084a2:	7bfa      	ldrb	r2, [r7, #15]
 80084a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80084a6:	7bfa      	ldrb	r2, [r7, #15]
 80084a8:	6879      	ldr	r1, [r7, #4]
 80084aa:	4613      	mov	r3, r2
 80084ac:	00db      	lsls	r3, r3, #3
 80084ae:	4413      	add	r3, r2
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	440b      	add	r3, r1
 80084b4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80084b8:	2200      	movs	r2, #0
 80084ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80084bc:	7bfa      	ldrb	r2, [r7, #15]
 80084be:	6879      	ldr	r1, [r7, #4]
 80084c0:	4613      	mov	r3, r2
 80084c2:	00db      	lsls	r3, r3, #3
 80084c4:	4413      	add	r3, r2
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	440b      	add	r3, r1
 80084ca:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80084ce:	2200      	movs	r2, #0
 80084d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80084d2:	7bfa      	ldrb	r2, [r7, #15]
 80084d4:	6879      	ldr	r1, [r7, #4]
 80084d6:	4613      	mov	r3, r2
 80084d8:	00db      	lsls	r3, r3, #3
 80084da:	4413      	add	r3, r2
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	440b      	add	r3, r1
 80084e0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80084e4:	2200      	movs	r2, #0
 80084e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80084e8:	7bfa      	ldrb	r2, [r7, #15]
 80084ea:	6879      	ldr	r1, [r7, #4]
 80084ec:	4613      	mov	r3, r2
 80084ee:	00db      	lsls	r3, r3, #3
 80084f0:	4413      	add	r3, r2
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	440b      	add	r3, r1
 80084f6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80084fa:	2200      	movs	r2, #0
 80084fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80084fe:	7bfb      	ldrb	r3, [r7, #15]
 8008500:	3301      	adds	r3, #1
 8008502:	73fb      	strb	r3, [r7, #15]
 8008504:	7bfa      	ldrb	r2, [r7, #15]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	429a      	cmp	r2, r3
 800850c:	d3b5      	bcc.n	800847a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	603b      	str	r3, [r7, #0]
 8008514:	687e      	ldr	r6, [r7, #4]
 8008516:	466d      	mov	r5, sp
 8008518:	f106 0410 	add.w	r4, r6, #16
 800851c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800851e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008520:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008522:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008524:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008528:	e885 0003 	stmia.w	r5, {r0, r1}
 800852c:	1d33      	adds	r3, r6, #4
 800852e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008530:	6838      	ldr	r0, [r7, #0]
 8008532:	f00a fc7d 	bl	8012e30 <USB_DevInit>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d005      	beq.n	8008548 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2202      	movs	r2, #2
 8008540:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008544:	2301      	movs	r3, #1
 8008546:	e014      	b.n	8008572 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800855c:	2b01      	cmp	r3, #1
 800855e:	d102      	bne.n	8008566 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f001 f96f 	bl	8009844 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4618      	mov	r0, r3
 800856c:	f00b fcbf 	bl	8013eee <USB_DevDisconnect>

  return HAL_OK;
 8008570:	2300      	movs	r3, #0
}
 8008572:	4618      	mov	r0, r3
 8008574:	3714      	adds	r7, #20
 8008576:	46bd      	mov	sp, r7
 8008578:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800857a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b084      	sub	sp, #16
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800858e:	2b01      	cmp	r3, #1
 8008590:	d101      	bne.n	8008596 <HAL_PCD_Start+0x1c>
 8008592:	2302      	movs	r3, #2
 8008594:	e022      	b.n	80085dc <HAL_PCD_Start+0x62>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2201      	movs	r2, #1
 800859a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d109      	bne.n	80085be <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d105      	bne.n	80085be <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4618      	mov	r0, r3
 80085c4:	f00a fbc6 	bl	8012d54 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4618      	mov	r0, r3
 80085ce:	f00b fc6d 	bl	8013eac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80085da:	2300      	movs	r3, #0
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3710      	adds	r7, #16
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80085e4:	b590      	push	{r4, r7, lr}
 80085e6:	b08d      	sub	sp, #52	; 0x34
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085f2:	6a3b      	ldr	r3, [r7, #32]
 80085f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4618      	mov	r0, r3
 80085fc:	f00b fd2b 	bl	8014056 <USB_GetMode>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	f040 84b7 	bne.w	8008f76 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4618      	mov	r0, r3
 800860e:	f00b fc8f 	bl	8013f30 <USB_ReadInterrupts>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	f000 84ad 	beq.w	8008f74 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800861a:	69fb      	ldr	r3, [r7, #28]
 800861c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	0a1b      	lsrs	r3, r3, #8
 8008624:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4618      	mov	r0, r3
 8008634:	f00b fc7c 	bl	8013f30 <USB_ReadInterrupts>
 8008638:	4603      	mov	r3, r0
 800863a:	f003 0302 	and.w	r3, r3, #2
 800863e:	2b02      	cmp	r3, #2
 8008640:	d107      	bne.n	8008652 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	695a      	ldr	r2, [r3, #20]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f002 0202 	and.w	r2, r2, #2
 8008650:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4618      	mov	r0, r3
 8008658:	f00b fc6a 	bl	8013f30 <USB_ReadInterrupts>
 800865c:	4603      	mov	r3, r0
 800865e:	f003 0310 	and.w	r3, r3, #16
 8008662:	2b10      	cmp	r3, #16
 8008664:	d161      	bne.n	800872a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	699a      	ldr	r2, [r3, #24]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f022 0210 	bic.w	r2, r2, #16
 8008674:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008676:	6a3b      	ldr	r3, [r7, #32]
 8008678:	6a1b      	ldr	r3, [r3, #32]
 800867a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800867c:	69bb      	ldr	r3, [r7, #24]
 800867e:	f003 020f 	and.w	r2, r3, #15
 8008682:	4613      	mov	r3, r2
 8008684:	00db      	lsls	r3, r3, #3
 8008686:	4413      	add	r3, r2
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	4413      	add	r3, r2
 8008692:	3304      	adds	r3, #4
 8008694:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	0c5b      	lsrs	r3, r3, #17
 800869a:	f003 030f 	and.w	r3, r3, #15
 800869e:	2b02      	cmp	r3, #2
 80086a0:	d124      	bne.n	80086ec <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80086a2:	69ba      	ldr	r2, [r7, #24]
 80086a4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80086a8:	4013      	ands	r3, r2
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d035      	beq.n	800871a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80086b2:	69bb      	ldr	r3, [r7, #24]
 80086b4:	091b      	lsrs	r3, r3, #4
 80086b6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80086b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80086bc:	b29b      	uxth	r3, r3
 80086be:	461a      	mov	r2, r3
 80086c0:	6a38      	ldr	r0, [r7, #32]
 80086c2:	f00b faa1 	bl	8013c08 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	68da      	ldr	r2, [r3, #12]
 80086ca:	69bb      	ldr	r3, [r7, #24]
 80086cc:	091b      	lsrs	r3, r3, #4
 80086ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80086d2:	441a      	add	r2, r3
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	695a      	ldr	r2, [r3, #20]
 80086dc:	69bb      	ldr	r3, [r7, #24]
 80086de:	091b      	lsrs	r3, r3, #4
 80086e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80086e4:	441a      	add	r2, r3
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	615a      	str	r2, [r3, #20]
 80086ea:	e016      	b.n	800871a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80086ec:	69bb      	ldr	r3, [r7, #24]
 80086ee:	0c5b      	lsrs	r3, r3, #17
 80086f0:	f003 030f 	and.w	r3, r3, #15
 80086f4:	2b06      	cmp	r3, #6
 80086f6:	d110      	bne.n	800871a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80086fe:	2208      	movs	r2, #8
 8008700:	4619      	mov	r1, r3
 8008702:	6a38      	ldr	r0, [r7, #32]
 8008704:	f00b fa80 	bl	8013c08 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	695a      	ldr	r2, [r3, #20]
 800870c:	69bb      	ldr	r3, [r7, #24]
 800870e:	091b      	lsrs	r3, r3, #4
 8008710:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008714:	441a      	add	r2, r3
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	699a      	ldr	r2, [r3, #24]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f042 0210 	orr.w	r2, r2, #16
 8008728:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4618      	mov	r0, r3
 8008730:	f00b fbfe 	bl	8013f30 <USB_ReadInterrupts>
 8008734:	4603      	mov	r3, r0
 8008736:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800873a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800873e:	f040 80a7 	bne.w	8008890 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008742:	2300      	movs	r3, #0
 8008744:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4618      	mov	r0, r3
 800874c:	f00b fc03 	bl	8013f56 <USB_ReadDevAllOutEpInterrupt>
 8008750:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008752:	e099      	b.n	8008888 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008756:	f003 0301 	and.w	r3, r3, #1
 800875a:	2b00      	cmp	r3, #0
 800875c:	f000 808e 	beq.w	800887c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008766:	b2d2      	uxtb	r2, r2
 8008768:	4611      	mov	r1, r2
 800876a:	4618      	mov	r0, r3
 800876c:	f00b fc27 	bl	8013fbe <USB_ReadDevOutEPInterrupt>
 8008770:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	f003 0301 	and.w	r3, r3, #1
 8008778:	2b00      	cmp	r3, #0
 800877a:	d00c      	beq.n	8008796 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800877c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877e:	015a      	lsls	r2, r3, #5
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	4413      	add	r3, r2
 8008784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008788:	461a      	mov	r2, r3
 800878a:	2301      	movs	r3, #1
 800878c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800878e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 fed1 	bl	8009538 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	f003 0308 	and.w	r3, r3, #8
 800879c:	2b00      	cmp	r3, #0
 800879e:	d00c      	beq.n	80087ba <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80087a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a2:	015a      	lsls	r2, r3, #5
 80087a4:	69fb      	ldr	r3, [r7, #28]
 80087a6:	4413      	add	r3, r2
 80087a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087ac:	461a      	mov	r2, r3
 80087ae:	2308      	movs	r3, #8
 80087b0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80087b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 ffa7 	bl	8009708 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	f003 0310 	and.w	r3, r3, #16
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d008      	beq.n	80087d6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80087c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c6:	015a      	lsls	r2, r3, #5
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	4413      	add	r3, r2
 80087cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087d0:	461a      	mov	r2, r3
 80087d2:	2310      	movs	r3, #16
 80087d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	f003 0302 	and.w	r3, r3, #2
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d030      	beq.n	8008842 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80087e0:	6a3b      	ldr	r3, [r7, #32]
 80087e2:	695b      	ldr	r3, [r3, #20]
 80087e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087e8:	2b80      	cmp	r3, #128	; 0x80
 80087ea:	d109      	bne.n	8008800 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	69fa      	ldr	r2, [r7, #28]
 80087f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80087fe:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008802:	4613      	mov	r3, r2
 8008804:	00db      	lsls	r3, r3, #3
 8008806:	4413      	add	r3, r2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	4413      	add	r3, r2
 8008812:	3304      	adds	r3, #4
 8008814:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	78db      	ldrb	r3, [r3, #3]
 800881a:	2b01      	cmp	r3, #1
 800881c:	d108      	bne.n	8008830 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	2200      	movs	r2, #0
 8008822:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008826:	b2db      	uxtb	r3, r3
 8008828:	4619      	mov	r1, r3
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f00e fa5a 	bl	8016ce4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008832:	015a      	lsls	r2, r3, #5
 8008834:	69fb      	ldr	r3, [r7, #28]
 8008836:	4413      	add	r3, r2
 8008838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800883c:	461a      	mov	r2, r3
 800883e:	2302      	movs	r3, #2
 8008840:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	f003 0320 	and.w	r3, r3, #32
 8008848:	2b00      	cmp	r3, #0
 800884a:	d008      	beq.n	800885e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800884c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884e:	015a      	lsls	r2, r3, #5
 8008850:	69fb      	ldr	r3, [r7, #28]
 8008852:	4413      	add	r3, r2
 8008854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008858:	461a      	mov	r2, r3
 800885a:	2320      	movs	r3, #32
 800885c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008864:	2b00      	cmp	r3, #0
 8008866:	d009      	beq.n	800887c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886a:	015a      	lsls	r2, r3, #5
 800886c:	69fb      	ldr	r3, [r7, #28]
 800886e:	4413      	add	r3, r2
 8008870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008874:	461a      	mov	r2, r3
 8008876:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800887a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800887c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887e:	3301      	adds	r3, #1
 8008880:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008884:	085b      	lsrs	r3, r3, #1
 8008886:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800888a:	2b00      	cmp	r3, #0
 800888c:	f47f af62 	bne.w	8008754 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4618      	mov	r0, r3
 8008896:	f00b fb4b 	bl	8013f30 <USB_ReadInterrupts>
 800889a:	4603      	mov	r3, r0
 800889c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80088a4:	f040 80db 	bne.w	8008a5e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4618      	mov	r0, r3
 80088ae:	f00b fb6c 	bl	8013f8a <USB_ReadDevAllInEpInterrupt>
 80088b2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80088b4:	2300      	movs	r3, #0
 80088b6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80088b8:	e0cd      	b.n	8008a56 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80088ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088bc:	f003 0301 	and.w	r3, r3, #1
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	f000 80c2 	beq.w	8008a4a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088cc:	b2d2      	uxtb	r2, r2
 80088ce:	4611      	mov	r1, r2
 80088d0:	4618      	mov	r0, r3
 80088d2:	f00b fb92 	bl	8013ffa <USB_ReadDevInEPInterrupt>
 80088d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	f003 0301 	and.w	r3, r3, #1
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d057      	beq.n	8008992 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80088e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e4:	f003 030f 	and.w	r3, r3, #15
 80088e8:	2201      	movs	r2, #1
 80088ea:	fa02 f303 	lsl.w	r3, r2, r3
 80088ee:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80088f0:	69fb      	ldr	r3, [r7, #28]
 80088f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	43db      	mvns	r3, r3
 80088fc:	69f9      	ldr	r1, [r7, #28]
 80088fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008902:	4013      	ands	r3, r2
 8008904:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008908:	015a      	lsls	r2, r3, #5
 800890a:	69fb      	ldr	r3, [r7, #28]
 800890c:	4413      	add	r3, r2
 800890e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008912:	461a      	mov	r2, r3
 8008914:	2301      	movs	r3, #1
 8008916:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	2b01      	cmp	r3, #1
 800891e:	d132      	bne.n	8008986 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008920:	6879      	ldr	r1, [r7, #4]
 8008922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008924:	4613      	mov	r3, r2
 8008926:	00db      	lsls	r3, r3, #3
 8008928:	4413      	add	r3, r2
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	440b      	add	r3, r1
 800892e:	3348      	adds	r3, #72	; 0x48
 8008930:	6819      	ldr	r1, [r3, #0]
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008936:	4613      	mov	r3, r2
 8008938:	00db      	lsls	r3, r3, #3
 800893a:	4413      	add	r3, r2
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	4403      	add	r3, r0
 8008940:	3344      	adds	r3, #68	; 0x44
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4419      	add	r1, r3
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800894a:	4613      	mov	r3, r2
 800894c:	00db      	lsls	r3, r3, #3
 800894e:	4413      	add	r3, r2
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	4403      	add	r3, r0
 8008954:	3348      	adds	r3, #72	; 0x48
 8008956:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895a:	2b00      	cmp	r3, #0
 800895c:	d113      	bne.n	8008986 <HAL_PCD_IRQHandler+0x3a2>
 800895e:	6879      	ldr	r1, [r7, #4]
 8008960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008962:	4613      	mov	r3, r2
 8008964:	00db      	lsls	r3, r3, #3
 8008966:	4413      	add	r3, r2
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	440b      	add	r3, r1
 800896c:	334c      	adds	r3, #76	; 0x4c
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d108      	bne.n	8008986 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6818      	ldr	r0, [r3, #0]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800897e:	461a      	mov	r2, r3
 8008980:	2101      	movs	r1, #1
 8008982:	f00b fb9b 	bl	80140bc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008988:	b2db      	uxtb	r3, r3
 800898a:	4619      	mov	r1, r3
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f00e f924 	bl	8016bda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	f003 0308 	and.w	r3, r3, #8
 8008998:	2b00      	cmp	r3, #0
 800899a:	d008      	beq.n	80089ae <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800899c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899e:	015a      	lsls	r2, r3, #5
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	4413      	add	r3, r2
 80089a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089a8:	461a      	mov	r2, r3
 80089aa:	2308      	movs	r3, #8
 80089ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	f003 0310 	and.w	r3, r3, #16
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d008      	beq.n	80089ca <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80089b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ba:	015a      	lsls	r2, r3, #5
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	4413      	add	r3, r2
 80089c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089c4:	461a      	mov	r2, r3
 80089c6:	2310      	movs	r3, #16
 80089c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d008      	beq.n	80089e6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80089d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d6:	015a      	lsls	r2, r3, #5
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	4413      	add	r3, r2
 80089dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089e0:	461a      	mov	r2, r3
 80089e2:	2340      	movs	r3, #64	; 0x40
 80089e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	f003 0302 	and.w	r3, r3, #2
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d023      	beq.n	8008a38 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80089f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089f2:	6a38      	ldr	r0, [r7, #32]
 80089f4:	f00a fb7a 	bl	80130ec <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80089f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089fa:	4613      	mov	r3, r2
 80089fc:	00db      	lsls	r3, r3, #3
 80089fe:	4413      	add	r3, r2
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	3338      	adds	r3, #56	; 0x38
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	4413      	add	r3, r2
 8008a08:	3304      	adds	r3, #4
 8008a0a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	78db      	ldrb	r3, [r3, #3]
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d108      	bne.n	8008a26 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	2200      	movs	r2, #0
 8008a18:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	4619      	mov	r1, r3
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f00e f971 	bl	8016d08 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a28:	015a      	lsls	r2, r3, #5
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a32:	461a      	mov	r2, r3
 8008a34:	2302      	movs	r3, #2
 8008a36:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d003      	beq.n	8008a4a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008a42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 fcea 	bl	800941e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a52:	085b      	lsrs	r3, r3, #1
 8008a54:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f47f af2e 	bne.w	80088ba <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4618      	mov	r0, r3
 8008a64:	f00b fa64 	bl	8013f30 <USB_ReadInterrupts>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a72:	d122      	bne.n	8008aba <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	69fa      	ldr	r2, [r7, #28]
 8008a7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a82:	f023 0301 	bic.w	r3, r3, #1
 8008a86:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d108      	bne.n	8008aa4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2200      	movs	r2, #0
 8008a96:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008a9a:	2100      	movs	r1, #0
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 fef5 	bl	800988c <HAL_PCDEx_LPM_Callback>
 8008aa2:	e002      	b.n	8008aaa <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f00e f90f 	bl	8016cc8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	695a      	ldr	r2, [r3, #20]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008ab8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f00b fa36 	bl	8013f30 <USB_ReadInterrupts>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008aca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ace:	d112      	bne.n	8008af6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	f003 0301 	and.w	r3, r3, #1
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d102      	bne.n	8008ae6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f00e f8cb 	bl	8016c7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	695a      	ldr	r2, [r3, #20]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008af4:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4618      	mov	r0, r3
 8008afc:	f00b fa18 	bl	8013f30 <USB_ReadInterrupts>
 8008b00:	4603      	mov	r3, r0
 8008b02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b0a:	d121      	bne.n	8008b50 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	695a      	ldr	r2, [r3, #20]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008b1a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d111      	bne.n	8008b4a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2201      	movs	r2, #1
 8008b2a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b34:	089b      	lsrs	r3, r3, #2
 8008b36:	f003 020f 	and.w	r2, r3, #15
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008b40:	2101      	movs	r1, #1
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 fea2 	bl	800988c <HAL_PCDEx_LPM_Callback>
 8008b48:	e002      	b.n	8008b50 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f00e f896 	bl	8016c7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4618      	mov	r0, r3
 8008b56:	f00b f9eb 	bl	8013f30 <USB_ReadInterrupts>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b64:	f040 80b7 	bne.w	8008cd6 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	69fa      	ldr	r2, [r7, #28]
 8008b72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b76:	f023 0301 	bic.w	r3, r3, #1
 8008b7a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2110      	movs	r1, #16
 8008b82:	4618      	mov	r0, r3
 8008b84:	f00a fab2 	bl	80130ec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b88:	2300      	movs	r3, #0
 8008b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b8c:	e046      	b.n	8008c1c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b90:	015a      	lsls	r2, r3, #5
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	4413      	add	r3, r2
 8008b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ba0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba4:	015a      	lsls	r2, r3, #5
 8008ba6:	69fb      	ldr	r3, [r7, #28]
 8008ba8:	4413      	add	r3, r2
 8008baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bb2:	0151      	lsls	r1, r2, #5
 8008bb4:	69fa      	ldr	r2, [r7, #28]
 8008bb6:	440a      	add	r2, r1
 8008bb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bbc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008bc0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc4:	015a      	lsls	r2, r3, #5
 8008bc6:	69fb      	ldr	r3, [r7, #28]
 8008bc8:	4413      	add	r3, r2
 8008bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bce:	461a      	mov	r2, r3
 8008bd0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008bd4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd8:	015a      	lsls	r2, r3, #5
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	4413      	add	r3, r2
 8008bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008be6:	0151      	lsls	r1, r2, #5
 8008be8:	69fa      	ldr	r2, [r7, #28]
 8008bea:	440a      	add	r2, r1
 8008bec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bf0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008bf4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf8:	015a      	lsls	r2, r3, #5
 8008bfa:	69fb      	ldr	r3, [r7, #28]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c06:	0151      	lsls	r1, r2, #5
 8008c08:	69fa      	ldr	r2, [r7, #28]
 8008c0a:	440a      	add	r2, r1
 8008c0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008c14:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c18:	3301      	adds	r3, #1
 8008c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d3b3      	bcc.n	8008b8e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c2c:	69db      	ldr	r3, [r3, #28]
 8008c2e:	69fa      	ldr	r2, [r7, #28]
 8008c30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c34:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008c38:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d016      	beq.n	8008c70 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008c42:	69fb      	ldr	r3, [r7, #28]
 8008c44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c4c:	69fa      	ldr	r2, [r7, #28]
 8008c4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c52:	f043 030b 	orr.w	r3, r3, #11
 8008c56:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c62:	69fa      	ldr	r2, [r7, #28]
 8008c64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c68:	f043 030b 	orr.w	r3, r3, #11
 8008c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8008c6e:	e015      	b.n	8008c9c <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c76:	695a      	ldr	r2, [r3, #20]
 8008c78:	69fb      	ldr	r3, [r7, #28]
 8008c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c7e:	4619      	mov	r1, r3
 8008c80:	f242 032b 	movw	r3, #8235	; 0x202b
 8008c84:	4313      	orrs	r3, r2
 8008c86:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c8e:	691b      	ldr	r3, [r3, #16]
 8008c90:	69fa      	ldr	r2, [r7, #28]
 8008c92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c96:	f043 030b 	orr.w	r3, r3, #11
 8008c9a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008c9c:	69fb      	ldr	r3, [r7, #28]
 8008c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	69fa      	ldr	r2, [r7, #28]
 8008ca6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008caa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008cae:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6818      	ldr	r0, [r3, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	f00b f9fb 	bl	80140bc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	695a      	ldr	r2, [r3, #20]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008cd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f00b f928 	bl	8013f30 <USB_ReadInterrupts>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cea:	d124      	bne.n	8008d36 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f00b f9bf 	bl	8014074 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f00a fa73 	bl	80131e6 <USB_GetDevSpeed>
 8008d00:	4603      	mov	r3, r0
 8008d02:	461a      	mov	r2, r3
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681c      	ldr	r4, [r3, #0]
 8008d0c:	f001 fd88 	bl	800a820 <HAL_RCC_GetHCLKFreq>
 8008d10:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	461a      	mov	r2, r3
 8008d1a:	4620      	mov	r0, r4
 8008d1c:	f009 ff78 	bl	8012c10 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f00d ff82 	bl	8016c2a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	695a      	ldr	r2, [r3, #20]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008d34:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f00b f8f8 	bl	8013f30 <USB_ReadInterrupts>
 8008d40:	4603      	mov	r3, r0
 8008d42:	f003 0308 	and.w	r3, r3, #8
 8008d46:	2b08      	cmp	r3, #8
 8008d48:	d10a      	bne.n	8008d60 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f00d ff5f 	bl	8016c0e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	695a      	ldr	r2, [r3, #20]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f002 0208 	and.w	r2, r2, #8
 8008d5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4618      	mov	r0, r3
 8008d66:	f00b f8e3 	bl	8013f30 <USB_ReadInterrupts>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d70:	2b80      	cmp	r3, #128	; 0x80
 8008d72:	d122      	bne.n	8008dba <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008d74:	6a3b      	ldr	r3, [r7, #32]
 8008d76:	699b      	ldr	r3, [r3, #24]
 8008d78:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d7c:	6a3b      	ldr	r3, [r7, #32]
 8008d7e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d80:	2301      	movs	r3, #1
 8008d82:	627b      	str	r3, [r7, #36]	; 0x24
 8008d84:	e014      	b.n	8008db0 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008d86:	6879      	ldr	r1, [r7, #4]
 8008d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	00db      	lsls	r3, r3, #3
 8008d8e:	4413      	add	r3, r2
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	440b      	add	r3, r1
 8008d94:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d105      	bne.n	8008daa <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	4619      	mov	r1, r3
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 fb09 	bl	80093bc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dac:	3301      	adds	r3, #1
 8008dae:	627b      	str	r3, [r7, #36]	; 0x24
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d3e5      	bcc.n	8008d86 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f00b f8b6 	bl	8013f30 <USB_ReadInterrupts>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008dca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008dce:	d13b      	bne.n	8008e48 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8008dd4:	e02b      	b.n	8008e2e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd8:	015a      	lsls	r2, r3, #5
 8008dda:	69fb      	ldr	r3, [r7, #28]
 8008ddc:	4413      	add	r3, r2
 8008dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008de6:	6879      	ldr	r1, [r7, #4]
 8008de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dea:	4613      	mov	r3, r2
 8008dec:	00db      	lsls	r3, r3, #3
 8008dee:	4413      	add	r3, r2
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	440b      	add	r3, r1
 8008df4:	3340      	adds	r3, #64	; 0x40
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d115      	bne.n	8008e28 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008dfc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	da12      	bge.n	8008e28 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008e02:	6879      	ldr	r1, [r7, #4]
 8008e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e06:	4613      	mov	r3, r2
 8008e08:	00db      	lsls	r3, r3, #3
 8008e0a:	4413      	add	r3, r2
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	440b      	add	r3, r1
 8008e10:	333f      	adds	r3, #63	; 0x3f
 8008e12:	2201      	movs	r2, #1
 8008e14:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008e1e:	b2db      	uxtb	r3, r3
 8008e20:	4619      	mov	r1, r3
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 faca 	bl	80093bc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d3ce      	bcc.n	8008dd6 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	695a      	ldr	r2, [r3, #20]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008e46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f00b f86f 	bl	8013f30 <USB_ReadInterrupts>
 8008e52:	4603      	mov	r3, r0
 8008e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e5c:	d155      	bne.n	8008f0a <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008e5e:	2301      	movs	r3, #1
 8008e60:	627b      	str	r3, [r7, #36]	; 0x24
 8008e62:	e045      	b.n	8008ef0 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e66:	015a      	lsls	r2, r3, #5
 8008e68:	69fb      	ldr	r3, [r7, #28]
 8008e6a:	4413      	add	r3, r2
 8008e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008e74:	6879      	ldr	r1, [r7, #4]
 8008e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e78:	4613      	mov	r3, r2
 8008e7a:	00db      	lsls	r3, r3, #3
 8008e7c:	4413      	add	r3, r2
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	440b      	add	r3, r1
 8008e82:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d12e      	bne.n	8008eea <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008e8c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	da2b      	bge.n	8008eea <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008e92:	69bb      	ldr	r3, [r7, #24]
 8008e94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8008e9e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d121      	bne.n	8008eea <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008ea6:	6879      	ldr	r1, [r7, #4]
 8008ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eaa:	4613      	mov	r3, r2
 8008eac:	00db      	lsls	r3, r3, #3
 8008eae:	4413      	add	r3, r2
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	440b      	add	r3, r1
 8008eb4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008eb8:	2201      	movs	r2, #1
 8008eba:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008ebc:	6a3b      	ldr	r3, [r7, #32]
 8008ebe:	699b      	ldr	r3, [r3, #24]
 8008ec0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008ec4:	6a3b      	ldr	r3, [r7, #32]
 8008ec6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008ec8:	6a3b      	ldr	r3, [r7, #32]
 8008eca:	695b      	ldr	r3, [r3, #20]
 8008ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d10a      	bne.n	8008eea <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	69fa      	ldr	r2, [r7, #28]
 8008ede:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ee2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008ee6:	6053      	str	r3, [r2, #4]
            break;
 8008ee8:	e007      	b.n	8008efa <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eec:	3301      	adds	r3, #1
 8008eee:	627b      	str	r3, [r7, #36]	; 0x24
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d3b4      	bcc.n	8008e64 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	695a      	ldr	r2, [r3, #20]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008f08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f00b f80e 	bl	8013f30 <USB_ReadInterrupts>
 8008f14:	4603      	mov	r3, r0
 8008f16:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f1e:	d10a      	bne.n	8008f36 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f00d ff03 	bl	8016d2c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	695a      	ldr	r2, [r3, #20]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008f34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f00a fff8 	bl	8013f30 <USB_ReadInterrupts>
 8008f40:	4603      	mov	r3, r0
 8008f42:	f003 0304 	and.w	r3, r3, #4
 8008f46:	2b04      	cmp	r3, #4
 8008f48:	d115      	bne.n	8008f76 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008f52:	69bb      	ldr	r3, [r7, #24]
 8008f54:	f003 0304 	and.w	r3, r3, #4
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d002      	beq.n	8008f62 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f00d fef3 	bl	8016d48 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	6859      	ldr	r1, [r3, #4]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	69ba      	ldr	r2, [r7, #24]
 8008f6e:	430a      	orrs	r2, r1
 8008f70:	605a      	str	r2, [r3, #4]
 8008f72:	e000      	b.n	8008f76 <HAL_PCD_IRQHandler+0x992>
      return;
 8008f74:	bf00      	nop
    }
  }
}
 8008f76:	3734      	adds	r7, #52	; 0x34
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd90      	pop	{r4, r7, pc}

08008f7c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	460b      	mov	r3, r1
 8008f86:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d101      	bne.n	8008f96 <HAL_PCD_SetAddress+0x1a>
 8008f92:	2302      	movs	r3, #2
 8008f94:	e013      	b.n	8008fbe <HAL_PCD_SetAddress+0x42>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	78fa      	ldrb	r2, [r7, #3]
 8008fa2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	78fa      	ldrb	r2, [r7, #3]
 8008fac:	4611      	mov	r1, r2
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f00a ff56 	bl	8013e60 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008fbc:	2300      	movs	r3, #0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3708      	adds	r7, #8
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b084      	sub	sp, #16
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
 8008fce:	4608      	mov	r0, r1
 8008fd0:	4611      	mov	r1, r2
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	70fb      	strb	r3, [r7, #3]
 8008fd8:	460b      	mov	r3, r1
 8008fda:	803b      	strh	r3, [r7, #0]
 8008fdc:	4613      	mov	r3, r2
 8008fde:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008fe4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	da0f      	bge.n	800900c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008fec:	78fb      	ldrb	r3, [r7, #3]
 8008fee:	f003 020f 	and.w	r2, r3, #15
 8008ff2:	4613      	mov	r3, r2
 8008ff4:	00db      	lsls	r3, r3, #3
 8008ff6:	4413      	add	r3, r2
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	3338      	adds	r3, #56	; 0x38
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	4413      	add	r3, r2
 8009000:	3304      	adds	r3, #4
 8009002:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2201      	movs	r2, #1
 8009008:	705a      	strb	r2, [r3, #1]
 800900a:	e00f      	b.n	800902c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800900c:	78fb      	ldrb	r3, [r7, #3]
 800900e:	f003 020f 	and.w	r2, r3, #15
 8009012:	4613      	mov	r3, r2
 8009014:	00db      	lsls	r3, r3, #3
 8009016:	4413      	add	r3, r2
 8009018:	009b      	lsls	r3, r3, #2
 800901a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	4413      	add	r3, r2
 8009022:	3304      	adds	r3, #4
 8009024:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2200      	movs	r2, #0
 800902a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800902c:	78fb      	ldrb	r3, [r7, #3]
 800902e:	f003 030f 	and.w	r3, r3, #15
 8009032:	b2da      	uxtb	r2, r3
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009038:	883a      	ldrh	r2, [r7, #0]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	78ba      	ldrb	r2, [r7, #2]
 8009042:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	785b      	ldrb	r3, [r3, #1]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d004      	beq.n	8009056 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	b29a      	uxth	r2, r3
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009056:	78bb      	ldrb	r3, [r7, #2]
 8009058:	2b02      	cmp	r3, #2
 800905a:	d102      	bne.n	8009062 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2200      	movs	r2, #0
 8009060:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009068:	2b01      	cmp	r3, #1
 800906a:	d101      	bne.n	8009070 <HAL_PCD_EP_Open+0xaa>
 800906c:	2302      	movs	r3, #2
 800906e:	e00e      	b.n	800908e <HAL_PCD_EP_Open+0xc8>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2201      	movs	r2, #1
 8009074:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	68f9      	ldr	r1, [r7, #12]
 800907e:	4618      	mov	r0, r3
 8009080:	f00a f8d6 	bl	8013230 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800908c:	7afb      	ldrb	r3, [r7, #11]
}
 800908e:	4618      	mov	r0, r3
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009096:	b580      	push	{r7, lr}
 8009098:	b084      	sub	sp, #16
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
 800909e:	460b      	mov	r3, r1
 80090a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80090a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	da0f      	bge.n	80090ca <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80090aa:	78fb      	ldrb	r3, [r7, #3]
 80090ac:	f003 020f 	and.w	r2, r3, #15
 80090b0:	4613      	mov	r3, r2
 80090b2:	00db      	lsls	r3, r3, #3
 80090b4:	4413      	add	r3, r2
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	3338      	adds	r3, #56	; 0x38
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	4413      	add	r3, r2
 80090be:	3304      	adds	r3, #4
 80090c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	2201      	movs	r2, #1
 80090c6:	705a      	strb	r2, [r3, #1]
 80090c8:	e00f      	b.n	80090ea <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80090ca:	78fb      	ldrb	r3, [r7, #3]
 80090cc:	f003 020f 	and.w	r2, r3, #15
 80090d0:	4613      	mov	r3, r2
 80090d2:	00db      	lsls	r3, r3, #3
 80090d4:	4413      	add	r3, r2
 80090d6:	009b      	lsls	r3, r3, #2
 80090d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	4413      	add	r3, r2
 80090e0:	3304      	adds	r3, #4
 80090e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2200      	movs	r2, #0
 80090e8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80090ea:	78fb      	ldrb	r3, [r7, #3]
 80090ec:	f003 030f 	and.w	r3, r3, #15
 80090f0:	b2da      	uxtb	r2, r3
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d101      	bne.n	8009104 <HAL_PCD_EP_Close+0x6e>
 8009100:	2302      	movs	r3, #2
 8009102:	e00e      	b.n	8009122 <HAL_PCD_EP_Close+0x8c>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2201      	movs	r2, #1
 8009108:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	68f9      	ldr	r1, [r7, #12]
 8009112:	4618      	mov	r0, r3
 8009114:	f00a f914 	bl	8013340 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8009120:	2300      	movs	r3, #0
}
 8009122:	4618      	mov	r0, r3
 8009124:	3710      	adds	r7, #16
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800912a:	b580      	push	{r7, lr}
 800912c:	b086      	sub	sp, #24
 800912e:	af00      	add	r7, sp, #0
 8009130:	60f8      	str	r0, [r7, #12]
 8009132:	607a      	str	r2, [r7, #4]
 8009134:	603b      	str	r3, [r7, #0]
 8009136:	460b      	mov	r3, r1
 8009138:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800913a:	7afb      	ldrb	r3, [r7, #11]
 800913c:	f003 020f 	and.w	r2, r3, #15
 8009140:	4613      	mov	r3, r2
 8009142:	00db      	lsls	r3, r3, #3
 8009144:	4413      	add	r3, r2
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800914c:	68fa      	ldr	r2, [r7, #12]
 800914e:	4413      	add	r3, r2
 8009150:	3304      	adds	r3, #4
 8009152:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	683a      	ldr	r2, [r7, #0]
 800915e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	2200      	movs	r2, #0
 8009164:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	2200      	movs	r2, #0
 800916a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800916c:	7afb      	ldrb	r3, [r7, #11]
 800916e:	f003 030f 	and.w	r3, r3, #15
 8009172:	b2da      	uxtb	r2, r3
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	2b01      	cmp	r3, #1
 800917e:	d102      	bne.n	8009186 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	6818      	ldr	r0, [r3, #0]
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	b2db      	uxtb	r3, r3
 8009190:	461a      	mov	r2, r3
 8009192:	6979      	ldr	r1, [r7, #20]
 8009194:	f00a f9b0 	bl	80134f8 <USB_EPStartXfer>

  return HAL_OK;
 8009198:	2300      	movs	r3, #0
}
 800919a:	4618      	mov	r0, r3
 800919c:	3718      	adds	r7, #24
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}

080091a2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80091a2:	b480      	push	{r7}
 80091a4:	b083      	sub	sp, #12
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
 80091aa:	460b      	mov	r3, r1
 80091ac:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80091ae:	78fb      	ldrb	r3, [r7, #3]
 80091b0:	f003 020f 	and.w	r2, r3, #15
 80091b4:	6879      	ldr	r1, [r7, #4]
 80091b6:	4613      	mov	r3, r2
 80091b8:	00db      	lsls	r3, r3, #3
 80091ba:	4413      	add	r3, r2
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	440b      	add	r3, r1
 80091c0:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80091c4:	681b      	ldr	r3, [r3, #0]
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	370c      	adds	r7, #12
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr

080091d2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b086      	sub	sp, #24
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	60f8      	str	r0, [r7, #12]
 80091da:	607a      	str	r2, [r7, #4]
 80091dc:	603b      	str	r3, [r7, #0]
 80091de:	460b      	mov	r3, r1
 80091e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091e2:	7afb      	ldrb	r3, [r7, #11]
 80091e4:	f003 020f 	and.w	r2, r3, #15
 80091e8:	4613      	mov	r3, r2
 80091ea:	00db      	lsls	r3, r3, #3
 80091ec:	4413      	add	r3, r2
 80091ee:	009b      	lsls	r3, r3, #2
 80091f0:	3338      	adds	r3, #56	; 0x38
 80091f2:	68fa      	ldr	r2, [r7, #12]
 80091f4:	4413      	add	r3, r2
 80091f6:	3304      	adds	r3, #4
 80091f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	683a      	ldr	r2, [r7, #0]
 8009204:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	2200      	movs	r2, #0
 800920a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	2201      	movs	r2, #1
 8009210:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009212:	7afb      	ldrb	r3, [r7, #11]
 8009214:	f003 030f 	and.w	r3, r3, #15
 8009218:	b2da      	uxtb	r2, r3
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	68db      	ldr	r3, [r3, #12]
 8009222:	2b01      	cmp	r3, #1
 8009224:	d102      	bne.n	800922c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6818      	ldr	r0, [r3, #0]
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	68db      	ldr	r3, [r3, #12]
 8009234:	b2db      	uxtb	r3, r3
 8009236:	461a      	mov	r2, r3
 8009238:	6979      	ldr	r1, [r7, #20]
 800923a:	f00a f95d 	bl	80134f8 <USB_EPStartXfer>

  return HAL_OK;
 800923e:	2300      	movs	r3, #0
}
 8009240:	4618      	mov	r0, r3
 8009242:	3718      	adds	r7, #24
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	460b      	mov	r3, r1
 8009252:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009254:	78fb      	ldrb	r3, [r7, #3]
 8009256:	f003 020f 	and.w	r2, r3, #15
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	429a      	cmp	r2, r3
 8009260:	d901      	bls.n	8009266 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009262:	2301      	movs	r3, #1
 8009264:	e050      	b.n	8009308 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009266:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800926a:	2b00      	cmp	r3, #0
 800926c:	da0f      	bge.n	800928e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800926e:	78fb      	ldrb	r3, [r7, #3]
 8009270:	f003 020f 	and.w	r2, r3, #15
 8009274:	4613      	mov	r3, r2
 8009276:	00db      	lsls	r3, r3, #3
 8009278:	4413      	add	r3, r2
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	3338      	adds	r3, #56	; 0x38
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	4413      	add	r3, r2
 8009282:	3304      	adds	r3, #4
 8009284:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2201      	movs	r2, #1
 800928a:	705a      	strb	r2, [r3, #1]
 800928c:	e00d      	b.n	80092aa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800928e:	78fa      	ldrb	r2, [r7, #3]
 8009290:	4613      	mov	r3, r2
 8009292:	00db      	lsls	r3, r3, #3
 8009294:	4413      	add	r3, r2
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	4413      	add	r3, r2
 80092a0:	3304      	adds	r3, #4
 80092a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2200      	movs	r2, #0
 80092a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2201      	movs	r2, #1
 80092ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80092b0:	78fb      	ldrb	r3, [r7, #3]
 80092b2:	f003 030f 	and.w	r3, r3, #15
 80092b6:	b2da      	uxtb	r2, r3
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d101      	bne.n	80092ca <HAL_PCD_EP_SetStall+0x82>
 80092c6:	2302      	movs	r3, #2
 80092c8:	e01e      	b.n	8009308 <HAL_PCD_EP_SetStall+0xc0>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2201      	movs	r2, #1
 80092ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	68f9      	ldr	r1, [r7, #12]
 80092d8:	4618      	mov	r0, r3
 80092da:	f00a fced 	bl	8013cb8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80092de:	78fb      	ldrb	r3, [r7, #3]
 80092e0:	f003 030f 	and.w	r3, r3, #15
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d10a      	bne.n	80092fe <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6818      	ldr	r0, [r3, #0]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	b2d9      	uxtb	r1, r3
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80092f8:	461a      	mov	r2, r3
 80092fa:	f00a fedf 	bl	80140bc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2200      	movs	r2, #0
 8009302:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009306:	2300      	movs	r3, #0
}
 8009308:	4618      	mov	r0, r3
 800930a:	3710      	adds	r7, #16
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	460b      	mov	r3, r1
 800931a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800931c:	78fb      	ldrb	r3, [r7, #3]
 800931e:	f003 020f 	and.w	r2, r3, #15
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	429a      	cmp	r2, r3
 8009328:	d901      	bls.n	800932e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800932a:	2301      	movs	r3, #1
 800932c:	e042      	b.n	80093b4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800932e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009332:	2b00      	cmp	r3, #0
 8009334:	da0f      	bge.n	8009356 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009336:	78fb      	ldrb	r3, [r7, #3]
 8009338:	f003 020f 	and.w	r2, r3, #15
 800933c:	4613      	mov	r3, r2
 800933e:	00db      	lsls	r3, r3, #3
 8009340:	4413      	add	r3, r2
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	3338      	adds	r3, #56	; 0x38
 8009346:	687a      	ldr	r2, [r7, #4]
 8009348:	4413      	add	r3, r2
 800934a:	3304      	adds	r3, #4
 800934c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2201      	movs	r2, #1
 8009352:	705a      	strb	r2, [r3, #1]
 8009354:	e00f      	b.n	8009376 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009356:	78fb      	ldrb	r3, [r7, #3]
 8009358:	f003 020f 	and.w	r2, r3, #15
 800935c:	4613      	mov	r3, r2
 800935e:	00db      	lsls	r3, r3, #3
 8009360:	4413      	add	r3, r2
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	4413      	add	r3, r2
 800936c:	3304      	adds	r3, #4
 800936e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2200      	movs	r2, #0
 8009374:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2200      	movs	r2, #0
 800937a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800937c:	78fb      	ldrb	r3, [r7, #3]
 800937e:	f003 030f 	and.w	r3, r3, #15
 8009382:	b2da      	uxtb	r2, r3
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800938e:	2b01      	cmp	r3, #1
 8009390:	d101      	bne.n	8009396 <HAL_PCD_EP_ClrStall+0x86>
 8009392:	2302      	movs	r3, #2
 8009394:	e00e      	b.n	80093b4 <HAL_PCD_EP_ClrStall+0xa4>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2201      	movs	r2, #1
 800939a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	68f9      	ldr	r1, [r7, #12]
 80093a4:	4618      	mov	r0, r3
 80093a6:	f00a fcf5 	bl	8013d94 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80093b2:	2300      	movs	r3, #0
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3710      	adds	r7, #16
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	460b      	mov	r3, r1
 80093c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80093c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	da0c      	bge.n	80093ea <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80093d0:	78fb      	ldrb	r3, [r7, #3]
 80093d2:	f003 020f 	and.w	r2, r3, #15
 80093d6:	4613      	mov	r3, r2
 80093d8:	00db      	lsls	r3, r3, #3
 80093da:	4413      	add	r3, r2
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	3338      	adds	r3, #56	; 0x38
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	4413      	add	r3, r2
 80093e4:	3304      	adds	r3, #4
 80093e6:	60fb      	str	r3, [r7, #12]
 80093e8:	e00c      	b.n	8009404 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80093ea:	78fb      	ldrb	r3, [r7, #3]
 80093ec:	f003 020f 	and.w	r2, r3, #15
 80093f0:	4613      	mov	r3, r2
 80093f2:	00db      	lsls	r3, r3, #3
 80093f4:	4413      	add	r3, r2
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80093fc:	687a      	ldr	r2, [r7, #4]
 80093fe:	4413      	add	r3, r2
 8009400:	3304      	adds	r3, #4
 8009402:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	68f9      	ldr	r1, [r7, #12]
 800940a:	4618      	mov	r0, r3
 800940c:	f00a fb14 	bl	8013a38 <USB_EPStopXfer>
 8009410:	4603      	mov	r3, r0
 8009412:	72fb      	strb	r3, [r7, #11]

  return ret;
 8009414:	7afb      	ldrb	r3, [r7, #11]
}
 8009416:	4618      	mov	r0, r3
 8009418:	3710      	adds	r7, #16
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}

0800941e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800941e:	b580      	push	{r7, lr}
 8009420:	b08a      	sub	sp, #40	; 0x28
 8009422:	af02      	add	r7, sp, #8
 8009424:	6078      	str	r0, [r7, #4]
 8009426:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009432:	683a      	ldr	r2, [r7, #0]
 8009434:	4613      	mov	r3, r2
 8009436:	00db      	lsls	r3, r3, #3
 8009438:	4413      	add	r3, r2
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	3338      	adds	r3, #56	; 0x38
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	4413      	add	r3, r2
 8009442:	3304      	adds	r3, #4
 8009444:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	695a      	ldr	r2, [r3, #20]
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	691b      	ldr	r3, [r3, #16]
 800944e:	429a      	cmp	r2, r3
 8009450:	d901      	bls.n	8009456 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009452:	2301      	movs	r3, #1
 8009454:	e06c      	b.n	8009530 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	691a      	ldr	r2, [r3, #16]
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	695b      	ldr	r3, [r3, #20]
 800945e:	1ad3      	subs	r3, r2, r3
 8009460:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	689b      	ldr	r3, [r3, #8]
 8009466:	69fa      	ldr	r2, [r7, #28]
 8009468:	429a      	cmp	r2, r3
 800946a:	d902      	bls.n	8009472 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009472:	69fb      	ldr	r3, [r7, #28]
 8009474:	3303      	adds	r3, #3
 8009476:	089b      	lsrs	r3, r3, #2
 8009478:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800947a:	e02b      	b.n	80094d4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	691a      	ldr	r2, [r3, #16]
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	695b      	ldr	r3, [r3, #20]
 8009484:	1ad3      	subs	r3, r2, r3
 8009486:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	69fa      	ldr	r2, [r7, #28]
 800948e:	429a      	cmp	r2, r3
 8009490:	d902      	bls.n	8009498 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009498:	69fb      	ldr	r3, [r7, #28]
 800949a:	3303      	adds	r3, #3
 800949c:	089b      	lsrs	r3, r3, #2
 800949e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	68d9      	ldr	r1, [r3, #12]
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	b2da      	uxtb	r2, r3
 80094a8:	69fb      	ldr	r3, [r7, #28]
 80094aa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	9300      	str	r3, [sp, #0]
 80094b4:	4603      	mov	r3, r0
 80094b6:	6978      	ldr	r0, [r7, #20]
 80094b8:	f00a fb68 	bl	8013b8c <USB_WritePacket>

    ep->xfer_buff  += len;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	68da      	ldr	r2, [r3, #12]
 80094c0:	69fb      	ldr	r3, [r7, #28]
 80094c2:	441a      	add	r2, r3
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	695a      	ldr	r2, [r3, #20]
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	441a      	add	r2, r3
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	015a      	lsls	r2, r3, #5
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	4413      	add	r3, r2
 80094dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094e0:	699b      	ldr	r3, [r3, #24]
 80094e2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80094e4:	69ba      	ldr	r2, [r7, #24]
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d809      	bhi.n	80094fe <PCD_WriteEmptyTxFifo+0xe0>
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	695a      	ldr	r2, [r3, #20]
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d203      	bcs.n	80094fe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	691b      	ldr	r3, [r3, #16]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d1be      	bne.n	800947c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	691a      	ldr	r2, [r3, #16]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	695b      	ldr	r3, [r3, #20]
 8009506:	429a      	cmp	r2, r3
 8009508:	d811      	bhi.n	800952e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	f003 030f 	and.w	r3, r3, #15
 8009510:	2201      	movs	r2, #1
 8009512:	fa02 f303 	lsl.w	r3, r2, r3
 8009516:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800951e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	43db      	mvns	r3, r3
 8009524:	6939      	ldr	r1, [r7, #16]
 8009526:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800952a:	4013      	ands	r3, r2
 800952c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800952e:	2300      	movs	r3, #0
}
 8009530:	4618      	mov	r0, r3
 8009532:	3720      	adds	r7, #32
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b088      	sub	sp, #32
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800954c:	69fb      	ldr	r3, [r7, #28]
 800954e:	333c      	adds	r3, #60	; 0x3c
 8009550:	3304      	adds	r3, #4
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	015a      	lsls	r2, r3, #5
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	4413      	add	r3, r2
 800955e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	2b01      	cmp	r3, #1
 800956c:	d17b      	bne.n	8009666 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	f003 0308 	and.w	r3, r3, #8
 8009574:	2b00      	cmp	r3, #0
 8009576:	d015      	beq.n	80095a4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	4a61      	ldr	r2, [pc, #388]	; (8009700 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800957c:	4293      	cmp	r3, r2
 800957e:	f240 80b9 	bls.w	80096f4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009588:	2b00      	cmp	r3, #0
 800958a:	f000 80b3 	beq.w	80096f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	015a      	lsls	r2, r3, #5
 8009592:	69bb      	ldr	r3, [r7, #24]
 8009594:	4413      	add	r3, r2
 8009596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800959a:	461a      	mov	r2, r3
 800959c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095a0:	6093      	str	r3, [r2, #8]
 80095a2:	e0a7      	b.n	80096f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	f003 0320 	and.w	r3, r3, #32
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d009      	beq.n	80095c2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	015a      	lsls	r2, r3, #5
 80095b2:	69bb      	ldr	r3, [r7, #24]
 80095b4:	4413      	add	r3, r2
 80095b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ba:	461a      	mov	r2, r3
 80095bc:	2320      	movs	r3, #32
 80095be:	6093      	str	r3, [r2, #8]
 80095c0:	e098      	b.n	80096f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	f040 8093 	bne.w	80096f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	4a4b      	ldr	r2, [pc, #300]	; (8009700 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d90f      	bls.n	80095f6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d00a      	beq.n	80095f6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	015a      	lsls	r2, r3, #5
 80095e4:	69bb      	ldr	r3, [r7, #24]
 80095e6:	4413      	add	r3, r2
 80095e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ec:	461a      	mov	r2, r3
 80095ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095f2:	6093      	str	r3, [r2, #8]
 80095f4:	e07e      	b.n	80096f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80095f6:	683a      	ldr	r2, [r7, #0]
 80095f8:	4613      	mov	r3, r2
 80095fa:	00db      	lsls	r3, r3, #3
 80095fc:	4413      	add	r3, r2
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	4413      	add	r3, r2
 8009608:	3304      	adds	r3, #4
 800960a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	6a1a      	ldr	r2, [r3, #32]
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	0159      	lsls	r1, r3, #5
 8009614:	69bb      	ldr	r3, [r7, #24]
 8009616:	440b      	add	r3, r1
 8009618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800961c:	691b      	ldr	r3, [r3, #16]
 800961e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009622:	1ad2      	subs	r2, r2, r3
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d114      	bne.n	8009658 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	691b      	ldr	r3, [r3, #16]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d109      	bne.n	800964a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6818      	ldr	r0, [r3, #0]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009640:	461a      	mov	r2, r3
 8009642:	2101      	movs	r1, #1
 8009644:	f00a fd3a 	bl	80140bc <USB_EP0_OutStart>
 8009648:	e006      	b.n	8009658 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	68da      	ldr	r2, [r3, #12]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	695b      	ldr	r3, [r3, #20]
 8009652:	441a      	add	r2, r3
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	b2db      	uxtb	r3, r3
 800965c:	4619      	mov	r1, r3
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f00d faa0 	bl	8016ba4 <HAL_PCD_DataOutStageCallback>
 8009664:	e046      	b.n	80096f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	4a26      	ldr	r2, [pc, #152]	; (8009704 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d124      	bne.n	80096b8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009674:	2b00      	cmp	r3, #0
 8009676:	d00a      	beq.n	800968e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	015a      	lsls	r2, r3, #5
 800967c:	69bb      	ldr	r3, [r7, #24]
 800967e:	4413      	add	r3, r2
 8009680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009684:	461a      	mov	r2, r3
 8009686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800968a:	6093      	str	r3, [r2, #8]
 800968c:	e032      	b.n	80096f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	f003 0320 	and.w	r3, r3, #32
 8009694:	2b00      	cmp	r3, #0
 8009696:	d008      	beq.n	80096aa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	015a      	lsls	r2, r3, #5
 800969c:	69bb      	ldr	r3, [r7, #24]
 800969e:	4413      	add	r3, r2
 80096a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096a4:	461a      	mov	r2, r3
 80096a6:	2320      	movs	r3, #32
 80096a8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	b2db      	uxtb	r3, r3
 80096ae:	4619      	mov	r1, r3
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f00d fa77 	bl	8016ba4 <HAL_PCD_DataOutStageCallback>
 80096b6:	e01d      	b.n	80096f4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d114      	bne.n	80096e8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80096be:	6879      	ldr	r1, [r7, #4]
 80096c0:	683a      	ldr	r2, [r7, #0]
 80096c2:	4613      	mov	r3, r2
 80096c4:	00db      	lsls	r3, r3, #3
 80096c6:	4413      	add	r3, r2
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	440b      	add	r3, r1
 80096cc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d108      	bne.n	80096e8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6818      	ldr	r0, [r3, #0]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80096e0:	461a      	mov	r2, r3
 80096e2:	2100      	movs	r1, #0
 80096e4:	f00a fcea 	bl	80140bc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	b2db      	uxtb	r3, r3
 80096ec:	4619      	mov	r1, r3
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f00d fa58 	bl	8016ba4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80096f4:	2300      	movs	r3, #0
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3720      	adds	r7, #32
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	4f54300a 	.word	0x4f54300a
 8009704:	4f54310a 	.word	0x4f54310a

08009708 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b086      	sub	sp, #24
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	333c      	adds	r3, #60	; 0x3c
 8009720:	3304      	adds	r3, #4
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	015a      	lsls	r2, r3, #5
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	4413      	add	r3, r2
 800972e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	4a15      	ldr	r2, [pc, #84]	; (8009790 <PCD_EP_OutSetupPacket_int+0x88>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d90e      	bls.n	800975c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009744:	2b00      	cmp	r3, #0
 8009746:	d009      	beq.n	800975c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	015a      	lsls	r2, r3, #5
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	4413      	add	r3, r2
 8009750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009754:	461a      	mov	r2, r3
 8009756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800975a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f00d fa0f 	bl	8016b80 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	4a0a      	ldr	r2, [pc, #40]	; (8009790 <PCD_EP_OutSetupPacket_int+0x88>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d90c      	bls.n	8009784 <PCD_EP_OutSetupPacket_int+0x7c>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	68db      	ldr	r3, [r3, #12]
 800976e:	2b01      	cmp	r3, #1
 8009770:	d108      	bne.n	8009784 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6818      	ldr	r0, [r3, #0]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800977c:	461a      	mov	r2, r3
 800977e:	2101      	movs	r1, #1
 8009780:	f00a fc9c 	bl	80140bc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009784:	2300      	movs	r3, #0
}
 8009786:	4618      	mov	r0, r3
 8009788:	3718      	adds	r7, #24
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	4f54300a 	.word	0x4f54300a

08009794 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009794:	b480      	push	{r7}
 8009796:	b085      	sub	sp, #20
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	460b      	mov	r3, r1
 800979e:	70fb      	strb	r3, [r7, #3]
 80097a0:	4613      	mov	r3, r2
 80097a2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097aa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80097ac:	78fb      	ldrb	r3, [r7, #3]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d107      	bne.n	80097c2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80097b2:	883b      	ldrh	r3, [r7, #0]
 80097b4:	0419      	lsls	r1, r3, #16
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	68ba      	ldr	r2, [r7, #8]
 80097bc:	430a      	orrs	r2, r1
 80097be:	629a      	str	r2, [r3, #40]	; 0x28
 80097c0:	e028      	b.n	8009814 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097c8:	0c1b      	lsrs	r3, r3, #16
 80097ca:	68ba      	ldr	r2, [r7, #8]
 80097cc:	4413      	add	r3, r2
 80097ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80097d0:	2300      	movs	r3, #0
 80097d2:	73fb      	strb	r3, [r7, #15]
 80097d4:	e00d      	b.n	80097f2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	7bfb      	ldrb	r3, [r7, #15]
 80097dc:	3340      	adds	r3, #64	; 0x40
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	4413      	add	r3, r2
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	0c1b      	lsrs	r3, r3, #16
 80097e6:	68ba      	ldr	r2, [r7, #8]
 80097e8:	4413      	add	r3, r2
 80097ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80097ec:	7bfb      	ldrb	r3, [r7, #15]
 80097ee:	3301      	adds	r3, #1
 80097f0:	73fb      	strb	r3, [r7, #15]
 80097f2:	7bfa      	ldrb	r2, [r7, #15]
 80097f4:	78fb      	ldrb	r3, [r7, #3]
 80097f6:	3b01      	subs	r3, #1
 80097f8:	429a      	cmp	r2, r3
 80097fa:	d3ec      	bcc.n	80097d6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80097fc:	883b      	ldrh	r3, [r7, #0]
 80097fe:	0418      	lsls	r0, r3, #16
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6819      	ldr	r1, [r3, #0]
 8009804:	78fb      	ldrb	r3, [r7, #3]
 8009806:	3b01      	subs	r3, #1
 8009808:	68ba      	ldr	r2, [r7, #8]
 800980a:	4302      	orrs	r2, r0
 800980c:	3340      	adds	r3, #64	; 0x40
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	440b      	add	r3, r1
 8009812:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009814:	2300      	movs	r3, #0
}
 8009816:	4618      	mov	r0, r3
 8009818:	3714      	adds	r7, #20
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr

08009822 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009822:	b480      	push	{r7}
 8009824:	b083      	sub	sp, #12
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
 800982a:	460b      	mov	r3, r1
 800982c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	887a      	ldrh	r2, [r7, #2]
 8009834:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009836:	2300      	movs	r3, #0
}
 8009838:	4618      	mov	r0, r3
 800983a:	370c      	adds	r7, #12
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009844:	b480      	push	{r7}
 8009846:	b085      	sub	sp, #20
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2201      	movs	r2, #1
 8009856:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2200      	movs	r2, #0
 800985e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	699b      	ldr	r3, [r3, #24]
 8009866:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009872:	4b05      	ldr	r3, [pc, #20]	; (8009888 <HAL_PCDEx_ActivateLPM+0x44>)
 8009874:	4313      	orrs	r3, r2
 8009876:	68fa      	ldr	r2, [r7, #12]
 8009878:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800987a:	2300      	movs	r3, #0
}
 800987c:	4618      	mov	r0, r3
 800987e:	3714      	adds	r7, #20
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr
 8009888:	10000003 	.word	0x10000003

0800988c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800988c:	b480      	push	{r7}
 800988e:	b083      	sub	sp, #12
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	460b      	mov	r3, r1
 8009896:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009898:	bf00      	nop
 800989a:	370c      	adds	r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b084      	sub	sp, #16
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80098ac:	4b19      	ldr	r3, [pc, #100]	; (8009914 <HAL_PWREx_ConfigSupply+0x70>)
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	f003 0304 	and.w	r3, r3, #4
 80098b4:	2b04      	cmp	r3, #4
 80098b6:	d00a      	beq.n	80098ce <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80098b8:	4b16      	ldr	r3, [pc, #88]	; (8009914 <HAL_PWREx_ConfigSupply+0x70>)
 80098ba:	68db      	ldr	r3, [r3, #12]
 80098bc:	f003 0307 	and.w	r3, r3, #7
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d001      	beq.n	80098ca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80098c6:	2301      	movs	r3, #1
 80098c8:	e01f      	b.n	800990a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80098ca:	2300      	movs	r3, #0
 80098cc:	e01d      	b.n	800990a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80098ce:	4b11      	ldr	r3, [pc, #68]	; (8009914 <HAL_PWREx_ConfigSupply+0x70>)
 80098d0:	68db      	ldr	r3, [r3, #12]
 80098d2:	f023 0207 	bic.w	r2, r3, #7
 80098d6:	490f      	ldr	r1, [pc, #60]	; (8009914 <HAL_PWREx_ConfigSupply+0x70>)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	4313      	orrs	r3, r2
 80098dc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80098de:	f7fa f90f 	bl	8003b00 <HAL_GetTick>
 80098e2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80098e4:	e009      	b.n	80098fa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80098e6:	f7fa f90b 	bl	8003b00 <HAL_GetTick>
 80098ea:	4602      	mov	r2, r0
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	1ad3      	subs	r3, r2, r3
 80098f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80098f4:	d901      	bls.n	80098fa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80098f6:	2301      	movs	r3, #1
 80098f8:	e007      	b.n	800990a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80098fa:	4b06      	ldr	r3, [pc, #24]	; (8009914 <HAL_PWREx_ConfigSupply+0x70>)
 80098fc:	685b      	ldr	r3, [r3, #4]
 80098fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009902:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009906:	d1ee      	bne.n	80098e6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009908:	2300      	movs	r3, #0
}
 800990a:	4618      	mov	r0, r3
 800990c:	3710      	adds	r7, #16
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
 8009912:	bf00      	nop
 8009914:	58024800 	.word	0x58024800

08009918 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009918:	b480      	push	{r7}
 800991a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800991c:	4b05      	ldr	r3, [pc, #20]	; (8009934 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800991e:	68db      	ldr	r3, [r3, #12]
 8009920:	4a04      	ldr	r2, [pc, #16]	; (8009934 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009922:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009926:	60d3      	str	r3, [r2, #12]
}
 8009928:	bf00      	nop
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop
 8009934:	58024800 	.word	0x58024800

08009938 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b08c      	sub	sp, #48	; 0x30
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d101      	bne.n	800994a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009946:	2301      	movs	r3, #1
 8009948:	e3c8      	b.n	800a0dc <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f003 0301 	and.w	r3, r3, #1
 8009952:	2b00      	cmp	r3, #0
 8009954:	f000 8087 	beq.w	8009a66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009958:	4b88      	ldr	r3, [pc, #544]	; (8009b7c <HAL_RCC_OscConfig+0x244>)
 800995a:	691b      	ldr	r3, [r3, #16]
 800995c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009960:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009962:	4b86      	ldr	r3, [pc, #536]	; (8009b7c <HAL_RCC_OscConfig+0x244>)
 8009964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009966:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800996a:	2b10      	cmp	r3, #16
 800996c:	d007      	beq.n	800997e <HAL_RCC_OscConfig+0x46>
 800996e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009970:	2b18      	cmp	r3, #24
 8009972:	d110      	bne.n	8009996 <HAL_RCC_OscConfig+0x5e>
 8009974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009976:	f003 0303 	and.w	r3, r3, #3
 800997a:	2b02      	cmp	r3, #2
 800997c:	d10b      	bne.n	8009996 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800997e:	4b7f      	ldr	r3, [pc, #508]	; (8009b7c <HAL_RCC_OscConfig+0x244>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009986:	2b00      	cmp	r3, #0
 8009988:	d06c      	beq.n	8009a64 <HAL_RCC_OscConfig+0x12c>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d168      	bne.n	8009a64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009992:	2301      	movs	r3, #1
 8009994:	e3a2      	b.n	800a0dc <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800999e:	d106      	bne.n	80099ae <HAL_RCC_OscConfig+0x76>
 80099a0:	4b76      	ldr	r3, [pc, #472]	; (8009b7c <HAL_RCC_OscConfig+0x244>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a75      	ldr	r2, [pc, #468]	; (8009b7c <HAL_RCC_OscConfig+0x244>)
 80099a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099aa:	6013      	str	r3, [r2, #0]
 80099ac:	e02e      	b.n	8009a0c <HAL_RCC_OscConfig+0xd4>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d10c      	bne.n	80099d0 <HAL_RCC_OscConfig+0x98>
 80099b6:	4b71      	ldr	r3, [pc, #452]	; (8009b7c <HAL_RCC_OscConfig+0x244>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a70      	ldr	r2, [pc, #448]	; (8009b7c <HAL_RCC_OscConfig+0x244>)
 80099bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099c0:	6013      	str	r3, [r2, #0]
 80099c2:	4b6e      	ldr	r3, [pc, #440]	; (8009b7c <HAL_RCC_OscConfig+0x244>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	4a6d      	ldr	r2, [pc, #436]	; (8009b7c <HAL_RCC_OscConfig+0x244>)
 80099c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80099cc:	6013      	str	r3, [r2, #0]
 80099ce:	e01d      	b.n	8009a0c <HAL_RCC_OscConfig+0xd4>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80099d8:	d10c      	bne.n	80099f4 <HAL_RCC_OscConfig+0xbc>
 80099da:	4b68      	ldr	r3, [pc, #416]	; (8009b7c <HAL_RCC_OscConfig+0x244>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4a67      	ldr	r2, [pc, #412]	; (8009b7c <HAL_RCC_OscConfig+0x244>)
 80099e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80099e4:	6013      	str	r3, [r2, #0]
 80099e6:	4b65      	ldr	r3, [pc, #404]	; (8009b7c <HAL_RCC_OscConfig+0x244>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a64      	ldr	r2, [pc, #400]	; (8009b7c <HAL_RCC_OscConfig+0x244>)
 80099ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099f0:	6013      	str	r3, [r2, #0]
 80099f2:	e00b      	b.n	8009a0c <HAL_RCC_OscConfig+0xd4>
 80099f4:	4b61      	ldr	r3, [pc, #388]	; (8009b7c <HAL_RCC_OscConfig+0x244>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a60      	ldr	r2, [pc, #384]	; (8009b7c <HAL_RCC_OscConfig+0x244>)
 80099fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099fe:	6013      	str	r3, [r2, #0]
 8009a00:	4b5e      	ldr	r3, [pc, #376]	; (8009b7c <HAL_RCC_OscConfig+0x244>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a5d      	ldr	r2, [pc, #372]	; (8009b7c <HAL_RCC_OscConfig+0x244>)
 8009a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d013      	beq.n	8009a3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a14:	f7fa f874 	bl	8003b00 <HAL_GetTick>
 8009a18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009a1a:	e008      	b.n	8009a2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009a1c:	f7fa f870 	bl	8003b00 <HAL_GetTick>
 8009a20:	4602      	mov	r2, r0
 8009a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a24:	1ad3      	subs	r3, r2, r3
 8009a26:	2b64      	cmp	r3, #100	; 0x64
 8009a28:	d901      	bls.n	8009a2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009a2a:	2303      	movs	r3, #3
 8009a2c:	e356      	b.n	800a0dc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009a2e:	4b53      	ldr	r3, [pc, #332]	; (8009b7c <HAL_RCC_OscConfig+0x244>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d0f0      	beq.n	8009a1c <HAL_RCC_OscConfig+0xe4>
 8009a3a:	e014      	b.n	8009a66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a3c:	f7fa f860 	bl	8003b00 <HAL_GetTick>
 8009a40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009a42:	e008      	b.n	8009a56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009a44:	f7fa f85c 	bl	8003b00 <HAL_GetTick>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4c:	1ad3      	subs	r3, r2, r3
 8009a4e:	2b64      	cmp	r3, #100	; 0x64
 8009a50:	d901      	bls.n	8009a56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009a52:	2303      	movs	r3, #3
 8009a54:	e342      	b.n	800a0dc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009a56:	4b49      	ldr	r3, [pc, #292]	; (8009b7c <HAL_RCC_OscConfig+0x244>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d1f0      	bne.n	8009a44 <HAL_RCC_OscConfig+0x10c>
 8009a62:	e000      	b.n	8009a66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f003 0302 	and.w	r3, r3, #2
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	f000 808c 	beq.w	8009b8c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a74:	4b41      	ldr	r3, [pc, #260]	; (8009b7c <HAL_RCC_OscConfig+0x244>)
 8009a76:	691b      	ldr	r3, [r3, #16]
 8009a78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a7c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009a7e:	4b3f      	ldr	r3, [pc, #252]	; (8009b7c <HAL_RCC_OscConfig+0x244>)
 8009a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a82:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009a84:	6a3b      	ldr	r3, [r7, #32]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d007      	beq.n	8009a9a <HAL_RCC_OscConfig+0x162>
 8009a8a:	6a3b      	ldr	r3, [r7, #32]
 8009a8c:	2b18      	cmp	r3, #24
 8009a8e:	d137      	bne.n	8009b00 <HAL_RCC_OscConfig+0x1c8>
 8009a90:	69fb      	ldr	r3, [r7, #28]
 8009a92:	f003 0303 	and.w	r3, r3, #3
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d132      	bne.n	8009b00 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a9a:	4b38      	ldr	r3, [pc, #224]	; (8009b7c <HAL_RCC_OscConfig+0x244>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f003 0304 	and.w	r3, r3, #4
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d005      	beq.n	8009ab2 <HAL_RCC_OscConfig+0x17a>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	68db      	ldr	r3, [r3, #12]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d101      	bne.n	8009ab2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e314      	b.n	800a0dc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009ab2:	4b32      	ldr	r3, [pc, #200]	; (8009b7c <HAL_RCC_OscConfig+0x244>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f023 0219 	bic.w	r2, r3, #25
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	68db      	ldr	r3, [r3, #12]
 8009abe:	492f      	ldr	r1, [pc, #188]	; (8009b7c <HAL_RCC_OscConfig+0x244>)
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ac4:	f7fa f81c 	bl	8003b00 <HAL_GetTick>
 8009ac8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009aca:	e008      	b.n	8009ade <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009acc:	f7fa f818 	bl	8003b00 <HAL_GetTick>
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad4:	1ad3      	subs	r3, r2, r3
 8009ad6:	2b02      	cmp	r3, #2
 8009ad8:	d901      	bls.n	8009ade <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009ada:	2303      	movs	r3, #3
 8009adc:	e2fe      	b.n	800a0dc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009ade:	4b27      	ldr	r3, [pc, #156]	; (8009b7c <HAL_RCC_OscConfig+0x244>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f003 0304 	and.w	r3, r3, #4
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d0f0      	beq.n	8009acc <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009aea:	4b24      	ldr	r3, [pc, #144]	; (8009b7c <HAL_RCC_OscConfig+0x244>)
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	691b      	ldr	r3, [r3, #16]
 8009af6:	061b      	lsls	r3, r3, #24
 8009af8:	4920      	ldr	r1, [pc, #128]	; (8009b7c <HAL_RCC_OscConfig+0x244>)
 8009afa:	4313      	orrs	r3, r2
 8009afc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009afe:	e045      	b.n	8009b8c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	68db      	ldr	r3, [r3, #12]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d026      	beq.n	8009b56 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009b08:	4b1c      	ldr	r3, [pc, #112]	; (8009b7c <HAL_RCC_OscConfig+0x244>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f023 0219 	bic.w	r2, r3, #25
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	4919      	ldr	r1, [pc, #100]	; (8009b7c <HAL_RCC_OscConfig+0x244>)
 8009b16:	4313      	orrs	r3, r2
 8009b18:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b1a:	f7f9 fff1 	bl	8003b00 <HAL_GetTick>
 8009b1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b20:	e008      	b.n	8009b34 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b22:	f7f9 ffed 	bl	8003b00 <HAL_GetTick>
 8009b26:	4602      	mov	r2, r0
 8009b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2a:	1ad3      	subs	r3, r2, r3
 8009b2c:	2b02      	cmp	r3, #2
 8009b2e:	d901      	bls.n	8009b34 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009b30:	2303      	movs	r3, #3
 8009b32:	e2d3      	b.n	800a0dc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b34:	4b11      	ldr	r3, [pc, #68]	; (8009b7c <HAL_RCC_OscConfig+0x244>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f003 0304 	and.w	r3, r3, #4
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d0f0      	beq.n	8009b22 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b40:	4b0e      	ldr	r3, [pc, #56]	; (8009b7c <HAL_RCC_OscConfig+0x244>)
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	691b      	ldr	r3, [r3, #16]
 8009b4c:	061b      	lsls	r3, r3, #24
 8009b4e:	490b      	ldr	r1, [pc, #44]	; (8009b7c <HAL_RCC_OscConfig+0x244>)
 8009b50:	4313      	orrs	r3, r2
 8009b52:	604b      	str	r3, [r1, #4]
 8009b54:	e01a      	b.n	8009b8c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009b56:	4b09      	ldr	r3, [pc, #36]	; (8009b7c <HAL_RCC_OscConfig+0x244>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a08      	ldr	r2, [pc, #32]	; (8009b7c <HAL_RCC_OscConfig+0x244>)
 8009b5c:	f023 0301 	bic.w	r3, r3, #1
 8009b60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b62:	f7f9 ffcd 	bl	8003b00 <HAL_GetTick>
 8009b66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009b68:	e00a      	b.n	8009b80 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b6a:	f7f9 ffc9 	bl	8003b00 <HAL_GetTick>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b72:	1ad3      	subs	r3, r2, r3
 8009b74:	2b02      	cmp	r3, #2
 8009b76:	d903      	bls.n	8009b80 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009b78:	2303      	movs	r3, #3
 8009b7a:	e2af      	b.n	800a0dc <HAL_RCC_OscConfig+0x7a4>
 8009b7c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009b80:	4b96      	ldr	r3, [pc, #600]	; (8009ddc <HAL_RCC_OscConfig+0x4a4>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f003 0304 	and.w	r3, r3, #4
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d1ee      	bne.n	8009b6a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f003 0310 	and.w	r3, r3, #16
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d06a      	beq.n	8009c6e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009b98:	4b90      	ldr	r3, [pc, #576]	; (8009ddc <HAL_RCC_OscConfig+0x4a4>)
 8009b9a:	691b      	ldr	r3, [r3, #16]
 8009b9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ba0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009ba2:	4b8e      	ldr	r3, [pc, #568]	; (8009ddc <HAL_RCC_OscConfig+0x4a4>)
 8009ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ba6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009ba8:	69bb      	ldr	r3, [r7, #24]
 8009baa:	2b08      	cmp	r3, #8
 8009bac:	d007      	beq.n	8009bbe <HAL_RCC_OscConfig+0x286>
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	2b18      	cmp	r3, #24
 8009bb2:	d11b      	bne.n	8009bec <HAL_RCC_OscConfig+0x2b4>
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	f003 0303 	and.w	r3, r3, #3
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d116      	bne.n	8009bec <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009bbe:	4b87      	ldr	r3, [pc, #540]	; (8009ddc <HAL_RCC_OscConfig+0x4a4>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d005      	beq.n	8009bd6 <HAL_RCC_OscConfig+0x29e>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	69db      	ldr	r3, [r3, #28]
 8009bce:	2b80      	cmp	r3, #128	; 0x80
 8009bd0:	d001      	beq.n	8009bd6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	e282      	b.n	800a0dc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009bd6:	4b81      	ldr	r3, [pc, #516]	; (8009ddc <HAL_RCC_OscConfig+0x4a4>)
 8009bd8:	68db      	ldr	r3, [r3, #12]
 8009bda:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6a1b      	ldr	r3, [r3, #32]
 8009be2:	061b      	lsls	r3, r3, #24
 8009be4:	497d      	ldr	r1, [pc, #500]	; (8009ddc <HAL_RCC_OscConfig+0x4a4>)
 8009be6:	4313      	orrs	r3, r2
 8009be8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009bea:	e040      	b.n	8009c6e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	69db      	ldr	r3, [r3, #28]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d023      	beq.n	8009c3c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009bf4:	4b79      	ldr	r3, [pc, #484]	; (8009ddc <HAL_RCC_OscConfig+0x4a4>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a78      	ldr	r2, [pc, #480]	; (8009ddc <HAL_RCC_OscConfig+0x4a4>)
 8009bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c00:	f7f9 ff7e 	bl	8003b00 <HAL_GetTick>
 8009c04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009c06:	e008      	b.n	8009c1a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009c08:	f7f9 ff7a 	bl	8003b00 <HAL_GetTick>
 8009c0c:	4602      	mov	r2, r0
 8009c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c10:	1ad3      	subs	r3, r2, r3
 8009c12:	2b02      	cmp	r3, #2
 8009c14:	d901      	bls.n	8009c1a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009c16:	2303      	movs	r3, #3
 8009c18:	e260      	b.n	800a0dc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009c1a:	4b70      	ldr	r3, [pc, #448]	; (8009ddc <HAL_RCC_OscConfig+0x4a4>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d0f0      	beq.n	8009c08 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009c26:	4b6d      	ldr	r3, [pc, #436]	; (8009ddc <HAL_RCC_OscConfig+0x4a4>)
 8009c28:	68db      	ldr	r3, [r3, #12]
 8009c2a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6a1b      	ldr	r3, [r3, #32]
 8009c32:	061b      	lsls	r3, r3, #24
 8009c34:	4969      	ldr	r1, [pc, #420]	; (8009ddc <HAL_RCC_OscConfig+0x4a4>)
 8009c36:	4313      	orrs	r3, r2
 8009c38:	60cb      	str	r3, [r1, #12]
 8009c3a:	e018      	b.n	8009c6e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009c3c:	4b67      	ldr	r3, [pc, #412]	; (8009ddc <HAL_RCC_OscConfig+0x4a4>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4a66      	ldr	r2, [pc, #408]	; (8009ddc <HAL_RCC_OscConfig+0x4a4>)
 8009c42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c48:	f7f9 ff5a 	bl	8003b00 <HAL_GetTick>
 8009c4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009c4e:	e008      	b.n	8009c62 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009c50:	f7f9 ff56 	bl	8003b00 <HAL_GetTick>
 8009c54:	4602      	mov	r2, r0
 8009c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c58:	1ad3      	subs	r3, r2, r3
 8009c5a:	2b02      	cmp	r3, #2
 8009c5c:	d901      	bls.n	8009c62 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009c5e:	2303      	movs	r3, #3
 8009c60:	e23c      	b.n	800a0dc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009c62:	4b5e      	ldr	r3, [pc, #376]	; (8009ddc <HAL_RCC_OscConfig+0x4a4>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d1f0      	bne.n	8009c50 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f003 0308 	and.w	r3, r3, #8
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d036      	beq.n	8009ce8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	695b      	ldr	r3, [r3, #20]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d019      	beq.n	8009cb6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009c82:	4b56      	ldr	r3, [pc, #344]	; (8009ddc <HAL_RCC_OscConfig+0x4a4>)
 8009c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c86:	4a55      	ldr	r2, [pc, #340]	; (8009ddc <HAL_RCC_OscConfig+0x4a4>)
 8009c88:	f043 0301 	orr.w	r3, r3, #1
 8009c8c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c8e:	f7f9 ff37 	bl	8003b00 <HAL_GetTick>
 8009c92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009c94:	e008      	b.n	8009ca8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009c96:	f7f9 ff33 	bl	8003b00 <HAL_GetTick>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9e:	1ad3      	subs	r3, r2, r3
 8009ca0:	2b02      	cmp	r3, #2
 8009ca2:	d901      	bls.n	8009ca8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009ca4:	2303      	movs	r3, #3
 8009ca6:	e219      	b.n	800a0dc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009ca8:	4b4c      	ldr	r3, [pc, #304]	; (8009ddc <HAL_RCC_OscConfig+0x4a4>)
 8009caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cac:	f003 0302 	and.w	r3, r3, #2
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d0f0      	beq.n	8009c96 <HAL_RCC_OscConfig+0x35e>
 8009cb4:	e018      	b.n	8009ce8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009cb6:	4b49      	ldr	r3, [pc, #292]	; (8009ddc <HAL_RCC_OscConfig+0x4a4>)
 8009cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cba:	4a48      	ldr	r2, [pc, #288]	; (8009ddc <HAL_RCC_OscConfig+0x4a4>)
 8009cbc:	f023 0301 	bic.w	r3, r3, #1
 8009cc0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cc2:	f7f9 ff1d 	bl	8003b00 <HAL_GetTick>
 8009cc6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009cc8:	e008      	b.n	8009cdc <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009cca:	f7f9 ff19 	bl	8003b00 <HAL_GetTick>
 8009cce:	4602      	mov	r2, r0
 8009cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd2:	1ad3      	subs	r3, r2, r3
 8009cd4:	2b02      	cmp	r3, #2
 8009cd6:	d901      	bls.n	8009cdc <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009cd8:	2303      	movs	r3, #3
 8009cda:	e1ff      	b.n	800a0dc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009cdc:	4b3f      	ldr	r3, [pc, #252]	; (8009ddc <HAL_RCC_OscConfig+0x4a4>)
 8009cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ce0:	f003 0302 	and.w	r3, r3, #2
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d1f0      	bne.n	8009cca <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f003 0320 	and.w	r3, r3, #32
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d036      	beq.n	8009d62 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	699b      	ldr	r3, [r3, #24]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d019      	beq.n	8009d30 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009cfc:	4b37      	ldr	r3, [pc, #220]	; (8009ddc <HAL_RCC_OscConfig+0x4a4>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a36      	ldr	r2, [pc, #216]	; (8009ddc <HAL_RCC_OscConfig+0x4a4>)
 8009d02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009d06:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009d08:	f7f9 fefa 	bl	8003b00 <HAL_GetTick>
 8009d0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009d0e:	e008      	b.n	8009d22 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009d10:	f7f9 fef6 	bl	8003b00 <HAL_GetTick>
 8009d14:	4602      	mov	r2, r0
 8009d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d18:	1ad3      	subs	r3, r2, r3
 8009d1a:	2b02      	cmp	r3, #2
 8009d1c:	d901      	bls.n	8009d22 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009d1e:	2303      	movs	r3, #3
 8009d20:	e1dc      	b.n	800a0dc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009d22:	4b2e      	ldr	r3, [pc, #184]	; (8009ddc <HAL_RCC_OscConfig+0x4a4>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d0f0      	beq.n	8009d10 <HAL_RCC_OscConfig+0x3d8>
 8009d2e:	e018      	b.n	8009d62 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009d30:	4b2a      	ldr	r3, [pc, #168]	; (8009ddc <HAL_RCC_OscConfig+0x4a4>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4a29      	ldr	r2, [pc, #164]	; (8009ddc <HAL_RCC_OscConfig+0x4a4>)
 8009d36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d3a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009d3c:	f7f9 fee0 	bl	8003b00 <HAL_GetTick>
 8009d40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009d42:	e008      	b.n	8009d56 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009d44:	f7f9 fedc 	bl	8003b00 <HAL_GetTick>
 8009d48:	4602      	mov	r2, r0
 8009d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4c:	1ad3      	subs	r3, r2, r3
 8009d4e:	2b02      	cmp	r3, #2
 8009d50:	d901      	bls.n	8009d56 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009d52:	2303      	movs	r3, #3
 8009d54:	e1c2      	b.n	800a0dc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009d56:	4b21      	ldr	r3, [pc, #132]	; (8009ddc <HAL_RCC_OscConfig+0x4a4>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d1f0      	bne.n	8009d44 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f003 0304 	and.w	r3, r3, #4
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	f000 8086 	beq.w	8009e7c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009d70:	4b1b      	ldr	r3, [pc, #108]	; (8009de0 <HAL_RCC_OscConfig+0x4a8>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a1a      	ldr	r2, [pc, #104]	; (8009de0 <HAL_RCC_OscConfig+0x4a8>)
 8009d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009d7c:	f7f9 fec0 	bl	8003b00 <HAL_GetTick>
 8009d80:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d82:	e008      	b.n	8009d96 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d84:	f7f9 febc 	bl	8003b00 <HAL_GetTick>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8c:	1ad3      	subs	r3, r2, r3
 8009d8e:	2b64      	cmp	r3, #100	; 0x64
 8009d90:	d901      	bls.n	8009d96 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009d92:	2303      	movs	r3, #3
 8009d94:	e1a2      	b.n	800a0dc <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d96:	4b12      	ldr	r3, [pc, #72]	; (8009de0 <HAL_RCC_OscConfig+0x4a8>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d0f0      	beq.n	8009d84 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	689b      	ldr	r3, [r3, #8]
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	d106      	bne.n	8009db8 <HAL_RCC_OscConfig+0x480>
 8009daa:	4b0c      	ldr	r3, [pc, #48]	; (8009ddc <HAL_RCC_OscConfig+0x4a4>)
 8009dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dae:	4a0b      	ldr	r2, [pc, #44]	; (8009ddc <HAL_RCC_OscConfig+0x4a4>)
 8009db0:	f043 0301 	orr.w	r3, r3, #1
 8009db4:	6713      	str	r3, [r2, #112]	; 0x70
 8009db6:	e032      	b.n	8009e1e <HAL_RCC_OscConfig+0x4e6>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d111      	bne.n	8009de4 <HAL_RCC_OscConfig+0x4ac>
 8009dc0:	4b06      	ldr	r3, [pc, #24]	; (8009ddc <HAL_RCC_OscConfig+0x4a4>)
 8009dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dc4:	4a05      	ldr	r2, [pc, #20]	; (8009ddc <HAL_RCC_OscConfig+0x4a4>)
 8009dc6:	f023 0301 	bic.w	r3, r3, #1
 8009dca:	6713      	str	r3, [r2, #112]	; 0x70
 8009dcc:	4b03      	ldr	r3, [pc, #12]	; (8009ddc <HAL_RCC_OscConfig+0x4a4>)
 8009dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dd0:	4a02      	ldr	r2, [pc, #8]	; (8009ddc <HAL_RCC_OscConfig+0x4a4>)
 8009dd2:	f023 0304 	bic.w	r3, r3, #4
 8009dd6:	6713      	str	r3, [r2, #112]	; 0x70
 8009dd8:	e021      	b.n	8009e1e <HAL_RCC_OscConfig+0x4e6>
 8009dda:	bf00      	nop
 8009ddc:	58024400 	.word	0x58024400
 8009de0:	58024800 	.word	0x58024800
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	689b      	ldr	r3, [r3, #8]
 8009de8:	2b05      	cmp	r3, #5
 8009dea:	d10c      	bne.n	8009e06 <HAL_RCC_OscConfig+0x4ce>
 8009dec:	4b83      	ldr	r3, [pc, #524]	; (8009ffc <HAL_RCC_OscConfig+0x6c4>)
 8009dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009df0:	4a82      	ldr	r2, [pc, #520]	; (8009ffc <HAL_RCC_OscConfig+0x6c4>)
 8009df2:	f043 0304 	orr.w	r3, r3, #4
 8009df6:	6713      	str	r3, [r2, #112]	; 0x70
 8009df8:	4b80      	ldr	r3, [pc, #512]	; (8009ffc <HAL_RCC_OscConfig+0x6c4>)
 8009dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dfc:	4a7f      	ldr	r2, [pc, #508]	; (8009ffc <HAL_RCC_OscConfig+0x6c4>)
 8009dfe:	f043 0301 	orr.w	r3, r3, #1
 8009e02:	6713      	str	r3, [r2, #112]	; 0x70
 8009e04:	e00b      	b.n	8009e1e <HAL_RCC_OscConfig+0x4e6>
 8009e06:	4b7d      	ldr	r3, [pc, #500]	; (8009ffc <HAL_RCC_OscConfig+0x6c4>)
 8009e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e0a:	4a7c      	ldr	r2, [pc, #496]	; (8009ffc <HAL_RCC_OscConfig+0x6c4>)
 8009e0c:	f023 0301 	bic.w	r3, r3, #1
 8009e10:	6713      	str	r3, [r2, #112]	; 0x70
 8009e12:	4b7a      	ldr	r3, [pc, #488]	; (8009ffc <HAL_RCC_OscConfig+0x6c4>)
 8009e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e16:	4a79      	ldr	r2, [pc, #484]	; (8009ffc <HAL_RCC_OscConfig+0x6c4>)
 8009e18:	f023 0304 	bic.w	r3, r3, #4
 8009e1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	689b      	ldr	r3, [r3, #8]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d015      	beq.n	8009e52 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e26:	f7f9 fe6b 	bl	8003b00 <HAL_GetTick>
 8009e2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e2c:	e00a      	b.n	8009e44 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e2e:	f7f9 fe67 	bl	8003b00 <HAL_GetTick>
 8009e32:	4602      	mov	r2, r0
 8009e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e36:	1ad3      	subs	r3, r2, r3
 8009e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d901      	bls.n	8009e44 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009e40:	2303      	movs	r3, #3
 8009e42:	e14b      	b.n	800a0dc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e44:	4b6d      	ldr	r3, [pc, #436]	; (8009ffc <HAL_RCC_OscConfig+0x6c4>)
 8009e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e48:	f003 0302 	and.w	r3, r3, #2
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d0ee      	beq.n	8009e2e <HAL_RCC_OscConfig+0x4f6>
 8009e50:	e014      	b.n	8009e7c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e52:	f7f9 fe55 	bl	8003b00 <HAL_GetTick>
 8009e56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009e58:	e00a      	b.n	8009e70 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e5a:	f7f9 fe51 	bl	8003b00 <HAL_GetTick>
 8009e5e:	4602      	mov	r2, r0
 8009e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e62:	1ad3      	subs	r3, r2, r3
 8009e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d901      	bls.n	8009e70 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009e6c:	2303      	movs	r3, #3
 8009e6e:	e135      	b.n	800a0dc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009e70:	4b62      	ldr	r3, [pc, #392]	; (8009ffc <HAL_RCC_OscConfig+0x6c4>)
 8009e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e74:	f003 0302 	and.w	r3, r3, #2
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d1ee      	bne.n	8009e5a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	f000 812a 	beq.w	800a0da <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009e86:	4b5d      	ldr	r3, [pc, #372]	; (8009ffc <HAL_RCC_OscConfig+0x6c4>)
 8009e88:	691b      	ldr	r3, [r3, #16]
 8009e8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e8e:	2b18      	cmp	r3, #24
 8009e90:	f000 80ba 	beq.w	800a008 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e98:	2b02      	cmp	r3, #2
 8009e9a:	f040 8095 	bne.w	8009fc8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e9e:	4b57      	ldr	r3, [pc, #348]	; (8009ffc <HAL_RCC_OscConfig+0x6c4>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	4a56      	ldr	r2, [pc, #344]	; (8009ffc <HAL_RCC_OscConfig+0x6c4>)
 8009ea4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009ea8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009eaa:	f7f9 fe29 	bl	8003b00 <HAL_GetTick>
 8009eae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009eb0:	e008      	b.n	8009ec4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009eb2:	f7f9 fe25 	bl	8003b00 <HAL_GetTick>
 8009eb6:	4602      	mov	r2, r0
 8009eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eba:	1ad3      	subs	r3, r2, r3
 8009ebc:	2b02      	cmp	r3, #2
 8009ebe:	d901      	bls.n	8009ec4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009ec0:	2303      	movs	r3, #3
 8009ec2:	e10b      	b.n	800a0dc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009ec4:	4b4d      	ldr	r3, [pc, #308]	; (8009ffc <HAL_RCC_OscConfig+0x6c4>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d1f0      	bne.n	8009eb2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009ed0:	4b4a      	ldr	r3, [pc, #296]	; (8009ffc <HAL_RCC_OscConfig+0x6c4>)
 8009ed2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ed4:	4b4a      	ldr	r3, [pc, #296]	; (800a000 <HAL_RCC_OscConfig+0x6c8>)
 8009ed6:	4013      	ands	r3, r2
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009edc:	687a      	ldr	r2, [r7, #4]
 8009ede:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009ee0:	0112      	lsls	r2, r2, #4
 8009ee2:	430a      	orrs	r2, r1
 8009ee4:	4945      	ldr	r1, [pc, #276]	; (8009ffc <HAL_RCC_OscConfig+0x6c4>)
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	628b      	str	r3, [r1, #40]	; 0x28
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eee:	3b01      	subs	r3, #1
 8009ef0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ef8:	3b01      	subs	r3, #1
 8009efa:	025b      	lsls	r3, r3, #9
 8009efc:	b29b      	uxth	r3, r3
 8009efe:	431a      	orrs	r2, r3
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f04:	3b01      	subs	r3, #1
 8009f06:	041b      	lsls	r3, r3, #16
 8009f08:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009f0c:	431a      	orrs	r2, r3
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f12:	3b01      	subs	r3, #1
 8009f14:	061b      	lsls	r3, r3, #24
 8009f16:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009f1a:	4938      	ldr	r1, [pc, #224]	; (8009ffc <HAL_RCC_OscConfig+0x6c4>)
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009f20:	4b36      	ldr	r3, [pc, #216]	; (8009ffc <HAL_RCC_OscConfig+0x6c4>)
 8009f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f24:	4a35      	ldr	r2, [pc, #212]	; (8009ffc <HAL_RCC_OscConfig+0x6c4>)
 8009f26:	f023 0301 	bic.w	r3, r3, #1
 8009f2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009f2c:	4b33      	ldr	r3, [pc, #204]	; (8009ffc <HAL_RCC_OscConfig+0x6c4>)
 8009f2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f30:	4b34      	ldr	r3, [pc, #208]	; (800a004 <HAL_RCC_OscConfig+0x6cc>)
 8009f32:	4013      	ands	r3, r2
 8009f34:	687a      	ldr	r2, [r7, #4]
 8009f36:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009f38:	00d2      	lsls	r2, r2, #3
 8009f3a:	4930      	ldr	r1, [pc, #192]	; (8009ffc <HAL_RCC_OscConfig+0x6c4>)
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009f40:	4b2e      	ldr	r3, [pc, #184]	; (8009ffc <HAL_RCC_OscConfig+0x6c4>)
 8009f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f44:	f023 020c 	bic.w	r2, r3, #12
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f4c:	492b      	ldr	r1, [pc, #172]	; (8009ffc <HAL_RCC_OscConfig+0x6c4>)
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009f52:	4b2a      	ldr	r3, [pc, #168]	; (8009ffc <HAL_RCC_OscConfig+0x6c4>)
 8009f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f56:	f023 0202 	bic.w	r2, r3, #2
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f5e:	4927      	ldr	r1, [pc, #156]	; (8009ffc <HAL_RCC_OscConfig+0x6c4>)
 8009f60:	4313      	orrs	r3, r2
 8009f62:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009f64:	4b25      	ldr	r3, [pc, #148]	; (8009ffc <HAL_RCC_OscConfig+0x6c4>)
 8009f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f68:	4a24      	ldr	r2, [pc, #144]	; (8009ffc <HAL_RCC_OscConfig+0x6c4>)
 8009f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f70:	4b22      	ldr	r3, [pc, #136]	; (8009ffc <HAL_RCC_OscConfig+0x6c4>)
 8009f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f74:	4a21      	ldr	r2, [pc, #132]	; (8009ffc <HAL_RCC_OscConfig+0x6c4>)
 8009f76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009f7c:	4b1f      	ldr	r3, [pc, #124]	; (8009ffc <HAL_RCC_OscConfig+0x6c4>)
 8009f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f80:	4a1e      	ldr	r2, [pc, #120]	; (8009ffc <HAL_RCC_OscConfig+0x6c4>)
 8009f82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009f86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009f88:	4b1c      	ldr	r3, [pc, #112]	; (8009ffc <HAL_RCC_OscConfig+0x6c4>)
 8009f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f8c:	4a1b      	ldr	r2, [pc, #108]	; (8009ffc <HAL_RCC_OscConfig+0x6c4>)
 8009f8e:	f043 0301 	orr.w	r3, r3, #1
 8009f92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009f94:	4b19      	ldr	r3, [pc, #100]	; (8009ffc <HAL_RCC_OscConfig+0x6c4>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4a18      	ldr	r2, [pc, #96]	; (8009ffc <HAL_RCC_OscConfig+0x6c4>)
 8009f9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009f9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fa0:	f7f9 fdae 	bl	8003b00 <HAL_GetTick>
 8009fa4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009fa6:	e008      	b.n	8009fba <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009fa8:	f7f9 fdaa 	bl	8003b00 <HAL_GetTick>
 8009fac:	4602      	mov	r2, r0
 8009fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb0:	1ad3      	subs	r3, r2, r3
 8009fb2:	2b02      	cmp	r3, #2
 8009fb4:	d901      	bls.n	8009fba <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009fb6:	2303      	movs	r3, #3
 8009fb8:	e090      	b.n	800a0dc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009fba:	4b10      	ldr	r3, [pc, #64]	; (8009ffc <HAL_RCC_OscConfig+0x6c4>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d0f0      	beq.n	8009fa8 <HAL_RCC_OscConfig+0x670>
 8009fc6:	e088      	b.n	800a0da <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009fc8:	4b0c      	ldr	r3, [pc, #48]	; (8009ffc <HAL_RCC_OscConfig+0x6c4>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4a0b      	ldr	r2, [pc, #44]	; (8009ffc <HAL_RCC_OscConfig+0x6c4>)
 8009fce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009fd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fd4:	f7f9 fd94 	bl	8003b00 <HAL_GetTick>
 8009fd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009fda:	e008      	b.n	8009fee <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009fdc:	f7f9 fd90 	bl	8003b00 <HAL_GetTick>
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe4:	1ad3      	subs	r3, r2, r3
 8009fe6:	2b02      	cmp	r3, #2
 8009fe8:	d901      	bls.n	8009fee <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009fea:	2303      	movs	r3, #3
 8009fec:	e076      	b.n	800a0dc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009fee:	4b03      	ldr	r3, [pc, #12]	; (8009ffc <HAL_RCC_OscConfig+0x6c4>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d1f0      	bne.n	8009fdc <HAL_RCC_OscConfig+0x6a4>
 8009ffa:	e06e      	b.n	800a0da <HAL_RCC_OscConfig+0x7a2>
 8009ffc:	58024400 	.word	0x58024400
 800a000:	fffffc0c 	.word	0xfffffc0c
 800a004:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a008:	4b36      	ldr	r3, [pc, #216]	; (800a0e4 <HAL_RCC_OscConfig+0x7ac>)
 800a00a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a00c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a00e:	4b35      	ldr	r3, [pc, #212]	; (800a0e4 <HAL_RCC_OscConfig+0x7ac>)
 800a010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a012:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d031      	beq.n	800a080 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	f003 0203 	and.w	r2, r3, #3
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a026:	429a      	cmp	r2, r3
 800a028:	d12a      	bne.n	800a080 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	091b      	lsrs	r3, r3, #4
 800a02e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a036:	429a      	cmp	r2, r3
 800a038:	d122      	bne.n	800a080 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a044:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a046:	429a      	cmp	r2, r3
 800a048:	d11a      	bne.n	800a080 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	0a5b      	lsrs	r3, r3, #9
 800a04e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a056:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a058:	429a      	cmp	r2, r3
 800a05a:	d111      	bne.n	800a080 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	0c1b      	lsrs	r3, r3, #16
 800a060:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a068:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d108      	bne.n	800a080 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	0e1b      	lsrs	r3, r3, #24
 800a072:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a07a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d001      	beq.n	800a084 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800a080:	2301      	movs	r3, #1
 800a082:	e02b      	b.n	800a0dc <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a084:	4b17      	ldr	r3, [pc, #92]	; (800a0e4 <HAL_RCC_OscConfig+0x7ac>)
 800a086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a088:	08db      	lsrs	r3, r3, #3
 800a08a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a08e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a094:	693a      	ldr	r2, [r7, #16]
 800a096:	429a      	cmp	r2, r3
 800a098:	d01f      	beq.n	800a0da <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a09a:	4b12      	ldr	r3, [pc, #72]	; (800a0e4 <HAL_RCC_OscConfig+0x7ac>)
 800a09c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a09e:	4a11      	ldr	r2, [pc, #68]	; (800a0e4 <HAL_RCC_OscConfig+0x7ac>)
 800a0a0:	f023 0301 	bic.w	r3, r3, #1
 800a0a4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a0a6:	f7f9 fd2b 	bl	8003b00 <HAL_GetTick>
 800a0aa:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a0ac:	bf00      	nop
 800a0ae:	f7f9 fd27 	bl	8003b00 <HAL_GetTick>
 800a0b2:	4602      	mov	r2, r0
 800a0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d0f9      	beq.n	800a0ae <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a0ba:	4b0a      	ldr	r3, [pc, #40]	; (800a0e4 <HAL_RCC_OscConfig+0x7ac>)
 800a0bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0be:	4b0a      	ldr	r3, [pc, #40]	; (800a0e8 <HAL_RCC_OscConfig+0x7b0>)
 800a0c0:	4013      	ands	r3, r2
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a0c6:	00d2      	lsls	r2, r2, #3
 800a0c8:	4906      	ldr	r1, [pc, #24]	; (800a0e4 <HAL_RCC_OscConfig+0x7ac>)
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a0ce:	4b05      	ldr	r3, [pc, #20]	; (800a0e4 <HAL_RCC_OscConfig+0x7ac>)
 800a0d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d2:	4a04      	ldr	r2, [pc, #16]	; (800a0e4 <HAL_RCC_OscConfig+0x7ac>)
 800a0d4:	f043 0301 	orr.w	r3, r3, #1
 800a0d8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a0da:	2300      	movs	r3, #0
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3730      	adds	r7, #48	; 0x30
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	58024400 	.word	0x58024400
 800a0e8:	ffff0007 	.word	0xffff0007

0800a0ec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b086      	sub	sp, #24
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d101      	bne.n	800a100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	e19c      	b.n	800a43a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a100:	4b8a      	ldr	r3, [pc, #552]	; (800a32c <HAL_RCC_ClockConfig+0x240>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f003 030f 	and.w	r3, r3, #15
 800a108:	683a      	ldr	r2, [r7, #0]
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d910      	bls.n	800a130 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a10e:	4b87      	ldr	r3, [pc, #540]	; (800a32c <HAL_RCC_ClockConfig+0x240>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f023 020f 	bic.w	r2, r3, #15
 800a116:	4985      	ldr	r1, [pc, #532]	; (800a32c <HAL_RCC_ClockConfig+0x240>)
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	4313      	orrs	r3, r2
 800a11c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a11e:	4b83      	ldr	r3, [pc, #524]	; (800a32c <HAL_RCC_ClockConfig+0x240>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f003 030f 	and.w	r3, r3, #15
 800a126:	683a      	ldr	r2, [r7, #0]
 800a128:	429a      	cmp	r2, r3
 800a12a:	d001      	beq.n	800a130 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a12c:	2301      	movs	r3, #1
 800a12e:	e184      	b.n	800a43a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f003 0304 	and.w	r3, r3, #4
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d010      	beq.n	800a15e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	691a      	ldr	r2, [r3, #16]
 800a140:	4b7b      	ldr	r3, [pc, #492]	; (800a330 <HAL_RCC_ClockConfig+0x244>)
 800a142:	699b      	ldr	r3, [r3, #24]
 800a144:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a148:	429a      	cmp	r2, r3
 800a14a:	d908      	bls.n	800a15e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a14c:	4b78      	ldr	r3, [pc, #480]	; (800a330 <HAL_RCC_ClockConfig+0x244>)
 800a14e:	699b      	ldr	r3, [r3, #24]
 800a150:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	691b      	ldr	r3, [r3, #16]
 800a158:	4975      	ldr	r1, [pc, #468]	; (800a330 <HAL_RCC_ClockConfig+0x244>)
 800a15a:	4313      	orrs	r3, r2
 800a15c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f003 0308 	and.w	r3, r3, #8
 800a166:	2b00      	cmp	r3, #0
 800a168:	d010      	beq.n	800a18c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	695a      	ldr	r2, [r3, #20]
 800a16e:	4b70      	ldr	r3, [pc, #448]	; (800a330 <HAL_RCC_ClockConfig+0x244>)
 800a170:	69db      	ldr	r3, [r3, #28]
 800a172:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a176:	429a      	cmp	r2, r3
 800a178:	d908      	bls.n	800a18c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a17a:	4b6d      	ldr	r3, [pc, #436]	; (800a330 <HAL_RCC_ClockConfig+0x244>)
 800a17c:	69db      	ldr	r3, [r3, #28]
 800a17e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	695b      	ldr	r3, [r3, #20]
 800a186:	496a      	ldr	r1, [pc, #424]	; (800a330 <HAL_RCC_ClockConfig+0x244>)
 800a188:	4313      	orrs	r3, r2
 800a18a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f003 0310 	and.w	r3, r3, #16
 800a194:	2b00      	cmp	r3, #0
 800a196:	d010      	beq.n	800a1ba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	699a      	ldr	r2, [r3, #24]
 800a19c:	4b64      	ldr	r3, [pc, #400]	; (800a330 <HAL_RCC_ClockConfig+0x244>)
 800a19e:	69db      	ldr	r3, [r3, #28]
 800a1a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d908      	bls.n	800a1ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a1a8:	4b61      	ldr	r3, [pc, #388]	; (800a330 <HAL_RCC_ClockConfig+0x244>)
 800a1aa:	69db      	ldr	r3, [r3, #28]
 800a1ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	699b      	ldr	r3, [r3, #24]
 800a1b4:	495e      	ldr	r1, [pc, #376]	; (800a330 <HAL_RCC_ClockConfig+0x244>)
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f003 0320 	and.w	r3, r3, #32
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d010      	beq.n	800a1e8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	69da      	ldr	r2, [r3, #28]
 800a1ca:	4b59      	ldr	r3, [pc, #356]	; (800a330 <HAL_RCC_ClockConfig+0x244>)
 800a1cc:	6a1b      	ldr	r3, [r3, #32]
 800a1ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d908      	bls.n	800a1e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a1d6:	4b56      	ldr	r3, [pc, #344]	; (800a330 <HAL_RCC_ClockConfig+0x244>)
 800a1d8:	6a1b      	ldr	r3, [r3, #32]
 800a1da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	69db      	ldr	r3, [r3, #28]
 800a1e2:	4953      	ldr	r1, [pc, #332]	; (800a330 <HAL_RCC_ClockConfig+0x244>)
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f003 0302 	and.w	r3, r3, #2
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d010      	beq.n	800a216 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	68da      	ldr	r2, [r3, #12]
 800a1f8:	4b4d      	ldr	r3, [pc, #308]	; (800a330 <HAL_RCC_ClockConfig+0x244>)
 800a1fa:	699b      	ldr	r3, [r3, #24]
 800a1fc:	f003 030f 	and.w	r3, r3, #15
 800a200:	429a      	cmp	r2, r3
 800a202:	d908      	bls.n	800a216 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a204:	4b4a      	ldr	r3, [pc, #296]	; (800a330 <HAL_RCC_ClockConfig+0x244>)
 800a206:	699b      	ldr	r3, [r3, #24]
 800a208:	f023 020f 	bic.w	r2, r3, #15
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	68db      	ldr	r3, [r3, #12]
 800a210:	4947      	ldr	r1, [pc, #284]	; (800a330 <HAL_RCC_ClockConfig+0x244>)
 800a212:	4313      	orrs	r3, r2
 800a214:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f003 0301 	and.w	r3, r3, #1
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d055      	beq.n	800a2ce <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a222:	4b43      	ldr	r3, [pc, #268]	; (800a330 <HAL_RCC_ClockConfig+0x244>)
 800a224:	699b      	ldr	r3, [r3, #24]
 800a226:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	689b      	ldr	r3, [r3, #8]
 800a22e:	4940      	ldr	r1, [pc, #256]	; (800a330 <HAL_RCC_ClockConfig+0x244>)
 800a230:	4313      	orrs	r3, r2
 800a232:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	2b02      	cmp	r3, #2
 800a23a:	d107      	bne.n	800a24c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a23c:	4b3c      	ldr	r3, [pc, #240]	; (800a330 <HAL_RCC_ClockConfig+0x244>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a244:	2b00      	cmp	r3, #0
 800a246:	d121      	bne.n	800a28c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a248:	2301      	movs	r3, #1
 800a24a:	e0f6      	b.n	800a43a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	2b03      	cmp	r3, #3
 800a252:	d107      	bne.n	800a264 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a254:	4b36      	ldr	r3, [pc, #216]	; (800a330 <HAL_RCC_ClockConfig+0x244>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d115      	bne.n	800a28c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a260:	2301      	movs	r3, #1
 800a262:	e0ea      	b.n	800a43a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d107      	bne.n	800a27c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a26c:	4b30      	ldr	r3, [pc, #192]	; (800a330 <HAL_RCC_ClockConfig+0x244>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a274:	2b00      	cmp	r3, #0
 800a276:	d109      	bne.n	800a28c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a278:	2301      	movs	r3, #1
 800a27a:	e0de      	b.n	800a43a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a27c:	4b2c      	ldr	r3, [pc, #176]	; (800a330 <HAL_RCC_ClockConfig+0x244>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f003 0304 	and.w	r3, r3, #4
 800a284:	2b00      	cmp	r3, #0
 800a286:	d101      	bne.n	800a28c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a288:	2301      	movs	r3, #1
 800a28a:	e0d6      	b.n	800a43a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a28c:	4b28      	ldr	r3, [pc, #160]	; (800a330 <HAL_RCC_ClockConfig+0x244>)
 800a28e:	691b      	ldr	r3, [r3, #16]
 800a290:	f023 0207 	bic.w	r2, r3, #7
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	4925      	ldr	r1, [pc, #148]	; (800a330 <HAL_RCC_ClockConfig+0x244>)
 800a29a:	4313      	orrs	r3, r2
 800a29c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a29e:	f7f9 fc2f 	bl	8003b00 <HAL_GetTick>
 800a2a2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a2a4:	e00a      	b.n	800a2bc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a2a6:	f7f9 fc2b 	bl	8003b00 <HAL_GetTick>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	1ad3      	subs	r3, r2, r3
 800a2b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d901      	bls.n	800a2bc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a2b8:	2303      	movs	r3, #3
 800a2ba:	e0be      	b.n	800a43a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a2bc:	4b1c      	ldr	r3, [pc, #112]	; (800a330 <HAL_RCC_ClockConfig+0x244>)
 800a2be:	691b      	ldr	r3, [r3, #16]
 800a2c0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	00db      	lsls	r3, r3, #3
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d1eb      	bne.n	800a2a6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f003 0302 	and.w	r3, r3, #2
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d010      	beq.n	800a2fc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	68da      	ldr	r2, [r3, #12]
 800a2de:	4b14      	ldr	r3, [pc, #80]	; (800a330 <HAL_RCC_ClockConfig+0x244>)
 800a2e0:	699b      	ldr	r3, [r3, #24]
 800a2e2:	f003 030f 	and.w	r3, r3, #15
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d208      	bcs.n	800a2fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a2ea:	4b11      	ldr	r3, [pc, #68]	; (800a330 <HAL_RCC_ClockConfig+0x244>)
 800a2ec:	699b      	ldr	r3, [r3, #24]
 800a2ee:	f023 020f 	bic.w	r2, r3, #15
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	68db      	ldr	r3, [r3, #12]
 800a2f6:	490e      	ldr	r1, [pc, #56]	; (800a330 <HAL_RCC_ClockConfig+0x244>)
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a2fc:	4b0b      	ldr	r3, [pc, #44]	; (800a32c <HAL_RCC_ClockConfig+0x240>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f003 030f 	and.w	r3, r3, #15
 800a304:	683a      	ldr	r2, [r7, #0]
 800a306:	429a      	cmp	r2, r3
 800a308:	d214      	bcs.n	800a334 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a30a:	4b08      	ldr	r3, [pc, #32]	; (800a32c <HAL_RCC_ClockConfig+0x240>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f023 020f 	bic.w	r2, r3, #15
 800a312:	4906      	ldr	r1, [pc, #24]	; (800a32c <HAL_RCC_ClockConfig+0x240>)
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	4313      	orrs	r3, r2
 800a318:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a31a:	4b04      	ldr	r3, [pc, #16]	; (800a32c <HAL_RCC_ClockConfig+0x240>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f003 030f 	and.w	r3, r3, #15
 800a322:	683a      	ldr	r2, [r7, #0]
 800a324:	429a      	cmp	r2, r3
 800a326:	d005      	beq.n	800a334 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a328:	2301      	movs	r3, #1
 800a32a:	e086      	b.n	800a43a <HAL_RCC_ClockConfig+0x34e>
 800a32c:	52002000 	.word	0x52002000
 800a330:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f003 0304 	and.w	r3, r3, #4
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d010      	beq.n	800a362 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	691a      	ldr	r2, [r3, #16]
 800a344:	4b3f      	ldr	r3, [pc, #252]	; (800a444 <HAL_RCC_ClockConfig+0x358>)
 800a346:	699b      	ldr	r3, [r3, #24]
 800a348:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d208      	bcs.n	800a362 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a350:	4b3c      	ldr	r3, [pc, #240]	; (800a444 <HAL_RCC_ClockConfig+0x358>)
 800a352:	699b      	ldr	r3, [r3, #24]
 800a354:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	691b      	ldr	r3, [r3, #16]
 800a35c:	4939      	ldr	r1, [pc, #228]	; (800a444 <HAL_RCC_ClockConfig+0x358>)
 800a35e:	4313      	orrs	r3, r2
 800a360:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f003 0308 	and.w	r3, r3, #8
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d010      	beq.n	800a390 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	695a      	ldr	r2, [r3, #20]
 800a372:	4b34      	ldr	r3, [pc, #208]	; (800a444 <HAL_RCC_ClockConfig+0x358>)
 800a374:	69db      	ldr	r3, [r3, #28]
 800a376:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d208      	bcs.n	800a390 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a37e:	4b31      	ldr	r3, [pc, #196]	; (800a444 <HAL_RCC_ClockConfig+0x358>)
 800a380:	69db      	ldr	r3, [r3, #28]
 800a382:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	695b      	ldr	r3, [r3, #20]
 800a38a:	492e      	ldr	r1, [pc, #184]	; (800a444 <HAL_RCC_ClockConfig+0x358>)
 800a38c:	4313      	orrs	r3, r2
 800a38e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f003 0310 	and.w	r3, r3, #16
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d010      	beq.n	800a3be <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	699a      	ldr	r2, [r3, #24]
 800a3a0:	4b28      	ldr	r3, [pc, #160]	; (800a444 <HAL_RCC_ClockConfig+0x358>)
 800a3a2:	69db      	ldr	r3, [r3, #28]
 800a3a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d208      	bcs.n	800a3be <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a3ac:	4b25      	ldr	r3, [pc, #148]	; (800a444 <HAL_RCC_ClockConfig+0x358>)
 800a3ae:	69db      	ldr	r3, [r3, #28]
 800a3b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	699b      	ldr	r3, [r3, #24]
 800a3b8:	4922      	ldr	r1, [pc, #136]	; (800a444 <HAL_RCC_ClockConfig+0x358>)
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f003 0320 	and.w	r3, r3, #32
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d010      	beq.n	800a3ec <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	69da      	ldr	r2, [r3, #28]
 800a3ce:	4b1d      	ldr	r3, [pc, #116]	; (800a444 <HAL_RCC_ClockConfig+0x358>)
 800a3d0:	6a1b      	ldr	r3, [r3, #32]
 800a3d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d208      	bcs.n	800a3ec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a3da:	4b1a      	ldr	r3, [pc, #104]	; (800a444 <HAL_RCC_ClockConfig+0x358>)
 800a3dc:	6a1b      	ldr	r3, [r3, #32]
 800a3de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	69db      	ldr	r3, [r3, #28]
 800a3e6:	4917      	ldr	r1, [pc, #92]	; (800a444 <HAL_RCC_ClockConfig+0x358>)
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a3ec:	f000 f89e 	bl	800a52c <HAL_RCC_GetSysClockFreq>
 800a3f0:	4602      	mov	r2, r0
 800a3f2:	4b14      	ldr	r3, [pc, #80]	; (800a444 <HAL_RCC_ClockConfig+0x358>)
 800a3f4:	699b      	ldr	r3, [r3, #24]
 800a3f6:	0a1b      	lsrs	r3, r3, #8
 800a3f8:	f003 030f 	and.w	r3, r3, #15
 800a3fc:	4912      	ldr	r1, [pc, #72]	; (800a448 <HAL_RCC_ClockConfig+0x35c>)
 800a3fe:	5ccb      	ldrb	r3, [r1, r3]
 800a400:	f003 031f 	and.w	r3, r3, #31
 800a404:	fa22 f303 	lsr.w	r3, r2, r3
 800a408:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a40a:	4b0e      	ldr	r3, [pc, #56]	; (800a444 <HAL_RCC_ClockConfig+0x358>)
 800a40c:	699b      	ldr	r3, [r3, #24]
 800a40e:	f003 030f 	and.w	r3, r3, #15
 800a412:	4a0d      	ldr	r2, [pc, #52]	; (800a448 <HAL_RCC_ClockConfig+0x35c>)
 800a414:	5cd3      	ldrb	r3, [r2, r3]
 800a416:	f003 031f 	and.w	r3, r3, #31
 800a41a:	693a      	ldr	r2, [r7, #16]
 800a41c:	fa22 f303 	lsr.w	r3, r2, r3
 800a420:	4a0a      	ldr	r2, [pc, #40]	; (800a44c <HAL_RCC_ClockConfig+0x360>)
 800a422:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a424:	4a0a      	ldr	r2, [pc, #40]	; (800a450 <HAL_RCC_ClockConfig+0x364>)
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a42a:	4b0a      	ldr	r3, [pc, #40]	; (800a454 <HAL_RCC_ClockConfig+0x368>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4618      	mov	r0, r3
 800a430:	f7f9 fb1c 	bl	8003a6c <HAL_InitTick>
 800a434:	4603      	mov	r3, r0
 800a436:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a438:	7bfb      	ldrb	r3, [r7, #15]
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	3718      	adds	r7, #24
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}
 800a442:	bf00      	nop
 800a444:	58024400 	.word	0x58024400
 800a448:	08018628 	.word	0x08018628
 800a44c:	24000004 	.word	0x24000004
 800a450:	24000000 	.word	0x24000000
 800a454:	24000008 	.word	0x24000008

0800a458 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b08c      	sub	sp, #48	; 0x30
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	60f8      	str	r0, [r7, #12]
 800a460:	60b9      	str	r1, [r7, #8]
 800a462:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d12a      	bne.n	800a4c0 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800a46a:	4b2d      	ldr	r3, [pc, #180]	; (800a520 <HAL_RCC_MCOConfig+0xc8>)
 800a46c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a470:	4a2b      	ldr	r2, [pc, #172]	; (800a520 <HAL_RCC_MCOConfig+0xc8>)
 800a472:	f043 0301 	orr.w	r3, r3, #1
 800a476:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a47a:	4b29      	ldr	r3, [pc, #164]	; (800a520 <HAL_RCC_MCOConfig+0xc8>)
 800a47c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a480:	f003 0301 	and.w	r3, r3, #1
 800a484:	61bb      	str	r3, [r7, #24]
 800a486:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a488:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a48c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a48e:	2302      	movs	r3, #2
 800a490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a492:	2303      	movs	r3, #3
 800a494:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a496:	2300      	movs	r3, #0
 800a498:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a49a:	2300      	movs	r3, #0
 800a49c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a49e:	f107 031c 	add.w	r3, r7, #28
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	481f      	ldr	r0, [pc, #124]	; (800a524 <HAL_RCC_MCOConfig+0xcc>)
 800a4a6:	f7fd fc29 	bl	8007cfc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a4aa:	4b1d      	ldr	r3, [pc, #116]	; (800a520 <HAL_RCC_MCOConfig+0xc8>)
 800a4ac:	691b      	ldr	r3, [r3, #16]
 800a4ae:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800a4b2:	68b9      	ldr	r1, [r7, #8]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	430b      	orrs	r3, r1
 800a4b8:	4919      	ldr	r1, [pc, #100]	; (800a520 <HAL_RCC_MCOConfig+0xc8>)
 800a4ba:	4313      	orrs	r3, r2
 800a4bc:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800a4be:	e02a      	b.n	800a516 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800a4c0:	4b17      	ldr	r3, [pc, #92]	; (800a520 <HAL_RCC_MCOConfig+0xc8>)
 800a4c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a4c6:	4a16      	ldr	r2, [pc, #88]	; (800a520 <HAL_RCC_MCOConfig+0xc8>)
 800a4c8:	f043 0304 	orr.w	r3, r3, #4
 800a4cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a4d0:	4b13      	ldr	r3, [pc, #76]	; (800a520 <HAL_RCC_MCOConfig+0xc8>)
 800a4d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a4d6:	f003 0304 	and.w	r3, r3, #4
 800a4da:	617b      	str	r3, [r7, #20]
 800a4dc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a4de:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4e4:	2302      	movs	r3, #2
 800a4e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a4e8:	2303      	movs	r3, #3
 800a4ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a4f4:	f107 031c 	add.w	r3, r7, #28
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	480b      	ldr	r0, [pc, #44]	; (800a528 <HAL_RCC_MCOConfig+0xd0>)
 800a4fc:	f7fd fbfe 	bl	8007cfc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a500:	4b07      	ldr	r3, [pc, #28]	; (800a520 <HAL_RCC_MCOConfig+0xc8>)
 800a502:	691b      	ldr	r3, [r3, #16]
 800a504:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	01d9      	lsls	r1, r3, #7
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	430b      	orrs	r3, r1
 800a510:	4903      	ldr	r1, [pc, #12]	; (800a520 <HAL_RCC_MCOConfig+0xc8>)
 800a512:	4313      	orrs	r3, r2
 800a514:	610b      	str	r3, [r1, #16]
}
 800a516:	bf00      	nop
 800a518:	3730      	adds	r7, #48	; 0x30
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
 800a51e:	bf00      	nop
 800a520:	58024400 	.word	0x58024400
 800a524:	58020000 	.word	0x58020000
 800a528:	58020800 	.word	0x58020800

0800a52c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b089      	sub	sp, #36	; 0x24
 800a530:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a532:	4bb3      	ldr	r3, [pc, #716]	; (800a800 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a534:	691b      	ldr	r3, [r3, #16]
 800a536:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a53a:	2b18      	cmp	r3, #24
 800a53c:	f200 8155 	bhi.w	800a7ea <HAL_RCC_GetSysClockFreq+0x2be>
 800a540:	a201      	add	r2, pc, #4	; (adr r2, 800a548 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a546:	bf00      	nop
 800a548:	0800a5ad 	.word	0x0800a5ad
 800a54c:	0800a7eb 	.word	0x0800a7eb
 800a550:	0800a7eb 	.word	0x0800a7eb
 800a554:	0800a7eb 	.word	0x0800a7eb
 800a558:	0800a7eb 	.word	0x0800a7eb
 800a55c:	0800a7eb 	.word	0x0800a7eb
 800a560:	0800a7eb 	.word	0x0800a7eb
 800a564:	0800a7eb 	.word	0x0800a7eb
 800a568:	0800a5d3 	.word	0x0800a5d3
 800a56c:	0800a7eb 	.word	0x0800a7eb
 800a570:	0800a7eb 	.word	0x0800a7eb
 800a574:	0800a7eb 	.word	0x0800a7eb
 800a578:	0800a7eb 	.word	0x0800a7eb
 800a57c:	0800a7eb 	.word	0x0800a7eb
 800a580:	0800a7eb 	.word	0x0800a7eb
 800a584:	0800a7eb 	.word	0x0800a7eb
 800a588:	0800a5d9 	.word	0x0800a5d9
 800a58c:	0800a7eb 	.word	0x0800a7eb
 800a590:	0800a7eb 	.word	0x0800a7eb
 800a594:	0800a7eb 	.word	0x0800a7eb
 800a598:	0800a7eb 	.word	0x0800a7eb
 800a59c:	0800a7eb 	.word	0x0800a7eb
 800a5a0:	0800a7eb 	.word	0x0800a7eb
 800a5a4:	0800a7eb 	.word	0x0800a7eb
 800a5a8:	0800a5df 	.word	0x0800a5df
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a5ac:	4b94      	ldr	r3, [pc, #592]	; (800a800 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f003 0320 	and.w	r3, r3, #32
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d009      	beq.n	800a5cc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5b8:	4b91      	ldr	r3, [pc, #580]	; (800a800 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	08db      	lsrs	r3, r3, #3
 800a5be:	f003 0303 	and.w	r3, r3, #3
 800a5c2:	4a90      	ldr	r2, [pc, #576]	; (800a804 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a5c4:	fa22 f303 	lsr.w	r3, r2, r3
 800a5c8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a5ca:	e111      	b.n	800a7f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a5cc:	4b8d      	ldr	r3, [pc, #564]	; (800a804 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a5ce:	61bb      	str	r3, [r7, #24]
      break;
 800a5d0:	e10e      	b.n	800a7f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a5d2:	4b8d      	ldr	r3, [pc, #564]	; (800a808 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a5d4:	61bb      	str	r3, [r7, #24]
      break;
 800a5d6:	e10b      	b.n	800a7f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a5d8:	4b8c      	ldr	r3, [pc, #560]	; (800a80c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a5da:	61bb      	str	r3, [r7, #24]
      break;
 800a5dc:	e108      	b.n	800a7f0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a5de:	4b88      	ldr	r3, [pc, #544]	; (800a800 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5e2:	f003 0303 	and.w	r3, r3, #3
 800a5e6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a5e8:	4b85      	ldr	r3, [pc, #532]	; (800a800 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ec:	091b      	lsrs	r3, r3, #4
 800a5ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a5f2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a5f4:	4b82      	ldr	r3, [pc, #520]	; (800a800 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5f8:	f003 0301 	and.w	r3, r3, #1
 800a5fc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a5fe:	4b80      	ldr	r3, [pc, #512]	; (800a800 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a602:	08db      	lsrs	r3, r3, #3
 800a604:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a608:	68fa      	ldr	r2, [r7, #12]
 800a60a:	fb02 f303 	mul.w	r3, r2, r3
 800a60e:	ee07 3a90 	vmov	s15, r3
 800a612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a616:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	f000 80e1 	beq.w	800a7e4 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	2b02      	cmp	r3, #2
 800a626:	f000 8083 	beq.w	800a730 <HAL_RCC_GetSysClockFreq+0x204>
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	2b02      	cmp	r3, #2
 800a62e:	f200 80a1 	bhi.w	800a774 <HAL_RCC_GetSysClockFreq+0x248>
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d003      	beq.n	800a640 <HAL_RCC_GetSysClockFreq+0x114>
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d056      	beq.n	800a6ec <HAL_RCC_GetSysClockFreq+0x1c0>
 800a63e:	e099      	b.n	800a774 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a640:	4b6f      	ldr	r3, [pc, #444]	; (800a800 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f003 0320 	and.w	r3, r3, #32
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d02d      	beq.n	800a6a8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a64c:	4b6c      	ldr	r3, [pc, #432]	; (800a800 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	08db      	lsrs	r3, r3, #3
 800a652:	f003 0303 	and.w	r3, r3, #3
 800a656:	4a6b      	ldr	r2, [pc, #428]	; (800a804 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a658:	fa22 f303 	lsr.w	r3, r2, r3
 800a65c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	ee07 3a90 	vmov	s15, r3
 800a664:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	ee07 3a90 	vmov	s15, r3
 800a66e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a676:	4b62      	ldr	r3, [pc, #392]	; (800a800 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a67a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a67e:	ee07 3a90 	vmov	s15, r3
 800a682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a686:	ed97 6a02 	vldr	s12, [r7, #8]
 800a68a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a810 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a68e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a69a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a69e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6a2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a6a6:	e087      	b.n	800a7b8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	ee07 3a90 	vmov	s15, r3
 800a6ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6b2:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a814 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a6b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6ba:	4b51      	ldr	r3, [pc, #324]	; (800a800 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6c2:	ee07 3a90 	vmov	s15, r3
 800a6c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6ca:	ed97 6a02 	vldr	s12, [r7, #8]
 800a6ce:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a810 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a6d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a6ea:	e065      	b.n	800a7b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	ee07 3a90 	vmov	s15, r3
 800a6f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6f6:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a818 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a6fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6fe:	4b40      	ldr	r3, [pc, #256]	; (800a800 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a706:	ee07 3a90 	vmov	s15, r3
 800a70a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a70e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a712:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a810 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a71a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a71e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a72a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a72e:	e043      	b.n	800a7b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	ee07 3a90 	vmov	s15, r3
 800a736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a73a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a81c <HAL_RCC_GetSysClockFreq+0x2f0>
 800a73e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a742:	4b2f      	ldr	r3, [pc, #188]	; (800a800 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a74a:	ee07 3a90 	vmov	s15, r3
 800a74e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a752:	ed97 6a02 	vldr	s12, [r7, #8]
 800a756:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a810 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a75a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a75e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a762:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a76a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a76e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a772:	e021      	b.n	800a7b8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	ee07 3a90 	vmov	s15, r3
 800a77a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a77e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a818 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a786:	4b1e      	ldr	r3, [pc, #120]	; (800a800 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a78a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a78e:	ee07 3a90 	vmov	s15, r3
 800a792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a796:	ed97 6a02 	vldr	s12, [r7, #8]
 800a79a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a810 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a79e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a7b6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a7b8:	4b11      	ldr	r3, [pc, #68]	; (800a800 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7bc:	0a5b      	lsrs	r3, r3, #9
 800a7be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	ee07 3a90 	vmov	s15, r3
 800a7cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a7d0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a7d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7dc:	ee17 3a90 	vmov	r3, s15
 800a7e0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a7e2:	e005      	b.n	800a7f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	61bb      	str	r3, [r7, #24]
      break;
 800a7e8:	e002      	b.n	800a7f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a7ea:	4b07      	ldr	r3, [pc, #28]	; (800a808 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a7ec:	61bb      	str	r3, [r7, #24]
      break;
 800a7ee:	bf00      	nop
  }

  return sysclockfreq;
 800a7f0:	69bb      	ldr	r3, [r7, #24]
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3724      	adds	r7, #36	; 0x24
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fc:	4770      	bx	lr
 800a7fe:	bf00      	nop
 800a800:	58024400 	.word	0x58024400
 800a804:	03d09000 	.word	0x03d09000
 800a808:	003d0900 	.word	0x003d0900
 800a80c:	02faf080 	.word	0x02faf080
 800a810:	46000000 	.word	0x46000000
 800a814:	4c742400 	.word	0x4c742400
 800a818:	4a742400 	.word	0x4a742400
 800a81c:	4c3ebc20 	.word	0x4c3ebc20

0800a820 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b082      	sub	sp, #8
 800a824:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a826:	f7ff fe81 	bl	800a52c <HAL_RCC_GetSysClockFreq>
 800a82a:	4602      	mov	r2, r0
 800a82c:	4b10      	ldr	r3, [pc, #64]	; (800a870 <HAL_RCC_GetHCLKFreq+0x50>)
 800a82e:	699b      	ldr	r3, [r3, #24]
 800a830:	0a1b      	lsrs	r3, r3, #8
 800a832:	f003 030f 	and.w	r3, r3, #15
 800a836:	490f      	ldr	r1, [pc, #60]	; (800a874 <HAL_RCC_GetHCLKFreq+0x54>)
 800a838:	5ccb      	ldrb	r3, [r1, r3]
 800a83a:	f003 031f 	and.w	r3, r3, #31
 800a83e:	fa22 f303 	lsr.w	r3, r2, r3
 800a842:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a844:	4b0a      	ldr	r3, [pc, #40]	; (800a870 <HAL_RCC_GetHCLKFreq+0x50>)
 800a846:	699b      	ldr	r3, [r3, #24]
 800a848:	f003 030f 	and.w	r3, r3, #15
 800a84c:	4a09      	ldr	r2, [pc, #36]	; (800a874 <HAL_RCC_GetHCLKFreq+0x54>)
 800a84e:	5cd3      	ldrb	r3, [r2, r3]
 800a850:	f003 031f 	and.w	r3, r3, #31
 800a854:	687a      	ldr	r2, [r7, #4]
 800a856:	fa22 f303 	lsr.w	r3, r2, r3
 800a85a:	4a07      	ldr	r2, [pc, #28]	; (800a878 <HAL_RCC_GetHCLKFreq+0x58>)
 800a85c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a85e:	4a07      	ldr	r2, [pc, #28]	; (800a87c <HAL_RCC_GetHCLKFreq+0x5c>)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a864:	4b04      	ldr	r3, [pc, #16]	; (800a878 <HAL_RCC_GetHCLKFreq+0x58>)
 800a866:	681b      	ldr	r3, [r3, #0]
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3708      	adds	r7, #8
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}
 800a870:	58024400 	.word	0x58024400
 800a874:	08018628 	.word	0x08018628
 800a878:	24000004 	.word	0x24000004
 800a87c:	24000000 	.word	0x24000000

0800a880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a884:	f7ff ffcc 	bl	800a820 <HAL_RCC_GetHCLKFreq>
 800a888:	4602      	mov	r2, r0
 800a88a:	4b06      	ldr	r3, [pc, #24]	; (800a8a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a88c:	69db      	ldr	r3, [r3, #28]
 800a88e:	091b      	lsrs	r3, r3, #4
 800a890:	f003 0307 	and.w	r3, r3, #7
 800a894:	4904      	ldr	r1, [pc, #16]	; (800a8a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a896:	5ccb      	ldrb	r3, [r1, r3]
 800a898:	f003 031f 	and.w	r3, r3, #31
 800a89c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	bd80      	pop	{r7, pc}
 800a8a4:	58024400 	.word	0x58024400
 800a8a8:	08018628 	.word	0x08018628

0800a8ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a8b0:	f7ff ffb6 	bl	800a820 <HAL_RCC_GetHCLKFreq>
 800a8b4:	4602      	mov	r2, r0
 800a8b6:	4b06      	ldr	r3, [pc, #24]	; (800a8d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a8b8:	69db      	ldr	r3, [r3, #28]
 800a8ba:	0a1b      	lsrs	r3, r3, #8
 800a8bc:	f003 0307 	and.w	r3, r3, #7
 800a8c0:	4904      	ldr	r1, [pc, #16]	; (800a8d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a8c2:	5ccb      	ldrb	r3, [r1, r3]
 800a8c4:	f003 031f 	and.w	r3, r3, #31
 800a8c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	bd80      	pop	{r7, pc}
 800a8d0:	58024400 	.word	0x58024400
 800a8d4:	08018628 	.word	0x08018628

0800a8d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a8d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a8dc:	b0c6      	sub	sp, #280	; 0x118
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a8f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a8fc:	2500      	movs	r5, #0
 800a8fe:	ea54 0305 	orrs.w	r3, r4, r5
 800a902:	d049      	beq.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a904:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a908:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a90a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a90e:	d02f      	beq.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a910:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a914:	d828      	bhi.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a916:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a91a:	d01a      	beq.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a91c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a920:	d822      	bhi.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a922:	2b00      	cmp	r3, #0
 800a924:	d003      	beq.n	800a92e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a926:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a92a:	d007      	beq.n	800a93c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a92c:	e01c      	b.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a92e:	4bab      	ldr	r3, [pc, #684]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a932:	4aaa      	ldr	r2, [pc, #680]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a938:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a93a:	e01a      	b.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a93c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a940:	3308      	adds	r3, #8
 800a942:	2102      	movs	r1, #2
 800a944:	4618      	mov	r0, r3
 800a946:	f002 fa49 	bl	800cddc <RCCEx_PLL2_Config>
 800a94a:	4603      	mov	r3, r0
 800a94c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a950:	e00f      	b.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a952:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a956:	3328      	adds	r3, #40	; 0x28
 800a958:	2102      	movs	r1, #2
 800a95a:	4618      	mov	r0, r3
 800a95c:	f002 faf0 	bl	800cf40 <RCCEx_PLL3_Config>
 800a960:	4603      	mov	r3, r0
 800a962:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a966:	e004      	b.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a968:	2301      	movs	r3, #1
 800a96a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a96e:	e000      	b.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a970:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a972:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a976:	2b00      	cmp	r3, #0
 800a978:	d10a      	bne.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a97a:	4b98      	ldr	r3, [pc, #608]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a97c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a97e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a982:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a986:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a988:	4a94      	ldr	r2, [pc, #592]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a98a:	430b      	orrs	r3, r1
 800a98c:	6513      	str	r3, [r2, #80]	; 0x50
 800a98e:	e003      	b.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a990:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a994:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a998:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800a9a4:	f04f 0900 	mov.w	r9, #0
 800a9a8:	ea58 0309 	orrs.w	r3, r8, r9
 800a9ac:	d047      	beq.n	800aa3e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a9ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9b4:	2b04      	cmp	r3, #4
 800a9b6:	d82a      	bhi.n	800aa0e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a9b8:	a201      	add	r2, pc, #4	; (adr r2, 800a9c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a9ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9be:	bf00      	nop
 800a9c0:	0800a9d5 	.word	0x0800a9d5
 800a9c4:	0800a9e3 	.word	0x0800a9e3
 800a9c8:	0800a9f9 	.word	0x0800a9f9
 800a9cc:	0800aa17 	.word	0x0800aa17
 800a9d0:	0800aa17 	.word	0x0800aa17
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9d4:	4b81      	ldr	r3, [pc, #516]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d8:	4a80      	ldr	r2, [pc, #512]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a9da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a9e0:	e01a      	b.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a9e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9e6:	3308      	adds	r3, #8
 800a9e8:	2100      	movs	r1, #0
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f002 f9f6 	bl	800cddc <RCCEx_PLL2_Config>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a9f6:	e00f      	b.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a9f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9fc:	3328      	adds	r3, #40	; 0x28
 800a9fe:	2100      	movs	r1, #0
 800aa00:	4618      	mov	r0, r3
 800aa02:	f002 fa9d 	bl	800cf40 <RCCEx_PLL3_Config>
 800aa06:	4603      	mov	r3, r0
 800aa08:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa0c:	e004      	b.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa0e:	2301      	movs	r3, #1
 800aa10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aa14:	e000      	b.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800aa16:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d10a      	bne.n	800aa36 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aa20:	4b6e      	ldr	r3, [pc, #440]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa24:	f023 0107 	bic.w	r1, r3, #7
 800aa28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa2e:	4a6b      	ldr	r2, [pc, #428]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa30:	430b      	orrs	r3, r1
 800aa32:	6513      	str	r3, [r2, #80]	; 0x50
 800aa34:	e003      	b.n	800aa3e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa36:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa3a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800aa3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa46:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800aa4a:	f04f 0b00 	mov.w	fp, #0
 800aa4e:	ea5a 030b 	orrs.w	r3, sl, fp
 800aa52:	d05b      	beq.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800aa54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aa5c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800aa60:	d03b      	beq.n	800aada <HAL_RCCEx_PeriphCLKConfig+0x202>
 800aa62:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800aa66:	d834      	bhi.n	800aad2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800aa68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aa6c:	d037      	beq.n	800aade <HAL_RCCEx_PeriphCLKConfig+0x206>
 800aa6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aa72:	d82e      	bhi.n	800aad2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800aa74:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aa78:	d033      	beq.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800aa7a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aa7e:	d828      	bhi.n	800aad2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800aa80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa84:	d01a      	beq.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800aa86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa8a:	d822      	bhi.n	800aad2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d003      	beq.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800aa90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa94:	d007      	beq.n	800aaa6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800aa96:	e01c      	b.n	800aad2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa98:	4b50      	ldr	r3, [pc, #320]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa9c:	4a4f      	ldr	r2, [pc, #316]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aaa2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aaa4:	e01e      	b.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aaa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaaa:	3308      	adds	r3, #8
 800aaac:	2100      	movs	r1, #0
 800aaae:	4618      	mov	r0, r3
 800aab0:	f002 f994 	bl	800cddc <RCCEx_PLL2_Config>
 800aab4:	4603      	mov	r3, r0
 800aab6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800aaba:	e013      	b.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aabc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aac0:	3328      	adds	r3, #40	; 0x28
 800aac2:	2100      	movs	r1, #0
 800aac4:	4618      	mov	r0, r3
 800aac6:	f002 fa3b 	bl	800cf40 <RCCEx_PLL3_Config>
 800aaca:	4603      	mov	r3, r0
 800aacc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aad0:	e008      	b.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800aad2:	2301      	movs	r3, #1
 800aad4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aad8:	e004      	b.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800aada:	bf00      	nop
 800aadc:	e002      	b.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800aade:	bf00      	nop
 800aae0:	e000      	b.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800aae2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aae4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d10b      	bne.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800aaec:	4b3b      	ldr	r3, [pc, #236]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aaee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaf0:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800aaf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaf8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aafc:	4a37      	ldr	r2, [pc, #220]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aafe:	430b      	orrs	r3, r1
 800ab00:	6593      	str	r3, [r2, #88]	; 0x58
 800ab02:	e003      	b.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab08:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ab0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab14:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800ab18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ab22:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800ab26:	460b      	mov	r3, r1
 800ab28:	4313      	orrs	r3, r2
 800ab2a:	d05d      	beq.n	800abe8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800ab2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab30:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ab34:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800ab38:	d03b      	beq.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800ab3a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800ab3e:	d834      	bhi.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ab40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ab44:	d037      	beq.n	800abb6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800ab46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ab4a:	d82e      	bhi.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ab4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ab50:	d033      	beq.n	800abba <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800ab52:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ab56:	d828      	bhi.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ab58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab5c:	d01a      	beq.n	800ab94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800ab5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab62:	d822      	bhi.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d003      	beq.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800ab68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ab6c:	d007      	beq.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800ab6e:	e01c      	b.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab70:	4b1a      	ldr	r3, [pc, #104]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab74:	4a19      	ldr	r2, [pc, #100]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ab7c:	e01e      	b.n	800abbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab82:	3308      	adds	r3, #8
 800ab84:	2100      	movs	r1, #0
 800ab86:	4618      	mov	r0, r3
 800ab88:	f002 f928 	bl	800cddc <RCCEx_PLL2_Config>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ab92:	e013      	b.n	800abbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab98:	3328      	adds	r3, #40	; 0x28
 800ab9a:	2100      	movs	r1, #0
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f002 f9cf 	bl	800cf40 <RCCEx_PLL3_Config>
 800aba2:	4603      	mov	r3, r0
 800aba4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aba8:	e008      	b.n	800abbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800abaa:	2301      	movs	r3, #1
 800abac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800abb0:	e004      	b.n	800abbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800abb2:	bf00      	nop
 800abb4:	e002      	b.n	800abbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800abb6:	bf00      	nop
 800abb8:	e000      	b.n	800abbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800abba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abbc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d10d      	bne.n	800abe0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800abc4:	4b05      	ldr	r3, [pc, #20]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800abc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abc8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800abcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abd0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800abd4:	4a01      	ldr	r2, [pc, #4]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800abd6:	430b      	orrs	r3, r1
 800abd8:	6593      	str	r3, [r2, #88]	; 0x58
 800abda:	e005      	b.n	800abe8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800abdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abe0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800abe4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800abe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800abf4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800abf8:	2300      	movs	r3, #0
 800abfa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800abfe:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800ac02:	460b      	mov	r3, r1
 800ac04:	4313      	orrs	r3, r2
 800ac06:	d03a      	beq.n	800ac7e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800ac08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac0e:	2b30      	cmp	r3, #48	; 0x30
 800ac10:	d01f      	beq.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800ac12:	2b30      	cmp	r3, #48	; 0x30
 800ac14:	d819      	bhi.n	800ac4a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800ac16:	2b20      	cmp	r3, #32
 800ac18:	d00c      	beq.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800ac1a:	2b20      	cmp	r3, #32
 800ac1c:	d815      	bhi.n	800ac4a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d019      	beq.n	800ac56 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800ac22:	2b10      	cmp	r3, #16
 800ac24:	d111      	bne.n	800ac4a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac26:	4baa      	ldr	r3, [pc, #680]	; (800aed0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac2a:	4aa9      	ldr	r2, [pc, #676]	; (800aed0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800ac32:	e011      	b.n	800ac58 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ac34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac38:	3308      	adds	r3, #8
 800ac3a:	2102      	movs	r1, #2
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f002 f8cd 	bl	800cddc <RCCEx_PLL2_Config>
 800ac42:	4603      	mov	r3, r0
 800ac44:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800ac48:	e006      	b.n	800ac58 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ac50:	e002      	b.n	800ac58 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800ac52:	bf00      	nop
 800ac54:	e000      	b.n	800ac58 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800ac56:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d10a      	bne.n	800ac76 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800ac60:	4b9b      	ldr	r3, [pc, #620]	; (800aed0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac64:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800ac68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac6e:	4a98      	ldr	r2, [pc, #608]	; (800aed0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac70:	430b      	orrs	r3, r1
 800ac72:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ac74:	e003      	b.n	800ac7e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac76:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac7a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ac7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac86:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800ac8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ac8e:	2300      	movs	r3, #0
 800ac90:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ac94:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800ac98:	460b      	mov	r3, r1
 800ac9a:	4313      	orrs	r3, r2
 800ac9c:	d051      	beq.n	800ad42 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ac9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aca4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aca8:	d035      	beq.n	800ad16 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800acaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800acae:	d82e      	bhi.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800acb0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800acb4:	d031      	beq.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0x442>
 800acb6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800acba:	d828      	bhi.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800acbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800acc0:	d01a      	beq.n	800acf8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800acc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800acc6:	d822      	bhi.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d003      	beq.n	800acd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800accc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acd0:	d007      	beq.n	800ace2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800acd2:	e01c      	b.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acd4:	4b7e      	ldr	r3, [pc, #504]	; (800aed0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800acd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acd8:	4a7d      	ldr	r2, [pc, #500]	; (800aed0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800acda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ace0:	e01c      	b.n	800ad1c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ace2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ace6:	3308      	adds	r3, #8
 800ace8:	2100      	movs	r1, #0
 800acea:	4618      	mov	r0, r3
 800acec:	f002 f876 	bl	800cddc <RCCEx_PLL2_Config>
 800acf0:	4603      	mov	r3, r0
 800acf2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800acf6:	e011      	b.n	800ad1c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800acf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acfc:	3328      	adds	r3, #40	; 0x28
 800acfe:	2100      	movs	r1, #0
 800ad00:	4618      	mov	r0, r3
 800ad02:	f002 f91d 	bl	800cf40 <RCCEx_PLL3_Config>
 800ad06:	4603      	mov	r3, r0
 800ad08:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ad0c:	e006      	b.n	800ad1c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad0e:	2301      	movs	r3, #1
 800ad10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ad14:	e002      	b.n	800ad1c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800ad16:	bf00      	nop
 800ad18:	e000      	b.n	800ad1c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800ad1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad1c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d10a      	bne.n	800ad3a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ad24:	4b6a      	ldr	r3, [pc, #424]	; (800aed0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad28:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800ad2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad32:	4a67      	ldr	r2, [pc, #412]	; (800aed0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad34:	430b      	orrs	r3, r1
 800ad36:	6513      	str	r3, [r2, #80]	; 0x50
 800ad38:	e003      	b.n	800ad42 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad3a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad3e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ad42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad4a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800ad4e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ad52:	2300      	movs	r3, #0
 800ad54:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ad58:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	4313      	orrs	r3, r2
 800ad60:	d053      	beq.n	800ae0a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ad62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ad6c:	d033      	beq.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800ad6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ad72:	d82c      	bhi.n	800adce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ad74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ad78:	d02f      	beq.n	800adda <HAL_RCCEx_PeriphCLKConfig+0x502>
 800ad7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ad7e:	d826      	bhi.n	800adce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ad80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ad84:	d02b      	beq.n	800adde <HAL_RCCEx_PeriphCLKConfig+0x506>
 800ad86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ad8a:	d820      	bhi.n	800adce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ad8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad90:	d012      	beq.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800ad92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad96:	d81a      	bhi.n	800adce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d022      	beq.n	800ade2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800ad9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ada0:	d115      	bne.n	800adce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ada2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ada6:	3308      	adds	r3, #8
 800ada8:	2101      	movs	r1, #1
 800adaa:	4618      	mov	r0, r3
 800adac:	f002 f816 	bl	800cddc <RCCEx_PLL2_Config>
 800adb0:	4603      	mov	r3, r0
 800adb2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800adb6:	e015      	b.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800adb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adbc:	3328      	adds	r3, #40	; 0x28
 800adbe:	2101      	movs	r1, #1
 800adc0:	4618      	mov	r0, r3
 800adc2:	f002 f8bd 	bl	800cf40 <RCCEx_PLL3_Config>
 800adc6:	4603      	mov	r3, r0
 800adc8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800adcc:	e00a      	b.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800adce:	2301      	movs	r3, #1
 800add0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800add4:	e006      	b.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800add6:	bf00      	nop
 800add8:	e004      	b.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800adda:	bf00      	nop
 800addc:	e002      	b.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800adde:	bf00      	nop
 800ade0:	e000      	b.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ade2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ade4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d10a      	bne.n	800ae02 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800adec:	4b38      	ldr	r3, [pc, #224]	; (800aed0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800adee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adf0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800adf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800adfa:	4a35      	ldr	r2, [pc, #212]	; (800aed0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800adfc:	430b      	orrs	r3, r1
 800adfe:	6513      	str	r3, [r2, #80]	; 0x50
 800ae00:	e003      	b.n	800ae0a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae02:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae06:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ae0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae12:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800ae16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ae20:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ae24:	460b      	mov	r3, r1
 800ae26:	4313      	orrs	r3, r2
 800ae28:	d058      	beq.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800ae2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ae32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ae36:	d033      	beq.n	800aea0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800ae38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ae3c:	d82c      	bhi.n	800ae98 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ae3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae42:	d02f      	beq.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800ae44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae48:	d826      	bhi.n	800ae98 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ae4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ae4e:	d02b      	beq.n	800aea8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800ae50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ae54:	d820      	bhi.n	800ae98 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ae56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae5a:	d012      	beq.n	800ae82 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800ae5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae60:	d81a      	bhi.n	800ae98 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d022      	beq.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800ae66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae6a:	d115      	bne.n	800ae98 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae70:	3308      	adds	r3, #8
 800ae72:	2101      	movs	r1, #1
 800ae74:	4618      	mov	r0, r3
 800ae76:	f001 ffb1 	bl	800cddc <RCCEx_PLL2_Config>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ae80:	e015      	b.n	800aeae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ae82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae86:	3328      	adds	r3, #40	; 0x28
 800ae88:	2101      	movs	r1, #1
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f002 f858 	bl	800cf40 <RCCEx_PLL3_Config>
 800ae90:	4603      	mov	r3, r0
 800ae92:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ae96:	e00a      	b.n	800aeae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ae98:	2301      	movs	r3, #1
 800ae9a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ae9e:	e006      	b.n	800aeae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800aea0:	bf00      	nop
 800aea2:	e004      	b.n	800aeae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800aea4:	bf00      	nop
 800aea6:	e002      	b.n	800aeae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800aea8:	bf00      	nop
 800aeaa:	e000      	b.n	800aeae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800aeac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aeae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d10e      	bne.n	800aed4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800aeb6:	4b06      	ldr	r3, [pc, #24]	; (800aed0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aeb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aeba:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800aebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aec2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800aec6:	4a02      	ldr	r2, [pc, #8]	; (800aed0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aec8:	430b      	orrs	r3, r1
 800aeca:	6593      	str	r3, [r2, #88]	; 0x58
 800aecc:	e006      	b.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x604>
 800aece:	bf00      	nop
 800aed0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aed4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aed8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800aedc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800aee8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aeec:	2300      	movs	r3, #0
 800aeee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800aef2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800aef6:	460b      	mov	r3, r1
 800aef8:	4313      	orrs	r3, r2
 800aefa:	d037      	beq.n	800af6c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800aefc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af06:	d00e      	beq.n	800af26 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800af08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af0c:	d816      	bhi.n	800af3c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d018      	beq.n	800af44 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800af12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af16:	d111      	bne.n	800af3c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af18:	4bc4      	ldr	r3, [pc, #784]	; (800b22c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af1c:	4ac3      	ldr	r2, [pc, #780]	; (800b22c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800af24:	e00f      	b.n	800af46 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800af26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af2a:	3308      	adds	r3, #8
 800af2c:	2101      	movs	r1, #1
 800af2e:	4618      	mov	r0, r3
 800af30:	f001 ff54 	bl	800cddc <RCCEx_PLL2_Config>
 800af34:	4603      	mov	r3, r0
 800af36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800af3a:	e004      	b.n	800af46 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af3c:	2301      	movs	r3, #1
 800af3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800af42:	e000      	b.n	800af46 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800af44:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af46:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d10a      	bne.n	800af64 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800af4e:	4bb7      	ldr	r3, [pc, #732]	; (800b22c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af52:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800af56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af5c:	4ab3      	ldr	r2, [pc, #716]	; (800b22c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af5e:	430b      	orrs	r3, r1
 800af60:	6513      	str	r3, [r2, #80]	; 0x50
 800af62:	e003      	b.n	800af6c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af68:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800af6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af74:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800af78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800af7c:	2300      	movs	r3, #0
 800af7e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800af82:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800af86:	460b      	mov	r3, r1
 800af88:	4313      	orrs	r3, r2
 800af8a:	d039      	beq.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800af8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af92:	2b03      	cmp	r3, #3
 800af94:	d81c      	bhi.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800af96:	a201      	add	r2, pc, #4	; (adr r2, 800af9c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800af98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af9c:	0800afd9 	.word	0x0800afd9
 800afa0:	0800afad 	.word	0x0800afad
 800afa4:	0800afbb 	.word	0x0800afbb
 800afa8:	0800afd9 	.word	0x0800afd9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afac:	4b9f      	ldr	r3, [pc, #636]	; (800b22c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afb0:	4a9e      	ldr	r2, [pc, #632]	; (800b22c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800afb8:	e00f      	b.n	800afda <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800afba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afbe:	3308      	adds	r3, #8
 800afc0:	2102      	movs	r1, #2
 800afc2:	4618      	mov	r0, r3
 800afc4:	f001 ff0a 	bl	800cddc <RCCEx_PLL2_Config>
 800afc8:	4603      	mov	r3, r0
 800afca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800afce:	e004      	b.n	800afda <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800afd0:	2301      	movs	r3, #1
 800afd2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800afd6:	e000      	b.n	800afda <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800afd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800afda:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d10a      	bne.n	800aff8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800afe2:	4b92      	ldr	r3, [pc, #584]	; (800b22c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afe6:	f023 0103 	bic.w	r1, r3, #3
 800afea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aff0:	4a8e      	ldr	r2, [pc, #568]	; (800b22c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aff2:	430b      	orrs	r3, r1
 800aff4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aff6:	e003      	b.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aff8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800affc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b000:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b008:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b00c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b010:	2300      	movs	r3, #0
 800b012:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b016:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b01a:	460b      	mov	r3, r1
 800b01c:	4313      	orrs	r3, r2
 800b01e:	f000 8099 	beq.w	800b154 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b022:	4b83      	ldr	r3, [pc, #524]	; (800b230 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	4a82      	ldr	r2, [pc, #520]	; (800b230 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b02c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b02e:	f7f8 fd67 	bl	8003b00 <HAL_GetTick>
 800b032:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b036:	e00b      	b.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b038:	f7f8 fd62 	bl	8003b00 <HAL_GetTick>
 800b03c:	4602      	mov	r2, r0
 800b03e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b042:	1ad3      	subs	r3, r2, r3
 800b044:	2b64      	cmp	r3, #100	; 0x64
 800b046:	d903      	bls.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800b048:	2303      	movs	r3, #3
 800b04a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b04e:	e005      	b.n	800b05c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b050:	4b77      	ldr	r3, [pc, #476]	; (800b230 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d0ed      	beq.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800b05c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b060:	2b00      	cmp	r3, #0
 800b062:	d173      	bne.n	800b14c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b064:	4b71      	ldr	r3, [pc, #452]	; (800b22c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b066:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b068:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b06c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b070:	4053      	eors	r3, r2
 800b072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b076:	2b00      	cmp	r3, #0
 800b078:	d015      	beq.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b07a:	4b6c      	ldr	r3, [pc, #432]	; (800b22c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b07c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b07e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b082:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b086:	4b69      	ldr	r3, [pc, #420]	; (800b22c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b08a:	4a68      	ldr	r2, [pc, #416]	; (800b22c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b08c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b090:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b092:	4b66      	ldr	r3, [pc, #408]	; (800b22c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b096:	4a65      	ldr	r2, [pc, #404]	; (800b22c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b098:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b09c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b09e:	4a63      	ldr	r2, [pc, #396]	; (800b22c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b0a4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b0a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b0ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0b2:	d118      	bne.n	800b0e6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0b4:	f7f8 fd24 	bl	8003b00 <HAL_GetTick>
 800b0b8:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b0bc:	e00d      	b.n	800b0da <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b0be:	f7f8 fd1f 	bl	8003b00 <HAL_GetTick>
 800b0c2:	4602      	mov	r2, r0
 800b0c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b0c8:	1ad2      	subs	r2, r2, r3
 800b0ca:	f241 3388 	movw	r3, #5000	; 0x1388
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d903      	bls.n	800b0da <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800b0d2:	2303      	movs	r3, #3
 800b0d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800b0d8:	e005      	b.n	800b0e6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b0da:	4b54      	ldr	r3, [pc, #336]	; (800b22c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0de:	f003 0302 	and.w	r3, r3, #2
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d0eb      	beq.n	800b0be <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800b0e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d129      	bne.n	800b142 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b0ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b0f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b0fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b0fe:	d10e      	bne.n	800b11e <HAL_RCCEx_PeriphCLKConfig+0x846>
 800b100:	4b4a      	ldr	r3, [pc, #296]	; (800b22c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b102:	691b      	ldr	r3, [r3, #16]
 800b104:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b108:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b10c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b110:	091a      	lsrs	r2, r3, #4
 800b112:	4b48      	ldr	r3, [pc, #288]	; (800b234 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800b114:	4013      	ands	r3, r2
 800b116:	4a45      	ldr	r2, [pc, #276]	; (800b22c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b118:	430b      	orrs	r3, r1
 800b11a:	6113      	str	r3, [r2, #16]
 800b11c:	e005      	b.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800b11e:	4b43      	ldr	r3, [pc, #268]	; (800b22c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b120:	691b      	ldr	r3, [r3, #16]
 800b122:	4a42      	ldr	r2, [pc, #264]	; (800b22c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b124:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b128:	6113      	str	r3, [r2, #16]
 800b12a:	4b40      	ldr	r3, [pc, #256]	; (800b22c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b12c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b12e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b132:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b136:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b13a:	4a3c      	ldr	r2, [pc, #240]	; (800b22c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b13c:	430b      	orrs	r3, r1
 800b13e:	6713      	str	r3, [r2, #112]	; 0x70
 800b140:	e008      	b.n	800b154 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b142:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b146:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800b14a:	e003      	b.n	800b154 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b14c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b150:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b154:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b15c:	f002 0301 	and.w	r3, r2, #1
 800b160:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b164:	2300      	movs	r3, #0
 800b166:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b16a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b16e:	460b      	mov	r3, r1
 800b170:	4313      	orrs	r3, r2
 800b172:	f000 808f 	beq.w	800b294 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b176:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b17a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b17c:	2b28      	cmp	r3, #40	; 0x28
 800b17e:	d871      	bhi.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b180:	a201      	add	r2, pc, #4	; (adr r2, 800b188 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800b182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b186:	bf00      	nop
 800b188:	0800b26d 	.word	0x0800b26d
 800b18c:	0800b265 	.word	0x0800b265
 800b190:	0800b265 	.word	0x0800b265
 800b194:	0800b265 	.word	0x0800b265
 800b198:	0800b265 	.word	0x0800b265
 800b19c:	0800b265 	.word	0x0800b265
 800b1a0:	0800b265 	.word	0x0800b265
 800b1a4:	0800b265 	.word	0x0800b265
 800b1a8:	0800b239 	.word	0x0800b239
 800b1ac:	0800b265 	.word	0x0800b265
 800b1b0:	0800b265 	.word	0x0800b265
 800b1b4:	0800b265 	.word	0x0800b265
 800b1b8:	0800b265 	.word	0x0800b265
 800b1bc:	0800b265 	.word	0x0800b265
 800b1c0:	0800b265 	.word	0x0800b265
 800b1c4:	0800b265 	.word	0x0800b265
 800b1c8:	0800b24f 	.word	0x0800b24f
 800b1cc:	0800b265 	.word	0x0800b265
 800b1d0:	0800b265 	.word	0x0800b265
 800b1d4:	0800b265 	.word	0x0800b265
 800b1d8:	0800b265 	.word	0x0800b265
 800b1dc:	0800b265 	.word	0x0800b265
 800b1e0:	0800b265 	.word	0x0800b265
 800b1e4:	0800b265 	.word	0x0800b265
 800b1e8:	0800b26d 	.word	0x0800b26d
 800b1ec:	0800b265 	.word	0x0800b265
 800b1f0:	0800b265 	.word	0x0800b265
 800b1f4:	0800b265 	.word	0x0800b265
 800b1f8:	0800b265 	.word	0x0800b265
 800b1fc:	0800b265 	.word	0x0800b265
 800b200:	0800b265 	.word	0x0800b265
 800b204:	0800b265 	.word	0x0800b265
 800b208:	0800b26d 	.word	0x0800b26d
 800b20c:	0800b265 	.word	0x0800b265
 800b210:	0800b265 	.word	0x0800b265
 800b214:	0800b265 	.word	0x0800b265
 800b218:	0800b265 	.word	0x0800b265
 800b21c:	0800b265 	.word	0x0800b265
 800b220:	0800b265 	.word	0x0800b265
 800b224:	0800b265 	.word	0x0800b265
 800b228:	0800b26d 	.word	0x0800b26d
 800b22c:	58024400 	.word	0x58024400
 800b230:	58024800 	.word	0x58024800
 800b234:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b23c:	3308      	adds	r3, #8
 800b23e:	2101      	movs	r1, #1
 800b240:	4618      	mov	r0, r3
 800b242:	f001 fdcb 	bl	800cddc <RCCEx_PLL2_Config>
 800b246:	4603      	mov	r3, r0
 800b248:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b24c:	e00f      	b.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b24e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b252:	3328      	adds	r3, #40	; 0x28
 800b254:	2101      	movs	r1, #1
 800b256:	4618      	mov	r0, r3
 800b258:	f001 fe72 	bl	800cf40 <RCCEx_PLL3_Config>
 800b25c:	4603      	mov	r3, r0
 800b25e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b262:	e004      	b.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b264:	2301      	movs	r3, #1
 800b266:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b26a:	e000      	b.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800b26c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b26e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b272:	2b00      	cmp	r3, #0
 800b274:	d10a      	bne.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b276:	4bbf      	ldr	r3, [pc, #764]	; (800b574 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b27a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b27e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b282:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b284:	4abb      	ldr	r2, [pc, #748]	; (800b574 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b286:	430b      	orrs	r3, r1
 800b288:	6553      	str	r3, [r2, #84]	; 0x54
 800b28a:	e003      	b.n	800b294 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b28c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b290:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b294:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b29c:	f002 0302 	and.w	r3, r2, #2
 800b2a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b2aa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b2ae:	460b      	mov	r3, r1
 800b2b0:	4313      	orrs	r3, r2
 800b2b2:	d041      	beq.n	800b338 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b2b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2ba:	2b05      	cmp	r3, #5
 800b2bc:	d824      	bhi.n	800b308 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800b2be:	a201      	add	r2, pc, #4	; (adr r2, 800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800b2c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2c4:	0800b311 	.word	0x0800b311
 800b2c8:	0800b2dd 	.word	0x0800b2dd
 800b2cc:	0800b2f3 	.word	0x0800b2f3
 800b2d0:	0800b311 	.word	0x0800b311
 800b2d4:	0800b311 	.word	0x0800b311
 800b2d8:	0800b311 	.word	0x0800b311
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b2dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2e0:	3308      	adds	r3, #8
 800b2e2:	2101      	movs	r1, #1
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f001 fd79 	bl	800cddc <RCCEx_PLL2_Config>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b2f0:	e00f      	b.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b2f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2f6:	3328      	adds	r3, #40	; 0x28
 800b2f8:	2101      	movs	r1, #1
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f001 fe20 	bl	800cf40 <RCCEx_PLL3_Config>
 800b300:	4603      	mov	r3, r0
 800b302:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b306:	e004      	b.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b308:	2301      	movs	r3, #1
 800b30a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b30e:	e000      	b.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800b310:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b312:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b316:	2b00      	cmp	r3, #0
 800b318:	d10a      	bne.n	800b330 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b31a:	4b96      	ldr	r3, [pc, #600]	; (800b574 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b31c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b31e:	f023 0107 	bic.w	r1, r3, #7
 800b322:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b328:	4a92      	ldr	r2, [pc, #584]	; (800b574 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b32a:	430b      	orrs	r3, r1
 800b32c:	6553      	str	r3, [r2, #84]	; 0x54
 800b32e:	e003      	b.n	800b338 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b330:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b334:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b340:	f002 0304 	and.w	r3, r2, #4
 800b344:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b348:	2300      	movs	r3, #0
 800b34a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b34e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b352:	460b      	mov	r3, r1
 800b354:	4313      	orrs	r3, r2
 800b356:	d044      	beq.n	800b3e2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b35c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b360:	2b05      	cmp	r3, #5
 800b362:	d825      	bhi.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800b364:	a201      	add	r2, pc, #4	; (adr r2, 800b36c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800b366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b36a:	bf00      	nop
 800b36c:	0800b3b9 	.word	0x0800b3b9
 800b370:	0800b385 	.word	0x0800b385
 800b374:	0800b39b 	.word	0x0800b39b
 800b378:	0800b3b9 	.word	0x0800b3b9
 800b37c:	0800b3b9 	.word	0x0800b3b9
 800b380:	0800b3b9 	.word	0x0800b3b9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b384:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b388:	3308      	adds	r3, #8
 800b38a:	2101      	movs	r1, #1
 800b38c:	4618      	mov	r0, r3
 800b38e:	f001 fd25 	bl	800cddc <RCCEx_PLL2_Config>
 800b392:	4603      	mov	r3, r0
 800b394:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b398:	e00f      	b.n	800b3ba <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b39a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b39e:	3328      	adds	r3, #40	; 0x28
 800b3a0:	2101      	movs	r1, #1
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f001 fdcc 	bl	800cf40 <RCCEx_PLL3_Config>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b3ae:	e004      	b.n	800b3ba <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b3b6:	e000      	b.n	800b3ba <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800b3b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d10b      	bne.n	800b3da <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b3c2:	4b6c      	ldr	r3, [pc, #432]	; (800b574 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b3c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3c6:	f023 0107 	bic.w	r1, r3, #7
 800b3ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3d2:	4a68      	ldr	r2, [pc, #416]	; (800b574 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b3d4:	430b      	orrs	r3, r1
 800b3d6:	6593      	str	r3, [r2, #88]	; 0x58
 800b3d8:	e003      	b.n	800b3e2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3de:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b3e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ea:	f002 0320 	and.w	r3, r2, #32
 800b3ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b3f8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b3fc:	460b      	mov	r3, r1
 800b3fe:	4313      	orrs	r3, r2
 800b400:	d055      	beq.n	800b4ae <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b402:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b406:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b40a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b40e:	d033      	beq.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800b410:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b414:	d82c      	bhi.n	800b470 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b41a:	d02f      	beq.n	800b47c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b41c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b420:	d826      	bhi.n	800b470 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b422:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b426:	d02b      	beq.n	800b480 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b428:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b42c:	d820      	bhi.n	800b470 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b42e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b432:	d012      	beq.n	800b45a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800b434:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b438:	d81a      	bhi.n	800b470 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d022      	beq.n	800b484 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b43e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b442:	d115      	bne.n	800b470 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b444:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b448:	3308      	adds	r3, #8
 800b44a:	2100      	movs	r1, #0
 800b44c:	4618      	mov	r0, r3
 800b44e:	f001 fcc5 	bl	800cddc <RCCEx_PLL2_Config>
 800b452:	4603      	mov	r3, r0
 800b454:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b458:	e015      	b.n	800b486 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b45a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b45e:	3328      	adds	r3, #40	; 0x28
 800b460:	2102      	movs	r1, #2
 800b462:	4618      	mov	r0, r3
 800b464:	f001 fd6c 	bl	800cf40 <RCCEx_PLL3_Config>
 800b468:	4603      	mov	r3, r0
 800b46a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b46e:	e00a      	b.n	800b486 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b470:	2301      	movs	r3, #1
 800b472:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b476:	e006      	b.n	800b486 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b478:	bf00      	nop
 800b47a:	e004      	b.n	800b486 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b47c:	bf00      	nop
 800b47e:	e002      	b.n	800b486 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b480:	bf00      	nop
 800b482:	e000      	b.n	800b486 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b484:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b486:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d10b      	bne.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b48e:	4b39      	ldr	r3, [pc, #228]	; (800b574 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b492:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b496:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b49a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b49e:	4a35      	ldr	r2, [pc, #212]	; (800b574 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b4a0:	430b      	orrs	r3, r1
 800b4a2:	6553      	str	r3, [r2, #84]	; 0x54
 800b4a4:	e003      	b.n	800b4ae <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4aa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b4ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b4ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b4be:	2300      	movs	r3, #0
 800b4c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b4c4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b4c8:	460b      	mov	r3, r1
 800b4ca:	4313      	orrs	r3, r2
 800b4cc:	d058      	beq.n	800b580 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b4ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b4d6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b4da:	d033      	beq.n	800b544 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b4dc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b4e0:	d82c      	bhi.n	800b53c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b4e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4e6:	d02f      	beq.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b4e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4ec:	d826      	bhi.n	800b53c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b4ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b4f2:	d02b      	beq.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b4f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b4f8:	d820      	bhi.n	800b53c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b4fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4fe:	d012      	beq.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b500:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b504:	d81a      	bhi.n	800b53c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b506:	2b00      	cmp	r3, #0
 800b508:	d022      	beq.n	800b550 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b50a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b50e:	d115      	bne.n	800b53c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b510:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b514:	3308      	adds	r3, #8
 800b516:	2100      	movs	r1, #0
 800b518:	4618      	mov	r0, r3
 800b51a:	f001 fc5f 	bl	800cddc <RCCEx_PLL2_Config>
 800b51e:	4603      	mov	r3, r0
 800b520:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b524:	e015      	b.n	800b552 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b526:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b52a:	3328      	adds	r3, #40	; 0x28
 800b52c:	2102      	movs	r1, #2
 800b52e:	4618      	mov	r0, r3
 800b530:	f001 fd06 	bl	800cf40 <RCCEx_PLL3_Config>
 800b534:	4603      	mov	r3, r0
 800b536:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b53a:	e00a      	b.n	800b552 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b53c:	2301      	movs	r3, #1
 800b53e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b542:	e006      	b.n	800b552 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b544:	bf00      	nop
 800b546:	e004      	b.n	800b552 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b548:	bf00      	nop
 800b54a:	e002      	b.n	800b552 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b54c:	bf00      	nop
 800b54e:	e000      	b.n	800b552 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b550:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b552:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b556:	2b00      	cmp	r3, #0
 800b558:	d10e      	bne.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b55a:	4b06      	ldr	r3, [pc, #24]	; (800b574 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b55c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b55e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b562:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b566:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b56a:	4a02      	ldr	r2, [pc, #8]	; (800b574 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b56c:	430b      	orrs	r3, r1
 800b56e:	6593      	str	r3, [r2, #88]	; 0x58
 800b570:	e006      	b.n	800b580 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800b572:	bf00      	nop
 800b574:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b578:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b57c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b580:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b588:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b58c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b590:	2300      	movs	r3, #0
 800b592:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b596:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b59a:	460b      	mov	r3, r1
 800b59c:	4313      	orrs	r3, r2
 800b59e:	d055      	beq.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b5a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b5a8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b5ac:	d033      	beq.n	800b616 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800b5ae:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b5b2:	d82c      	bhi.n	800b60e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b5b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5b8:	d02f      	beq.n	800b61a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b5ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5be:	d826      	bhi.n	800b60e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b5c0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b5c4:	d02b      	beq.n	800b61e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b5c6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b5ca:	d820      	bhi.n	800b60e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b5cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b5d0:	d012      	beq.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800b5d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b5d6:	d81a      	bhi.n	800b60e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d022      	beq.n	800b622 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b5dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5e0:	d115      	bne.n	800b60e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b5e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5e6:	3308      	adds	r3, #8
 800b5e8:	2100      	movs	r1, #0
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f001 fbf6 	bl	800cddc <RCCEx_PLL2_Config>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b5f6:	e015      	b.n	800b624 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b5f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5fc:	3328      	adds	r3, #40	; 0x28
 800b5fe:	2102      	movs	r1, #2
 800b600:	4618      	mov	r0, r3
 800b602:	f001 fc9d 	bl	800cf40 <RCCEx_PLL3_Config>
 800b606:	4603      	mov	r3, r0
 800b608:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b60c:	e00a      	b.n	800b624 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b60e:	2301      	movs	r3, #1
 800b610:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b614:	e006      	b.n	800b624 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b616:	bf00      	nop
 800b618:	e004      	b.n	800b624 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b61a:	bf00      	nop
 800b61c:	e002      	b.n	800b624 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b61e:	bf00      	nop
 800b620:	e000      	b.n	800b624 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b622:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b624:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d10b      	bne.n	800b644 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b62c:	4ba0      	ldr	r3, [pc, #640]	; (800b8b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b62e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b630:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b638:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b63c:	4a9c      	ldr	r2, [pc, #624]	; (800b8b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b63e:	430b      	orrs	r3, r1
 800b640:	6593      	str	r3, [r2, #88]	; 0x58
 800b642:	e003      	b.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b644:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b648:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b64c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b654:	f002 0308 	and.w	r3, r2, #8
 800b658:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b65c:	2300      	movs	r3, #0
 800b65e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b662:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b666:	460b      	mov	r3, r1
 800b668:	4313      	orrs	r3, r2
 800b66a:	d01e      	beq.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800b66c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b670:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b678:	d10c      	bne.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b67a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b67e:	3328      	adds	r3, #40	; 0x28
 800b680:	2102      	movs	r1, #2
 800b682:	4618      	mov	r0, r3
 800b684:	f001 fc5c 	bl	800cf40 <RCCEx_PLL3_Config>
 800b688:	4603      	mov	r3, r0
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d002      	beq.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800b68e:	2301      	movs	r3, #1
 800b690:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b694:	4b86      	ldr	r3, [pc, #536]	; (800b8b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b698:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b69c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6a4:	4a82      	ldr	r2, [pc, #520]	; (800b8b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b6a6:	430b      	orrs	r3, r1
 800b6a8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b6aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b2:	f002 0310 	and.w	r3, r2, #16
 800b6b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b6c0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	4313      	orrs	r3, r2
 800b6c8:	d01e      	beq.n	800b708 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b6ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b6d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6d6:	d10c      	bne.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b6d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6dc:	3328      	adds	r3, #40	; 0x28
 800b6de:	2102      	movs	r1, #2
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f001 fc2d 	bl	800cf40 <RCCEx_PLL3_Config>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d002      	beq.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b6f2:	4b6f      	ldr	r3, [pc, #444]	; (800b8b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b6f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b6fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b702:	4a6b      	ldr	r2, [pc, #428]	; (800b8b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b704:	430b      	orrs	r3, r1
 800b706:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b708:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b710:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b714:	67bb      	str	r3, [r7, #120]	; 0x78
 800b716:	2300      	movs	r3, #0
 800b718:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b71a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b71e:	460b      	mov	r3, r1
 800b720:	4313      	orrs	r3, r2
 800b722:	d03e      	beq.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b724:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b728:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b72c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b730:	d022      	beq.n	800b778 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b732:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b736:	d81b      	bhi.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d003      	beq.n	800b744 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800b73c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b740:	d00b      	beq.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800b742:	e015      	b.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b744:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b748:	3308      	adds	r3, #8
 800b74a:	2100      	movs	r1, #0
 800b74c:	4618      	mov	r0, r3
 800b74e:	f001 fb45 	bl	800cddc <RCCEx_PLL2_Config>
 800b752:	4603      	mov	r3, r0
 800b754:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b758:	e00f      	b.n	800b77a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b75a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b75e:	3328      	adds	r3, #40	; 0x28
 800b760:	2102      	movs	r1, #2
 800b762:	4618      	mov	r0, r3
 800b764:	f001 fbec 	bl	800cf40 <RCCEx_PLL3_Config>
 800b768:	4603      	mov	r3, r0
 800b76a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b76e:	e004      	b.n	800b77a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b770:	2301      	movs	r3, #1
 800b772:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b776:	e000      	b.n	800b77a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800b778:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b77a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d10b      	bne.n	800b79a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b782:	4b4b      	ldr	r3, [pc, #300]	; (800b8b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b786:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b78a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b78e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b792:	4a47      	ldr	r2, [pc, #284]	; (800b8b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b794:	430b      	orrs	r3, r1
 800b796:	6593      	str	r3, [r2, #88]	; 0x58
 800b798:	e003      	b.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b79a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b79e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b7a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7aa:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b7ae:	673b      	str	r3, [r7, #112]	; 0x70
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	677b      	str	r3, [r7, #116]	; 0x74
 800b7b4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b7b8:	460b      	mov	r3, r1
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	d03b      	beq.n	800b836 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b7be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b7ca:	d01f      	beq.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b7cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b7d0:	d818      	bhi.n	800b804 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800b7d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b7d6:	d003      	beq.n	800b7e0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800b7d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b7dc:	d007      	beq.n	800b7ee <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800b7de:	e011      	b.n	800b804 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7e0:	4b33      	ldr	r3, [pc, #204]	; (800b8b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7e4:	4a32      	ldr	r2, [pc, #200]	; (800b8b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b7e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b7ec:	e00f      	b.n	800b80e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b7ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7f2:	3328      	adds	r3, #40	; 0x28
 800b7f4:	2101      	movs	r1, #1
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f001 fba2 	bl	800cf40 <RCCEx_PLL3_Config>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800b802:	e004      	b.n	800b80e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b804:	2301      	movs	r3, #1
 800b806:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b80a:	e000      	b.n	800b80e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800b80c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b80e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b812:	2b00      	cmp	r3, #0
 800b814:	d10b      	bne.n	800b82e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b816:	4b26      	ldr	r3, [pc, #152]	; (800b8b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b81a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b81e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b822:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b826:	4a22      	ldr	r2, [pc, #136]	; (800b8b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b828:	430b      	orrs	r3, r1
 800b82a:	6553      	str	r3, [r2, #84]	; 0x54
 800b82c:	e003      	b.n	800b836 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b82e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b832:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b836:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b83e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b842:	66bb      	str	r3, [r7, #104]	; 0x68
 800b844:	2300      	movs	r3, #0
 800b846:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b848:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b84c:	460b      	mov	r3, r1
 800b84e:	4313      	orrs	r3, r2
 800b850:	d034      	beq.n	800b8bc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b852:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d003      	beq.n	800b864 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800b85c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b860:	d007      	beq.n	800b872 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800b862:	e011      	b.n	800b888 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b864:	4b12      	ldr	r3, [pc, #72]	; (800b8b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b868:	4a11      	ldr	r2, [pc, #68]	; (800b8b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b86a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b86e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b870:	e00e      	b.n	800b890 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b876:	3308      	adds	r3, #8
 800b878:	2102      	movs	r1, #2
 800b87a:	4618      	mov	r0, r3
 800b87c:	f001 faae 	bl	800cddc <RCCEx_PLL2_Config>
 800b880:	4603      	mov	r3, r0
 800b882:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b886:	e003      	b.n	800b890 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800b888:	2301      	movs	r3, #1
 800b88a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b88e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b890:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b894:	2b00      	cmp	r3, #0
 800b896:	d10d      	bne.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b898:	4b05      	ldr	r3, [pc, #20]	; (800b8b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b89a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b89c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b8a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8a6:	4a02      	ldr	r2, [pc, #8]	; (800b8b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b8a8:	430b      	orrs	r3, r1
 800b8aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b8ac:	e006      	b.n	800b8bc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800b8ae:	bf00      	nop
 800b8b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b8bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b8c8:	663b      	str	r3, [r7, #96]	; 0x60
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	667b      	str	r3, [r7, #100]	; 0x64
 800b8ce:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b8d2:	460b      	mov	r3, r1
 800b8d4:	4313      	orrs	r3, r2
 800b8d6:	d00c      	beq.n	800b8f2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b8d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8dc:	3328      	adds	r3, #40	; 0x28
 800b8de:	2102      	movs	r1, #2
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f001 fb2d 	bl	800cf40 <RCCEx_PLL3_Config>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d002      	beq.n	800b8f2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b8f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fa:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b8fe:	65bb      	str	r3, [r7, #88]	; 0x58
 800b900:	2300      	movs	r3, #0
 800b902:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b904:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800b908:	460b      	mov	r3, r1
 800b90a:	4313      	orrs	r3, r2
 800b90c:	d036      	beq.n	800b97c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b90e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b912:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b914:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b918:	d018      	beq.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800b91a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b91e:	d811      	bhi.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b924:	d014      	beq.n	800b950 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800b926:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b92a:	d80b      	bhi.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d011      	beq.n	800b954 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800b930:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b934:	d106      	bne.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b936:	4bb7      	ldr	r3, [pc, #732]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b93a:	4ab6      	ldr	r2, [pc, #728]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b93c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b940:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b942:	e008      	b.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b944:	2301      	movs	r3, #1
 800b946:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b94a:	e004      	b.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b94c:	bf00      	nop
 800b94e:	e002      	b.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b950:	bf00      	nop
 800b952:	e000      	b.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b954:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b956:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d10a      	bne.n	800b974 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b95e:	4bad      	ldr	r3, [pc, #692]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b962:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b966:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b96a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b96c:	4aa9      	ldr	r2, [pc, #676]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b96e:	430b      	orrs	r3, r1
 800b970:	6553      	str	r3, [r2, #84]	; 0x54
 800b972:	e003      	b.n	800b97c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b974:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b978:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b97c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b984:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800b988:	653b      	str	r3, [r7, #80]	; 0x50
 800b98a:	2300      	movs	r3, #0
 800b98c:	657b      	str	r3, [r7, #84]	; 0x54
 800b98e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b992:	460b      	mov	r3, r1
 800b994:	4313      	orrs	r3, r2
 800b996:	d009      	beq.n	800b9ac <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b998:	4b9e      	ldr	r3, [pc, #632]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b99a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b99c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b9a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9a6:	4a9b      	ldr	r2, [pc, #620]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9a8:	430b      	orrs	r3, r1
 800b9aa:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b9ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b4:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800b9b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b9be:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800b9c2:	460b      	mov	r3, r1
 800b9c4:	4313      	orrs	r3, r2
 800b9c6:	d009      	beq.n	800b9dc <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b9c8:	4b92      	ldr	r3, [pc, #584]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9cc:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800b9d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b9d6:	4a8f      	ldr	r2, [pc, #572]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9d8:	430b      	orrs	r3, r1
 800b9da:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b9dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e4:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800b9e8:	643b      	str	r3, [r7, #64]	; 0x40
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	647b      	str	r3, [r7, #68]	; 0x44
 800b9ee:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b9f2:	460b      	mov	r3, r1
 800b9f4:	4313      	orrs	r3, r2
 800b9f6:	d00e      	beq.n	800ba16 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b9f8:	4b86      	ldr	r3, [pc, #536]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9fa:	691b      	ldr	r3, [r3, #16]
 800b9fc:	4a85      	ldr	r2, [pc, #532]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ba02:	6113      	str	r3, [r2, #16]
 800ba04:	4b83      	ldr	r3, [pc, #524]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ba06:	6919      	ldr	r1, [r3, #16]
 800ba08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ba10:	4a80      	ldr	r2, [pc, #512]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ba12:	430b      	orrs	r3, r1
 800ba14:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ba16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba1e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800ba22:	63bb      	str	r3, [r7, #56]	; 0x38
 800ba24:	2300      	movs	r3, #0
 800ba26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba28:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800ba2c:	460b      	mov	r3, r1
 800ba2e:	4313      	orrs	r3, r2
 800ba30:	d009      	beq.n	800ba46 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ba32:	4b78      	ldr	r3, [pc, #480]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ba34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba36:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800ba3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba40:	4a74      	ldr	r2, [pc, #464]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ba42:	430b      	orrs	r3, r1
 800ba44:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ba46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800ba52:	633b      	str	r3, [r7, #48]	; 0x30
 800ba54:	2300      	movs	r3, #0
 800ba56:	637b      	str	r3, [r7, #52]	; 0x34
 800ba58:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800ba5c:	460b      	mov	r3, r1
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	d00a      	beq.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ba62:	4b6c      	ldr	r3, [pc, #432]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ba64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba66:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800ba6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba72:	4a68      	ldr	r2, [pc, #416]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ba74:	430b      	orrs	r3, r1
 800ba76:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ba78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba80:	2100      	movs	r1, #0
 800ba82:	62b9      	str	r1, [r7, #40]	; 0x28
 800ba84:	f003 0301 	and.w	r3, r3, #1
 800ba88:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba8a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800ba8e:	460b      	mov	r3, r1
 800ba90:	4313      	orrs	r3, r2
 800ba92:	d011      	beq.n	800bab8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba98:	3308      	adds	r3, #8
 800ba9a:	2100      	movs	r1, #0
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f001 f99d 	bl	800cddc <RCCEx_PLL2_Config>
 800baa2:	4603      	mov	r3, r0
 800baa4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800baa8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800baac:	2b00      	cmp	r3, #0
 800baae:	d003      	beq.n	800bab8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bab0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bab4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800babc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac0:	2100      	movs	r1, #0
 800bac2:	6239      	str	r1, [r7, #32]
 800bac4:	f003 0302 	and.w	r3, r3, #2
 800bac8:	627b      	str	r3, [r7, #36]	; 0x24
 800baca:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bace:	460b      	mov	r3, r1
 800bad0:	4313      	orrs	r3, r2
 800bad2:	d011      	beq.n	800baf8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bad8:	3308      	adds	r3, #8
 800bada:	2101      	movs	r1, #1
 800badc:	4618      	mov	r0, r3
 800bade:	f001 f97d 	bl	800cddc <RCCEx_PLL2_Config>
 800bae2:	4603      	mov	r3, r0
 800bae4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bae8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800baec:	2b00      	cmp	r3, #0
 800baee:	d003      	beq.n	800baf8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baf0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800baf4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800baf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb00:	2100      	movs	r1, #0
 800bb02:	61b9      	str	r1, [r7, #24]
 800bb04:	f003 0304 	and.w	r3, r3, #4
 800bb08:	61fb      	str	r3, [r7, #28]
 800bb0a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bb0e:	460b      	mov	r3, r1
 800bb10:	4313      	orrs	r3, r2
 800bb12:	d011      	beq.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bb14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb18:	3308      	adds	r3, #8
 800bb1a:	2102      	movs	r1, #2
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f001 f95d 	bl	800cddc <RCCEx_PLL2_Config>
 800bb22:	4603      	mov	r3, r0
 800bb24:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bb28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d003      	beq.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb30:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb34:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bb38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb40:	2100      	movs	r1, #0
 800bb42:	6139      	str	r1, [r7, #16]
 800bb44:	f003 0308 	and.w	r3, r3, #8
 800bb48:	617b      	str	r3, [r7, #20]
 800bb4a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bb4e:	460b      	mov	r3, r1
 800bb50:	4313      	orrs	r3, r2
 800bb52:	d011      	beq.n	800bb78 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bb54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb58:	3328      	adds	r3, #40	; 0x28
 800bb5a:	2100      	movs	r1, #0
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f001 f9ef 	bl	800cf40 <RCCEx_PLL3_Config>
 800bb62:	4603      	mov	r3, r0
 800bb64:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800bb68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d003      	beq.n	800bb78 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb74:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bb78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb80:	2100      	movs	r1, #0
 800bb82:	60b9      	str	r1, [r7, #8]
 800bb84:	f003 0310 	and.w	r3, r3, #16
 800bb88:	60fb      	str	r3, [r7, #12]
 800bb8a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bb8e:	460b      	mov	r3, r1
 800bb90:	4313      	orrs	r3, r2
 800bb92:	d011      	beq.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb98:	3328      	adds	r3, #40	; 0x28
 800bb9a:	2101      	movs	r1, #1
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f001 f9cf 	bl	800cf40 <RCCEx_PLL3_Config>
 800bba2:	4603      	mov	r3, r0
 800bba4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bba8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d003      	beq.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbb0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbb4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bbb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc0:	2100      	movs	r1, #0
 800bbc2:	6039      	str	r1, [r7, #0]
 800bbc4:	f003 0320 	and.w	r3, r3, #32
 800bbc8:	607b      	str	r3, [r7, #4]
 800bbca:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bbce:	460b      	mov	r3, r1
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	d011      	beq.n	800bbf8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bbd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbd8:	3328      	adds	r3, #40	; 0x28
 800bbda:	2102      	movs	r1, #2
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f001 f9af 	bl	800cf40 <RCCEx_PLL3_Config>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bbe8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d003      	beq.n	800bbf8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbf0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbf4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800bbf8:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d101      	bne.n	800bc04 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800bc00:	2300      	movs	r3, #0
 800bc02:	e000      	b.n	800bc06 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800bc04:	2301      	movs	r3, #1
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bc12:	bf00      	nop
 800bc14:	58024400 	.word	0x58024400

0800bc18 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b090      	sub	sp, #64	; 0x40
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bc22:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc26:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800bc2a:	430b      	orrs	r3, r1
 800bc2c:	f040 8094 	bne.w	800bd58 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800bc30:	4b9b      	ldr	r3, [pc, #620]	; (800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc34:	f003 0307 	and.w	r3, r3, #7
 800bc38:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bc3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc3c:	2b04      	cmp	r3, #4
 800bc3e:	f200 8087 	bhi.w	800bd50 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800bc42:	a201      	add	r2, pc, #4	; (adr r2, 800bc48 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800bc44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc48:	0800bc5d 	.word	0x0800bc5d
 800bc4c:	0800bc85 	.word	0x0800bc85
 800bc50:	0800bcad 	.word	0x0800bcad
 800bc54:	0800bd49 	.word	0x0800bd49
 800bc58:	0800bcd5 	.word	0x0800bcd5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bc5c:	4b90      	ldr	r3, [pc, #576]	; (800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc68:	d108      	bne.n	800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bc6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f000 ff62 	bl	800cb38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bc74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc78:	f000 bc93 	b.w	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc80:	f000 bc8f 	b.w	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bc84:	4b86      	ldr	r3, [pc, #536]	; (800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc90:	d108      	bne.n	800bca4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc92:	f107 0318 	add.w	r3, r7, #24
 800bc96:	4618      	mov	r0, r3
 800bc98:	f000 fca6 	bl	800c5e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bc9c:	69bb      	ldr	r3, [r7, #24]
 800bc9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bca0:	f000 bc7f 	b.w	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bca4:	2300      	movs	r3, #0
 800bca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bca8:	f000 bc7b 	b.w	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bcac:	4b7c      	ldr	r3, [pc, #496]	; (800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bcb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcb8:	d108      	bne.n	800bccc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bcba:	f107 030c 	add.w	r3, r7, #12
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f000 fde6 	bl	800c890 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bcc8:	f000 bc6b 	b.w	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bccc:	2300      	movs	r3, #0
 800bcce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcd0:	f000 bc67 	b.w	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bcd4:	4b72      	ldr	r3, [pc, #456]	; (800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bcd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bcdc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bcde:	4b70      	ldr	r3, [pc, #448]	; (800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f003 0304 	and.w	r3, r3, #4
 800bce6:	2b04      	cmp	r3, #4
 800bce8:	d10c      	bne.n	800bd04 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bcea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d109      	bne.n	800bd04 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bcf0:	4b6b      	ldr	r3, [pc, #428]	; (800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	08db      	lsrs	r3, r3, #3
 800bcf6:	f003 0303 	and.w	r3, r3, #3
 800bcfa:	4a6a      	ldr	r2, [pc, #424]	; (800bea4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800bcfc:	fa22 f303 	lsr.w	r3, r2, r3
 800bd00:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd02:	e01f      	b.n	800bd44 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bd04:	4b66      	ldr	r3, [pc, #408]	; (800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd10:	d106      	bne.n	800bd20 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800bd12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd18:	d102      	bne.n	800bd20 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bd1a:	4b63      	ldr	r3, [pc, #396]	; (800bea8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800bd1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd1e:	e011      	b.n	800bd44 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bd20:	4b5f      	ldr	r3, [pc, #380]	; (800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd2c:	d106      	bne.n	800bd3c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bd2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd34:	d102      	bne.n	800bd3c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bd36:	4b5d      	ldr	r3, [pc, #372]	; (800beac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd38:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd3a:	e003      	b.n	800bd44 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bd40:	f000 bc2f 	b.w	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bd44:	f000 bc2d 	b.w	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bd48:	4b59      	ldr	r3, [pc, #356]	; (800beb0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bd4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd4c:	f000 bc29 	b.w	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800bd50:	2300      	movs	r3, #0
 800bd52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd54:	f000 bc25 	b.w	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800bd58:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd5c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800bd60:	430b      	orrs	r3, r1
 800bd62:	f040 80a7 	bne.w	800beb4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800bd66:	4b4e      	ldr	r3, [pc, #312]	; (800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd6a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800bd6e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bd70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bd76:	d054      	beq.n	800be22 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800bd78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bd7e:	f200 808b 	bhi.w	800be98 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bd82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd84:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bd88:	f000 8083 	beq.w	800be92 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800bd8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd8e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bd92:	f200 8081 	bhi.w	800be98 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd9c:	d02f      	beq.n	800bdfe <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800bd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bda4:	d878      	bhi.n	800be98 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d004      	beq.n	800bdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800bdac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bdb2:	d012      	beq.n	800bdda <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800bdb4:	e070      	b.n	800be98 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bdb6:	4b3a      	ldr	r3, [pc, #232]	; (800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bdbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bdc2:	d107      	bne.n	800bdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bdc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f000 feb5 	bl	800cb38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bdce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bdd2:	e3e6      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdd8:	e3e3      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bdda:	4b31      	ldr	r3, [pc, #196]	; (800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bde2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bde6:	d107      	bne.n	800bdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bde8:	f107 0318 	add.w	r3, r7, #24
 800bdec:	4618      	mov	r0, r3
 800bdee:	f000 fbfb 	bl	800c5e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bdf2:	69bb      	ldr	r3, [r7, #24]
 800bdf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bdf6:	e3d4      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdfc:	e3d1      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bdfe:	4b28      	ldr	r3, [pc, #160]	; (800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be0a:	d107      	bne.n	800be1c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be0c:	f107 030c 	add.w	r3, r7, #12
 800be10:	4618      	mov	r0, r3
 800be12:	f000 fd3d 	bl	800c890 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be1a:	e3c2      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be1c:	2300      	movs	r3, #0
 800be1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be20:	e3bf      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800be22:	4b1f      	ldr	r3, [pc, #124]	; (800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800be24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800be2a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800be2c:	4b1c      	ldr	r3, [pc, #112]	; (800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f003 0304 	and.w	r3, r3, #4
 800be34:	2b04      	cmp	r3, #4
 800be36:	d10c      	bne.n	800be52 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800be38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d109      	bne.n	800be52 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be3e:	4b18      	ldr	r3, [pc, #96]	; (800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	08db      	lsrs	r3, r3, #3
 800be44:	f003 0303 	and.w	r3, r3, #3
 800be48:	4a16      	ldr	r2, [pc, #88]	; (800bea4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800be4a:	fa22 f303 	lsr.w	r3, r2, r3
 800be4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be50:	e01e      	b.n	800be90 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800be52:	4b13      	ldr	r3, [pc, #76]	; (800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be5e:	d106      	bne.n	800be6e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800be60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be66:	d102      	bne.n	800be6e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800be68:	4b0f      	ldr	r3, [pc, #60]	; (800bea8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800be6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be6c:	e010      	b.n	800be90 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800be6e:	4b0c      	ldr	r3, [pc, #48]	; (800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be7a:	d106      	bne.n	800be8a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800be7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be82:	d102      	bne.n	800be8a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800be84:	4b09      	ldr	r3, [pc, #36]	; (800beac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be86:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be88:	e002      	b.n	800be90 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800be8a:	2300      	movs	r3, #0
 800be8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800be8e:	e388      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800be90:	e387      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800be92:	4b07      	ldr	r3, [pc, #28]	; (800beb0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800be94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be96:	e384      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800be98:	2300      	movs	r3, #0
 800be9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be9c:	e381      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800be9e:	bf00      	nop
 800bea0:	58024400 	.word	0x58024400
 800bea4:	03d09000 	.word	0x03d09000
 800bea8:	003d0900 	.word	0x003d0900
 800beac:	02faf080 	.word	0x02faf080
 800beb0:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800beb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800beb8:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800bebc:	430b      	orrs	r3, r1
 800bebe:	f040 809c 	bne.w	800bffa <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800bec2:	4b9e      	ldr	r3, [pc, #632]	; (800c13c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bec6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800beca:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800becc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bece:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bed2:	d054      	beq.n	800bf7e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800bed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800beda:	f200 808b 	bhi.w	800bff4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bee4:	f000 8083 	beq.w	800bfee <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800bee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800beee:	f200 8081 	bhi.w	800bff4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bef8:	d02f      	beq.n	800bf5a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800befa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800befc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf00:	d878      	bhi.n	800bff4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bf02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d004      	beq.n	800bf12 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800bf08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bf0e:	d012      	beq.n	800bf36 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800bf10:	e070      	b.n	800bff4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bf12:	4b8a      	ldr	r3, [pc, #552]	; (800c13c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf1e:	d107      	bne.n	800bf30 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bf20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf24:	4618      	mov	r0, r3
 800bf26:	f000 fe07 	bl	800cb38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bf2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf2e:	e338      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf30:	2300      	movs	r3, #0
 800bf32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf34:	e335      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf36:	4b81      	ldr	r3, [pc, #516]	; (800c13c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf42:	d107      	bne.n	800bf54 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf44:	f107 0318 	add.w	r3, r7, #24
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f000 fb4d 	bl	800c5e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bf4e:	69bb      	ldr	r3, [r7, #24]
 800bf50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf52:	e326      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf54:	2300      	movs	r3, #0
 800bf56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf58:	e323      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bf5a:	4b78      	ldr	r3, [pc, #480]	; (800c13c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf66:	d107      	bne.n	800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf68:	f107 030c 	add.w	r3, r7, #12
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f000 fc8f 	bl	800c890 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf76:	e314      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf7c:	e311      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bf7e:	4b6f      	ldr	r3, [pc, #444]	; (800c13c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bf86:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bf88:	4b6c      	ldr	r3, [pc, #432]	; (800c13c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f003 0304 	and.w	r3, r3, #4
 800bf90:	2b04      	cmp	r3, #4
 800bf92:	d10c      	bne.n	800bfae <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800bf94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d109      	bne.n	800bfae <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf9a:	4b68      	ldr	r3, [pc, #416]	; (800c13c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	08db      	lsrs	r3, r3, #3
 800bfa0:	f003 0303 	and.w	r3, r3, #3
 800bfa4:	4a66      	ldr	r2, [pc, #408]	; (800c140 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800bfa6:	fa22 f303 	lsr.w	r3, r2, r3
 800bfaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfac:	e01e      	b.n	800bfec <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bfae:	4b63      	ldr	r3, [pc, #396]	; (800c13c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfba:	d106      	bne.n	800bfca <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800bfbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bfc2:	d102      	bne.n	800bfca <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bfc4:	4b5f      	ldr	r3, [pc, #380]	; (800c144 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800bfc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfc8:	e010      	b.n	800bfec <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bfca:	4b5c      	ldr	r3, [pc, #368]	; (800c13c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bfd6:	d106      	bne.n	800bfe6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800bfd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfde:	d102      	bne.n	800bfe6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bfe0:	4b59      	ldr	r3, [pc, #356]	; (800c148 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bfe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfe4:	e002      	b.n	800bfec <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bfea:	e2da      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bfec:	e2d9      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bfee:	4b57      	ldr	r3, [pc, #348]	; (800c14c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bff0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bff2:	e2d6      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bff4:	2300      	movs	r3, #0
 800bff6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bff8:	e2d3      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800bffa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bffe:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c002:	430b      	orrs	r3, r1
 800c004:	f040 80a7 	bne.w	800c156 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c008:	4b4c      	ldr	r3, [pc, #304]	; (800c13c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c00a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c00c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c010:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c014:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c018:	d055      	beq.n	800c0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800c01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c01c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c020:	f200 8096 	bhi.w	800c150 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c026:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c02a:	f000 8084 	beq.w	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800c02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c030:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c034:	f200 808c 	bhi.w	800c150 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c03a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c03e:	d030      	beq.n	800c0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800c040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c042:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c046:	f200 8083 	bhi.w	800c150 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d004      	beq.n	800c05a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800c050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c056:	d012      	beq.n	800c07e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800c058:	e07a      	b.n	800c150 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c05a:	4b38      	ldr	r3, [pc, #224]	; (800c13c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c062:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c066:	d107      	bne.n	800c078 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c068:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c06c:	4618      	mov	r0, r3
 800c06e:	f000 fd63 	bl	800cb38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c074:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c076:	e294      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c078:	2300      	movs	r3, #0
 800c07a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c07c:	e291      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c07e:	4b2f      	ldr	r3, [pc, #188]	; (800c13c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c086:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c08a:	d107      	bne.n	800c09c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c08c:	f107 0318 	add.w	r3, r7, #24
 800c090:	4618      	mov	r0, r3
 800c092:	f000 faa9 	bl	800c5e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c096:	69bb      	ldr	r3, [r7, #24]
 800c098:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c09a:	e282      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c09c:	2300      	movs	r3, #0
 800c09e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0a0:	e27f      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c0a2:	4b26      	ldr	r3, [pc, #152]	; (800c13c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c0aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0ae:	d107      	bne.n	800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0b0:	f107 030c 	add.w	r3, r7, #12
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f000 fbeb 	bl	800c890 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0be:	e270      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0c4:	e26d      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c0c6:	4b1d      	ldr	r3, [pc, #116]	; (800c13c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c0c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c0ce:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c0d0:	4b1a      	ldr	r3, [pc, #104]	; (800c13c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	f003 0304 	and.w	r3, r3, #4
 800c0d8:	2b04      	cmp	r3, #4
 800c0da:	d10c      	bne.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800c0dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d109      	bne.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c0e2:	4b16      	ldr	r3, [pc, #88]	; (800c13c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	08db      	lsrs	r3, r3, #3
 800c0e8:	f003 0303 	and.w	r3, r3, #3
 800c0ec:	4a14      	ldr	r2, [pc, #80]	; (800c140 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c0ee:	fa22 f303 	lsr.w	r3, r2, r3
 800c0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0f4:	e01e      	b.n	800c134 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c0f6:	4b11      	ldr	r3, [pc, #68]	; (800c13c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c102:	d106      	bne.n	800c112 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800c104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c106:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c10a:	d102      	bne.n	800c112 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c10c:	4b0d      	ldr	r3, [pc, #52]	; (800c144 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c10e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c110:	e010      	b.n	800c134 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c112:	4b0a      	ldr	r3, [pc, #40]	; (800c13c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c11a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c11e:	d106      	bne.n	800c12e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800c120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c122:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c126:	d102      	bne.n	800c12e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c128:	4b07      	ldr	r3, [pc, #28]	; (800c148 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c12a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c12c:	e002      	b.n	800c134 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c12e:	2300      	movs	r3, #0
 800c130:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c132:	e236      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c134:	e235      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c136:	4b05      	ldr	r3, [pc, #20]	; (800c14c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c138:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c13a:	e232      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c13c:	58024400 	.word	0x58024400
 800c140:	03d09000 	.word	0x03d09000
 800c144:	003d0900 	.word	0x003d0900
 800c148:	02faf080 	.word	0x02faf080
 800c14c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800c150:	2300      	movs	r3, #0
 800c152:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c154:	e225      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c156:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c15a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c15e:	430b      	orrs	r3, r1
 800c160:	f040 8085 	bne.w	800c26e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c164:	4b9c      	ldr	r3, [pc, #624]	; (800c3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c168:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c16c:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c170:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c174:	d06b      	beq.n	800c24e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800c176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c178:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c17c:	d874      	bhi.n	800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c180:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c184:	d056      	beq.n	800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800c186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c188:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c18c:	d86c      	bhi.n	800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c190:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c194:	d03b      	beq.n	800c20e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800c196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c198:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c19c:	d864      	bhi.n	800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1a4:	d021      	beq.n	800c1ea <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800c1a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1ac:	d85c      	bhi.n	800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d004      	beq.n	800c1be <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800c1b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1ba:	d004      	beq.n	800c1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800c1bc:	e054      	b.n	800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c1be:	f7fe fb5f 	bl	800a880 <HAL_RCC_GetPCLK1Freq>
 800c1c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c1c4:	e1ed      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c1c6:	4b84      	ldr	r3, [pc, #528]	; (800c3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c1ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c1d2:	d107      	bne.n	800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1d4:	f107 0318 	add.w	r3, r7, #24
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f000 fa05 	bl	800c5e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c1de:	69fb      	ldr	r3, [r7, #28]
 800c1e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1e2:	e1de      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1e8:	e1db      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c1ea:	4b7b      	ldr	r3, [pc, #492]	; (800c3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c1f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1f6:	d107      	bne.n	800c208 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1f8:	f107 030c 	add.w	r3, r7, #12
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f000 fb47 	bl	800c890 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c202:	693b      	ldr	r3, [r7, #16]
 800c204:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c206:	e1cc      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c208:	2300      	movs	r3, #0
 800c20a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c20c:	e1c9      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c20e:	4b72      	ldr	r3, [pc, #456]	; (800c3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f003 0304 	and.w	r3, r3, #4
 800c216:	2b04      	cmp	r3, #4
 800c218:	d109      	bne.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c21a:	4b6f      	ldr	r3, [pc, #444]	; (800c3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	08db      	lsrs	r3, r3, #3
 800c220:	f003 0303 	and.w	r3, r3, #3
 800c224:	4a6d      	ldr	r2, [pc, #436]	; (800c3dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c226:	fa22 f303 	lsr.w	r3, r2, r3
 800c22a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c22c:	e1b9      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c22e:	2300      	movs	r3, #0
 800c230:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c232:	e1b6      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c234:	4b68      	ldr	r3, [pc, #416]	; (800c3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c23c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c240:	d102      	bne.n	800c248 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800c242:	4b67      	ldr	r3, [pc, #412]	; (800c3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c244:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c246:	e1ac      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c248:	2300      	movs	r3, #0
 800c24a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c24c:	e1a9      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c24e:	4b62      	ldr	r3, [pc, #392]	; (800c3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c256:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c25a:	d102      	bne.n	800c262 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800c25c:	4b61      	ldr	r3, [pc, #388]	; (800c3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c25e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c260:	e19f      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c262:	2300      	movs	r3, #0
 800c264:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c266:	e19c      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c268:	2300      	movs	r3, #0
 800c26a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c26c:	e199      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c26e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c272:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c276:	430b      	orrs	r3, r1
 800c278:	d173      	bne.n	800c362 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c27a:	4b57      	ldr	r3, [pc, #348]	; (800c3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c27c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c27e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c282:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c286:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c28a:	d02f      	beq.n	800c2ec <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800c28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c28e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c292:	d863      	bhi.n	800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800c294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c296:	2b00      	cmp	r3, #0
 800c298:	d004      	beq.n	800c2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800c29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c29c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2a0:	d012      	beq.n	800c2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800c2a2:	e05b      	b.n	800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c2a4:	4b4c      	ldr	r3, [pc, #304]	; (800c3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2b0:	d107      	bne.n	800c2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2b2:	f107 0318 	add.w	r3, r7, #24
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f000 f996 	bl	800c5e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c2bc:	69bb      	ldr	r3, [r7, #24]
 800c2be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2c0:	e16f      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2c6:	e16c      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c2c8:	4b43      	ldr	r3, [pc, #268]	; (800c3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c2d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2d4:	d107      	bne.n	800c2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c2d6:	f107 030c 	add.w	r3, r7, #12
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f000 fad8 	bl	800c890 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c2e0:	697b      	ldr	r3, [r7, #20]
 800c2e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2e4:	e15d      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2ea:	e15a      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c2ec:	4b3a      	ldr	r3, [pc, #232]	; (800c3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c2ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c2f4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c2f6:	4b38      	ldr	r3, [pc, #224]	; (800c3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f003 0304 	and.w	r3, r3, #4
 800c2fe:	2b04      	cmp	r3, #4
 800c300:	d10c      	bne.n	800c31c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800c302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c304:	2b00      	cmp	r3, #0
 800c306:	d109      	bne.n	800c31c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c308:	4b33      	ldr	r3, [pc, #204]	; (800c3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	08db      	lsrs	r3, r3, #3
 800c30e:	f003 0303 	and.w	r3, r3, #3
 800c312:	4a32      	ldr	r2, [pc, #200]	; (800c3dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c314:	fa22 f303 	lsr.w	r3, r2, r3
 800c318:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c31a:	e01e      	b.n	800c35a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c31c:	4b2e      	ldr	r3, [pc, #184]	; (800c3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c324:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c328:	d106      	bne.n	800c338 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800c32a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c32c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c330:	d102      	bne.n	800c338 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c332:	4b2b      	ldr	r3, [pc, #172]	; (800c3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c334:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c336:	e010      	b.n	800c35a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c338:	4b27      	ldr	r3, [pc, #156]	; (800c3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c340:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c344:	d106      	bne.n	800c354 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800c346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c348:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c34c:	d102      	bne.n	800c354 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c34e:	4b25      	ldr	r3, [pc, #148]	; (800c3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c350:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c352:	e002      	b.n	800c35a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c354:	2300      	movs	r3, #0
 800c356:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c358:	e123      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c35a:	e122      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c35c:	2300      	movs	r3, #0
 800c35e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c360:	e11f      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c362:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c366:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c36a:	430b      	orrs	r3, r1
 800c36c:	d13c      	bne.n	800c3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c36e:	4b1a      	ldr	r3, [pc, #104]	; (800c3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c376:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d004      	beq.n	800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800c37e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c384:	d012      	beq.n	800c3ac <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800c386:	e023      	b.n	800c3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c388:	4b13      	ldr	r3, [pc, #76]	; (800c3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c390:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c394:	d107      	bne.n	800c3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c396:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c39a:	4618      	mov	r0, r3
 800c39c:	f000 fbcc 	bl	800cb38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3a4:	e0fd      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3aa:	e0fa      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c3ac:	4b0a      	ldr	r3, [pc, #40]	; (800c3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c3b8:	d107      	bne.n	800c3ca <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3ba:	f107 0318 	add.w	r3, r7, #24
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f000 f912 	bl	800c5e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c3c4:	6a3b      	ldr	r3, [r7, #32]
 800c3c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3c8:	e0eb      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3ce:	e0e8      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3d4:	e0e5      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c3d6:	bf00      	nop
 800c3d8:	58024400 	.word	0x58024400
 800c3dc:	03d09000 	.word	0x03d09000
 800c3e0:	003d0900 	.word	0x003d0900
 800c3e4:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c3e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3ec:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c3f0:	430b      	orrs	r3, r1
 800c3f2:	f040 8085 	bne.w	800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c3f6:	4b6d      	ldr	r3, [pc, #436]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c3f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3fa:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c3fe:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c402:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c406:	d06b      	beq.n	800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800c408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c40a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c40e:	d874      	bhi.n	800c4fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c416:	d056      	beq.n	800c4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800c418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c41a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c41e:	d86c      	bhi.n	800c4fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c422:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c426:	d03b      	beq.n	800c4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800c428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c42a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c42e:	d864      	bhi.n	800c4fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c432:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c436:	d021      	beq.n	800c47c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c43a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c43e:	d85c      	bhi.n	800c4fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c442:	2b00      	cmp	r3, #0
 800c444:	d004      	beq.n	800c450 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800c446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c448:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c44c:	d004      	beq.n	800c458 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800c44e:	e054      	b.n	800c4fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c450:	f000 f8b4 	bl	800c5bc <HAL_RCCEx_GetD3PCLK1Freq>
 800c454:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c456:	e0a4      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c458:	4b54      	ldr	r3, [pc, #336]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c460:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c464:	d107      	bne.n	800c476 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c466:	f107 0318 	add.w	r3, r7, #24
 800c46a:	4618      	mov	r0, r3
 800c46c:	f000 f8bc 	bl	800c5e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c470:	69fb      	ldr	r3, [r7, #28]
 800c472:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c474:	e095      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c476:	2300      	movs	r3, #0
 800c478:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c47a:	e092      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c47c:	4b4b      	ldr	r3, [pc, #300]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c484:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c488:	d107      	bne.n	800c49a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c48a:	f107 030c 	add.w	r3, r7, #12
 800c48e:	4618      	mov	r0, r3
 800c490:	f000 f9fe 	bl	800c890 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c494:	693b      	ldr	r3, [r7, #16]
 800c496:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c498:	e083      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c49a:	2300      	movs	r3, #0
 800c49c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c49e:	e080      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c4a0:	4b42      	ldr	r3, [pc, #264]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	f003 0304 	and.w	r3, r3, #4
 800c4a8:	2b04      	cmp	r3, #4
 800c4aa:	d109      	bne.n	800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c4ac:	4b3f      	ldr	r3, [pc, #252]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	08db      	lsrs	r3, r3, #3
 800c4b2:	f003 0303 	and.w	r3, r3, #3
 800c4b6:	4a3e      	ldr	r2, [pc, #248]	; (800c5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c4b8:	fa22 f303 	lsr.w	r3, r2, r3
 800c4bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4be:	e070      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4c4:	e06d      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c4c6:	4b39      	ldr	r3, [pc, #228]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4d2:	d102      	bne.n	800c4da <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800c4d4:	4b37      	ldr	r3, [pc, #220]	; (800c5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4d8:	e063      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4de:	e060      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c4e0:	4b32      	ldr	r3, [pc, #200]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4ec:	d102      	bne.n	800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800c4ee:	4b32      	ldr	r3, [pc, #200]	; (800c5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c4f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4f2:	e056      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4f8:	e053      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4fe:	e050      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c500:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c504:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c508:	430b      	orrs	r3, r1
 800c50a:	d148      	bne.n	800c59e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c50c:	4b27      	ldr	r3, [pc, #156]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c50e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c510:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c514:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c518:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c51c:	d02a      	beq.n	800c574 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c520:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c524:	d838      	bhi.n	800c598 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d004      	beq.n	800c536 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c52e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c532:	d00d      	beq.n	800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c534:	e030      	b.n	800c598 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c536:	4b1d      	ldr	r3, [pc, #116]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c53e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c542:	d102      	bne.n	800c54a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800c544:	4b1c      	ldr	r3, [pc, #112]	; (800c5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c546:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c548:	e02b      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c54a:	2300      	movs	r3, #0
 800c54c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c54e:	e028      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c550:	4b16      	ldr	r3, [pc, #88]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c558:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c55c:	d107      	bne.n	800c56e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c55e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c562:	4618      	mov	r0, r3
 800c564:	f000 fae8 	bl	800cb38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c56a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c56c:	e019      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c56e:	2300      	movs	r3, #0
 800c570:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c572:	e016      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c574:	4b0d      	ldr	r3, [pc, #52]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c57c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c580:	d107      	bne.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c582:	f107 0318 	add.w	r3, r7, #24
 800c586:	4618      	mov	r0, r3
 800c588:	f000 f82e 	bl	800c5e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c58c:	69fb      	ldr	r3, [r7, #28]
 800c58e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c590:	e007      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c592:	2300      	movs	r3, #0
 800c594:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c596:	e004      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c598:	2300      	movs	r3, #0
 800c59a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c59c:	e001      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c5a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3740      	adds	r7, #64	; 0x40
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}
 800c5ac:	58024400 	.word	0x58024400
 800c5b0:	03d09000 	.word	0x03d09000
 800c5b4:	003d0900 	.word	0x003d0900
 800c5b8:	02faf080 	.word	0x02faf080

0800c5bc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c5c0:	f7fe f92e 	bl	800a820 <HAL_RCC_GetHCLKFreq>
 800c5c4:	4602      	mov	r2, r0
 800c5c6:	4b06      	ldr	r3, [pc, #24]	; (800c5e0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c5c8:	6a1b      	ldr	r3, [r3, #32]
 800c5ca:	091b      	lsrs	r3, r3, #4
 800c5cc:	f003 0307 	and.w	r3, r3, #7
 800c5d0:	4904      	ldr	r1, [pc, #16]	; (800c5e4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c5d2:	5ccb      	ldrb	r3, [r1, r3]
 800c5d4:	f003 031f 	and.w	r3, r3, #31
 800c5d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	bd80      	pop	{r7, pc}
 800c5e0:	58024400 	.word	0x58024400
 800c5e4:	08018628 	.word	0x08018628

0800c5e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c5e8:	b480      	push	{r7}
 800c5ea:	b089      	sub	sp, #36	; 0x24
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c5f0:	4ba1      	ldr	r3, [pc, #644]	; (800c878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5f4:	f003 0303 	and.w	r3, r3, #3
 800c5f8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c5fa:	4b9f      	ldr	r3, [pc, #636]	; (800c878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5fe:	0b1b      	lsrs	r3, r3, #12
 800c600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c604:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c606:	4b9c      	ldr	r3, [pc, #624]	; (800c878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c60a:	091b      	lsrs	r3, r3, #4
 800c60c:	f003 0301 	and.w	r3, r3, #1
 800c610:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c612:	4b99      	ldr	r3, [pc, #612]	; (800c878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c616:	08db      	lsrs	r3, r3, #3
 800c618:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c61c:	693a      	ldr	r2, [r7, #16]
 800c61e:	fb02 f303 	mul.w	r3, r2, r3
 800c622:	ee07 3a90 	vmov	s15, r3
 800c626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c62a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	2b00      	cmp	r3, #0
 800c632:	f000 8111 	beq.w	800c858 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c636:	69bb      	ldr	r3, [r7, #24]
 800c638:	2b02      	cmp	r3, #2
 800c63a:	f000 8083 	beq.w	800c744 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c63e:	69bb      	ldr	r3, [r7, #24]
 800c640:	2b02      	cmp	r3, #2
 800c642:	f200 80a1 	bhi.w	800c788 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c646:	69bb      	ldr	r3, [r7, #24]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d003      	beq.n	800c654 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c64c:	69bb      	ldr	r3, [r7, #24]
 800c64e:	2b01      	cmp	r3, #1
 800c650:	d056      	beq.n	800c700 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c652:	e099      	b.n	800c788 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c654:	4b88      	ldr	r3, [pc, #544]	; (800c878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f003 0320 	and.w	r3, r3, #32
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d02d      	beq.n	800c6bc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c660:	4b85      	ldr	r3, [pc, #532]	; (800c878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	08db      	lsrs	r3, r3, #3
 800c666:	f003 0303 	and.w	r3, r3, #3
 800c66a:	4a84      	ldr	r2, [pc, #528]	; (800c87c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c66c:	fa22 f303 	lsr.w	r3, r2, r3
 800c670:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	ee07 3a90 	vmov	s15, r3
 800c678:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	ee07 3a90 	vmov	s15, r3
 800c682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c68a:	4b7b      	ldr	r3, [pc, #492]	; (800c878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c68c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c68e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c692:	ee07 3a90 	vmov	s15, r3
 800c696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c69a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c69e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c880 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c6a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c6ba:	e087      	b.n	800c7cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	ee07 3a90 	vmov	s15, r3
 800c6c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c884 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c6ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6ce:	4b6a      	ldr	r3, [pc, #424]	; (800c878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6d6:	ee07 3a90 	vmov	s15, r3
 800c6da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6de:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c880 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c6e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c6fe:	e065      	b.n	800c7cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c700:	697b      	ldr	r3, [r7, #20]
 800c702:	ee07 3a90 	vmov	s15, r3
 800c706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c70a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c888 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c70e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c712:	4b59      	ldr	r3, [pc, #356]	; (800c878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c71a:	ee07 3a90 	vmov	s15, r3
 800c71e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c722:	ed97 6a03 	vldr	s12, [r7, #12]
 800c726:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c880 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c72a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c72e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c732:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c73a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c73e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c742:	e043      	b.n	800c7cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	ee07 3a90 	vmov	s15, r3
 800c74a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c74e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c88c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c756:	4b48      	ldr	r3, [pc, #288]	; (800c878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c75a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c75e:	ee07 3a90 	vmov	s15, r3
 800c762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c766:	ed97 6a03 	vldr	s12, [r7, #12]
 800c76a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c880 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c76e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c776:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c77a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c77e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c782:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c786:	e021      	b.n	800c7cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	ee07 3a90 	vmov	s15, r3
 800c78e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c792:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c888 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c79a:	4b37      	ldr	r3, [pc, #220]	; (800c878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c79c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c79e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7a2:	ee07 3a90 	vmov	s15, r3
 800c7a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7ae:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c880 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c7b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c7ca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c7cc:	4b2a      	ldr	r3, [pc, #168]	; (800c878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7d0:	0a5b      	lsrs	r3, r3, #9
 800c7d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7d6:	ee07 3a90 	vmov	s15, r3
 800c7da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c7e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c7e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c7ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c7ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7f2:	ee17 2a90 	vmov	r2, s15
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c7fa:	4b1f      	ldr	r3, [pc, #124]	; (800c878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7fe:	0c1b      	lsrs	r3, r3, #16
 800c800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c804:	ee07 3a90 	vmov	s15, r3
 800c808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c80c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c810:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c814:	edd7 6a07 	vldr	s13, [r7, #28]
 800c818:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c81c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c820:	ee17 2a90 	vmov	r2, s15
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c828:	4b13      	ldr	r3, [pc, #76]	; (800c878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c82a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c82c:	0e1b      	lsrs	r3, r3, #24
 800c82e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c832:	ee07 3a90 	vmov	s15, r3
 800c836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c83a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c83e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c842:	edd7 6a07 	vldr	s13, [r7, #28]
 800c846:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c84a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c84e:	ee17 2a90 	vmov	r2, s15
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c856:	e008      	b.n	800c86a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2200      	movs	r2, #0
 800c85c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2200      	movs	r2, #0
 800c862:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2200      	movs	r2, #0
 800c868:	609a      	str	r2, [r3, #8]
}
 800c86a:	bf00      	nop
 800c86c:	3724      	adds	r7, #36	; 0x24
 800c86e:	46bd      	mov	sp, r7
 800c870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c874:	4770      	bx	lr
 800c876:	bf00      	nop
 800c878:	58024400 	.word	0x58024400
 800c87c:	03d09000 	.word	0x03d09000
 800c880:	46000000 	.word	0x46000000
 800c884:	4c742400 	.word	0x4c742400
 800c888:	4a742400 	.word	0x4a742400
 800c88c:	4c3ebc20 	.word	0x4c3ebc20

0800c890 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c890:	b480      	push	{r7}
 800c892:	b089      	sub	sp, #36	; 0x24
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c898:	4ba1      	ldr	r3, [pc, #644]	; (800cb20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c89a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c89c:	f003 0303 	and.w	r3, r3, #3
 800c8a0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c8a2:	4b9f      	ldr	r3, [pc, #636]	; (800cb20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8a6:	0d1b      	lsrs	r3, r3, #20
 800c8a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c8ae:	4b9c      	ldr	r3, [pc, #624]	; (800cb20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8b2:	0a1b      	lsrs	r3, r3, #8
 800c8b4:	f003 0301 	and.w	r3, r3, #1
 800c8b8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c8ba:	4b99      	ldr	r3, [pc, #612]	; (800cb20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8be:	08db      	lsrs	r3, r3, #3
 800c8c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c8c4:	693a      	ldr	r2, [r7, #16]
 800c8c6:	fb02 f303 	mul.w	r3, r2, r3
 800c8ca:	ee07 3a90 	vmov	s15, r3
 800c8ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	f000 8111 	beq.w	800cb00 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c8de:	69bb      	ldr	r3, [r7, #24]
 800c8e0:	2b02      	cmp	r3, #2
 800c8e2:	f000 8083 	beq.w	800c9ec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c8e6:	69bb      	ldr	r3, [r7, #24]
 800c8e8:	2b02      	cmp	r3, #2
 800c8ea:	f200 80a1 	bhi.w	800ca30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c8ee:	69bb      	ldr	r3, [r7, #24]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d003      	beq.n	800c8fc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c8f4:	69bb      	ldr	r3, [r7, #24]
 800c8f6:	2b01      	cmp	r3, #1
 800c8f8:	d056      	beq.n	800c9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c8fa:	e099      	b.n	800ca30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c8fc:	4b88      	ldr	r3, [pc, #544]	; (800cb20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f003 0320 	and.w	r3, r3, #32
 800c904:	2b00      	cmp	r3, #0
 800c906:	d02d      	beq.n	800c964 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c908:	4b85      	ldr	r3, [pc, #532]	; (800cb20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	08db      	lsrs	r3, r3, #3
 800c90e:	f003 0303 	and.w	r3, r3, #3
 800c912:	4a84      	ldr	r2, [pc, #528]	; (800cb24 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c914:	fa22 f303 	lsr.w	r3, r2, r3
 800c918:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c91a:	68bb      	ldr	r3, [r7, #8]
 800c91c:	ee07 3a90 	vmov	s15, r3
 800c920:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c924:	697b      	ldr	r3, [r7, #20]
 800c926:	ee07 3a90 	vmov	s15, r3
 800c92a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c92e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c932:	4b7b      	ldr	r3, [pc, #492]	; (800cb20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c93a:	ee07 3a90 	vmov	s15, r3
 800c93e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c942:	ed97 6a03 	vldr	s12, [r7, #12]
 800c946:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cb28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c94a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c94e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c95a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c95e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c962:	e087      	b.n	800ca74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	ee07 3a90 	vmov	s15, r3
 800c96a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c96e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cb2c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c976:	4b6a      	ldr	r3, [pc, #424]	; (800cb20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c97a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c97e:	ee07 3a90 	vmov	s15, r3
 800c982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c986:	ed97 6a03 	vldr	s12, [r7, #12]
 800c98a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cb28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c98e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c99a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c99e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9a6:	e065      	b.n	800ca74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c9a8:	697b      	ldr	r3, [r7, #20]
 800c9aa:	ee07 3a90 	vmov	s15, r3
 800c9ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cb30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c9b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9ba:	4b59      	ldr	r3, [pc, #356]	; (800cb20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9c2:	ee07 3a90 	vmov	s15, r3
 800c9c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cb28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c9d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9ea:	e043      	b.n	800ca74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c9ec:	697b      	ldr	r3, [r7, #20]
 800c9ee:	ee07 3a90 	vmov	s15, r3
 800c9f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cb34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c9fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9fe:	4b48      	ldr	r3, [pc, #288]	; (800cb20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca06:	ee07 3a90 	vmov	s15, r3
 800ca0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca12:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cb28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ca16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca2e:	e021      	b.n	800ca74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	ee07 3a90 	vmov	s15, r3
 800ca36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca3a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cb30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ca3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca42:	4b37      	ldr	r3, [pc, #220]	; (800cb20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca4a:	ee07 3a90 	vmov	s15, r3
 800ca4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca52:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca56:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cb28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ca5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca72:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ca74:	4b2a      	ldr	r3, [pc, #168]	; (800cb20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca78:	0a5b      	lsrs	r3, r3, #9
 800ca7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca7e:	ee07 3a90 	vmov	s15, r3
 800ca82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca8e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca9a:	ee17 2a90 	vmov	r2, s15
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800caa2:	4b1f      	ldr	r3, [pc, #124]	; (800cb20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800caa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caa6:	0c1b      	lsrs	r3, r3, #16
 800caa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800caac:	ee07 3a90 	vmov	s15, r3
 800cab0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cab4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cab8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cabc:	edd7 6a07 	vldr	s13, [r7, #28]
 800cac0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cac4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cac8:	ee17 2a90 	vmov	r2, s15
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800cad0:	4b13      	ldr	r3, [pc, #76]	; (800cb20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cad4:	0e1b      	lsrs	r3, r3, #24
 800cad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cada:	ee07 3a90 	vmov	s15, r3
 800cade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cae2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cae6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800caea:	edd7 6a07 	vldr	s13, [r7, #28]
 800caee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800caf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800caf6:	ee17 2a90 	vmov	r2, s15
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cafe:	e008      	b.n	800cb12 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2200      	movs	r2, #0
 800cb04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2200      	movs	r2, #0
 800cb10:	609a      	str	r2, [r3, #8]
}
 800cb12:	bf00      	nop
 800cb14:	3724      	adds	r7, #36	; 0x24
 800cb16:	46bd      	mov	sp, r7
 800cb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1c:	4770      	bx	lr
 800cb1e:	bf00      	nop
 800cb20:	58024400 	.word	0x58024400
 800cb24:	03d09000 	.word	0x03d09000
 800cb28:	46000000 	.word	0x46000000
 800cb2c:	4c742400 	.word	0x4c742400
 800cb30:	4a742400 	.word	0x4a742400
 800cb34:	4c3ebc20 	.word	0x4c3ebc20

0800cb38 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b089      	sub	sp, #36	; 0x24
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cb40:	4ba0      	ldr	r3, [pc, #640]	; (800cdc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb44:	f003 0303 	and.w	r3, r3, #3
 800cb48:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800cb4a:	4b9e      	ldr	r3, [pc, #632]	; (800cdc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb4e:	091b      	lsrs	r3, r3, #4
 800cb50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb54:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cb56:	4b9b      	ldr	r3, [pc, #620]	; (800cdc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb5a:	f003 0301 	and.w	r3, r3, #1
 800cb5e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cb60:	4b98      	ldr	r3, [pc, #608]	; (800cdc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb64:	08db      	lsrs	r3, r3, #3
 800cb66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cb6a:	693a      	ldr	r2, [r7, #16]
 800cb6c:	fb02 f303 	mul.w	r3, r2, r3
 800cb70:	ee07 3a90 	vmov	s15, r3
 800cb74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb78:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800cb7c:	697b      	ldr	r3, [r7, #20]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	f000 8111 	beq.w	800cda6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800cb84:	69bb      	ldr	r3, [r7, #24]
 800cb86:	2b02      	cmp	r3, #2
 800cb88:	f000 8083 	beq.w	800cc92 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cb8c:	69bb      	ldr	r3, [r7, #24]
 800cb8e:	2b02      	cmp	r3, #2
 800cb90:	f200 80a1 	bhi.w	800ccd6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800cb94:	69bb      	ldr	r3, [r7, #24]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d003      	beq.n	800cba2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800cb9a:	69bb      	ldr	r3, [r7, #24]
 800cb9c:	2b01      	cmp	r3, #1
 800cb9e:	d056      	beq.n	800cc4e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800cba0:	e099      	b.n	800ccd6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cba2:	4b88      	ldr	r3, [pc, #544]	; (800cdc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	f003 0320 	and.w	r3, r3, #32
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d02d      	beq.n	800cc0a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cbae:	4b85      	ldr	r3, [pc, #532]	; (800cdc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	08db      	lsrs	r3, r3, #3
 800cbb4:	f003 0303 	and.w	r3, r3, #3
 800cbb8:	4a83      	ldr	r2, [pc, #524]	; (800cdc8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800cbba:	fa22 f303 	lsr.w	r3, r2, r3
 800cbbe:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	ee07 3a90 	vmov	s15, r3
 800cbc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbca:	697b      	ldr	r3, [r7, #20]
 800cbcc:	ee07 3a90 	vmov	s15, r3
 800cbd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbd8:	4b7a      	ldr	r3, [pc, #488]	; (800cdc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cbda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbe0:	ee07 3a90 	vmov	s15, r3
 800cbe4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbe8:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbec:	eddf 5a77 	vldr	s11, [pc, #476]	; 800cdcc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cbf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbf8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc04:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cc08:	e087      	b.n	800cd1a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	ee07 3a90 	vmov	s15, r3
 800cc10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc14:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800cdd0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cc18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc1c:	4b69      	ldr	r3, [pc, #420]	; (800cdc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc24:	ee07 3a90 	vmov	s15, r3
 800cc28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc2c:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc30:	eddf 5a66 	vldr	s11, [pc, #408]	; 800cdcc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cc34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc48:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc4c:	e065      	b.n	800cd1a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	ee07 3a90 	vmov	s15, r3
 800cc54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc58:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800cdd4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800cc5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc60:	4b58      	ldr	r3, [pc, #352]	; (800cdc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc68:	ee07 3a90 	vmov	s15, r3
 800cc6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc70:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc74:	eddf 5a55 	vldr	s11, [pc, #340]	; 800cdcc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cc78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc8c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc90:	e043      	b.n	800cd1a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	ee07 3a90 	vmov	s15, r3
 800cc98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc9c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800cdd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800cca0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cca4:	4b47      	ldr	r3, [pc, #284]	; (800cdc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccac:	ee07 3a90 	vmov	s15, r3
 800ccb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccb4:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccb8:	eddf 5a44 	vldr	s11, [pc, #272]	; 800cdcc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ccbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cccc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccd0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ccd4:	e021      	b.n	800cd1a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ccd6:	697b      	ldr	r3, [r7, #20]
 800ccd8:	ee07 3a90 	vmov	s15, r3
 800ccdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cce0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800cdd0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cce4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cce8:	4b36      	ldr	r3, [pc, #216]	; (800cdc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ccea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccf0:	ee07 3a90 	vmov	s15, r3
 800ccf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccf8:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccfc:	eddf 5a33 	vldr	s11, [pc, #204]	; 800cdcc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cd00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd14:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd18:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800cd1a:	4b2a      	ldr	r3, [pc, #168]	; (800cdc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd1e:	0a5b      	lsrs	r3, r3, #9
 800cd20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd24:	ee07 3a90 	vmov	s15, r3
 800cd28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd30:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd34:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd40:	ee17 2a90 	vmov	r2, s15
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800cd48:	4b1e      	ldr	r3, [pc, #120]	; (800cdc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd4c:	0c1b      	lsrs	r3, r3, #16
 800cd4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd52:	ee07 3a90 	vmov	s15, r3
 800cd56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd62:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd6e:	ee17 2a90 	vmov	r2, s15
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800cd76:	4b13      	ldr	r3, [pc, #76]	; (800cdc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd7a:	0e1b      	lsrs	r3, r3, #24
 800cd7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd80:	ee07 3a90 	vmov	s15, r3
 800cd84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd90:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd9c:	ee17 2a90 	vmov	r2, s15
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800cda4:	e008      	b.n	800cdb8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	2200      	movs	r2, #0
 800cdaa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2200      	movs	r2, #0
 800cdb0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	609a      	str	r2, [r3, #8]
}
 800cdb8:	bf00      	nop
 800cdba:	3724      	adds	r7, #36	; 0x24
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc2:	4770      	bx	lr
 800cdc4:	58024400 	.word	0x58024400
 800cdc8:	03d09000 	.word	0x03d09000
 800cdcc:	46000000 	.word	0x46000000
 800cdd0:	4c742400 	.word	0x4c742400
 800cdd4:	4a742400 	.word	0x4a742400
 800cdd8:	4c3ebc20 	.word	0x4c3ebc20

0800cddc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b084      	sub	sp, #16
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
 800cde4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cde6:	2300      	movs	r3, #0
 800cde8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cdea:	4b53      	ldr	r3, [pc, #332]	; (800cf38 <RCCEx_PLL2_Config+0x15c>)
 800cdec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdee:	f003 0303 	and.w	r3, r3, #3
 800cdf2:	2b03      	cmp	r3, #3
 800cdf4:	d101      	bne.n	800cdfa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	e099      	b.n	800cf2e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cdfa:	4b4f      	ldr	r3, [pc, #316]	; (800cf38 <RCCEx_PLL2_Config+0x15c>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	4a4e      	ldr	r2, [pc, #312]	; (800cf38 <RCCEx_PLL2_Config+0x15c>)
 800ce00:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ce04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce06:	f7f6 fe7b 	bl	8003b00 <HAL_GetTick>
 800ce0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ce0c:	e008      	b.n	800ce20 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ce0e:	f7f6 fe77 	bl	8003b00 <HAL_GetTick>
 800ce12:	4602      	mov	r2, r0
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	1ad3      	subs	r3, r2, r3
 800ce18:	2b02      	cmp	r3, #2
 800ce1a:	d901      	bls.n	800ce20 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ce1c:	2303      	movs	r3, #3
 800ce1e:	e086      	b.n	800cf2e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ce20:	4b45      	ldr	r3, [pc, #276]	; (800cf38 <RCCEx_PLL2_Config+0x15c>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d1f0      	bne.n	800ce0e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ce2c:	4b42      	ldr	r3, [pc, #264]	; (800cf38 <RCCEx_PLL2_Config+0x15c>)
 800ce2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce30:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	031b      	lsls	r3, r3, #12
 800ce3a:	493f      	ldr	r1, [pc, #252]	; (800cf38 <RCCEx_PLL2_Config+0x15c>)
 800ce3c:	4313      	orrs	r3, r2
 800ce3e:	628b      	str	r3, [r1, #40]	; 0x28
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	3b01      	subs	r3, #1
 800ce46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	689b      	ldr	r3, [r3, #8]
 800ce4e:	3b01      	subs	r3, #1
 800ce50:	025b      	lsls	r3, r3, #9
 800ce52:	b29b      	uxth	r3, r3
 800ce54:	431a      	orrs	r2, r3
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	68db      	ldr	r3, [r3, #12]
 800ce5a:	3b01      	subs	r3, #1
 800ce5c:	041b      	lsls	r3, r3, #16
 800ce5e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ce62:	431a      	orrs	r2, r3
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	691b      	ldr	r3, [r3, #16]
 800ce68:	3b01      	subs	r3, #1
 800ce6a:	061b      	lsls	r3, r3, #24
 800ce6c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ce70:	4931      	ldr	r1, [pc, #196]	; (800cf38 <RCCEx_PLL2_Config+0x15c>)
 800ce72:	4313      	orrs	r3, r2
 800ce74:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ce76:	4b30      	ldr	r3, [pc, #192]	; (800cf38 <RCCEx_PLL2_Config+0x15c>)
 800ce78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce7a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	695b      	ldr	r3, [r3, #20]
 800ce82:	492d      	ldr	r1, [pc, #180]	; (800cf38 <RCCEx_PLL2_Config+0x15c>)
 800ce84:	4313      	orrs	r3, r2
 800ce86:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ce88:	4b2b      	ldr	r3, [pc, #172]	; (800cf38 <RCCEx_PLL2_Config+0x15c>)
 800ce8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce8c:	f023 0220 	bic.w	r2, r3, #32
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	699b      	ldr	r3, [r3, #24]
 800ce94:	4928      	ldr	r1, [pc, #160]	; (800cf38 <RCCEx_PLL2_Config+0x15c>)
 800ce96:	4313      	orrs	r3, r2
 800ce98:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ce9a:	4b27      	ldr	r3, [pc, #156]	; (800cf38 <RCCEx_PLL2_Config+0x15c>)
 800ce9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce9e:	4a26      	ldr	r2, [pc, #152]	; (800cf38 <RCCEx_PLL2_Config+0x15c>)
 800cea0:	f023 0310 	bic.w	r3, r3, #16
 800cea4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cea6:	4b24      	ldr	r3, [pc, #144]	; (800cf38 <RCCEx_PLL2_Config+0x15c>)
 800cea8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ceaa:	4b24      	ldr	r3, [pc, #144]	; (800cf3c <RCCEx_PLL2_Config+0x160>)
 800ceac:	4013      	ands	r3, r2
 800ceae:	687a      	ldr	r2, [r7, #4]
 800ceb0:	69d2      	ldr	r2, [r2, #28]
 800ceb2:	00d2      	lsls	r2, r2, #3
 800ceb4:	4920      	ldr	r1, [pc, #128]	; (800cf38 <RCCEx_PLL2_Config+0x15c>)
 800ceb6:	4313      	orrs	r3, r2
 800ceb8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ceba:	4b1f      	ldr	r3, [pc, #124]	; (800cf38 <RCCEx_PLL2_Config+0x15c>)
 800cebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cebe:	4a1e      	ldr	r2, [pc, #120]	; (800cf38 <RCCEx_PLL2_Config+0x15c>)
 800cec0:	f043 0310 	orr.w	r3, r3, #16
 800cec4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d106      	bne.n	800ceda <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cecc:	4b1a      	ldr	r3, [pc, #104]	; (800cf38 <RCCEx_PLL2_Config+0x15c>)
 800cece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ced0:	4a19      	ldr	r2, [pc, #100]	; (800cf38 <RCCEx_PLL2_Config+0x15c>)
 800ced2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ced6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ced8:	e00f      	b.n	800cefa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	2b01      	cmp	r3, #1
 800cede:	d106      	bne.n	800ceee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cee0:	4b15      	ldr	r3, [pc, #84]	; (800cf38 <RCCEx_PLL2_Config+0x15c>)
 800cee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cee4:	4a14      	ldr	r2, [pc, #80]	; (800cf38 <RCCEx_PLL2_Config+0x15c>)
 800cee6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ceea:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ceec:	e005      	b.n	800cefa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ceee:	4b12      	ldr	r3, [pc, #72]	; (800cf38 <RCCEx_PLL2_Config+0x15c>)
 800cef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cef2:	4a11      	ldr	r2, [pc, #68]	; (800cf38 <RCCEx_PLL2_Config+0x15c>)
 800cef4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cef8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cefa:	4b0f      	ldr	r3, [pc, #60]	; (800cf38 <RCCEx_PLL2_Config+0x15c>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	4a0e      	ldr	r2, [pc, #56]	; (800cf38 <RCCEx_PLL2_Config+0x15c>)
 800cf00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cf04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf06:	f7f6 fdfb 	bl	8003b00 <HAL_GetTick>
 800cf0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cf0c:	e008      	b.n	800cf20 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cf0e:	f7f6 fdf7 	bl	8003b00 <HAL_GetTick>
 800cf12:	4602      	mov	r2, r0
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	1ad3      	subs	r3, r2, r3
 800cf18:	2b02      	cmp	r3, #2
 800cf1a:	d901      	bls.n	800cf20 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cf1c:	2303      	movs	r3, #3
 800cf1e:	e006      	b.n	800cf2e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cf20:	4b05      	ldr	r3, [pc, #20]	; (800cf38 <RCCEx_PLL2_Config+0x15c>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d0f0      	beq.n	800cf0e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cf2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3710      	adds	r7, #16
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}
 800cf36:	bf00      	nop
 800cf38:	58024400 	.word	0x58024400
 800cf3c:	ffff0007 	.word	0xffff0007

0800cf40 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b084      	sub	sp, #16
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
 800cf48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cf4e:	4b53      	ldr	r3, [pc, #332]	; (800d09c <RCCEx_PLL3_Config+0x15c>)
 800cf50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf52:	f003 0303 	and.w	r3, r3, #3
 800cf56:	2b03      	cmp	r3, #3
 800cf58:	d101      	bne.n	800cf5e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	e099      	b.n	800d092 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cf5e:	4b4f      	ldr	r3, [pc, #316]	; (800d09c <RCCEx_PLL3_Config+0x15c>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	4a4e      	ldr	r2, [pc, #312]	; (800d09c <RCCEx_PLL3_Config+0x15c>)
 800cf64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cf68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf6a:	f7f6 fdc9 	bl	8003b00 <HAL_GetTick>
 800cf6e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cf70:	e008      	b.n	800cf84 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cf72:	f7f6 fdc5 	bl	8003b00 <HAL_GetTick>
 800cf76:	4602      	mov	r2, r0
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	1ad3      	subs	r3, r2, r3
 800cf7c:	2b02      	cmp	r3, #2
 800cf7e:	d901      	bls.n	800cf84 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cf80:	2303      	movs	r3, #3
 800cf82:	e086      	b.n	800d092 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cf84:	4b45      	ldr	r3, [pc, #276]	; (800d09c <RCCEx_PLL3_Config+0x15c>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d1f0      	bne.n	800cf72 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cf90:	4b42      	ldr	r3, [pc, #264]	; (800d09c <RCCEx_PLL3_Config+0x15c>)
 800cf92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf94:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	051b      	lsls	r3, r3, #20
 800cf9e:	493f      	ldr	r1, [pc, #252]	; (800d09c <RCCEx_PLL3_Config+0x15c>)
 800cfa0:	4313      	orrs	r3, r2
 800cfa2:	628b      	str	r3, [r1, #40]	; 0x28
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	685b      	ldr	r3, [r3, #4]
 800cfa8:	3b01      	subs	r3, #1
 800cfaa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	689b      	ldr	r3, [r3, #8]
 800cfb2:	3b01      	subs	r3, #1
 800cfb4:	025b      	lsls	r3, r3, #9
 800cfb6:	b29b      	uxth	r3, r3
 800cfb8:	431a      	orrs	r2, r3
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	68db      	ldr	r3, [r3, #12]
 800cfbe:	3b01      	subs	r3, #1
 800cfc0:	041b      	lsls	r3, r3, #16
 800cfc2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cfc6:	431a      	orrs	r2, r3
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	691b      	ldr	r3, [r3, #16]
 800cfcc:	3b01      	subs	r3, #1
 800cfce:	061b      	lsls	r3, r3, #24
 800cfd0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cfd4:	4931      	ldr	r1, [pc, #196]	; (800d09c <RCCEx_PLL3_Config+0x15c>)
 800cfd6:	4313      	orrs	r3, r2
 800cfd8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cfda:	4b30      	ldr	r3, [pc, #192]	; (800d09c <RCCEx_PLL3_Config+0x15c>)
 800cfdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfde:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	695b      	ldr	r3, [r3, #20]
 800cfe6:	492d      	ldr	r1, [pc, #180]	; (800d09c <RCCEx_PLL3_Config+0x15c>)
 800cfe8:	4313      	orrs	r3, r2
 800cfea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cfec:	4b2b      	ldr	r3, [pc, #172]	; (800d09c <RCCEx_PLL3_Config+0x15c>)
 800cfee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cff0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	699b      	ldr	r3, [r3, #24]
 800cff8:	4928      	ldr	r1, [pc, #160]	; (800d09c <RCCEx_PLL3_Config+0x15c>)
 800cffa:	4313      	orrs	r3, r2
 800cffc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cffe:	4b27      	ldr	r3, [pc, #156]	; (800d09c <RCCEx_PLL3_Config+0x15c>)
 800d000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d002:	4a26      	ldr	r2, [pc, #152]	; (800d09c <RCCEx_PLL3_Config+0x15c>)
 800d004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d008:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d00a:	4b24      	ldr	r3, [pc, #144]	; (800d09c <RCCEx_PLL3_Config+0x15c>)
 800d00c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d00e:	4b24      	ldr	r3, [pc, #144]	; (800d0a0 <RCCEx_PLL3_Config+0x160>)
 800d010:	4013      	ands	r3, r2
 800d012:	687a      	ldr	r2, [r7, #4]
 800d014:	69d2      	ldr	r2, [r2, #28]
 800d016:	00d2      	lsls	r2, r2, #3
 800d018:	4920      	ldr	r1, [pc, #128]	; (800d09c <RCCEx_PLL3_Config+0x15c>)
 800d01a:	4313      	orrs	r3, r2
 800d01c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d01e:	4b1f      	ldr	r3, [pc, #124]	; (800d09c <RCCEx_PLL3_Config+0x15c>)
 800d020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d022:	4a1e      	ldr	r2, [pc, #120]	; (800d09c <RCCEx_PLL3_Config+0x15c>)
 800d024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d028:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d106      	bne.n	800d03e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d030:	4b1a      	ldr	r3, [pc, #104]	; (800d09c <RCCEx_PLL3_Config+0x15c>)
 800d032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d034:	4a19      	ldr	r2, [pc, #100]	; (800d09c <RCCEx_PLL3_Config+0x15c>)
 800d036:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d03a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d03c:	e00f      	b.n	800d05e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	2b01      	cmp	r3, #1
 800d042:	d106      	bne.n	800d052 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d044:	4b15      	ldr	r3, [pc, #84]	; (800d09c <RCCEx_PLL3_Config+0x15c>)
 800d046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d048:	4a14      	ldr	r2, [pc, #80]	; (800d09c <RCCEx_PLL3_Config+0x15c>)
 800d04a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d04e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d050:	e005      	b.n	800d05e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d052:	4b12      	ldr	r3, [pc, #72]	; (800d09c <RCCEx_PLL3_Config+0x15c>)
 800d054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d056:	4a11      	ldr	r2, [pc, #68]	; (800d09c <RCCEx_PLL3_Config+0x15c>)
 800d058:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d05c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d05e:	4b0f      	ldr	r3, [pc, #60]	; (800d09c <RCCEx_PLL3_Config+0x15c>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	4a0e      	ldr	r2, [pc, #56]	; (800d09c <RCCEx_PLL3_Config+0x15c>)
 800d064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d068:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d06a:	f7f6 fd49 	bl	8003b00 <HAL_GetTick>
 800d06e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d070:	e008      	b.n	800d084 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d072:	f7f6 fd45 	bl	8003b00 <HAL_GetTick>
 800d076:	4602      	mov	r2, r0
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	1ad3      	subs	r3, r2, r3
 800d07c:	2b02      	cmp	r3, #2
 800d07e:	d901      	bls.n	800d084 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d080:	2303      	movs	r3, #3
 800d082:	e006      	b.n	800d092 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d084:	4b05      	ldr	r3, [pc, #20]	; (800d09c <RCCEx_PLL3_Config+0x15c>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d0f0      	beq.n	800d072 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d090:	7bfb      	ldrb	r3, [r7, #15]
}
 800d092:	4618      	mov	r0, r3
 800d094:	3710      	adds	r7, #16
 800d096:	46bd      	mov	sp, r7
 800d098:	bd80      	pop	{r7, pc}
 800d09a:	bf00      	nop
 800d09c:	58024400 	.word	0x58024400
 800d0a0:	ffff0007 	.word	0xffff0007

0800d0a4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b08a      	sub	sp, #40	; 0x28
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d101      	bne.n	800d0b6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	e075      	b.n	800d1a2 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d0bc:	b2db      	uxtb	r3, r3
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d105      	bne.n	800d0ce <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f7f5 fe59 	bl	8002d80 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2204      	movs	r2, #4
 800d0d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f000 f868 	bl	800d1ac <HAL_SD_InitCard>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d001      	beq.n	800d0e6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	e05d      	b.n	800d1a2 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800d0e6:	f107 0308 	add.w	r3, r7, #8
 800d0ea:	4619      	mov	r1, r3
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f000 fdaf 	bl	800dc50 <HAL_SD_GetCardStatus>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d001      	beq.n	800d0fc <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	e052      	b.n	800d1a2 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800d0fc:	7e3b      	ldrb	r3, [r7, #24]
 800d0fe:	b2db      	uxtb	r3, r3
 800d100:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800d102:	7e7b      	ldrb	r3, [r7, #25]
 800d104:	b2db      	uxtb	r3, r3
 800d106:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d10c:	2b01      	cmp	r3, #1
 800d10e:	d10a      	bne.n	800d126 <HAL_SD_Init+0x82>
 800d110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d112:	2b00      	cmp	r3, #0
 800d114:	d102      	bne.n	800d11c <HAL_SD_Init+0x78>
 800d116:	6a3b      	ldr	r3, [r7, #32]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d004      	beq.n	800d126 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d122:	659a      	str	r2, [r3, #88]	; 0x58
 800d124:	e00b      	b.n	800d13e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d12a:	2b01      	cmp	r3, #1
 800d12c:	d104      	bne.n	800d138 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d134:	659a      	str	r2, [r3, #88]	; 0x58
 800d136:	e002      	b.n	800d13e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2200      	movs	r2, #0
 800d13c:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	68db      	ldr	r3, [r3, #12]
 800d142:	4619      	mov	r1, r3
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f000 fe6d 	bl	800de24 <HAL_SD_ConfigWideBusOperation>
 800d14a:	4603      	mov	r3, r0
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d001      	beq.n	800d154 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800d150:	2301      	movs	r3, #1
 800d152:	e026      	b.n	800d1a2 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800d154:	f7f6 fcd4 	bl	8003b00 <HAL_GetTick>
 800d158:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d15a:	e011      	b.n	800d180 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d15c:	f7f6 fcd0 	bl	8003b00 <HAL_GetTick>
 800d160:	4602      	mov	r2, r0
 800d162:	69fb      	ldr	r3, [r7, #28]
 800d164:	1ad3      	subs	r3, r2, r3
 800d166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d16a:	d109      	bne.n	800d180 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d172:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2201      	movs	r2, #1
 800d178:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800d17c:	2303      	movs	r3, #3
 800d17e:	e010      	b.n	800d1a2 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d180:	6878      	ldr	r0, [r7, #4]
 800d182:	f000 ff61 	bl	800e048 <HAL_SD_GetCardState>
 800d186:	4603      	mov	r3, r0
 800d188:	2b04      	cmp	r3, #4
 800d18a:	d1e7      	bne.n	800d15c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2200      	movs	r2, #0
 800d190:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	2200      	movs	r2, #0
 800d196:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2201      	movs	r2, #1
 800d19c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800d1a0:	2300      	movs	r3, #0
}
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	3728      	adds	r7, #40	; 0x28
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd80      	pop	{r7, pc}
	...

0800d1ac <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d1ac:	b590      	push	{r4, r7, lr}
 800d1ae:	b08d      	sub	sp, #52	; 0x34
 800d1b0:	af02      	add	r7, sp, #8
 800d1b2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d1c4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d1c8:	f04f 0100 	mov.w	r1, #0
 800d1cc:	f7fe fd24 	bl	800bc18 <HAL_RCCEx_GetPeriphCLKFreq>
 800d1d0:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800d1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d109      	bne.n	800d1ec <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2201      	movs	r2, #1
 800d1dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d1e6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	e070      	b.n	800d2ce <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800d1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ee:	0a1b      	lsrs	r3, r3, #8
 800d1f0:	4a39      	ldr	r2, [pc, #228]	; (800d2d8 <HAL_SD_InitCard+0x12c>)
 800d1f2:	fba2 2303 	umull	r2, r3, r2, r3
 800d1f6:	091b      	lsrs	r3, r3, #4
 800d1f8:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681c      	ldr	r4, [r3, #0]
 800d1fe:	466a      	mov	r2, sp
 800d200:	f107 0318 	add.w	r3, r7, #24
 800d204:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d208:	e882 0003 	stmia.w	r2, {r0, r1}
 800d20c:	f107 030c 	add.w	r3, r7, #12
 800d210:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d212:	4620      	mov	r0, r4
 800d214:	f004 fec4 	bl	8011fa0 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	4618      	mov	r0, r3
 800d21e:	f004 ff07 	bl	8012030 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800d222:	69fb      	ldr	r3, [r7, #28]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d005      	beq.n	800d234 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800d228:	69fb      	ldr	r3, [r7, #28]
 800d22a:	005b      	lsls	r3, r3, #1
 800d22c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d22e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d232:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800d234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d236:	2b00      	cmp	r3, #0
 800d238:	d007      	beq.n	800d24a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800d23a:	4a28      	ldr	r2, [pc, #160]	; (800d2dc <HAL_SD_InitCard+0x130>)
 800d23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d23e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d242:	3301      	adds	r3, #1
 800d244:	4618      	mov	r0, r3
 800d246:	f7f6 fc67 	bl	8003b18 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	f000 ffea 	bl	800e224 <SD_PowerON>
 800d250:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d252:	6a3b      	ldr	r3, [r7, #32]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d00b      	beq.n	800d270 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2201      	movs	r2, #1
 800d25c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d264:	6a3b      	ldr	r3, [r7, #32]
 800d266:	431a      	orrs	r2, r3
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d26c:	2301      	movs	r3, #1
 800d26e:	e02e      	b.n	800d2ce <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f000 ff09 	bl	800e088 <SD_InitCard>
 800d276:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d278:	6a3b      	ldr	r3, [r7, #32]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d00b      	beq.n	800d296 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2201      	movs	r2, #1
 800d282:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d28a:	6a3b      	ldr	r3, [r7, #32]
 800d28c:	431a      	orrs	r2, r3
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d292:	2301      	movs	r3, #1
 800d294:	e01b      	b.n	800d2ce <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f004 ff5c 	bl	801215c <SDMMC_CmdBlockLength>
 800d2a4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d2a6:	6a3b      	ldr	r3, [r7, #32]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d00f      	beq.n	800d2cc <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	4a0b      	ldr	r2, [pc, #44]	; (800d2e0 <HAL_SD_InitCard+0x134>)
 800d2b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d2b8:	6a3b      	ldr	r3, [r7, #32]
 800d2ba:	431a      	orrs	r2, r3
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2201      	movs	r2, #1
 800d2c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d2c8:	2301      	movs	r3, #1
 800d2ca:	e000      	b.n	800d2ce <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800d2cc:	2300      	movs	r3, #0
}
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	372c      	adds	r7, #44	; 0x2c
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	bd90      	pop	{r4, r7, pc}
 800d2d6:	bf00      	nop
 800d2d8:	014f8b59 	.word	0x014f8b59
 800d2dc:	00012110 	.word	0x00012110
 800d2e0:	1fe00fff 	.word	0x1fe00fff

0800d2e4 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b08c      	sub	sp, #48	; 0x30
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	60f8      	str	r0, [r7, #12]
 800d2ec:	60b9      	str	r1, [r7, #8]
 800d2ee:	607a      	str	r2, [r7, #4]
 800d2f0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d2f6:	68bb      	ldr	r3, [r7, #8]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d107      	bne.n	800d30c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d300:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d308:	2301      	movs	r3, #1
 800d30a:	e08d      	b.n	800d428 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d312:	b2db      	uxtb	r3, r3
 800d314:	2b01      	cmp	r3, #1
 800d316:	f040 8086 	bne.w	800d426 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	2200      	movs	r2, #0
 800d31e:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d320:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	441a      	add	r2, r3
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d32a:	429a      	cmp	r2, r3
 800d32c:	d907      	bls.n	800d33e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d332:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d33a:	2301      	movs	r3, #1
 800d33c:	e074      	b.n	800d428 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	2203      	movs	r2, #3
 800d342:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	2200      	movs	r2, #0
 800d34c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	68ba      	ldr	r2, [r7, #8]
 800d352:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	025a      	lsls	r2, r3, #9
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d360:	2b01      	cmp	r3, #1
 800d362:	d002      	beq.n	800d36a <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d366:	025b      	lsls	r3, r3, #9
 800d368:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d36a:	f04f 33ff 	mov.w	r3, #4294967295
 800d36e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	025b      	lsls	r3, r3, #9
 800d374:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d376:	2390      	movs	r3, #144	; 0x90
 800d378:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d37a:	2302      	movs	r3, #2
 800d37c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d37e:	2300      	movs	r3, #0
 800d380:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d382:	2300      	movs	r3, #0
 800d384:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	f107 0210 	add.w	r2, r7, #16
 800d38e:	4611      	mov	r1, r2
 800d390:	4618      	mov	r0, r3
 800d392:	f004 feb7 	bl	8012104 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	68da      	ldr	r2, [r3, #12]
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d3a4:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	68ba      	ldr	r2, [r7, #8]
 800d3ac:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	2201      	movs	r2, #1
 800d3b4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	2b01      	cmp	r3, #1
 800d3ba:	d90a      	bls.n	800d3d2 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	2282      	movs	r2, #130	; 0x82
 800d3c0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f004 ff0d 	bl	80121e8 <SDMMC_CmdReadMultiBlock>
 800d3ce:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d3d0:	e009      	b.n	800d3e6 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	2281      	movs	r2, #129	; 0x81
 800d3d6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f004 fedf 	bl	80121a2 <SDMMC_CmdReadSingleBlock>
 800d3e4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d012      	beq.n	800d412 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	4a0f      	ldr	r2, [pc, #60]	; (800d430 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d3f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3fa:	431a      	orrs	r2, r3
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	2201      	movs	r2, #1
 800d404:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	2200      	movs	r2, #0
 800d40c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d40e:	2301      	movs	r3, #1
 800d410:	e00a      	b.n	800d428 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d420:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800d422:	2300      	movs	r3, #0
 800d424:	e000      	b.n	800d428 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d426:	2302      	movs	r3, #2
  }
}
 800d428:	4618      	mov	r0, r3
 800d42a:	3730      	adds	r7, #48	; 0x30
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}
 800d430:	1fe00fff 	.word	0x1fe00fff

0800d434 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b08c      	sub	sp, #48	; 0x30
 800d438:	af00      	add	r7, sp, #0
 800d43a:	60f8      	str	r0, [r7, #12]
 800d43c:	60b9      	str	r1, [r7, #8]
 800d43e:	607a      	str	r2, [r7, #4]
 800d440:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d446:	68bb      	ldr	r3, [r7, #8]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d107      	bne.n	800d45c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d450:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d458:	2301      	movs	r3, #1
 800d45a:	e08d      	b.n	800d578 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d462:	b2db      	uxtb	r3, r3
 800d464:	2b01      	cmp	r3, #1
 800d466:	f040 8086 	bne.w	800d576 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	2200      	movs	r2, #0
 800d46e:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d470:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	441a      	add	r2, r3
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d47a:	429a      	cmp	r2, r3
 800d47c:	d907      	bls.n	800d48e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d482:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d48a:	2301      	movs	r3, #1
 800d48c:	e074      	b.n	800d578 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	2203      	movs	r2, #3
 800d492:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	2200      	movs	r2, #0
 800d49c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	68ba      	ldr	r2, [r7, #8]
 800d4a2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	025a      	lsls	r2, r3, #9
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4b0:	2b01      	cmp	r3, #1
 800d4b2:	d002      	beq.n	800d4ba <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4b6:	025b      	lsls	r3, r3, #9
 800d4b8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d4ba:	f04f 33ff 	mov.w	r3, #4294967295
 800d4be:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	025b      	lsls	r3, r3, #9
 800d4c4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d4c6:	2390      	movs	r3, #144	; 0x90
 800d4c8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	f107 0210 	add.w	r2, r7, #16
 800d4de:	4611      	mov	r1, r2
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f004 fe0f 	bl	8012104 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	68da      	ldr	r2, [r3, #12]
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d4f4:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	68ba      	ldr	r2, [r7, #8]
 800d4fc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	2201      	movs	r2, #1
 800d504:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	2b01      	cmp	r3, #1
 800d50a:	d90a      	bls.n	800d522 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	22a0      	movs	r2, #160	; 0xa0
 800d510:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d518:	4618      	mov	r0, r3
 800d51a:	f004 feab 	bl	8012274 <SDMMC_CmdWriteMultiBlock>
 800d51e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d520:	e009      	b.n	800d536 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	2290      	movs	r2, #144	; 0x90
 800d526:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d52e:	4618      	mov	r0, r3
 800d530:	f004 fe7d 	bl	801222e <SDMMC_CmdWriteSingleBlock>
 800d534:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d012      	beq.n	800d562 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	4a0f      	ldr	r2, [pc, #60]	; (800d580 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800d542:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d54a:	431a      	orrs	r2, r3
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	2201      	movs	r2, #1
 800d554:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	2200      	movs	r2, #0
 800d55c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d55e:	2301      	movs	r3, #1
 800d560:	e00a      	b.n	800d578 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800d570:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d572:	2300      	movs	r3, #0
 800d574:	e000      	b.n	800d578 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d576:	2302      	movs	r3, #2
  }
}
 800d578:	4618      	mov	r0, r3
 800d57a:	3730      	adds	r7, #48	; 0x30
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}
 800d580:	1fe00fff 	.word	0x1fe00fff

0800d584 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b084      	sub	sp, #16
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d590:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d598:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d008      	beq.n	800d5b2 <HAL_SD_IRQHandler+0x2e>
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	f003 0308 	and.w	r3, r3, #8
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d003      	beq.n	800d5b2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f001 f926 	bl	800e7fc <SD_Read_IT>
 800d5b0:	e19a      	b.n	800d8e8 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	f000 80ac 	beq.w	800d71a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d5ca:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681a      	ldr	r2, [r3, #0]
 800d5d6:	4b59      	ldr	r3, [pc, #356]	; (800d73c <HAL_SD_IRQHandler+0x1b8>)
 800d5d8:	400b      	ands	r3, r1
 800d5da:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d5ea:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	68da      	ldr	r2, [r3, #12]
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d5fa:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	f003 0308 	and.w	r3, r3, #8
 800d602:	2b00      	cmp	r3, #0
 800d604:	d038      	beq.n	800d678 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	f003 0302 	and.w	r3, r3, #2
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d104      	bne.n	800d61a <HAL_SD_IRQHandler+0x96>
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	f003 0320 	and.w	r3, r3, #32
 800d616:	2b00      	cmp	r3, #0
 800d618:	d011      	beq.n	800d63e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	4618      	mov	r0, r3
 800d620:	f004 fe4c 	bl	80122bc <SDMMC_CmdStopTransfer>
 800d624:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d626:	68bb      	ldr	r3, [r7, #8]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d008      	beq.n	800d63e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d630:	68bb      	ldr	r3, [r7, #8]
 800d632:	431a      	orrs	r2, r3
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f000 f95b 	bl	800d8f4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	4a3f      	ldr	r2, [pc, #252]	; (800d740 <HAL_SD_IRQHandler+0x1bc>)
 800d644:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2201      	movs	r2, #1
 800d64a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	2200      	movs	r2, #0
 800d652:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	f003 0301 	and.w	r3, r3, #1
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d104      	bne.n	800d668 <HAL_SD_IRQHandler+0xe4>
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	f003 0302 	and.w	r3, r3, #2
 800d664:	2b00      	cmp	r3, #0
 800d666:	d003      	beq.n	800d670 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f006 fe4d 	bl	8014308 <HAL_SD_RxCpltCallback>
 800d66e:	e13b      	b.n	800d8e8 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	f006 fe3f 	bl	80142f4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d676:	e137      	b.n	800d8e8 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d67e:	2b00      	cmp	r3, #0
 800d680:	f000 8132 	beq.w	800d8e8 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	2200      	movs	r2, #0
 800d68a:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	2200      	movs	r2, #0
 800d692:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	2200      	movs	r2, #0
 800d69a:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	f003 0302 	and.w	r3, r3, #2
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d104      	bne.n	800d6b0 <HAL_SD_IRQHandler+0x12c>
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	f003 0320 	and.w	r3, r3, #32
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d011      	beq.n	800d6d4 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f004 fe01 	bl	80122bc <SDMMC_CmdStopTransfer>
 800d6ba:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d008      	beq.n	800d6d4 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	431a      	orrs	r2, r3
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f000 f910 	bl	800d8f4 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2201      	movs	r2, #1
 800d6d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2200      	movs	r2, #0
 800d6e0:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	f003 0310 	and.w	r3, r3, #16
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d104      	bne.n	800d6f6 <HAL_SD_IRQHandler+0x172>
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	f003 0320 	and.w	r3, r3, #32
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d002      	beq.n	800d6fc <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f006 fdfc 	bl	80142f4 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	f003 0301 	and.w	r3, r3, #1
 800d702:	2b00      	cmp	r3, #0
 800d704:	d105      	bne.n	800d712 <HAL_SD_IRQHandler+0x18e>
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	f003 0302 	and.w	r3, r3, #2
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	f000 80eb 	beq.w	800d8e8 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800d712:	6878      	ldr	r0, [r7, #4]
 800d714:	f006 fdf8 	bl	8014308 <HAL_SD_RxCpltCallback>
}
 800d718:	e0e6      	b.n	800d8e8 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d724:	2b00      	cmp	r3, #0
 800d726:	d00d      	beq.n	800d744 <HAL_SD_IRQHandler+0x1c0>
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	f003 0308 	and.w	r3, r3, #8
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d008      	beq.n	800d744 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800d732:	6878      	ldr	r0, [r7, #4]
 800d734:	f001 f8a8 	bl	800e888 <SD_Write_IT>
 800d738:	e0d6      	b.n	800d8e8 <HAL_SD_IRQHandler+0x364>
 800d73a:	bf00      	nop
 800d73c:	ffff3ec5 	.word	0xffff3ec5
 800d740:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d74a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d74e:	2b00      	cmp	r3, #0
 800d750:	f000 809d 	beq.w	800d88e <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d75a:	f003 0302 	and.w	r3, r3, #2
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d005      	beq.n	800d76e <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d766:	f043 0202 	orr.w	r2, r3, #2
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d774:	f003 0308 	and.w	r3, r3, #8
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d005      	beq.n	800d788 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d780:	f043 0208 	orr.w	r2, r3, #8
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d78e:	f003 0320 	and.w	r3, r3, #32
 800d792:	2b00      	cmp	r3, #0
 800d794:	d005      	beq.n	800d7a2 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d79a:	f043 0220 	orr.w	r2, r3, #32
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7a8:	f003 0310 	and.w	r3, r3, #16
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d005      	beq.n	800d7bc <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7b4:	f043 0210 	orr.w	r2, r3, #16
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	4a4b      	ldr	r2, [pc, #300]	; (800d8f0 <HAL_SD_IRQHandler+0x36c>)
 800d7c2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d7d2:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	68da      	ldr	r2, [r3, #12]
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d7e2:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d7f2:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	68da      	ldr	r2, [r3, #12]
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d802:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	4618      	mov	r0, r3
 800d80a:	f004 fd57 	bl	80122bc <SDMMC_CmdStopTransfer>
 800d80e:	4602      	mov	r2, r0
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d814:	431a      	orrs	r2, r3
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	68da      	ldr	r2, [r3, #12]
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d828:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d832:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	f003 0308 	and.w	r3, r3, #8
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d00a      	beq.n	800d854 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2201      	movs	r2, #1
 800d842:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2200      	movs	r2, #0
 800d84a:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800d84c:	6878      	ldr	r0, [r7, #4]
 800d84e:	f000 f851 	bl	800d8f4 <HAL_SD_ErrorCallback>
}
 800d852:	e049      	b.n	800d8e8 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d044      	beq.n	800d8e8 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d862:	2b00      	cmp	r3, #0
 800d864:	d040      	beq.n	800d8e8 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d874:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	2200      	movs	r2, #0
 800d87c:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2201      	movs	r2, #1
 800d882:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	f000 f834 	bl	800d8f4 <HAL_SD_ErrorCallback>
}
 800d88c:	e02c      	b.n	800d8e8 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d025      	beq.n	800d8e8 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8a4:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8ac:	f003 0304 	and.w	r3, r3, #4
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d10c      	bne.n	800d8ce <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	f003 0320 	and.w	r3, r3, #32
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d003      	beq.n	800d8c6 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800d8be:	6878      	ldr	r0, [r7, #4]
 800d8c0:	f001 f84a 	bl	800e958 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800d8c4:	e010      	b.n	800d8e8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800d8c6:	6878      	ldr	r0, [r7, #4]
 800d8c8:	f001 f832 	bl	800e930 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800d8cc:	e00c      	b.n	800d8e8 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	f003 0320 	and.w	r3, r3, #32
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d003      	beq.n	800d8e0 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800d8d8:	6878      	ldr	r0, [r7, #4]
 800d8da:	f001 f833 	bl	800e944 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800d8de:	e003      	b.n	800d8e8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800d8e0:	6878      	ldr	r0, [r7, #4]
 800d8e2:	f001 f81b 	bl	800e91c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800d8e6:	e7ff      	b.n	800d8e8 <HAL_SD_IRQHandler+0x364>
 800d8e8:	bf00      	nop
 800d8ea:	3710      	adds	r7, #16
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bd80      	pop	{r7, pc}
 800d8f0:	18000f3a 	.word	0x18000f3a

0800d8f4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d8f4:	b480      	push	{r7}
 800d8f6:	b083      	sub	sp, #12
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d8fc:	bf00      	nop
 800d8fe:	370c      	adds	r7, #12
 800d900:	46bd      	mov	sp, r7
 800d902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d906:	4770      	bx	lr

0800d908 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d908:	b480      	push	{r7}
 800d90a:	b083      	sub	sp, #12
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
 800d910:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d916:	0f9b      	lsrs	r3, r3, #30
 800d918:	b2da      	uxtb	r2, r3
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d922:	0e9b      	lsrs	r3, r3, #26
 800d924:	b2db      	uxtb	r3, r3
 800d926:	f003 030f 	and.w	r3, r3, #15
 800d92a:	b2da      	uxtb	r2, r3
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d934:	0e1b      	lsrs	r3, r3, #24
 800d936:	b2db      	uxtb	r3, r3
 800d938:	f003 0303 	and.w	r3, r3, #3
 800d93c:	b2da      	uxtb	r2, r3
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d946:	0c1b      	lsrs	r3, r3, #16
 800d948:	b2da      	uxtb	r2, r3
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d952:	0a1b      	lsrs	r3, r3, #8
 800d954:	b2da      	uxtb	r2, r3
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d95e:	b2da      	uxtb	r2, r3
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d968:	0d1b      	lsrs	r3, r3, #20
 800d96a:	b29a      	uxth	r2, r3
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d974:	0c1b      	lsrs	r3, r3, #16
 800d976:	b2db      	uxtb	r3, r3
 800d978:	f003 030f 	and.w	r3, r3, #15
 800d97c:	b2da      	uxtb	r2, r3
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d986:	0bdb      	lsrs	r3, r3, #15
 800d988:	b2db      	uxtb	r3, r3
 800d98a:	f003 0301 	and.w	r3, r3, #1
 800d98e:	b2da      	uxtb	r2, r3
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d998:	0b9b      	lsrs	r3, r3, #14
 800d99a:	b2db      	uxtb	r3, r3
 800d99c:	f003 0301 	and.w	r3, r3, #1
 800d9a0:	b2da      	uxtb	r2, r3
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d9aa:	0b5b      	lsrs	r3, r3, #13
 800d9ac:	b2db      	uxtb	r3, r3
 800d9ae:	f003 0301 	and.w	r3, r3, #1
 800d9b2:	b2da      	uxtb	r2, r3
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d9bc:	0b1b      	lsrs	r3, r3, #12
 800d9be:	b2db      	uxtb	r3, r3
 800d9c0:	f003 0301 	and.w	r3, r3, #1
 800d9c4:	b2da      	uxtb	r2, r3
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d163      	bne.n	800daa0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d9dc:	009a      	lsls	r2, r3, #2
 800d9de:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d9e2:	4013      	ands	r3, r2
 800d9e4:	687a      	ldr	r2, [r7, #4]
 800d9e6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800d9e8:	0f92      	lsrs	r2, r2, #30
 800d9ea:	431a      	orrs	r2, r3
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9f4:	0edb      	lsrs	r3, r3, #27
 800d9f6:	b2db      	uxtb	r3, r3
 800d9f8:	f003 0307 	and.w	r3, r3, #7
 800d9fc:	b2da      	uxtb	r2, r3
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da06:	0e1b      	lsrs	r3, r3, #24
 800da08:	b2db      	uxtb	r3, r3
 800da0a:	f003 0307 	and.w	r3, r3, #7
 800da0e:	b2da      	uxtb	r2, r3
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da18:	0d5b      	lsrs	r3, r3, #21
 800da1a:	b2db      	uxtb	r3, r3
 800da1c:	f003 0307 	and.w	r3, r3, #7
 800da20:	b2da      	uxtb	r2, r3
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da2a:	0c9b      	lsrs	r3, r3, #18
 800da2c:	b2db      	uxtb	r3, r3
 800da2e:	f003 0307 	and.w	r3, r3, #7
 800da32:	b2da      	uxtb	r2, r3
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da3c:	0bdb      	lsrs	r3, r3, #15
 800da3e:	b2db      	uxtb	r3, r3
 800da40:	f003 0307 	and.w	r3, r3, #7
 800da44:	b2da      	uxtb	r2, r3
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	691b      	ldr	r3, [r3, #16]
 800da4e:	1c5a      	adds	r2, r3, #1
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	7e1b      	ldrb	r3, [r3, #24]
 800da58:	b2db      	uxtb	r3, r3
 800da5a:	f003 0307 	and.w	r3, r3, #7
 800da5e:	3302      	adds	r3, #2
 800da60:	2201      	movs	r2, #1
 800da62:	fa02 f303 	lsl.w	r3, r2, r3
 800da66:	687a      	ldr	r2, [r7, #4]
 800da68:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800da6a:	fb03 f202 	mul.w	r2, r3, r2
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	7a1b      	ldrb	r3, [r3, #8]
 800da76:	b2db      	uxtb	r3, r3
 800da78:	f003 030f 	and.w	r3, r3, #15
 800da7c:	2201      	movs	r2, #1
 800da7e:	409a      	lsls	r2, r3
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da88:	687a      	ldr	r2, [r7, #4]
 800da8a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800da8c:	0a52      	lsrs	r2, r2, #9
 800da8e:	fb03 f202 	mul.w	r2, r3, r2
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da9c:	655a      	str	r2, [r3, #84]	; 0x54
 800da9e:	e031      	b.n	800db04 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daa4:	2b01      	cmp	r3, #1
 800daa6:	d11d      	bne.n	800dae4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800daac:	041b      	lsls	r3, r3, #16
 800daae:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dab6:	0c1b      	lsrs	r3, r3, #16
 800dab8:	431a      	orrs	r2, r3
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	691b      	ldr	r3, [r3, #16]
 800dac2:	3301      	adds	r3, #1
 800dac4:	029a      	lsls	r2, r3, #10
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dad8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	655a      	str	r2, [r3, #84]	; 0x54
 800dae2:	e00f      	b.n	800db04 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	4a58      	ldr	r2, [pc, #352]	; (800dc4c <HAL_SD_GetCardCSD+0x344>)
 800daea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daf0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2201      	movs	r2, #1
 800dafc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800db00:	2301      	movs	r3, #1
 800db02:	e09d      	b.n	800dc40 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db08:	0b9b      	lsrs	r3, r3, #14
 800db0a:	b2db      	uxtb	r3, r3
 800db0c:	f003 0301 	and.w	r3, r3, #1
 800db10:	b2da      	uxtb	r2, r3
 800db12:	683b      	ldr	r3, [r7, #0]
 800db14:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db1a:	09db      	lsrs	r3, r3, #7
 800db1c:	b2db      	uxtb	r3, r3
 800db1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db22:	b2da      	uxtb	r2, r3
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db2c:	b2db      	uxtb	r3, r3
 800db2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db32:	b2da      	uxtb	r2, r3
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db3c:	0fdb      	lsrs	r3, r3, #31
 800db3e:	b2da      	uxtb	r2, r3
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db48:	0f5b      	lsrs	r3, r3, #29
 800db4a:	b2db      	uxtb	r3, r3
 800db4c:	f003 0303 	and.w	r3, r3, #3
 800db50:	b2da      	uxtb	r2, r3
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db5a:	0e9b      	lsrs	r3, r3, #26
 800db5c:	b2db      	uxtb	r3, r3
 800db5e:	f003 0307 	and.w	r3, r3, #7
 800db62:	b2da      	uxtb	r2, r3
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db6c:	0d9b      	lsrs	r3, r3, #22
 800db6e:	b2db      	uxtb	r3, r3
 800db70:	f003 030f 	and.w	r3, r3, #15
 800db74:	b2da      	uxtb	r2, r3
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db7e:	0d5b      	lsrs	r3, r3, #21
 800db80:	b2db      	uxtb	r3, r3
 800db82:	f003 0301 	and.w	r3, r3, #1
 800db86:	b2da      	uxtb	r2, r3
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	2200      	movs	r2, #0
 800db92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db9a:	0c1b      	lsrs	r3, r3, #16
 800db9c:	b2db      	uxtb	r3, r3
 800db9e:	f003 0301 	and.w	r3, r3, #1
 800dba2:	b2da      	uxtb	r2, r3
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dbae:	0bdb      	lsrs	r3, r3, #15
 800dbb0:	b2db      	uxtb	r3, r3
 800dbb2:	f003 0301 	and.w	r3, r3, #1
 800dbb6:	b2da      	uxtb	r2, r3
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dbc2:	0b9b      	lsrs	r3, r3, #14
 800dbc4:	b2db      	uxtb	r3, r3
 800dbc6:	f003 0301 	and.w	r3, r3, #1
 800dbca:	b2da      	uxtb	r2, r3
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dbd6:	0b5b      	lsrs	r3, r3, #13
 800dbd8:	b2db      	uxtb	r3, r3
 800dbda:	f003 0301 	and.w	r3, r3, #1
 800dbde:	b2da      	uxtb	r2, r3
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dbea:	0b1b      	lsrs	r3, r3, #12
 800dbec:	b2db      	uxtb	r3, r3
 800dbee:	f003 0301 	and.w	r3, r3, #1
 800dbf2:	b2da      	uxtb	r2, r3
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dbfe:	0a9b      	lsrs	r3, r3, #10
 800dc00:	b2db      	uxtb	r3, r3
 800dc02:	f003 0303 	and.w	r3, r3, #3
 800dc06:	b2da      	uxtb	r2, r3
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc12:	0a1b      	lsrs	r3, r3, #8
 800dc14:	b2db      	uxtb	r3, r3
 800dc16:	f003 0303 	and.w	r3, r3, #3
 800dc1a:	b2da      	uxtb	r2, r3
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc26:	085b      	lsrs	r3, r3, #1
 800dc28:	b2db      	uxtb	r3, r3
 800dc2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc2e:	b2da      	uxtb	r2, r3
 800dc30:	683b      	ldr	r3, [r7, #0]
 800dc32:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	2201      	movs	r2, #1
 800dc3a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800dc3e:	2300      	movs	r3, #0
}
 800dc40:	4618      	mov	r0, r3
 800dc42:	370c      	adds	r7, #12
 800dc44:	46bd      	mov	sp, r7
 800dc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4a:	4770      	bx	lr
 800dc4c:	1fe00fff 	.word	0x1fe00fff

0800dc50 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b094      	sub	sp, #80	; 0x50
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
 800dc58:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dc66:	b2db      	uxtb	r3, r3
 800dc68:	2b03      	cmp	r3, #3
 800dc6a:	d101      	bne.n	800dc70 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800dc6c:	2301      	movs	r3, #1
 800dc6e:	e0a7      	b.n	800ddc0 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800dc70:	f107 0308 	add.w	r3, r7, #8
 800dc74:	4619      	mov	r1, r3
 800dc76:	6878      	ldr	r0, [r7, #4]
 800dc78:	f000 fb62 	bl	800e340 <SD_SendSDStatus>
 800dc7c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800dc7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d011      	beq.n	800dca8 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	4a4f      	ldr	r2, [pc, #316]	; (800ddc8 <HAL_SD_GetCardStatus+0x178>)
 800dc8a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc92:	431a      	orrs	r2, r3
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2201      	movs	r2, #1
 800dc9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800dca0:	2301      	movs	r3, #1
 800dca2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800dca6:	e070      	b.n	800dd8a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800dca8:	68bb      	ldr	r3, [r7, #8]
 800dcaa:	099b      	lsrs	r3, r3, #6
 800dcac:	b2db      	uxtb	r3, r3
 800dcae:	f003 0303 	and.w	r3, r3, #3
 800dcb2:	b2da      	uxtb	r2, r3
 800dcb4:	683b      	ldr	r3, [r7, #0]
 800dcb6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800dcb8:	68bb      	ldr	r3, [r7, #8]
 800dcba:	095b      	lsrs	r3, r3, #5
 800dcbc:	b2db      	uxtb	r3, r3
 800dcbe:	f003 0301 	and.w	r3, r3, #1
 800dcc2:	b2da      	uxtb	r2, r3
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800dcc8:	68bb      	ldr	r3, [r7, #8]
 800dcca:	0a1b      	lsrs	r3, r3, #8
 800dccc:	b29b      	uxth	r3, r3
 800dcce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dcd2:	b29a      	uxth	r2, r3
 800dcd4:	68bb      	ldr	r3, [r7, #8]
 800dcd6:	0e1b      	lsrs	r3, r3, #24
 800dcd8:	b29b      	uxth	r3, r3
 800dcda:	4313      	orrs	r3, r2
 800dcdc:	b29a      	uxth	r2, r3
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	061a      	lsls	r2, r3, #24
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	021b      	lsls	r3, r3, #8
 800dcea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dcee:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	0a1b      	lsrs	r3, r3, #8
 800dcf4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dcf8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	0e1b      	lsrs	r3, r3, #24
 800dcfe:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dd00:	683b      	ldr	r3, [r7, #0]
 800dd02:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800dd04:	693b      	ldr	r3, [r7, #16]
 800dd06:	b2da      	uxtb	r2, r3
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800dd0c:	693b      	ldr	r3, [r7, #16]
 800dd0e:	0a1b      	lsrs	r3, r3, #8
 800dd10:	b2da      	uxtb	r2, r3
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800dd16:	693b      	ldr	r3, [r7, #16]
 800dd18:	0d1b      	lsrs	r3, r3, #20
 800dd1a:	b2db      	uxtb	r3, r3
 800dd1c:	f003 030f 	and.w	r3, r3, #15
 800dd20:	b2da      	uxtb	r2, r3
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800dd26:	693b      	ldr	r3, [r7, #16]
 800dd28:	0c1b      	lsrs	r3, r3, #16
 800dd2a:	b29b      	uxth	r3, r3
 800dd2c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dd30:	b29a      	uxth	r2, r3
 800dd32:	697b      	ldr	r3, [r7, #20]
 800dd34:	b29b      	uxth	r3, r3
 800dd36:	b2db      	uxtb	r3, r3
 800dd38:	b29b      	uxth	r3, r3
 800dd3a:	4313      	orrs	r3, r2
 800dd3c:	b29a      	uxth	r2, r3
 800dd3e:	683b      	ldr	r3, [r7, #0]
 800dd40:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800dd42:	697b      	ldr	r3, [r7, #20]
 800dd44:	0a9b      	lsrs	r3, r3, #10
 800dd46:	b2db      	uxtb	r3, r3
 800dd48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd4c:	b2da      	uxtb	r2, r3
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800dd52:	697b      	ldr	r3, [r7, #20]
 800dd54:	0a1b      	lsrs	r3, r3, #8
 800dd56:	b2db      	uxtb	r3, r3
 800dd58:	f003 0303 	and.w	r3, r3, #3
 800dd5c:	b2da      	uxtb	r2, r3
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800dd62:	697b      	ldr	r3, [r7, #20]
 800dd64:	091b      	lsrs	r3, r3, #4
 800dd66:	b2db      	uxtb	r3, r3
 800dd68:	f003 030f 	and.w	r3, r3, #15
 800dd6c:	b2da      	uxtb	r2, r3
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800dd72:	697b      	ldr	r3, [r7, #20]
 800dd74:	b2db      	uxtb	r3, r3
 800dd76:	f003 030f 	and.w	r3, r3, #15
 800dd7a:	b2da      	uxtb	r2, r3
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800dd80:	69bb      	ldr	r3, [r7, #24]
 800dd82:	0e1b      	lsrs	r3, r3, #24
 800dd84:	b2da      	uxtb	r2, r3
 800dd86:	683b      	ldr	r3, [r7, #0]
 800dd88:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dd92:	4618      	mov	r0, r3
 800dd94:	f004 f9e2 	bl	801215c <SDMMC_CmdBlockLength>
 800dd98:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800dd9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d00d      	beq.n	800ddbc <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	4a08      	ldr	r2, [pc, #32]	; (800ddc8 <HAL_SD_GetCardStatus+0x178>)
 800dda6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ddac:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	2201      	movs	r2, #1
 800ddb2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800ddb6:	2301      	movs	r3, #1
 800ddb8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800ddbc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	3750      	adds	r7, #80	; 0x50
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}
 800ddc8:	1fe00fff 	.word	0x1fe00fff

0800ddcc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ddcc:	b480      	push	{r7}
 800ddce:	b083      	sub	sp, #12
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
 800ddd4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ddfa:	683b      	ldr	r3, [r7, #0]
 800ddfc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de0a:	683b      	ldr	r3, [r7, #0]
 800de0c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800de16:	2300      	movs	r3, #0
}
 800de18:	4618      	mov	r0, r3
 800de1a:	370c      	adds	r7, #12
 800de1c:	46bd      	mov	sp, r7
 800de1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de22:	4770      	bx	lr

0800de24 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800de24:	b590      	push	{r4, r7, lr}
 800de26:	b08d      	sub	sp, #52	; 0x34
 800de28:	af02      	add	r7, sp, #8
 800de2a:	6078      	str	r0, [r7, #4]
 800de2c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800de2e:	2300      	movs	r3, #0
 800de30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2203      	movs	r2, #3
 800de38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de40:	2b03      	cmp	r3, #3
 800de42:	d02e      	beq.n	800dea2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de4a:	d106      	bne.n	800de5a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de50:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	635a      	str	r2, [r3, #52]	; 0x34
 800de58:	e029      	b.n	800deae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800de60:	d10a      	bne.n	800de78 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800de62:	6878      	ldr	r0, [r7, #4]
 800de64:	f000 fb64 	bl	800e530 <SD_WideBus_Enable>
 800de68:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800de6e:	6a3b      	ldr	r3, [r7, #32]
 800de70:	431a      	orrs	r2, r3
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	635a      	str	r2, [r3, #52]	; 0x34
 800de76:	e01a      	b.n	800deae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d10a      	bne.n	800de94 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800de7e:	6878      	ldr	r0, [r7, #4]
 800de80:	f000 fba1 	bl	800e5c6 <SD_WideBus_Disable>
 800de84:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800de8a:	6a3b      	ldr	r3, [r7, #32]
 800de8c:	431a      	orrs	r2, r3
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	635a      	str	r2, [r3, #52]	; 0x34
 800de92:	e00c      	b.n	800deae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de98:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	635a      	str	r2, [r3, #52]	; 0x34
 800dea0:	e005      	b.n	800deae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dea6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d007      	beq.n	800dec6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	4a5f      	ldr	r2, [pc, #380]	; (800e038 <HAL_SD_ConfigWideBusOperation+0x214>)
 800debc:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800debe:	2301      	movs	r3, #1
 800dec0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dec4:	e096      	b.n	800dff4 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800dec6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800deca:	f04f 0100 	mov.w	r1, #0
 800dece:	f7fd fea3 	bl	800bc18 <HAL_RCCEx_GetPeriphCLKFreq>
 800ded2:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800ded4:	69fb      	ldr	r3, [r7, #28]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	f000 8083 	beq.w	800dfe2 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	685b      	ldr	r3, [r3, #4]
 800dee0:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	689b      	ldr	r3, [r3, #8]
 800dee6:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	691b      	ldr	r3, [r3, #16]
 800def0:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	695a      	ldr	r2, [r3, #20]
 800def6:	69fb      	ldr	r3, [r7, #28]
 800def8:	4950      	ldr	r1, [pc, #320]	; (800e03c <HAL_SD_ConfigWideBusOperation+0x218>)
 800defa:	fba1 1303 	umull	r1, r3, r1, r3
 800defe:	0e1b      	lsrs	r3, r3, #24
 800df00:	429a      	cmp	r2, r3
 800df02:	d303      	bcc.n	800df0c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	695b      	ldr	r3, [r3, #20]
 800df08:	61bb      	str	r3, [r7, #24]
 800df0a:	e05a      	b.n	800dfc2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df14:	d103      	bne.n	800df1e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	695b      	ldr	r3, [r3, #20]
 800df1a:	61bb      	str	r3, [r7, #24]
 800df1c:	e051      	b.n	800dfc2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df26:	d126      	bne.n	800df76 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	695b      	ldr	r3, [r3, #20]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d10e      	bne.n	800df4e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800df30:	69fb      	ldr	r3, [r7, #28]
 800df32:	4a43      	ldr	r2, [pc, #268]	; (800e040 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800df34:	4293      	cmp	r3, r2
 800df36:	d906      	bls.n	800df46 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800df38:	69fb      	ldr	r3, [r7, #28]
 800df3a:	4a40      	ldr	r2, [pc, #256]	; (800e03c <HAL_SD_ConfigWideBusOperation+0x218>)
 800df3c:	fba2 2303 	umull	r2, r3, r2, r3
 800df40:	0e5b      	lsrs	r3, r3, #25
 800df42:	61bb      	str	r3, [r7, #24]
 800df44:	e03d      	b.n	800dfc2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	695b      	ldr	r3, [r3, #20]
 800df4a:	61bb      	str	r3, [r7, #24]
 800df4c:	e039      	b.n	800dfc2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	695b      	ldr	r3, [r3, #20]
 800df52:	005b      	lsls	r3, r3, #1
 800df54:	69fa      	ldr	r2, [r7, #28]
 800df56:	fbb2 f3f3 	udiv	r3, r2, r3
 800df5a:	4a39      	ldr	r2, [pc, #228]	; (800e040 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800df5c:	4293      	cmp	r3, r2
 800df5e:	d906      	bls.n	800df6e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800df60:	69fb      	ldr	r3, [r7, #28]
 800df62:	4a36      	ldr	r2, [pc, #216]	; (800e03c <HAL_SD_ConfigWideBusOperation+0x218>)
 800df64:	fba2 2303 	umull	r2, r3, r2, r3
 800df68:	0e5b      	lsrs	r3, r3, #25
 800df6a:	61bb      	str	r3, [r7, #24]
 800df6c:	e029      	b.n	800dfc2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	695b      	ldr	r3, [r3, #20]
 800df72:	61bb      	str	r3, [r7, #24]
 800df74:	e025      	b.n	800dfc2 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	695b      	ldr	r3, [r3, #20]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d10e      	bne.n	800df9c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800df7e:	69fb      	ldr	r3, [r7, #28]
 800df80:	4a30      	ldr	r2, [pc, #192]	; (800e044 <HAL_SD_ConfigWideBusOperation+0x220>)
 800df82:	4293      	cmp	r3, r2
 800df84:	d906      	bls.n	800df94 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800df86:	69fb      	ldr	r3, [r7, #28]
 800df88:	4a2c      	ldr	r2, [pc, #176]	; (800e03c <HAL_SD_ConfigWideBusOperation+0x218>)
 800df8a:	fba2 2303 	umull	r2, r3, r2, r3
 800df8e:	0e1b      	lsrs	r3, r3, #24
 800df90:	61bb      	str	r3, [r7, #24]
 800df92:	e016      	b.n	800dfc2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	695b      	ldr	r3, [r3, #20]
 800df98:	61bb      	str	r3, [r7, #24]
 800df9a:	e012      	b.n	800dfc2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	695b      	ldr	r3, [r3, #20]
 800dfa0:	005b      	lsls	r3, r3, #1
 800dfa2:	69fa      	ldr	r2, [r7, #28]
 800dfa4:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfa8:	4a26      	ldr	r2, [pc, #152]	; (800e044 <HAL_SD_ConfigWideBusOperation+0x220>)
 800dfaa:	4293      	cmp	r3, r2
 800dfac:	d906      	bls.n	800dfbc <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800dfae:	69fb      	ldr	r3, [r7, #28]
 800dfb0:	4a22      	ldr	r2, [pc, #136]	; (800e03c <HAL_SD_ConfigWideBusOperation+0x218>)
 800dfb2:	fba2 2303 	umull	r2, r3, r2, r3
 800dfb6:	0e1b      	lsrs	r3, r3, #24
 800dfb8:	61bb      	str	r3, [r7, #24]
 800dfba:	e002      	b.n	800dfc2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	695b      	ldr	r3, [r3, #20]
 800dfc0:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681c      	ldr	r4, [r3, #0]
 800dfc6:	466a      	mov	r2, sp
 800dfc8:	f107 0314 	add.w	r3, r7, #20
 800dfcc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800dfd0:	e882 0003 	stmia.w	r2, {r0, r1}
 800dfd4:	f107 0308 	add.w	r3, r7, #8
 800dfd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dfda:	4620      	mov	r0, r4
 800dfdc:	f003 ffe0 	bl	8011fa0 <SDMMC_Init>
 800dfe0:	e008      	b.n	800dff4 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfe6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800dfee:	2301      	movs	r3, #1
 800dff0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dffc:	4618      	mov	r0, r3
 800dffe:	f004 f8ad 	bl	801215c <SDMMC_CmdBlockLength>
 800e002:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e004:	6a3b      	ldr	r3, [r7, #32]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d00c      	beq.n	800e024 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	4a0a      	ldr	r2, [pc, #40]	; (800e038 <HAL_SD_ConfigWideBusOperation+0x214>)
 800e010:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e016:	6a3b      	ldr	r3, [r7, #32]
 800e018:	431a      	orrs	r2, r3
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800e01e:	2301      	movs	r3, #1
 800e020:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2201      	movs	r2, #1
 800e028:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800e02c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e030:	4618      	mov	r0, r3
 800e032:	372c      	adds	r7, #44	; 0x2c
 800e034:	46bd      	mov	sp, r7
 800e036:	bd90      	pop	{r4, r7, pc}
 800e038:	1fe00fff 	.word	0x1fe00fff
 800e03c:	55e63b89 	.word	0x55e63b89
 800e040:	02faf080 	.word	0x02faf080
 800e044:	017d7840 	.word	0x017d7840

0800e048 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b086      	sub	sp, #24
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e050:	2300      	movs	r3, #0
 800e052:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e054:	f107 030c 	add.w	r3, r7, #12
 800e058:	4619      	mov	r1, r3
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	f000 fa40 	bl	800e4e0 <SD_SendStatus>
 800e060:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e062:	697b      	ldr	r3, [r7, #20]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d005      	beq.n	800e074 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e06c:	697b      	ldr	r3, [r7, #20]
 800e06e:	431a      	orrs	r2, r3
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	0a5b      	lsrs	r3, r3, #9
 800e078:	f003 030f 	and.w	r3, r3, #15
 800e07c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e07e:	693b      	ldr	r3, [r7, #16]
}
 800e080:	4618      	mov	r0, r3
 800e082:	3718      	adds	r7, #24
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}

0800e088 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b090      	sub	sp, #64	; 0x40
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800e090:	2300      	movs	r3, #0
 800e092:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800e094:	f7f5 fd34 	bl	8003b00 <HAL_GetTick>
 800e098:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f003 ffd7 	bl	8012052 <SDMMC_GetPowerState>
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d102      	bne.n	800e0b0 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e0aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e0ae:	e0b5      	b.n	800e21c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0b4:	2b03      	cmp	r3, #3
 800e0b6:	d02e      	beq.n	800e116 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f004 fa22 	bl	8012506 <SDMMC_CmdSendCID>
 800e0c2:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d001      	beq.n	800e0ce <SD_InitCard+0x46>
    {
      return errorstate;
 800e0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0cc:	e0a6      	b.n	800e21c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	2100      	movs	r1, #0
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	f004 f802 	bl	80120de <SDMMC_GetResponse>
 800e0da:	4602      	mov	r2, r0
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	2104      	movs	r1, #4
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	f003 fff9 	bl	80120de <SDMMC_GetResponse>
 800e0ec:	4602      	mov	r2, r0
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	2108      	movs	r1, #8
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f003 fff0 	bl	80120de <SDMMC_GetResponse>
 800e0fe:	4602      	mov	r2, r0
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	210c      	movs	r1, #12
 800e10a:	4618      	mov	r0, r3
 800e10c:	f003 ffe7 	bl	80120de <SDMMC_GetResponse>
 800e110:	4602      	mov	r2, r0
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e11a:	2b03      	cmp	r3, #3
 800e11c:	d01d      	beq.n	800e15a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800e11e:	e019      	b.n	800e154 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	f107 020a 	add.w	r2, r7, #10
 800e128:	4611      	mov	r1, r2
 800e12a:	4618      	mov	r0, r3
 800e12c:	f004 fa2a 	bl	8012584 <SDMMC_CmdSetRelAdd>
 800e130:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800e132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e134:	2b00      	cmp	r3, #0
 800e136:	d001      	beq.n	800e13c <SD_InitCard+0xb4>
      {
        return errorstate;
 800e138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e13a:	e06f      	b.n	800e21c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800e13c:	f7f5 fce0 	bl	8003b00 <HAL_GetTick>
 800e140:	4602      	mov	r2, r0
 800e142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e144:	1ad3      	subs	r3, r2, r3
 800e146:	f241 3287 	movw	r2, #4999	; 0x1387
 800e14a:	4293      	cmp	r3, r2
 800e14c:	d902      	bls.n	800e154 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800e14e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e152:	e063      	b.n	800e21c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800e154:	897b      	ldrh	r3, [r7, #10]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d0e2      	beq.n	800e120 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e15e:	2b03      	cmp	r3, #3
 800e160:	d036      	beq.n	800e1d0 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e162:	897b      	ldrh	r3, [r7, #10]
 800e164:	461a      	mov	r2, r3
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681a      	ldr	r2, [r3, #0]
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e172:	041b      	lsls	r3, r3, #16
 800e174:	4619      	mov	r1, r3
 800e176:	4610      	mov	r0, r2
 800e178:	f004 f9e4 	bl	8012544 <SDMMC_CmdSendCSD>
 800e17c:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e180:	2b00      	cmp	r3, #0
 800e182:	d001      	beq.n	800e188 <SD_InitCard+0x100>
    {
      return errorstate;
 800e184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e186:	e049      	b.n	800e21c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	2100      	movs	r1, #0
 800e18e:	4618      	mov	r0, r3
 800e190:	f003 ffa5 	bl	80120de <SDMMC_GetResponse>
 800e194:	4602      	mov	r2, r0
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	2104      	movs	r1, #4
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f003 ff9c 	bl	80120de <SDMMC_GetResponse>
 800e1a6:	4602      	mov	r2, r0
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	2108      	movs	r1, #8
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f003 ff93 	bl	80120de <SDMMC_GetResponse>
 800e1b8:	4602      	mov	r2, r0
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	210c      	movs	r1, #12
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	f003 ff8a 	bl	80120de <SDMMC_GetResponse>
 800e1ca:	4602      	mov	r2, r0
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	2104      	movs	r1, #4
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	f003 ff81 	bl	80120de <SDMMC_GetResponse>
 800e1dc:	4603      	mov	r3, r0
 800e1de:	0d1a      	lsrs	r2, r3, #20
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e1e4:	f107 030c 	add.w	r3, r7, #12
 800e1e8:	4619      	mov	r1, r3
 800e1ea:	6878      	ldr	r0, [r7, #4]
 800e1ec:	f7ff fb8c 	bl	800d908 <HAL_SD_GetCardCSD>
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d002      	beq.n	800e1fc <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e1f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e1fa:	e00f      	b.n	800e21c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681a      	ldr	r2, [r3, #0]
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e204:	041b      	lsls	r3, r3, #16
 800e206:	4619      	mov	r1, r3
 800e208:	4610      	mov	r0, r2
 800e20a:	f004 f893 	bl	8012334 <SDMMC_CmdSelDesel>
 800e20e:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800e210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e212:	2b00      	cmp	r3, #0
 800e214:	d001      	beq.n	800e21a <SD_InitCard+0x192>
  {
    return errorstate;
 800e216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e218:	e000      	b.n	800e21c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e21a:	2300      	movs	r3, #0
}
 800e21c:	4618      	mov	r0, r3
 800e21e:	3740      	adds	r7, #64	; 0x40
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}

0800e224 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b086      	sub	sp, #24
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e22c:	2300      	movs	r3, #0
 800e22e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800e230:	2300      	movs	r3, #0
 800e232:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800e234:	2300      	movs	r3, #0
 800e236:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	4618      	mov	r0, r3
 800e23e:	f004 f89c 	bl	801237a <SDMMC_CmdGoIdleState>
 800e242:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d001      	beq.n	800e24e <SD_PowerON+0x2a>
  {
    return errorstate;
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	e072      	b.n	800e334 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	4618      	mov	r0, r3
 800e254:	f004 f8af 	bl	80123b6 <SDMMC_CmdOperCond>
 800e258:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e260:	d10d      	bne.n	800e27e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	2200      	movs	r2, #0
 800e266:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	4618      	mov	r0, r3
 800e26e:	f004 f884 	bl	801237a <SDMMC_CmdGoIdleState>
 800e272:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d004      	beq.n	800e284 <SD_PowerON+0x60>
    {
      return errorstate;
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	e05a      	b.n	800e334 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	2201      	movs	r2, #1
 800e282:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e288:	2b01      	cmp	r3, #1
 800e28a:	d137      	bne.n	800e2fc <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	2100      	movs	r1, #0
 800e292:	4618      	mov	r0, r3
 800e294:	f004 f8af 	bl	80123f6 <SDMMC_CmdAppCommand>
 800e298:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d02d      	beq.n	800e2fc <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e2a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e2a4:	e046      	b.n	800e334 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	2100      	movs	r1, #0
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	f004 f8a2 	bl	80123f6 <SDMMC_CmdAppCommand>
 800e2b2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d001      	beq.n	800e2be <SD_PowerON+0x9a>
    {
      return errorstate;
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	e03a      	b.n	800e334 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	491e      	ldr	r1, [pc, #120]	; (800e33c <SD_PowerON+0x118>)
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f004 f8b9 	bl	801243c <SDMMC_CmdAppOperCommand>
 800e2ca:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d002      	beq.n	800e2d8 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e2d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e2d6:	e02d      	b.n	800e334 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	2100      	movs	r1, #0
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f003 fefd 	bl	80120de <SDMMC_GetResponse>
 800e2e4:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e2e6:	697b      	ldr	r3, [r7, #20]
 800e2e8:	0fdb      	lsrs	r3, r3, #31
 800e2ea:	2b01      	cmp	r3, #1
 800e2ec:	d101      	bne.n	800e2f2 <SD_PowerON+0xce>
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	e000      	b.n	800e2f4 <SD_PowerON+0xd0>
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	613b      	str	r3, [r7, #16]

    count++;
 800e2f6:	68bb      	ldr	r3, [r7, #8]
 800e2f8:	3301      	adds	r3, #1
 800e2fa:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e2fc:	68bb      	ldr	r3, [r7, #8]
 800e2fe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e302:	4293      	cmp	r3, r2
 800e304:	d802      	bhi.n	800e30c <SD_PowerON+0xe8>
 800e306:	693b      	ldr	r3, [r7, #16]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d0cc      	beq.n	800e2a6 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800e30c:	68bb      	ldr	r3, [r7, #8]
 800e30e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e312:	4293      	cmp	r3, r2
 800e314:	d902      	bls.n	800e31c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e316:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e31a:	e00b      	b.n	800e334 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2200      	movs	r2, #0
 800e320:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800e322:	697b      	ldr	r3, [r7, #20]
 800e324:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d002      	beq.n	800e332 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2201      	movs	r2, #1
 800e330:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e332:	2300      	movs	r3, #0
}
 800e334:	4618      	mov	r0, r3
 800e336:	3718      	adds	r7, #24
 800e338:	46bd      	mov	sp, r7
 800e33a:	bd80      	pop	{r7, pc}
 800e33c:	c1100000 	.word	0xc1100000

0800e340 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b08c      	sub	sp, #48	; 0x30
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
 800e348:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e34a:	f7f5 fbd9 	bl	8003b00 <HAL_GetTick>
 800e34e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	2100      	movs	r1, #0
 800e35a:	4618      	mov	r0, r3
 800e35c:	f003 febf 	bl	80120de <SDMMC_GetResponse>
 800e360:	4603      	mov	r3, r0
 800e362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e366:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e36a:	d102      	bne.n	800e372 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e36c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e370:	e0b0      	b.n	800e4d4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	2140      	movs	r1, #64	; 0x40
 800e378:	4618      	mov	r0, r3
 800e37a:	f003 feef 	bl	801215c <SDMMC_CmdBlockLength>
 800e37e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e380:	6a3b      	ldr	r3, [r7, #32]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d005      	beq.n	800e392 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e38e:	6a3b      	ldr	r3, [r7, #32]
 800e390:	e0a0      	b.n	800e4d4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681a      	ldr	r2, [r3, #0]
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e39a:	041b      	lsls	r3, r3, #16
 800e39c:	4619      	mov	r1, r3
 800e39e:	4610      	mov	r0, r2
 800e3a0:	f004 f829 	bl	80123f6 <SDMMC_CmdAppCommand>
 800e3a4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e3a6:	6a3b      	ldr	r3, [r7, #32]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d005      	beq.n	800e3b8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e3b4:	6a3b      	ldr	r3, [r7, #32]
 800e3b6:	e08d      	b.n	800e4d4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e3b8:	f04f 33ff 	mov.w	r3, #4294967295
 800e3bc:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e3be:	2340      	movs	r3, #64	; 0x40
 800e3c0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e3c2:	2360      	movs	r3, #96	; 0x60
 800e3c4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e3c6:	2302      	movs	r3, #2
 800e3c8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e3ce:	2301      	movs	r3, #1
 800e3d0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	f107 0208 	add.w	r2, r7, #8
 800e3da:	4611      	mov	r1, r2
 800e3dc:	4618      	mov	r0, r3
 800e3de:	f003 fe91 	bl	8012104 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f004 f911 	bl	801260e <SDMMC_CmdStatusRegister>
 800e3ec:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e3ee:	6a3b      	ldr	r3, [r7, #32]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d02b      	beq.n	800e44c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e3fc:	6a3b      	ldr	r3, [r7, #32]
 800e3fe:	e069      	b.n	800e4d4 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e406:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d013      	beq.n	800e436 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800e40e:	2300      	movs	r3, #0
 800e410:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e412:	e00d      	b.n	800e430 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	4618      	mov	r0, r3
 800e41a:	f003 fdeb 	bl	8011ff4 <SDMMC_ReadFIFO>
 800e41e:	4602      	mov	r2, r0
 800e420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e422:	601a      	str	r2, [r3, #0]
        pData++;
 800e424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e426:	3304      	adds	r3, #4
 800e428:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800e42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e42c:	3301      	adds	r3, #1
 800e42e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e432:	2b07      	cmp	r3, #7
 800e434:	d9ee      	bls.n	800e414 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e436:	f7f5 fb63 	bl	8003b00 <HAL_GetTick>
 800e43a:	4602      	mov	r2, r0
 800e43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e43e:	1ad3      	subs	r3, r2, r3
 800e440:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e444:	d102      	bne.n	800e44c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e446:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e44a:	e043      	b.n	800e4d4 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e452:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e456:	2b00      	cmp	r3, #0
 800e458:	d0d2      	beq.n	800e400 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e460:	f003 0308 	and.w	r3, r3, #8
 800e464:	2b00      	cmp	r3, #0
 800e466:	d001      	beq.n	800e46c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e468:	2308      	movs	r3, #8
 800e46a:	e033      	b.n	800e4d4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e472:	f003 0302 	and.w	r3, r3, #2
 800e476:	2b00      	cmp	r3, #0
 800e478:	d001      	beq.n	800e47e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e47a:	2302      	movs	r3, #2
 800e47c:	e02a      	b.n	800e4d4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e484:	f003 0320 	and.w	r3, r3, #32
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d017      	beq.n	800e4bc <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e48c:	2320      	movs	r3, #32
 800e48e:	e021      	b.n	800e4d4 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	4618      	mov	r0, r3
 800e496:	f003 fdad 	bl	8011ff4 <SDMMC_ReadFIFO>
 800e49a:	4602      	mov	r2, r0
 800e49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e49e:	601a      	str	r2, [r3, #0]
    pData++;
 800e4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4a2:	3304      	adds	r3, #4
 800e4a4:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e4a6:	f7f5 fb2b 	bl	8003b00 <HAL_GetTick>
 800e4aa:	4602      	mov	r2, r0
 800e4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ae:	1ad3      	subs	r3, r2, r3
 800e4b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4b4:	d102      	bne.n	800e4bc <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e4b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e4ba:	e00b      	b.n	800e4d4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d1e2      	bne.n	800e490 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	4a03      	ldr	r2, [pc, #12]	; (800e4dc <SD_SendSDStatus+0x19c>)
 800e4d0:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800e4d2:	2300      	movs	r3, #0
}
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	3730      	adds	r7, #48	; 0x30
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	bd80      	pop	{r7, pc}
 800e4dc:	18000f3a 	.word	0x18000f3a

0800e4e0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b084      	sub	sp, #16
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
 800e4e8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d102      	bne.n	800e4f6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e4f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e4f4:	e018      	b.n	800e528 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681a      	ldr	r2, [r3, #0]
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4fe:	041b      	lsls	r3, r3, #16
 800e500:	4619      	mov	r1, r3
 800e502:	4610      	mov	r0, r2
 800e504:	f004 f860 	bl	80125c8 <SDMMC_CmdSendStatus>
 800e508:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d001      	beq.n	800e514 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	e009      	b.n	800e528 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	2100      	movs	r1, #0
 800e51a:	4618      	mov	r0, r3
 800e51c:	f003 fddf 	bl	80120de <SDMMC_GetResponse>
 800e520:	4602      	mov	r2, r0
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e526:	2300      	movs	r3, #0
}
 800e528:	4618      	mov	r0, r3
 800e52a:	3710      	adds	r7, #16
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}

0800e530 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b086      	sub	sp, #24
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e538:	2300      	movs	r3, #0
 800e53a:	60fb      	str	r3, [r7, #12]
 800e53c:	2300      	movs	r3, #0
 800e53e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	2100      	movs	r1, #0
 800e546:	4618      	mov	r0, r3
 800e548:	f003 fdc9 	bl	80120de <SDMMC_GetResponse>
 800e54c:	4603      	mov	r3, r0
 800e54e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e552:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e556:	d102      	bne.n	800e55e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e558:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e55c:	e02f      	b.n	800e5be <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e55e:	f107 030c 	add.w	r3, r7, #12
 800e562:	4619      	mov	r1, r3
 800e564:	6878      	ldr	r0, [r7, #4]
 800e566:	f000 f879 	bl	800e65c <SD_FindSCR>
 800e56a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e56c:	697b      	ldr	r3, [r7, #20]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d001      	beq.n	800e576 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e572:	697b      	ldr	r3, [r7, #20]
 800e574:	e023      	b.n	800e5be <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e576:	693b      	ldr	r3, [r7, #16]
 800e578:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d01c      	beq.n	800e5ba <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681a      	ldr	r2, [r3, #0]
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e588:	041b      	lsls	r3, r3, #16
 800e58a:	4619      	mov	r1, r3
 800e58c:	4610      	mov	r0, r2
 800e58e:	f003 ff32 	bl	80123f6 <SDMMC_CmdAppCommand>
 800e592:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e594:	697b      	ldr	r3, [r7, #20]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d001      	beq.n	800e59e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e59a:	697b      	ldr	r3, [r7, #20]
 800e59c:	e00f      	b.n	800e5be <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	2102      	movs	r1, #2
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	f003 ff69 	bl	801247c <SDMMC_CmdBusWidth>
 800e5aa:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e5ac:	697b      	ldr	r3, [r7, #20]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d001      	beq.n	800e5b6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e5b2:	697b      	ldr	r3, [r7, #20]
 800e5b4:	e003      	b.n	800e5be <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	e001      	b.n	800e5be <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e5ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e5be:	4618      	mov	r0, r3
 800e5c0:	3718      	adds	r7, #24
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd80      	pop	{r7, pc}

0800e5c6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e5c6:	b580      	push	{r7, lr}
 800e5c8:	b086      	sub	sp, #24
 800e5ca:	af00      	add	r7, sp, #0
 800e5cc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	60fb      	str	r3, [r7, #12]
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	2100      	movs	r1, #0
 800e5dc:	4618      	mov	r0, r3
 800e5de:	f003 fd7e 	bl	80120de <SDMMC_GetResponse>
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e5e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e5ec:	d102      	bne.n	800e5f4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e5ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e5f2:	e02f      	b.n	800e654 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e5f4:	f107 030c 	add.w	r3, r7, #12
 800e5f8:	4619      	mov	r1, r3
 800e5fa:	6878      	ldr	r0, [r7, #4]
 800e5fc:	f000 f82e 	bl	800e65c <SD_FindSCR>
 800e600:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e602:	697b      	ldr	r3, [r7, #20]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d001      	beq.n	800e60c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e608:	697b      	ldr	r3, [r7, #20]
 800e60a:	e023      	b.n	800e654 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e60c:	693b      	ldr	r3, [r7, #16]
 800e60e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e612:	2b00      	cmp	r3, #0
 800e614:	d01c      	beq.n	800e650 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681a      	ldr	r2, [r3, #0]
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e61e:	041b      	lsls	r3, r3, #16
 800e620:	4619      	mov	r1, r3
 800e622:	4610      	mov	r0, r2
 800e624:	f003 fee7 	bl	80123f6 <SDMMC_CmdAppCommand>
 800e628:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e62a:	697b      	ldr	r3, [r7, #20]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d001      	beq.n	800e634 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e630:	697b      	ldr	r3, [r7, #20]
 800e632:	e00f      	b.n	800e654 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	2100      	movs	r1, #0
 800e63a:	4618      	mov	r0, r3
 800e63c:	f003 ff1e 	bl	801247c <SDMMC_CmdBusWidth>
 800e640:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e642:	697b      	ldr	r3, [r7, #20]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d001      	beq.n	800e64c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e648:	697b      	ldr	r3, [r7, #20]
 800e64a:	e003      	b.n	800e654 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e64c:	2300      	movs	r3, #0
 800e64e:	e001      	b.n	800e654 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e650:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e654:	4618      	mov	r0, r3
 800e656:	3718      	adds	r7, #24
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd80      	pop	{r7, pc}

0800e65c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b08e      	sub	sp, #56	; 0x38
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
 800e664:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e666:	f7f5 fa4b 	bl	8003b00 <HAL_GetTick>
 800e66a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e66c:	2300      	movs	r3, #0
 800e66e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800e670:	2300      	movs	r3, #0
 800e672:	60bb      	str	r3, [r7, #8]
 800e674:	2300      	movs	r3, #0
 800e676:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	2108      	movs	r1, #8
 800e682:	4618      	mov	r0, r3
 800e684:	f003 fd6a 	bl	801215c <SDMMC_CmdBlockLength>
 800e688:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d001      	beq.n	800e694 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e692:	e0ad      	b.n	800e7f0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681a      	ldr	r2, [r3, #0]
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e69c:	041b      	lsls	r3, r3, #16
 800e69e:	4619      	mov	r1, r3
 800e6a0:	4610      	mov	r0, r2
 800e6a2:	f003 fea8 	bl	80123f6 <SDMMC_CmdAppCommand>
 800e6a6:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d001      	beq.n	800e6b2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800e6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6b0:	e09e      	b.n	800e7f0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e6b2:	f04f 33ff 	mov.w	r3, #4294967295
 800e6b6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e6b8:	2308      	movs	r3, #8
 800e6ba:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e6bc:	2330      	movs	r3, #48	; 0x30
 800e6be:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e6c0:	2302      	movs	r3, #2
 800e6c2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e6c8:	2301      	movs	r3, #1
 800e6ca:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	f107 0210 	add.w	r2, r7, #16
 800e6d4:	4611      	mov	r1, r2
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	f003 fd14 	bl	8012104 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f003 feee 	bl	80124c2 <SDMMC_CmdSendSCR>
 800e6e6:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d027      	beq.n	800e73e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800e6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6f0:	e07e      	b.n	800e7f0 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d113      	bne.n	800e728 <SD_FindSCR+0xcc>
 800e700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e702:	2b00      	cmp	r3, #0
 800e704:	d110      	bne.n	800e728 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	4618      	mov	r0, r3
 800e70c:	f003 fc72 	bl	8011ff4 <SDMMC_ReadFIFO>
 800e710:	4603      	mov	r3, r0
 800e712:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	4618      	mov	r0, r3
 800e71a:	f003 fc6b 	bl	8011ff4 <SDMMC_ReadFIFO>
 800e71e:	4603      	mov	r3, r0
 800e720:	60fb      	str	r3, [r7, #12]
      index++;
 800e722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e724:	3301      	adds	r3, #1
 800e726:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e728:	f7f5 f9ea 	bl	8003b00 <HAL_GetTick>
 800e72c:	4602      	mov	r2, r0
 800e72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e730:	1ad3      	subs	r3, r2, r3
 800e732:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e736:	d102      	bne.n	800e73e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e738:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e73c:	e058      	b.n	800e7f0 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e744:	f240 532a 	movw	r3, #1322	; 0x52a
 800e748:	4013      	ands	r3, r2
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d0d1      	beq.n	800e6f2 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e754:	f003 0308 	and.w	r3, r3, #8
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d005      	beq.n	800e768 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	2208      	movs	r2, #8
 800e762:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e764:	2308      	movs	r3, #8
 800e766:	e043      	b.n	800e7f0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e76e:	f003 0302 	and.w	r3, r3, #2
 800e772:	2b00      	cmp	r3, #0
 800e774:	d005      	beq.n	800e782 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	2202      	movs	r2, #2
 800e77c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e77e:	2302      	movs	r3, #2
 800e780:	e036      	b.n	800e7f0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e788:	f003 0320 	and.w	r3, r3, #32
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d005      	beq.n	800e79c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	2220      	movs	r2, #32
 800e796:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e798:	2320      	movs	r3, #32
 800e79a:	e029      	b.n	800e7f0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	4a15      	ldr	r2, [pc, #84]	; (800e7f8 <SD_FindSCR+0x19c>)
 800e7a2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	061a      	lsls	r2, r3, #24
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	021b      	lsls	r3, r3, #8
 800e7ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e7b0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	0a1b      	lsrs	r3, r3, #8
 800e7b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e7ba:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	0e1b      	lsrs	r3, r3, #24
 800e7c0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7c4:	601a      	str	r2, [r3, #0]
    scr++;
 800e7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7c8:	3304      	adds	r3, #4
 800e7ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e7cc:	68bb      	ldr	r3, [r7, #8]
 800e7ce:	061a      	lsls	r2, r3, #24
 800e7d0:	68bb      	ldr	r3, [r7, #8]
 800e7d2:	021b      	lsls	r3, r3, #8
 800e7d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e7d8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e7da:	68bb      	ldr	r3, [r7, #8]
 800e7dc:	0a1b      	lsrs	r3, r3, #8
 800e7de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e7e2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e7e4:	68bb      	ldr	r3, [r7, #8]
 800e7e6:	0e1b      	lsrs	r3, r3, #24
 800e7e8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ec:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e7ee:	2300      	movs	r3, #0
}
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	3738      	adds	r7, #56	; 0x38
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	bd80      	pop	{r7, pc}
 800e7f8:	18000f3a 	.word	0x18000f3a

0800e7fc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b086      	sub	sp, #24
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e808:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e80e:	2b1f      	cmp	r3, #31
 800e810:	d936      	bls.n	800e880 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800e812:	2300      	movs	r3, #0
 800e814:	617b      	str	r3, [r7, #20]
 800e816:	e027      	b.n	800e868 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	4618      	mov	r0, r3
 800e81e:	f003 fbe9 	bl	8011ff4 <SDMMC_ReadFIFO>
 800e822:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	b2da      	uxtb	r2, r3
 800e828:	693b      	ldr	r3, [r7, #16]
 800e82a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e82c:	693b      	ldr	r3, [r7, #16]
 800e82e:	3301      	adds	r3, #1
 800e830:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	0a1b      	lsrs	r3, r3, #8
 800e836:	b2da      	uxtb	r2, r3
 800e838:	693b      	ldr	r3, [r7, #16]
 800e83a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e83c:	693b      	ldr	r3, [r7, #16]
 800e83e:	3301      	adds	r3, #1
 800e840:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	0c1b      	lsrs	r3, r3, #16
 800e846:	b2da      	uxtb	r2, r3
 800e848:	693b      	ldr	r3, [r7, #16]
 800e84a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e84c:	693b      	ldr	r3, [r7, #16]
 800e84e:	3301      	adds	r3, #1
 800e850:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	0e1b      	lsrs	r3, r3, #24
 800e856:	b2da      	uxtb	r2, r3
 800e858:	693b      	ldr	r3, [r7, #16]
 800e85a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e85c:	693b      	ldr	r3, [r7, #16]
 800e85e:	3301      	adds	r3, #1
 800e860:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800e862:	697b      	ldr	r3, [r7, #20]
 800e864:	3301      	adds	r3, #1
 800e866:	617b      	str	r3, [r7, #20]
 800e868:	697b      	ldr	r3, [r7, #20]
 800e86a:	2b07      	cmp	r3, #7
 800e86c:	d9d4      	bls.n	800e818 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	693a      	ldr	r2, [r7, #16]
 800e872:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e878:	f1a3 0220 	sub.w	r2, r3, #32
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800e880:	bf00      	nop
 800e882:	3718      	adds	r7, #24
 800e884:	46bd      	mov	sp, r7
 800e886:	bd80      	pop	{r7, pc}

0800e888 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b086      	sub	sp, #24
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	69db      	ldr	r3, [r3, #28]
 800e894:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	6a1b      	ldr	r3, [r3, #32]
 800e89a:	2b1f      	cmp	r3, #31
 800e89c:	d93a      	bls.n	800e914 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800e89e:	2300      	movs	r3, #0
 800e8a0:	617b      	str	r3, [r7, #20]
 800e8a2:	e02b      	b.n	800e8fc <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800e8a4:	693b      	ldr	r3, [r7, #16]
 800e8a6:	781b      	ldrb	r3, [r3, #0]
 800e8a8:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e8aa:	693b      	ldr	r3, [r7, #16]
 800e8ac:	3301      	adds	r3, #1
 800e8ae:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e8b0:	693b      	ldr	r3, [r7, #16]
 800e8b2:	781b      	ldrb	r3, [r3, #0]
 800e8b4:	021a      	lsls	r2, r3, #8
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	4313      	orrs	r3, r2
 800e8ba:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e8bc:	693b      	ldr	r3, [r7, #16]
 800e8be:	3301      	adds	r3, #1
 800e8c0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e8c2:	693b      	ldr	r3, [r7, #16]
 800e8c4:	781b      	ldrb	r3, [r3, #0]
 800e8c6:	041a      	lsls	r2, r3, #16
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	4313      	orrs	r3, r2
 800e8cc:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e8ce:	693b      	ldr	r3, [r7, #16]
 800e8d0:	3301      	adds	r3, #1
 800e8d2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e8d4:	693b      	ldr	r3, [r7, #16]
 800e8d6:	781b      	ldrb	r3, [r3, #0]
 800e8d8:	061a      	lsls	r2, r3, #24
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	4313      	orrs	r3, r2
 800e8de:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e8e0:	693b      	ldr	r3, [r7, #16]
 800e8e2:	3301      	adds	r3, #1
 800e8e4:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	f107 020c 	add.w	r2, r7, #12
 800e8ee:	4611      	mov	r1, r2
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	f003 fb8c 	bl	801200e <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800e8f6:	697b      	ldr	r3, [r7, #20]
 800e8f8:	3301      	adds	r3, #1
 800e8fa:	617b      	str	r3, [r7, #20]
 800e8fc:	697b      	ldr	r3, [r7, #20]
 800e8fe:	2b07      	cmp	r3, #7
 800e900:	d9d0      	bls.n	800e8a4 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	693a      	ldr	r2, [r7, #16]
 800e906:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	6a1b      	ldr	r3, [r3, #32]
 800e90c:	f1a3 0220 	sub.w	r2, r3, #32
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	621a      	str	r2, [r3, #32]
  }
}
 800e914:	bf00      	nop
 800e916:	3718      	adds	r7, #24
 800e918:	46bd      	mov	sp, r7
 800e91a:	bd80      	pop	{r7, pc}

0800e91c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e91c:	b480      	push	{r7}
 800e91e:	b083      	sub	sp, #12
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e924:	bf00      	nop
 800e926:	370c      	adds	r7, #12
 800e928:	46bd      	mov	sp, r7
 800e92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92e:	4770      	bx	lr

0800e930 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e930:	b480      	push	{r7}
 800e932:	b083      	sub	sp, #12
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e938:	bf00      	nop
 800e93a:	370c      	adds	r7, #12
 800e93c:	46bd      	mov	sp, r7
 800e93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e942:	4770      	bx	lr

0800e944 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e944:	b480      	push	{r7}
 800e946:	b083      	sub	sp, #12
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e94c:	bf00      	nop
 800e94e:	370c      	adds	r7, #12
 800e950:	46bd      	mov	sp, r7
 800e952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e956:	4770      	bx	lr

0800e958 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e958:	b480      	push	{r7}
 800e95a:	b083      	sub	sp, #12
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e960:	bf00      	nop
 800e962:	370c      	adds	r7, #12
 800e964:	46bd      	mov	sp, r7
 800e966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96a:	4770      	bx	lr

0800e96c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b084      	sub	sp, #16
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d101      	bne.n	800e97e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e97a:	2301      	movs	r3, #1
 800e97c:	e10f      	b.n	800eb9e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2200      	movs	r2, #0
 800e982:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	4a87      	ldr	r2, [pc, #540]	; (800eba8 <HAL_SPI_Init+0x23c>)
 800e98a:	4293      	cmp	r3, r2
 800e98c:	d00f      	beq.n	800e9ae <HAL_SPI_Init+0x42>
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	4a86      	ldr	r2, [pc, #536]	; (800ebac <HAL_SPI_Init+0x240>)
 800e994:	4293      	cmp	r3, r2
 800e996:	d00a      	beq.n	800e9ae <HAL_SPI_Init+0x42>
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	4a84      	ldr	r2, [pc, #528]	; (800ebb0 <HAL_SPI_Init+0x244>)
 800e99e:	4293      	cmp	r3, r2
 800e9a0:	d005      	beq.n	800e9ae <HAL_SPI_Init+0x42>
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	68db      	ldr	r3, [r3, #12]
 800e9a6:	2b0f      	cmp	r3, #15
 800e9a8:	d901      	bls.n	800e9ae <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e9aa:	2301      	movs	r3, #1
 800e9ac:	e0f7      	b.n	800eb9e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e9ae:	6878      	ldr	r0, [r7, #4]
 800e9b0:	f000 fd5a 	bl	800f468 <SPI_GetPacketSize>
 800e9b4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	4a7b      	ldr	r2, [pc, #492]	; (800eba8 <HAL_SPI_Init+0x23c>)
 800e9bc:	4293      	cmp	r3, r2
 800e9be:	d00c      	beq.n	800e9da <HAL_SPI_Init+0x6e>
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	4a79      	ldr	r2, [pc, #484]	; (800ebac <HAL_SPI_Init+0x240>)
 800e9c6:	4293      	cmp	r3, r2
 800e9c8:	d007      	beq.n	800e9da <HAL_SPI_Init+0x6e>
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	4a78      	ldr	r2, [pc, #480]	; (800ebb0 <HAL_SPI_Init+0x244>)
 800e9d0:	4293      	cmp	r3, r2
 800e9d2:	d002      	beq.n	800e9da <HAL_SPI_Init+0x6e>
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	2b08      	cmp	r3, #8
 800e9d8:	d811      	bhi.n	800e9fe <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e9de:	4a72      	ldr	r2, [pc, #456]	; (800eba8 <HAL_SPI_Init+0x23c>)
 800e9e0:	4293      	cmp	r3, r2
 800e9e2:	d009      	beq.n	800e9f8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	4a70      	ldr	r2, [pc, #448]	; (800ebac <HAL_SPI_Init+0x240>)
 800e9ea:	4293      	cmp	r3, r2
 800e9ec:	d004      	beq.n	800e9f8 <HAL_SPI_Init+0x8c>
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	4a6f      	ldr	r2, [pc, #444]	; (800ebb0 <HAL_SPI_Init+0x244>)
 800e9f4:	4293      	cmp	r3, r2
 800e9f6:	d104      	bne.n	800ea02 <HAL_SPI_Init+0x96>
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	2b10      	cmp	r3, #16
 800e9fc:	d901      	bls.n	800ea02 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e9fe:	2301      	movs	r3, #1
 800ea00:	e0cd      	b.n	800eb9e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ea08:	b2db      	uxtb	r3, r3
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d106      	bne.n	800ea1c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	2200      	movs	r2, #0
 800ea12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ea16:	6878      	ldr	r0, [r7, #4]
 800ea18:	f7f4 fa8a 	bl	8002f30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	2202      	movs	r2, #2
 800ea20:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	681a      	ldr	r2, [r3, #0]
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	f022 0201 	bic.w	r2, r2, #1
 800ea32:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	689b      	ldr	r3, [r3, #8]
 800ea3a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800ea3e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	699b      	ldr	r3, [r3, #24]
 800ea44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ea48:	d119      	bne.n	800ea7e <HAL_SPI_Init+0x112>
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	685b      	ldr	r3, [r3, #4]
 800ea4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ea52:	d103      	bne.n	800ea5c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d008      	beq.n	800ea6e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d10c      	bne.n	800ea7e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ea68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ea6c:	d107      	bne.n	800ea7e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	681a      	ldr	r2, [r3, #0]
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ea7c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	685b      	ldr	r3, [r3, #4]
 800ea82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d00f      	beq.n	800eaaa <HAL_SPI_Init+0x13e>
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	68db      	ldr	r3, [r3, #12]
 800ea8e:	2b06      	cmp	r3, #6
 800ea90:	d90b      	bls.n	800eaaa <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	430a      	orrs	r2, r1
 800eaa6:	601a      	str	r2, [r3, #0]
 800eaa8:	e007      	b.n	800eaba <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	681a      	ldr	r2, [r3, #0]
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800eab8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	69da      	ldr	r2, [r3, #28]
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eac2:	431a      	orrs	r2, r3
 800eac4:	68bb      	ldr	r3, [r7, #8]
 800eac6:	431a      	orrs	r2, r3
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eacc:	ea42 0103 	orr.w	r1, r2, r3
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	68da      	ldr	r2, [r3, #12]
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	430a      	orrs	r2, r1
 800eada:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eae4:	431a      	orrs	r2, r3
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eaea:	431a      	orrs	r2, r3
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	699b      	ldr	r3, [r3, #24]
 800eaf0:	431a      	orrs	r2, r3
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	691b      	ldr	r3, [r3, #16]
 800eaf6:	431a      	orrs	r2, r3
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	695b      	ldr	r3, [r3, #20]
 800eafc:	431a      	orrs	r2, r3
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	6a1b      	ldr	r3, [r3, #32]
 800eb02:	431a      	orrs	r2, r3
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	685b      	ldr	r3, [r3, #4]
 800eb08:	431a      	orrs	r2, r3
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eb0e:	431a      	orrs	r2, r3
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	689b      	ldr	r3, [r3, #8]
 800eb14:	431a      	orrs	r2, r3
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eb1a:	ea42 0103 	orr.w	r1, r2, r3
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	430a      	orrs	r2, r1
 800eb28:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	685b      	ldr	r3, [r3, #4]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d113      	bne.n	800eb5a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	689b      	ldr	r3, [r3, #8]
 800eb38:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eb44:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	689b      	ldr	r3, [r3, #8]
 800eb4c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800eb58:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	f022 0201 	bic.w	r2, r2, #1
 800eb68:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	685b      	ldr	r3, [r3, #4]
 800eb6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d00a      	beq.n	800eb8c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	68db      	ldr	r3, [r3, #12]
 800eb7c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	430a      	orrs	r2, r1
 800eb8a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2200      	movs	r2, #0
 800eb90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2201      	movs	r2, #1
 800eb98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800eb9c:	2300      	movs	r3, #0
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	3710      	adds	r7, #16
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}
 800eba6:	bf00      	nop
 800eba8:	40013000 	.word	0x40013000
 800ebac:	40003800 	.word	0x40003800
 800ebb0:	40003c00 	.word	0x40003c00

0800ebb4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b08a      	sub	sp, #40	; 0x28
 800ebb8:	af02      	add	r7, sp, #8
 800ebba:	60f8      	str	r0, [r7, #12]
 800ebbc:	60b9      	str	r1, [r7, #8]
 800ebbe:	603b      	str	r3, [r7, #0]
 800ebc0:	4613      	mov	r3, r2
 800ebc2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	3320      	adds	r3, #32
 800ebca:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ebcc:	2300      	movs	r3, #0
 800ebce:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ebd6:	2b01      	cmp	r3, #1
 800ebd8:	d101      	bne.n	800ebde <HAL_SPI_Transmit+0x2a>
 800ebda:	2302      	movs	r3, #2
 800ebdc:	e1e1      	b.n	800efa2 <HAL_SPI_Transmit+0x3ee>
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	2201      	movs	r2, #1
 800ebe2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ebe6:	f7f4 ff8b 	bl	8003b00 <HAL_GetTick>
 800ebea:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ebf2:	b2db      	uxtb	r3, r3
 800ebf4:	2b01      	cmp	r3, #1
 800ebf6:	d007      	beq.n	800ec08 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800ebf8:	2302      	movs	r3, #2
 800ebfa:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	2200      	movs	r2, #0
 800ec00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ec04:	7efb      	ldrb	r3, [r7, #27]
 800ec06:	e1cc      	b.n	800efa2 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d002      	beq.n	800ec14 <HAL_SPI_Transmit+0x60>
 800ec0e:	88fb      	ldrh	r3, [r7, #6]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d107      	bne.n	800ec24 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800ec14:	2301      	movs	r3, #1
 800ec16:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ec20:	7efb      	ldrb	r3, [r7, #27]
 800ec22:	e1be      	b.n	800efa2 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	2203      	movs	r2, #3
 800ec28:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	2200      	movs	r2, #0
 800ec30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	68ba      	ldr	r2, [r7, #8]
 800ec38:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	88fa      	ldrh	r2, [r7, #6]
 800ec3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	88fa      	ldrh	r2, [r7, #6]
 800ec46:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	2200      	movs	r2, #0
 800ec54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	2200      	movs	r2, #0
 800ec64:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	2200      	movs	r2, #0
 800ec6a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	689b      	ldr	r3, [r3, #8]
 800ec70:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ec74:	d108      	bne.n	800ec88 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	681a      	ldr	r2, [r3, #0]
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ec84:	601a      	str	r2, [r3, #0]
 800ec86:	e009      	b.n	800ec9c <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	68db      	ldr	r3, [r3, #12]
 800ec8e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ec9a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	685a      	ldr	r2, [r3, #4]
 800eca2:	4b96      	ldr	r3, [pc, #600]	; (800eefc <HAL_SPI_Transmit+0x348>)
 800eca4:	4013      	ands	r3, r2
 800eca6:	88f9      	ldrh	r1, [r7, #6]
 800eca8:	68fa      	ldr	r2, [r7, #12]
 800ecaa:	6812      	ldr	r2, [r2, #0]
 800ecac:	430b      	orrs	r3, r1
 800ecae:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	681a      	ldr	r2, [r3, #0]
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	f042 0201 	orr.w	r2, r2, #1
 800ecbe:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	685b      	ldr	r3, [r3, #4]
 800ecc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ecc8:	d107      	bne.n	800ecda <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	681a      	ldr	r2, [r3, #0]
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ecd8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	68db      	ldr	r3, [r3, #12]
 800ecde:	2b0f      	cmp	r3, #15
 800ece0:	d947      	bls.n	800ed72 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ece2:	e03f      	b.n	800ed64 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	695b      	ldr	r3, [r3, #20]
 800ecea:	f003 0302 	and.w	r3, r3, #2
 800ecee:	2b02      	cmp	r3, #2
 800ecf0:	d114      	bne.n	800ed1c <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	6812      	ldr	r2, [r2, #0]
 800ecfc:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed02:	1d1a      	adds	r2, r3, #4
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed0e:	b29b      	uxth	r3, r3
 800ed10:	3b01      	subs	r3, #1
 800ed12:	b29a      	uxth	r2, r3
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ed1a:	e023      	b.n	800ed64 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ed1c:	f7f4 fef0 	bl	8003b00 <HAL_GetTick>
 800ed20:	4602      	mov	r2, r0
 800ed22:	697b      	ldr	r3, [r7, #20]
 800ed24:	1ad3      	subs	r3, r2, r3
 800ed26:	683a      	ldr	r2, [r7, #0]
 800ed28:	429a      	cmp	r2, r3
 800ed2a:	d803      	bhi.n	800ed34 <HAL_SPI_Transmit+0x180>
 800ed2c:	683b      	ldr	r3, [r7, #0]
 800ed2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed32:	d102      	bne.n	800ed3a <HAL_SPI_Transmit+0x186>
 800ed34:	683b      	ldr	r3, [r7, #0]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d114      	bne.n	800ed64 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ed3a:	68f8      	ldr	r0, [r7, #12]
 800ed3c:	f000 fac6 	bl	800f2cc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	2200      	movs	r2, #0
 800ed44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed4e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	2201      	movs	r2, #1
 800ed5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ed60:	2303      	movs	r3, #3
 800ed62:	e11e      	b.n	800efa2 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed6a:	b29b      	uxth	r3, r3
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d1b9      	bne.n	800ece4 <HAL_SPI_Transmit+0x130>
 800ed70:	e0f1      	b.n	800ef56 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	68db      	ldr	r3, [r3, #12]
 800ed76:	2b07      	cmp	r3, #7
 800ed78:	f240 80e6 	bls.w	800ef48 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ed7c:	e05d      	b.n	800ee3a <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	695b      	ldr	r3, [r3, #20]
 800ed84:	f003 0302 	and.w	r3, r3, #2
 800ed88:	2b02      	cmp	r3, #2
 800ed8a:	d132      	bne.n	800edf2 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed92:	b29b      	uxth	r3, r3
 800ed94:	2b01      	cmp	r3, #1
 800ed96:	d918      	bls.n	800edca <HAL_SPI_Transmit+0x216>
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d014      	beq.n	800edca <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	6812      	ldr	r2, [r2, #0]
 800edaa:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800edb0:	1d1a      	adds	r2, r3, #4
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800edbc:	b29b      	uxth	r3, r3
 800edbe:	3b02      	subs	r3, #2
 800edc0:	b29a      	uxth	r2, r3
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800edc8:	e037      	b.n	800ee3a <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800edce:	881a      	ldrh	r2, [r3, #0]
 800edd0:	69fb      	ldr	r3, [r7, #28]
 800edd2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800edd8:	1c9a      	adds	r2, r3, #2
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ede4:	b29b      	uxth	r3, r3
 800ede6:	3b01      	subs	r3, #1
 800ede8:	b29a      	uxth	r2, r3
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800edf0:	e023      	b.n	800ee3a <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800edf2:	f7f4 fe85 	bl	8003b00 <HAL_GetTick>
 800edf6:	4602      	mov	r2, r0
 800edf8:	697b      	ldr	r3, [r7, #20]
 800edfa:	1ad3      	subs	r3, r2, r3
 800edfc:	683a      	ldr	r2, [r7, #0]
 800edfe:	429a      	cmp	r2, r3
 800ee00:	d803      	bhi.n	800ee0a <HAL_SPI_Transmit+0x256>
 800ee02:	683b      	ldr	r3, [r7, #0]
 800ee04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee08:	d102      	bne.n	800ee10 <HAL_SPI_Transmit+0x25c>
 800ee0a:	683b      	ldr	r3, [r7, #0]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d114      	bne.n	800ee3a <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ee10:	68f8      	ldr	r0, [r7, #12]
 800ee12:	f000 fa5b 	bl	800f2cc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	2200      	movs	r2, #0
 800ee1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	2201      	movs	r2, #1
 800ee32:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ee36:	2303      	movs	r3, #3
 800ee38:	e0b3      	b.n	800efa2 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee40:	b29b      	uxth	r3, r3
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d19b      	bne.n	800ed7e <HAL_SPI_Transmit+0x1ca>
 800ee46:	e086      	b.n	800ef56 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	695b      	ldr	r3, [r3, #20]
 800ee4e:	f003 0302 	and.w	r3, r3, #2
 800ee52:	2b02      	cmp	r3, #2
 800ee54:	d154      	bne.n	800ef00 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee5c:	b29b      	uxth	r3, r3
 800ee5e:	2b03      	cmp	r3, #3
 800ee60:	d918      	bls.n	800ee94 <HAL_SPI_Transmit+0x2e0>
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee66:	2b40      	cmp	r3, #64	; 0x40
 800ee68:	d914      	bls.n	800ee94 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	6812      	ldr	r2, [r2, #0]
 800ee74:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee7a:	1d1a      	adds	r2, r3, #4
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee86:	b29b      	uxth	r3, r3
 800ee88:	3b04      	subs	r3, #4
 800ee8a:	b29a      	uxth	r2, r3
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ee92:	e059      	b.n	800ef48 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee9a:	b29b      	uxth	r3, r3
 800ee9c:	2b01      	cmp	r3, #1
 800ee9e:	d917      	bls.n	800eed0 <HAL_SPI_Transmit+0x31c>
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d013      	beq.n	800eed0 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eeac:	881a      	ldrh	r2, [r3, #0]
 800eeae:	69fb      	ldr	r3, [r7, #28]
 800eeb0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eeb6:	1c9a      	adds	r2, r3, #2
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eec2:	b29b      	uxth	r3, r3
 800eec4:	3b02      	subs	r3, #2
 800eec6:	b29a      	uxth	r2, r3
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800eece:	e03b      	b.n	800ef48 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	3320      	adds	r3, #32
 800eeda:	7812      	ldrb	r2, [r2, #0]
 800eedc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eee2:	1c5a      	adds	r2, r3, #1
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eeee:	b29b      	uxth	r3, r3
 800eef0:	3b01      	subs	r3, #1
 800eef2:	b29a      	uxth	r2, r3
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800eefa:	e025      	b.n	800ef48 <HAL_SPI_Transmit+0x394>
 800eefc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ef00:	f7f4 fdfe 	bl	8003b00 <HAL_GetTick>
 800ef04:	4602      	mov	r2, r0
 800ef06:	697b      	ldr	r3, [r7, #20]
 800ef08:	1ad3      	subs	r3, r2, r3
 800ef0a:	683a      	ldr	r2, [r7, #0]
 800ef0c:	429a      	cmp	r2, r3
 800ef0e:	d803      	bhi.n	800ef18 <HAL_SPI_Transmit+0x364>
 800ef10:	683b      	ldr	r3, [r7, #0]
 800ef12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef16:	d102      	bne.n	800ef1e <HAL_SPI_Transmit+0x36a>
 800ef18:	683b      	ldr	r3, [r7, #0]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d114      	bne.n	800ef48 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ef1e:	68f8      	ldr	r0, [r7, #12]
 800ef20:	f000 f9d4 	bl	800f2cc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	2200      	movs	r2, #0
 800ef28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef32:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	2201      	movs	r2, #1
 800ef40:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ef44:	2303      	movs	r3, #3
 800ef46:	e02c      	b.n	800efa2 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ef4e:	b29b      	uxth	r3, r3
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	f47f af79 	bne.w	800ee48 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	9300      	str	r3, [sp, #0]
 800ef5a:	683b      	ldr	r3, [r7, #0]
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	2108      	movs	r1, #8
 800ef60:	68f8      	ldr	r0, [r7, #12]
 800ef62:	f000 fa53 	bl	800f40c <SPI_WaitOnFlagUntilTimeout>
 800ef66:	4603      	mov	r3, r0
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d007      	beq.n	800ef7c <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef72:	f043 0220 	orr.w	r2, r3, #32
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ef7c:	68f8      	ldr	r0, [r7, #12]
 800ef7e:	f000 f9a5 	bl	800f2cc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	2200      	movs	r2, #0
 800ef86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	2201      	movs	r2, #1
 800ef8e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d001      	beq.n	800efa0 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800ef9c:	2301      	movs	r3, #1
 800ef9e:	e000      	b.n	800efa2 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800efa0:	7efb      	ldrb	r3, [r7, #27]
}
 800efa2:	4618      	mov	r0, r3
 800efa4:	3720      	adds	r7, #32
 800efa6:	46bd      	mov	sp, r7
 800efa8:	bd80      	pop	{r7, pc}
 800efaa:	bf00      	nop

0800efac <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800efac:	b580      	push	{r7, lr}
 800efae:	b088      	sub	sp, #32
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	60f8      	str	r0, [r7, #12]
 800efb4:	60b9      	str	r1, [r7, #8]
 800efb6:	603b      	str	r3, [r7, #0]
 800efb8:	4613      	mov	r3, r2
 800efba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800efbc:	2300      	movs	r3, #0
 800efbe:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	3330      	adds	r3, #48	; 0x30
 800efc6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800efce:	2b01      	cmp	r3, #1
 800efd0:	d101      	bne.n	800efd6 <HAL_SPI_Receive+0x2a>
 800efd2:	2302      	movs	r3, #2
 800efd4:	e173      	b.n	800f2be <HAL_SPI_Receive+0x312>
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	2201      	movs	r2, #1
 800efda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800efde:	f7f4 fd8f 	bl	8003b00 <HAL_GetTick>
 800efe2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800efea:	b2db      	uxtb	r3, r3
 800efec:	2b01      	cmp	r3, #1
 800efee:	d007      	beq.n	800f000 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800eff0:	2302      	movs	r3, #2
 800eff2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	2200      	movs	r2, #0
 800eff8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800effc:	7ffb      	ldrb	r3, [r7, #31]
 800effe:	e15e      	b.n	800f2be <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f000:	68bb      	ldr	r3, [r7, #8]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d002      	beq.n	800f00c <HAL_SPI_Receive+0x60>
 800f006:	88fb      	ldrh	r3, [r7, #6]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d107      	bne.n	800f01c <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800f00c:	2301      	movs	r3, #1
 800f00e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	2200      	movs	r2, #0
 800f014:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f018:	7ffb      	ldrb	r3, [r7, #31]
 800f01a:	e150      	b.n	800f2be <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	2204      	movs	r2, #4
 800f020:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	2200      	movs	r2, #0
 800f028:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	68ba      	ldr	r2, [r7, #8]
 800f030:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	88fa      	ldrh	r2, [r7, #6]
 800f036:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	88fa      	ldrh	r2, [r7, #6]
 800f03e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	2200      	movs	r2, #0
 800f046:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	2200      	movs	r2, #0
 800f04c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	2200      	movs	r2, #0
 800f054:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	2200      	movs	r2, #0
 800f05c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	2200      	movs	r2, #0
 800f062:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	689b      	ldr	r3, [r3, #8]
 800f068:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800f06c:	d108      	bne.n	800f080 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	681a      	ldr	r2, [r3, #0]
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f07c:	601a      	str	r2, [r3, #0]
 800f07e:	e009      	b.n	800f094 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	68db      	ldr	r3, [r3, #12]
 800f086:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800f092:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	685a      	ldr	r2, [r3, #4]
 800f09a:	4b8b      	ldr	r3, [pc, #556]	; (800f2c8 <HAL_SPI_Receive+0x31c>)
 800f09c:	4013      	ands	r3, r2
 800f09e:	88f9      	ldrh	r1, [r7, #6]
 800f0a0:	68fa      	ldr	r2, [r7, #12]
 800f0a2:	6812      	ldr	r2, [r2, #0]
 800f0a4:	430b      	orrs	r3, r1
 800f0a6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	681a      	ldr	r2, [r3, #0]
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	f042 0201 	orr.w	r2, r2, #1
 800f0b6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	685b      	ldr	r3, [r3, #4]
 800f0bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f0c0:	d107      	bne.n	800f0d2 <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	681a      	ldr	r2, [r3, #0]
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f0d0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	68db      	ldr	r3, [r3, #12]
 800f0d6:	2b0f      	cmp	r3, #15
 800f0d8:	d948      	bls.n	800f16c <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f0da:	e040      	b.n	800f15e <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	695a      	ldr	r2, [r3, #20]
 800f0e2:	f248 0308 	movw	r3, #32776	; 0x8008
 800f0e6:	4013      	ands	r3, r2
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d014      	beq.n	800f116 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	681a      	ldr	r2, [r3, #0]
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f0f6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0fc:	1d1a      	adds	r2, r3, #4
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f108:	b29b      	uxth	r3, r3
 800f10a:	3b01      	subs	r3, #1
 800f10c:	b29a      	uxth	r2, r3
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f114:	e023      	b.n	800f15e <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f116:	f7f4 fcf3 	bl	8003b00 <HAL_GetTick>
 800f11a:	4602      	mov	r2, r0
 800f11c:	697b      	ldr	r3, [r7, #20]
 800f11e:	1ad3      	subs	r3, r2, r3
 800f120:	683a      	ldr	r2, [r7, #0]
 800f122:	429a      	cmp	r2, r3
 800f124:	d803      	bhi.n	800f12e <HAL_SPI_Receive+0x182>
 800f126:	683b      	ldr	r3, [r7, #0]
 800f128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f12c:	d102      	bne.n	800f134 <HAL_SPI_Receive+0x188>
 800f12e:	683b      	ldr	r3, [r7, #0]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d114      	bne.n	800f15e <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f134:	68f8      	ldr	r0, [r7, #12]
 800f136:	f000 f8c9 	bl	800f2cc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	2200      	movs	r2, #0
 800f13e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f148:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	2201      	movs	r2, #1
 800f156:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f15a:	2303      	movs	r3, #3
 800f15c:	e0af      	b.n	800f2be <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f164:	b29b      	uxth	r3, r3
 800f166:	2b00      	cmp	r3, #0
 800f168:	d1b8      	bne.n	800f0dc <HAL_SPI_Receive+0x130>
 800f16a:	e095      	b.n	800f298 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	68db      	ldr	r3, [r3, #12]
 800f170:	2b07      	cmp	r3, #7
 800f172:	f240 808b 	bls.w	800f28c <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f176:	e03f      	b.n	800f1f8 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	695b      	ldr	r3, [r3, #20]
 800f17e:	f003 0301 	and.w	r3, r3, #1
 800f182:	2b01      	cmp	r3, #1
 800f184:	d114      	bne.n	800f1b0 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f18a:	69ba      	ldr	r2, [r7, #24]
 800f18c:	8812      	ldrh	r2, [r2, #0]
 800f18e:	b292      	uxth	r2, r2
 800f190:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f196:	1c9a      	adds	r2, r3, #2
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f1a2:	b29b      	uxth	r3, r3
 800f1a4:	3b01      	subs	r3, #1
 800f1a6:	b29a      	uxth	r2, r3
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f1ae:	e023      	b.n	800f1f8 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f1b0:	f7f4 fca6 	bl	8003b00 <HAL_GetTick>
 800f1b4:	4602      	mov	r2, r0
 800f1b6:	697b      	ldr	r3, [r7, #20]
 800f1b8:	1ad3      	subs	r3, r2, r3
 800f1ba:	683a      	ldr	r2, [r7, #0]
 800f1bc:	429a      	cmp	r2, r3
 800f1be:	d803      	bhi.n	800f1c8 <HAL_SPI_Receive+0x21c>
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1c6:	d102      	bne.n	800f1ce <HAL_SPI_Receive+0x222>
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d114      	bne.n	800f1f8 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f1ce:	68f8      	ldr	r0, [r7, #12]
 800f1d0:	f000 f87c 	bl	800f2cc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	2201      	movs	r2, #1
 800f1f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f1f4:	2303      	movs	r3, #3
 800f1f6:	e062      	b.n	800f2be <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f1fe:	b29b      	uxth	r3, r3
 800f200:	2b00      	cmp	r3, #0
 800f202:	d1b9      	bne.n	800f178 <HAL_SPI_Receive+0x1cc>
 800f204:	e048      	b.n	800f298 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	695b      	ldr	r3, [r3, #20]
 800f20c:	f003 0301 	and.w	r3, r3, #1
 800f210:	2b01      	cmp	r3, #1
 800f212:	d117      	bne.n	800f244 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f220:	7812      	ldrb	r2, [r2, #0]
 800f222:	b2d2      	uxtb	r2, r2
 800f224:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f22a:	1c5a      	adds	r2, r3, #1
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f236:	b29b      	uxth	r3, r3
 800f238:	3b01      	subs	r3, #1
 800f23a:	b29a      	uxth	r2, r3
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f242:	e023      	b.n	800f28c <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f244:	f7f4 fc5c 	bl	8003b00 <HAL_GetTick>
 800f248:	4602      	mov	r2, r0
 800f24a:	697b      	ldr	r3, [r7, #20]
 800f24c:	1ad3      	subs	r3, r2, r3
 800f24e:	683a      	ldr	r2, [r7, #0]
 800f250:	429a      	cmp	r2, r3
 800f252:	d803      	bhi.n	800f25c <HAL_SPI_Receive+0x2b0>
 800f254:	683b      	ldr	r3, [r7, #0]
 800f256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f25a:	d102      	bne.n	800f262 <HAL_SPI_Receive+0x2b6>
 800f25c:	683b      	ldr	r3, [r7, #0]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d114      	bne.n	800f28c <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f262:	68f8      	ldr	r0, [r7, #12]
 800f264:	f000 f832 	bl	800f2cc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	2200      	movs	r2, #0
 800f26c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f276:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	2201      	movs	r2, #1
 800f284:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f288:	2303      	movs	r3, #3
 800f28a:	e018      	b.n	800f2be <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f292:	b29b      	uxth	r3, r3
 800f294:	2b00      	cmp	r3, #0
 800f296:	d1b6      	bne.n	800f206 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f298:	68f8      	ldr	r0, [r7, #12]
 800f29a:	f000 f817 	bl	800f2cc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	2200      	movs	r2, #0
 800f2a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	2201      	movs	r2, #1
 800f2aa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d001      	beq.n	800f2bc <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800f2b8:	2301      	movs	r3, #1
 800f2ba:	e000      	b.n	800f2be <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800f2bc:	7ffb      	ldrb	r3, [r7, #31]
}
 800f2be:	4618      	mov	r0, r3
 800f2c0:	3720      	adds	r7, #32
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	bd80      	pop	{r7, pc}
 800f2c6:	bf00      	nop
 800f2c8:	ffff0000 	.word	0xffff0000

0800f2cc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f2cc:	b480      	push	{r7}
 800f2ce:	b085      	sub	sp, #20
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	695b      	ldr	r3, [r3, #20]
 800f2da:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	699a      	ldr	r2, [r3, #24]
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	f042 0208 	orr.w	r2, r2, #8
 800f2ea:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	699a      	ldr	r2, [r3, #24]
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	f042 0210 	orr.w	r2, r2, #16
 800f2fa:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	681a      	ldr	r2, [r3, #0]
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	f022 0201 	bic.w	r2, r2, #1
 800f30a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	6919      	ldr	r1, [r3, #16]
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681a      	ldr	r2, [r3, #0]
 800f316:	4b3c      	ldr	r3, [pc, #240]	; (800f408 <SPI_CloseTransfer+0x13c>)
 800f318:	400b      	ands	r3, r1
 800f31a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	689a      	ldr	r2, [r3, #8]
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f32a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f332:	b2db      	uxtb	r3, r3
 800f334:	2b04      	cmp	r3, #4
 800f336:	d014      	beq.n	800f362 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	f003 0320 	and.w	r3, r3, #32
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d00f      	beq.n	800f362 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f348:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	699a      	ldr	r2, [r3, #24]
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	f042 0220 	orr.w	r2, r2, #32
 800f360:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f368:	b2db      	uxtb	r3, r3
 800f36a:	2b03      	cmp	r3, #3
 800f36c:	d014      	beq.n	800f398 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f374:	2b00      	cmp	r3, #0
 800f376:	d00f      	beq.n	800f398 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f37e:	f043 0204 	orr.w	r2, r3, #4
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	699a      	ldr	r2, [r3, #24]
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f396:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d00f      	beq.n	800f3c2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f3a8:	f043 0201 	orr.w	r2, r3, #1
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	699a      	ldr	r2, [r3, #24]
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f3c0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d00f      	beq.n	800f3ec <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f3d2:	f043 0208 	orr.w	r2, r3, #8
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	699a      	ldr	r2, [r3, #24]
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f3ea:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800f3fc:	bf00      	nop
 800f3fe:	3714      	adds	r7, #20
 800f400:	46bd      	mov	sp, r7
 800f402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f406:	4770      	bx	lr
 800f408:	fffffc90 	.word	0xfffffc90

0800f40c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b084      	sub	sp, #16
 800f410:	af00      	add	r7, sp, #0
 800f412:	60f8      	str	r0, [r7, #12]
 800f414:	60b9      	str	r1, [r7, #8]
 800f416:	603b      	str	r3, [r7, #0]
 800f418:	4613      	mov	r3, r2
 800f41a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f41c:	e010      	b.n	800f440 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f41e:	f7f4 fb6f 	bl	8003b00 <HAL_GetTick>
 800f422:	4602      	mov	r2, r0
 800f424:	69bb      	ldr	r3, [r7, #24]
 800f426:	1ad3      	subs	r3, r2, r3
 800f428:	683a      	ldr	r2, [r7, #0]
 800f42a:	429a      	cmp	r2, r3
 800f42c:	d803      	bhi.n	800f436 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f42e:	683b      	ldr	r3, [r7, #0]
 800f430:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f434:	d102      	bne.n	800f43c <SPI_WaitOnFlagUntilTimeout+0x30>
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d101      	bne.n	800f440 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f43c:	2303      	movs	r3, #3
 800f43e:	e00f      	b.n	800f460 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	695a      	ldr	r2, [r3, #20]
 800f446:	68bb      	ldr	r3, [r7, #8]
 800f448:	4013      	ands	r3, r2
 800f44a:	68ba      	ldr	r2, [r7, #8]
 800f44c:	429a      	cmp	r2, r3
 800f44e:	bf0c      	ite	eq
 800f450:	2301      	moveq	r3, #1
 800f452:	2300      	movne	r3, #0
 800f454:	b2db      	uxtb	r3, r3
 800f456:	461a      	mov	r2, r3
 800f458:	79fb      	ldrb	r3, [r7, #7]
 800f45a:	429a      	cmp	r2, r3
 800f45c:	d0df      	beq.n	800f41e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800f45e:	2300      	movs	r3, #0
}
 800f460:	4618      	mov	r0, r3
 800f462:	3710      	adds	r7, #16
 800f464:	46bd      	mov	sp, r7
 800f466:	bd80      	pop	{r7, pc}

0800f468 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800f468:	b480      	push	{r7}
 800f46a:	b085      	sub	sp, #20
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f474:	095b      	lsrs	r3, r3, #5
 800f476:	3301      	adds	r3, #1
 800f478:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	68db      	ldr	r3, [r3, #12]
 800f47e:	3301      	adds	r3, #1
 800f480:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f482:	68bb      	ldr	r3, [r7, #8]
 800f484:	3307      	adds	r3, #7
 800f486:	08db      	lsrs	r3, r3, #3
 800f488:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f48a:	68bb      	ldr	r3, [r7, #8]
 800f48c:	68fa      	ldr	r2, [r7, #12]
 800f48e:	fb02 f303 	mul.w	r3, r2, r3
}
 800f492:	4618      	mov	r0, r3
 800f494:	3714      	adds	r7, #20
 800f496:	46bd      	mov	sp, r7
 800f498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49c:	4770      	bx	lr

0800f49e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f49e:	b580      	push	{r7, lr}
 800f4a0:	b082      	sub	sp, #8
 800f4a2:	af00      	add	r7, sp, #0
 800f4a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d101      	bne.n	800f4b0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f4ac:	2301      	movs	r3, #1
 800f4ae:	e049      	b.n	800f544 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f4b6:	b2db      	uxtb	r3, r3
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d106      	bne.n	800f4ca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2200      	movs	r2, #0
 800f4c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f4c4:	6878      	ldr	r0, [r7, #4]
 800f4c6:	f7f3 ff85 	bl	80033d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	2202      	movs	r2, #2
 800f4ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681a      	ldr	r2, [r3, #0]
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	3304      	adds	r3, #4
 800f4da:	4619      	mov	r1, r3
 800f4dc:	4610      	mov	r0, r2
 800f4de:	f000 ff29 	bl	8010334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	2201      	movs	r2, #1
 800f4e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	2201      	movs	r2, #1
 800f4ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	2201      	movs	r2, #1
 800f4f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	2201      	movs	r2, #1
 800f4fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	2201      	movs	r2, #1
 800f506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	2201      	movs	r2, #1
 800f50e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	2201      	movs	r2, #1
 800f516:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	2201      	movs	r2, #1
 800f51e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	2201      	movs	r2, #1
 800f526:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	2201      	movs	r2, #1
 800f52e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	2201      	movs	r2, #1
 800f536:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	2201      	movs	r2, #1
 800f53e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f542:	2300      	movs	r3, #0
}
 800f544:	4618      	mov	r0, r3
 800f546:	3708      	adds	r7, #8
 800f548:	46bd      	mov	sp, r7
 800f54a:	bd80      	pop	{r7, pc}

0800f54c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b082      	sub	sp, #8
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d101      	bne.n	800f55e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f55a:	2301      	movs	r3, #1
 800f55c:	e049      	b.n	800f5f2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f564:	b2db      	uxtb	r3, r3
 800f566:	2b00      	cmp	r3, #0
 800f568:	d106      	bne.n	800f578 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	2200      	movs	r2, #0
 800f56e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f572:	6878      	ldr	r0, [r7, #4]
 800f574:	f7f3 fd98 	bl	80030a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2202      	movs	r2, #2
 800f57c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	681a      	ldr	r2, [r3, #0]
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	3304      	adds	r3, #4
 800f588:	4619      	mov	r1, r3
 800f58a:	4610      	mov	r0, r2
 800f58c:	f000 fed2 	bl	8010334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	2201      	movs	r2, #1
 800f594:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2201      	movs	r2, #1
 800f59c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2201      	movs	r2, #1
 800f5a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2201      	movs	r2, #1
 800f5ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	2201      	movs	r2, #1
 800f5b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2201      	movs	r2, #1
 800f5bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	2201      	movs	r2, #1
 800f5c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2201      	movs	r2, #1
 800f5cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	2201      	movs	r2, #1
 800f5d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2201      	movs	r2, #1
 800f5dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2201      	movs	r2, #1
 800f5e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	2201      	movs	r2, #1
 800f5ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f5f0:	2300      	movs	r3, #0
}
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	3708      	adds	r7, #8
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	bd80      	pop	{r7, pc}
	...

0800f5fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b084      	sub	sp, #16
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
 800f604:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d109      	bne.n	800f620 <HAL_TIM_PWM_Start+0x24>
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f612:	b2db      	uxtb	r3, r3
 800f614:	2b01      	cmp	r3, #1
 800f616:	bf14      	ite	ne
 800f618:	2301      	movne	r3, #1
 800f61a:	2300      	moveq	r3, #0
 800f61c:	b2db      	uxtb	r3, r3
 800f61e:	e03c      	b.n	800f69a <HAL_TIM_PWM_Start+0x9e>
 800f620:	683b      	ldr	r3, [r7, #0]
 800f622:	2b04      	cmp	r3, #4
 800f624:	d109      	bne.n	800f63a <HAL_TIM_PWM_Start+0x3e>
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f62c:	b2db      	uxtb	r3, r3
 800f62e:	2b01      	cmp	r3, #1
 800f630:	bf14      	ite	ne
 800f632:	2301      	movne	r3, #1
 800f634:	2300      	moveq	r3, #0
 800f636:	b2db      	uxtb	r3, r3
 800f638:	e02f      	b.n	800f69a <HAL_TIM_PWM_Start+0x9e>
 800f63a:	683b      	ldr	r3, [r7, #0]
 800f63c:	2b08      	cmp	r3, #8
 800f63e:	d109      	bne.n	800f654 <HAL_TIM_PWM_Start+0x58>
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f646:	b2db      	uxtb	r3, r3
 800f648:	2b01      	cmp	r3, #1
 800f64a:	bf14      	ite	ne
 800f64c:	2301      	movne	r3, #1
 800f64e:	2300      	moveq	r3, #0
 800f650:	b2db      	uxtb	r3, r3
 800f652:	e022      	b.n	800f69a <HAL_TIM_PWM_Start+0x9e>
 800f654:	683b      	ldr	r3, [r7, #0]
 800f656:	2b0c      	cmp	r3, #12
 800f658:	d109      	bne.n	800f66e <HAL_TIM_PWM_Start+0x72>
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f660:	b2db      	uxtb	r3, r3
 800f662:	2b01      	cmp	r3, #1
 800f664:	bf14      	ite	ne
 800f666:	2301      	movne	r3, #1
 800f668:	2300      	moveq	r3, #0
 800f66a:	b2db      	uxtb	r3, r3
 800f66c:	e015      	b.n	800f69a <HAL_TIM_PWM_Start+0x9e>
 800f66e:	683b      	ldr	r3, [r7, #0]
 800f670:	2b10      	cmp	r3, #16
 800f672:	d109      	bne.n	800f688 <HAL_TIM_PWM_Start+0x8c>
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f67a:	b2db      	uxtb	r3, r3
 800f67c:	2b01      	cmp	r3, #1
 800f67e:	bf14      	ite	ne
 800f680:	2301      	movne	r3, #1
 800f682:	2300      	moveq	r3, #0
 800f684:	b2db      	uxtb	r3, r3
 800f686:	e008      	b.n	800f69a <HAL_TIM_PWM_Start+0x9e>
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f68e:	b2db      	uxtb	r3, r3
 800f690:	2b01      	cmp	r3, #1
 800f692:	bf14      	ite	ne
 800f694:	2301      	movne	r3, #1
 800f696:	2300      	moveq	r3, #0
 800f698:	b2db      	uxtb	r3, r3
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d001      	beq.n	800f6a2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800f69e:	2301      	movs	r3, #1
 800f6a0:	e0ab      	b.n	800f7fa <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d104      	bne.n	800f6b2 <HAL_TIM_PWM_Start+0xb6>
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	2202      	movs	r2, #2
 800f6ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f6b0:	e023      	b.n	800f6fa <HAL_TIM_PWM_Start+0xfe>
 800f6b2:	683b      	ldr	r3, [r7, #0]
 800f6b4:	2b04      	cmp	r3, #4
 800f6b6:	d104      	bne.n	800f6c2 <HAL_TIM_PWM_Start+0xc6>
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	2202      	movs	r2, #2
 800f6bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f6c0:	e01b      	b.n	800f6fa <HAL_TIM_PWM_Start+0xfe>
 800f6c2:	683b      	ldr	r3, [r7, #0]
 800f6c4:	2b08      	cmp	r3, #8
 800f6c6:	d104      	bne.n	800f6d2 <HAL_TIM_PWM_Start+0xd6>
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	2202      	movs	r2, #2
 800f6cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f6d0:	e013      	b.n	800f6fa <HAL_TIM_PWM_Start+0xfe>
 800f6d2:	683b      	ldr	r3, [r7, #0]
 800f6d4:	2b0c      	cmp	r3, #12
 800f6d6:	d104      	bne.n	800f6e2 <HAL_TIM_PWM_Start+0xe6>
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	2202      	movs	r2, #2
 800f6dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f6e0:	e00b      	b.n	800f6fa <HAL_TIM_PWM_Start+0xfe>
 800f6e2:	683b      	ldr	r3, [r7, #0]
 800f6e4:	2b10      	cmp	r3, #16
 800f6e6:	d104      	bne.n	800f6f2 <HAL_TIM_PWM_Start+0xf6>
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	2202      	movs	r2, #2
 800f6ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f6f0:	e003      	b.n	800f6fa <HAL_TIM_PWM_Start+0xfe>
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	2202      	movs	r2, #2
 800f6f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	2201      	movs	r2, #1
 800f700:	6839      	ldr	r1, [r7, #0]
 800f702:	4618      	mov	r0, r3
 800f704:	f001 f992 	bl	8010a2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	4a3d      	ldr	r2, [pc, #244]	; (800f804 <HAL_TIM_PWM_Start+0x208>)
 800f70e:	4293      	cmp	r3, r2
 800f710:	d013      	beq.n	800f73a <HAL_TIM_PWM_Start+0x13e>
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	4a3c      	ldr	r2, [pc, #240]	; (800f808 <HAL_TIM_PWM_Start+0x20c>)
 800f718:	4293      	cmp	r3, r2
 800f71a:	d00e      	beq.n	800f73a <HAL_TIM_PWM_Start+0x13e>
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	4a3a      	ldr	r2, [pc, #232]	; (800f80c <HAL_TIM_PWM_Start+0x210>)
 800f722:	4293      	cmp	r3, r2
 800f724:	d009      	beq.n	800f73a <HAL_TIM_PWM_Start+0x13e>
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	4a39      	ldr	r2, [pc, #228]	; (800f810 <HAL_TIM_PWM_Start+0x214>)
 800f72c:	4293      	cmp	r3, r2
 800f72e:	d004      	beq.n	800f73a <HAL_TIM_PWM_Start+0x13e>
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	4a37      	ldr	r2, [pc, #220]	; (800f814 <HAL_TIM_PWM_Start+0x218>)
 800f736:	4293      	cmp	r3, r2
 800f738:	d101      	bne.n	800f73e <HAL_TIM_PWM_Start+0x142>
 800f73a:	2301      	movs	r3, #1
 800f73c:	e000      	b.n	800f740 <HAL_TIM_PWM_Start+0x144>
 800f73e:	2300      	movs	r3, #0
 800f740:	2b00      	cmp	r3, #0
 800f742:	d007      	beq.n	800f754 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f752:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	4a2a      	ldr	r2, [pc, #168]	; (800f804 <HAL_TIM_PWM_Start+0x208>)
 800f75a:	4293      	cmp	r3, r2
 800f75c:	d02c      	beq.n	800f7b8 <HAL_TIM_PWM_Start+0x1bc>
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f766:	d027      	beq.n	800f7b8 <HAL_TIM_PWM_Start+0x1bc>
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	4a2a      	ldr	r2, [pc, #168]	; (800f818 <HAL_TIM_PWM_Start+0x21c>)
 800f76e:	4293      	cmp	r3, r2
 800f770:	d022      	beq.n	800f7b8 <HAL_TIM_PWM_Start+0x1bc>
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	4a29      	ldr	r2, [pc, #164]	; (800f81c <HAL_TIM_PWM_Start+0x220>)
 800f778:	4293      	cmp	r3, r2
 800f77a:	d01d      	beq.n	800f7b8 <HAL_TIM_PWM_Start+0x1bc>
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	4a27      	ldr	r2, [pc, #156]	; (800f820 <HAL_TIM_PWM_Start+0x224>)
 800f782:	4293      	cmp	r3, r2
 800f784:	d018      	beq.n	800f7b8 <HAL_TIM_PWM_Start+0x1bc>
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	4a1f      	ldr	r2, [pc, #124]	; (800f808 <HAL_TIM_PWM_Start+0x20c>)
 800f78c:	4293      	cmp	r3, r2
 800f78e:	d013      	beq.n	800f7b8 <HAL_TIM_PWM_Start+0x1bc>
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	4a23      	ldr	r2, [pc, #140]	; (800f824 <HAL_TIM_PWM_Start+0x228>)
 800f796:	4293      	cmp	r3, r2
 800f798:	d00e      	beq.n	800f7b8 <HAL_TIM_PWM_Start+0x1bc>
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	4a1b      	ldr	r2, [pc, #108]	; (800f80c <HAL_TIM_PWM_Start+0x210>)
 800f7a0:	4293      	cmp	r3, r2
 800f7a2:	d009      	beq.n	800f7b8 <HAL_TIM_PWM_Start+0x1bc>
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	4a1f      	ldr	r2, [pc, #124]	; (800f828 <HAL_TIM_PWM_Start+0x22c>)
 800f7aa:	4293      	cmp	r3, r2
 800f7ac:	d004      	beq.n	800f7b8 <HAL_TIM_PWM_Start+0x1bc>
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	4a1e      	ldr	r2, [pc, #120]	; (800f82c <HAL_TIM_PWM_Start+0x230>)
 800f7b4:	4293      	cmp	r3, r2
 800f7b6:	d115      	bne.n	800f7e4 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	689a      	ldr	r2, [r3, #8]
 800f7be:	4b1c      	ldr	r3, [pc, #112]	; (800f830 <HAL_TIM_PWM_Start+0x234>)
 800f7c0:	4013      	ands	r3, r2
 800f7c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	2b06      	cmp	r3, #6
 800f7c8:	d015      	beq.n	800f7f6 <HAL_TIM_PWM_Start+0x1fa>
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f7d0:	d011      	beq.n	800f7f6 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	681a      	ldr	r2, [r3, #0]
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	f042 0201 	orr.w	r2, r2, #1
 800f7e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f7e2:	e008      	b.n	800f7f6 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	681a      	ldr	r2, [r3, #0]
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	f042 0201 	orr.w	r2, r2, #1
 800f7f2:	601a      	str	r2, [r3, #0]
 800f7f4:	e000      	b.n	800f7f8 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f7f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f7f8:	2300      	movs	r3, #0
}
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	3710      	adds	r7, #16
 800f7fe:	46bd      	mov	sp, r7
 800f800:	bd80      	pop	{r7, pc}
 800f802:	bf00      	nop
 800f804:	40010000 	.word	0x40010000
 800f808:	40010400 	.word	0x40010400
 800f80c:	40014000 	.word	0x40014000
 800f810:	40014400 	.word	0x40014400
 800f814:	40014800 	.word	0x40014800
 800f818:	40000400 	.word	0x40000400
 800f81c:	40000800 	.word	0x40000800
 800f820:	40000c00 	.word	0x40000c00
 800f824:	40001800 	.word	0x40001800
 800f828:	4000e000 	.word	0x4000e000
 800f82c:	4000e400 	.word	0x4000e400
 800f830:	00010007 	.word	0x00010007

0800f834 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800f834:	b580      	push	{r7, lr}
 800f836:	b086      	sub	sp, #24
 800f838:	af00      	add	r7, sp, #0
 800f83a:	60f8      	str	r0, [r7, #12]
 800f83c:	60b9      	str	r1, [r7, #8]
 800f83e:	607a      	str	r2, [r7, #4]
 800f840:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800f842:	2300      	movs	r3, #0
 800f844:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800f846:	68bb      	ldr	r3, [r7, #8]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d109      	bne.n	800f860 <HAL_TIM_PWM_Start_DMA+0x2c>
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f852:	b2db      	uxtb	r3, r3
 800f854:	2b02      	cmp	r3, #2
 800f856:	bf0c      	ite	eq
 800f858:	2301      	moveq	r3, #1
 800f85a:	2300      	movne	r3, #0
 800f85c:	b2db      	uxtb	r3, r3
 800f85e:	e03c      	b.n	800f8da <HAL_TIM_PWM_Start_DMA+0xa6>
 800f860:	68bb      	ldr	r3, [r7, #8]
 800f862:	2b04      	cmp	r3, #4
 800f864:	d109      	bne.n	800f87a <HAL_TIM_PWM_Start_DMA+0x46>
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f86c:	b2db      	uxtb	r3, r3
 800f86e:	2b02      	cmp	r3, #2
 800f870:	bf0c      	ite	eq
 800f872:	2301      	moveq	r3, #1
 800f874:	2300      	movne	r3, #0
 800f876:	b2db      	uxtb	r3, r3
 800f878:	e02f      	b.n	800f8da <HAL_TIM_PWM_Start_DMA+0xa6>
 800f87a:	68bb      	ldr	r3, [r7, #8]
 800f87c:	2b08      	cmp	r3, #8
 800f87e:	d109      	bne.n	800f894 <HAL_TIM_PWM_Start_DMA+0x60>
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f886:	b2db      	uxtb	r3, r3
 800f888:	2b02      	cmp	r3, #2
 800f88a:	bf0c      	ite	eq
 800f88c:	2301      	moveq	r3, #1
 800f88e:	2300      	movne	r3, #0
 800f890:	b2db      	uxtb	r3, r3
 800f892:	e022      	b.n	800f8da <HAL_TIM_PWM_Start_DMA+0xa6>
 800f894:	68bb      	ldr	r3, [r7, #8]
 800f896:	2b0c      	cmp	r3, #12
 800f898:	d109      	bne.n	800f8ae <HAL_TIM_PWM_Start_DMA+0x7a>
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f8a0:	b2db      	uxtb	r3, r3
 800f8a2:	2b02      	cmp	r3, #2
 800f8a4:	bf0c      	ite	eq
 800f8a6:	2301      	moveq	r3, #1
 800f8a8:	2300      	movne	r3, #0
 800f8aa:	b2db      	uxtb	r3, r3
 800f8ac:	e015      	b.n	800f8da <HAL_TIM_PWM_Start_DMA+0xa6>
 800f8ae:	68bb      	ldr	r3, [r7, #8]
 800f8b0:	2b10      	cmp	r3, #16
 800f8b2:	d109      	bne.n	800f8c8 <HAL_TIM_PWM_Start_DMA+0x94>
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f8ba:	b2db      	uxtb	r3, r3
 800f8bc:	2b02      	cmp	r3, #2
 800f8be:	bf0c      	ite	eq
 800f8c0:	2301      	moveq	r3, #1
 800f8c2:	2300      	movne	r3, #0
 800f8c4:	b2db      	uxtb	r3, r3
 800f8c6:	e008      	b.n	800f8da <HAL_TIM_PWM_Start_DMA+0xa6>
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f8ce:	b2db      	uxtb	r3, r3
 800f8d0:	2b02      	cmp	r3, #2
 800f8d2:	bf0c      	ite	eq
 800f8d4:	2301      	moveq	r3, #1
 800f8d6:	2300      	movne	r3, #0
 800f8d8:	b2db      	uxtb	r3, r3
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d001      	beq.n	800f8e2 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800f8de:	2302      	movs	r3, #2
 800f8e0:	e1ba      	b.n	800fc58 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800f8e2:	68bb      	ldr	r3, [r7, #8]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d109      	bne.n	800f8fc <HAL_TIM_PWM_Start_DMA+0xc8>
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f8ee:	b2db      	uxtb	r3, r3
 800f8f0:	2b01      	cmp	r3, #1
 800f8f2:	bf0c      	ite	eq
 800f8f4:	2301      	moveq	r3, #1
 800f8f6:	2300      	movne	r3, #0
 800f8f8:	b2db      	uxtb	r3, r3
 800f8fa:	e03c      	b.n	800f976 <HAL_TIM_PWM_Start_DMA+0x142>
 800f8fc:	68bb      	ldr	r3, [r7, #8]
 800f8fe:	2b04      	cmp	r3, #4
 800f900:	d109      	bne.n	800f916 <HAL_TIM_PWM_Start_DMA+0xe2>
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f908:	b2db      	uxtb	r3, r3
 800f90a:	2b01      	cmp	r3, #1
 800f90c:	bf0c      	ite	eq
 800f90e:	2301      	moveq	r3, #1
 800f910:	2300      	movne	r3, #0
 800f912:	b2db      	uxtb	r3, r3
 800f914:	e02f      	b.n	800f976 <HAL_TIM_PWM_Start_DMA+0x142>
 800f916:	68bb      	ldr	r3, [r7, #8]
 800f918:	2b08      	cmp	r3, #8
 800f91a:	d109      	bne.n	800f930 <HAL_TIM_PWM_Start_DMA+0xfc>
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f922:	b2db      	uxtb	r3, r3
 800f924:	2b01      	cmp	r3, #1
 800f926:	bf0c      	ite	eq
 800f928:	2301      	moveq	r3, #1
 800f92a:	2300      	movne	r3, #0
 800f92c:	b2db      	uxtb	r3, r3
 800f92e:	e022      	b.n	800f976 <HAL_TIM_PWM_Start_DMA+0x142>
 800f930:	68bb      	ldr	r3, [r7, #8]
 800f932:	2b0c      	cmp	r3, #12
 800f934:	d109      	bne.n	800f94a <HAL_TIM_PWM_Start_DMA+0x116>
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f93c:	b2db      	uxtb	r3, r3
 800f93e:	2b01      	cmp	r3, #1
 800f940:	bf0c      	ite	eq
 800f942:	2301      	moveq	r3, #1
 800f944:	2300      	movne	r3, #0
 800f946:	b2db      	uxtb	r3, r3
 800f948:	e015      	b.n	800f976 <HAL_TIM_PWM_Start_DMA+0x142>
 800f94a:	68bb      	ldr	r3, [r7, #8]
 800f94c:	2b10      	cmp	r3, #16
 800f94e:	d109      	bne.n	800f964 <HAL_TIM_PWM_Start_DMA+0x130>
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f956:	b2db      	uxtb	r3, r3
 800f958:	2b01      	cmp	r3, #1
 800f95a:	bf0c      	ite	eq
 800f95c:	2301      	moveq	r3, #1
 800f95e:	2300      	movne	r3, #0
 800f960:	b2db      	uxtb	r3, r3
 800f962:	e008      	b.n	800f976 <HAL_TIM_PWM_Start_DMA+0x142>
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f96a:	b2db      	uxtb	r3, r3
 800f96c:	2b01      	cmp	r3, #1
 800f96e:	bf0c      	ite	eq
 800f970:	2301      	moveq	r3, #1
 800f972:	2300      	movne	r3, #0
 800f974:	b2db      	uxtb	r3, r3
 800f976:	2b00      	cmp	r3, #0
 800f978:	d034      	beq.n	800f9e4 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d002      	beq.n	800f986 <HAL_TIM_PWM_Start_DMA+0x152>
 800f980:	887b      	ldrh	r3, [r7, #2]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d101      	bne.n	800f98a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800f986:	2301      	movs	r3, #1
 800f988:	e166      	b.n	800fc58 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f98a:	68bb      	ldr	r3, [r7, #8]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d104      	bne.n	800f99a <HAL_TIM_PWM_Start_DMA+0x166>
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	2202      	movs	r2, #2
 800f994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f998:	e026      	b.n	800f9e8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f99a:	68bb      	ldr	r3, [r7, #8]
 800f99c:	2b04      	cmp	r3, #4
 800f99e:	d104      	bne.n	800f9aa <HAL_TIM_PWM_Start_DMA+0x176>
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	2202      	movs	r2, #2
 800f9a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f9a8:	e01e      	b.n	800f9e8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f9aa:	68bb      	ldr	r3, [r7, #8]
 800f9ac:	2b08      	cmp	r3, #8
 800f9ae:	d104      	bne.n	800f9ba <HAL_TIM_PWM_Start_DMA+0x186>
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	2202      	movs	r2, #2
 800f9b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f9b8:	e016      	b.n	800f9e8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f9ba:	68bb      	ldr	r3, [r7, #8]
 800f9bc:	2b0c      	cmp	r3, #12
 800f9be:	d104      	bne.n	800f9ca <HAL_TIM_PWM_Start_DMA+0x196>
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	2202      	movs	r2, #2
 800f9c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f9c8:	e00e      	b.n	800f9e8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f9ca:	68bb      	ldr	r3, [r7, #8]
 800f9cc:	2b10      	cmp	r3, #16
 800f9ce:	d104      	bne.n	800f9da <HAL_TIM_PWM_Start_DMA+0x1a6>
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	2202      	movs	r2, #2
 800f9d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f9d8:	e006      	b.n	800f9e8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	2202      	movs	r2, #2
 800f9de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f9e2:	e001      	b.n	800f9e8 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800f9e4:	2301      	movs	r3, #1
 800f9e6:	e137      	b.n	800fc58 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800f9e8:	68bb      	ldr	r3, [r7, #8]
 800f9ea:	2b0c      	cmp	r3, #12
 800f9ec:	f200 80ae 	bhi.w	800fb4c <HAL_TIM_PWM_Start_DMA+0x318>
 800f9f0:	a201      	add	r2, pc, #4	; (adr r2, 800f9f8 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800f9f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9f6:	bf00      	nop
 800f9f8:	0800fa2d 	.word	0x0800fa2d
 800f9fc:	0800fb4d 	.word	0x0800fb4d
 800fa00:	0800fb4d 	.word	0x0800fb4d
 800fa04:	0800fb4d 	.word	0x0800fb4d
 800fa08:	0800fa75 	.word	0x0800fa75
 800fa0c:	0800fb4d 	.word	0x0800fb4d
 800fa10:	0800fb4d 	.word	0x0800fb4d
 800fa14:	0800fb4d 	.word	0x0800fb4d
 800fa18:	0800fabd 	.word	0x0800fabd
 800fa1c:	0800fb4d 	.word	0x0800fb4d
 800fa20:	0800fb4d 	.word	0x0800fb4d
 800fa24:	0800fb4d 	.word	0x0800fb4d
 800fa28:	0800fb05 	.word	0x0800fb05
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa30:	4a8b      	ldr	r2, [pc, #556]	; (800fc60 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800fa32:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa38:	4a8a      	ldr	r2, [pc, #552]	; (800fc64 <HAL_TIM_PWM_Start_DMA+0x430>)
 800fa3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa40:	4a89      	ldr	r2, [pc, #548]	; (800fc68 <HAL_TIM_PWM_Start_DMA+0x434>)
 800fa42:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800fa48:	6879      	ldr	r1, [r7, #4]
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	3334      	adds	r3, #52	; 0x34
 800fa50:	461a      	mov	r2, r3
 800fa52:	887b      	ldrh	r3, [r7, #2]
 800fa54:	f7f6 f872 	bl	8005b3c <HAL_DMA_Start_IT>
 800fa58:	4603      	mov	r3, r0
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d001      	beq.n	800fa62 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800fa5e:	2301      	movs	r3, #1
 800fa60:	e0fa      	b.n	800fc58 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	68da      	ldr	r2, [r3, #12]
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fa70:	60da      	str	r2, [r3, #12]
      break;
 800fa72:	e06e      	b.n	800fb52 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa78:	4a79      	ldr	r2, [pc, #484]	; (800fc60 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800fa7a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa80:	4a78      	ldr	r2, [pc, #480]	; (800fc64 <HAL_TIM_PWM_Start_DMA+0x430>)
 800fa82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa88:	4a77      	ldr	r2, [pc, #476]	; (800fc68 <HAL_TIM_PWM_Start_DMA+0x434>)
 800fa8a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800fa90:	6879      	ldr	r1, [r7, #4]
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	3338      	adds	r3, #56	; 0x38
 800fa98:	461a      	mov	r2, r3
 800fa9a:	887b      	ldrh	r3, [r7, #2]
 800fa9c:	f7f6 f84e 	bl	8005b3c <HAL_DMA_Start_IT>
 800faa0:	4603      	mov	r3, r0
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d001      	beq.n	800faaa <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800faa6:	2301      	movs	r3, #1
 800faa8:	e0d6      	b.n	800fc58 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	68da      	ldr	r2, [r3, #12]
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fab8:	60da      	str	r2, [r3, #12]
      break;
 800faba:	e04a      	b.n	800fb52 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fac0:	4a67      	ldr	r2, [pc, #412]	; (800fc60 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800fac2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fac8:	4a66      	ldr	r2, [pc, #408]	; (800fc64 <HAL_TIM_PWM_Start_DMA+0x430>)
 800faca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fad0:	4a65      	ldr	r2, [pc, #404]	; (800fc68 <HAL_TIM_PWM_Start_DMA+0x434>)
 800fad2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800fad8:	6879      	ldr	r1, [r7, #4]
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	333c      	adds	r3, #60	; 0x3c
 800fae0:	461a      	mov	r2, r3
 800fae2:	887b      	ldrh	r3, [r7, #2]
 800fae4:	f7f6 f82a 	bl	8005b3c <HAL_DMA_Start_IT>
 800fae8:	4603      	mov	r3, r0
 800faea:	2b00      	cmp	r3, #0
 800faec:	d001      	beq.n	800faf2 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800faee:	2301      	movs	r3, #1
 800faf0:	e0b2      	b.n	800fc58 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	68da      	ldr	r2, [r3, #12]
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fb00:	60da      	str	r2, [r3, #12]
      break;
 800fb02:	e026      	b.n	800fb52 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb08:	4a55      	ldr	r2, [pc, #340]	; (800fc60 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800fb0a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb10:	4a54      	ldr	r2, [pc, #336]	; (800fc64 <HAL_TIM_PWM_Start_DMA+0x430>)
 800fb12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb18:	4a53      	ldr	r2, [pc, #332]	; (800fc68 <HAL_TIM_PWM_Start_DMA+0x434>)
 800fb1a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fb20:	6879      	ldr	r1, [r7, #4]
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	3340      	adds	r3, #64	; 0x40
 800fb28:	461a      	mov	r2, r3
 800fb2a:	887b      	ldrh	r3, [r7, #2]
 800fb2c:	f7f6 f806 	bl	8005b3c <HAL_DMA_Start_IT>
 800fb30:	4603      	mov	r3, r0
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d001      	beq.n	800fb3a <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800fb36:	2301      	movs	r3, #1
 800fb38:	e08e      	b.n	800fc58 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	68da      	ldr	r2, [r3, #12]
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fb48:	60da      	str	r2, [r3, #12]
      break;
 800fb4a:	e002      	b.n	800fb52 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800fb4c:	2301      	movs	r3, #1
 800fb4e:	75fb      	strb	r3, [r7, #23]
      break;
 800fb50:	bf00      	nop
  }

  if (status == HAL_OK)
 800fb52:	7dfb      	ldrb	r3, [r7, #23]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d17e      	bne.n	800fc56 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	2201      	movs	r2, #1
 800fb5e:	68b9      	ldr	r1, [r7, #8]
 800fb60:	4618      	mov	r0, r3
 800fb62:	f000 ff63 	bl	8010a2c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	4a40      	ldr	r2, [pc, #256]	; (800fc6c <HAL_TIM_PWM_Start_DMA+0x438>)
 800fb6c:	4293      	cmp	r3, r2
 800fb6e:	d013      	beq.n	800fb98 <HAL_TIM_PWM_Start_DMA+0x364>
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	4a3e      	ldr	r2, [pc, #248]	; (800fc70 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800fb76:	4293      	cmp	r3, r2
 800fb78:	d00e      	beq.n	800fb98 <HAL_TIM_PWM_Start_DMA+0x364>
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	4a3d      	ldr	r2, [pc, #244]	; (800fc74 <HAL_TIM_PWM_Start_DMA+0x440>)
 800fb80:	4293      	cmp	r3, r2
 800fb82:	d009      	beq.n	800fb98 <HAL_TIM_PWM_Start_DMA+0x364>
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	4a3b      	ldr	r2, [pc, #236]	; (800fc78 <HAL_TIM_PWM_Start_DMA+0x444>)
 800fb8a:	4293      	cmp	r3, r2
 800fb8c:	d004      	beq.n	800fb98 <HAL_TIM_PWM_Start_DMA+0x364>
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	4a3a      	ldr	r2, [pc, #232]	; (800fc7c <HAL_TIM_PWM_Start_DMA+0x448>)
 800fb94:	4293      	cmp	r3, r2
 800fb96:	d101      	bne.n	800fb9c <HAL_TIM_PWM_Start_DMA+0x368>
 800fb98:	2301      	movs	r3, #1
 800fb9a:	e000      	b.n	800fb9e <HAL_TIM_PWM_Start_DMA+0x36a>
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d007      	beq.n	800fbb2 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fbb0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	4a2d      	ldr	r2, [pc, #180]	; (800fc6c <HAL_TIM_PWM_Start_DMA+0x438>)
 800fbb8:	4293      	cmp	r3, r2
 800fbba:	d02c      	beq.n	800fc16 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fbc4:	d027      	beq.n	800fc16 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	4a2d      	ldr	r2, [pc, #180]	; (800fc80 <HAL_TIM_PWM_Start_DMA+0x44c>)
 800fbcc:	4293      	cmp	r3, r2
 800fbce:	d022      	beq.n	800fc16 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	4a2b      	ldr	r2, [pc, #172]	; (800fc84 <HAL_TIM_PWM_Start_DMA+0x450>)
 800fbd6:	4293      	cmp	r3, r2
 800fbd8:	d01d      	beq.n	800fc16 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	4a2a      	ldr	r2, [pc, #168]	; (800fc88 <HAL_TIM_PWM_Start_DMA+0x454>)
 800fbe0:	4293      	cmp	r3, r2
 800fbe2:	d018      	beq.n	800fc16 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	4a21      	ldr	r2, [pc, #132]	; (800fc70 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800fbea:	4293      	cmp	r3, r2
 800fbec:	d013      	beq.n	800fc16 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	4a26      	ldr	r2, [pc, #152]	; (800fc8c <HAL_TIM_PWM_Start_DMA+0x458>)
 800fbf4:	4293      	cmp	r3, r2
 800fbf6:	d00e      	beq.n	800fc16 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	4a1d      	ldr	r2, [pc, #116]	; (800fc74 <HAL_TIM_PWM_Start_DMA+0x440>)
 800fbfe:	4293      	cmp	r3, r2
 800fc00:	d009      	beq.n	800fc16 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	4a22      	ldr	r2, [pc, #136]	; (800fc90 <HAL_TIM_PWM_Start_DMA+0x45c>)
 800fc08:	4293      	cmp	r3, r2
 800fc0a:	d004      	beq.n	800fc16 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	4a20      	ldr	r2, [pc, #128]	; (800fc94 <HAL_TIM_PWM_Start_DMA+0x460>)
 800fc12:	4293      	cmp	r3, r2
 800fc14:	d115      	bne.n	800fc42 <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	689a      	ldr	r2, [r3, #8]
 800fc1c:	4b1e      	ldr	r3, [pc, #120]	; (800fc98 <HAL_TIM_PWM_Start_DMA+0x464>)
 800fc1e:	4013      	ands	r3, r2
 800fc20:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fc22:	693b      	ldr	r3, [r7, #16]
 800fc24:	2b06      	cmp	r3, #6
 800fc26:	d015      	beq.n	800fc54 <HAL_TIM_PWM_Start_DMA+0x420>
 800fc28:	693b      	ldr	r3, [r7, #16]
 800fc2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fc2e:	d011      	beq.n	800fc54 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	681a      	ldr	r2, [r3, #0]
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	f042 0201 	orr.w	r2, r2, #1
 800fc3e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fc40:	e008      	b.n	800fc54 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	681a      	ldr	r2, [r3, #0]
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	f042 0201 	orr.w	r2, r2, #1
 800fc50:	601a      	str	r2, [r3, #0]
 800fc52:	e000      	b.n	800fc56 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fc54:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800fc56:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc58:	4618      	mov	r0, r3
 800fc5a:	3718      	adds	r7, #24
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	bd80      	pop	{r7, pc}
 800fc60:	08010223 	.word	0x08010223
 800fc64:	080102cb 	.word	0x080102cb
 800fc68:	08010191 	.word	0x08010191
 800fc6c:	40010000 	.word	0x40010000
 800fc70:	40010400 	.word	0x40010400
 800fc74:	40014000 	.word	0x40014000
 800fc78:	40014400 	.word	0x40014400
 800fc7c:	40014800 	.word	0x40014800
 800fc80:	40000400 	.word	0x40000400
 800fc84:	40000800 	.word	0x40000800
 800fc88:	40000c00 	.word	0x40000c00
 800fc8c:	40001800 	.word	0x40001800
 800fc90:	4000e000 	.word	0x4000e000
 800fc94:	4000e400 	.word	0x4000e400
 800fc98:	00010007 	.word	0x00010007

0800fc9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b082      	sub	sp, #8
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	691b      	ldr	r3, [r3, #16]
 800fcaa:	f003 0302 	and.w	r3, r3, #2
 800fcae:	2b02      	cmp	r3, #2
 800fcb0:	d122      	bne.n	800fcf8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	68db      	ldr	r3, [r3, #12]
 800fcb8:	f003 0302 	and.w	r3, r3, #2
 800fcbc:	2b02      	cmp	r3, #2
 800fcbe:	d11b      	bne.n	800fcf8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	f06f 0202 	mvn.w	r2, #2
 800fcc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	2201      	movs	r2, #1
 800fcce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	699b      	ldr	r3, [r3, #24]
 800fcd6:	f003 0303 	and.w	r3, r3, #3
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d003      	beq.n	800fce6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fcde:	6878      	ldr	r0, [r7, #4]
 800fce0:	f000 fa24 	bl	801012c <HAL_TIM_IC_CaptureCallback>
 800fce4:	e005      	b.n	800fcf2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fce6:	6878      	ldr	r0, [r7, #4]
 800fce8:	f000 fa16 	bl	8010118 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fcec:	6878      	ldr	r0, [r7, #4]
 800fcee:	f000 fa27 	bl	8010140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	691b      	ldr	r3, [r3, #16]
 800fcfe:	f003 0304 	and.w	r3, r3, #4
 800fd02:	2b04      	cmp	r3, #4
 800fd04:	d122      	bne.n	800fd4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	68db      	ldr	r3, [r3, #12]
 800fd0c:	f003 0304 	and.w	r3, r3, #4
 800fd10:	2b04      	cmp	r3, #4
 800fd12:	d11b      	bne.n	800fd4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	f06f 0204 	mvn.w	r2, #4
 800fd1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	2202      	movs	r2, #2
 800fd22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	699b      	ldr	r3, [r3, #24]
 800fd2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d003      	beq.n	800fd3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fd32:	6878      	ldr	r0, [r7, #4]
 800fd34:	f000 f9fa 	bl	801012c <HAL_TIM_IC_CaptureCallback>
 800fd38:	e005      	b.n	800fd46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fd3a:	6878      	ldr	r0, [r7, #4]
 800fd3c:	f000 f9ec 	bl	8010118 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fd40:	6878      	ldr	r0, [r7, #4]
 800fd42:	f000 f9fd 	bl	8010140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	2200      	movs	r2, #0
 800fd4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	691b      	ldr	r3, [r3, #16]
 800fd52:	f003 0308 	and.w	r3, r3, #8
 800fd56:	2b08      	cmp	r3, #8
 800fd58:	d122      	bne.n	800fda0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	68db      	ldr	r3, [r3, #12]
 800fd60:	f003 0308 	and.w	r3, r3, #8
 800fd64:	2b08      	cmp	r3, #8
 800fd66:	d11b      	bne.n	800fda0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	f06f 0208 	mvn.w	r2, #8
 800fd70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	2204      	movs	r2, #4
 800fd76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	69db      	ldr	r3, [r3, #28]
 800fd7e:	f003 0303 	and.w	r3, r3, #3
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d003      	beq.n	800fd8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fd86:	6878      	ldr	r0, [r7, #4]
 800fd88:	f000 f9d0 	bl	801012c <HAL_TIM_IC_CaptureCallback>
 800fd8c:	e005      	b.n	800fd9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fd8e:	6878      	ldr	r0, [r7, #4]
 800fd90:	f000 f9c2 	bl	8010118 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fd94:	6878      	ldr	r0, [r7, #4]
 800fd96:	f000 f9d3 	bl	8010140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	2200      	movs	r2, #0
 800fd9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	691b      	ldr	r3, [r3, #16]
 800fda6:	f003 0310 	and.w	r3, r3, #16
 800fdaa:	2b10      	cmp	r3, #16
 800fdac:	d122      	bne.n	800fdf4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	68db      	ldr	r3, [r3, #12]
 800fdb4:	f003 0310 	and.w	r3, r3, #16
 800fdb8:	2b10      	cmp	r3, #16
 800fdba:	d11b      	bne.n	800fdf4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	f06f 0210 	mvn.w	r2, #16
 800fdc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	2208      	movs	r2, #8
 800fdca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	69db      	ldr	r3, [r3, #28]
 800fdd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d003      	beq.n	800fde2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fdda:	6878      	ldr	r0, [r7, #4]
 800fddc:	f000 f9a6 	bl	801012c <HAL_TIM_IC_CaptureCallback>
 800fde0:	e005      	b.n	800fdee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fde2:	6878      	ldr	r0, [r7, #4]
 800fde4:	f000 f998 	bl	8010118 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fde8:	6878      	ldr	r0, [r7, #4]
 800fdea:	f000 f9a9 	bl	8010140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	691b      	ldr	r3, [r3, #16]
 800fdfa:	f003 0301 	and.w	r3, r3, #1
 800fdfe:	2b01      	cmp	r3, #1
 800fe00:	d10e      	bne.n	800fe20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	68db      	ldr	r3, [r3, #12]
 800fe08:	f003 0301 	and.w	r3, r3, #1
 800fe0c:	2b01      	cmp	r3, #1
 800fe0e:	d107      	bne.n	800fe20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	f06f 0201 	mvn.w	r2, #1
 800fe18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fe1a:	6878      	ldr	r0, [r7, #4]
 800fe1c:	f000 f972 	bl	8010104 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	691b      	ldr	r3, [r3, #16]
 800fe26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe2a:	2b80      	cmp	r3, #128	; 0x80
 800fe2c:	d10e      	bne.n	800fe4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	68db      	ldr	r3, [r3, #12]
 800fe34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe38:	2b80      	cmp	r3, #128	; 0x80
 800fe3a:	d107      	bne.n	800fe4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800fe44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fe46:	6878      	ldr	r0, [r7, #4]
 800fe48:	f000 febc 	bl	8010bc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	691b      	ldr	r3, [r3, #16]
 800fe52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fe56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fe5a:	d10e      	bne.n	800fe7a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	68db      	ldr	r3, [r3, #12]
 800fe62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe66:	2b80      	cmp	r3, #128	; 0x80
 800fe68:	d107      	bne.n	800fe7a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800fe72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800fe74:	6878      	ldr	r0, [r7, #4]
 800fe76:	f000 feaf 	bl	8010bd8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	691b      	ldr	r3, [r3, #16]
 800fe80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe84:	2b40      	cmp	r3, #64	; 0x40
 800fe86:	d10e      	bne.n	800fea6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	68db      	ldr	r3, [r3, #12]
 800fe8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe92:	2b40      	cmp	r3, #64	; 0x40
 800fe94:	d107      	bne.n	800fea6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fe9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fea0:	6878      	ldr	r0, [r7, #4]
 800fea2:	f000 f961 	bl	8010168 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	691b      	ldr	r3, [r3, #16]
 800feac:	f003 0320 	and.w	r3, r3, #32
 800feb0:	2b20      	cmp	r3, #32
 800feb2:	d10e      	bne.n	800fed2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	68db      	ldr	r3, [r3, #12]
 800feba:	f003 0320 	and.w	r3, r3, #32
 800febe:	2b20      	cmp	r3, #32
 800fec0:	d107      	bne.n	800fed2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	f06f 0220 	mvn.w	r2, #32
 800feca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fecc:	6878      	ldr	r0, [r7, #4]
 800fece:	f000 fe6f 	bl	8010bb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fed2:	bf00      	nop
 800fed4:	3708      	adds	r7, #8
 800fed6:	46bd      	mov	sp, r7
 800fed8:	bd80      	pop	{r7, pc}
	...

0800fedc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fedc:	b580      	push	{r7, lr}
 800fede:	b086      	sub	sp, #24
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	60f8      	str	r0, [r7, #12]
 800fee4:	60b9      	str	r1, [r7, #8]
 800fee6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fee8:	2300      	movs	r3, #0
 800feea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fef2:	2b01      	cmp	r3, #1
 800fef4:	d101      	bne.n	800fefa <HAL_TIM_PWM_ConfigChannel+0x1e>
 800fef6:	2302      	movs	r3, #2
 800fef8:	e0ff      	b.n	80100fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	2201      	movs	r2, #1
 800fefe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	2b14      	cmp	r3, #20
 800ff06:	f200 80f0 	bhi.w	80100ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ff0a:	a201      	add	r2, pc, #4	; (adr r2, 800ff10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ff0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff10:	0800ff65 	.word	0x0800ff65
 800ff14:	080100eb 	.word	0x080100eb
 800ff18:	080100eb 	.word	0x080100eb
 800ff1c:	080100eb 	.word	0x080100eb
 800ff20:	0800ffa5 	.word	0x0800ffa5
 800ff24:	080100eb 	.word	0x080100eb
 800ff28:	080100eb 	.word	0x080100eb
 800ff2c:	080100eb 	.word	0x080100eb
 800ff30:	0800ffe7 	.word	0x0800ffe7
 800ff34:	080100eb 	.word	0x080100eb
 800ff38:	080100eb 	.word	0x080100eb
 800ff3c:	080100eb 	.word	0x080100eb
 800ff40:	08010027 	.word	0x08010027
 800ff44:	080100eb 	.word	0x080100eb
 800ff48:	080100eb 	.word	0x080100eb
 800ff4c:	080100eb 	.word	0x080100eb
 800ff50:	08010069 	.word	0x08010069
 800ff54:	080100eb 	.word	0x080100eb
 800ff58:	080100eb 	.word	0x080100eb
 800ff5c:	080100eb 	.word	0x080100eb
 800ff60:	080100a9 	.word	0x080100a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	68b9      	ldr	r1, [r7, #8]
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	f000 fa88 	bl	8010480 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	699a      	ldr	r2, [r3, #24]
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	f042 0208 	orr.w	r2, r2, #8
 800ff7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	699a      	ldr	r2, [r3, #24]
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	f022 0204 	bic.w	r2, r2, #4
 800ff8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	6999      	ldr	r1, [r3, #24]
 800ff96:	68bb      	ldr	r3, [r7, #8]
 800ff98:	691a      	ldr	r2, [r3, #16]
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	430a      	orrs	r2, r1
 800ffa0:	619a      	str	r2, [r3, #24]
      break;
 800ffa2:	e0a5      	b.n	80100f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	68b9      	ldr	r1, [r7, #8]
 800ffaa:	4618      	mov	r0, r3
 800ffac:	f000 faf8 	bl	80105a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	699a      	ldr	r2, [r3, #24]
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ffbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	699a      	ldr	r2, [r3, #24]
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ffce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	6999      	ldr	r1, [r3, #24]
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	691b      	ldr	r3, [r3, #16]
 800ffda:	021a      	lsls	r2, r3, #8
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	430a      	orrs	r2, r1
 800ffe2:	619a      	str	r2, [r3, #24]
      break;
 800ffe4:	e084      	b.n	80100f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	68b9      	ldr	r1, [r7, #8]
 800ffec:	4618      	mov	r0, r3
 800ffee:	f000 fb61 	bl	80106b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	69da      	ldr	r2, [r3, #28]
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	f042 0208 	orr.w	r2, r2, #8
 8010000:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	69da      	ldr	r2, [r3, #28]
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	f022 0204 	bic.w	r2, r2, #4
 8010010:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	69d9      	ldr	r1, [r3, #28]
 8010018:	68bb      	ldr	r3, [r7, #8]
 801001a:	691a      	ldr	r2, [r3, #16]
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	430a      	orrs	r2, r1
 8010022:	61da      	str	r2, [r3, #28]
      break;
 8010024:	e064      	b.n	80100f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	68b9      	ldr	r1, [r7, #8]
 801002c:	4618      	mov	r0, r3
 801002e:	f000 fbc9 	bl	80107c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	69da      	ldr	r2, [r3, #28]
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	69da      	ldr	r2, [r3, #28]
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	69d9      	ldr	r1, [r3, #28]
 8010058:	68bb      	ldr	r3, [r7, #8]
 801005a:	691b      	ldr	r3, [r3, #16]
 801005c:	021a      	lsls	r2, r3, #8
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	430a      	orrs	r2, r1
 8010064:	61da      	str	r2, [r3, #28]
      break;
 8010066:	e043      	b.n	80100f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	68b9      	ldr	r1, [r7, #8]
 801006e:	4618      	mov	r0, r3
 8010070:	f000 fc12 	bl	8010898 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	f042 0208 	orr.w	r2, r2, #8
 8010082:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	f022 0204 	bic.w	r2, r2, #4
 8010092:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801009a:	68bb      	ldr	r3, [r7, #8]
 801009c:	691a      	ldr	r2, [r3, #16]
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	430a      	orrs	r2, r1
 80100a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80100a6:	e023      	b.n	80100f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	68b9      	ldr	r1, [r7, #8]
 80100ae:	4618      	mov	r0, r3
 80100b0:	f000 fc56 	bl	8010960 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80100c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80100d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80100da:	68bb      	ldr	r3, [r7, #8]
 80100dc:	691b      	ldr	r3, [r3, #16]
 80100de:	021a      	lsls	r2, r3, #8
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	430a      	orrs	r2, r1
 80100e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80100e8:	e002      	b.n	80100f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80100ea:	2301      	movs	r3, #1
 80100ec:	75fb      	strb	r3, [r7, #23]
      break;
 80100ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	2200      	movs	r2, #0
 80100f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80100f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80100fa:	4618      	mov	r0, r3
 80100fc:	3718      	adds	r7, #24
 80100fe:	46bd      	mov	sp, r7
 8010100:	bd80      	pop	{r7, pc}
 8010102:	bf00      	nop

08010104 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010104:	b480      	push	{r7}
 8010106:	b083      	sub	sp, #12
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 801010c:	bf00      	nop
 801010e:	370c      	adds	r7, #12
 8010110:	46bd      	mov	sp, r7
 8010112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010116:	4770      	bx	lr

08010118 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010118:	b480      	push	{r7}
 801011a:	b083      	sub	sp, #12
 801011c:	af00      	add	r7, sp, #0
 801011e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010120:	bf00      	nop
 8010122:	370c      	adds	r7, #12
 8010124:	46bd      	mov	sp, r7
 8010126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012a:	4770      	bx	lr

0801012c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801012c:	b480      	push	{r7}
 801012e:	b083      	sub	sp, #12
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010134:	bf00      	nop
 8010136:	370c      	adds	r7, #12
 8010138:	46bd      	mov	sp, r7
 801013a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013e:	4770      	bx	lr

08010140 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010140:	b480      	push	{r7}
 8010142:	b083      	sub	sp, #12
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010148:	bf00      	nop
 801014a:	370c      	adds	r7, #12
 801014c:	46bd      	mov	sp, r7
 801014e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010152:	4770      	bx	lr

08010154 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010154:	b480      	push	{r7}
 8010156:	b083      	sub	sp, #12
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 801015c:	bf00      	nop
 801015e:	370c      	adds	r7, #12
 8010160:	46bd      	mov	sp, r7
 8010162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010166:	4770      	bx	lr

08010168 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010168:	b480      	push	{r7}
 801016a:	b083      	sub	sp, #12
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010170:	bf00      	nop
 8010172:	370c      	adds	r7, #12
 8010174:	46bd      	mov	sp, r7
 8010176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801017a:	4770      	bx	lr

0801017c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 801017c:	b480      	push	{r7}
 801017e:	b083      	sub	sp, #12
 8010180:	af00      	add	r7, sp, #0
 8010182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8010184:	bf00      	nop
 8010186:	370c      	adds	r7, #12
 8010188:	46bd      	mov	sp, r7
 801018a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018e:	4770      	bx	lr

08010190 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8010190:	b580      	push	{r7, lr}
 8010192:	b084      	sub	sp, #16
 8010194:	af00      	add	r7, sp, #0
 8010196:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801019c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101a2:	687a      	ldr	r2, [r7, #4]
 80101a4:	429a      	cmp	r2, r3
 80101a6:	d107      	bne.n	80101b8 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	2201      	movs	r2, #1
 80101ac:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	2201      	movs	r2, #1
 80101b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80101b6:	e02a      	b.n	801020e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101bc:	687a      	ldr	r2, [r7, #4]
 80101be:	429a      	cmp	r2, r3
 80101c0:	d107      	bne.n	80101d2 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	2202      	movs	r2, #2
 80101c6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	2201      	movs	r2, #1
 80101cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80101d0:	e01d      	b.n	801020e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101d6:	687a      	ldr	r2, [r7, #4]
 80101d8:	429a      	cmp	r2, r3
 80101da:	d107      	bne.n	80101ec <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	2204      	movs	r2, #4
 80101e0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	2201      	movs	r2, #1
 80101e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80101ea:	e010      	b.n	801020e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101f0:	687a      	ldr	r2, [r7, #4]
 80101f2:	429a      	cmp	r2, r3
 80101f4:	d107      	bne.n	8010206 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	2208      	movs	r2, #8
 80101fa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	2201      	movs	r2, #1
 8010200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010204:	e003      	b.n	801020e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	2201      	movs	r2, #1
 801020a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 801020e:	68f8      	ldr	r0, [r7, #12]
 8010210:	f7ff ffb4 	bl	801017c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	2200      	movs	r2, #0
 8010218:	771a      	strb	r2, [r3, #28]
}
 801021a:	bf00      	nop
 801021c:	3710      	adds	r7, #16
 801021e:	46bd      	mov	sp, r7
 8010220:	bd80      	pop	{r7, pc}

08010222 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8010222:	b580      	push	{r7, lr}
 8010224:	b084      	sub	sp, #16
 8010226:	af00      	add	r7, sp, #0
 8010228:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801022e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010234:	687a      	ldr	r2, [r7, #4]
 8010236:	429a      	cmp	r2, r3
 8010238:	d10b      	bne.n	8010252 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	2201      	movs	r2, #1
 801023e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	69db      	ldr	r3, [r3, #28]
 8010244:	2b00      	cmp	r3, #0
 8010246:	d136      	bne.n	80102b6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	2201      	movs	r2, #1
 801024c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010250:	e031      	b.n	80102b6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010256:	687a      	ldr	r2, [r7, #4]
 8010258:	429a      	cmp	r2, r3
 801025a:	d10b      	bne.n	8010274 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	2202      	movs	r2, #2
 8010260:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	69db      	ldr	r3, [r3, #28]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d125      	bne.n	80102b6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	2201      	movs	r2, #1
 801026e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010272:	e020      	b.n	80102b6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010278:	687a      	ldr	r2, [r7, #4]
 801027a:	429a      	cmp	r2, r3
 801027c:	d10b      	bne.n	8010296 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	2204      	movs	r2, #4
 8010282:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	69db      	ldr	r3, [r3, #28]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d114      	bne.n	80102b6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	2201      	movs	r2, #1
 8010290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010294:	e00f      	b.n	80102b6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801029a:	687a      	ldr	r2, [r7, #4]
 801029c:	429a      	cmp	r2, r3
 801029e:	d10a      	bne.n	80102b6 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	2208      	movs	r2, #8
 80102a4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	69db      	ldr	r3, [r3, #28]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d103      	bne.n	80102b6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	2201      	movs	r2, #1
 80102b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80102b6:	68f8      	ldr	r0, [r7, #12]
 80102b8:	f7ff ff42 	bl	8010140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	2200      	movs	r2, #0
 80102c0:	771a      	strb	r2, [r3, #28]
}
 80102c2:	bf00      	nop
 80102c4:	3710      	adds	r7, #16
 80102c6:	46bd      	mov	sp, r7
 80102c8:	bd80      	pop	{r7, pc}

080102ca <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80102ca:	b580      	push	{r7, lr}
 80102cc:	b084      	sub	sp, #16
 80102ce:	af00      	add	r7, sp, #0
 80102d0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102d6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102dc:	687a      	ldr	r2, [r7, #4]
 80102de:	429a      	cmp	r2, r3
 80102e0:	d103      	bne.n	80102ea <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	2201      	movs	r2, #1
 80102e6:	771a      	strb	r2, [r3, #28]
 80102e8:	e019      	b.n	801031e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102ee:	687a      	ldr	r2, [r7, #4]
 80102f0:	429a      	cmp	r2, r3
 80102f2:	d103      	bne.n	80102fc <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	2202      	movs	r2, #2
 80102f8:	771a      	strb	r2, [r3, #28]
 80102fa:	e010      	b.n	801031e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010300:	687a      	ldr	r2, [r7, #4]
 8010302:	429a      	cmp	r2, r3
 8010304:	d103      	bne.n	801030e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	2204      	movs	r2, #4
 801030a:	771a      	strb	r2, [r3, #28]
 801030c:	e007      	b.n	801031e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010312:	687a      	ldr	r2, [r7, #4]
 8010314:	429a      	cmp	r2, r3
 8010316:	d102      	bne.n	801031e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	2208      	movs	r2, #8
 801031c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 801031e:	68f8      	ldr	r0, [r7, #12]
 8010320:	f7ff ff18 	bl	8010154 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	2200      	movs	r2, #0
 8010328:	771a      	strb	r2, [r3, #28]
}
 801032a:	bf00      	nop
 801032c:	3710      	adds	r7, #16
 801032e:	46bd      	mov	sp, r7
 8010330:	bd80      	pop	{r7, pc}
	...

08010334 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010334:	b480      	push	{r7}
 8010336:	b085      	sub	sp, #20
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
 801033c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	4a44      	ldr	r2, [pc, #272]	; (8010458 <TIM_Base_SetConfig+0x124>)
 8010348:	4293      	cmp	r3, r2
 801034a:	d013      	beq.n	8010374 <TIM_Base_SetConfig+0x40>
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010352:	d00f      	beq.n	8010374 <TIM_Base_SetConfig+0x40>
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	4a41      	ldr	r2, [pc, #260]	; (801045c <TIM_Base_SetConfig+0x128>)
 8010358:	4293      	cmp	r3, r2
 801035a:	d00b      	beq.n	8010374 <TIM_Base_SetConfig+0x40>
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	4a40      	ldr	r2, [pc, #256]	; (8010460 <TIM_Base_SetConfig+0x12c>)
 8010360:	4293      	cmp	r3, r2
 8010362:	d007      	beq.n	8010374 <TIM_Base_SetConfig+0x40>
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	4a3f      	ldr	r2, [pc, #252]	; (8010464 <TIM_Base_SetConfig+0x130>)
 8010368:	4293      	cmp	r3, r2
 801036a:	d003      	beq.n	8010374 <TIM_Base_SetConfig+0x40>
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	4a3e      	ldr	r2, [pc, #248]	; (8010468 <TIM_Base_SetConfig+0x134>)
 8010370:	4293      	cmp	r3, r2
 8010372:	d108      	bne.n	8010386 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801037a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801037c:	683b      	ldr	r3, [r7, #0]
 801037e:	685b      	ldr	r3, [r3, #4]
 8010380:	68fa      	ldr	r2, [r7, #12]
 8010382:	4313      	orrs	r3, r2
 8010384:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	4a33      	ldr	r2, [pc, #204]	; (8010458 <TIM_Base_SetConfig+0x124>)
 801038a:	4293      	cmp	r3, r2
 801038c:	d027      	beq.n	80103de <TIM_Base_SetConfig+0xaa>
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010394:	d023      	beq.n	80103de <TIM_Base_SetConfig+0xaa>
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	4a30      	ldr	r2, [pc, #192]	; (801045c <TIM_Base_SetConfig+0x128>)
 801039a:	4293      	cmp	r3, r2
 801039c:	d01f      	beq.n	80103de <TIM_Base_SetConfig+0xaa>
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	4a2f      	ldr	r2, [pc, #188]	; (8010460 <TIM_Base_SetConfig+0x12c>)
 80103a2:	4293      	cmp	r3, r2
 80103a4:	d01b      	beq.n	80103de <TIM_Base_SetConfig+0xaa>
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	4a2e      	ldr	r2, [pc, #184]	; (8010464 <TIM_Base_SetConfig+0x130>)
 80103aa:	4293      	cmp	r3, r2
 80103ac:	d017      	beq.n	80103de <TIM_Base_SetConfig+0xaa>
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	4a2d      	ldr	r2, [pc, #180]	; (8010468 <TIM_Base_SetConfig+0x134>)
 80103b2:	4293      	cmp	r3, r2
 80103b4:	d013      	beq.n	80103de <TIM_Base_SetConfig+0xaa>
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	4a2c      	ldr	r2, [pc, #176]	; (801046c <TIM_Base_SetConfig+0x138>)
 80103ba:	4293      	cmp	r3, r2
 80103bc:	d00f      	beq.n	80103de <TIM_Base_SetConfig+0xaa>
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	4a2b      	ldr	r2, [pc, #172]	; (8010470 <TIM_Base_SetConfig+0x13c>)
 80103c2:	4293      	cmp	r3, r2
 80103c4:	d00b      	beq.n	80103de <TIM_Base_SetConfig+0xaa>
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	4a2a      	ldr	r2, [pc, #168]	; (8010474 <TIM_Base_SetConfig+0x140>)
 80103ca:	4293      	cmp	r3, r2
 80103cc:	d007      	beq.n	80103de <TIM_Base_SetConfig+0xaa>
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	4a29      	ldr	r2, [pc, #164]	; (8010478 <TIM_Base_SetConfig+0x144>)
 80103d2:	4293      	cmp	r3, r2
 80103d4:	d003      	beq.n	80103de <TIM_Base_SetConfig+0xaa>
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	4a28      	ldr	r2, [pc, #160]	; (801047c <TIM_Base_SetConfig+0x148>)
 80103da:	4293      	cmp	r3, r2
 80103dc:	d108      	bne.n	80103f0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80103e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80103e6:	683b      	ldr	r3, [r7, #0]
 80103e8:	68db      	ldr	r3, [r3, #12]
 80103ea:	68fa      	ldr	r2, [r7, #12]
 80103ec:	4313      	orrs	r3, r2
 80103ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80103f6:	683b      	ldr	r3, [r7, #0]
 80103f8:	695b      	ldr	r3, [r3, #20]
 80103fa:	4313      	orrs	r3, r2
 80103fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	68fa      	ldr	r2, [r7, #12]
 8010402:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010404:	683b      	ldr	r3, [r7, #0]
 8010406:	689a      	ldr	r2, [r3, #8]
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801040c:	683b      	ldr	r3, [r7, #0]
 801040e:	681a      	ldr	r2, [r3, #0]
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	4a10      	ldr	r2, [pc, #64]	; (8010458 <TIM_Base_SetConfig+0x124>)
 8010418:	4293      	cmp	r3, r2
 801041a:	d00f      	beq.n	801043c <TIM_Base_SetConfig+0x108>
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	4a12      	ldr	r2, [pc, #72]	; (8010468 <TIM_Base_SetConfig+0x134>)
 8010420:	4293      	cmp	r3, r2
 8010422:	d00b      	beq.n	801043c <TIM_Base_SetConfig+0x108>
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	4a11      	ldr	r2, [pc, #68]	; (801046c <TIM_Base_SetConfig+0x138>)
 8010428:	4293      	cmp	r3, r2
 801042a:	d007      	beq.n	801043c <TIM_Base_SetConfig+0x108>
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	4a10      	ldr	r2, [pc, #64]	; (8010470 <TIM_Base_SetConfig+0x13c>)
 8010430:	4293      	cmp	r3, r2
 8010432:	d003      	beq.n	801043c <TIM_Base_SetConfig+0x108>
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	4a0f      	ldr	r2, [pc, #60]	; (8010474 <TIM_Base_SetConfig+0x140>)
 8010438:	4293      	cmp	r3, r2
 801043a:	d103      	bne.n	8010444 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801043c:	683b      	ldr	r3, [r7, #0]
 801043e:	691a      	ldr	r2, [r3, #16]
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	2201      	movs	r2, #1
 8010448:	615a      	str	r2, [r3, #20]
}
 801044a:	bf00      	nop
 801044c:	3714      	adds	r7, #20
 801044e:	46bd      	mov	sp, r7
 8010450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010454:	4770      	bx	lr
 8010456:	bf00      	nop
 8010458:	40010000 	.word	0x40010000
 801045c:	40000400 	.word	0x40000400
 8010460:	40000800 	.word	0x40000800
 8010464:	40000c00 	.word	0x40000c00
 8010468:	40010400 	.word	0x40010400
 801046c:	40014000 	.word	0x40014000
 8010470:	40014400 	.word	0x40014400
 8010474:	40014800 	.word	0x40014800
 8010478:	4000e000 	.word	0x4000e000
 801047c:	4000e400 	.word	0x4000e400

08010480 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010480:	b480      	push	{r7}
 8010482:	b087      	sub	sp, #28
 8010484:	af00      	add	r7, sp, #0
 8010486:	6078      	str	r0, [r7, #4]
 8010488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	6a1b      	ldr	r3, [r3, #32]
 801048e:	f023 0201 	bic.w	r2, r3, #1
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	6a1b      	ldr	r3, [r3, #32]
 801049a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	685b      	ldr	r3, [r3, #4]
 80104a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	699b      	ldr	r3, [r3, #24]
 80104a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80104a8:	68fa      	ldr	r2, [r7, #12]
 80104aa:	4b37      	ldr	r3, [pc, #220]	; (8010588 <TIM_OC1_SetConfig+0x108>)
 80104ac:	4013      	ands	r3, r2
 80104ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	f023 0303 	bic.w	r3, r3, #3
 80104b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80104b8:	683b      	ldr	r3, [r7, #0]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	68fa      	ldr	r2, [r7, #12]
 80104be:	4313      	orrs	r3, r2
 80104c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80104c2:	697b      	ldr	r3, [r7, #20]
 80104c4:	f023 0302 	bic.w	r3, r3, #2
 80104c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80104ca:	683b      	ldr	r3, [r7, #0]
 80104cc:	689b      	ldr	r3, [r3, #8]
 80104ce:	697a      	ldr	r2, [r7, #20]
 80104d0:	4313      	orrs	r3, r2
 80104d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	4a2d      	ldr	r2, [pc, #180]	; (801058c <TIM_OC1_SetConfig+0x10c>)
 80104d8:	4293      	cmp	r3, r2
 80104da:	d00f      	beq.n	80104fc <TIM_OC1_SetConfig+0x7c>
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	4a2c      	ldr	r2, [pc, #176]	; (8010590 <TIM_OC1_SetConfig+0x110>)
 80104e0:	4293      	cmp	r3, r2
 80104e2:	d00b      	beq.n	80104fc <TIM_OC1_SetConfig+0x7c>
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	4a2b      	ldr	r2, [pc, #172]	; (8010594 <TIM_OC1_SetConfig+0x114>)
 80104e8:	4293      	cmp	r3, r2
 80104ea:	d007      	beq.n	80104fc <TIM_OC1_SetConfig+0x7c>
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	4a2a      	ldr	r2, [pc, #168]	; (8010598 <TIM_OC1_SetConfig+0x118>)
 80104f0:	4293      	cmp	r3, r2
 80104f2:	d003      	beq.n	80104fc <TIM_OC1_SetConfig+0x7c>
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	4a29      	ldr	r2, [pc, #164]	; (801059c <TIM_OC1_SetConfig+0x11c>)
 80104f8:	4293      	cmp	r3, r2
 80104fa:	d10c      	bne.n	8010516 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80104fc:	697b      	ldr	r3, [r7, #20]
 80104fe:	f023 0308 	bic.w	r3, r3, #8
 8010502:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010504:	683b      	ldr	r3, [r7, #0]
 8010506:	68db      	ldr	r3, [r3, #12]
 8010508:	697a      	ldr	r2, [r7, #20]
 801050a:	4313      	orrs	r3, r2
 801050c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801050e:	697b      	ldr	r3, [r7, #20]
 8010510:	f023 0304 	bic.w	r3, r3, #4
 8010514:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	4a1c      	ldr	r2, [pc, #112]	; (801058c <TIM_OC1_SetConfig+0x10c>)
 801051a:	4293      	cmp	r3, r2
 801051c:	d00f      	beq.n	801053e <TIM_OC1_SetConfig+0xbe>
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	4a1b      	ldr	r2, [pc, #108]	; (8010590 <TIM_OC1_SetConfig+0x110>)
 8010522:	4293      	cmp	r3, r2
 8010524:	d00b      	beq.n	801053e <TIM_OC1_SetConfig+0xbe>
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	4a1a      	ldr	r2, [pc, #104]	; (8010594 <TIM_OC1_SetConfig+0x114>)
 801052a:	4293      	cmp	r3, r2
 801052c:	d007      	beq.n	801053e <TIM_OC1_SetConfig+0xbe>
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	4a19      	ldr	r2, [pc, #100]	; (8010598 <TIM_OC1_SetConfig+0x118>)
 8010532:	4293      	cmp	r3, r2
 8010534:	d003      	beq.n	801053e <TIM_OC1_SetConfig+0xbe>
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	4a18      	ldr	r2, [pc, #96]	; (801059c <TIM_OC1_SetConfig+0x11c>)
 801053a:	4293      	cmp	r3, r2
 801053c:	d111      	bne.n	8010562 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801053e:	693b      	ldr	r3, [r7, #16]
 8010540:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010544:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010546:	693b      	ldr	r3, [r7, #16]
 8010548:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801054c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801054e:	683b      	ldr	r3, [r7, #0]
 8010550:	695b      	ldr	r3, [r3, #20]
 8010552:	693a      	ldr	r2, [r7, #16]
 8010554:	4313      	orrs	r3, r2
 8010556:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010558:	683b      	ldr	r3, [r7, #0]
 801055a:	699b      	ldr	r3, [r3, #24]
 801055c:	693a      	ldr	r2, [r7, #16]
 801055e:	4313      	orrs	r3, r2
 8010560:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	693a      	ldr	r2, [r7, #16]
 8010566:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	68fa      	ldr	r2, [r7, #12]
 801056c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801056e:	683b      	ldr	r3, [r7, #0]
 8010570:	685a      	ldr	r2, [r3, #4]
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	697a      	ldr	r2, [r7, #20]
 801057a:	621a      	str	r2, [r3, #32]
}
 801057c:	bf00      	nop
 801057e:	371c      	adds	r7, #28
 8010580:	46bd      	mov	sp, r7
 8010582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010586:	4770      	bx	lr
 8010588:	fffeff8f 	.word	0xfffeff8f
 801058c:	40010000 	.word	0x40010000
 8010590:	40010400 	.word	0x40010400
 8010594:	40014000 	.word	0x40014000
 8010598:	40014400 	.word	0x40014400
 801059c:	40014800 	.word	0x40014800

080105a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80105a0:	b480      	push	{r7}
 80105a2:	b087      	sub	sp, #28
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	6078      	str	r0, [r7, #4]
 80105a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	6a1b      	ldr	r3, [r3, #32]
 80105ae:	f023 0210 	bic.w	r2, r3, #16
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	6a1b      	ldr	r3, [r3, #32]
 80105ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	685b      	ldr	r3, [r3, #4]
 80105c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	699b      	ldr	r3, [r3, #24]
 80105c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80105c8:	68fa      	ldr	r2, [r7, #12]
 80105ca:	4b34      	ldr	r3, [pc, #208]	; (801069c <TIM_OC2_SetConfig+0xfc>)
 80105cc:	4013      	ands	r3, r2
 80105ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80105d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80105d8:	683b      	ldr	r3, [r7, #0]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	021b      	lsls	r3, r3, #8
 80105de:	68fa      	ldr	r2, [r7, #12]
 80105e0:	4313      	orrs	r3, r2
 80105e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80105e4:	697b      	ldr	r3, [r7, #20]
 80105e6:	f023 0320 	bic.w	r3, r3, #32
 80105ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80105ec:	683b      	ldr	r3, [r7, #0]
 80105ee:	689b      	ldr	r3, [r3, #8]
 80105f0:	011b      	lsls	r3, r3, #4
 80105f2:	697a      	ldr	r2, [r7, #20]
 80105f4:	4313      	orrs	r3, r2
 80105f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	4a29      	ldr	r2, [pc, #164]	; (80106a0 <TIM_OC2_SetConfig+0x100>)
 80105fc:	4293      	cmp	r3, r2
 80105fe:	d003      	beq.n	8010608 <TIM_OC2_SetConfig+0x68>
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	4a28      	ldr	r2, [pc, #160]	; (80106a4 <TIM_OC2_SetConfig+0x104>)
 8010604:	4293      	cmp	r3, r2
 8010606:	d10d      	bne.n	8010624 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010608:	697b      	ldr	r3, [r7, #20]
 801060a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801060e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010610:	683b      	ldr	r3, [r7, #0]
 8010612:	68db      	ldr	r3, [r3, #12]
 8010614:	011b      	lsls	r3, r3, #4
 8010616:	697a      	ldr	r2, [r7, #20]
 8010618:	4313      	orrs	r3, r2
 801061a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801061c:	697b      	ldr	r3, [r7, #20]
 801061e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010622:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	4a1e      	ldr	r2, [pc, #120]	; (80106a0 <TIM_OC2_SetConfig+0x100>)
 8010628:	4293      	cmp	r3, r2
 801062a:	d00f      	beq.n	801064c <TIM_OC2_SetConfig+0xac>
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	4a1d      	ldr	r2, [pc, #116]	; (80106a4 <TIM_OC2_SetConfig+0x104>)
 8010630:	4293      	cmp	r3, r2
 8010632:	d00b      	beq.n	801064c <TIM_OC2_SetConfig+0xac>
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	4a1c      	ldr	r2, [pc, #112]	; (80106a8 <TIM_OC2_SetConfig+0x108>)
 8010638:	4293      	cmp	r3, r2
 801063a:	d007      	beq.n	801064c <TIM_OC2_SetConfig+0xac>
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	4a1b      	ldr	r2, [pc, #108]	; (80106ac <TIM_OC2_SetConfig+0x10c>)
 8010640:	4293      	cmp	r3, r2
 8010642:	d003      	beq.n	801064c <TIM_OC2_SetConfig+0xac>
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	4a1a      	ldr	r2, [pc, #104]	; (80106b0 <TIM_OC2_SetConfig+0x110>)
 8010648:	4293      	cmp	r3, r2
 801064a:	d113      	bne.n	8010674 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801064c:	693b      	ldr	r3, [r7, #16]
 801064e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010652:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010654:	693b      	ldr	r3, [r7, #16]
 8010656:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801065a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801065c:	683b      	ldr	r3, [r7, #0]
 801065e:	695b      	ldr	r3, [r3, #20]
 8010660:	009b      	lsls	r3, r3, #2
 8010662:	693a      	ldr	r2, [r7, #16]
 8010664:	4313      	orrs	r3, r2
 8010666:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010668:	683b      	ldr	r3, [r7, #0]
 801066a:	699b      	ldr	r3, [r3, #24]
 801066c:	009b      	lsls	r3, r3, #2
 801066e:	693a      	ldr	r2, [r7, #16]
 8010670:	4313      	orrs	r3, r2
 8010672:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	693a      	ldr	r2, [r7, #16]
 8010678:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	68fa      	ldr	r2, [r7, #12]
 801067e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010680:	683b      	ldr	r3, [r7, #0]
 8010682:	685a      	ldr	r2, [r3, #4]
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	697a      	ldr	r2, [r7, #20]
 801068c:	621a      	str	r2, [r3, #32]
}
 801068e:	bf00      	nop
 8010690:	371c      	adds	r7, #28
 8010692:	46bd      	mov	sp, r7
 8010694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010698:	4770      	bx	lr
 801069a:	bf00      	nop
 801069c:	feff8fff 	.word	0xfeff8fff
 80106a0:	40010000 	.word	0x40010000
 80106a4:	40010400 	.word	0x40010400
 80106a8:	40014000 	.word	0x40014000
 80106ac:	40014400 	.word	0x40014400
 80106b0:	40014800 	.word	0x40014800

080106b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80106b4:	b480      	push	{r7}
 80106b6:	b087      	sub	sp, #28
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	6078      	str	r0, [r7, #4]
 80106bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	6a1b      	ldr	r3, [r3, #32]
 80106c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	6a1b      	ldr	r3, [r3, #32]
 80106ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	685b      	ldr	r3, [r3, #4]
 80106d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	69db      	ldr	r3, [r3, #28]
 80106da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80106dc:	68fa      	ldr	r2, [r7, #12]
 80106de:	4b33      	ldr	r3, [pc, #204]	; (80107ac <TIM_OC3_SetConfig+0xf8>)
 80106e0:	4013      	ands	r3, r2
 80106e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	f023 0303 	bic.w	r3, r3, #3
 80106ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80106ec:	683b      	ldr	r3, [r7, #0]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	68fa      	ldr	r2, [r7, #12]
 80106f2:	4313      	orrs	r3, r2
 80106f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80106f6:	697b      	ldr	r3, [r7, #20]
 80106f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80106fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80106fe:	683b      	ldr	r3, [r7, #0]
 8010700:	689b      	ldr	r3, [r3, #8]
 8010702:	021b      	lsls	r3, r3, #8
 8010704:	697a      	ldr	r2, [r7, #20]
 8010706:	4313      	orrs	r3, r2
 8010708:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	4a28      	ldr	r2, [pc, #160]	; (80107b0 <TIM_OC3_SetConfig+0xfc>)
 801070e:	4293      	cmp	r3, r2
 8010710:	d003      	beq.n	801071a <TIM_OC3_SetConfig+0x66>
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	4a27      	ldr	r2, [pc, #156]	; (80107b4 <TIM_OC3_SetConfig+0x100>)
 8010716:	4293      	cmp	r3, r2
 8010718:	d10d      	bne.n	8010736 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801071a:	697b      	ldr	r3, [r7, #20]
 801071c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010720:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010722:	683b      	ldr	r3, [r7, #0]
 8010724:	68db      	ldr	r3, [r3, #12]
 8010726:	021b      	lsls	r3, r3, #8
 8010728:	697a      	ldr	r2, [r7, #20]
 801072a:	4313      	orrs	r3, r2
 801072c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801072e:	697b      	ldr	r3, [r7, #20]
 8010730:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010734:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	4a1d      	ldr	r2, [pc, #116]	; (80107b0 <TIM_OC3_SetConfig+0xfc>)
 801073a:	4293      	cmp	r3, r2
 801073c:	d00f      	beq.n	801075e <TIM_OC3_SetConfig+0xaa>
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	4a1c      	ldr	r2, [pc, #112]	; (80107b4 <TIM_OC3_SetConfig+0x100>)
 8010742:	4293      	cmp	r3, r2
 8010744:	d00b      	beq.n	801075e <TIM_OC3_SetConfig+0xaa>
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	4a1b      	ldr	r2, [pc, #108]	; (80107b8 <TIM_OC3_SetConfig+0x104>)
 801074a:	4293      	cmp	r3, r2
 801074c:	d007      	beq.n	801075e <TIM_OC3_SetConfig+0xaa>
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	4a1a      	ldr	r2, [pc, #104]	; (80107bc <TIM_OC3_SetConfig+0x108>)
 8010752:	4293      	cmp	r3, r2
 8010754:	d003      	beq.n	801075e <TIM_OC3_SetConfig+0xaa>
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	4a19      	ldr	r2, [pc, #100]	; (80107c0 <TIM_OC3_SetConfig+0x10c>)
 801075a:	4293      	cmp	r3, r2
 801075c:	d113      	bne.n	8010786 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801075e:	693b      	ldr	r3, [r7, #16]
 8010760:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010764:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010766:	693b      	ldr	r3, [r7, #16]
 8010768:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801076c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801076e:	683b      	ldr	r3, [r7, #0]
 8010770:	695b      	ldr	r3, [r3, #20]
 8010772:	011b      	lsls	r3, r3, #4
 8010774:	693a      	ldr	r2, [r7, #16]
 8010776:	4313      	orrs	r3, r2
 8010778:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801077a:	683b      	ldr	r3, [r7, #0]
 801077c:	699b      	ldr	r3, [r3, #24]
 801077e:	011b      	lsls	r3, r3, #4
 8010780:	693a      	ldr	r2, [r7, #16]
 8010782:	4313      	orrs	r3, r2
 8010784:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	693a      	ldr	r2, [r7, #16]
 801078a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	68fa      	ldr	r2, [r7, #12]
 8010790:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010792:	683b      	ldr	r3, [r7, #0]
 8010794:	685a      	ldr	r2, [r3, #4]
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	697a      	ldr	r2, [r7, #20]
 801079e:	621a      	str	r2, [r3, #32]
}
 80107a0:	bf00      	nop
 80107a2:	371c      	adds	r7, #28
 80107a4:	46bd      	mov	sp, r7
 80107a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107aa:	4770      	bx	lr
 80107ac:	fffeff8f 	.word	0xfffeff8f
 80107b0:	40010000 	.word	0x40010000
 80107b4:	40010400 	.word	0x40010400
 80107b8:	40014000 	.word	0x40014000
 80107bc:	40014400 	.word	0x40014400
 80107c0:	40014800 	.word	0x40014800

080107c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80107c4:	b480      	push	{r7}
 80107c6:	b087      	sub	sp, #28
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
 80107cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	6a1b      	ldr	r3, [r3, #32]
 80107d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	6a1b      	ldr	r3, [r3, #32]
 80107de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	685b      	ldr	r3, [r3, #4]
 80107e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	69db      	ldr	r3, [r3, #28]
 80107ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80107ec:	68fa      	ldr	r2, [r7, #12]
 80107ee:	4b24      	ldr	r3, [pc, #144]	; (8010880 <TIM_OC4_SetConfig+0xbc>)
 80107f0:	4013      	ands	r3, r2
 80107f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80107fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80107fc:	683b      	ldr	r3, [r7, #0]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	021b      	lsls	r3, r3, #8
 8010802:	68fa      	ldr	r2, [r7, #12]
 8010804:	4313      	orrs	r3, r2
 8010806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010808:	693b      	ldr	r3, [r7, #16]
 801080a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801080e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010810:	683b      	ldr	r3, [r7, #0]
 8010812:	689b      	ldr	r3, [r3, #8]
 8010814:	031b      	lsls	r3, r3, #12
 8010816:	693a      	ldr	r2, [r7, #16]
 8010818:	4313      	orrs	r3, r2
 801081a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	4a19      	ldr	r2, [pc, #100]	; (8010884 <TIM_OC4_SetConfig+0xc0>)
 8010820:	4293      	cmp	r3, r2
 8010822:	d00f      	beq.n	8010844 <TIM_OC4_SetConfig+0x80>
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	4a18      	ldr	r2, [pc, #96]	; (8010888 <TIM_OC4_SetConfig+0xc4>)
 8010828:	4293      	cmp	r3, r2
 801082a:	d00b      	beq.n	8010844 <TIM_OC4_SetConfig+0x80>
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	4a17      	ldr	r2, [pc, #92]	; (801088c <TIM_OC4_SetConfig+0xc8>)
 8010830:	4293      	cmp	r3, r2
 8010832:	d007      	beq.n	8010844 <TIM_OC4_SetConfig+0x80>
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	4a16      	ldr	r2, [pc, #88]	; (8010890 <TIM_OC4_SetConfig+0xcc>)
 8010838:	4293      	cmp	r3, r2
 801083a:	d003      	beq.n	8010844 <TIM_OC4_SetConfig+0x80>
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	4a15      	ldr	r2, [pc, #84]	; (8010894 <TIM_OC4_SetConfig+0xd0>)
 8010840:	4293      	cmp	r3, r2
 8010842:	d109      	bne.n	8010858 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010844:	697b      	ldr	r3, [r7, #20]
 8010846:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801084a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801084c:	683b      	ldr	r3, [r7, #0]
 801084e:	695b      	ldr	r3, [r3, #20]
 8010850:	019b      	lsls	r3, r3, #6
 8010852:	697a      	ldr	r2, [r7, #20]
 8010854:	4313      	orrs	r3, r2
 8010856:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	697a      	ldr	r2, [r7, #20]
 801085c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	68fa      	ldr	r2, [r7, #12]
 8010862:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010864:	683b      	ldr	r3, [r7, #0]
 8010866:	685a      	ldr	r2, [r3, #4]
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	693a      	ldr	r2, [r7, #16]
 8010870:	621a      	str	r2, [r3, #32]
}
 8010872:	bf00      	nop
 8010874:	371c      	adds	r7, #28
 8010876:	46bd      	mov	sp, r7
 8010878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087c:	4770      	bx	lr
 801087e:	bf00      	nop
 8010880:	feff8fff 	.word	0xfeff8fff
 8010884:	40010000 	.word	0x40010000
 8010888:	40010400 	.word	0x40010400
 801088c:	40014000 	.word	0x40014000
 8010890:	40014400 	.word	0x40014400
 8010894:	40014800 	.word	0x40014800

08010898 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010898:	b480      	push	{r7}
 801089a:	b087      	sub	sp, #28
 801089c:	af00      	add	r7, sp, #0
 801089e:	6078      	str	r0, [r7, #4]
 80108a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	6a1b      	ldr	r3, [r3, #32]
 80108a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	6a1b      	ldr	r3, [r3, #32]
 80108b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	685b      	ldr	r3, [r3, #4]
 80108b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80108be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80108c0:	68fa      	ldr	r2, [r7, #12]
 80108c2:	4b21      	ldr	r3, [pc, #132]	; (8010948 <TIM_OC5_SetConfig+0xb0>)
 80108c4:	4013      	ands	r3, r2
 80108c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80108c8:	683b      	ldr	r3, [r7, #0]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	68fa      	ldr	r2, [r7, #12]
 80108ce:	4313      	orrs	r3, r2
 80108d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80108d2:	693b      	ldr	r3, [r7, #16]
 80108d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80108d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80108da:	683b      	ldr	r3, [r7, #0]
 80108dc:	689b      	ldr	r3, [r3, #8]
 80108de:	041b      	lsls	r3, r3, #16
 80108e0:	693a      	ldr	r2, [r7, #16]
 80108e2:	4313      	orrs	r3, r2
 80108e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	4a18      	ldr	r2, [pc, #96]	; (801094c <TIM_OC5_SetConfig+0xb4>)
 80108ea:	4293      	cmp	r3, r2
 80108ec:	d00f      	beq.n	801090e <TIM_OC5_SetConfig+0x76>
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	4a17      	ldr	r2, [pc, #92]	; (8010950 <TIM_OC5_SetConfig+0xb8>)
 80108f2:	4293      	cmp	r3, r2
 80108f4:	d00b      	beq.n	801090e <TIM_OC5_SetConfig+0x76>
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	4a16      	ldr	r2, [pc, #88]	; (8010954 <TIM_OC5_SetConfig+0xbc>)
 80108fa:	4293      	cmp	r3, r2
 80108fc:	d007      	beq.n	801090e <TIM_OC5_SetConfig+0x76>
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	4a15      	ldr	r2, [pc, #84]	; (8010958 <TIM_OC5_SetConfig+0xc0>)
 8010902:	4293      	cmp	r3, r2
 8010904:	d003      	beq.n	801090e <TIM_OC5_SetConfig+0x76>
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	4a14      	ldr	r2, [pc, #80]	; (801095c <TIM_OC5_SetConfig+0xc4>)
 801090a:	4293      	cmp	r3, r2
 801090c:	d109      	bne.n	8010922 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801090e:	697b      	ldr	r3, [r7, #20]
 8010910:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010914:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010916:	683b      	ldr	r3, [r7, #0]
 8010918:	695b      	ldr	r3, [r3, #20]
 801091a:	021b      	lsls	r3, r3, #8
 801091c:	697a      	ldr	r2, [r7, #20]
 801091e:	4313      	orrs	r3, r2
 8010920:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	697a      	ldr	r2, [r7, #20]
 8010926:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	68fa      	ldr	r2, [r7, #12]
 801092c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801092e:	683b      	ldr	r3, [r7, #0]
 8010930:	685a      	ldr	r2, [r3, #4]
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	693a      	ldr	r2, [r7, #16]
 801093a:	621a      	str	r2, [r3, #32]
}
 801093c:	bf00      	nop
 801093e:	371c      	adds	r7, #28
 8010940:	46bd      	mov	sp, r7
 8010942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010946:	4770      	bx	lr
 8010948:	fffeff8f 	.word	0xfffeff8f
 801094c:	40010000 	.word	0x40010000
 8010950:	40010400 	.word	0x40010400
 8010954:	40014000 	.word	0x40014000
 8010958:	40014400 	.word	0x40014400
 801095c:	40014800 	.word	0x40014800

08010960 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010960:	b480      	push	{r7}
 8010962:	b087      	sub	sp, #28
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
 8010968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	6a1b      	ldr	r3, [r3, #32]
 801096e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	6a1b      	ldr	r3, [r3, #32]
 801097a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	685b      	ldr	r3, [r3, #4]
 8010980:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010988:	68fa      	ldr	r2, [r7, #12]
 801098a:	4b22      	ldr	r3, [pc, #136]	; (8010a14 <TIM_OC6_SetConfig+0xb4>)
 801098c:	4013      	ands	r3, r2
 801098e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010990:	683b      	ldr	r3, [r7, #0]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	021b      	lsls	r3, r3, #8
 8010996:	68fa      	ldr	r2, [r7, #12]
 8010998:	4313      	orrs	r3, r2
 801099a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801099c:	693b      	ldr	r3, [r7, #16]
 801099e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80109a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80109a4:	683b      	ldr	r3, [r7, #0]
 80109a6:	689b      	ldr	r3, [r3, #8]
 80109a8:	051b      	lsls	r3, r3, #20
 80109aa:	693a      	ldr	r2, [r7, #16]
 80109ac:	4313      	orrs	r3, r2
 80109ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	4a19      	ldr	r2, [pc, #100]	; (8010a18 <TIM_OC6_SetConfig+0xb8>)
 80109b4:	4293      	cmp	r3, r2
 80109b6:	d00f      	beq.n	80109d8 <TIM_OC6_SetConfig+0x78>
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	4a18      	ldr	r2, [pc, #96]	; (8010a1c <TIM_OC6_SetConfig+0xbc>)
 80109bc:	4293      	cmp	r3, r2
 80109be:	d00b      	beq.n	80109d8 <TIM_OC6_SetConfig+0x78>
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	4a17      	ldr	r2, [pc, #92]	; (8010a20 <TIM_OC6_SetConfig+0xc0>)
 80109c4:	4293      	cmp	r3, r2
 80109c6:	d007      	beq.n	80109d8 <TIM_OC6_SetConfig+0x78>
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	4a16      	ldr	r2, [pc, #88]	; (8010a24 <TIM_OC6_SetConfig+0xc4>)
 80109cc:	4293      	cmp	r3, r2
 80109ce:	d003      	beq.n	80109d8 <TIM_OC6_SetConfig+0x78>
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	4a15      	ldr	r2, [pc, #84]	; (8010a28 <TIM_OC6_SetConfig+0xc8>)
 80109d4:	4293      	cmp	r3, r2
 80109d6:	d109      	bne.n	80109ec <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80109d8:	697b      	ldr	r3, [r7, #20]
 80109da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80109de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80109e0:	683b      	ldr	r3, [r7, #0]
 80109e2:	695b      	ldr	r3, [r3, #20]
 80109e4:	029b      	lsls	r3, r3, #10
 80109e6:	697a      	ldr	r2, [r7, #20]
 80109e8:	4313      	orrs	r3, r2
 80109ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	697a      	ldr	r2, [r7, #20]
 80109f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	68fa      	ldr	r2, [r7, #12]
 80109f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80109f8:	683b      	ldr	r3, [r7, #0]
 80109fa:	685a      	ldr	r2, [r3, #4]
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	693a      	ldr	r2, [r7, #16]
 8010a04:	621a      	str	r2, [r3, #32]
}
 8010a06:	bf00      	nop
 8010a08:	371c      	adds	r7, #28
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a10:	4770      	bx	lr
 8010a12:	bf00      	nop
 8010a14:	feff8fff 	.word	0xfeff8fff
 8010a18:	40010000 	.word	0x40010000
 8010a1c:	40010400 	.word	0x40010400
 8010a20:	40014000 	.word	0x40014000
 8010a24:	40014400 	.word	0x40014400
 8010a28:	40014800 	.word	0x40014800

08010a2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010a2c:	b480      	push	{r7}
 8010a2e:	b087      	sub	sp, #28
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	60f8      	str	r0, [r7, #12]
 8010a34:	60b9      	str	r1, [r7, #8]
 8010a36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010a38:	68bb      	ldr	r3, [r7, #8]
 8010a3a:	f003 031f 	and.w	r3, r3, #31
 8010a3e:	2201      	movs	r2, #1
 8010a40:	fa02 f303 	lsl.w	r3, r2, r3
 8010a44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	6a1a      	ldr	r2, [r3, #32]
 8010a4a:	697b      	ldr	r3, [r7, #20]
 8010a4c:	43db      	mvns	r3, r3
 8010a4e:	401a      	ands	r2, r3
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	6a1a      	ldr	r2, [r3, #32]
 8010a58:	68bb      	ldr	r3, [r7, #8]
 8010a5a:	f003 031f 	and.w	r3, r3, #31
 8010a5e:	6879      	ldr	r1, [r7, #4]
 8010a60:	fa01 f303 	lsl.w	r3, r1, r3
 8010a64:	431a      	orrs	r2, r3
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	621a      	str	r2, [r3, #32]
}
 8010a6a:	bf00      	nop
 8010a6c:	371c      	adds	r7, #28
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a74:	4770      	bx	lr
	...

08010a78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010a78:	b480      	push	{r7}
 8010a7a:	b085      	sub	sp, #20
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	6078      	str	r0, [r7, #4]
 8010a80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010a88:	2b01      	cmp	r3, #1
 8010a8a:	d101      	bne.n	8010a90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010a8c:	2302      	movs	r3, #2
 8010a8e:	e077      	b.n	8010b80 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	2201      	movs	r2, #1
 8010a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	2202      	movs	r2, #2
 8010a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	685b      	ldr	r3, [r3, #4]
 8010aa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	689b      	ldr	r3, [r3, #8]
 8010aae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	4a35      	ldr	r2, [pc, #212]	; (8010b8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010ab6:	4293      	cmp	r3, r2
 8010ab8:	d004      	beq.n	8010ac4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	4a34      	ldr	r2, [pc, #208]	; (8010b90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010ac0:	4293      	cmp	r3, r2
 8010ac2:	d108      	bne.n	8010ad6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010aca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010acc:	683b      	ldr	r3, [r7, #0]
 8010ace:	685b      	ldr	r3, [r3, #4]
 8010ad0:	68fa      	ldr	r2, [r7, #12]
 8010ad2:	4313      	orrs	r3, r2
 8010ad4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010adc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010ade:	683b      	ldr	r3, [r7, #0]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	68fa      	ldr	r2, [r7, #12]
 8010ae4:	4313      	orrs	r3, r2
 8010ae6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	68fa      	ldr	r2, [r7, #12]
 8010aee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	4a25      	ldr	r2, [pc, #148]	; (8010b8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010af6:	4293      	cmp	r3, r2
 8010af8:	d02c      	beq.n	8010b54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010b02:	d027      	beq.n	8010b54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	4a22      	ldr	r2, [pc, #136]	; (8010b94 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8010b0a:	4293      	cmp	r3, r2
 8010b0c:	d022      	beq.n	8010b54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	4a21      	ldr	r2, [pc, #132]	; (8010b98 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8010b14:	4293      	cmp	r3, r2
 8010b16:	d01d      	beq.n	8010b54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	4a1f      	ldr	r2, [pc, #124]	; (8010b9c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8010b1e:	4293      	cmp	r3, r2
 8010b20:	d018      	beq.n	8010b54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	4a1a      	ldr	r2, [pc, #104]	; (8010b90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010b28:	4293      	cmp	r3, r2
 8010b2a:	d013      	beq.n	8010b54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	4a1b      	ldr	r2, [pc, #108]	; (8010ba0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8010b32:	4293      	cmp	r3, r2
 8010b34:	d00e      	beq.n	8010b54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	4a1a      	ldr	r2, [pc, #104]	; (8010ba4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8010b3c:	4293      	cmp	r3, r2
 8010b3e:	d009      	beq.n	8010b54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	4a18      	ldr	r2, [pc, #96]	; (8010ba8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8010b46:	4293      	cmp	r3, r2
 8010b48:	d004      	beq.n	8010b54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	4a17      	ldr	r2, [pc, #92]	; (8010bac <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8010b50:	4293      	cmp	r3, r2
 8010b52:	d10c      	bne.n	8010b6e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010b54:	68bb      	ldr	r3, [r7, #8]
 8010b56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010b5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010b5c:	683b      	ldr	r3, [r7, #0]
 8010b5e:	689b      	ldr	r3, [r3, #8]
 8010b60:	68ba      	ldr	r2, [r7, #8]
 8010b62:	4313      	orrs	r3, r2
 8010b64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	68ba      	ldr	r2, [r7, #8]
 8010b6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	2201      	movs	r2, #1
 8010b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	2200      	movs	r2, #0
 8010b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010b7e:	2300      	movs	r3, #0
}
 8010b80:	4618      	mov	r0, r3
 8010b82:	3714      	adds	r7, #20
 8010b84:	46bd      	mov	sp, r7
 8010b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8a:	4770      	bx	lr
 8010b8c:	40010000 	.word	0x40010000
 8010b90:	40010400 	.word	0x40010400
 8010b94:	40000400 	.word	0x40000400
 8010b98:	40000800 	.word	0x40000800
 8010b9c:	40000c00 	.word	0x40000c00
 8010ba0:	40001800 	.word	0x40001800
 8010ba4:	40014000 	.word	0x40014000
 8010ba8:	4000e000 	.word	0x4000e000
 8010bac:	4000e400 	.word	0x4000e400

08010bb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010bb0:	b480      	push	{r7}
 8010bb2:	b083      	sub	sp, #12
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010bb8:	bf00      	nop
 8010bba:	370c      	adds	r7, #12
 8010bbc:	46bd      	mov	sp, r7
 8010bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc2:	4770      	bx	lr

08010bc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010bc4:	b480      	push	{r7}
 8010bc6:	b083      	sub	sp, #12
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010bcc:	bf00      	nop
 8010bce:	370c      	adds	r7, #12
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd6:	4770      	bx	lr

08010bd8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010bd8:	b480      	push	{r7}
 8010bda:	b083      	sub	sp, #12
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010be0:	bf00      	nop
 8010be2:	370c      	adds	r7, #12
 8010be4:	46bd      	mov	sp, r7
 8010be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bea:	4770      	bx	lr

08010bec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b082      	sub	sp, #8
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d101      	bne.n	8010bfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010bfa:	2301      	movs	r3, #1
 8010bfc:	e042      	b.n	8010c84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d106      	bne.n	8010c16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010c10:	6878      	ldr	r0, [r7, #4]
 8010c12:	f7f2 fcc5 	bl	80035a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	2224      	movs	r2, #36	; 0x24
 8010c1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	681a      	ldr	r2, [r3, #0]
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	f022 0201 	bic.w	r2, r2, #1
 8010c2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010c2e:	6878      	ldr	r0, [r7, #4]
 8010c30:	f000 f82c 	bl	8010c8c <UART_SetConfig>
 8010c34:	4603      	mov	r3, r0
 8010c36:	2b01      	cmp	r3, #1
 8010c38:	d101      	bne.n	8010c3e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8010c3a:	2301      	movs	r3, #1
 8010c3c:	e022      	b.n	8010c84 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d002      	beq.n	8010c4c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8010c46:	6878      	ldr	r0, [r7, #4]
 8010c48:	f000 fe8c 	bl	8011964 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	685a      	ldr	r2, [r3, #4]
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010c5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	689a      	ldr	r2, [r3, #8]
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010c6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	681a      	ldr	r2, [r3, #0]
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	f042 0201 	orr.w	r2, r2, #1
 8010c7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010c7c:	6878      	ldr	r0, [r7, #4]
 8010c7e:	f000 ff13 	bl	8011aa8 <UART_CheckIdleState>
 8010c82:	4603      	mov	r3, r0
}
 8010c84:	4618      	mov	r0, r3
 8010c86:	3708      	adds	r7, #8
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	bd80      	pop	{r7, pc}

08010c8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010c90:	b092      	sub	sp, #72	; 0x48
 8010c92:	af00      	add	r7, sp, #0
 8010c94:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010c96:	2300      	movs	r3, #0
 8010c98:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010c9c:	697b      	ldr	r3, [r7, #20]
 8010c9e:	689a      	ldr	r2, [r3, #8]
 8010ca0:	697b      	ldr	r3, [r7, #20]
 8010ca2:	691b      	ldr	r3, [r3, #16]
 8010ca4:	431a      	orrs	r2, r3
 8010ca6:	697b      	ldr	r3, [r7, #20]
 8010ca8:	695b      	ldr	r3, [r3, #20]
 8010caa:	431a      	orrs	r2, r3
 8010cac:	697b      	ldr	r3, [r7, #20]
 8010cae:	69db      	ldr	r3, [r3, #28]
 8010cb0:	4313      	orrs	r3, r2
 8010cb2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010cb4:	697b      	ldr	r3, [r7, #20]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	681a      	ldr	r2, [r3, #0]
 8010cba:	4bbe      	ldr	r3, [pc, #760]	; (8010fb4 <UART_SetConfig+0x328>)
 8010cbc:	4013      	ands	r3, r2
 8010cbe:	697a      	ldr	r2, [r7, #20]
 8010cc0:	6812      	ldr	r2, [r2, #0]
 8010cc2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010cc4:	430b      	orrs	r3, r1
 8010cc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010cc8:	697b      	ldr	r3, [r7, #20]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	685b      	ldr	r3, [r3, #4]
 8010cce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010cd2:	697b      	ldr	r3, [r7, #20]
 8010cd4:	68da      	ldr	r2, [r3, #12]
 8010cd6:	697b      	ldr	r3, [r7, #20]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	430a      	orrs	r2, r1
 8010cdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010cde:	697b      	ldr	r3, [r7, #20]
 8010ce0:	699b      	ldr	r3, [r3, #24]
 8010ce2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010ce4:	697b      	ldr	r3, [r7, #20]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	4ab3      	ldr	r2, [pc, #716]	; (8010fb8 <UART_SetConfig+0x32c>)
 8010cea:	4293      	cmp	r3, r2
 8010cec:	d004      	beq.n	8010cf8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010cee:	697b      	ldr	r3, [r7, #20]
 8010cf0:	6a1b      	ldr	r3, [r3, #32]
 8010cf2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010cf4:	4313      	orrs	r3, r2
 8010cf6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010cf8:	697b      	ldr	r3, [r7, #20]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	689a      	ldr	r2, [r3, #8]
 8010cfe:	4baf      	ldr	r3, [pc, #700]	; (8010fbc <UART_SetConfig+0x330>)
 8010d00:	4013      	ands	r3, r2
 8010d02:	697a      	ldr	r2, [r7, #20]
 8010d04:	6812      	ldr	r2, [r2, #0]
 8010d06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010d08:	430b      	orrs	r3, r1
 8010d0a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010d0c:	697b      	ldr	r3, [r7, #20]
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d12:	f023 010f 	bic.w	r1, r3, #15
 8010d16:	697b      	ldr	r3, [r7, #20]
 8010d18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d1a:	697b      	ldr	r3, [r7, #20]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	430a      	orrs	r2, r1
 8010d20:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010d22:	697b      	ldr	r3, [r7, #20]
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	4aa6      	ldr	r2, [pc, #664]	; (8010fc0 <UART_SetConfig+0x334>)
 8010d28:	4293      	cmp	r3, r2
 8010d2a:	d177      	bne.n	8010e1c <UART_SetConfig+0x190>
 8010d2c:	4ba5      	ldr	r3, [pc, #660]	; (8010fc4 <UART_SetConfig+0x338>)
 8010d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010d34:	2b28      	cmp	r3, #40	; 0x28
 8010d36:	d86d      	bhi.n	8010e14 <UART_SetConfig+0x188>
 8010d38:	a201      	add	r2, pc, #4	; (adr r2, 8010d40 <UART_SetConfig+0xb4>)
 8010d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d3e:	bf00      	nop
 8010d40:	08010de5 	.word	0x08010de5
 8010d44:	08010e15 	.word	0x08010e15
 8010d48:	08010e15 	.word	0x08010e15
 8010d4c:	08010e15 	.word	0x08010e15
 8010d50:	08010e15 	.word	0x08010e15
 8010d54:	08010e15 	.word	0x08010e15
 8010d58:	08010e15 	.word	0x08010e15
 8010d5c:	08010e15 	.word	0x08010e15
 8010d60:	08010ded 	.word	0x08010ded
 8010d64:	08010e15 	.word	0x08010e15
 8010d68:	08010e15 	.word	0x08010e15
 8010d6c:	08010e15 	.word	0x08010e15
 8010d70:	08010e15 	.word	0x08010e15
 8010d74:	08010e15 	.word	0x08010e15
 8010d78:	08010e15 	.word	0x08010e15
 8010d7c:	08010e15 	.word	0x08010e15
 8010d80:	08010df5 	.word	0x08010df5
 8010d84:	08010e15 	.word	0x08010e15
 8010d88:	08010e15 	.word	0x08010e15
 8010d8c:	08010e15 	.word	0x08010e15
 8010d90:	08010e15 	.word	0x08010e15
 8010d94:	08010e15 	.word	0x08010e15
 8010d98:	08010e15 	.word	0x08010e15
 8010d9c:	08010e15 	.word	0x08010e15
 8010da0:	08010dfd 	.word	0x08010dfd
 8010da4:	08010e15 	.word	0x08010e15
 8010da8:	08010e15 	.word	0x08010e15
 8010dac:	08010e15 	.word	0x08010e15
 8010db0:	08010e15 	.word	0x08010e15
 8010db4:	08010e15 	.word	0x08010e15
 8010db8:	08010e15 	.word	0x08010e15
 8010dbc:	08010e15 	.word	0x08010e15
 8010dc0:	08010e05 	.word	0x08010e05
 8010dc4:	08010e15 	.word	0x08010e15
 8010dc8:	08010e15 	.word	0x08010e15
 8010dcc:	08010e15 	.word	0x08010e15
 8010dd0:	08010e15 	.word	0x08010e15
 8010dd4:	08010e15 	.word	0x08010e15
 8010dd8:	08010e15 	.word	0x08010e15
 8010ddc:	08010e15 	.word	0x08010e15
 8010de0:	08010e0d 	.word	0x08010e0d
 8010de4:	2301      	movs	r3, #1
 8010de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dea:	e326      	b.n	801143a <UART_SetConfig+0x7ae>
 8010dec:	2304      	movs	r3, #4
 8010dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010df2:	e322      	b.n	801143a <UART_SetConfig+0x7ae>
 8010df4:	2308      	movs	r3, #8
 8010df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dfa:	e31e      	b.n	801143a <UART_SetConfig+0x7ae>
 8010dfc:	2310      	movs	r3, #16
 8010dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e02:	e31a      	b.n	801143a <UART_SetConfig+0x7ae>
 8010e04:	2320      	movs	r3, #32
 8010e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e0a:	e316      	b.n	801143a <UART_SetConfig+0x7ae>
 8010e0c:	2340      	movs	r3, #64	; 0x40
 8010e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e12:	e312      	b.n	801143a <UART_SetConfig+0x7ae>
 8010e14:	2380      	movs	r3, #128	; 0x80
 8010e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e1a:	e30e      	b.n	801143a <UART_SetConfig+0x7ae>
 8010e1c:	697b      	ldr	r3, [r7, #20]
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	4a69      	ldr	r2, [pc, #420]	; (8010fc8 <UART_SetConfig+0x33c>)
 8010e22:	4293      	cmp	r3, r2
 8010e24:	d130      	bne.n	8010e88 <UART_SetConfig+0x1fc>
 8010e26:	4b67      	ldr	r3, [pc, #412]	; (8010fc4 <UART_SetConfig+0x338>)
 8010e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e2a:	f003 0307 	and.w	r3, r3, #7
 8010e2e:	2b05      	cmp	r3, #5
 8010e30:	d826      	bhi.n	8010e80 <UART_SetConfig+0x1f4>
 8010e32:	a201      	add	r2, pc, #4	; (adr r2, 8010e38 <UART_SetConfig+0x1ac>)
 8010e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e38:	08010e51 	.word	0x08010e51
 8010e3c:	08010e59 	.word	0x08010e59
 8010e40:	08010e61 	.word	0x08010e61
 8010e44:	08010e69 	.word	0x08010e69
 8010e48:	08010e71 	.word	0x08010e71
 8010e4c:	08010e79 	.word	0x08010e79
 8010e50:	2300      	movs	r3, #0
 8010e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e56:	e2f0      	b.n	801143a <UART_SetConfig+0x7ae>
 8010e58:	2304      	movs	r3, #4
 8010e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e5e:	e2ec      	b.n	801143a <UART_SetConfig+0x7ae>
 8010e60:	2308      	movs	r3, #8
 8010e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e66:	e2e8      	b.n	801143a <UART_SetConfig+0x7ae>
 8010e68:	2310      	movs	r3, #16
 8010e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e6e:	e2e4      	b.n	801143a <UART_SetConfig+0x7ae>
 8010e70:	2320      	movs	r3, #32
 8010e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e76:	e2e0      	b.n	801143a <UART_SetConfig+0x7ae>
 8010e78:	2340      	movs	r3, #64	; 0x40
 8010e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e7e:	e2dc      	b.n	801143a <UART_SetConfig+0x7ae>
 8010e80:	2380      	movs	r3, #128	; 0x80
 8010e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e86:	e2d8      	b.n	801143a <UART_SetConfig+0x7ae>
 8010e88:	697b      	ldr	r3, [r7, #20]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	4a4f      	ldr	r2, [pc, #316]	; (8010fcc <UART_SetConfig+0x340>)
 8010e8e:	4293      	cmp	r3, r2
 8010e90:	d130      	bne.n	8010ef4 <UART_SetConfig+0x268>
 8010e92:	4b4c      	ldr	r3, [pc, #304]	; (8010fc4 <UART_SetConfig+0x338>)
 8010e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e96:	f003 0307 	and.w	r3, r3, #7
 8010e9a:	2b05      	cmp	r3, #5
 8010e9c:	d826      	bhi.n	8010eec <UART_SetConfig+0x260>
 8010e9e:	a201      	add	r2, pc, #4	; (adr r2, 8010ea4 <UART_SetConfig+0x218>)
 8010ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ea4:	08010ebd 	.word	0x08010ebd
 8010ea8:	08010ec5 	.word	0x08010ec5
 8010eac:	08010ecd 	.word	0x08010ecd
 8010eb0:	08010ed5 	.word	0x08010ed5
 8010eb4:	08010edd 	.word	0x08010edd
 8010eb8:	08010ee5 	.word	0x08010ee5
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ec2:	e2ba      	b.n	801143a <UART_SetConfig+0x7ae>
 8010ec4:	2304      	movs	r3, #4
 8010ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eca:	e2b6      	b.n	801143a <UART_SetConfig+0x7ae>
 8010ecc:	2308      	movs	r3, #8
 8010ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ed2:	e2b2      	b.n	801143a <UART_SetConfig+0x7ae>
 8010ed4:	2310      	movs	r3, #16
 8010ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eda:	e2ae      	b.n	801143a <UART_SetConfig+0x7ae>
 8010edc:	2320      	movs	r3, #32
 8010ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ee2:	e2aa      	b.n	801143a <UART_SetConfig+0x7ae>
 8010ee4:	2340      	movs	r3, #64	; 0x40
 8010ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eea:	e2a6      	b.n	801143a <UART_SetConfig+0x7ae>
 8010eec:	2380      	movs	r3, #128	; 0x80
 8010eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ef2:	e2a2      	b.n	801143a <UART_SetConfig+0x7ae>
 8010ef4:	697b      	ldr	r3, [r7, #20]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	4a35      	ldr	r2, [pc, #212]	; (8010fd0 <UART_SetConfig+0x344>)
 8010efa:	4293      	cmp	r3, r2
 8010efc:	d130      	bne.n	8010f60 <UART_SetConfig+0x2d4>
 8010efe:	4b31      	ldr	r3, [pc, #196]	; (8010fc4 <UART_SetConfig+0x338>)
 8010f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f02:	f003 0307 	and.w	r3, r3, #7
 8010f06:	2b05      	cmp	r3, #5
 8010f08:	d826      	bhi.n	8010f58 <UART_SetConfig+0x2cc>
 8010f0a:	a201      	add	r2, pc, #4	; (adr r2, 8010f10 <UART_SetConfig+0x284>)
 8010f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f10:	08010f29 	.word	0x08010f29
 8010f14:	08010f31 	.word	0x08010f31
 8010f18:	08010f39 	.word	0x08010f39
 8010f1c:	08010f41 	.word	0x08010f41
 8010f20:	08010f49 	.word	0x08010f49
 8010f24:	08010f51 	.word	0x08010f51
 8010f28:	2300      	movs	r3, #0
 8010f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f2e:	e284      	b.n	801143a <UART_SetConfig+0x7ae>
 8010f30:	2304      	movs	r3, #4
 8010f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f36:	e280      	b.n	801143a <UART_SetConfig+0x7ae>
 8010f38:	2308      	movs	r3, #8
 8010f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f3e:	e27c      	b.n	801143a <UART_SetConfig+0x7ae>
 8010f40:	2310      	movs	r3, #16
 8010f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f46:	e278      	b.n	801143a <UART_SetConfig+0x7ae>
 8010f48:	2320      	movs	r3, #32
 8010f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f4e:	e274      	b.n	801143a <UART_SetConfig+0x7ae>
 8010f50:	2340      	movs	r3, #64	; 0x40
 8010f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f56:	e270      	b.n	801143a <UART_SetConfig+0x7ae>
 8010f58:	2380      	movs	r3, #128	; 0x80
 8010f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f5e:	e26c      	b.n	801143a <UART_SetConfig+0x7ae>
 8010f60:	697b      	ldr	r3, [r7, #20]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	4a1b      	ldr	r2, [pc, #108]	; (8010fd4 <UART_SetConfig+0x348>)
 8010f66:	4293      	cmp	r3, r2
 8010f68:	d142      	bne.n	8010ff0 <UART_SetConfig+0x364>
 8010f6a:	4b16      	ldr	r3, [pc, #88]	; (8010fc4 <UART_SetConfig+0x338>)
 8010f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f6e:	f003 0307 	and.w	r3, r3, #7
 8010f72:	2b05      	cmp	r3, #5
 8010f74:	d838      	bhi.n	8010fe8 <UART_SetConfig+0x35c>
 8010f76:	a201      	add	r2, pc, #4	; (adr r2, 8010f7c <UART_SetConfig+0x2f0>)
 8010f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f7c:	08010f95 	.word	0x08010f95
 8010f80:	08010f9d 	.word	0x08010f9d
 8010f84:	08010fa5 	.word	0x08010fa5
 8010f88:	08010fad 	.word	0x08010fad
 8010f8c:	08010fd9 	.word	0x08010fd9
 8010f90:	08010fe1 	.word	0x08010fe1
 8010f94:	2300      	movs	r3, #0
 8010f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f9a:	e24e      	b.n	801143a <UART_SetConfig+0x7ae>
 8010f9c:	2304      	movs	r3, #4
 8010f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fa2:	e24a      	b.n	801143a <UART_SetConfig+0x7ae>
 8010fa4:	2308      	movs	r3, #8
 8010fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010faa:	e246      	b.n	801143a <UART_SetConfig+0x7ae>
 8010fac:	2310      	movs	r3, #16
 8010fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fb2:	e242      	b.n	801143a <UART_SetConfig+0x7ae>
 8010fb4:	cfff69f3 	.word	0xcfff69f3
 8010fb8:	58000c00 	.word	0x58000c00
 8010fbc:	11fff4ff 	.word	0x11fff4ff
 8010fc0:	40011000 	.word	0x40011000
 8010fc4:	58024400 	.word	0x58024400
 8010fc8:	40004400 	.word	0x40004400
 8010fcc:	40004800 	.word	0x40004800
 8010fd0:	40004c00 	.word	0x40004c00
 8010fd4:	40005000 	.word	0x40005000
 8010fd8:	2320      	movs	r3, #32
 8010fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fde:	e22c      	b.n	801143a <UART_SetConfig+0x7ae>
 8010fe0:	2340      	movs	r3, #64	; 0x40
 8010fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fe6:	e228      	b.n	801143a <UART_SetConfig+0x7ae>
 8010fe8:	2380      	movs	r3, #128	; 0x80
 8010fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fee:	e224      	b.n	801143a <UART_SetConfig+0x7ae>
 8010ff0:	697b      	ldr	r3, [r7, #20]
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	4ab1      	ldr	r2, [pc, #708]	; (80112bc <UART_SetConfig+0x630>)
 8010ff6:	4293      	cmp	r3, r2
 8010ff8:	d176      	bne.n	80110e8 <UART_SetConfig+0x45c>
 8010ffa:	4bb1      	ldr	r3, [pc, #708]	; (80112c0 <UART_SetConfig+0x634>)
 8010ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ffe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011002:	2b28      	cmp	r3, #40	; 0x28
 8011004:	d86c      	bhi.n	80110e0 <UART_SetConfig+0x454>
 8011006:	a201      	add	r2, pc, #4	; (adr r2, 801100c <UART_SetConfig+0x380>)
 8011008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801100c:	080110b1 	.word	0x080110b1
 8011010:	080110e1 	.word	0x080110e1
 8011014:	080110e1 	.word	0x080110e1
 8011018:	080110e1 	.word	0x080110e1
 801101c:	080110e1 	.word	0x080110e1
 8011020:	080110e1 	.word	0x080110e1
 8011024:	080110e1 	.word	0x080110e1
 8011028:	080110e1 	.word	0x080110e1
 801102c:	080110b9 	.word	0x080110b9
 8011030:	080110e1 	.word	0x080110e1
 8011034:	080110e1 	.word	0x080110e1
 8011038:	080110e1 	.word	0x080110e1
 801103c:	080110e1 	.word	0x080110e1
 8011040:	080110e1 	.word	0x080110e1
 8011044:	080110e1 	.word	0x080110e1
 8011048:	080110e1 	.word	0x080110e1
 801104c:	080110c1 	.word	0x080110c1
 8011050:	080110e1 	.word	0x080110e1
 8011054:	080110e1 	.word	0x080110e1
 8011058:	080110e1 	.word	0x080110e1
 801105c:	080110e1 	.word	0x080110e1
 8011060:	080110e1 	.word	0x080110e1
 8011064:	080110e1 	.word	0x080110e1
 8011068:	080110e1 	.word	0x080110e1
 801106c:	080110c9 	.word	0x080110c9
 8011070:	080110e1 	.word	0x080110e1
 8011074:	080110e1 	.word	0x080110e1
 8011078:	080110e1 	.word	0x080110e1
 801107c:	080110e1 	.word	0x080110e1
 8011080:	080110e1 	.word	0x080110e1
 8011084:	080110e1 	.word	0x080110e1
 8011088:	080110e1 	.word	0x080110e1
 801108c:	080110d1 	.word	0x080110d1
 8011090:	080110e1 	.word	0x080110e1
 8011094:	080110e1 	.word	0x080110e1
 8011098:	080110e1 	.word	0x080110e1
 801109c:	080110e1 	.word	0x080110e1
 80110a0:	080110e1 	.word	0x080110e1
 80110a4:	080110e1 	.word	0x080110e1
 80110a8:	080110e1 	.word	0x080110e1
 80110ac:	080110d9 	.word	0x080110d9
 80110b0:	2301      	movs	r3, #1
 80110b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110b6:	e1c0      	b.n	801143a <UART_SetConfig+0x7ae>
 80110b8:	2304      	movs	r3, #4
 80110ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110be:	e1bc      	b.n	801143a <UART_SetConfig+0x7ae>
 80110c0:	2308      	movs	r3, #8
 80110c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110c6:	e1b8      	b.n	801143a <UART_SetConfig+0x7ae>
 80110c8:	2310      	movs	r3, #16
 80110ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110ce:	e1b4      	b.n	801143a <UART_SetConfig+0x7ae>
 80110d0:	2320      	movs	r3, #32
 80110d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110d6:	e1b0      	b.n	801143a <UART_SetConfig+0x7ae>
 80110d8:	2340      	movs	r3, #64	; 0x40
 80110da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110de:	e1ac      	b.n	801143a <UART_SetConfig+0x7ae>
 80110e0:	2380      	movs	r3, #128	; 0x80
 80110e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110e6:	e1a8      	b.n	801143a <UART_SetConfig+0x7ae>
 80110e8:	697b      	ldr	r3, [r7, #20]
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	4a75      	ldr	r2, [pc, #468]	; (80112c4 <UART_SetConfig+0x638>)
 80110ee:	4293      	cmp	r3, r2
 80110f0:	d130      	bne.n	8011154 <UART_SetConfig+0x4c8>
 80110f2:	4b73      	ldr	r3, [pc, #460]	; (80112c0 <UART_SetConfig+0x634>)
 80110f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110f6:	f003 0307 	and.w	r3, r3, #7
 80110fa:	2b05      	cmp	r3, #5
 80110fc:	d826      	bhi.n	801114c <UART_SetConfig+0x4c0>
 80110fe:	a201      	add	r2, pc, #4	; (adr r2, 8011104 <UART_SetConfig+0x478>)
 8011100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011104:	0801111d 	.word	0x0801111d
 8011108:	08011125 	.word	0x08011125
 801110c:	0801112d 	.word	0x0801112d
 8011110:	08011135 	.word	0x08011135
 8011114:	0801113d 	.word	0x0801113d
 8011118:	08011145 	.word	0x08011145
 801111c:	2300      	movs	r3, #0
 801111e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011122:	e18a      	b.n	801143a <UART_SetConfig+0x7ae>
 8011124:	2304      	movs	r3, #4
 8011126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801112a:	e186      	b.n	801143a <UART_SetConfig+0x7ae>
 801112c:	2308      	movs	r3, #8
 801112e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011132:	e182      	b.n	801143a <UART_SetConfig+0x7ae>
 8011134:	2310      	movs	r3, #16
 8011136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801113a:	e17e      	b.n	801143a <UART_SetConfig+0x7ae>
 801113c:	2320      	movs	r3, #32
 801113e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011142:	e17a      	b.n	801143a <UART_SetConfig+0x7ae>
 8011144:	2340      	movs	r3, #64	; 0x40
 8011146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801114a:	e176      	b.n	801143a <UART_SetConfig+0x7ae>
 801114c:	2380      	movs	r3, #128	; 0x80
 801114e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011152:	e172      	b.n	801143a <UART_SetConfig+0x7ae>
 8011154:	697b      	ldr	r3, [r7, #20]
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	4a5b      	ldr	r2, [pc, #364]	; (80112c8 <UART_SetConfig+0x63c>)
 801115a:	4293      	cmp	r3, r2
 801115c:	d130      	bne.n	80111c0 <UART_SetConfig+0x534>
 801115e:	4b58      	ldr	r3, [pc, #352]	; (80112c0 <UART_SetConfig+0x634>)
 8011160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011162:	f003 0307 	and.w	r3, r3, #7
 8011166:	2b05      	cmp	r3, #5
 8011168:	d826      	bhi.n	80111b8 <UART_SetConfig+0x52c>
 801116a:	a201      	add	r2, pc, #4	; (adr r2, 8011170 <UART_SetConfig+0x4e4>)
 801116c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011170:	08011189 	.word	0x08011189
 8011174:	08011191 	.word	0x08011191
 8011178:	08011199 	.word	0x08011199
 801117c:	080111a1 	.word	0x080111a1
 8011180:	080111a9 	.word	0x080111a9
 8011184:	080111b1 	.word	0x080111b1
 8011188:	2300      	movs	r3, #0
 801118a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801118e:	e154      	b.n	801143a <UART_SetConfig+0x7ae>
 8011190:	2304      	movs	r3, #4
 8011192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011196:	e150      	b.n	801143a <UART_SetConfig+0x7ae>
 8011198:	2308      	movs	r3, #8
 801119a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801119e:	e14c      	b.n	801143a <UART_SetConfig+0x7ae>
 80111a0:	2310      	movs	r3, #16
 80111a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111a6:	e148      	b.n	801143a <UART_SetConfig+0x7ae>
 80111a8:	2320      	movs	r3, #32
 80111aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ae:	e144      	b.n	801143a <UART_SetConfig+0x7ae>
 80111b0:	2340      	movs	r3, #64	; 0x40
 80111b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111b6:	e140      	b.n	801143a <UART_SetConfig+0x7ae>
 80111b8:	2380      	movs	r3, #128	; 0x80
 80111ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111be:	e13c      	b.n	801143a <UART_SetConfig+0x7ae>
 80111c0:	697b      	ldr	r3, [r7, #20]
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	4a41      	ldr	r2, [pc, #260]	; (80112cc <UART_SetConfig+0x640>)
 80111c6:	4293      	cmp	r3, r2
 80111c8:	f040 8082 	bne.w	80112d0 <UART_SetConfig+0x644>
 80111cc:	4b3c      	ldr	r3, [pc, #240]	; (80112c0 <UART_SetConfig+0x634>)
 80111ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80111d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80111d4:	2b28      	cmp	r3, #40	; 0x28
 80111d6:	d86d      	bhi.n	80112b4 <UART_SetConfig+0x628>
 80111d8:	a201      	add	r2, pc, #4	; (adr r2, 80111e0 <UART_SetConfig+0x554>)
 80111da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111de:	bf00      	nop
 80111e0:	08011285 	.word	0x08011285
 80111e4:	080112b5 	.word	0x080112b5
 80111e8:	080112b5 	.word	0x080112b5
 80111ec:	080112b5 	.word	0x080112b5
 80111f0:	080112b5 	.word	0x080112b5
 80111f4:	080112b5 	.word	0x080112b5
 80111f8:	080112b5 	.word	0x080112b5
 80111fc:	080112b5 	.word	0x080112b5
 8011200:	0801128d 	.word	0x0801128d
 8011204:	080112b5 	.word	0x080112b5
 8011208:	080112b5 	.word	0x080112b5
 801120c:	080112b5 	.word	0x080112b5
 8011210:	080112b5 	.word	0x080112b5
 8011214:	080112b5 	.word	0x080112b5
 8011218:	080112b5 	.word	0x080112b5
 801121c:	080112b5 	.word	0x080112b5
 8011220:	08011295 	.word	0x08011295
 8011224:	080112b5 	.word	0x080112b5
 8011228:	080112b5 	.word	0x080112b5
 801122c:	080112b5 	.word	0x080112b5
 8011230:	080112b5 	.word	0x080112b5
 8011234:	080112b5 	.word	0x080112b5
 8011238:	080112b5 	.word	0x080112b5
 801123c:	080112b5 	.word	0x080112b5
 8011240:	0801129d 	.word	0x0801129d
 8011244:	080112b5 	.word	0x080112b5
 8011248:	080112b5 	.word	0x080112b5
 801124c:	080112b5 	.word	0x080112b5
 8011250:	080112b5 	.word	0x080112b5
 8011254:	080112b5 	.word	0x080112b5
 8011258:	080112b5 	.word	0x080112b5
 801125c:	080112b5 	.word	0x080112b5
 8011260:	080112a5 	.word	0x080112a5
 8011264:	080112b5 	.word	0x080112b5
 8011268:	080112b5 	.word	0x080112b5
 801126c:	080112b5 	.word	0x080112b5
 8011270:	080112b5 	.word	0x080112b5
 8011274:	080112b5 	.word	0x080112b5
 8011278:	080112b5 	.word	0x080112b5
 801127c:	080112b5 	.word	0x080112b5
 8011280:	080112ad 	.word	0x080112ad
 8011284:	2301      	movs	r3, #1
 8011286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801128a:	e0d6      	b.n	801143a <UART_SetConfig+0x7ae>
 801128c:	2304      	movs	r3, #4
 801128e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011292:	e0d2      	b.n	801143a <UART_SetConfig+0x7ae>
 8011294:	2308      	movs	r3, #8
 8011296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801129a:	e0ce      	b.n	801143a <UART_SetConfig+0x7ae>
 801129c:	2310      	movs	r3, #16
 801129e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112a2:	e0ca      	b.n	801143a <UART_SetConfig+0x7ae>
 80112a4:	2320      	movs	r3, #32
 80112a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112aa:	e0c6      	b.n	801143a <UART_SetConfig+0x7ae>
 80112ac:	2340      	movs	r3, #64	; 0x40
 80112ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112b2:	e0c2      	b.n	801143a <UART_SetConfig+0x7ae>
 80112b4:	2380      	movs	r3, #128	; 0x80
 80112b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112ba:	e0be      	b.n	801143a <UART_SetConfig+0x7ae>
 80112bc:	40011400 	.word	0x40011400
 80112c0:	58024400 	.word	0x58024400
 80112c4:	40007800 	.word	0x40007800
 80112c8:	40007c00 	.word	0x40007c00
 80112cc:	40011800 	.word	0x40011800
 80112d0:	697b      	ldr	r3, [r7, #20]
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	4aad      	ldr	r2, [pc, #692]	; (801158c <UART_SetConfig+0x900>)
 80112d6:	4293      	cmp	r3, r2
 80112d8:	d176      	bne.n	80113c8 <UART_SetConfig+0x73c>
 80112da:	4bad      	ldr	r3, [pc, #692]	; (8011590 <UART_SetConfig+0x904>)
 80112dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80112de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80112e2:	2b28      	cmp	r3, #40	; 0x28
 80112e4:	d86c      	bhi.n	80113c0 <UART_SetConfig+0x734>
 80112e6:	a201      	add	r2, pc, #4	; (adr r2, 80112ec <UART_SetConfig+0x660>)
 80112e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112ec:	08011391 	.word	0x08011391
 80112f0:	080113c1 	.word	0x080113c1
 80112f4:	080113c1 	.word	0x080113c1
 80112f8:	080113c1 	.word	0x080113c1
 80112fc:	080113c1 	.word	0x080113c1
 8011300:	080113c1 	.word	0x080113c1
 8011304:	080113c1 	.word	0x080113c1
 8011308:	080113c1 	.word	0x080113c1
 801130c:	08011399 	.word	0x08011399
 8011310:	080113c1 	.word	0x080113c1
 8011314:	080113c1 	.word	0x080113c1
 8011318:	080113c1 	.word	0x080113c1
 801131c:	080113c1 	.word	0x080113c1
 8011320:	080113c1 	.word	0x080113c1
 8011324:	080113c1 	.word	0x080113c1
 8011328:	080113c1 	.word	0x080113c1
 801132c:	080113a1 	.word	0x080113a1
 8011330:	080113c1 	.word	0x080113c1
 8011334:	080113c1 	.word	0x080113c1
 8011338:	080113c1 	.word	0x080113c1
 801133c:	080113c1 	.word	0x080113c1
 8011340:	080113c1 	.word	0x080113c1
 8011344:	080113c1 	.word	0x080113c1
 8011348:	080113c1 	.word	0x080113c1
 801134c:	080113a9 	.word	0x080113a9
 8011350:	080113c1 	.word	0x080113c1
 8011354:	080113c1 	.word	0x080113c1
 8011358:	080113c1 	.word	0x080113c1
 801135c:	080113c1 	.word	0x080113c1
 8011360:	080113c1 	.word	0x080113c1
 8011364:	080113c1 	.word	0x080113c1
 8011368:	080113c1 	.word	0x080113c1
 801136c:	080113b1 	.word	0x080113b1
 8011370:	080113c1 	.word	0x080113c1
 8011374:	080113c1 	.word	0x080113c1
 8011378:	080113c1 	.word	0x080113c1
 801137c:	080113c1 	.word	0x080113c1
 8011380:	080113c1 	.word	0x080113c1
 8011384:	080113c1 	.word	0x080113c1
 8011388:	080113c1 	.word	0x080113c1
 801138c:	080113b9 	.word	0x080113b9
 8011390:	2301      	movs	r3, #1
 8011392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011396:	e050      	b.n	801143a <UART_SetConfig+0x7ae>
 8011398:	2304      	movs	r3, #4
 801139a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801139e:	e04c      	b.n	801143a <UART_SetConfig+0x7ae>
 80113a0:	2308      	movs	r3, #8
 80113a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113a6:	e048      	b.n	801143a <UART_SetConfig+0x7ae>
 80113a8:	2310      	movs	r3, #16
 80113aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113ae:	e044      	b.n	801143a <UART_SetConfig+0x7ae>
 80113b0:	2320      	movs	r3, #32
 80113b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113b6:	e040      	b.n	801143a <UART_SetConfig+0x7ae>
 80113b8:	2340      	movs	r3, #64	; 0x40
 80113ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113be:	e03c      	b.n	801143a <UART_SetConfig+0x7ae>
 80113c0:	2380      	movs	r3, #128	; 0x80
 80113c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113c6:	e038      	b.n	801143a <UART_SetConfig+0x7ae>
 80113c8:	697b      	ldr	r3, [r7, #20]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	4a71      	ldr	r2, [pc, #452]	; (8011594 <UART_SetConfig+0x908>)
 80113ce:	4293      	cmp	r3, r2
 80113d0:	d130      	bne.n	8011434 <UART_SetConfig+0x7a8>
 80113d2:	4b6f      	ldr	r3, [pc, #444]	; (8011590 <UART_SetConfig+0x904>)
 80113d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80113d6:	f003 0307 	and.w	r3, r3, #7
 80113da:	2b05      	cmp	r3, #5
 80113dc:	d826      	bhi.n	801142c <UART_SetConfig+0x7a0>
 80113de:	a201      	add	r2, pc, #4	; (adr r2, 80113e4 <UART_SetConfig+0x758>)
 80113e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113e4:	080113fd 	.word	0x080113fd
 80113e8:	08011405 	.word	0x08011405
 80113ec:	0801140d 	.word	0x0801140d
 80113f0:	08011415 	.word	0x08011415
 80113f4:	0801141d 	.word	0x0801141d
 80113f8:	08011425 	.word	0x08011425
 80113fc:	2302      	movs	r3, #2
 80113fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011402:	e01a      	b.n	801143a <UART_SetConfig+0x7ae>
 8011404:	2304      	movs	r3, #4
 8011406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801140a:	e016      	b.n	801143a <UART_SetConfig+0x7ae>
 801140c:	2308      	movs	r3, #8
 801140e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011412:	e012      	b.n	801143a <UART_SetConfig+0x7ae>
 8011414:	2310      	movs	r3, #16
 8011416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801141a:	e00e      	b.n	801143a <UART_SetConfig+0x7ae>
 801141c:	2320      	movs	r3, #32
 801141e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011422:	e00a      	b.n	801143a <UART_SetConfig+0x7ae>
 8011424:	2340      	movs	r3, #64	; 0x40
 8011426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801142a:	e006      	b.n	801143a <UART_SetConfig+0x7ae>
 801142c:	2380      	movs	r3, #128	; 0x80
 801142e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011432:	e002      	b.n	801143a <UART_SetConfig+0x7ae>
 8011434:	2380      	movs	r3, #128	; 0x80
 8011436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801143a:	697b      	ldr	r3, [r7, #20]
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	4a55      	ldr	r2, [pc, #340]	; (8011594 <UART_SetConfig+0x908>)
 8011440:	4293      	cmp	r3, r2
 8011442:	f040 80f8 	bne.w	8011636 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011446:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801144a:	2b20      	cmp	r3, #32
 801144c:	dc46      	bgt.n	80114dc <UART_SetConfig+0x850>
 801144e:	2b02      	cmp	r3, #2
 8011450:	db75      	blt.n	801153e <UART_SetConfig+0x8b2>
 8011452:	3b02      	subs	r3, #2
 8011454:	2b1e      	cmp	r3, #30
 8011456:	d872      	bhi.n	801153e <UART_SetConfig+0x8b2>
 8011458:	a201      	add	r2, pc, #4	; (adr r2, 8011460 <UART_SetConfig+0x7d4>)
 801145a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801145e:	bf00      	nop
 8011460:	080114e3 	.word	0x080114e3
 8011464:	0801153f 	.word	0x0801153f
 8011468:	080114eb 	.word	0x080114eb
 801146c:	0801153f 	.word	0x0801153f
 8011470:	0801153f 	.word	0x0801153f
 8011474:	0801153f 	.word	0x0801153f
 8011478:	080114fb 	.word	0x080114fb
 801147c:	0801153f 	.word	0x0801153f
 8011480:	0801153f 	.word	0x0801153f
 8011484:	0801153f 	.word	0x0801153f
 8011488:	0801153f 	.word	0x0801153f
 801148c:	0801153f 	.word	0x0801153f
 8011490:	0801153f 	.word	0x0801153f
 8011494:	0801153f 	.word	0x0801153f
 8011498:	0801150b 	.word	0x0801150b
 801149c:	0801153f 	.word	0x0801153f
 80114a0:	0801153f 	.word	0x0801153f
 80114a4:	0801153f 	.word	0x0801153f
 80114a8:	0801153f 	.word	0x0801153f
 80114ac:	0801153f 	.word	0x0801153f
 80114b0:	0801153f 	.word	0x0801153f
 80114b4:	0801153f 	.word	0x0801153f
 80114b8:	0801153f 	.word	0x0801153f
 80114bc:	0801153f 	.word	0x0801153f
 80114c0:	0801153f 	.word	0x0801153f
 80114c4:	0801153f 	.word	0x0801153f
 80114c8:	0801153f 	.word	0x0801153f
 80114cc:	0801153f 	.word	0x0801153f
 80114d0:	0801153f 	.word	0x0801153f
 80114d4:	0801153f 	.word	0x0801153f
 80114d8:	08011531 	.word	0x08011531
 80114dc:	2b40      	cmp	r3, #64	; 0x40
 80114de:	d02a      	beq.n	8011536 <UART_SetConfig+0x8aa>
 80114e0:	e02d      	b.n	801153e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80114e2:	f7fb f86b 	bl	800c5bc <HAL_RCCEx_GetD3PCLK1Freq>
 80114e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80114e8:	e02f      	b.n	801154a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80114ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80114ee:	4618      	mov	r0, r3
 80114f0:	f7fb f87a 	bl	800c5e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80114f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114f8:	e027      	b.n	801154a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80114fa:	f107 0318 	add.w	r3, r7, #24
 80114fe:	4618      	mov	r0, r3
 8011500:	f7fb f9c6 	bl	800c890 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011504:	69fb      	ldr	r3, [r7, #28]
 8011506:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011508:	e01f      	b.n	801154a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801150a:	4b21      	ldr	r3, [pc, #132]	; (8011590 <UART_SetConfig+0x904>)
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	f003 0320 	and.w	r3, r3, #32
 8011512:	2b00      	cmp	r3, #0
 8011514:	d009      	beq.n	801152a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011516:	4b1e      	ldr	r3, [pc, #120]	; (8011590 <UART_SetConfig+0x904>)
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	08db      	lsrs	r3, r3, #3
 801151c:	f003 0303 	and.w	r3, r3, #3
 8011520:	4a1d      	ldr	r2, [pc, #116]	; (8011598 <UART_SetConfig+0x90c>)
 8011522:	fa22 f303 	lsr.w	r3, r2, r3
 8011526:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011528:	e00f      	b.n	801154a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801152a:	4b1b      	ldr	r3, [pc, #108]	; (8011598 <UART_SetConfig+0x90c>)
 801152c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801152e:	e00c      	b.n	801154a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011530:	4b1a      	ldr	r3, [pc, #104]	; (801159c <UART_SetConfig+0x910>)
 8011532:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011534:	e009      	b.n	801154a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011536:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801153a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801153c:	e005      	b.n	801154a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801153e:	2300      	movs	r3, #0
 8011540:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011542:	2301      	movs	r3, #1
 8011544:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011548:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801154a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801154c:	2b00      	cmp	r3, #0
 801154e:	f000 81ee 	beq.w	801192e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011552:	697b      	ldr	r3, [r7, #20]
 8011554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011556:	4a12      	ldr	r2, [pc, #72]	; (80115a0 <UART_SetConfig+0x914>)
 8011558:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801155c:	461a      	mov	r2, r3
 801155e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011560:	fbb3 f3f2 	udiv	r3, r3, r2
 8011564:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011566:	697b      	ldr	r3, [r7, #20]
 8011568:	685a      	ldr	r2, [r3, #4]
 801156a:	4613      	mov	r3, r2
 801156c:	005b      	lsls	r3, r3, #1
 801156e:	4413      	add	r3, r2
 8011570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011572:	429a      	cmp	r2, r3
 8011574:	d305      	bcc.n	8011582 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011576:	697b      	ldr	r3, [r7, #20]
 8011578:	685b      	ldr	r3, [r3, #4]
 801157a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801157c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801157e:	429a      	cmp	r2, r3
 8011580:	d910      	bls.n	80115a4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8011582:	2301      	movs	r3, #1
 8011584:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011588:	e1d1      	b.n	801192e <UART_SetConfig+0xca2>
 801158a:	bf00      	nop
 801158c:	40011c00 	.word	0x40011c00
 8011590:	58024400 	.word	0x58024400
 8011594:	58000c00 	.word	0x58000c00
 8011598:	03d09000 	.word	0x03d09000
 801159c:	003d0900 	.word	0x003d0900
 80115a0:	08018640 	.word	0x08018640
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80115a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115a6:	2200      	movs	r2, #0
 80115a8:	60bb      	str	r3, [r7, #8]
 80115aa:	60fa      	str	r2, [r7, #12]
 80115ac:	697b      	ldr	r3, [r7, #20]
 80115ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115b0:	4ac0      	ldr	r2, [pc, #768]	; (80118b4 <UART_SetConfig+0xc28>)
 80115b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80115b6:	b29b      	uxth	r3, r3
 80115b8:	2200      	movs	r2, #0
 80115ba:	603b      	str	r3, [r7, #0]
 80115bc:	607a      	str	r2, [r7, #4]
 80115be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80115c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80115c6:	f7ee ff0b 	bl	80003e0 <__aeabi_uldivmod>
 80115ca:	4602      	mov	r2, r0
 80115cc:	460b      	mov	r3, r1
 80115ce:	4610      	mov	r0, r2
 80115d0:	4619      	mov	r1, r3
 80115d2:	f04f 0200 	mov.w	r2, #0
 80115d6:	f04f 0300 	mov.w	r3, #0
 80115da:	020b      	lsls	r3, r1, #8
 80115dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80115e0:	0202      	lsls	r2, r0, #8
 80115e2:	6979      	ldr	r1, [r7, #20]
 80115e4:	6849      	ldr	r1, [r1, #4]
 80115e6:	0849      	lsrs	r1, r1, #1
 80115e8:	2000      	movs	r0, #0
 80115ea:	460c      	mov	r4, r1
 80115ec:	4605      	mov	r5, r0
 80115ee:	eb12 0804 	adds.w	r8, r2, r4
 80115f2:	eb43 0905 	adc.w	r9, r3, r5
 80115f6:	697b      	ldr	r3, [r7, #20]
 80115f8:	685b      	ldr	r3, [r3, #4]
 80115fa:	2200      	movs	r2, #0
 80115fc:	469a      	mov	sl, r3
 80115fe:	4693      	mov	fp, r2
 8011600:	4652      	mov	r2, sl
 8011602:	465b      	mov	r3, fp
 8011604:	4640      	mov	r0, r8
 8011606:	4649      	mov	r1, r9
 8011608:	f7ee feea 	bl	80003e0 <__aeabi_uldivmod>
 801160c:	4602      	mov	r2, r0
 801160e:	460b      	mov	r3, r1
 8011610:	4613      	mov	r3, r2
 8011612:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011616:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801161a:	d308      	bcc.n	801162e <UART_SetConfig+0x9a2>
 801161c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801161e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011622:	d204      	bcs.n	801162e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8011624:	697b      	ldr	r3, [r7, #20]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801162a:	60da      	str	r2, [r3, #12]
 801162c:	e17f      	b.n	801192e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 801162e:	2301      	movs	r3, #1
 8011630:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011634:	e17b      	b.n	801192e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011636:	697b      	ldr	r3, [r7, #20]
 8011638:	69db      	ldr	r3, [r3, #28]
 801163a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801163e:	f040 80bd 	bne.w	80117bc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8011642:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011646:	2b20      	cmp	r3, #32
 8011648:	dc48      	bgt.n	80116dc <UART_SetConfig+0xa50>
 801164a:	2b00      	cmp	r3, #0
 801164c:	db7b      	blt.n	8011746 <UART_SetConfig+0xaba>
 801164e:	2b20      	cmp	r3, #32
 8011650:	d879      	bhi.n	8011746 <UART_SetConfig+0xaba>
 8011652:	a201      	add	r2, pc, #4	; (adr r2, 8011658 <UART_SetConfig+0x9cc>)
 8011654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011658:	080116e3 	.word	0x080116e3
 801165c:	080116eb 	.word	0x080116eb
 8011660:	08011747 	.word	0x08011747
 8011664:	08011747 	.word	0x08011747
 8011668:	080116f3 	.word	0x080116f3
 801166c:	08011747 	.word	0x08011747
 8011670:	08011747 	.word	0x08011747
 8011674:	08011747 	.word	0x08011747
 8011678:	08011703 	.word	0x08011703
 801167c:	08011747 	.word	0x08011747
 8011680:	08011747 	.word	0x08011747
 8011684:	08011747 	.word	0x08011747
 8011688:	08011747 	.word	0x08011747
 801168c:	08011747 	.word	0x08011747
 8011690:	08011747 	.word	0x08011747
 8011694:	08011747 	.word	0x08011747
 8011698:	08011713 	.word	0x08011713
 801169c:	08011747 	.word	0x08011747
 80116a0:	08011747 	.word	0x08011747
 80116a4:	08011747 	.word	0x08011747
 80116a8:	08011747 	.word	0x08011747
 80116ac:	08011747 	.word	0x08011747
 80116b0:	08011747 	.word	0x08011747
 80116b4:	08011747 	.word	0x08011747
 80116b8:	08011747 	.word	0x08011747
 80116bc:	08011747 	.word	0x08011747
 80116c0:	08011747 	.word	0x08011747
 80116c4:	08011747 	.word	0x08011747
 80116c8:	08011747 	.word	0x08011747
 80116cc:	08011747 	.word	0x08011747
 80116d0:	08011747 	.word	0x08011747
 80116d4:	08011747 	.word	0x08011747
 80116d8:	08011739 	.word	0x08011739
 80116dc:	2b40      	cmp	r3, #64	; 0x40
 80116de:	d02e      	beq.n	801173e <UART_SetConfig+0xab2>
 80116e0:	e031      	b.n	8011746 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80116e2:	f7f9 f8cd 	bl	800a880 <HAL_RCC_GetPCLK1Freq>
 80116e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80116e8:	e033      	b.n	8011752 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80116ea:	f7f9 f8df 	bl	800a8ac <HAL_RCC_GetPCLK2Freq>
 80116ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80116f0:	e02f      	b.n	8011752 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80116f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80116f6:	4618      	mov	r0, r3
 80116f8:	f7fa ff76 	bl	800c5e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80116fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011700:	e027      	b.n	8011752 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011702:	f107 0318 	add.w	r3, r7, #24
 8011706:	4618      	mov	r0, r3
 8011708:	f7fb f8c2 	bl	800c890 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801170c:	69fb      	ldr	r3, [r7, #28]
 801170e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011710:	e01f      	b.n	8011752 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011712:	4b69      	ldr	r3, [pc, #420]	; (80118b8 <UART_SetConfig+0xc2c>)
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	f003 0320 	and.w	r3, r3, #32
 801171a:	2b00      	cmp	r3, #0
 801171c:	d009      	beq.n	8011732 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801171e:	4b66      	ldr	r3, [pc, #408]	; (80118b8 <UART_SetConfig+0xc2c>)
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	08db      	lsrs	r3, r3, #3
 8011724:	f003 0303 	and.w	r3, r3, #3
 8011728:	4a64      	ldr	r2, [pc, #400]	; (80118bc <UART_SetConfig+0xc30>)
 801172a:	fa22 f303 	lsr.w	r3, r2, r3
 801172e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011730:	e00f      	b.n	8011752 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8011732:	4b62      	ldr	r3, [pc, #392]	; (80118bc <UART_SetConfig+0xc30>)
 8011734:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011736:	e00c      	b.n	8011752 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011738:	4b61      	ldr	r3, [pc, #388]	; (80118c0 <UART_SetConfig+0xc34>)
 801173a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801173c:	e009      	b.n	8011752 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801173e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011742:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011744:	e005      	b.n	8011752 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8011746:	2300      	movs	r3, #0
 8011748:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801174a:	2301      	movs	r3, #1
 801174c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011750:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011754:	2b00      	cmp	r3, #0
 8011756:	f000 80ea 	beq.w	801192e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801175a:	697b      	ldr	r3, [r7, #20]
 801175c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801175e:	4a55      	ldr	r2, [pc, #340]	; (80118b4 <UART_SetConfig+0xc28>)
 8011760:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011764:	461a      	mov	r2, r3
 8011766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011768:	fbb3 f3f2 	udiv	r3, r3, r2
 801176c:	005a      	lsls	r2, r3, #1
 801176e:	697b      	ldr	r3, [r7, #20]
 8011770:	685b      	ldr	r3, [r3, #4]
 8011772:	085b      	lsrs	r3, r3, #1
 8011774:	441a      	add	r2, r3
 8011776:	697b      	ldr	r3, [r7, #20]
 8011778:	685b      	ldr	r3, [r3, #4]
 801177a:	fbb2 f3f3 	udiv	r3, r2, r3
 801177e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011782:	2b0f      	cmp	r3, #15
 8011784:	d916      	bls.n	80117b4 <UART_SetConfig+0xb28>
 8011786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801178c:	d212      	bcs.n	80117b4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801178e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011790:	b29b      	uxth	r3, r3
 8011792:	f023 030f 	bic.w	r3, r3, #15
 8011796:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801179a:	085b      	lsrs	r3, r3, #1
 801179c:	b29b      	uxth	r3, r3
 801179e:	f003 0307 	and.w	r3, r3, #7
 80117a2:	b29a      	uxth	r2, r3
 80117a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80117a6:	4313      	orrs	r3, r2
 80117a8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80117aa:	697b      	ldr	r3, [r7, #20]
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80117b0:	60da      	str	r2, [r3, #12]
 80117b2:	e0bc      	b.n	801192e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80117b4:	2301      	movs	r3, #1
 80117b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80117ba:	e0b8      	b.n	801192e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80117bc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80117c0:	2b20      	cmp	r3, #32
 80117c2:	dc4b      	bgt.n	801185c <UART_SetConfig+0xbd0>
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	f2c0 8087 	blt.w	80118d8 <UART_SetConfig+0xc4c>
 80117ca:	2b20      	cmp	r3, #32
 80117cc:	f200 8084 	bhi.w	80118d8 <UART_SetConfig+0xc4c>
 80117d0:	a201      	add	r2, pc, #4	; (adr r2, 80117d8 <UART_SetConfig+0xb4c>)
 80117d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117d6:	bf00      	nop
 80117d8:	08011863 	.word	0x08011863
 80117dc:	0801186b 	.word	0x0801186b
 80117e0:	080118d9 	.word	0x080118d9
 80117e4:	080118d9 	.word	0x080118d9
 80117e8:	08011873 	.word	0x08011873
 80117ec:	080118d9 	.word	0x080118d9
 80117f0:	080118d9 	.word	0x080118d9
 80117f4:	080118d9 	.word	0x080118d9
 80117f8:	08011883 	.word	0x08011883
 80117fc:	080118d9 	.word	0x080118d9
 8011800:	080118d9 	.word	0x080118d9
 8011804:	080118d9 	.word	0x080118d9
 8011808:	080118d9 	.word	0x080118d9
 801180c:	080118d9 	.word	0x080118d9
 8011810:	080118d9 	.word	0x080118d9
 8011814:	080118d9 	.word	0x080118d9
 8011818:	08011893 	.word	0x08011893
 801181c:	080118d9 	.word	0x080118d9
 8011820:	080118d9 	.word	0x080118d9
 8011824:	080118d9 	.word	0x080118d9
 8011828:	080118d9 	.word	0x080118d9
 801182c:	080118d9 	.word	0x080118d9
 8011830:	080118d9 	.word	0x080118d9
 8011834:	080118d9 	.word	0x080118d9
 8011838:	080118d9 	.word	0x080118d9
 801183c:	080118d9 	.word	0x080118d9
 8011840:	080118d9 	.word	0x080118d9
 8011844:	080118d9 	.word	0x080118d9
 8011848:	080118d9 	.word	0x080118d9
 801184c:	080118d9 	.word	0x080118d9
 8011850:	080118d9 	.word	0x080118d9
 8011854:	080118d9 	.word	0x080118d9
 8011858:	080118cb 	.word	0x080118cb
 801185c:	2b40      	cmp	r3, #64	; 0x40
 801185e:	d037      	beq.n	80118d0 <UART_SetConfig+0xc44>
 8011860:	e03a      	b.n	80118d8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011862:	f7f9 f80d 	bl	800a880 <HAL_RCC_GetPCLK1Freq>
 8011866:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011868:	e03c      	b.n	80118e4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801186a:	f7f9 f81f 	bl	800a8ac <HAL_RCC_GetPCLK2Freq>
 801186e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011870:	e038      	b.n	80118e4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011876:	4618      	mov	r0, r3
 8011878:	f7fa feb6 	bl	800c5e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801187c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801187e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011880:	e030      	b.n	80118e4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011882:	f107 0318 	add.w	r3, r7, #24
 8011886:	4618      	mov	r0, r3
 8011888:	f7fb f802 	bl	800c890 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801188c:	69fb      	ldr	r3, [r7, #28]
 801188e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011890:	e028      	b.n	80118e4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011892:	4b09      	ldr	r3, [pc, #36]	; (80118b8 <UART_SetConfig+0xc2c>)
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	f003 0320 	and.w	r3, r3, #32
 801189a:	2b00      	cmp	r3, #0
 801189c:	d012      	beq.n	80118c4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801189e:	4b06      	ldr	r3, [pc, #24]	; (80118b8 <UART_SetConfig+0xc2c>)
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	08db      	lsrs	r3, r3, #3
 80118a4:	f003 0303 	and.w	r3, r3, #3
 80118a8:	4a04      	ldr	r2, [pc, #16]	; (80118bc <UART_SetConfig+0xc30>)
 80118aa:	fa22 f303 	lsr.w	r3, r2, r3
 80118ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80118b0:	e018      	b.n	80118e4 <UART_SetConfig+0xc58>
 80118b2:	bf00      	nop
 80118b4:	08018640 	.word	0x08018640
 80118b8:	58024400 	.word	0x58024400
 80118bc:	03d09000 	.word	0x03d09000
 80118c0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80118c4:	4b24      	ldr	r3, [pc, #144]	; (8011958 <UART_SetConfig+0xccc>)
 80118c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80118c8:	e00c      	b.n	80118e4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80118ca:	4b24      	ldr	r3, [pc, #144]	; (801195c <UART_SetConfig+0xcd0>)
 80118cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80118ce:	e009      	b.n	80118e4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80118d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80118d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80118d6:	e005      	b.n	80118e4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80118d8:	2300      	movs	r3, #0
 80118da:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80118dc:	2301      	movs	r3, #1
 80118de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80118e2:	bf00      	nop
    }

    if (pclk != 0U)
 80118e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d021      	beq.n	801192e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80118ea:	697b      	ldr	r3, [r7, #20]
 80118ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118ee:	4a1c      	ldr	r2, [pc, #112]	; (8011960 <UART_SetConfig+0xcd4>)
 80118f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80118f4:	461a      	mov	r2, r3
 80118f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118f8:	fbb3 f2f2 	udiv	r2, r3, r2
 80118fc:	697b      	ldr	r3, [r7, #20]
 80118fe:	685b      	ldr	r3, [r3, #4]
 8011900:	085b      	lsrs	r3, r3, #1
 8011902:	441a      	add	r2, r3
 8011904:	697b      	ldr	r3, [r7, #20]
 8011906:	685b      	ldr	r3, [r3, #4]
 8011908:	fbb2 f3f3 	udiv	r3, r2, r3
 801190c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801190e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011910:	2b0f      	cmp	r3, #15
 8011912:	d909      	bls.n	8011928 <UART_SetConfig+0xc9c>
 8011914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801191a:	d205      	bcs.n	8011928 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801191c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801191e:	b29a      	uxth	r2, r3
 8011920:	697b      	ldr	r3, [r7, #20]
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	60da      	str	r2, [r3, #12]
 8011926:	e002      	b.n	801192e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011928:	2301      	movs	r3, #1
 801192a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801192e:	697b      	ldr	r3, [r7, #20]
 8011930:	2201      	movs	r2, #1
 8011932:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011936:	697b      	ldr	r3, [r7, #20]
 8011938:	2201      	movs	r2, #1
 801193a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801193e:	697b      	ldr	r3, [r7, #20]
 8011940:	2200      	movs	r2, #0
 8011942:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011944:	697b      	ldr	r3, [r7, #20]
 8011946:	2200      	movs	r2, #0
 8011948:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 801194a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 801194e:	4618      	mov	r0, r3
 8011950:	3748      	adds	r7, #72	; 0x48
 8011952:	46bd      	mov	sp, r7
 8011954:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011958:	03d09000 	.word	0x03d09000
 801195c:	003d0900 	.word	0x003d0900
 8011960:	08018640 	.word	0x08018640

08011964 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011964:	b480      	push	{r7}
 8011966:	b083      	sub	sp, #12
 8011968:	af00      	add	r7, sp, #0
 801196a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011970:	f003 0301 	and.w	r3, r3, #1
 8011974:	2b00      	cmp	r3, #0
 8011976:	d00a      	beq.n	801198e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	685b      	ldr	r3, [r3, #4]
 801197e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	430a      	orrs	r2, r1
 801198c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011992:	f003 0302 	and.w	r3, r3, #2
 8011996:	2b00      	cmp	r3, #0
 8011998:	d00a      	beq.n	80119b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	685b      	ldr	r3, [r3, #4]
 80119a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	430a      	orrs	r2, r1
 80119ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119b4:	f003 0304 	and.w	r3, r3, #4
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d00a      	beq.n	80119d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	685b      	ldr	r3, [r3, #4]
 80119c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	430a      	orrs	r2, r1
 80119d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119d6:	f003 0308 	and.w	r3, r3, #8
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d00a      	beq.n	80119f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	685b      	ldr	r3, [r3, #4]
 80119e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	430a      	orrs	r2, r1
 80119f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119f8:	f003 0310 	and.w	r3, r3, #16
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d00a      	beq.n	8011a16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	689b      	ldr	r3, [r3, #8]
 8011a06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	430a      	orrs	r2, r1
 8011a14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a1a:	f003 0320 	and.w	r3, r3, #32
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d00a      	beq.n	8011a38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	689b      	ldr	r3, [r3, #8]
 8011a28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	430a      	orrs	r2, r1
 8011a36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d01a      	beq.n	8011a7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	685b      	ldr	r3, [r3, #4]
 8011a4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	430a      	orrs	r2, r1
 8011a58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011a62:	d10a      	bne.n	8011a7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	685b      	ldr	r3, [r3, #4]
 8011a6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	430a      	orrs	r2, r1
 8011a78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d00a      	beq.n	8011a9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	685b      	ldr	r3, [r3, #4]
 8011a8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	430a      	orrs	r2, r1
 8011a9a:	605a      	str	r2, [r3, #4]
  }
}
 8011a9c:	bf00      	nop
 8011a9e:	370c      	adds	r7, #12
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa6:	4770      	bx	lr

08011aa8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011aa8:	b580      	push	{r7, lr}
 8011aaa:	b098      	sub	sp, #96	; 0x60
 8011aac:	af02      	add	r7, sp, #8
 8011aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	2200      	movs	r2, #0
 8011ab4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011ab8:	f7f2 f822 	bl	8003b00 <HAL_GetTick>
 8011abc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	f003 0308 	and.w	r3, r3, #8
 8011ac8:	2b08      	cmp	r3, #8
 8011aca:	d12f      	bne.n	8011b2c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011acc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011ad0:	9300      	str	r3, [sp, #0]
 8011ad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ad4:	2200      	movs	r2, #0
 8011ad6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011ada:	6878      	ldr	r0, [r7, #4]
 8011adc:	f000 f88e 	bl	8011bfc <UART_WaitOnFlagUntilTimeout>
 8011ae0:	4603      	mov	r3, r0
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d022      	beq.n	8011b2c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aee:	e853 3f00 	ldrex	r3, [r3]
 8011af2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011af6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011afa:	653b      	str	r3, [r7, #80]	; 0x50
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	461a      	mov	r2, r3
 8011b02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b04:	647b      	str	r3, [r7, #68]	; 0x44
 8011b06:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b08:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011b0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011b0c:	e841 2300 	strex	r3, r2, [r1]
 8011b10:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d1e6      	bne.n	8011ae6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	2220      	movs	r2, #32
 8011b1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	2200      	movs	r2, #0
 8011b24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011b28:	2303      	movs	r3, #3
 8011b2a:	e063      	b.n	8011bf4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	f003 0304 	and.w	r3, r3, #4
 8011b36:	2b04      	cmp	r3, #4
 8011b38:	d149      	bne.n	8011bce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011b3a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011b3e:	9300      	str	r3, [sp, #0]
 8011b40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b42:	2200      	movs	r2, #0
 8011b44:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011b48:	6878      	ldr	r0, [r7, #4]
 8011b4a:	f000 f857 	bl	8011bfc <UART_WaitOnFlagUntilTimeout>
 8011b4e:	4603      	mov	r3, r0
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d03c      	beq.n	8011bce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b5c:	e853 3f00 	ldrex	r3, [r3]
 8011b60:	623b      	str	r3, [r7, #32]
   return(result);
 8011b62:	6a3b      	ldr	r3, [r7, #32]
 8011b64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011b68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	461a      	mov	r2, r3
 8011b70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b72:	633b      	str	r3, [r7, #48]	; 0x30
 8011b74:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b7a:	e841 2300 	strex	r3, r2, [r1]
 8011b7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d1e6      	bne.n	8011b54 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	3308      	adds	r3, #8
 8011b8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b8e:	693b      	ldr	r3, [r7, #16]
 8011b90:	e853 3f00 	ldrex	r3, [r3]
 8011b94:	60fb      	str	r3, [r7, #12]
   return(result);
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	f023 0301 	bic.w	r3, r3, #1
 8011b9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	3308      	adds	r3, #8
 8011ba4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011ba6:	61fa      	str	r2, [r7, #28]
 8011ba8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011baa:	69b9      	ldr	r1, [r7, #24]
 8011bac:	69fa      	ldr	r2, [r7, #28]
 8011bae:	e841 2300 	strex	r3, r2, [r1]
 8011bb2:	617b      	str	r3, [r7, #20]
   return(result);
 8011bb4:	697b      	ldr	r3, [r7, #20]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d1e5      	bne.n	8011b86 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	2220      	movs	r2, #32
 8011bbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	2200      	movs	r2, #0
 8011bc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011bca:	2303      	movs	r3, #3
 8011bcc:	e012      	b.n	8011bf4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	2220      	movs	r2, #32
 8011bd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	2220      	movs	r2, #32
 8011bda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	2200      	movs	r2, #0
 8011be2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	2200      	movs	r2, #0
 8011be8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	2200      	movs	r2, #0
 8011bee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011bf2:	2300      	movs	r3, #0
}
 8011bf4:	4618      	mov	r0, r3
 8011bf6:	3758      	adds	r7, #88	; 0x58
 8011bf8:	46bd      	mov	sp, r7
 8011bfa:	bd80      	pop	{r7, pc}

08011bfc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011bfc:	b580      	push	{r7, lr}
 8011bfe:	b084      	sub	sp, #16
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	60f8      	str	r0, [r7, #12]
 8011c04:	60b9      	str	r1, [r7, #8]
 8011c06:	603b      	str	r3, [r7, #0]
 8011c08:	4613      	mov	r3, r2
 8011c0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011c0c:	e049      	b.n	8011ca2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011c0e:	69bb      	ldr	r3, [r7, #24]
 8011c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c14:	d045      	beq.n	8011ca2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011c16:	f7f1 ff73 	bl	8003b00 <HAL_GetTick>
 8011c1a:	4602      	mov	r2, r0
 8011c1c:	683b      	ldr	r3, [r7, #0]
 8011c1e:	1ad3      	subs	r3, r2, r3
 8011c20:	69ba      	ldr	r2, [r7, #24]
 8011c22:	429a      	cmp	r2, r3
 8011c24:	d302      	bcc.n	8011c2c <UART_WaitOnFlagUntilTimeout+0x30>
 8011c26:	69bb      	ldr	r3, [r7, #24]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d101      	bne.n	8011c30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011c2c:	2303      	movs	r3, #3
 8011c2e:	e048      	b.n	8011cc2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	f003 0304 	and.w	r3, r3, #4
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d031      	beq.n	8011ca2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	69db      	ldr	r3, [r3, #28]
 8011c44:	f003 0308 	and.w	r3, r3, #8
 8011c48:	2b08      	cmp	r3, #8
 8011c4a:	d110      	bne.n	8011c6e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	2208      	movs	r2, #8
 8011c52:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8011c54:	68f8      	ldr	r0, [r7, #12]
 8011c56:	f000 f839 	bl	8011ccc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	2208      	movs	r2, #8
 8011c5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	2200      	movs	r2, #0
 8011c66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8011c6a:	2301      	movs	r3, #1
 8011c6c:	e029      	b.n	8011cc2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	69db      	ldr	r3, [r3, #28]
 8011c74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011c78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011c7c:	d111      	bne.n	8011ca2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011c86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011c88:	68f8      	ldr	r0, [r7, #12]
 8011c8a:	f000 f81f 	bl	8011ccc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	2220      	movs	r2, #32
 8011c92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	2200      	movs	r2, #0
 8011c9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011c9e:	2303      	movs	r3, #3
 8011ca0:	e00f      	b.n	8011cc2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	69da      	ldr	r2, [r3, #28]
 8011ca8:	68bb      	ldr	r3, [r7, #8]
 8011caa:	4013      	ands	r3, r2
 8011cac:	68ba      	ldr	r2, [r7, #8]
 8011cae:	429a      	cmp	r2, r3
 8011cb0:	bf0c      	ite	eq
 8011cb2:	2301      	moveq	r3, #1
 8011cb4:	2300      	movne	r3, #0
 8011cb6:	b2db      	uxtb	r3, r3
 8011cb8:	461a      	mov	r2, r3
 8011cba:	79fb      	ldrb	r3, [r7, #7]
 8011cbc:	429a      	cmp	r2, r3
 8011cbe:	d0a6      	beq.n	8011c0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011cc0:	2300      	movs	r3, #0
}
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	3710      	adds	r7, #16
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	bd80      	pop	{r7, pc}
	...

08011ccc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011ccc:	b480      	push	{r7}
 8011cce:	b095      	sub	sp, #84	; 0x54
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cdc:	e853 3f00 	ldrex	r3, [r3]
 8011ce0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ce4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011ce8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	461a      	mov	r2, r3
 8011cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011cf2:	643b      	str	r3, [r7, #64]	; 0x40
 8011cf4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cf6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011cf8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011cfa:	e841 2300 	strex	r3, r2, [r1]
 8011cfe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d1e6      	bne.n	8011cd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	3308      	adds	r3, #8
 8011d0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d0e:	6a3b      	ldr	r3, [r7, #32]
 8011d10:	e853 3f00 	ldrex	r3, [r3]
 8011d14:	61fb      	str	r3, [r7, #28]
   return(result);
 8011d16:	69fa      	ldr	r2, [r7, #28]
 8011d18:	4b1e      	ldr	r3, [pc, #120]	; (8011d94 <UART_EndRxTransfer+0xc8>)
 8011d1a:	4013      	ands	r3, r2
 8011d1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	3308      	adds	r3, #8
 8011d24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011d26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011d28:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011d2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d2e:	e841 2300 	strex	r3, r2, [r1]
 8011d32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d1e5      	bne.n	8011d06 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d3e:	2b01      	cmp	r3, #1
 8011d40:	d118      	bne.n	8011d74 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	e853 3f00 	ldrex	r3, [r3]
 8011d4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011d50:	68bb      	ldr	r3, [r7, #8]
 8011d52:	f023 0310 	bic.w	r3, r3, #16
 8011d56:	647b      	str	r3, [r7, #68]	; 0x44
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	461a      	mov	r2, r3
 8011d5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011d60:	61bb      	str	r3, [r7, #24]
 8011d62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d64:	6979      	ldr	r1, [r7, #20]
 8011d66:	69ba      	ldr	r2, [r7, #24]
 8011d68:	e841 2300 	strex	r3, r2, [r1]
 8011d6c:	613b      	str	r3, [r7, #16]
   return(result);
 8011d6e:	693b      	ldr	r3, [r7, #16]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d1e6      	bne.n	8011d42 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	2220      	movs	r2, #32
 8011d78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	2200      	movs	r2, #0
 8011d80:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	2200      	movs	r2, #0
 8011d86:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011d88:	bf00      	nop
 8011d8a:	3754      	adds	r7, #84	; 0x54
 8011d8c:	46bd      	mov	sp, r7
 8011d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d92:	4770      	bx	lr
 8011d94:	effffffe 	.word	0xeffffffe

08011d98 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011d98:	b480      	push	{r7}
 8011d9a:	b085      	sub	sp, #20
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011da6:	2b01      	cmp	r3, #1
 8011da8:	d101      	bne.n	8011dae <HAL_UARTEx_DisableFifoMode+0x16>
 8011daa:	2302      	movs	r3, #2
 8011dac:	e027      	b.n	8011dfe <HAL_UARTEx_DisableFifoMode+0x66>
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	2201      	movs	r2, #1
 8011db2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	2224      	movs	r2, #36	; 0x24
 8011dba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	681a      	ldr	r2, [r3, #0]
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	f022 0201 	bic.w	r2, r2, #1
 8011dd4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011ddc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	2200      	movs	r2, #0
 8011de2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	68fa      	ldr	r2, [r7, #12]
 8011dea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	2220      	movs	r2, #32
 8011df0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	2200      	movs	r2, #0
 8011df8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011dfc:	2300      	movs	r3, #0
}
 8011dfe:	4618      	mov	r0, r3
 8011e00:	3714      	adds	r7, #20
 8011e02:	46bd      	mov	sp, r7
 8011e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e08:	4770      	bx	lr

08011e0a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011e0a:	b580      	push	{r7, lr}
 8011e0c:	b084      	sub	sp, #16
 8011e0e:	af00      	add	r7, sp, #0
 8011e10:	6078      	str	r0, [r7, #4]
 8011e12:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011e1a:	2b01      	cmp	r3, #1
 8011e1c:	d101      	bne.n	8011e22 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011e1e:	2302      	movs	r3, #2
 8011e20:	e02d      	b.n	8011e7e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	2201      	movs	r2, #1
 8011e26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	2224      	movs	r2, #36	; 0x24
 8011e2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	681a      	ldr	r2, [r3, #0]
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	f022 0201 	bic.w	r2, r2, #1
 8011e48:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	689b      	ldr	r3, [r3, #8]
 8011e50:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	683a      	ldr	r2, [r7, #0]
 8011e5a:	430a      	orrs	r2, r1
 8011e5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011e5e:	6878      	ldr	r0, [r7, #4]
 8011e60:	f000 f850 	bl	8011f04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	68fa      	ldr	r2, [r7, #12]
 8011e6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	2220      	movs	r2, #32
 8011e70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	2200      	movs	r2, #0
 8011e78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011e7c:	2300      	movs	r3, #0
}
 8011e7e:	4618      	mov	r0, r3
 8011e80:	3710      	adds	r7, #16
 8011e82:	46bd      	mov	sp, r7
 8011e84:	bd80      	pop	{r7, pc}

08011e86 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011e86:	b580      	push	{r7, lr}
 8011e88:	b084      	sub	sp, #16
 8011e8a:	af00      	add	r7, sp, #0
 8011e8c:	6078      	str	r0, [r7, #4]
 8011e8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011e96:	2b01      	cmp	r3, #1
 8011e98:	d101      	bne.n	8011e9e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011e9a:	2302      	movs	r3, #2
 8011e9c:	e02d      	b.n	8011efa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	2201      	movs	r2, #1
 8011ea2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	2224      	movs	r2, #36	; 0x24
 8011eaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	681a      	ldr	r2, [r3, #0]
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	f022 0201 	bic.w	r2, r2, #1
 8011ec4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	689b      	ldr	r3, [r3, #8]
 8011ecc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	683a      	ldr	r2, [r7, #0]
 8011ed6:	430a      	orrs	r2, r1
 8011ed8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011eda:	6878      	ldr	r0, [r7, #4]
 8011edc:	f000 f812 	bl	8011f04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	68fa      	ldr	r2, [r7, #12]
 8011ee6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	2220      	movs	r2, #32
 8011eec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	2200      	movs	r2, #0
 8011ef4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011ef8:	2300      	movs	r3, #0
}
 8011efa:	4618      	mov	r0, r3
 8011efc:	3710      	adds	r7, #16
 8011efe:	46bd      	mov	sp, r7
 8011f00:	bd80      	pop	{r7, pc}
	...

08011f04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011f04:	b480      	push	{r7}
 8011f06:	b085      	sub	sp, #20
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d108      	bne.n	8011f26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	2201      	movs	r2, #1
 8011f18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	2201      	movs	r2, #1
 8011f20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011f24:	e031      	b.n	8011f8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011f26:	2310      	movs	r3, #16
 8011f28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011f2a:	2310      	movs	r3, #16
 8011f2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	689b      	ldr	r3, [r3, #8]
 8011f34:	0e5b      	lsrs	r3, r3, #25
 8011f36:	b2db      	uxtb	r3, r3
 8011f38:	f003 0307 	and.w	r3, r3, #7
 8011f3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	689b      	ldr	r3, [r3, #8]
 8011f44:	0f5b      	lsrs	r3, r3, #29
 8011f46:	b2db      	uxtb	r3, r3
 8011f48:	f003 0307 	and.w	r3, r3, #7
 8011f4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011f4e:	7bbb      	ldrb	r3, [r7, #14]
 8011f50:	7b3a      	ldrb	r2, [r7, #12]
 8011f52:	4911      	ldr	r1, [pc, #68]	; (8011f98 <UARTEx_SetNbDataToProcess+0x94>)
 8011f54:	5c8a      	ldrb	r2, [r1, r2]
 8011f56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011f5a:	7b3a      	ldrb	r2, [r7, #12]
 8011f5c:	490f      	ldr	r1, [pc, #60]	; (8011f9c <UARTEx_SetNbDataToProcess+0x98>)
 8011f5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011f60:	fb93 f3f2 	sdiv	r3, r3, r2
 8011f64:	b29a      	uxth	r2, r3
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011f6c:	7bfb      	ldrb	r3, [r7, #15]
 8011f6e:	7b7a      	ldrb	r2, [r7, #13]
 8011f70:	4909      	ldr	r1, [pc, #36]	; (8011f98 <UARTEx_SetNbDataToProcess+0x94>)
 8011f72:	5c8a      	ldrb	r2, [r1, r2]
 8011f74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011f78:	7b7a      	ldrb	r2, [r7, #13]
 8011f7a:	4908      	ldr	r1, [pc, #32]	; (8011f9c <UARTEx_SetNbDataToProcess+0x98>)
 8011f7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011f7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8011f82:	b29a      	uxth	r2, r3
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011f8a:	bf00      	nop
 8011f8c:	3714      	adds	r7, #20
 8011f8e:	46bd      	mov	sp, r7
 8011f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f94:	4770      	bx	lr
 8011f96:	bf00      	nop
 8011f98:	08018658 	.word	0x08018658
 8011f9c:	08018660 	.word	0x08018660

08011fa0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8011fa0:	b084      	sub	sp, #16
 8011fa2:	b480      	push	{r7}
 8011fa4:	b085      	sub	sp, #20
 8011fa6:	af00      	add	r7, sp, #0
 8011fa8:	6078      	str	r0, [r7, #4]
 8011faa:	f107 001c 	add.w	r0, r7, #28
 8011fae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8011fb6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8011fb8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8011fba:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8011fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8011fbe:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8011fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8011fc2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8011fc6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8011fc8:	68fa      	ldr	r2, [r7, #12]
 8011fca:	4313      	orrs	r3, r2
 8011fcc:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	685a      	ldr	r2, [r3, #4]
 8011fd2:	4b07      	ldr	r3, [pc, #28]	; (8011ff0 <SDMMC_Init+0x50>)
 8011fd4:	4013      	ands	r3, r2
 8011fd6:	68fa      	ldr	r2, [r7, #12]
 8011fd8:	431a      	orrs	r2, r3
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8011fde:	2300      	movs	r3, #0
}
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	3714      	adds	r7, #20
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fea:	b004      	add	sp, #16
 8011fec:	4770      	bx	lr
 8011fee:	bf00      	nop
 8011ff0:	ffc02c00 	.word	0xffc02c00

08011ff4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8011ff4:	b480      	push	{r7}
 8011ff6:	b083      	sub	sp, #12
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8012002:	4618      	mov	r0, r3
 8012004:	370c      	adds	r7, #12
 8012006:	46bd      	mov	sp, r7
 8012008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200c:	4770      	bx	lr

0801200e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 801200e:	b480      	push	{r7}
 8012010:	b083      	sub	sp, #12
 8012012:	af00      	add	r7, sp, #0
 8012014:	6078      	str	r0, [r7, #4]
 8012016:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8012018:	683b      	ldr	r3, [r7, #0]
 801201a:	681a      	ldr	r2, [r3, #0]
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8012022:	2300      	movs	r3, #0
}
 8012024:	4618      	mov	r0, r3
 8012026:	370c      	adds	r7, #12
 8012028:	46bd      	mov	sp, r7
 801202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801202e:	4770      	bx	lr

08012030 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8012030:	b480      	push	{r7}
 8012032:	b083      	sub	sp, #12
 8012034:	af00      	add	r7, sp, #0
 8012036:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	f043 0203 	orr.w	r2, r3, #3
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8012044:	2300      	movs	r3, #0
}
 8012046:	4618      	mov	r0, r3
 8012048:	370c      	adds	r7, #12
 801204a:	46bd      	mov	sp, r7
 801204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012050:	4770      	bx	lr

08012052 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8012052:	b480      	push	{r7}
 8012054:	b083      	sub	sp, #12
 8012056:	af00      	add	r7, sp, #0
 8012058:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	f003 0303 	and.w	r3, r3, #3
}
 8012062:	4618      	mov	r0, r3
 8012064:	370c      	adds	r7, #12
 8012066:	46bd      	mov	sp, r7
 8012068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801206c:	4770      	bx	lr
	...

08012070 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8012070:	b480      	push	{r7}
 8012072:	b085      	sub	sp, #20
 8012074:	af00      	add	r7, sp, #0
 8012076:	6078      	str	r0, [r7, #4]
 8012078:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801207a:	2300      	movs	r3, #0
 801207c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801207e:	683b      	ldr	r3, [r7, #0]
 8012080:	681a      	ldr	r2, [r3, #0]
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012086:	683b      	ldr	r3, [r7, #0]
 8012088:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 801208a:	683b      	ldr	r3, [r7, #0]
 801208c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801208e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8012090:	683b      	ldr	r3, [r7, #0]
 8012092:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8012094:	431a      	orrs	r2, r3
                       Command->CPSM);
 8012096:	683b      	ldr	r3, [r7, #0]
 8012098:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 801209a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801209c:	68fa      	ldr	r2, [r7, #12]
 801209e:	4313      	orrs	r3, r2
 80120a0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	68da      	ldr	r2, [r3, #12]
 80120a6:	4b06      	ldr	r3, [pc, #24]	; (80120c0 <SDMMC_SendCommand+0x50>)
 80120a8:	4013      	ands	r3, r2
 80120aa:	68fa      	ldr	r2, [r7, #12]
 80120ac:	431a      	orrs	r2, r3
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80120b2:	2300      	movs	r3, #0
}
 80120b4:	4618      	mov	r0, r3
 80120b6:	3714      	adds	r7, #20
 80120b8:	46bd      	mov	sp, r7
 80120ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120be:	4770      	bx	lr
 80120c0:	fffee0c0 	.word	0xfffee0c0

080120c4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80120c4:	b480      	push	{r7}
 80120c6:	b083      	sub	sp, #12
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	691b      	ldr	r3, [r3, #16]
 80120d0:	b2db      	uxtb	r3, r3
}
 80120d2:	4618      	mov	r0, r3
 80120d4:	370c      	adds	r7, #12
 80120d6:	46bd      	mov	sp, r7
 80120d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120dc:	4770      	bx	lr

080120de <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80120de:	b480      	push	{r7}
 80120e0:	b085      	sub	sp, #20
 80120e2:	af00      	add	r7, sp, #0
 80120e4:	6078      	str	r0, [r7, #4]
 80120e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	3314      	adds	r3, #20
 80120ec:	461a      	mov	r2, r3
 80120ee:	683b      	ldr	r3, [r7, #0]
 80120f0:	4413      	add	r3, r2
 80120f2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	681b      	ldr	r3, [r3, #0]
}
 80120f8:	4618      	mov	r0, r3
 80120fa:	3714      	adds	r7, #20
 80120fc:	46bd      	mov	sp, r7
 80120fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012102:	4770      	bx	lr

08012104 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8012104:	b480      	push	{r7}
 8012106:	b085      	sub	sp, #20
 8012108:	af00      	add	r7, sp, #0
 801210a:	6078      	str	r0, [r7, #4]
 801210c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801210e:	2300      	movs	r3, #0
 8012110:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8012112:	683b      	ldr	r3, [r7, #0]
 8012114:	681a      	ldr	r2, [r3, #0]
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801211a:	683b      	ldr	r3, [r7, #0]
 801211c:	685a      	ldr	r2, [r3, #4]
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012122:	683b      	ldr	r3, [r7, #0]
 8012124:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8012126:	683b      	ldr	r3, [r7, #0]
 8012128:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801212a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 801212c:	683b      	ldr	r3, [r7, #0]
 801212e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8012130:	431a      	orrs	r2, r3
                       Data->DPSM);
 8012132:	683b      	ldr	r3, [r7, #0]
 8012134:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8012136:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012138:	68fa      	ldr	r2, [r7, #12]
 801213a:	4313      	orrs	r3, r2
 801213c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012142:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	431a      	orrs	r2, r3
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801214e:	2300      	movs	r3, #0

}
 8012150:	4618      	mov	r0, r3
 8012152:	3714      	adds	r7, #20
 8012154:	46bd      	mov	sp, r7
 8012156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801215a:	4770      	bx	lr

0801215c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 801215c:	b580      	push	{r7, lr}
 801215e:	b088      	sub	sp, #32
 8012160:	af00      	add	r7, sp, #0
 8012162:	6078      	str	r0, [r7, #4]
 8012164:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8012166:	683b      	ldr	r3, [r7, #0]
 8012168:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801216a:	2310      	movs	r3, #16
 801216c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801216e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012172:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012174:	2300      	movs	r3, #0
 8012176:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012178:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801217c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801217e:	f107 0308 	add.w	r3, r7, #8
 8012182:	4619      	mov	r1, r3
 8012184:	6878      	ldr	r0, [r7, #4]
 8012186:	f7ff ff73 	bl	8012070 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801218a:	f241 3288 	movw	r2, #5000	; 0x1388
 801218e:	2110      	movs	r1, #16
 8012190:	6878      	ldr	r0, [r7, #4]
 8012192:	f000 fa5f 	bl	8012654 <SDMMC_GetCmdResp1>
 8012196:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012198:	69fb      	ldr	r3, [r7, #28]
}
 801219a:	4618      	mov	r0, r3
 801219c:	3720      	adds	r7, #32
 801219e:	46bd      	mov	sp, r7
 80121a0:	bd80      	pop	{r7, pc}

080121a2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80121a2:	b580      	push	{r7, lr}
 80121a4:	b088      	sub	sp, #32
 80121a6:	af00      	add	r7, sp, #0
 80121a8:	6078      	str	r0, [r7, #4]
 80121aa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80121ac:	683b      	ldr	r3, [r7, #0]
 80121ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80121b0:	2311      	movs	r3, #17
 80121b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80121b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80121b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80121ba:	2300      	movs	r3, #0
 80121bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80121be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80121c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80121c4:	f107 0308 	add.w	r3, r7, #8
 80121c8:	4619      	mov	r1, r3
 80121ca:	6878      	ldr	r0, [r7, #4]
 80121cc:	f7ff ff50 	bl	8012070 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80121d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80121d4:	2111      	movs	r1, #17
 80121d6:	6878      	ldr	r0, [r7, #4]
 80121d8:	f000 fa3c 	bl	8012654 <SDMMC_GetCmdResp1>
 80121dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80121de:	69fb      	ldr	r3, [r7, #28]
}
 80121e0:	4618      	mov	r0, r3
 80121e2:	3720      	adds	r7, #32
 80121e4:	46bd      	mov	sp, r7
 80121e6:	bd80      	pop	{r7, pc}

080121e8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b088      	sub	sp, #32
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	6078      	str	r0, [r7, #4]
 80121f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80121f2:	683b      	ldr	r3, [r7, #0]
 80121f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80121f6:	2312      	movs	r3, #18
 80121f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80121fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80121fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012200:	2300      	movs	r3, #0
 8012202:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012204:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012208:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801220a:	f107 0308 	add.w	r3, r7, #8
 801220e:	4619      	mov	r1, r3
 8012210:	6878      	ldr	r0, [r7, #4]
 8012212:	f7ff ff2d 	bl	8012070 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012216:	f241 3288 	movw	r2, #5000	; 0x1388
 801221a:	2112      	movs	r1, #18
 801221c:	6878      	ldr	r0, [r7, #4]
 801221e:	f000 fa19 	bl	8012654 <SDMMC_GetCmdResp1>
 8012222:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012224:	69fb      	ldr	r3, [r7, #28]
}
 8012226:	4618      	mov	r0, r3
 8012228:	3720      	adds	r7, #32
 801222a:	46bd      	mov	sp, r7
 801222c:	bd80      	pop	{r7, pc}

0801222e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801222e:	b580      	push	{r7, lr}
 8012230:	b088      	sub	sp, #32
 8012232:	af00      	add	r7, sp, #0
 8012234:	6078      	str	r0, [r7, #4]
 8012236:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012238:	683b      	ldr	r3, [r7, #0]
 801223a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 801223c:	2318      	movs	r3, #24
 801223e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012240:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012244:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012246:	2300      	movs	r3, #0
 8012248:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801224a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801224e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012250:	f107 0308 	add.w	r3, r7, #8
 8012254:	4619      	mov	r1, r3
 8012256:	6878      	ldr	r0, [r7, #4]
 8012258:	f7ff ff0a 	bl	8012070 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801225c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012260:	2118      	movs	r1, #24
 8012262:	6878      	ldr	r0, [r7, #4]
 8012264:	f000 f9f6 	bl	8012654 <SDMMC_GetCmdResp1>
 8012268:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801226a:	69fb      	ldr	r3, [r7, #28]
}
 801226c:	4618      	mov	r0, r3
 801226e:	3720      	adds	r7, #32
 8012270:	46bd      	mov	sp, r7
 8012272:	bd80      	pop	{r7, pc}

08012274 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012274:	b580      	push	{r7, lr}
 8012276:	b088      	sub	sp, #32
 8012278:	af00      	add	r7, sp, #0
 801227a:	6078      	str	r0, [r7, #4]
 801227c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801227e:	683b      	ldr	r3, [r7, #0]
 8012280:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8012282:	2319      	movs	r3, #25
 8012284:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012286:	f44f 7380 	mov.w	r3, #256	; 0x100
 801228a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801228c:	2300      	movs	r3, #0
 801228e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012290:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012294:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012296:	f107 0308 	add.w	r3, r7, #8
 801229a:	4619      	mov	r1, r3
 801229c:	6878      	ldr	r0, [r7, #4]
 801229e:	f7ff fee7 	bl	8012070 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80122a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80122a6:	2119      	movs	r1, #25
 80122a8:	6878      	ldr	r0, [r7, #4]
 80122aa:	f000 f9d3 	bl	8012654 <SDMMC_GetCmdResp1>
 80122ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80122b0:	69fb      	ldr	r3, [r7, #28]
}
 80122b2:	4618      	mov	r0, r3
 80122b4:	3720      	adds	r7, #32
 80122b6:	46bd      	mov	sp, r7
 80122b8:	bd80      	pop	{r7, pc}
	...

080122bc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80122bc:	b580      	push	{r7, lr}
 80122be:	b088      	sub	sp, #32
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80122c4:	2300      	movs	r3, #0
 80122c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80122c8:	230c      	movs	r3, #12
 80122ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80122cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80122d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80122d2:	2300      	movs	r3, #0
 80122d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80122d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80122da:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	68db      	ldr	r3, [r3, #12]
 80122e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	68db      	ldr	r3, [r3, #12]
 80122ec:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80122f4:	f107 0308 	add.w	r3, r7, #8
 80122f8:	4619      	mov	r1, r3
 80122fa:	6878      	ldr	r0, [r7, #4]
 80122fc:	f7ff feb8 	bl	8012070 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8012300:	4a0b      	ldr	r2, [pc, #44]	; (8012330 <SDMMC_CmdStopTransfer+0x74>)
 8012302:	210c      	movs	r1, #12
 8012304:	6878      	ldr	r0, [r7, #4]
 8012306:	f000 f9a5 	bl	8012654 <SDMMC_GetCmdResp1>
 801230a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	68db      	ldr	r3, [r3, #12]
 8012310:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012318:	69fb      	ldr	r3, [r7, #28]
 801231a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801231e:	d101      	bne.n	8012324 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8012320:	2300      	movs	r3, #0
 8012322:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8012324:	69fb      	ldr	r3, [r7, #28]
}
 8012326:	4618      	mov	r0, r3
 8012328:	3720      	adds	r7, #32
 801232a:	46bd      	mov	sp, r7
 801232c:	bd80      	pop	{r7, pc}
 801232e:	bf00      	nop
 8012330:	05f5e100 	.word	0x05f5e100

08012334 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8012334:	b580      	push	{r7, lr}
 8012336:	b088      	sub	sp, #32
 8012338:	af00      	add	r7, sp, #0
 801233a:	6078      	str	r0, [r7, #4]
 801233c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801233e:	683b      	ldr	r3, [r7, #0]
 8012340:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8012342:	2307      	movs	r3, #7
 8012344:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012346:	f44f 7380 	mov.w	r3, #256	; 0x100
 801234a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801234c:	2300      	movs	r3, #0
 801234e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012354:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012356:	f107 0308 	add.w	r3, r7, #8
 801235a:	4619      	mov	r1, r3
 801235c:	6878      	ldr	r0, [r7, #4]
 801235e:	f7ff fe87 	bl	8012070 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8012362:	f241 3288 	movw	r2, #5000	; 0x1388
 8012366:	2107      	movs	r1, #7
 8012368:	6878      	ldr	r0, [r7, #4]
 801236a:	f000 f973 	bl	8012654 <SDMMC_GetCmdResp1>
 801236e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012370:	69fb      	ldr	r3, [r7, #28]
}
 8012372:	4618      	mov	r0, r3
 8012374:	3720      	adds	r7, #32
 8012376:	46bd      	mov	sp, r7
 8012378:	bd80      	pop	{r7, pc}

0801237a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 801237a:	b580      	push	{r7, lr}
 801237c:	b088      	sub	sp, #32
 801237e:	af00      	add	r7, sp, #0
 8012380:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012382:	2300      	movs	r3, #0
 8012384:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8012386:	2300      	movs	r3, #0
 8012388:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 801238a:	2300      	movs	r3, #0
 801238c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801238e:	2300      	movs	r3, #0
 8012390:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012392:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012396:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012398:	f107 0308 	add.w	r3, r7, #8
 801239c:	4619      	mov	r1, r3
 801239e:	6878      	ldr	r0, [r7, #4]
 80123a0:	f7ff fe66 	bl	8012070 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80123a4:	6878      	ldr	r0, [r7, #4]
 80123a6:	f000 fb97 	bl	8012ad8 <SDMMC_GetCmdError>
 80123aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80123ac:	69fb      	ldr	r3, [r7, #28]
}
 80123ae:	4618      	mov	r0, r3
 80123b0:	3720      	adds	r7, #32
 80123b2:	46bd      	mov	sp, r7
 80123b4:	bd80      	pop	{r7, pc}

080123b6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80123b6:	b580      	push	{r7, lr}
 80123b8:	b088      	sub	sp, #32
 80123ba:	af00      	add	r7, sp, #0
 80123bc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80123be:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80123c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80123c4:	2308      	movs	r3, #8
 80123c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80123c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80123cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80123ce:	2300      	movs	r3, #0
 80123d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80123d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80123d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80123d8:	f107 0308 	add.w	r3, r7, #8
 80123dc:	4619      	mov	r1, r3
 80123de:	6878      	ldr	r0, [r7, #4]
 80123e0:	f7ff fe46 	bl	8012070 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80123e4:	6878      	ldr	r0, [r7, #4]
 80123e6:	f000 fb29 	bl	8012a3c <SDMMC_GetCmdResp7>
 80123ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80123ec:	69fb      	ldr	r3, [r7, #28]
}
 80123ee:	4618      	mov	r0, r3
 80123f0:	3720      	adds	r7, #32
 80123f2:	46bd      	mov	sp, r7
 80123f4:	bd80      	pop	{r7, pc}

080123f6 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80123f6:	b580      	push	{r7, lr}
 80123f8:	b088      	sub	sp, #32
 80123fa:	af00      	add	r7, sp, #0
 80123fc:	6078      	str	r0, [r7, #4]
 80123fe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8012400:	683b      	ldr	r3, [r7, #0]
 8012402:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8012404:	2337      	movs	r3, #55	; 0x37
 8012406:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012408:	f44f 7380 	mov.w	r3, #256	; 0x100
 801240c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801240e:	2300      	movs	r3, #0
 8012410:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012412:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012416:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012418:	f107 0308 	add.w	r3, r7, #8
 801241c:	4619      	mov	r1, r3
 801241e:	6878      	ldr	r0, [r7, #4]
 8012420:	f7ff fe26 	bl	8012070 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8012424:	f241 3288 	movw	r2, #5000	; 0x1388
 8012428:	2137      	movs	r1, #55	; 0x37
 801242a:	6878      	ldr	r0, [r7, #4]
 801242c:	f000 f912 	bl	8012654 <SDMMC_GetCmdResp1>
 8012430:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012432:	69fb      	ldr	r3, [r7, #28]
}
 8012434:	4618      	mov	r0, r3
 8012436:	3720      	adds	r7, #32
 8012438:	46bd      	mov	sp, r7
 801243a:	bd80      	pop	{r7, pc}

0801243c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801243c:	b580      	push	{r7, lr}
 801243e:	b088      	sub	sp, #32
 8012440:	af00      	add	r7, sp, #0
 8012442:	6078      	str	r0, [r7, #4]
 8012444:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012446:	683b      	ldr	r3, [r7, #0]
 8012448:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801244a:	2329      	movs	r3, #41	; 0x29
 801244c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801244e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012452:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012454:	2300      	movs	r3, #0
 8012456:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012458:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801245c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801245e:	f107 0308 	add.w	r3, r7, #8
 8012462:	4619      	mov	r1, r3
 8012464:	6878      	ldr	r0, [r7, #4]
 8012466:	f7ff fe03 	bl	8012070 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 801246a:	6878      	ldr	r0, [r7, #4]
 801246c:	f000 fa2e 	bl	80128cc <SDMMC_GetCmdResp3>
 8012470:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012472:	69fb      	ldr	r3, [r7, #28]
}
 8012474:	4618      	mov	r0, r3
 8012476:	3720      	adds	r7, #32
 8012478:	46bd      	mov	sp, r7
 801247a:	bd80      	pop	{r7, pc}

0801247c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 801247c:	b580      	push	{r7, lr}
 801247e:	b088      	sub	sp, #32
 8012480:	af00      	add	r7, sp, #0
 8012482:	6078      	str	r0, [r7, #4]
 8012484:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8012486:	683b      	ldr	r3, [r7, #0]
 8012488:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801248a:	2306      	movs	r3, #6
 801248c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801248e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012492:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012494:	2300      	movs	r3, #0
 8012496:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801249c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801249e:	f107 0308 	add.w	r3, r7, #8
 80124a2:	4619      	mov	r1, r3
 80124a4:	6878      	ldr	r0, [r7, #4]
 80124a6:	f7ff fde3 	bl	8012070 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80124aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80124ae:	2106      	movs	r1, #6
 80124b0:	6878      	ldr	r0, [r7, #4]
 80124b2:	f000 f8cf 	bl	8012654 <SDMMC_GetCmdResp1>
 80124b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80124b8:	69fb      	ldr	r3, [r7, #28]
}
 80124ba:	4618      	mov	r0, r3
 80124bc:	3720      	adds	r7, #32
 80124be:	46bd      	mov	sp, r7
 80124c0:	bd80      	pop	{r7, pc}

080124c2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80124c2:	b580      	push	{r7, lr}
 80124c4:	b088      	sub	sp, #32
 80124c6:	af00      	add	r7, sp, #0
 80124c8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80124ca:	2300      	movs	r3, #0
 80124cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80124ce:	2333      	movs	r3, #51	; 0x33
 80124d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80124d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80124d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80124d8:	2300      	movs	r3, #0
 80124da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80124dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80124e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80124e2:	f107 0308 	add.w	r3, r7, #8
 80124e6:	4619      	mov	r1, r3
 80124e8:	6878      	ldr	r0, [r7, #4]
 80124ea:	f7ff fdc1 	bl	8012070 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80124ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80124f2:	2133      	movs	r1, #51	; 0x33
 80124f4:	6878      	ldr	r0, [r7, #4]
 80124f6:	f000 f8ad 	bl	8012654 <SDMMC_GetCmdResp1>
 80124fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80124fc:	69fb      	ldr	r3, [r7, #28]
}
 80124fe:	4618      	mov	r0, r3
 8012500:	3720      	adds	r7, #32
 8012502:	46bd      	mov	sp, r7
 8012504:	bd80      	pop	{r7, pc}

08012506 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8012506:	b580      	push	{r7, lr}
 8012508:	b088      	sub	sp, #32
 801250a:	af00      	add	r7, sp, #0
 801250c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801250e:	2300      	movs	r3, #0
 8012510:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8012512:	2302      	movs	r3, #2
 8012514:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012516:	f44f 7340 	mov.w	r3, #768	; 0x300
 801251a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801251c:	2300      	movs	r3, #0
 801251e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012524:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012526:	f107 0308 	add.w	r3, r7, #8
 801252a:	4619      	mov	r1, r3
 801252c:	6878      	ldr	r0, [r7, #4]
 801252e:	f7ff fd9f 	bl	8012070 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012532:	6878      	ldr	r0, [r7, #4]
 8012534:	f000 f980 	bl	8012838 <SDMMC_GetCmdResp2>
 8012538:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801253a:	69fb      	ldr	r3, [r7, #28]
}
 801253c:	4618      	mov	r0, r3
 801253e:	3720      	adds	r7, #32
 8012540:	46bd      	mov	sp, r7
 8012542:	bd80      	pop	{r7, pc}

08012544 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012544:	b580      	push	{r7, lr}
 8012546:	b088      	sub	sp, #32
 8012548:	af00      	add	r7, sp, #0
 801254a:	6078      	str	r0, [r7, #4]
 801254c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801254e:	683b      	ldr	r3, [r7, #0]
 8012550:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8012552:	2309      	movs	r3, #9
 8012554:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012556:	f44f 7340 	mov.w	r3, #768	; 0x300
 801255a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801255c:	2300      	movs	r3, #0
 801255e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012560:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012564:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012566:	f107 0308 	add.w	r3, r7, #8
 801256a:	4619      	mov	r1, r3
 801256c:	6878      	ldr	r0, [r7, #4]
 801256e:	f7ff fd7f 	bl	8012070 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012572:	6878      	ldr	r0, [r7, #4]
 8012574:	f000 f960 	bl	8012838 <SDMMC_GetCmdResp2>
 8012578:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801257a:	69fb      	ldr	r3, [r7, #28]
}
 801257c:	4618      	mov	r0, r3
 801257e:	3720      	adds	r7, #32
 8012580:	46bd      	mov	sp, r7
 8012582:	bd80      	pop	{r7, pc}

08012584 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8012584:	b580      	push	{r7, lr}
 8012586:	b088      	sub	sp, #32
 8012588:	af00      	add	r7, sp, #0
 801258a:	6078      	str	r0, [r7, #4]
 801258c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801258e:	2300      	movs	r3, #0
 8012590:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8012592:	2303      	movs	r3, #3
 8012594:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012596:	f44f 7380 	mov.w	r3, #256	; 0x100
 801259a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801259c:	2300      	movs	r3, #0
 801259e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80125a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80125a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80125a6:	f107 0308 	add.w	r3, r7, #8
 80125aa:	4619      	mov	r1, r3
 80125ac:	6878      	ldr	r0, [r7, #4]
 80125ae:	f7ff fd5f 	bl	8012070 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80125b2:	683a      	ldr	r2, [r7, #0]
 80125b4:	2103      	movs	r1, #3
 80125b6:	6878      	ldr	r0, [r7, #4]
 80125b8:	f000 f9c8 	bl	801294c <SDMMC_GetCmdResp6>
 80125bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80125be:	69fb      	ldr	r3, [r7, #28]
}
 80125c0:	4618      	mov	r0, r3
 80125c2:	3720      	adds	r7, #32
 80125c4:	46bd      	mov	sp, r7
 80125c6:	bd80      	pop	{r7, pc}

080125c8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80125c8:	b580      	push	{r7, lr}
 80125ca:	b088      	sub	sp, #32
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	6078      	str	r0, [r7, #4]
 80125d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80125d2:	683b      	ldr	r3, [r7, #0]
 80125d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80125d6:	230d      	movs	r3, #13
 80125d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80125da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80125de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80125e0:	2300      	movs	r3, #0
 80125e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80125e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80125e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80125ea:	f107 0308 	add.w	r3, r7, #8
 80125ee:	4619      	mov	r1, r3
 80125f0:	6878      	ldr	r0, [r7, #4]
 80125f2:	f7ff fd3d 	bl	8012070 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80125f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80125fa:	210d      	movs	r1, #13
 80125fc:	6878      	ldr	r0, [r7, #4]
 80125fe:	f000 f829 	bl	8012654 <SDMMC_GetCmdResp1>
 8012602:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012604:	69fb      	ldr	r3, [r7, #28]
}
 8012606:	4618      	mov	r0, r3
 8012608:	3720      	adds	r7, #32
 801260a:	46bd      	mov	sp, r7
 801260c:	bd80      	pop	{r7, pc}

0801260e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 801260e:	b580      	push	{r7, lr}
 8012610:	b088      	sub	sp, #32
 8012612:	af00      	add	r7, sp, #0
 8012614:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012616:	2300      	movs	r3, #0
 8012618:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 801261a:	230d      	movs	r3, #13
 801261c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801261e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012622:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012624:	2300      	movs	r3, #0
 8012626:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801262c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801262e:	f107 0308 	add.w	r3, r7, #8
 8012632:	4619      	mov	r1, r3
 8012634:	6878      	ldr	r0, [r7, #4]
 8012636:	f7ff fd1b 	bl	8012070 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 801263a:	f241 3288 	movw	r2, #5000	; 0x1388
 801263e:	210d      	movs	r1, #13
 8012640:	6878      	ldr	r0, [r7, #4]
 8012642:	f000 f807 	bl	8012654 <SDMMC_GetCmdResp1>
 8012646:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012648:	69fb      	ldr	r3, [r7, #28]
}
 801264a:	4618      	mov	r0, r3
 801264c:	3720      	adds	r7, #32
 801264e:	46bd      	mov	sp, r7
 8012650:	bd80      	pop	{r7, pc}
	...

08012654 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8012654:	b580      	push	{r7, lr}
 8012656:	b088      	sub	sp, #32
 8012658:	af00      	add	r7, sp, #0
 801265a:	60f8      	str	r0, [r7, #12]
 801265c:	460b      	mov	r3, r1
 801265e:	607a      	str	r2, [r7, #4]
 8012660:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8012662:	4b70      	ldr	r3, [pc, #448]	; (8012824 <SDMMC_GetCmdResp1+0x1d0>)
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	4a70      	ldr	r2, [pc, #448]	; (8012828 <SDMMC_GetCmdResp1+0x1d4>)
 8012668:	fba2 2303 	umull	r2, r3, r2, r3
 801266c:	0a5a      	lsrs	r2, r3, #9
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	fb02 f303 	mul.w	r3, r2, r3
 8012674:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012676:	69fb      	ldr	r3, [r7, #28]
 8012678:	1e5a      	subs	r2, r3, #1
 801267a:	61fa      	str	r2, [r7, #28]
 801267c:	2b00      	cmp	r3, #0
 801267e:	d102      	bne.n	8012686 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012680:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012684:	e0c9      	b.n	801281a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801268a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 801268c:	69ba      	ldr	r2, [r7, #24]
 801268e:	4b67      	ldr	r3, [pc, #412]	; (801282c <SDMMC_GetCmdResp1+0x1d8>)
 8012690:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012692:	2b00      	cmp	r3, #0
 8012694:	d0ef      	beq.n	8012676 <SDMMC_GetCmdResp1+0x22>
 8012696:	69bb      	ldr	r3, [r7, #24]
 8012698:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801269c:	2b00      	cmp	r3, #0
 801269e:	d1ea      	bne.n	8012676 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126a4:	f003 0304 	and.w	r3, r3, #4
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d004      	beq.n	80126b6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	2204      	movs	r2, #4
 80126b0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80126b2:	2304      	movs	r3, #4
 80126b4:	e0b1      	b.n	801281a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126ba:	f003 0301 	and.w	r3, r3, #1
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d004      	beq.n	80126cc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	2201      	movs	r2, #1
 80126c6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80126c8:	2301      	movs	r3, #1
 80126ca:	e0a6      	b.n	801281a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	4a58      	ldr	r2, [pc, #352]	; (8012830 <SDMMC_GetCmdResp1+0x1dc>)
 80126d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80126d2:	68f8      	ldr	r0, [r7, #12]
 80126d4:	f7ff fcf6 	bl	80120c4 <SDMMC_GetCommandResponse>
 80126d8:	4603      	mov	r3, r0
 80126da:	461a      	mov	r2, r3
 80126dc:	7afb      	ldrb	r3, [r7, #11]
 80126de:	4293      	cmp	r3, r2
 80126e0:	d001      	beq.n	80126e6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80126e2:	2301      	movs	r3, #1
 80126e4:	e099      	b.n	801281a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80126e6:	2100      	movs	r1, #0
 80126e8:	68f8      	ldr	r0, [r7, #12]
 80126ea:	f7ff fcf8 	bl	80120de <SDMMC_GetResponse>
 80126ee:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80126f0:	697a      	ldr	r2, [r7, #20]
 80126f2:	4b50      	ldr	r3, [pc, #320]	; (8012834 <SDMMC_GetCmdResp1+0x1e0>)
 80126f4:	4013      	ands	r3, r2
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d101      	bne.n	80126fe <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80126fa:	2300      	movs	r3, #0
 80126fc:	e08d      	b.n	801281a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80126fe:	697b      	ldr	r3, [r7, #20]
 8012700:	2b00      	cmp	r3, #0
 8012702:	da02      	bge.n	801270a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012704:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012708:	e087      	b.n	801281a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801270a:	697b      	ldr	r3, [r7, #20]
 801270c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012710:	2b00      	cmp	r3, #0
 8012712:	d001      	beq.n	8012718 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012714:	2340      	movs	r3, #64	; 0x40
 8012716:	e080      	b.n	801281a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012718:	697b      	ldr	r3, [r7, #20]
 801271a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801271e:	2b00      	cmp	r3, #0
 8012720:	d001      	beq.n	8012726 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012722:	2380      	movs	r3, #128	; 0x80
 8012724:	e079      	b.n	801281a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012726:	697b      	ldr	r3, [r7, #20]
 8012728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801272c:	2b00      	cmp	r3, #0
 801272e:	d002      	beq.n	8012736 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012730:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012734:	e071      	b.n	801281a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012736:	697b      	ldr	r3, [r7, #20]
 8012738:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801273c:	2b00      	cmp	r3, #0
 801273e:	d002      	beq.n	8012746 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012740:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012744:	e069      	b.n	801281a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012746:	697b      	ldr	r3, [r7, #20]
 8012748:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801274c:	2b00      	cmp	r3, #0
 801274e:	d002      	beq.n	8012756 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012754:	e061      	b.n	801281a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012756:	697b      	ldr	r3, [r7, #20]
 8012758:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801275c:	2b00      	cmp	r3, #0
 801275e:	d002      	beq.n	8012766 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012760:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012764:	e059      	b.n	801281a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012766:	697b      	ldr	r3, [r7, #20]
 8012768:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801276c:	2b00      	cmp	r3, #0
 801276e:	d002      	beq.n	8012776 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012774:	e051      	b.n	801281a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012776:	697b      	ldr	r3, [r7, #20]
 8012778:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801277c:	2b00      	cmp	r3, #0
 801277e:	d002      	beq.n	8012786 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012780:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012784:	e049      	b.n	801281a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012786:	697b      	ldr	r3, [r7, #20]
 8012788:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801278c:	2b00      	cmp	r3, #0
 801278e:	d002      	beq.n	8012796 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012790:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012794:	e041      	b.n	801281a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012796:	697b      	ldr	r3, [r7, #20]
 8012798:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801279c:	2b00      	cmp	r3, #0
 801279e:	d002      	beq.n	80127a6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80127a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80127a4:	e039      	b.n	801281a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80127a6:	697b      	ldr	r3, [r7, #20]
 80127a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d002      	beq.n	80127b6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80127b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80127b4:	e031      	b.n	801281a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80127b6:	697b      	ldr	r3, [r7, #20]
 80127b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d002      	beq.n	80127c6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80127c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80127c4:	e029      	b.n	801281a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80127c6:	697b      	ldr	r3, [r7, #20]
 80127c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d002      	beq.n	80127d6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80127d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80127d4:	e021      	b.n	801281a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80127d6:	697b      	ldr	r3, [r7, #20]
 80127d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d002      	beq.n	80127e6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80127e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80127e4:	e019      	b.n	801281a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80127e6:	697b      	ldr	r3, [r7, #20]
 80127e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d002      	beq.n	80127f6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80127f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80127f4:	e011      	b.n	801281a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80127f6:	697b      	ldr	r3, [r7, #20]
 80127f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d002      	beq.n	8012806 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8012800:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012804:	e009      	b.n	801281a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8012806:	697b      	ldr	r3, [r7, #20]
 8012808:	f003 0308 	and.w	r3, r3, #8
 801280c:	2b00      	cmp	r3, #0
 801280e:	d002      	beq.n	8012816 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8012810:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8012814:	e001      	b.n	801281a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012816:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801281a:	4618      	mov	r0, r3
 801281c:	3720      	adds	r7, #32
 801281e:	46bd      	mov	sp, r7
 8012820:	bd80      	pop	{r7, pc}
 8012822:	bf00      	nop
 8012824:	24000000 	.word	0x24000000
 8012828:	10624dd3 	.word	0x10624dd3
 801282c:	00200045 	.word	0x00200045
 8012830:	002000c5 	.word	0x002000c5
 8012834:	fdffe008 	.word	0xfdffe008

08012838 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8012838:	b480      	push	{r7}
 801283a:	b085      	sub	sp, #20
 801283c:	af00      	add	r7, sp, #0
 801283e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012840:	4b1f      	ldr	r3, [pc, #124]	; (80128c0 <SDMMC_GetCmdResp2+0x88>)
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	4a1f      	ldr	r2, [pc, #124]	; (80128c4 <SDMMC_GetCmdResp2+0x8c>)
 8012846:	fba2 2303 	umull	r2, r3, r2, r3
 801284a:	0a5b      	lsrs	r3, r3, #9
 801284c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012850:	fb02 f303 	mul.w	r3, r2, r3
 8012854:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	1e5a      	subs	r2, r3, #1
 801285a:	60fa      	str	r2, [r7, #12]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d102      	bne.n	8012866 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012860:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012864:	e026      	b.n	80128b4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801286a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801286c:	68bb      	ldr	r3, [r7, #8]
 801286e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012872:	2b00      	cmp	r3, #0
 8012874:	d0ef      	beq.n	8012856 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012876:	68bb      	ldr	r3, [r7, #8]
 8012878:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801287c:	2b00      	cmp	r3, #0
 801287e:	d1ea      	bne.n	8012856 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012884:	f003 0304 	and.w	r3, r3, #4
 8012888:	2b00      	cmp	r3, #0
 801288a:	d004      	beq.n	8012896 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	2204      	movs	r2, #4
 8012890:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012892:	2304      	movs	r3, #4
 8012894:	e00e      	b.n	80128b4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801289a:	f003 0301 	and.w	r3, r3, #1
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d004      	beq.n	80128ac <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	2201      	movs	r2, #1
 80128a6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80128a8:	2301      	movs	r3, #1
 80128aa:	e003      	b.n	80128b4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	4a06      	ldr	r2, [pc, #24]	; (80128c8 <SDMMC_GetCmdResp2+0x90>)
 80128b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80128b2:	2300      	movs	r3, #0
}
 80128b4:	4618      	mov	r0, r3
 80128b6:	3714      	adds	r7, #20
 80128b8:	46bd      	mov	sp, r7
 80128ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128be:	4770      	bx	lr
 80128c0:	24000000 	.word	0x24000000
 80128c4:	10624dd3 	.word	0x10624dd3
 80128c8:	002000c5 	.word	0x002000c5

080128cc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80128cc:	b480      	push	{r7}
 80128ce:	b085      	sub	sp, #20
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80128d4:	4b1a      	ldr	r3, [pc, #104]	; (8012940 <SDMMC_GetCmdResp3+0x74>)
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	4a1a      	ldr	r2, [pc, #104]	; (8012944 <SDMMC_GetCmdResp3+0x78>)
 80128da:	fba2 2303 	umull	r2, r3, r2, r3
 80128de:	0a5b      	lsrs	r3, r3, #9
 80128e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80128e4:	fb02 f303 	mul.w	r3, r2, r3
 80128e8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	1e5a      	subs	r2, r3, #1
 80128ee:	60fa      	str	r2, [r7, #12]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d102      	bne.n	80128fa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80128f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80128f8:	e01b      	b.n	8012932 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128fe:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012900:	68bb      	ldr	r3, [r7, #8]
 8012902:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012906:	2b00      	cmp	r3, #0
 8012908:	d0ef      	beq.n	80128ea <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801290a:	68bb      	ldr	r3, [r7, #8]
 801290c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012910:	2b00      	cmp	r3, #0
 8012912:	d1ea      	bne.n	80128ea <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012918:	f003 0304 	and.w	r3, r3, #4
 801291c:	2b00      	cmp	r3, #0
 801291e:	d004      	beq.n	801292a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	2204      	movs	r2, #4
 8012924:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012926:	2304      	movs	r3, #4
 8012928:	e003      	b.n	8012932 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	4a06      	ldr	r2, [pc, #24]	; (8012948 <SDMMC_GetCmdResp3+0x7c>)
 801292e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012930:	2300      	movs	r3, #0
}
 8012932:	4618      	mov	r0, r3
 8012934:	3714      	adds	r7, #20
 8012936:	46bd      	mov	sp, r7
 8012938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801293c:	4770      	bx	lr
 801293e:	bf00      	nop
 8012940:	24000000 	.word	0x24000000
 8012944:	10624dd3 	.word	0x10624dd3
 8012948:	002000c5 	.word	0x002000c5

0801294c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 801294c:	b580      	push	{r7, lr}
 801294e:	b088      	sub	sp, #32
 8012950:	af00      	add	r7, sp, #0
 8012952:	60f8      	str	r0, [r7, #12]
 8012954:	460b      	mov	r3, r1
 8012956:	607a      	str	r2, [r7, #4]
 8012958:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801295a:	4b35      	ldr	r3, [pc, #212]	; (8012a30 <SDMMC_GetCmdResp6+0xe4>)
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	4a35      	ldr	r2, [pc, #212]	; (8012a34 <SDMMC_GetCmdResp6+0xe8>)
 8012960:	fba2 2303 	umull	r2, r3, r2, r3
 8012964:	0a5b      	lsrs	r3, r3, #9
 8012966:	f241 3288 	movw	r2, #5000	; 0x1388
 801296a:	fb02 f303 	mul.w	r3, r2, r3
 801296e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012970:	69fb      	ldr	r3, [r7, #28]
 8012972:	1e5a      	subs	r2, r3, #1
 8012974:	61fa      	str	r2, [r7, #28]
 8012976:	2b00      	cmp	r3, #0
 8012978:	d102      	bne.n	8012980 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801297a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801297e:	e052      	b.n	8012a26 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012984:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012986:	69bb      	ldr	r3, [r7, #24]
 8012988:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801298c:	2b00      	cmp	r3, #0
 801298e:	d0ef      	beq.n	8012970 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012990:	69bb      	ldr	r3, [r7, #24]
 8012992:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012996:	2b00      	cmp	r3, #0
 8012998:	d1ea      	bne.n	8012970 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801299e:	f003 0304 	and.w	r3, r3, #4
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d004      	beq.n	80129b0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	2204      	movs	r2, #4
 80129aa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80129ac:	2304      	movs	r3, #4
 80129ae:	e03a      	b.n	8012a26 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129b4:	f003 0301 	and.w	r3, r3, #1
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d004      	beq.n	80129c6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	2201      	movs	r2, #1
 80129c0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80129c2:	2301      	movs	r3, #1
 80129c4:	e02f      	b.n	8012a26 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80129c6:	68f8      	ldr	r0, [r7, #12]
 80129c8:	f7ff fb7c 	bl	80120c4 <SDMMC_GetCommandResponse>
 80129cc:	4603      	mov	r3, r0
 80129ce:	461a      	mov	r2, r3
 80129d0:	7afb      	ldrb	r3, [r7, #11]
 80129d2:	4293      	cmp	r3, r2
 80129d4:	d001      	beq.n	80129da <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80129d6:	2301      	movs	r3, #1
 80129d8:	e025      	b.n	8012a26 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	4a16      	ldr	r2, [pc, #88]	; (8012a38 <SDMMC_GetCmdResp6+0xec>)
 80129de:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80129e0:	2100      	movs	r1, #0
 80129e2:	68f8      	ldr	r0, [r7, #12]
 80129e4:	f7ff fb7b 	bl	80120de <SDMMC_GetResponse>
 80129e8:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80129ea:	697b      	ldr	r3, [r7, #20]
 80129ec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d106      	bne.n	8012a02 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80129f4:	697b      	ldr	r3, [r7, #20]
 80129f6:	0c1b      	lsrs	r3, r3, #16
 80129f8:	b29a      	uxth	r2, r3
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80129fe:	2300      	movs	r3, #0
 8012a00:	e011      	b.n	8012a26 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8012a02:	697b      	ldr	r3, [r7, #20]
 8012a04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d002      	beq.n	8012a12 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012a0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012a10:	e009      	b.n	8012a26 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8012a12:	697b      	ldr	r3, [r7, #20]
 8012a14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d002      	beq.n	8012a22 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012a20:	e001      	b.n	8012a26 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012a22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012a26:	4618      	mov	r0, r3
 8012a28:	3720      	adds	r7, #32
 8012a2a:	46bd      	mov	sp, r7
 8012a2c:	bd80      	pop	{r7, pc}
 8012a2e:	bf00      	nop
 8012a30:	24000000 	.word	0x24000000
 8012a34:	10624dd3 	.word	0x10624dd3
 8012a38:	002000c5 	.word	0x002000c5

08012a3c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8012a3c:	b480      	push	{r7}
 8012a3e:	b085      	sub	sp, #20
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012a44:	4b22      	ldr	r3, [pc, #136]	; (8012ad0 <SDMMC_GetCmdResp7+0x94>)
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	4a22      	ldr	r2, [pc, #136]	; (8012ad4 <SDMMC_GetCmdResp7+0x98>)
 8012a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8012a4e:	0a5b      	lsrs	r3, r3, #9
 8012a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8012a54:	fb02 f303 	mul.w	r3, r2, r3
 8012a58:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	1e5a      	subs	r2, r3, #1
 8012a5e:	60fa      	str	r2, [r7, #12]
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d102      	bne.n	8012a6a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012a64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012a68:	e02c      	b.n	8012ac4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a6e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012a70:	68bb      	ldr	r3, [r7, #8]
 8012a72:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d0ef      	beq.n	8012a5a <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012a7a:	68bb      	ldr	r3, [r7, #8]
 8012a7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d1ea      	bne.n	8012a5a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a88:	f003 0304 	and.w	r3, r3, #4
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d004      	beq.n	8012a9a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	2204      	movs	r2, #4
 8012a94:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012a96:	2304      	movs	r3, #4
 8012a98:	e014      	b.n	8012ac4 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a9e:	f003 0301 	and.w	r3, r3, #1
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d004      	beq.n	8012ab0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	2201      	movs	r2, #1
 8012aaa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012aac:	2301      	movs	r3, #1
 8012aae:	e009      	b.n	8012ac4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d002      	beq.n	8012ac2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	2240      	movs	r2, #64	; 0x40
 8012ac0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012ac2:	2300      	movs	r3, #0

}
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	3714      	adds	r7, #20
 8012ac8:	46bd      	mov	sp, r7
 8012aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ace:	4770      	bx	lr
 8012ad0:	24000000 	.word	0x24000000
 8012ad4:	10624dd3 	.word	0x10624dd3

08012ad8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8012ad8:	b480      	push	{r7}
 8012ada:	b085      	sub	sp, #20
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012ae0:	4b11      	ldr	r3, [pc, #68]	; (8012b28 <SDMMC_GetCmdError+0x50>)
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	4a11      	ldr	r2, [pc, #68]	; (8012b2c <SDMMC_GetCmdError+0x54>)
 8012ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8012aea:	0a5b      	lsrs	r3, r3, #9
 8012aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8012af0:	fb02 f303 	mul.w	r3, r2, r3
 8012af4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	1e5a      	subs	r2, r3, #1
 8012afa:	60fa      	str	r2, [r7, #12]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d102      	bne.n	8012b06 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012b00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012b04:	e009      	b.n	8012b1a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d0f1      	beq.n	8012af6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	4a06      	ldr	r2, [pc, #24]	; (8012b30 <SDMMC_GetCmdError+0x58>)
 8012b16:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8012b18:	2300      	movs	r3, #0
}
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	3714      	adds	r7, #20
 8012b1e:	46bd      	mov	sp, r7
 8012b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b24:	4770      	bx	lr
 8012b26:	bf00      	nop
 8012b28:	24000000 	.word	0x24000000
 8012b2c:	10624dd3 	.word	0x10624dd3
 8012b30:	002000c5 	.word	0x002000c5

08012b34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012b34:	b084      	sub	sp, #16
 8012b36:	b580      	push	{r7, lr}
 8012b38:	b084      	sub	sp, #16
 8012b3a:	af00      	add	r7, sp, #0
 8012b3c:	6078      	str	r0, [r7, #4]
 8012b3e:	f107 001c 	add.w	r0, r7, #28
 8012b42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b48:	2b01      	cmp	r3, #1
 8012b4a:	d120      	bne.n	8012b8e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	68da      	ldr	r2, [r3, #12]
 8012b5c:	4b2a      	ldr	r3, [pc, #168]	; (8012c08 <USB_CoreInit+0xd4>)
 8012b5e:	4013      	ands	r3, r2
 8012b60:	687a      	ldr	r2, [r7, #4]
 8012b62:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	68db      	ldr	r3, [r3, #12]
 8012b68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012b70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b72:	2b01      	cmp	r3, #1
 8012b74:	d105      	bne.n	8012b82 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	68db      	ldr	r3, [r3, #12]
 8012b7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012b82:	6878      	ldr	r0, [r7, #4]
 8012b84:	f001 faf8 	bl	8014178 <USB_CoreReset>
 8012b88:	4603      	mov	r3, r0
 8012b8a:	73fb      	strb	r3, [r7, #15]
 8012b8c:	e01a      	b.n	8012bc4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	68db      	ldr	r3, [r3, #12]
 8012b92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012b9a:	6878      	ldr	r0, [r7, #4]
 8012b9c:	f001 faec 	bl	8014178 <USB_CoreReset>
 8012ba0:	4603      	mov	r3, r0
 8012ba2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8012ba4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d106      	bne.n	8012bb8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012bae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	639a      	str	r2, [r3, #56]	; 0x38
 8012bb6:	e005      	b.n	8012bc4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012bbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8012bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bc6:	2b01      	cmp	r3, #1
 8012bc8:	d116      	bne.n	8012bf8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012bce:	b29a      	uxth	r2, r3
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012bd8:	4b0c      	ldr	r3, [pc, #48]	; (8012c0c <USB_CoreInit+0xd8>)
 8012bda:	4313      	orrs	r3, r2
 8012bdc:	687a      	ldr	r2, [r7, #4]
 8012bde:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	689b      	ldr	r3, [r3, #8]
 8012be4:	f043 0206 	orr.w	r2, r3, #6
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	689b      	ldr	r3, [r3, #8]
 8012bf0:	f043 0220 	orr.w	r2, r3, #32
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8012bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	3710      	adds	r7, #16
 8012bfe:	46bd      	mov	sp, r7
 8012c00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012c04:	b004      	add	sp, #16
 8012c06:	4770      	bx	lr
 8012c08:	ffbdffbf 	.word	0xffbdffbf
 8012c0c:	03ee0000 	.word	0x03ee0000

08012c10 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8012c10:	b480      	push	{r7}
 8012c12:	b087      	sub	sp, #28
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	60f8      	str	r0, [r7, #12]
 8012c18:	60b9      	str	r1, [r7, #8]
 8012c1a:	4613      	mov	r3, r2
 8012c1c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8012c1e:	79fb      	ldrb	r3, [r7, #7]
 8012c20:	2b02      	cmp	r3, #2
 8012c22:	d165      	bne.n	8012cf0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012c24:	68bb      	ldr	r3, [r7, #8]
 8012c26:	4a41      	ldr	r2, [pc, #260]	; (8012d2c <USB_SetTurnaroundTime+0x11c>)
 8012c28:	4293      	cmp	r3, r2
 8012c2a:	d906      	bls.n	8012c3a <USB_SetTurnaroundTime+0x2a>
 8012c2c:	68bb      	ldr	r3, [r7, #8]
 8012c2e:	4a40      	ldr	r2, [pc, #256]	; (8012d30 <USB_SetTurnaroundTime+0x120>)
 8012c30:	4293      	cmp	r3, r2
 8012c32:	d202      	bcs.n	8012c3a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8012c34:	230f      	movs	r3, #15
 8012c36:	617b      	str	r3, [r7, #20]
 8012c38:	e062      	b.n	8012d00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8012c3a:	68bb      	ldr	r3, [r7, #8]
 8012c3c:	4a3c      	ldr	r2, [pc, #240]	; (8012d30 <USB_SetTurnaroundTime+0x120>)
 8012c3e:	4293      	cmp	r3, r2
 8012c40:	d306      	bcc.n	8012c50 <USB_SetTurnaroundTime+0x40>
 8012c42:	68bb      	ldr	r3, [r7, #8]
 8012c44:	4a3b      	ldr	r2, [pc, #236]	; (8012d34 <USB_SetTurnaroundTime+0x124>)
 8012c46:	4293      	cmp	r3, r2
 8012c48:	d202      	bcs.n	8012c50 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8012c4a:	230e      	movs	r3, #14
 8012c4c:	617b      	str	r3, [r7, #20]
 8012c4e:	e057      	b.n	8012d00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8012c50:	68bb      	ldr	r3, [r7, #8]
 8012c52:	4a38      	ldr	r2, [pc, #224]	; (8012d34 <USB_SetTurnaroundTime+0x124>)
 8012c54:	4293      	cmp	r3, r2
 8012c56:	d306      	bcc.n	8012c66 <USB_SetTurnaroundTime+0x56>
 8012c58:	68bb      	ldr	r3, [r7, #8]
 8012c5a:	4a37      	ldr	r2, [pc, #220]	; (8012d38 <USB_SetTurnaroundTime+0x128>)
 8012c5c:	4293      	cmp	r3, r2
 8012c5e:	d202      	bcs.n	8012c66 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8012c60:	230d      	movs	r3, #13
 8012c62:	617b      	str	r3, [r7, #20]
 8012c64:	e04c      	b.n	8012d00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8012c66:	68bb      	ldr	r3, [r7, #8]
 8012c68:	4a33      	ldr	r2, [pc, #204]	; (8012d38 <USB_SetTurnaroundTime+0x128>)
 8012c6a:	4293      	cmp	r3, r2
 8012c6c:	d306      	bcc.n	8012c7c <USB_SetTurnaroundTime+0x6c>
 8012c6e:	68bb      	ldr	r3, [r7, #8]
 8012c70:	4a32      	ldr	r2, [pc, #200]	; (8012d3c <USB_SetTurnaroundTime+0x12c>)
 8012c72:	4293      	cmp	r3, r2
 8012c74:	d802      	bhi.n	8012c7c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8012c76:	230c      	movs	r3, #12
 8012c78:	617b      	str	r3, [r7, #20]
 8012c7a:	e041      	b.n	8012d00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012c7c:	68bb      	ldr	r3, [r7, #8]
 8012c7e:	4a2f      	ldr	r2, [pc, #188]	; (8012d3c <USB_SetTurnaroundTime+0x12c>)
 8012c80:	4293      	cmp	r3, r2
 8012c82:	d906      	bls.n	8012c92 <USB_SetTurnaroundTime+0x82>
 8012c84:	68bb      	ldr	r3, [r7, #8]
 8012c86:	4a2e      	ldr	r2, [pc, #184]	; (8012d40 <USB_SetTurnaroundTime+0x130>)
 8012c88:	4293      	cmp	r3, r2
 8012c8a:	d802      	bhi.n	8012c92 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8012c8c:	230b      	movs	r3, #11
 8012c8e:	617b      	str	r3, [r7, #20]
 8012c90:	e036      	b.n	8012d00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8012c92:	68bb      	ldr	r3, [r7, #8]
 8012c94:	4a2a      	ldr	r2, [pc, #168]	; (8012d40 <USB_SetTurnaroundTime+0x130>)
 8012c96:	4293      	cmp	r3, r2
 8012c98:	d906      	bls.n	8012ca8 <USB_SetTurnaroundTime+0x98>
 8012c9a:	68bb      	ldr	r3, [r7, #8]
 8012c9c:	4a29      	ldr	r2, [pc, #164]	; (8012d44 <USB_SetTurnaroundTime+0x134>)
 8012c9e:	4293      	cmp	r3, r2
 8012ca0:	d802      	bhi.n	8012ca8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8012ca2:	230a      	movs	r3, #10
 8012ca4:	617b      	str	r3, [r7, #20]
 8012ca6:	e02b      	b.n	8012d00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8012ca8:	68bb      	ldr	r3, [r7, #8]
 8012caa:	4a26      	ldr	r2, [pc, #152]	; (8012d44 <USB_SetTurnaroundTime+0x134>)
 8012cac:	4293      	cmp	r3, r2
 8012cae:	d906      	bls.n	8012cbe <USB_SetTurnaroundTime+0xae>
 8012cb0:	68bb      	ldr	r3, [r7, #8]
 8012cb2:	4a25      	ldr	r2, [pc, #148]	; (8012d48 <USB_SetTurnaroundTime+0x138>)
 8012cb4:	4293      	cmp	r3, r2
 8012cb6:	d202      	bcs.n	8012cbe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8012cb8:	2309      	movs	r3, #9
 8012cba:	617b      	str	r3, [r7, #20]
 8012cbc:	e020      	b.n	8012d00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8012cbe:	68bb      	ldr	r3, [r7, #8]
 8012cc0:	4a21      	ldr	r2, [pc, #132]	; (8012d48 <USB_SetTurnaroundTime+0x138>)
 8012cc2:	4293      	cmp	r3, r2
 8012cc4:	d306      	bcc.n	8012cd4 <USB_SetTurnaroundTime+0xc4>
 8012cc6:	68bb      	ldr	r3, [r7, #8]
 8012cc8:	4a20      	ldr	r2, [pc, #128]	; (8012d4c <USB_SetTurnaroundTime+0x13c>)
 8012cca:	4293      	cmp	r3, r2
 8012ccc:	d802      	bhi.n	8012cd4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8012cce:	2308      	movs	r3, #8
 8012cd0:	617b      	str	r3, [r7, #20]
 8012cd2:	e015      	b.n	8012d00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8012cd4:	68bb      	ldr	r3, [r7, #8]
 8012cd6:	4a1d      	ldr	r2, [pc, #116]	; (8012d4c <USB_SetTurnaroundTime+0x13c>)
 8012cd8:	4293      	cmp	r3, r2
 8012cda:	d906      	bls.n	8012cea <USB_SetTurnaroundTime+0xda>
 8012cdc:	68bb      	ldr	r3, [r7, #8]
 8012cde:	4a1c      	ldr	r2, [pc, #112]	; (8012d50 <USB_SetTurnaroundTime+0x140>)
 8012ce0:	4293      	cmp	r3, r2
 8012ce2:	d202      	bcs.n	8012cea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8012ce4:	2307      	movs	r3, #7
 8012ce6:	617b      	str	r3, [r7, #20]
 8012ce8:	e00a      	b.n	8012d00 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8012cea:	2306      	movs	r3, #6
 8012cec:	617b      	str	r3, [r7, #20]
 8012cee:	e007      	b.n	8012d00 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8012cf0:	79fb      	ldrb	r3, [r7, #7]
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d102      	bne.n	8012cfc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8012cf6:	2309      	movs	r3, #9
 8012cf8:	617b      	str	r3, [r7, #20]
 8012cfa:	e001      	b.n	8012d00 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8012cfc:	2309      	movs	r3, #9
 8012cfe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	68db      	ldr	r3, [r3, #12]
 8012d04:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	68da      	ldr	r2, [r3, #12]
 8012d10:	697b      	ldr	r3, [r7, #20]
 8012d12:	029b      	lsls	r3, r3, #10
 8012d14:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8012d18:	431a      	orrs	r2, r3
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012d1e:	2300      	movs	r3, #0
}
 8012d20:	4618      	mov	r0, r3
 8012d22:	371c      	adds	r7, #28
 8012d24:	46bd      	mov	sp, r7
 8012d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d2a:	4770      	bx	lr
 8012d2c:	00d8acbf 	.word	0x00d8acbf
 8012d30:	00e4e1c0 	.word	0x00e4e1c0
 8012d34:	00f42400 	.word	0x00f42400
 8012d38:	01067380 	.word	0x01067380
 8012d3c:	011a499f 	.word	0x011a499f
 8012d40:	01312cff 	.word	0x01312cff
 8012d44:	014ca43f 	.word	0x014ca43f
 8012d48:	016e3600 	.word	0x016e3600
 8012d4c:	01a6ab1f 	.word	0x01a6ab1f
 8012d50:	01e84800 	.word	0x01e84800

08012d54 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012d54:	b480      	push	{r7}
 8012d56:	b083      	sub	sp, #12
 8012d58:	af00      	add	r7, sp, #0
 8012d5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	689b      	ldr	r3, [r3, #8]
 8012d60:	f043 0201 	orr.w	r2, r3, #1
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012d68:	2300      	movs	r3, #0
}
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	370c      	adds	r7, #12
 8012d6e:	46bd      	mov	sp, r7
 8012d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d74:	4770      	bx	lr

08012d76 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012d76:	b480      	push	{r7}
 8012d78:	b083      	sub	sp, #12
 8012d7a:	af00      	add	r7, sp, #0
 8012d7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	689b      	ldr	r3, [r3, #8]
 8012d82:	f023 0201 	bic.w	r2, r3, #1
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012d8a:	2300      	movs	r3, #0
}
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	370c      	adds	r7, #12
 8012d90:	46bd      	mov	sp, r7
 8012d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d96:	4770      	bx	lr

08012d98 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012d98:	b580      	push	{r7, lr}
 8012d9a:	b084      	sub	sp, #16
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	6078      	str	r0, [r7, #4]
 8012da0:	460b      	mov	r3, r1
 8012da2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8012da4:	2300      	movs	r3, #0
 8012da6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	68db      	ldr	r3, [r3, #12]
 8012dac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012db4:	78fb      	ldrb	r3, [r7, #3]
 8012db6:	2b01      	cmp	r3, #1
 8012db8:	d115      	bne.n	8012de6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	68db      	ldr	r3, [r3, #12]
 8012dbe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012dc6:	2001      	movs	r0, #1
 8012dc8:	f7f0 fea6 	bl	8003b18 <HAL_Delay>
      ms++;
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	3301      	adds	r3, #1
 8012dd0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8012dd2:	6878      	ldr	r0, [r7, #4]
 8012dd4:	f001 f93f 	bl	8014056 <USB_GetMode>
 8012dd8:	4603      	mov	r3, r0
 8012dda:	2b01      	cmp	r3, #1
 8012ddc:	d01e      	beq.n	8012e1c <USB_SetCurrentMode+0x84>
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	2b31      	cmp	r3, #49	; 0x31
 8012de2:	d9f0      	bls.n	8012dc6 <USB_SetCurrentMode+0x2e>
 8012de4:	e01a      	b.n	8012e1c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8012de6:	78fb      	ldrb	r3, [r7, #3]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d115      	bne.n	8012e18 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	68db      	ldr	r3, [r3, #12]
 8012df0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012df8:	2001      	movs	r0, #1
 8012dfa:	f7f0 fe8d 	bl	8003b18 <HAL_Delay>
      ms++;
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	3301      	adds	r3, #1
 8012e02:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8012e04:	6878      	ldr	r0, [r7, #4]
 8012e06:	f001 f926 	bl	8014056 <USB_GetMode>
 8012e0a:	4603      	mov	r3, r0
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d005      	beq.n	8012e1c <USB_SetCurrentMode+0x84>
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	2b31      	cmp	r3, #49	; 0x31
 8012e14:	d9f0      	bls.n	8012df8 <USB_SetCurrentMode+0x60>
 8012e16:	e001      	b.n	8012e1c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8012e18:	2301      	movs	r3, #1
 8012e1a:	e005      	b.n	8012e28 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	2b32      	cmp	r3, #50	; 0x32
 8012e20:	d101      	bne.n	8012e26 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8012e22:	2301      	movs	r3, #1
 8012e24:	e000      	b.n	8012e28 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8012e26:	2300      	movs	r3, #0
}
 8012e28:	4618      	mov	r0, r3
 8012e2a:	3710      	adds	r7, #16
 8012e2c:	46bd      	mov	sp, r7
 8012e2e:	bd80      	pop	{r7, pc}

08012e30 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012e30:	b084      	sub	sp, #16
 8012e32:	b580      	push	{r7, lr}
 8012e34:	b086      	sub	sp, #24
 8012e36:	af00      	add	r7, sp, #0
 8012e38:	6078      	str	r0, [r7, #4]
 8012e3a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8012e3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8012e42:	2300      	movs	r3, #0
 8012e44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	613b      	str	r3, [r7, #16]
 8012e4e:	e009      	b.n	8012e64 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8012e50:	687a      	ldr	r2, [r7, #4]
 8012e52:	693b      	ldr	r3, [r7, #16]
 8012e54:	3340      	adds	r3, #64	; 0x40
 8012e56:	009b      	lsls	r3, r3, #2
 8012e58:	4413      	add	r3, r2
 8012e5a:	2200      	movs	r2, #0
 8012e5c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8012e5e:	693b      	ldr	r3, [r7, #16]
 8012e60:	3301      	adds	r3, #1
 8012e62:	613b      	str	r3, [r7, #16]
 8012e64:	693b      	ldr	r3, [r7, #16]
 8012e66:	2b0e      	cmp	r3, #14
 8012e68:	d9f2      	bls.n	8012e50 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8012e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d11c      	bne.n	8012eaa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e76:	685b      	ldr	r3, [r3, #4]
 8012e78:	68fa      	ldr	r2, [r7, #12]
 8012e7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012e7e:	f043 0302 	orr.w	r3, r3, #2
 8012e82:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e88:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	601a      	str	r2, [r3, #0]
 8012ea8:	e005      	b.n	8012eb6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012eae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012ebc:	461a      	mov	r2, r3
 8012ebe:	2300      	movs	r3, #0
 8012ec0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ec8:	4619      	mov	r1, r3
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ed0:	461a      	mov	r2, r3
 8012ed2:	680b      	ldr	r3, [r1, #0]
 8012ed4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ed8:	2b01      	cmp	r3, #1
 8012eda:	d10c      	bne.n	8012ef6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8012edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d104      	bne.n	8012eec <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8012ee2:	2100      	movs	r1, #0
 8012ee4:	6878      	ldr	r0, [r7, #4]
 8012ee6:	f000 f965 	bl	80131b4 <USB_SetDevSpeed>
 8012eea:	e008      	b.n	8012efe <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8012eec:	2101      	movs	r1, #1
 8012eee:	6878      	ldr	r0, [r7, #4]
 8012ef0:	f000 f960 	bl	80131b4 <USB_SetDevSpeed>
 8012ef4:	e003      	b.n	8012efe <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8012ef6:	2103      	movs	r1, #3
 8012ef8:	6878      	ldr	r0, [r7, #4]
 8012efa:	f000 f95b 	bl	80131b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012efe:	2110      	movs	r1, #16
 8012f00:	6878      	ldr	r0, [r7, #4]
 8012f02:	f000 f8f3 	bl	80130ec <USB_FlushTxFifo>
 8012f06:	4603      	mov	r3, r0
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d001      	beq.n	8012f10 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8012f0c:	2301      	movs	r3, #1
 8012f0e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012f10:	6878      	ldr	r0, [r7, #4]
 8012f12:	f000 f91f 	bl	8013154 <USB_FlushRxFifo>
 8012f16:	4603      	mov	r3, r0
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d001      	beq.n	8012f20 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8012f1c:	2301      	movs	r3, #1
 8012f1e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f26:	461a      	mov	r2, r3
 8012f28:	2300      	movs	r3, #0
 8012f2a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f32:	461a      	mov	r2, r3
 8012f34:	2300      	movs	r3, #0
 8012f36:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f3e:	461a      	mov	r2, r3
 8012f40:	2300      	movs	r3, #0
 8012f42:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012f44:	2300      	movs	r3, #0
 8012f46:	613b      	str	r3, [r7, #16]
 8012f48:	e043      	b.n	8012fd2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012f4a:	693b      	ldr	r3, [r7, #16]
 8012f4c:	015a      	lsls	r2, r3, #5
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	4413      	add	r3, r2
 8012f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012f5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012f60:	d118      	bne.n	8012f94 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8012f62:	693b      	ldr	r3, [r7, #16]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d10a      	bne.n	8012f7e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012f68:	693b      	ldr	r3, [r7, #16]
 8012f6a:	015a      	lsls	r2, r3, #5
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	4413      	add	r3, r2
 8012f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f74:	461a      	mov	r2, r3
 8012f76:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012f7a:	6013      	str	r3, [r2, #0]
 8012f7c:	e013      	b.n	8012fa6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012f7e:	693b      	ldr	r3, [r7, #16]
 8012f80:	015a      	lsls	r2, r3, #5
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	4413      	add	r3, r2
 8012f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f8a:	461a      	mov	r2, r3
 8012f8c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012f90:	6013      	str	r3, [r2, #0]
 8012f92:	e008      	b.n	8012fa6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8012f94:	693b      	ldr	r3, [r7, #16]
 8012f96:	015a      	lsls	r2, r3, #5
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	4413      	add	r3, r2
 8012f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012fa0:	461a      	mov	r2, r3
 8012fa2:	2300      	movs	r3, #0
 8012fa4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8012fa6:	693b      	ldr	r3, [r7, #16]
 8012fa8:	015a      	lsls	r2, r3, #5
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	4413      	add	r3, r2
 8012fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012fb2:	461a      	mov	r2, r3
 8012fb4:	2300      	movs	r3, #0
 8012fb6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012fb8:	693b      	ldr	r3, [r7, #16]
 8012fba:	015a      	lsls	r2, r3, #5
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	4413      	add	r3, r2
 8012fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012fc4:	461a      	mov	r2, r3
 8012fc6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012fca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012fcc:	693b      	ldr	r3, [r7, #16]
 8012fce:	3301      	adds	r3, #1
 8012fd0:	613b      	str	r3, [r7, #16]
 8012fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fd4:	693a      	ldr	r2, [r7, #16]
 8012fd6:	429a      	cmp	r2, r3
 8012fd8:	d3b7      	bcc.n	8012f4a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012fda:	2300      	movs	r3, #0
 8012fdc:	613b      	str	r3, [r7, #16]
 8012fde:	e043      	b.n	8013068 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012fe0:	693b      	ldr	r3, [r7, #16]
 8012fe2:	015a      	lsls	r2, r3, #5
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	4413      	add	r3, r2
 8012fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012ff2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012ff6:	d118      	bne.n	801302a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8012ff8:	693b      	ldr	r3, [r7, #16]
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d10a      	bne.n	8013014 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012ffe:	693b      	ldr	r3, [r7, #16]
 8013000:	015a      	lsls	r2, r3, #5
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	4413      	add	r3, r2
 8013006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801300a:	461a      	mov	r2, r3
 801300c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013010:	6013      	str	r3, [r2, #0]
 8013012:	e013      	b.n	801303c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8013014:	693b      	ldr	r3, [r7, #16]
 8013016:	015a      	lsls	r2, r3, #5
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	4413      	add	r3, r2
 801301c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013020:	461a      	mov	r2, r3
 8013022:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013026:	6013      	str	r3, [r2, #0]
 8013028:	e008      	b.n	801303c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801302a:	693b      	ldr	r3, [r7, #16]
 801302c:	015a      	lsls	r2, r3, #5
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	4413      	add	r3, r2
 8013032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013036:	461a      	mov	r2, r3
 8013038:	2300      	movs	r3, #0
 801303a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801303c:	693b      	ldr	r3, [r7, #16]
 801303e:	015a      	lsls	r2, r3, #5
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	4413      	add	r3, r2
 8013044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013048:	461a      	mov	r2, r3
 801304a:	2300      	movs	r3, #0
 801304c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801304e:	693b      	ldr	r3, [r7, #16]
 8013050:	015a      	lsls	r2, r3, #5
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	4413      	add	r3, r2
 8013056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801305a:	461a      	mov	r2, r3
 801305c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013060:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013062:	693b      	ldr	r3, [r7, #16]
 8013064:	3301      	adds	r3, #1
 8013066:	613b      	str	r3, [r7, #16]
 8013068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801306a:	693a      	ldr	r2, [r7, #16]
 801306c:	429a      	cmp	r2, r3
 801306e:	d3b7      	bcc.n	8012fe0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013076:	691b      	ldr	r3, [r3, #16]
 8013078:	68fa      	ldr	r2, [r7, #12]
 801307a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801307e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013082:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	2200      	movs	r2, #0
 8013088:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8013090:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8013092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013094:	2b00      	cmp	r3, #0
 8013096:	d105      	bne.n	80130a4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	699b      	ldr	r3, [r3, #24]
 801309c:	f043 0210 	orr.w	r2, r3, #16
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	699a      	ldr	r2, [r3, #24]
 80130a8:	4b0e      	ldr	r3, [pc, #56]	; (80130e4 <USB_DevInit+0x2b4>)
 80130aa:	4313      	orrs	r3, r2
 80130ac:	687a      	ldr	r2, [r7, #4]
 80130ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80130b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d005      	beq.n	80130c2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	699b      	ldr	r3, [r3, #24]
 80130ba:	f043 0208 	orr.w	r2, r3, #8
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80130c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80130c4:	2b01      	cmp	r3, #1
 80130c6:	d105      	bne.n	80130d4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	699a      	ldr	r2, [r3, #24]
 80130cc:	4b06      	ldr	r3, [pc, #24]	; (80130e8 <USB_DevInit+0x2b8>)
 80130ce:	4313      	orrs	r3, r2
 80130d0:	687a      	ldr	r2, [r7, #4]
 80130d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80130d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80130d6:	4618      	mov	r0, r3
 80130d8:	3718      	adds	r7, #24
 80130da:	46bd      	mov	sp, r7
 80130dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80130e0:	b004      	add	sp, #16
 80130e2:	4770      	bx	lr
 80130e4:	803c3800 	.word	0x803c3800
 80130e8:	40000004 	.word	0x40000004

080130ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80130ec:	b480      	push	{r7}
 80130ee:	b085      	sub	sp, #20
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	6078      	str	r0, [r7, #4]
 80130f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80130f6:	2300      	movs	r3, #0
 80130f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	3301      	adds	r3, #1
 80130fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	4a13      	ldr	r2, [pc, #76]	; (8013150 <USB_FlushTxFifo+0x64>)
 8013104:	4293      	cmp	r3, r2
 8013106:	d901      	bls.n	801310c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8013108:	2303      	movs	r3, #3
 801310a:	e01b      	b.n	8013144 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	691b      	ldr	r3, [r3, #16]
 8013110:	2b00      	cmp	r3, #0
 8013112:	daf2      	bge.n	80130fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8013114:	2300      	movs	r3, #0
 8013116:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013118:	683b      	ldr	r3, [r7, #0]
 801311a:	019b      	lsls	r3, r3, #6
 801311c:	f043 0220 	orr.w	r2, r3, #32
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	3301      	adds	r3, #1
 8013128:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	4a08      	ldr	r2, [pc, #32]	; (8013150 <USB_FlushTxFifo+0x64>)
 801312e:	4293      	cmp	r3, r2
 8013130:	d901      	bls.n	8013136 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8013132:	2303      	movs	r3, #3
 8013134:	e006      	b.n	8013144 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	691b      	ldr	r3, [r3, #16]
 801313a:	f003 0320 	and.w	r3, r3, #32
 801313e:	2b20      	cmp	r3, #32
 8013140:	d0f0      	beq.n	8013124 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8013142:	2300      	movs	r3, #0
}
 8013144:	4618      	mov	r0, r3
 8013146:	3714      	adds	r7, #20
 8013148:	46bd      	mov	sp, r7
 801314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801314e:	4770      	bx	lr
 8013150:	00030d40 	.word	0x00030d40

08013154 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8013154:	b480      	push	{r7}
 8013156:	b085      	sub	sp, #20
 8013158:	af00      	add	r7, sp, #0
 801315a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801315c:	2300      	movs	r3, #0
 801315e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	3301      	adds	r3, #1
 8013164:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	4a11      	ldr	r2, [pc, #68]	; (80131b0 <USB_FlushRxFifo+0x5c>)
 801316a:	4293      	cmp	r3, r2
 801316c:	d901      	bls.n	8013172 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801316e:	2303      	movs	r3, #3
 8013170:	e018      	b.n	80131a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	691b      	ldr	r3, [r3, #16]
 8013176:	2b00      	cmp	r3, #0
 8013178:	daf2      	bge.n	8013160 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801317a:	2300      	movs	r3, #0
 801317c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	2210      	movs	r2, #16
 8013182:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	3301      	adds	r3, #1
 8013188:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	4a08      	ldr	r2, [pc, #32]	; (80131b0 <USB_FlushRxFifo+0x5c>)
 801318e:	4293      	cmp	r3, r2
 8013190:	d901      	bls.n	8013196 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8013192:	2303      	movs	r3, #3
 8013194:	e006      	b.n	80131a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	691b      	ldr	r3, [r3, #16]
 801319a:	f003 0310 	and.w	r3, r3, #16
 801319e:	2b10      	cmp	r3, #16
 80131a0:	d0f0      	beq.n	8013184 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80131a2:	2300      	movs	r3, #0
}
 80131a4:	4618      	mov	r0, r3
 80131a6:	3714      	adds	r7, #20
 80131a8:	46bd      	mov	sp, r7
 80131aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ae:	4770      	bx	lr
 80131b0:	00030d40 	.word	0x00030d40

080131b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80131b4:	b480      	push	{r7}
 80131b6:	b085      	sub	sp, #20
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	6078      	str	r0, [r7, #4]
 80131bc:	460b      	mov	r3, r1
 80131be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80131ca:	681a      	ldr	r2, [r3, #0]
 80131cc:	78fb      	ldrb	r3, [r7, #3]
 80131ce:	68f9      	ldr	r1, [r7, #12]
 80131d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80131d4:	4313      	orrs	r3, r2
 80131d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80131d8:	2300      	movs	r3, #0
}
 80131da:	4618      	mov	r0, r3
 80131dc:	3714      	adds	r7, #20
 80131de:	46bd      	mov	sp, r7
 80131e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e4:	4770      	bx	lr

080131e6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80131e6:	b480      	push	{r7}
 80131e8:	b087      	sub	sp, #28
 80131ea:	af00      	add	r7, sp, #0
 80131ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80131f2:	693b      	ldr	r3, [r7, #16]
 80131f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80131f8:	689b      	ldr	r3, [r3, #8]
 80131fa:	f003 0306 	and.w	r3, r3, #6
 80131fe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	2b00      	cmp	r3, #0
 8013204:	d102      	bne.n	801320c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8013206:	2300      	movs	r3, #0
 8013208:	75fb      	strb	r3, [r7, #23]
 801320a:	e00a      	b.n	8013222 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	2b02      	cmp	r3, #2
 8013210:	d002      	beq.n	8013218 <USB_GetDevSpeed+0x32>
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	2b06      	cmp	r3, #6
 8013216:	d102      	bne.n	801321e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8013218:	2302      	movs	r3, #2
 801321a:	75fb      	strb	r3, [r7, #23]
 801321c:	e001      	b.n	8013222 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801321e:	230f      	movs	r3, #15
 8013220:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8013222:	7dfb      	ldrb	r3, [r7, #23]
}
 8013224:	4618      	mov	r0, r3
 8013226:	371c      	adds	r7, #28
 8013228:	46bd      	mov	sp, r7
 801322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801322e:	4770      	bx	lr

08013230 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013230:	b480      	push	{r7}
 8013232:	b085      	sub	sp, #20
 8013234:	af00      	add	r7, sp, #0
 8013236:	6078      	str	r0, [r7, #4]
 8013238:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801323e:	683b      	ldr	r3, [r7, #0]
 8013240:	781b      	ldrb	r3, [r3, #0]
 8013242:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013244:	683b      	ldr	r3, [r7, #0]
 8013246:	785b      	ldrb	r3, [r3, #1]
 8013248:	2b01      	cmp	r3, #1
 801324a:	d139      	bne.n	80132c0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013252:	69da      	ldr	r2, [r3, #28]
 8013254:	683b      	ldr	r3, [r7, #0]
 8013256:	781b      	ldrb	r3, [r3, #0]
 8013258:	f003 030f 	and.w	r3, r3, #15
 801325c:	2101      	movs	r1, #1
 801325e:	fa01 f303 	lsl.w	r3, r1, r3
 8013262:	b29b      	uxth	r3, r3
 8013264:	68f9      	ldr	r1, [r7, #12]
 8013266:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801326a:	4313      	orrs	r3, r2
 801326c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801326e:	68bb      	ldr	r3, [r7, #8]
 8013270:	015a      	lsls	r2, r3, #5
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	4413      	add	r3, r2
 8013276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013280:	2b00      	cmp	r3, #0
 8013282:	d153      	bne.n	801332c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013284:	68bb      	ldr	r3, [r7, #8]
 8013286:	015a      	lsls	r2, r3, #5
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	4413      	add	r3, r2
 801328c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013290:	681a      	ldr	r2, [r3, #0]
 8013292:	683b      	ldr	r3, [r7, #0]
 8013294:	689b      	ldr	r3, [r3, #8]
 8013296:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801329a:	683b      	ldr	r3, [r7, #0]
 801329c:	791b      	ldrb	r3, [r3, #4]
 801329e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80132a0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80132a2:	68bb      	ldr	r3, [r7, #8]
 80132a4:	059b      	lsls	r3, r3, #22
 80132a6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80132a8:	431a      	orrs	r2, r3
 80132aa:	68bb      	ldr	r3, [r7, #8]
 80132ac:	0159      	lsls	r1, r3, #5
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	440b      	add	r3, r1
 80132b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132b6:	4619      	mov	r1, r3
 80132b8:	4b20      	ldr	r3, [pc, #128]	; (801333c <USB_ActivateEndpoint+0x10c>)
 80132ba:	4313      	orrs	r3, r2
 80132bc:	600b      	str	r3, [r1, #0]
 80132be:	e035      	b.n	801332c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80132c6:	69da      	ldr	r2, [r3, #28]
 80132c8:	683b      	ldr	r3, [r7, #0]
 80132ca:	781b      	ldrb	r3, [r3, #0]
 80132cc:	f003 030f 	and.w	r3, r3, #15
 80132d0:	2101      	movs	r1, #1
 80132d2:	fa01 f303 	lsl.w	r3, r1, r3
 80132d6:	041b      	lsls	r3, r3, #16
 80132d8:	68f9      	ldr	r1, [r7, #12]
 80132da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80132de:	4313      	orrs	r3, r2
 80132e0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80132e2:	68bb      	ldr	r3, [r7, #8]
 80132e4:	015a      	lsls	r2, r3, #5
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	4413      	add	r3, r2
 80132ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d119      	bne.n	801332c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80132f8:	68bb      	ldr	r3, [r7, #8]
 80132fa:	015a      	lsls	r2, r3, #5
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	4413      	add	r3, r2
 8013300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013304:	681a      	ldr	r2, [r3, #0]
 8013306:	683b      	ldr	r3, [r7, #0]
 8013308:	689b      	ldr	r3, [r3, #8]
 801330a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801330e:	683b      	ldr	r3, [r7, #0]
 8013310:	791b      	ldrb	r3, [r3, #4]
 8013312:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013314:	430b      	orrs	r3, r1
 8013316:	431a      	orrs	r2, r3
 8013318:	68bb      	ldr	r3, [r7, #8]
 801331a:	0159      	lsls	r1, r3, #5
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	440b      	add	r3, r1
 8013320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013324:	4619      	mov	r1, r3
 8013326:	4b05      	ldr	r3, [pc, #20]	; (801333c <USB_ActivateEndpoint+0x10c>)
 8013328:	4313      	orrs	r3, r2
 801332a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801332c:	2300      	movs	r3, #0
}
 801332e:	4618      	mov	r0, r3
 8013330:	3714      	adds	r7, #20
 8013332:	46bd      	mov	sp, r7
 8013334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013338:	4770      	bx	lr
 801333a:	bf00      	nop
 801333c:	10008000 	.word	0x10008000

08013340 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013340:	b480      	push	{r7}
 8013342:	b085      	sub	sp, #20
 8013344:	af00      	add	r7, sp, #0
 8013346:	6078      	str	r0, [r7, #4]
 8013348:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801334e:	683b      	ldr	r3, [r7, #0]
 8013350:	781b      	ldrb	r3, [r3, #0]
 8013352:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8013354:	683b      	ldr	r3, [r7, #0]
 8013356:	785b      	ldrb	r3, [r3, #1]
 8013358:	2b01      	cmp	r3, #1
 801335a:	d161      	bne.n	8013420 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801335c:	68bb      	ldr	r3, [r7, #8]
 801335e:	015a      	lsls	r2, r3, #5
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	4413      	add	r3, r2
 8013364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801336e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013372:	d11f      	bne.n	80133b4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8013374:	68bb      	ldr	r3, [r7, #8]
 8013376:	015a      	lsls	r2, r3, #5
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	4413      	add	r3, r2
 801337c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	68ba      	ldr	r2, [r7, #8]
 8013384:	0151      	lsls	r1, r2, #5
 8013386:	68fa      	ldr	r2, [r7, #12]
 8013388:	440a      	add	r2, r1
 801338a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801338e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013392:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8013394:	68bb      	ldr	r3, [r7, #8]
 8013396:	015a      	lsls	r2, r3, #5
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	4413      	add	r3, r2
 801339c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	68ba      	ldr	r2, [r7, #8]
 80133a4:	0151      	lsls	r1, r2, #5
 80133a6:	68fa      	ldr	r2, [r7, #12]
 80133a8:	440a      	add	r2, r1
 80133aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80133ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80133b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80133ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80133bc:	683b      	ldr	r3, [r7, #0]
 80133be:	781b      	ldrb	r3, [r3, #0]
 80133c0:	f003 030f 	and.w	r3, r3, #15
 80133c4:	2101      	movs	r1, #1
 80133c6:	fa01 f303 	lsl.w	r3, r1, r3
 80133ca:	b29b      	uxth	r3, r3
 80133cc:	43db      	mvns	r3, r3
 80133ce:	68f9      	ldr	r1, [r7, #12]
 80133d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80133d4:	4013      	ands	r3, r2
 80133d6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80133d8:	68fb      	ldr	r3, [r7, #12]
 80133da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80133de:	69da      	ldr	r2, [r3, #28]
 80133e0:	683b      	ldr	r3, [r7, #0]
 80133e2:	781b      	ldrb	r3, [r3, #0]
 80133e4:	f003 030f 	and.w	r3, r3, #15
 80133e8:	2101      	movs	r1, #1
 80133ea:	fa01 f303 	lsl.w	r3, r1, r3
 80133ee:	b29b      	uxth	r3, r3
 80133f0:	43db      	mvns	r3, r3
 80133f2:	68f9      	ldr	r1, [r7, #12]
 80133f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80133f8:	4013      	ands	r3, r2
 80133fa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80133fc:	68bb      	ldr	r3, [r7, #8]
 80133fe:	015a      	lsls	r2, r3, #5
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	4413      	add	r3, r2
 8013404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013408:	681a      	ldr	r2, [r3, #0]
 801340a:	68bb      	ldr	r3, [r7, #8]
 801340c:	0159      	lsls	r1, r3, #5
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	440b      	add	r3, r1
 8013412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013416:	4619      	mov	r1, r3
 8013418:	4b35      	ldr	r3, [pc, #212]	; (80134f0 <USB_DeactivateEndpoint+0x1b0>)
 801341a:	4013      	ands	r3, r2
 801341c:	600b      	str	r3, [r1, #0]
 801341e:	e060      	b.n	80134e2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013420:	68bb      	ldr	r3, [r7, #8]
 8013422:	015a      	lsls	r2, r3, #5
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	4413      	add	r3, r2
 8013428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013432:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013436:	d11f      	bne.n	8013478 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8013438:	68bb      	ldr	r3, [r7, #8]
 801343a:	015a      	lsls	r2, r3, #5
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	4413      	add	r3, r2
 8013440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	68ba      	ldr	r2, [r7, #8]
 8013448:	0151      	lsls	r1, r2, #5
 801344a:	68fa      	ldr	r2, [r7, #12]
 801344c:	440a      	add	r2, r1
 801344e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013452:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013456:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8013458:	68bb      	ldr	r3, [r7, #8]
 801345a:	015a      	lsls	r2, r3, #5
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	4413      	add	r3, r2
 8013460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	68ba      	ldr	r2, [r7, #8]
 8013468:	0151      	lsls	r1, r2, #5
 801346a:	68fa      	ldr	r2, [r7, #12]
 801346c:	440a      	add	r2, r1
 801346e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013472:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013476:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801347e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013480:	683b      	ldr	r3, [r7, #0]
 8013482:	781b      	ldrb	r3, [r3, #0]
 8013484:	f003 030f 	and.w	r3, r3, #15
 8013488:	2101      	movs	r1, #1
 801348a:	fa01 f303 	lsl.w	r3, r1, r3
 801348e:	041b      	lsls	r3, r3, #16
 8013490:	43db      	mvns	r3, r3
 8013492:	68f9      	ldr	r1, [r7, #12]
 8013494:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013498:	4013      	ands	r3, r2
 801349a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80134a2:	69da      	ldr	r2, [r3, #28]
 80134a4:	683b      	ldr	r3, [r7, #0]
 80134a6:	781b      	ldrb	r3, [r3, #0]
 80134a8:	f003 030f 	and.w	r3, r3, #15
 80134ac:	2101      	movs	r1, #1
 80134ae:	fa01 f303 	lsl.w	r3, r1, r3
 80134b2:	041b      	lsls	r3, r3, #16
 80134b4:	43db      	mvns	r3, r3
 80134b6:	68f9      	ldr	r1, [r7, #12]
 80134b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80134bc:	4013      	ands	r3, r2
 80134be:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80134c0:	68bb      	ldr	r3, [r7, #8]
 80134c2:	015a      	lsls	r2, r3, #5
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	4413      	add	r3, r2
 80134c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80134cc:	681a      	ldr	r2, [r3, #0]
 80134ce:	68bb      	ldr	r3, [r7, #8]
 80134d0:	0159      	lsls	r1, r3, #5
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	440b      	add	r3, r1
 80134d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80134da:	4619      	mov	r1, r3
 80134dc:	4b05      	ldr	r3, [pc, #20]	; (80134f4 <USB_DeactivateEndpoint+0x1b4>)
 80134de:	4013      	ands	r3, r2
 80134e0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80134e2:	2300      	movs	r3, #0
}
 80134e4:	4618      	mov	r0, r3
 80134e6:	3714      	adds	r7, #20
 80134e8:	46bd      	mov	sp, r7
 80134ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ee:	4770      	bx	lr
 80134f0:	ec337800 	.word	0xec337800
 80134f4:	eff37800 	.word	0xeff37800

080134f8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b08a      	sub	sp, #40	; 0x28
 80134fc:	af02      	add	r7, sp, #8
 80134fe:	60f8      	str	r0, [r7, #12]
 8013500:	60b9      	str	r1, [r7, #8]
 8013502:	4613      	mov	r3, r2
 8013504:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801350a:	68bb      	ldr	r3, [r7, #8]
 801350c:	781b      	ldrb	r3, [r3, #0]
 801350e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013510:	68bb      	ldr	r3, [r7, #8]
 8013512:	785b      	ldrb	r3, [r3, #1]
 8013514:	2b01      	cmp	r3, #1
 8013516:	f040 8181 	bne.w	801381c <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801351a:	68bb      	ldr	r3, [r7, #8]
 801351c:	691b      	ldr	r3, [r3, #16]
 801351e:	2b00      	cmp	r3, #0
 8013520:	d132      	bne.n	8013588 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013522:	69bb      	ldr	r3, [r7, #24]
 8013524:	015a      	lsls	r2, r3, #5
 8013526:	69fb      	ldr	r3, [r7, #28]
 8013528:	4413      	add	r3, r2
 801352a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801352e:	691a      	ldr	r2, [r3, #16]
 8013530:	69bb      	ldr	r3, [r7, #24]
 8013532:	0159      	lsls	r1, r3, #5
 8013534:	69fb      	ldr	r3, [r7, #28]
 8013536:	440b      	add	r3, r1
 8013538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801353c:	4619      	mov	r1, r3
 801353e:	4ba5      	ldr	r3, [pc, #660]	; (80137d4 <USB_EPStartXfer+0x2dc>)
 8013540:	4013      	ands	r3, r2
 8013542:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013544:	69bb      	ldr	r3, [r7, #24]
 8013546:	015a      	lsls	r2, r3, #5
 8013548:	69fb      	ldr	r3, [r7, #28]
 801354a:	4413      	add	r3, r2
 801354c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013550:	691b      	ldr	r3, [r3, #16]
 8013552:	69ba      	ldr	r2, [r7, #24]
 8013554:	0151      	lsls	r1, r2, #5
 8013556:	69fa      	ldr	r2, [r7, #28]
 8013558:	440a      	add	r2, r1
 801355a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801355e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013562:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013564:	69bb      	ldr	r3, [r7, #24]
 8013566:	015a      	lsls	r2, r3, #5
 8013568:	69fb      	ldr	r3, [r7, #28]
 801356a:	4413      	add	r3, r2
 801356c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013570:	691a      	ldr	r2, [r3, #16]
 8013572:	69bb      	ldr	r3, [r7, #24]
 8013574:	0159      	lsls	r1, r3, #5
 8013576:	69fb      	ldr	r3, [r7, #28]
 8013578:	440b      	add	r3, r1
 801357a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801357e:	4619      	mov	r1, r3
 8013580:	4b95      	ldr	r3, [pc, #596]	; (80137d8 <USB_EPStartXfer+0x2e0>)
 8013582:	4013      	ands	r3, r2
 8013584:	610b      	str	r3, [r1, #16]
 8013586:	e092      	b.n	80136ae <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013588:	69bb      	ldr	r3, [r7, #24]
 801358a:	015a      	lsls	r2, r3, #5
 801358c:	69fb      	ldr	r3, [r7, #28]
 801358e:	4413      	add	r3, r2
 8013590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013594:	691a      	ldr	r2, [r3, #16]
 8013596:	69bb      	ldr	r3, [r7, #24]
 8013598:	0159      	lsls	r1, r3, #5
 801359a:	69fb      	ldr	r3, [r7, #28]
 801359c:	440b      	add	r3, r1
 801359e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135a2:	4619      	mov	r1, r3
 80135a4:	4b8c      	ldr	r3, [pc, #560]	; (80137d8 <USB_EPStartXfer+0x2e0>)
 80135a6:	4013      	ands	r3, r2
 80135a8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80135aa:	69bb      	ldr	r3, [r7, #24]
 80135ac:	015a      	lsls	r2, r3, #5
 80135ae:	69fb      	ldr	r3, [r7, #28]
 80135b0:	4413      	add	r3, r2
 80135b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135b6:	691a      	ldr	r2, [r3, #16]
 80135b8:	69bb      	ldr	r3, [r7, #24]
 80135ba:	0159      	lsls	r1, r3, #5
 80135bc:	69fb      	ldr	r3, [r7, #28]
 80135be:	440b      	add	r3, r1
 80135c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135c4:	4619      	mov	r1, r3
 80135c6:	4b83      	ldr	r3, [pc, #524]	; (80137d4 <USB_EPStartXfer+0x2dc>)
 80135c8:	4013      	ands	r3, r2
 80135ca:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80135cc:	69bb      	ldr	r3, [r7, #24]
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d11a      	bne.n	8013608 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80135d2:	68bb      	ldr	r3, [r7, #8]
 80135d4:	691a      	ldr	r2, [r3, #16]
 80135d6:	68bb      	ldr	r3, [r7, #8]
 80135d8:	689b      	ldr	r3, [r3, #8]
 80135da:	429a      	cmp	r2, r3
 80135dc:	d903      	bls.n	80135e6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80135de:	68bb      	ldr	r3, [r7, #8]
 80135e0:	689a      	ldr	r2, [r3, #8]
 80135e2:	68bb      	ldr	r3, [r7, #8]
 80135e4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80135e6:	69bb      	ldr	r3, [r7, #24]
 80135e8:	015a      	lsls	r2, r3, #5
 80135ea:	69fb      	ldr	r3, [r7, #28]
 80135ec:	4413      	add	r3, r2
 80135ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135f2:	691b      	ldr	r3, [r3, #16]
 80135f4:	69ba      	ldr	r2, [r7, #24]
 80135f6:	0151      	lsls	r1, r2, #5
 80135f8:	69fa      	ldr	r2, [r7, #28]
 80135fa:	440a      	add	r2, r1
 80135fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013600:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013604:	6113      	str	r3, [r2, #16]
 8013606:	e01b      	b.n	8013640 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013608:	69bb      	ldr	r3, [r7, #24]
 801360a:	015a      	lsls	r2, r3, #5
 801360c:	69fb      	ldr	r3, [r7, #28]
 801360e:	4413      	add	r3, r2
 8013610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013614:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8013616:	68bb      	ldr	r3, [r7, #8]
 8013618:	6919      	ldr	r1, [r3, #16]
 801361a:	68bb      	ldr	r3, [r7, #8]
 801361c:	689b      	ldr	r3, [r3, #8]
 801361e:	440b      	add	r3, r1
 8013620:	1e59      	subs	r1, r3, #1
 8013622:	68bb      	ldr	r3, [r7, #8]
 8013624:	689b      	ldr	r3, [r3, #8]
 8013626:	fbb1 f3f3 	udiv	r3, r1, r3
 801362a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801362c:	4b6b      	ldr	r3, [pc, #428]	; (80137dc <USB_EPStartXfer+0x2e4>)
 801362e:	400b      	ands	r3, r1
 8013630:	69b9      	ldr	r1, [r7, #24]
 8013632:	0148      	lsls	r0, r1, #5
 8013634:	69f9      	ldr	r1, [r7, #28]
 8013636:	4401      	add	r1, r0
 8013638:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801363c:	4313      	orrs	r3, r2
 801363e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013640:	69bb      	ldr	r3, [r7, #24]
 8013642:	015a      	lsls	r2, r3, #5
 8013644:	69fb      	ldr	r3, [r7, #28]
 8013646:	4413      	add	r3, r2
 8013648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801364c:	691a      	ldr	r2, [r3, #16]
 801364e:	68bb      	ldr	r3, [r7, #8]
 8013650:	691b      	ldr	r3, [r3, #16]
 8013652:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013656:	69b9      	ldr	r1, [r7, #24]
 8013658:	0148      	lsls	r0, r1, #5
 801365a:	69f9      	ldr	r1, [r7, #28]
 801365c:	4401      	add	r1, r0
 801365e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013662:	4313      	orrs	r3, r2
 8013664:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8013666:	68bb      	ldr	r3, [r7, #8]
 8013668:	791b      	ldrb	r3, [r3, #4]
 801366a:	2b01      	cmp	r3, #1
 801366c:	d11f      	bne.n	80136ae <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801366e:	69bb      	ldr	r3, [r7, #24]
 8013670:	015a      	lsls	r2, r3, #5
 8013672:	69fb      	ldr	r3, [r7, #28]
 8013674:	4413      	add	r3, r2
 8013676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801367a:	691b      	ldr	r3, [r3, #16]
 801367c:	69ba      	ldr	r2, [r7, #24]
 801367e:	0151      	lsls	r1, r2, #5
 8013680:	69fa      	ldr	r2, [r7, #28]
 8013682:	440a      	add	r2, r1
 8013684:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013688:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801368c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801368e:	69bb      	ldr	r3, [r7, #24]
 8013690:	015a      	lsls	r2, r3, #5
 8013692:	69fb      	ldr	r3, [r7, #28]
 8013694:	4413      	add	r3, r2
 8013696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801369a:	691b      	ldr	r3, [r3, #16]
 801369c:	69ba      	ldr	r2, [r7, #24]
 801369e:	0151      	lsls	r1, r2, #5
 80136a0:	69fa      	ldr	r2, [r7, #28]
 80136a2:	440a      	add	r2, r1
 80136a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80136a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80136ac:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80136ae:	79fb      	ldrb	r3, [r7, #7]
 80136b0:	2b01      	cmp	r3, #1
 80136b2:	d14b      	bne.n	801374c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80136b4:	68bb      	ldr	r3, [r7, #8]
 80136b6:	69db      	ldr	r3, [r3, #28]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d009      	beq.n	80136d0 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80136bc:	69bb      	ldr	r3, [r7, #24]
 80136be:	015a      	lsls	r2, r3, #5
 80136c0:	69fb      	ldr	r3, [r7, #28]
 80136c2:	4413      	add	r3, r2
 80136c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136c8:	461a      	mov	r2, r3
 80136ca:	68bb      	ldr	r3, [r7, #8]
 80136cc:	69db      	ldr	r3, [r3, #28]
 80136ce:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80136d0:	68bb      	ldr	r3, [r7, #8]
 80136d2:	791b      	ldrb	r3, [r3, #4]
 80136d4:	2b01      	cmp	r3, #1
 80136d6:	d128      	bne.n	801372a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80136d8:	69fb      	ldr	r3, [r7, #28]
 80136da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80136de:	689b      	ldr	r3, [r3, #8]
 80136e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d110      	bne.n	801370a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80136e8:	69bb      	ldr	r3, [r7, #24]
 80136ea:	015a      	lsls	r2, r3, #5
 80136ec:	69fb      	ldr	r3, [r7, #28]
 80136ee:	4413      	add	r3, r2
 80136f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	69ba      	ldr	r2, [r7, #24]
 80136f8:	0151      	lsls	r1, r2, #5
 80136fa:	69fa      	ldr	r2, [r7, #28]
 80136fc:	440a      	add	r2, r1
 80136fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013702:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013706:	6013      	str	r3, [r2, #0]
 8013708:	e00f      	b.n	801372a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801370a:	69bb      	ldr	r3, [r7, #24]
 801370c:	015a      	lsls	r2, r3, #5
 801370e:	69fb      	ldr	r3, [r7, #28]
 8013710:	4413      	add	r3, r2
 8013712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	69ba      	ldr	r2, [r7, #24]
 801371a:	0151      	lsls	r1, r2, #5
 801371c:	69fa      	ldr	r2, [r7, #28]
 801371e:	440a      	add	r2, r1
 8013720:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013728:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801372a:	69bb      	ldr	r3, [r7, #24]
 801372c:	015a      	lsls	r2, r3, #5
 801372e:	69fb      	ldr	r3, [r7, #28]
 8013730:	4413      	add	r3, r2
 8013732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	69ba      	ldr	r2, [r7, #24]
 801373a:	0151      	lsls	r1, r2, #5
 801373c:	69fa      	ldr	r2, [r7, #28]
 801373e:	440a      	add	r2, r1
 8013740:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013744:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013748:	6013      	str	r3, [r2, #0]
 801374a:	e16a      	b.n	8013a22 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801374c:	69bb      	ldr	r3, [r7, #24]
 801374e:	015a      	lsls	r2, r3, #5
 8013750:	69fb      	ldr	r3, [r7, #28]
 8013752:	4413      	add	r3, r2
 8013754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	69ba      	ldr	r2, [r7, #24]
 801375c:	0151      	lsls	r1, r2, #5
 801375e:	69fa      	ldr	r2, [r7, #28]
 8013760:	440a      	add	r2, r1
 8013762:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013766:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801376a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801376c:	68bb      	ldr	r3, [r7, #8]
 801376e:	791b      	ldrb	r3, [r3, #4]
 8013770:	2b01      	cmp	r3, #1
 8013772:	d015      	beq.n	80137a0 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8013774:	68bb      	ldr	r3, [r7, #8]
 8013776:	691b      	ldr	r3, [r3, #16]
 8013778:	2b00      	cmp	r3, #0
 801377a:	f000 8152 	beq.w	8013a22 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801377e:	69fb      	ldr	r3, [r7, #28]
 8013780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013784:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013786:	68bb      	ldr	r3, [r7, #8]
 8013788:	781b      	ldrb	r3, [r3, #0]
 801378a:	f003 030f 	and.w	r3, r3, #15
 801378e:	2101      	movs	r1, #1
 8013790:	fa01 f303 	lsl.w	r3, r1, r3
 8013794:	69f9      	ldr	r1, [r7, #28]
 8013796:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801379a:	4313      	orrs	r3, r2
 801379c:	634b      	str	r3, [r1, #52]	; 0x34
 801379e:	e140      	b.n	8013a22 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80137a0:	69fb      	ldr	r3, [r7, #28]
 80137a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80137a6:	689b      	ldr	r3, [r3, #8]
 80137a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d117      	bne.n	80137e0 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80137b0:	69bb      	ldr	r3, [r7, #24]
 80137b2:	015a      	lsls	r2, r3, #5
 80137b4:	69fb      	ldr	r3, [r7, #28]
 80137b6:	4413      	add	r3, r2
 80137b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	69ba      	ldr	r2, [r7, #24]
 80137c0:	0151      	lsls	r1, r2, #5
 80137c2:	69fa      	ldr	r2, [r7, #28]
 80137c4:	440a      	add	r2, r1
 80137c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80137ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80137ce:	6013      	str	r3, [r2, #0]
 80137d0:	e016      	b.n	8013800 <USB_EPStartXfer+0x308>
 80137d2:	bf00      	nop
 80137d4:	e007ffff 	.word	0xe007ffff
 80137d8:	fff80000 	.word	0xfff80000
 80137dc:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80137e0:	69bb      	ldr	r3, [r7, #24]
 80137e2:	015a      	lsls	r2, r3, #5
 80137e4:	69fb      	ldr	r3, [r7, #28]
 80137e6:	4413      	add	r3, r2
 80137e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	69ba      	ldr	r2, [r7, #24]
 80137f0:	0151      	lsls	r1, r2, #5
 80137f2:	69fa      	ldr	r2, [r7, #28]
 80137f4:	440a      	add	r2, r1
 80137f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80137fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80137fe:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8013800:	68bb      	ldr	r3, [r7, #8]
 8013802:	68d9      	ldr	r1, [r3, #12]
 8013804:	68bb      	ldr	r3, [r7, #8]
 8013806:	781a      	ldrb	r2, [r3, #0]
 8013808:	68bb      	ldr	r3, [r7, #8]
 801380a:	691b      	ldr	r3, [r3, #16]
 801380c:	b298      	uxth	r0, r3
 801380e:	79fb      	ldrb	r3, [r7, #7]
 8013810:	9300      	str	r3, [sp, #0]
 8013812:	4603      	mov	r3, r0
 8013814:	68f8      	ldr	r0, [r7, #12]
 8013816:	f000 f9b9 	bl	8013b8c <USB_WritePacket>
 801381a:	e102      	b.n	8013a22 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801381c:	69bb      	ldr	r3, [r7, #24]
 801381e:	015a      	lsls	r2, r3, #5
 8013820:	69fb      	ldr	r3, [r7, #28]
 8013822:	4413      	add	r3, r2
 8013824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013828:	691a      	ldr	r2, [r3, #16]
 801382a:	69bb      	ldr	r3, [r7, #24]
 801382c:	0159      	lsls	r1, r3, #5
 801382e:	69fb      	ldr	r3, [r7, #28]
 8013830:	440b      	add	r3, r1
 8013832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013836:	4619      	mov	r1, r3
 8013838:	4b7c      	ldr	r3, [pc, #496]	; (8013a2c <USB_EPStartXfer+0x534>)
 801383a:	4013      	ands	r3, r2
 801383c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801383e:	69bb      	ldr	r3, [r7, #24]
 8013840:	015a      	lsls	r2, r3, #5
 8013842:	69fb      	ldr	r3, [r7, #28]
 8013844:	4413      	add	r3, r2
 8013846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801384a:	691a      	ldr	r2, [r3, #16]
 801384c:	69bb      	ldr	r3, [r7, #24]
 801384e:	0159      	lsls	r1, r3, #5
 8013850:	69fb      	ldr	r3, [r7, #28]
 8013852:	440b      	add	r3, r1
 8013854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013858:	4619      	mov	r1, r3
 801385a:	4b75      	ldr	r3, [pc, #468]	; (8013a30 <USB_EPStartXfer+0x538>)
 801385c:	4013      	ands	r3, r2
 801385e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8013860:	69bb      	ldr	r3, [r7, #24]
 8013862:	2b00      	cmp	r3, #0
 8013864:	d12f      	bne.n	80138c6 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8013866:	68bb      	ldr	r3, [r7, #8]
 8013868:	691b      	ldr	r3, [r3, #16]
 801386a:	2b00      	cmp	r3, #0
 801386c:	d003      	beq.n	8013876 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 801386e:	68bb      	ldr	r3, [r7, #8]
 8013870:	689a      	ldr	r2, [r3, #8]
 8013872:	68bb      	ldr	r3, [r7, #8]
 8013874:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8013876:	68bb      	ldr	r3, [r7, #8]
 8013878:	689a      	ldr	r2, [r3, #8]
 801387a:	68bb      	ldr	r3, [r7, #8]
 801387c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801387e:	69bb      	ldr	r3, [r7, #24]
 8013880:	015a      	lsls	r2, r3, #5
 8013882:	69fb      	ldr	r3, [r7, #28]
 8013884:	4413      	add	r3, r2
 8013886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801388a:	691a      	ldr	r2, [r3, #16]
 801388c:	68bb      	ldr	r3, [r7, #8]
 801388e:	6a1b      	ldr	r3, [r3, #32]
 8013890:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013894:	69b9      	ldr	r1, [r7, #24]
 8013896:	0148      	lsls	r0, r1, #5
 8013898:	69f9      	ldr	r1, [r7, #28]
 801389a:	4401      	add	r1, r0
 801389c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80138a0:	4313      	orrs	r3, r2
 80138a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80138a4:	69bb      	ldr	r3, [r7, #24]
 80138a6:	015a      	lsls	r2, r3, #5
 80138a8:	69fb      	ldr	r3, [r7, #28]
 80138aa:	4413      	add	r3, r2
 80138ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138b0:	691b      	ldr	r3, [r3, #16]
 80138b2:	69ba      	ldr	r2, [r7, #24]
 80138b4:	0151      	lsls	r1, r2, #5
 80138b6:	69fa      	ldr	r2, [r7, #28]
 80138b8:	440a      	add	r2, r1
 80138ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80138be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80138c2:	6113      	str	r3, [r2, #16]
 80138c4:	e05f      	b.n	8013986 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80138c6:	68bb      	ldr	r3, [r7, #8]
 80138c8:	691b      	ldr	r3, [r3, #16]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d123      	bne.n	8013916 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80138ce:	69bb      	ldr	r3, [r7, #24]
 80138d0:	015a      	lsls	r2, r3, #5
 80138d2:	69fb      	ldr	r3, [r7, #28]
 80138d4:	4413      	add	r3, r2
 80138d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138da:	691a      	ldr	r2, [r3, #16]
 80138dc:	68bb      	ldr	r3, [r7, #8]
 80138de:	689b      	ldr	r3, [r3, #8]
 80138e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80138e4:	69b9      	ldr	r1, [r7, #24]
 80138e6:	0148      	lsls	r0, r1, #5
 80138e8:	69f9      	ldr	r1, [r7, #28]
 80138ea:	4401      	add	r1, r0
 80138ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80138f0:	4313      	orrs	r3, r2
 80138f2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80138f4:	69bb      	ldr	r3, [r7, #24]
 80138f6:	015a      	lsls	r2, r3, #5
 80138f8:	69fb      	ldr	r3, [r7, #28]
 80138fa:	4413      	add	r3, r2
 80138fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013900:	691b      	ldr	r3, [r3, #16]
 8013902:	69ba      	ldr	r2, [r7, #24]
 8013904:	0151      	lsls	r1, r2, #5
 8013906:	69fa      	ldr	r2, [r7, #28]
 8013908:	440a      	add	r2, r1
 801390a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801390e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013912:	6113      	str	r3, [r2, #16]
 8013914:	e037      	b.n	8013986 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8013916:	68bb      	ldr	r3, [r7, #8]
 8013918:	691a      	ldr	r2, [r3, #16]
 801391a:	68bb      	ldr	r3, [r7, #8]
 801391c:	689b      	ldr	r3, [r3, #8]
 801391e:	4413      	add	r3, r2
 8013920:	1e5a      	subs	r2, r3, #1
 8013922:	68bb      	ldr	r3, [r7, #8]
 8013924:	689b      	ldr	r3, [r3, #8]
 8013926:	fbb2 f3f3 	udiv	r3, r2, r3
 801392a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 801392c:	68bb      	ldr	r3, [r7, #8]
 801392e:	689b      	ldr	r3, [r3, #8]
 8013930:	8afa      	ldrh	r2, [r7, #22]
 8013932:	fb03 f202 	mul.w	r2, r3, r2
 8013936:	68bb      	ldr	r3, [r7, #8]
 8013938:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801393a:	69bb      	ldr	r3, [r7, #24]
 801393c:	015a      	lsls	r2, r3, #5
 801393e:	69fb      	ldr	r3, [r7, #28]
 8013940:	4413      	add	r3, r2
 8013942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013946:	691a      	ldr	r2, [r3, #16]
 8013948:	8afb      	ldrh	r3, [r7, #22]
 801394a:	04d9      	lsls	r1, r3, #19
 801394c:	4b39      	ldr	r3, [pc, #228]	; (8013a34 <USB_EPStartXfer+0x53c>)
 801394e:	400b      	ands	r3, r1
 8013950:	69b9      	ldr	r1, [r7, #24]
 8013952:	0148      	lsls	r0, r1, #5
 8013954:	69f9      	ldr	r1, [r7, #28]
 8013956:	4401      	add	r1, r0
 8013958:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801395c:	4313      	orrs	r3, r2
 801395e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8013960:	69bb      	ldr	r3, [r7, #24]
 8013962:	015a      	lsls	r2, r3, #5
 8013964:	69fb      	ldr	r3, [r7, #28]
 8013966:	4413      	add	r3, r2
 8013968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801396c:	691a      	ldr	r2, [r3, #16]
 801396e:	68bb      	ldr	r3, [r7, #8]
 8013970:	6a1b      	ldr	r3, [r3, #32]
 8013972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013976:	69b9      	ldr	r1, [r7, #24]
 8013978:	0148      	lsls	r0, r1, #5
 801397a:	69f9      	ldr	r1, [r7, #28]
 801397c:	4401      	add	r1, r0
 801397e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013982:	4313      	orrs	r3, r2
 8013984:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8013986:	79fb      	ldrb	r3, [r7, #7]
 8013988:	2b01      	cmp	r3, #1
 801398a:	d10d      	bne.n	80139a8 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801398c:	68bb      	ldr	r3, [r7, #8]
 801398e:	68db      	ldr	r3, [r3, #12]
 8013990:	2b00      	cmp	r3, #0
 8013992:	d009      	beq.n	80139a8 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013994:	68bb      	ldr	r3, [r7, #8]
 8013996:	68d9      	ldr	r1, [r3, #12]
 8013998:	69bb      	ldr	r3, [r7, #24]
 801399a:	015a      	lsls	r2, r3, #5
 801399c:	69fb      	ldr	r3, [r7, #28]
 801399e:	4413      	add	r3, r2
 80139a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80139a4:	460a      	mov	r2, r1
 80139a6:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80139a8:	68bb      	ldr	r3, [r7, #8]
 80139aa:	791b      	ldrb	r3, [r3, #4]
 80139ac:	2b01      	cmp	r3, #1
 80139ae:	d128      	bne.n	8013a02 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80139b0:	69fb      	ldr	r3, [r7, #28]
 80139b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80139b6:	689b      	ldr	r3, [r3, #8]
 80139b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d110      	bne.n	80139e2 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80139c0:	69bb      	ldr	r3, [r7, #24]
 80139c2:	015a      	lsls	r2, r3, #5
 80139c4:	69fb      	ldr	r3, [r7, #28]
 80139c6:	4413      	add	r3, r2
 80139c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	69ba      	ldr	r2, [r7, #24]
 80139d0:	0151      	lsls	r1, r2, #5
 80139d2:	69fa      	ldr	r2, [r7, #28]
 80139d4:	440a      	add	r2, r1
 80139d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80139da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80139de:	6013      	str	r3, [r2, #0]
 80139e0:	e00f      	b.n	8013a02 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80139e2:	69bb      	ldr	r3, [r7, #24]
 80139e4:	015a      	lsls	r2, r3, #5
 80139e6:	69fb      	ldr	r3, [r7, #28]
 80139e8:	4413      	add	r3, r2
 80139ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	69ba      	ldr	r2, [r7, #24]
 80139f2:	0151      	lsls	r1, r2, #5
 80139f4:	69fa      	ldr	r2, [r7, #28]
 80139f6:	440a      	add	r2, r1
 80139f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80139fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013a00:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013a02:	69bb      	ldr	r3, [r7, #24]
 8013a04:	015a      	lsls	r2, r3, #5
 8013a06:	69fb      	ldr	r3, [r7, #28]
 8013a08:	4413      	add	r3, r2
 8013a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	69ba      	ldr	r2, [r7, #24]
 8013a12:	0151      	lsls	r1, r2, #5
 8013a14:	69fa      	ldr	r2, [r7, #28]
 8013a16:	440a      	add	r2, r1
 8013a18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013a1c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013a20:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013a22:	2300      	movs	r3, #0
}
 8013a24:	4618      	mov	r0, r3
 8013a26:	3720      	adds	r7, #32
 8013a28:	46bd      	mov	sp, r7
 8013a2a:	bd80      	pop	{r7, pc}
 8013a2c:	fff80000 	.word	0xfff80000
 8013a30:	e007ffff 	.word	0xe007ffff
 8013a34:	1ff80000 	.word	0x1ff80000

08013a38 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013a38:	b480      	push	{r7}
 8013a3a:	b087      	sub	sp, #28
 8013a3c:	af00      	add	r7, sp, #0
 8013a3e:	6078      	str	r0, [r7, #4]
 8013a40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013a42:	2300      	movs	r3, #0
 8013a44:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8013a46:	2300      	movs	r3, #0
 8013a48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013a4e:	683b      	ldr	r3, [r7, #0]
 8013a50:	785b      	ldrb	r3, [r3, #1]
 8013a52:	2b01      	cmp	r3, #1
 8013a54:	d14a      	bne.n	8013aec <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013a56:	683b      	ldr	r3, [r7, #0]
 8013a58:	781b      	ldrb	r3, [r3, #0]
 8013a5a:	015a      	lsls	r2, r3, #5
 8013a5c:	693b      	ldr	r3, [r7, #16]
 8013a5e:	4413      	add	r3, r2
 8013a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013a6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013a6e:	f040 8086 	bne.w	8013b7e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8013a72:	683b      	ldr	r3, [r7, #0]
 8013a74:	781b      	ldrb	r3, [r3, #0]
 8013a76:	015a      	lsls	r2, r3, #5
 8013a78:	693b      	ldr	r3, [r7, #16]
 8013a7a:	4413      	add	r3, r2
 8013a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	683a      	ldr	r2, [r7, #0]
 8013a84:	7812      	ldrb	r2, [r2, #0]
 8013a86:	0151      	lsls	r1, r2, #5
 8013a88:	693a      	ldr	r2, [r7, #16]
 8013a8a:	440a      	add	r2, r1
 8013a8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013a90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013a94:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8013a96:	683b      	ldr	r3, [r7, #0]
 8013a98:	781b      	ldrb	r3, [r3, #0]
 8013a9a:	015a      	lsls	r2, r3, #5
 8013a9c:	693b      	ldr	r3, [r7, #16]
 8013a9e:	4413      	add	r3, r2
 8013aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013aa4:	681b      	ldr	r3, [r3, #0]
 8013aa6:	683a      	ldr	r2, [r7, #0]
 8013aa8:	7812      	ldrb	r2, [r2, #0]
 8013aaa:	0151      	lsls	r1, r2, #5
 8013aac:	693a      	ldr	r2, [r7, #16]
 8013aae:	440a      	add	r2, r1
 8013ab0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013ab4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013ab8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	3301      	adds	r3, #1
 8013abe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	f242 7210 	movw	r2, #10000	; 0x2710
 8013ac6:	4293      	cmp	r3, r2
 8013ac8:	d902      	bls.n	8013ad0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8013aca:	2301      	movs	r3, #1
 8013acc:	75fb      	strb	r3, [r7, #23]
          break;
 8013ace:	e056      	b.n	8013b7e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8013ad0:	683b      	ldr	r3, [r7, #0]
 8013ad2:	781b      	ldrb	r3, [r3, #0]
 8013ad4:	015a      	lsls	r2, r3, #5
 8013ad6:	693b      	ldr	r3, [r7, #16]
 8013ad8:	4413      	add	r3, r2
 8013ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013ae4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013ae8:	d0e7      	beq.n	8013aba <USB_EPStopXfer+0x82>
 8013aea:	e048      	b.n	8013b7e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013aec:	683b      	ldr	r3, [r7, #0]
 8013aee:	781b      	ldrb	r3, [r3, #0]
 8013af0:	015a      	lsls	r2, r3, #5
 8013af2:	693b      	ldr	r3, [r7, #16]
 8013af4:	4413      	add	r3, r2
 8013af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013afa:	681b      	ldr	r3, [r3, #0]
 8013afc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013b00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013b04:	d13b      	bne.n	8013b7e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8013b06:	683b      	ldr	r3, [r7, #0]
 8013b08:	781b      	ldrb	r3, [r3, #0]
 8013b0a:	015a      	lsls	r2, r3, #5
 8013b0c:	693b      	ldr	r3, [r7, #16]
 8013b0e:	4413      	add	r3, r2
 8013b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	683a      	ldr	r2, [r7, #0]
 8013b18:	7812      	ldrb	r2, [r2, #0]
 8013b1a:	0151      	lsls	r1, r2, #5
 8013b1c:	693a      	ldr	r2, [r7, #16]
 8013b1e:	440a      	add	r2, r1
 8013b20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013b24:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013b28:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8013b2a:	683b      	ldr	r3, [r7, #0]
 8013b2c:	781b      	ldrb	r3, [r3, #0]
 8013b2e:	015a      	lsls	r2, r3, #5
 8013b30:	693b      	ldr	r3, [r7, #16]
 8013b32:	4413      	add	r3, r2
 8013b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	683a      	ldr	r2, [r7, #0]
 8013b3c:	7812      	ldrb	r2, [r2, #0]
 8013b3e:	0151      	lsls	r1, r2, #5
 8013b40:	693a      	ldr	r2, [r7, #16]
 8013b42:	440a      	add	r2, r1
 8013b44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013b48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013b4c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	3301      	adds	r3, #1
 8013b52:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	f242 7210 	movw	r2, #10000	; 0x2710
 8013b5a:	4293      	cmp	r3, r2
 8013b5c:	d902      	bls.n	8013b64 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8013b5e:	2301      	movs	r3, #1
 8013b60:	75fb      	strb	r3, [r7, #23]
          break;
 8013b62:	e00c      	b.n	8013b7e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8013b64:	683b      	ldr	r3, [r7, #0]
 8013b66:	781b      	ldrb	r3, [r3, #0]
 8013b68:	015a      	lsls	r2, r3, #5
 8013b6a:	693b      	ldr	r3, [r7, #16]
 8013b6c:	4413      	add	r3, r2
 8013b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b72:	681b      	ldr	r3, [r3, #0]
 8013b74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013b78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013b7c:	d0e7      	beq.n	8013b4e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8013b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b80:	4618      	mov	r0, r3
 8013b82:	371c      	adds	r7, #28
 8013b84:	46bd      	mov	sp, r7
 8013b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b8a:	4770      	bx	lr

08013b8c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8013b8c:	b480      	push	{r7}
 8013b8e:	b089      	sub	sp, #36	; 0x24
 8013b90:	af00      	add	r7, sp, #0
 8013b92:	60f8      	str	r0, [r7, #12]
 8013b94:	60b9      	str	r1, [r7, #8]
 8013b96:	4611      	mov	r1, r2
 8013b98:	461a      	mov	r2, r3
 8013b9a:	460b      	mov	r3, r1
 8013b9c:	71fb      	strb	r3, [r7, #7]
 8013b9e:	4613      	mov	r3, r2
 8013ba0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8013ba6:	68bb      	ldr	r3, [r7, #8]
 8013ba8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8013baa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d123      	bne.n	8013bfa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8013bb2:	88bb      	ldrh	r3, [r7, #4]
 8013bb4:	3303      	adds	r3, #3
 8013bb6:	089b      	lsrs	r3, r3, #2
 8013bb8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8013bba:	2300      	movs	r3, #0
 8013bbc:	61bb      	str	r3, [r7, #24]
 8013bbe:	e018      	b.n	8013bf2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013bc0:	79fb      	ldrb	r3, [r7, #7]
 8013bc2:	031a      	lsls	r2, r3, #12
 8013bc4:	697b      	ldr	r3, [r7, #20]
 8013bc6:	4413      	add	r3, r2
 8013bc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013bcc:	461a      	mov	r2, r3
 8013bce:	69fb      	ldr	r3, [r7, #28]
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8013bd4:	69fb      	ldr	r3, [r7, #28]
 8013bd6:	3301      	adds	r3, #1
 8013bd8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013bda:	69fb      	ldr	r3, [r7, #28]
 8013bdc:	3301      	adds	r3, #1
 8013bde:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013be0:	69fb      	ldr	r3, [r7, #28]
 8013be2:	3301      	adds	r3, #1
 8013be4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013be6:	69fb      	ldr	r3, [r7, #28]
 8013be8:	3301      	adds	r3, #1
 8013bea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8013bec:	69bb      	ldr	r3, [r7, #24]
 8013bee:	3301      	adds	r3, #1
 8013bf0:	61bb      	str	r3, [r7, #24]
 8013bf2:	69ba      	ldr	r2, [r7, #24]
 8013bf4:	693b      	ldr	r3, [r7, #16]
 8013bf6:	429a      	cmp	r2, r3
 8013bf8:	d3e2      	bcc.n	8013bc0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8013bfa:	2300      	movs	r3, #0
}
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	3724      	adds	r7, #36	; 0x24
 8013c00:	46bd      	mov	sp, r7
 8013c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c06:	4770      	bx	lr

08013c08 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013c08:	b480      	push	{r7}
 8013c0a:	b08b      	sub	sp, #44	; 0x2c
 8013c0c:	af00      	add	r7, sp, #0
 8013c0e:	60f8      	str	r0, [r7, #12]
 8013c10:	60b9      	str	r1, [r7, #8]
 8013c12:	4613      	mov	r3, r2
 8013c14:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8013c1a:	68bb      	ldr	r3, [r7, #8]
 8013c1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8013c1e:	88fb      	ldrh	r3, [r7, #6]
 8013c20:	089b      	lsrs	r3, r3, #2
 8013c22:	b29b      	uxth	r3, r3
 8013c24:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8013c26:	88fb      	ldrh	r3, [r7, #6]
 8013c28:	f003 0303 	and.w	r3, r3, #3
 8013c2c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8013c2e:	2300      	movs	r3, #0
 8013c30:	623b      	str	r3, [r7, #32]
 8013c32:	e014      	b.n	8013c5e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013c34:	69bb      	ldr	r3, [r7, #24]
 8013c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013c3a:	681a      	ldr	r2, [r3, #0]
 8013c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c3e:	601a      	str	r2, [r3, #0]
    pDest++;
 8013c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c42:	3301      	adds	r3, #1
 8013c44:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c48:	3301      	adds	r3, #1
 8013c4a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c4e:	3301      	adds	r3, #1
 8013c50:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c54:	3301      	adds	r3, #1
 8013c56:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8013c58:	6a3b      	ldr	r3, [r7, #32]
 8013c5a:	3301      	adds	r3, #1
 8013c5c:	623b      	str	r3, [r7, #32]
 8013c5e:	6a3a      	ldr	r2, [r7, #32]
 8013c60:	697b      	ldr	r3, [r7, #20]
 8013c62:	429a      	cmp	r2, r3
 8013c64:	d3e6      	bcc.n	8013c34 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8013c66:	8bfb      	ldrh	r3, [r7, #30]
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d01e      	beq.n	8013caa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013c6c:	2300      	movs	r3, #0
 8013c6e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013c70:	69bb      	ldr	r3, [r7, #24]
 8013c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013c76:	461a      	mov	r2, r3
 8013c78:	f107 0310 	add.w	r3, r7, #16
 8013c7c:	6812      	ldr	r2, [r2, #0]
 8013c7e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013c80:	693a      	ldr	r2, [r7, #16]
 8013c82:	6a3b      	ldr	r3, [r7, #32]
 8013c84:	b2db      	uxtb	r3, r3
 8013c86:	00db      	lsls	r3, r3, #3
 8013c88:	fa22 f303 	lsr.w	r3, r2, r3
 8013c8c:	b2da      	uxtb	r2, r3
 8013c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c90:	701a      	strb	r2, [r3, #0]
      i++;
 8013c92:	6a3b      	ldr	r3, [r7, #32]
 8013c94:	3301      	adds	r3, #1
 8013c96:	623b      	str	r3, [r7, #32]
      pDest++;
 8013c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c9a:	3301      	adds	r3, #1
 8013c9c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8013c9e:	8bfb      	ldrh	r3, [r7, #30]
 8013ca0:	3b01      	subs	r3, #1
 8013ca2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8013ca4:	8bfb      	ldrh	r3, [r7, #30]
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d1ea      	bne.n	8013c80 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8013caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013cac:	4618      	mov	r0, r3
 8013cae:	372c      	adds	r7, #44	; 0x2c
 8013cb0:	46bd      	mov	sp, r7
 8013cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb6:	4770      	bx	lr

08013cb8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013cb8:	b480      	push	{r7}
 8013cba:	b085      	sub	sp, #20
 8013cbc:	af00      	add	r7, sp, #0
 8013cbe:	6078      	str	r0, [r7, #4]
 8013cc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013cc6:	683b      	ldr	r3, [r7, #0]
 8013cc8:	781b      	ldrb	r3, [r3, #0]
 8013cca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013ccc:	683b      	ldr	r3, [r7, #0]
 8013cce:	785b      	ldrb	r3, [r3, #1]
 8013cd0:	2b01      	cmp	r3, #1
 8013cd2:	d12c      	bne.n	8013d2e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013cd4:	68bb      	ldr	r3, [r7, #8]
 8013cd6:	015a      	lsls	r2, r3, #5
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	4413      	add	r3, r2
 8013cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	db12      	blt.n	8013d0c <USB_EPSetStall+0x54>
 8013ce6:	68bb      	ldr	r3, [r7, #8]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d00f      	beq.n	8013d0c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013cec:	68bb      	ldr	r3, [r7, #8]
 8013cee:	015a      	lsls	r2, r3, #5
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	4413      	add	r3, r2
 8013cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	68ba      	ldr	r2, [r7, #8]
 8013cfc:	0151      	lsls	r1, r2, #5
 8013cfe:	68fa      	ldr	r2, [r7, #12]
 8013d00:	440a      	add	r2, r1
 8013d02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013d0a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013d0c:	68bb      	ldr	r3, [r7, #8]
 8013d0e:	015a      	lsls	r2, r3, #5
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	4413      	add	r3, r2
 8013d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d18:	681b      	ldr	r3, [r3, #0]
 8013d1a:	68ba      	ldr	r2, [r7, #8]
 8013d1c:	0151      	lsls	r1, r2, #5
 8013d1e:	68fa      	ldr	r2, [r7, #12]
 8013d20:	440a      	add	r2, r1
 8013d22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013d2a:	6013      	str	r3, [r2, #0]
 8013d2c:	e02b      	b.n	8013d86 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013d2e:	68bb      	ldr	r3, [r7, #8]
 8013d30:	015a      	lsls	r2, r3, #5
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	4413      	add	r3, r2
 8013d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	db12      	blt.n	8013d66 <USB_EPSetStall+0xae>
 8013d40:	68bb      	ldr	r3, [r7, #8]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d00f      	beq.n	8013d66 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013d46:	68bb      	ldr	r3, [r7, #8]
 8013d48:	015a      	lsls	r2, r3, #5
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	4413      	add	r3, r2
 8013d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	68ba      	ldr	r2, [r7, #8]
 8013d56:	0151      	lsls	r1, r2, #5
 8013d58:	68fa      	ldr	r2, [r7, #12]
 8013d5a:	440a      	add	r2, r1
 8013d5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013d60:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013d64:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013d66:	68bb      	ldr	r3, [r7, #8]
 8013d68:	015a      	lsls	r2, r3, #5
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	4413      	add	r3, r2
 8013d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d72:	681b      	ldr	r3, [r3, #0]
 8013d74:	68ba      	ldr	r2, [r7, #8]
 8013d76:	0151      	lsls	r1, r2, #5
 8013d78:	68fa      	ldr	r2, [r7, #12]
 8013d7a:	440a      	add	r2, r1
 8013d7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013d80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013d84:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013d86:	2300      	movs	r3, #0
}
 8013d88:	4618      	mov	r0, r3
 8013d8a:	3714      	adds	r7, #20
 8013d8c:	46bd      	mov	sp, r7
 8013d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d92:	4770      	bx	lr

08013d94 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013d94:	b480      	push	{r7}
 8013d96:	b085      	sub	sp, #20
 8013d98:	af00      	add	r7, sp, #0
 8013d9a:	6078      	str	r0, [r7, #4]
 8013d9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013da2:	683b      	ldr	r3, [r7, #0]
 8013da4:	781b      	ldrb	r3, [r3, #0]
 8013da6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013da8:	683b      	ldr	r3, [r7, #0]
 8013daa:	785b      	ldrb	r3, [r3, #1]
 8013dac:	2b01      	cmp	r3, #1
 8013dae:	d128      	bne.n	8013e02 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013db0:	68bb      	ldr	r3, [r7, #8]
 8013db2:	015a      	lsls	r2, r3, #5
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	4413      	add	r3, r2
 8013db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	68ba      	ldr	r2, [r7, #8]
 8013dc0:	0151      	lsls	r1, r2, #5
 8013dc2:	68fa      	ldr	r2, [r7, #12]
 8013dc4:	440a      	add	r2, r1
 8013dc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013dca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013dce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013dd0:	683b      	ldr	r3, [r7, #0]
 8013dd2:	791b      	ldrb	r3, [r3, #4]
 8013dd4:	2b03      	cmp	r3, #3
 8013dd6:	d003      	beq.n	8013de0 <USB_EPClearStall+0x4c>
 8013dd8:	683b      	ldr	r3, [r7, #0]
 8013dda:	791b      	ldrb	r3, [r3, #4]
 8013ddc:	2b02      	cmp	r3, #2
 8013dde:	d138      	bne.n	8013e52 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013de0:	68bb      	ldr	r3, [r7, #8]
 8013de2:	015a      	lsls	r2, r3, #5
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	4413      	add	r3, r2
 8013de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013dec:	681b      	ldr	r3, [r3, #0]
 8013dee:	68ba      	ldr	r2, [r7, #8]
 8013df0:	0151      	lsls	r1, r2, #5
 8013df2:	68fa      	ldr	r2, [r7, #12]
 8013df4:	440a      	add	r2, r1
 8013df6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013dfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013dfe:	6013      	str	r3, [r2, #0]
 8013e00:	e027      	b.n	8013e52 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8013e02:	68bb      	ldr	r3, [r7, #8]
 8013e04:	015a      	lsls	r2, r3, #5
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	4413      	add	r3, r2
 8013e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	68ba      	ldr	r2, [r7, #8]
 8013e12:	0151      	lsls	r1, r2, #5
 8013e14:	68fa      	ldr	r2, [r7, #12]
 8013e16:	440a      	add	r2, r1
 8013e18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013e1c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013e20:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013e22:	683b      	ldr	r3, [r7, #0]
 8013e24:	791b      	ldrb	r3, [r3, #4]
 8013e26:	2b03      	cmp	r3, #3
 8013e28:	d003      	beq.n	8013e32 <USB_EPClearStall+0x9e>
 8013e2a:	683b      	ldr	r3, [r7, #0]
 8013e2c:	791b      	ldrb	r3, [r3, #4]
 8013e2e:	2b02      	cmp	r3, #2
 8013e30:	d10f      	bne.n	8013e52 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013e32:	68bb      	ldr	r3, [r7, #8]
 8013e34:	015a      	lsls	r2, r3, #5
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	4413      	add	r3, r2
 8013e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	68ba      	ldr	r2, [r7, #8]
 8013e42:	0151      	lsls	r1, r2, #5
 8013e44:	68fa      	ldr	r2, [r7, #12]
 8013e46:	440a      	add	r2, r1
 8013e48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013e50:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8013e52:	2300      	movs	r3, #0
}
 8013e54:	4618      	mov	r0, r3
 8013e56:	3714      	adds	r7, #20
 8013e58:	46bd      	mov	sp, r7
 8013e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e5e:	4770      	bx	lr

08013e60 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8013e60:	b480      	push	{r7}
 8013e62:	b085      	sub	sp, #20
 8013e64:	af00      	add	r7, sp, #0
 8013e66:	6078      	str	r0, [r7, #4]
 8013e68:	460b      	mov	r3, r1
 8013e6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	68fa      	ldr	r2, [r7, #12]
 8013e7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013e7e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8013e82:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e8a:	681a      	ldr	r2, [r3, #0]
 8013e8c:	78fb      	ldrb	r3, [r7, #3]
 8013e8e:	011b      	lsls	r3, r3, #4
 8013e90:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8013e94:	68f9      	ldr	r1, [r7, #12]
 8013e96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013e9a:	4313      	orrs	r3, r2
 8013e9c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8013e9e:	2300      	movs	r3, #0
}
 8013ea0:	4618      	mov	r0, r3
 8013ea2:	3714      	adds	r7, #20
 8013ea4:	46bd      	mov	sp, r7
 8013ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eaa:	4770      	bx	lr

08013eac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013eac:	b480      	push	{r7}
 8013eae:	b085      	sub	sp, #20
 8013eb0:	af00      	add	r7, sp, #0
 8013eb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	68fa      	ldr	r2, [r7, #12]
 8013ec2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013ec6:	f023 0303 	bic.w	r3, r3, #3
 8013eca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ed2:	685b      	ldr	r3, [r3, #4]
 8013ed4:	68fa      	ldr	r2, [r7, #12]
 8013ed6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013eda:	f023 0302 	bic.w	r3, r3, #2
 8013ede:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013ee0:	2300      	movs	r3, #0
}
 8013ee2:	4618      	mov	r0, r3
 8013ee4:	3714      	adds	r7, #20
 8013ee6:	46bd      	mov	sp, r7
 8013ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eec:	4770      	bx	lr

08013eee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013eee:	b480      	push	{r7}
 8013ef0:	b085      	sub	sp, #20
 8013ef2:	af00      	add	r7, sp, #0
 8013ef4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	68fa      	ldr	r2, [r7, #12]
 8013f04:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013f08:	f023 0303 	bic.w	r3, r3, #3
 8013f0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f14:	685b      	ldr	r3, [r3, #4]
 8013f16:	68fa      	ldr	r2, [r7, #12]
 8013f18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013f1c:	f043 0302 	orr.w	r3, r3, #2
 8013f20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013f22:	2300      	movs	r3, #0
}
 8013f24:	4618      	mov	r0, r3
 8013f26:	3714      	adds	r7, #20
 8013f28:	46bd      	mov	sp, r7
 8013f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f2e:	4770      	bx	lr

08013f30 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8013f30:	b480      	push	{r7}
 8013f32:	b085      	sub	sp, #20
 8013f34:	af00      	add	r7, sp, #0
 8013f36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	695b      	ldr	r3, [r3, #20]
 8013f3c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	699b      	ldr	r3, [r3, #24]
 8013f42:	68fa      	ldr	r2, [r7, #12]
 8013f44:	4013      	ands	r3, r2
 8013f46:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013f48:	68fb      	ldr	r3, [r7, #12]
}
 8013f4a:	4618      	mov	r0, r3
 8013f4c:	3714      	adds	r7, #20
 8013f4e:	46bd      	mov	sp, r7
 8013f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f54:	4770      	bx	lr

08013f56 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013f56:	b480      	push	{r7}
 8013f58:	b085      	sub	sp, #20
 8013f5a:	af00      	add	r7, sp, #0
 8013f5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f68:	699b      	ldr	r3, [r3, #24]
 8013f6a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013f6c:	68fb      	ldr	r3, [r7, #12]
 8013f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f72:	69db      	ldr	r3, [r3, #28]
 8013f74:	68ba      	ldr	r2, [r7, #8]
 8013f76:	4013      	ands	r3, r2
 8013f78:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8013f7a:	68bb      	ldr	r3, [r7, #8]
 8013f7c:	0c1b      	lsrs	r3, r3, #16
}
 8013f7e:	4618      	mov	r0, r3
 8013f80:	3714      	adds	r7, #20
 8013f82:	46bd      	mov	sp, r7
 8013f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f88:	4770      	bx	lr

08013f8a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013f8a:	b480      	push	{r7}
 8013f8c:	b085      	sub	sp, #20
 8013f8e:	af00      	add	r7, sp, #0
 8013f90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f9c:	699b      	ldr	r3, [r3, #24]
 8013f9e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013fa6:	69db      	ldr	r3, [r3, #28]
 8013fa8:	68ba      	ldr	r2, [r7, #8]
 8013faa:	4013      	ands	r3, r2
 8013fac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8013fae:	68bb      	ldr	r3, [r7, #8]
 8013fb0:	b29b      	uxth	r3, r3
}
 8013fb2:	4618      	mov	r0, r3
 8013fb4:	3714      	adds	r7, #20
 8013fb6:	46bd      	mov	sp, r7
 8013fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fbc:	4770      	bx	lr

08013fbe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013fbe:	b480      	push	{r7}
 8013fc0:	b085      	sub	sp, #20
 8013fc2:	af00      	add	r7, sp, #0
 8013fc4:	6078      	str	r0, [r7, #4]
 8013fc6:	460b      	mov	r3, r1
 8013fc8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8013fce:	78fb      	ldrb	r3, [r7, #3]
 8013fd0:	015a      	lsls	r2, r3, #5
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	4413      	add	r3, r2
 8013fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013fda:	689b      	ldr	r3, [r3, #8]
 8013fdc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013fe4:	695b      	ldr	r3, [r3, #20]
 8013fe6:	68ba      	ldr	r2, [r7, #8]
 8013fe8:	4013      	ands	r3, r2
 8013fea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013fec:	68bb      	ldr	r3, [r7, #8]
}
 8013fee:	4618      	mov	r0, r3
 8013ff0:	3714      	adds	r7, #20
 8013ff2:	46bd      	mov	sp, r7
 8013ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff8:	4770      	bx	lr

08013ffa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013ffa:	b480      	push	{r7}
 8013ffc:	b087      	sub	sp, #28
 8013ffe:	af00      	add	r7, sp, #0
 8014000:	6078      	str	r0, [r7, #4]
 8014002:	460b      	mov	r3, r1
 8014004:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801400a:	697b      	ldr	r3, [r7, #20]
 801400c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014010:	691b      	ldr	r3, [r3, #16]
 8014012:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8014014:	697b      	ldr	r3, [r7, #20]
 8014016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801401a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801401c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801401e:	78fb      	ldrb	r3, [r7, #3]
 8014020:	f003 030f 	and.w	r3, r3, #15
 8014024:	68fa      	ldr	r2, [r7, #12]
 8014026:	fa22 f303 	lsr.w	r3, r2, r3
 801402a:	01db      	lsls	r3, r3, #7
 801402c:	b2db      	uxtb	r3, r3
 801402e:	693a      	ldr	r2, [r7, #16]
 8014030:	4313      	orrs	r3, r2
 8014032:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8014034:	78fb      	ldrb	r3, [r7, #3]
 8014036:	015a      	lsls	r2, r3, #5
 8014038:	697b      	ldr	r3, [r7, #20]
 801403a:	4413      	add	r3, r2
 801403c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014040:	689b      	ldr	r3, [r3, #8]
 8014042:	693a      	ldr	r2, [r7, #16]
 8014044:	4013      	ands	r3, r2
 8014046:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014048:	68bb      	ldr	r3, [r7, #8]
}
 801404a:	4618      	mov	r0, r3
 801404c:	371c      	adds	r7, #28
 801404e:	46bd      	mov	sp, r7
 8014050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014054:	4770      	bx	lr

08014056 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8014056:	b480      	push	{r7}
 8014058:	b083      	sub	sp, #12
 801405a:	af00      	add	r7, sp, #0
 801405c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	695b      	ldr	r3, [r3, #20]
 8014062:	f003 0301 	and.w	r3, r3, #1
}
 8014066:	4618      	mov	r0, r3
 8014068:	370c      	adds	r7, #12
 801406a:	46bd      	mov	sp, r7
 801406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014070:	4770      	bx	lr
	...

08014074 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8014074:	b480      	push	{r7}
 8014076:	b085      	sub	sp, #20
 8014078:	af00      	add	r7, sp, #0
 801407a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014086:	681a      	ldr	r2, [r3, #0]
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801408e:	4619      	mov	r1, r3
 8014090:	4b09      	ldr	r3, [pc, #36]	; (80140b8 <USB_ActivateSetup+0x44>)
 8014092:	4013      	ands	r3, r2
 8014094:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801409c:	685b      	ldr	r3, [r3, #4]
 801409e:	68fa      	ldr	r2, [r7, #12]
 80140a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80140a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80140a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80140aa:	2300      	movs	r3, #0
}
 80140ac:	4618      	mov	r0, r3
 80140ae:	3714      	adds	r7, #20
 80140b0:	46bd      	mov	sp, r7
 80140b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b6:	4770      	bx	lr
 80140b8:	fffff800 	.word	0xfffff800

080140bc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80140bc:	b480      	push	{r7}
 80140be:	b087      	sub	sp, #28
 80140c0:	af00      	add	r7, sp, #0
 80140c2:	60f8      	str	r0, [r7, #12]
 80140c4:	460b      	mov	r3, r1
 80140c6:	607a      	str	r2, [r7, #4]
 80140c8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	333c      	adds	r3, #60	; 0x3c
 80140d2:	3304      	adds	r3, #4
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80140d8:	693b      	ldr	r3, [r7, #16]
 80140da:	4a26      	ldr	r2, [pc, #152]	; (8014174 <USB_EP0_OutStart+0xb8>)
 80140dc:	4293      	cmp	r3, r2
 80140de:	d90a      	bls.n	80140f6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80140e0:	697b      	ldr	r3, [r7, #20]
 80140e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140e6:	681b      	ldr	r3, [r3, #0]
 80140e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80140ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80140f0:	d101      	bne.n	80140f6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80140f2:	2300      	movs	r3, #0
 80140f4:	e037      	b.n	8014166 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80140f6:	697b      	ldr	r3, [r7, #20]
 80140f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140fc:	461a      	mov	r2, r3
 80140fe:	2300      	movs	r3, #0
 8014100:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014102:	697b      	ldr	r3, [r7, #20]
 8014104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014108:	691b      	ldr	r3, [r3, #16]
 801410a:	697a      	ldr	r2, [r7, #20]
 801410c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014110:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014114:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8014116:	697b      	ldr	r3, [r7, #20]
 8014118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801411c:	691b      	ldr	r3, [r3, #16]
 801411e:	697a      	ldr	r2, [r7, #20]
 8014120:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014124:	f043 0318 	orr.w	r3, r3, #24
 8014128:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801412a:	697b      	ldr	r3, [r7, #20]
 801412c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014130:	691b      	ldr	r3, [r3, #16]
 8014132:	697a      	ldr	r2, [r7, #20]
 8014134:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014138:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801413c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801413e:	7afb      	ldrb	r3, [r7, #11]
 8014140:	2b01      	cmp	r3, #1
 8014142:	d10f      	bne.n	8014164 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8014144:	697b      	ldr	r3, [r7, #20]
 8014146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801414a:	461a      	mov	r2, r3
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8014150:	697b      	ldr	r3, [r7, #20]
 8014152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	697a      	ldr	r2, [r7, #20]
 801415a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801415e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8014162:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014164:	2300      	movs	r3, #0
}
 8014166:	4618      	mov	r0, r3
 8014168:	371c      	adds	r7, #28
 801416a:	46bd      	mov	sp, r7
 801416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014170:	4770      	bx	lr
 8014172:	bf00      	nop
 8014174:	4f54300a 	.word	0x4f54300a

08014178 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8014178:	b480      	push	{r7}
 801417a:	b085      	sub	sp, #20
 801417c:	af00      	add	r7, sp, #0
 801417e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014180:	2300      	movs	r3, #0
 8014182:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	3301      	adds	r3, #1
 8014188:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	4a13      	ldr	r2, [pc, #76]	; (80141dc <USB_CoreReset+0x64>)
 801418e:	4293      	cmp	r3, r2
 8014190:	d901      	bls.n	8014196 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8014192:	2303      	movs	r3, #3
 8014194:	e01b      	b.n	80141ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	691b      	ldr	r3, [r3, #16]
 801419a:	2b00      	cmp	r3, #0
 801419c:	daf2      	bge.n	8014184 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801419e:	2300      	movs	r3, #0
 80141a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	691b      	ldr	r3, [r3, #16]
 80141a6:	f043 0201 	orr.w	r2, r3, #1
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	3301      	adds	r3, #1
 80141b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	4a09      	ldr	r2, [pc, #36]	; (80141dc <USB_CoreReset+0x64>)
 80141b8:	4293      	cmp	r3, r2
 80141ba:	d901      	bls.n	80141c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80141bc:	2303      	movs	r3, #3
 80141be:	e006      	b.n	80141ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	691b      	ldr	r3, [r3, #16]
 80141c4:	f003 0301 	and.w	r3, r3, #1
 80141c8:	2b01      	cmp	r3, #1
 80141ca:	d0f0      	beq.n	80141ae <USB_CoreReset+0x36>

  return HAL_OK;
 80141cc:	2300      	movs	r3, #0
}
 80141ce:	4618      	mov	r0, r3
 80141d0:	3714      	adds	r7, #20
 80141d2:	46bd      	mov	sp, r7
 80141d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d8:	4770      	bx	lr
 80141da:	bf00      	nop
 80141dc:	00030d40 	.word	0x00030d40

080141e0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80141e0:	b580      	push	{r7, lr}
 80141e2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80141e4:	4904      	ldr	r1, [pc, #16]	; (80141f8 <MX_FATFS_Init+0x18>)
 80141e6:	4805      	ldr	r0, [pc, #20]	; (80141fc <MX_FATFS_Init+0x1c>)
 80141e8:	f002 fa56 	bl	8016698 <FATFS_LinkDriver>
 80141ec:	4603      	mov	r3, r0
 80141ee:	461a      	mov	r2, r3
 80141f0:	4b03      	ldr	r3, [pc, #12]	; (8014200 <MX_FATFS_Init+0x20>)
 80141f2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80141f4:	bf00      	nop
 80141f6:	bd80      	pop	{r7, pc}
 80141f8:	240015d8 	.word	0x240015d8
 80141fc:	08018668 	.word	0x08018668
 8014200:	240015d4 	.word	0x240015d4

08014204 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8014204:	b580      	push	{r7, lr}
 8014206:	b082      	sub	sp, #8
 8014208:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801420a:	2300      	movs	r3, #0
 801420c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801420e:	f000 f885 	bl	801431c <BSP_SD_IsDetected>
 8014212:	4603      	mov	r3, r0
 8014214:	2b01      	cmp	r3, #1
 8014216:	d001      	beq.n	801421c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8014218:	2302      	movs	r3, #2
 801421a:	e012      	b.n	8014242 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 801421c:	480b      	ldr	r0, [pc, #44]	; (801424c <BSP_SD_Init+0x48>)
 801421e:	f7f8 ff41 	bl	800d0a4 <HAL_SD_Init>
 8014222:	4603      	mov	r3, r0
 8014224:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8014226:	79fb      	ldrb	r3, [r7, #7]
 8014228:	2b00      	cmp	r3, #0
 801422a:	d109      	bne.n	8014240 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 801422c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8014230:	4806      	ldr	r0, [pc, #24]	; (801424c <BSP_SD_Init+0x48>)
 8014232:	f7f9 fdf7 	bl	800de24 <HAL_SD_ConfigWideBusOperation>
 8014236:	4603      	mov	r3, r0
 8014238:	2b00      	cmp	r3, #0
 801423a:	d001      	beq.n	8014240 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 801423c:	2301      	movs	r3, #1
 801423e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8014240:	79fb      	ldrb	r3, [r7, #7]
}
 8014242:	4618      	mov	r0, r3
 8014244:	3708      	adds	r7, #8
 8014246:	46bd      	mov	sp, r7
 8014248:	bd80      	pop	{r7, pc}
 801424a:	bf00      	nop
 801424c:	24000ebc 	.word	0x24000ebc

08014250 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8014250:	b580      	push	{r7, lr}
 8014252:	b086      	sub	sp, #24
 8014254:	af00      	add	r7, sp, #0
 8014256:	60f8      	str	r0, [r7, #12]
 8014258:	60b9      	str	r1, [r7, #8]
 801425a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801425c:	2300      	movs	r3, #0
 801425e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	68ba      	ldr	r2, [r7, #8]
 8014264:	68f9      	ldr	r1, [r7, #12]
 8014266:	4806      	ldr	r0, [pc, #24]	; (8014280 <BSP_SD_ReadBlocks_DMA+0x30>)
 8014268:	f7f9 f83c 	bl	800d2e4 <HAL_SD_ReadBlocks_DMA>
 801426c:	4603      	mov	r3, r0
 801426e:	2b00      	cmp	r3, #0
 8014270:	d001      	beq.n	8014276 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014272:	2301      	movs	r3, #1
 8014274:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014276:	7dfb      	ldrb	r3, [r7, #23]
}
 8014278:	4618      	mov	r0, r3
 801427a:	3718      	adds	r7, #24
 801427c:	46bd      	mov	sp, r7
 801427e:	bd80      	pop	{r7, pc}
 8014280:	24000ebc 	.word	0x24000ebc

08014284 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8014284:	b580      	push	{r7, lr}
 8014286:	b086      	sub	sp, #24
 8014288:	af00      	add	r7, sp, #0
 801428a:	60f8      	str	r0, [r7, #12]
 801428c:	60b9      	str	r1, [r7, #8]
 801428e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014290:	2300      	movs	r3, #0
 8014292:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	68ba      	ldr	r2, [r7, #8]
 8014298:	68f9      	ldr	r1, [r7, #12]
 801429a:	4806      	ldr	r0, [pc, #24]	; (80142b4 <BSP_SD_WriteBlocks_DMA+0x30>)
 801429c:	f7f9 f8ca 	bl	800d434 <HAL_SD_WriteBlocks_DMA>
 80142a0:	4603      	mov	r3, r0
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d001      	beq.n	80142aa <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80142a6:	2301      	movs	r3, #1
 80142a8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80142aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80142ac:	4618      	mov	r0, r3
 80142ae:	3718      	adds	r7, #24
 80142b0:	46bd      	mov	sp, r7
 80142b2:	bd80      	pop	{r7, pc}
 80142b4:	24000ebc 	.word	0x24000ebc

080142b8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80142b8:	b580      	push	{r7, lr}
 80142ba:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80142bc:	4805      	ldr	r0, [pc, #20]	; (80142d4 <BSP_SD_GetCardState+0x1c>)
 80142be:	f7f9 fec3 	bl	800e048 <HAL_SD_GetCardState>
 80142c2:	4603      	mov	r3, r0
 80142c4:	2b04      	cmp	r3, #4
 80142c6:	bf14      	ite	ne
 80142c8:	2301      	movne	r3, #1
 80142ca:	2300      	moveq	r3, #0
 80142cc:	b2db      	uxtb	r3, r3
}
 80142ce:	4618      	mov	r0, r3
 80142d0:	bd80      	pop	{r7, pc}
 80142d2:	bf00      	nop
 80142d4:	24000ebc 	.word	0x24000ebc

080142d8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80142d8:	b580      	push	{r7, lr}
 80142da:	b082      	sub	sp, #8
 80142dc:	af00      	add	r7, sp, #0
 80142de:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 80142e0:	6879      	ldr	r1, [r7, #4]
 80142e2:	4803      	ldr	r0, [pc, #12]	; (80142f0 <BSP_SD_GetCardInfo+0x18>)
 80142e4:	f7f9 fd72 	bl	800ddcc <HAL_SD_GetCardInfo>
}
 80142e8:	bf00      	nop
 80142ea:	3708      	adds	r7, #8
 80142ec:	46bd      	mov	sp, r7
 80142ee:	bd80      	pop	{r7, pc}
 80142f0:	24000ebc 	.word	0x24000ebc

080142f4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80142f4:	b580      	push	{r7, lr}
 80142f6:	b082      	sub	sp, #8
 80142f8:	af00      	add	r7, sp, #0
 80142fa:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80142fc:	f000 f9a0 	bl	8014640 <BSP_SD_WriteCpltCallback>
}
 8014300:	bf00      	nop
 8014302:	3708      	adds	r7, #8
 8014304:	46bd      	mov	sp, r7
 8014306:	bd80      	pop	{r7, pc}

08014308 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8014308:	b580      	push	{r7, lr}
 801430a:	b082      	sub	sp, #8
 801430c:	af00      	add	r7, sp, #0
 801430e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8014310:	f000 f9a2 	bl	8014658 <BSP_SD_ReadCpltCallback>
}
 8014314:	bf00      	nop
 8014316:	3708      	adds	r7, #8
 8014318:	46bd      	mov	sp, r7
 801431a:	bd80      	pop	{r7, pc}

0801431c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801431c:	b580      	push	{r7, lr}
 801431e:	b082      	sub	sp, #8
 8014320:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8014322:	2301      	movs	r3, #1
 8014324:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8014326:	f000 f80b 	bl	8014340 <BSP_PlatformIsDetected>
 801432a:	4603      	mov	r3, r0
 801432c:	2b00      	cmp	r3, #0
 801432e:	d101      	bne.n	8014334 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8014330:	2300      	movs	r3, #0
 8014332:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8014334:	79fb      	ldrb	r3, [r7, #7]
 8014336:	b2db      	uxtb	r3, r3
}
 8014338:	4618      	mov	r0, r3
 801433a:	3708      	adds	r7, #8
 801433c:	46bd      	mov	sp, r7
 801433e:	bd80      	pop	{r7, pc}

08014340 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8014340:	b580      	push	{r7, lr}
 8014342:	b082      	sub	sp, #8
 8014344:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8014346:	2301      	movs	r3, #1
 8014348:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801434a:	2104      	movs	r1, #4
 801434c:	4806      	ldr	r0, [pc, #24]	; (8014368 <BSP_PlatformIsDetected+0x28>)
 801434e:	f7f3 fe7d 	bl	800804c <HAL_GPIO_ReadPin>
 8014352:	4603      	mov	r3, r0
 8014354:	2b00      	cmp	r3, #0
 8014356:	d001      	beq.n	801435c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8014358:	2300      	movs	r3, #0
 801435a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 801435c:	79fb      	ldrb	r3, [r7, #7]
}
 801435e:	4618      	mov	r0, r3
 8014360:	3708      	adds	r7, #8
 8014362:	46bd      	mov	sp, r7
 8014364:	bd80      	pop	{r7, pc}
 8014366:	bf00      	nop
 8014368:	58020400 	.word	0x58020400

0801436c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 801436c:	b580      	push	{r7, lr}
 801436e:	b084      	sub	sp, #16
 8014370:	af00      	add	r7, sp, #0
 8014372:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8014374:	f7ef fbc4 	bl	8003b00 <HAL_GetTick>
 8014378:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801437a:	e006      	b.n	801438a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801437c:	f7ff ff9c 	bl	80142b8 <BSP_SD_GetCardState>
 8014380:	4603      	mov	r3, r0
 8014382:	2b00      	cmp	r3, #0
 8014384:	d101      	bne.n	801438a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8014386:	2300      	movs	r3, #0
 8014388:	e009      	b.n	801439e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801438a:	f7ef fbb9 	bl	8003b00 <HAL_GetTick>
 801438e:	4602      	mov	r2, r0
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	1ad3      	subs	r3, r2, r3
 8014394:	687a      	ldr	r2, [r7, #4]
 8014396:	429a      	cmp	r2, r3
 8014398:	d8f0      	bhi.n	801437c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801439a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801439e:	4618      	mov	r0, r3
 80143a0:	3710      	adds	r7, #16
 80143a2:	46bd      	mov	sp, r7
 80143a4:	bd80      	pop	{r7, pc}
	...

080143a8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80143a8:	b580      	push	{r7, lr}
 80143aa:	b082      	sub	sp, #8
 80143ac:	af00      	add	r7, sp, #0
 80143ae:	4603      	mov	r3, r0
 80143b0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80143b2:	4b0b      	ldr	r3, [pc, #44]	; (80143e0 <SD_CheckStatus+0x38>)
 80143b4:	2201      	movs	r2, #1
 80143b6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80143b8:	f7ff ff7e 	bl	80142b8 <BSP_SD_GetCardState>
 80143bc:	4603      	mov	r3, r0
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d107      	bne.n	80143d2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80143c2:	4b07      	ldr	r3, [pc, #28]	; (80143e0 <SD_CheckStatus+0x38>)
 80143c4:	781b      	ldrb	r3, [r3, #0]
 80143c6:	b2db      	uxtb	r3, r3
 80143c8:	f023 0301 	bic.w	r3, r3, #1
 80143cc:	b2da      	uxtb	r2, r3
 80143ce:	4b04      	ldr	r3, [pc, #16]	; (80143e0 <SD_CheckStatus+0x38>)
 80143d0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80143d2:	4b03      	ldr	r3, [pc, #12]	; (80143e0 <SD_CheckStatus+0x38>)
 80143d4:	781b      	ldrb	r3, [r3, #0]
 80143d6:	b2db      	uxtb	r3, r3
}
 80143d8:	4618      	mov	r0, r3
 80143da:	3708      	adds	r7, #8
 80143dc:	46bd      	mov	sp, r7
 80143de:	bd80      	pop	{r7, pc}
 80143e0:	2400000d 	.word	0x2400000d

080143e4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80143e4:	b580      	push	{r7, lr}
 80143e6:	b082      	sub	sp, #8
 80143e8:	af00      	add	r7, sp, #0
 80143ea:	4603      	mov	r3, r0
 80143ec:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80143ee:	f7ff ff09 	bl	8014204 <BSP_SD_Init>
 80143f2:	4603      	mov	r3, r0
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d107      	bne.n	8014408 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80143f8:	79fb      	ldrb	r3, [r7, #7]
 80143fa:	4618      	mov	r0, r3
 80143fc:	f7ff ffd4 	bl	80143a8 <SD_CheckStatus>
 8014400:	4603      	mov	r3, r0
 8014402:	461a      	mov	r2, r3
 8014404:	4b04      	ldr	r3, [pc, #16]	; (8014418 <SD_initialize+0x34>)
 8014406:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8014408:	4b03      	ldr	r3, [pc, #12]	; (8014418 <SD_initialize+0x34>)
 801440a:	781b      	ldrb	r3, [r3, #0]
 801440c:	b2db      	uxtb	r3, r3
}
 801440e:	4618      	mov	r0, r3
 8014410:	3708      	adds	r7, #8
 8014412:	46bd      	mov	sp, r7
 8014414:	bd80      	pop	{r7, pc}
 8014416:	bf00      	nop
 8014418:	2400000d 	.word	0x2400000d

0801441c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801441c:	b580      	push	{r7, lr}
 801441e:	b082      	sub	sp, #8
 8014420:	af00      	add	r7, sp, #0
 8014422:	4603      	mov	r3, r0
 8014424:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8014426:	79fb      	ldrb	r3, [r7, #7]
 8014428:	4618      	mov	r0, r3
 801442a:	f7ff ffbd 	bl	80143a8 <SD_CheckStatus>
 801442e:	4603      	mov	r3, r0
}
 8014430:	4618      	mov	r0, r3
 8014432:	3708      	adds	r7, #8
 8014434:	46bd      	mov	sp, r7
 8014436:	bd80      	pop	{r7, pc}

08014438 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8014438:	b580      	push	{r7, lr}
 801443a:	b086      	sub	sp, #24
 801443c:	af00      	add	r7, sp, #0
 801443e:	60b9      	str	r1, [r7, #8]
 8014440:	607a      	str	r2, [r7, #4]
 8014442:	603b      	str	r3, [r7, #0]
 8014444:	4603      	mov	r3, r0
 8014446:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014448:	2301      	movs	r3, #1
 801444a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801444c:	f247 5030 	movw	r0, #30000	; 0x7530
 8014450:	f7ff ff8c 	bl	801436c <SD_CheckStatusWithTimeout>
 8014454:	4603      	mov	r3, r0
 8014456:	2b00      	cmp	r3, #0
 8014458:	da01      	bge.n	801445e <SD_read+0x26>
  {
    return res;
 801445a:	7dfb      	ldrb	r3, [r7, #23]
 801445c:	e03b      	b.n	80144d6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801445e:	683a      	ldr	r2, [r7, #0]
 8014460:	6879      	ldr	r1, [r7, #4]
 8014462:	68b8      	ldr	r0, [r7, #8]
 8014464:	f7ff fef4 	bl	8014250 <BSP_SD_ReadBlocks_DMA>
 8014468:	4603      	mov	r3, r0
 801446a:	2b00      	cmp	r3, #0
 801446c:	d132      	bne.n	80144d4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801446e:	4b1c      	ldr	r3, [pc, #112]	; (80144e0 <SD_read+0xa8>)
 8014470:	2200      	movs	r2, #0
 8014472:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8014474:	f7ef fb44 	bl	8003b00 <HAL_GetTick>
 8014478:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801447a:	bf00      	nop
 801447c:	4b18      	ldr	r3, [pc, #96]	; (80144e0 <SD_read+0xa8>)
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	2b00      	cmp	r3, #0
 8014482:	d108      	bne.n	8014496 <SD_read+0x5e>
 8014484:	f7ef fb3c 	bl	8003b00 <HAL_GetTick>
 8014488:	4602      	mov	r2, r0
 801448a:	693b      	ldr	r3, [r7, #16]
 801448c:	1ad3      	subs	r3, r2, r3
 801448e:	f247 522f 	movw	r2, #29999	; 0x752f
 8014492:	4293      	cmp	r3, r2
 8014494:	d9f2      	bls.n	801447c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8014496:	4b12      	ldr	r3, [pc, #72]	; (80144e0 <SD_read+0xa8>)
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	2b00      	cmp	r3, #0
 801449c:	d102      	bne.n	80144a4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 801449e:	2301      	movs	r3, #1
 80144a0:	75fb      	strb	r3, [r7, #23]
 80144a2:	e017      	b.n	80144d4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80144a4:	4b0e      	ldr	r3, [pc, #56]	; (80144e0 <SD_read+0xa8>)
 80144a6:	2200      	movs	r2, #0
 80144a8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80144aa:	f7ef fb29 	bl	8003b00 <HAL_GetTick>
 80144ae:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80144b0:	e007      	b.n	80144c2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80144b2:	f7ff ff01 	bl	80142b8 <BSP_SD_GetCardState>
 80144b6:	4603      	mov	r3, r0
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d102      	bne.n	80144c2 <SD_read+0x8a>
          {
            res = RES_OK;
 80144bc:	2300      	movs	r3, #0
 80144be:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80144c0:	e008      	b.n	80144d4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80144c2:	f7ef fb1d 	bl	8003b00 <HAL_GetTick>
 80144c6:	4602      	mov	r2, r0
 80144c8:	693b      	ldr	r3, [r7, #16]
 80144ca:	1ad3      	subs	r3, r2, r3
 80144cc:	f247 522f 	movw	r2, #29999	; 0x752f
 80144d0:	4293      	cmp	r3, r2
 80144d2:	d9ee      	bls.n	80144b2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80144d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80144d6:	4618      	mov	r0, r3
 80144d8:	3718      	adds	r7, #24
 80144da:	46bd      	mov	sp, r7
 80144dc:	bd80      	pop	{r7, pc}
 80144de:	bf00      	nop
 80144e0:	240015e0 	.word	0x240015e0

080144e4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80144e4:	b580      	push	{r7, lr}
 80144e6:	b086      	sub	sp, #24
 80144e8:	af00      	add	r7, sp, #0
 80144ea:	60b9      	str	r1, [r7, #8]
 80144ec:	607a      	str	r2, [r7, #4]
 80144ee:	603b      	str	r3, [r7, #0]
 80144f0:	4603      	mov	r3, r0
 80144f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80144f4:	2301      	movs	r3, #1
 80144f6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80144f8:	4b24      	ldr	r3, [pc, #144]	; (801458c <SD_write+0xa8>)
 80144fa:	2200      	movs	r2, #0
 80144fc:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80144fe:	f247 5030 	movw	r0, #30000	; 0x7530
 8014502:	f7ff ff33 	bl	801436c <SD_CheckStatusWithTimeout>
 8014506:	4603      	mov	r3, r0
 8014508:	2b00      	cmp	r3, #0
 801450a:	da01      	bge.n	8014510 <SD_write+0x2c>
  {
    return res;
 801450c:	7dfb      	ldrb	r3, [r7, #23]
 801450e:	e038      	b.n	8014582 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8014510:	683a      	ldr	r2, [r7, #0]
 8014512:	6879      	ldr	r1, [r7, #4]
 8014514:	68b8      	ldr	r0, [r7, #8]
 8014516:	f7ff feb5 	bl	8014284 <BSP_SD_WriteBlocks_DMA>
 801451a:	4603      	mov	r3, r0
 801451c:	2b00      	cmp	r3, #0
 801451e:	d12f      	bne.n	8014580 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8014520:	f7ef faee 	bl	8003b00 <HAL_GetTick>
 8014524:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8014526:	bf00      	nop
 8014528:	4b18      	ldr	r3, [pc, #96]	; (801458c <SD_write+0xa8>)
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	2b00      	cmp	r3, #0
 801452e:	d108      	bne.n	8014542 <SD_write+0x5e>
 8014530:	f7ef fae6 	bl	8003b00 <HAL_GetTick>
 8014534:	4602      	mov	r2, r0
 8014536:	693b      	ldr	r3, [r7, #16]
 8014538:	1ad3      	subs	r3, r2, r3
 801453a:	f247 522f 	movw	r2, #29999	; 0x752f
 801453e:	4293      	cmp	r3, r2
 8014540:	d9f2      	bls.n	8014528 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8014542:	4b12      	ldr	r3, [pc, #72]	; (801458c <SD_write+0xa8>)
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	2b00      	cmp	r3, #0
 8014548:	d102      	bne.n	8014550 <SD_write+0x6c>
      {
        res = RES_ERROR;
 801454a:	2301      	movs	r3, #1
 801454c:	75fb      	strb	r3, [r7, #23]
 801454e:	e017      	b.n	8014580 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8014550:	4b0e      	ldr	r3, [pc, #56]	; (801458c <SD_write+0xa8>)
 8014552:	2200      	movs	r2, #0
 8014554:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8014556:	f7ef fad3 	bl	8003b00 <HAL_GetTick>
 801455a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801455c:	e007      	b.n	801456e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801455e:	f7ff feab 	bl	80142b8 <BSP_SD_GetCardState>
 8014562:	4603      	mov	r3, r0
 8014564:	2b00      	cmp	r3, #0
 8014566:	d102      	bne.n	801456e <SD_write+0x8a>
          {
            res = RES_OK;
 8014568:	2300      	movs	r3, #0
 801456a:	75fb      	strb	r3, [r7, #23]
            break;
 801456c:	e008      	b.n	8014580 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801456e:	f7ef fac7 	bl	8003b00 <HAL_GetTick>
 8014572:	4602      	mov	r2, r0
 8014574:	693b      	ldr	r3, [r7, #16]
 8014576:	1ad3      	subs	r3, r2, r3
 8014578:	f247 522f 	movw	r2, #29999	; 0x752f
 801457c:	4293      	cmp	r3, r2
 801457e:	d9ee      	bls.n	801455e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8014580:	7dfb      	ldrb	r3, [r7, #23]
}
 8014582:	4618      	mov	r0, r3
 8014584:	3718      	adds	r7, #24
 8014586:	46bd      	mov	sp, r7
 8014588:	bd80      	pop	{r7, pc}
 801458a:	bf00      	nop
 801458c:	240015dc 	.word	0x240015dc

08014590 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8014590:	b580      	push	{r7, lr}
 8014592:	b08c      	sub	sp, #48	; 0x30
 8014594:	af00      	add	r7, sp, #0
 8014596:	4603      	mov	r3, r0
 8014598:	603a      	str	r2, [r7, #0]
 801459a:	71fb      	strb	r3, [r7, #7]
 801459c:	460b      	mov	r3, r1
 801459e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80145a0:	2301      	movs	r3, #1
 80145a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80145a6:	4b25      	ldr	r3, [pc, #148]	; (801463c <SD_ioctl+0xac>)
 80145a8:	781b      	ldrb	r3, [r3, #0]
 80145aa:	b2db      	uxtb	r3, r3
 80145ac:	f003 0301 	and.w	r3, r3, #1
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d001      	beq.n	80145b8 <SD_ioctl+0x28>
 80145b4:	2303      	movs	r3, #3
 80145b6:	e03c      	b.n	8014632 <SD_ioctl+0xa2>

  switch (cmd)
 80145b8:	79bb      	ldrb	r3, [r7, #6]
 80145ba:	2b03      	cmp	r3, #3
 80145bc:	d834      	bhi.n	8014628 <SD_ioctl+0x98>
 80145be:	a201      	add	r2, pc, #4	; (adr r2, 80145c4 <SD_ioctl+0x34>)
 80145c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145c4:	080145d5 	.word	0x080145d5
 80145c8:	080145dd 	.word	0x080145dd
 80145cc:	080145f5 	.word	0x080145f5
 80145d0:	0801460f 	.word	0x0801460f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80145d4:	2300      	movs	r3, #0
 80145d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80145da:	e028      	b.n	801462e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80145dc:	f107 0308 	add.w	r3, r7, #8
 80145e0:	4618      	mov	r0, r3
 80145e2:	f7ff fe79 	bl	80142d8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80145e6:	6a3a      	ldr	r2, [r7, #32]
 80145e8:	683b      	ldr	r3, [r7, #0]
 80145ea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80145ec:	2300      	movs	r3, #0
 80145ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80145f2:	e01c      	b.n	801462e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80145f4:	f107 0308 	add.w	r3, r7, #8
 80145f8:	4618      	mov	r0, r3
 80145fa:	f7ff fe6d 	bl	80142d8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80145fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014600:	b29a      	uxth	r2, r3
 8014602:	683b      	ldr	r3, [r7, #0]
 8014604:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8014606:	2300      	movs	r3, #0
 8014608:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801460c:	e00f      	b.n	801462e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801460e:	f107 0308 	add.w	r3, r7, #8
 8014612:	4618      	mov	r0, r3
 8014614:	f7ff fe60 	bl	80142d8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8014618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801461a:	0a5a      	lsrs	r2, r3, #9
 801461c:	683b      	ldr	r3, [r7, #0]
 801461e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014620:	2300      	movs	r3, #0
 8014622:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014626:	e002      	b.n	801462e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8014628:	2304      	movs	r3, #4
 801462a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801462e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8014632:	4618      	mov	r0, r3
 8014634:	3730      	adds	r7, #48	; 0x30
 8014636:	46bd      	mov	sp, r7
 8014638:	bd80      	pop	{r7, pc}
 801463a:	bf00      	nop
 801463c:	2400000d 	.word	0x2400000d

08014640 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8014640:	b480      	push	{r7}
 8014642:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8014644:	4b03      	ldr	r3, [pc, #12]	; (8014654 <BSP_SD_WriteCpltCallback+0x14>)
 8014646:	2201      	movs	r2, #1
 8014648:	601a      	str	r2, [r3, #0]
}
 801464a:	bf00      	nop
 801464c:	46bd      	mov	sp, r7
 801464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014652:	4770      	bx	lr
 8014654:	240015dc 	.word	0x240015dc

08014658 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8014658:	b480      	push	{r7}
 801465a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 801465c:	4b03      	ldr	r3, [pc, #12]	; (801466c <BSP_SD_ReadCpltCallback+0x14>)
 801465e:	2201      	movs	r2, #1
 8014660:	601a      	str	r2, [r3, #0]
}
 8014662:	bf00      	nop
 8014664:	46bd      	mov	sp, r7
 8014666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801466a:	4770      	bx	lr
 801466c:	240015e0 	.word	0x240015e0

08014670 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014670:	b580      	push	{r7, lr}
 8014672:	b084      	sub	sp, #16
 8014674:	af00      	add	r7, sp, #0
 8014676:	6078      	str	r0, [r7, #4]
 8014678:	460b      	mov	r3, r1
 801467a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801467c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8014680:	f002 fd00 	bl	8017084 <USBD_static_malloc>
 8014684:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	2b00      	cmp	r3, #0
 801468a:	d109      	bne.n	80146a0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	32b0      	adds	r2, #176	; 0xb0
 8014696:	2100      	movs	r1, #0
 8014698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801469c:	2302      	movs	r3, #2
 801469e:	e0d4      	b.n	801484a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80146a0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80146a4:	2100      	movs	r1, #0
 80146a6:	68f8      	ldr	r0, [r7, #12]
 80146a8:	f002 fd7e 	bl	80171a8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	32b0      	adds	r2, #176	; 0xb0
 80146b6:	68f9      	ldr	r1, [r7, #12]
 80146b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	32b0      	adds	r2, #176	; 0xb0
 80146c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	7c1b      	ldrb	r3, [r3, #16]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d138      	bne.n	801474a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80146d8:	4b5e      	ldr	r3, [pc, #376]	; (8014854 <USBD_CDC_Init+0x1e4>)
 80146da:	7819      	ldrb	r1, [r3, #0]
 80146dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80146e0:	2202      	movs	r2, #2
 80146e2:	6878      	ldr	r0, [r7, #4]
 80146e4:	f002 fbab 	bl	8016e3e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80146e8:	4b5a      	ldr	r3, [pc, #360]	; (8014854 <USBD_CDC_Init+0x1e4>)
 80146ea:	781b      	ldrb	r3, [r3, #0]
 80146ec:	f003 020f 	and.w	r2, r3, #15
 80146f0:	6879      	ldr	r1, [r7, #4]
 80146f2:	4613      	mov	r3, r2
 80146f4:	009b      	lsls	r3, r3, #2
 80146f6:	4413      	add	r3, r2
 80146f8:	009b      	lsls	r3, r3, #2
 80146fa:	440b      	add	r3, r1
 80146fc:	3324      	adds	r3, #36	; 0x24
 80146fe:	2201      	movs	r2, #1
 8014700:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014702:	4b55      	ldr	r3, [pc, #340]	; (8014858 <USBD_CDC_Init+0x1e8>)
 8014704:	7819      	ldrb	r1, [r3, #0]
 8014706:	f44f 7300 	mov.w	r3, #512	; 0x200
 801470a:	2202      	movs	r2, #2
 801470c:	6878      	ldr	r0, [r7, #4]
 801470e:	f002 fb96 	bl	8016e3e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014712:	4b51      	ldr	r3, [pc, #324]	; (8014858 <USBD_CDC_Init+0x1e8>)
 8014714:	781b      	ldrb	r3, [r3, #0]
 8014716:	f003 020f 	and.w	r2, r3, #15
 801471a:	6879      	ldr	r1, [r7, #4]
 801471c:	4613      	mov	r3, r2
 801471e:	009b      	lsls	r3, r3, #2
 8014720:	4413      	add	r3, r2
 8014722:	009b      	lsls	r3, r3, #2
 8014724:	440b      	add	r3, r1
 8014726:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801472a:	2201      	movs	r2, #1
 801472c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801472e:	4b4b      	ldr	r3, [pc, #300]	; (801485c <USBD_CDC_Init+0x1ec>)
 8014730:	781b      	ldrb	r3, [r3, #0]
 8014732:	f003 020f 	and.w	r2, r3, #15
 8014736:	6879      	ldr	r1, [r7, #4]
 8014738:	4613      	mov	r3, r2
 801473a:	009b      	lsls	r3, r3, #2
 801473c:	4413      	add	r3, r2
 801473e:	009b      	lsls	r3, r3, #2
 8014740:	440b      	add	r3, r1
 8014742:	3326      	adds	r3, #38	; 0x26
 8014744:	2210      	movs	r2, #16
 8014746:	801a      	strh	r2, [r3, #0]
 8014748:	e035      	b.n	80147b6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801474a:	4b42      	ldr	r3, [pc, #264]	; (8014854 <USBD_CDC_Init+0x1e4>)
 801474c:	7819      	ldrb	r1, [r3, #0]
 801474e:	2340      	movs	r3, #64	; 0x40
 8014750:	2202      	movs	r2, #2
 8014752:	6878      	ldr	r0, [r7, #4]
 8014754:	f002 fb73 	bl	8016e3e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014758:	4b3e      	ldr	r3, [pc, #248]	; (8014854 <USBD_CDC_Init+0x1e4>)
 801475a:	781b      	ldrb	r3, [r3, #0]
 801475c:	f003 020f 	and.w	r2, r3, #15
 8014760:	6879      	ldr	r1, [r7, #4]
 8014762:	4613      	mov	r3, r2
 8014764:	009b      	lsls	r3, r3, #2
 8014766:	4413      	add	r3, r2
 8014768:	009b      	lsls	r3, r3, #2
 801476a:	440b      	add	r3, r1
 801476c:	3324      	adds	r3, #36	; 0x24
 801476e:	2201      	movs	r2, #1
 8014770:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014772:	4b39      	ldr	r3, [pc, #228]	; (8014858 <USBD_CDC_Init+0x1e8>)
 8014774:	7819      	ldrb	r1, [r3, #0]
 8014776:	2340      	movs	r3, #64	; 0x40
 8014778:	2202      	movs	r2, #2
 801477a:	6878      	ldr	r0, [r7, #4]
 801477c:	f002 fb5f 	bl	8016e3e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014780:	4b35      	ldr	r3, [pc, #212]	; (8014858 <USBD_CDC_Init+0x1e8>)
 8014782:	781b      	ldrb	r3, [r3, #0]
 8014784:	f003 020f 	and.w	r2, r3, #15
 8014788:	6879      	ldr	r1, [r7, #4]
 801478a:	4613      	mov	r3, r2
 801478c:	009b      	lsls	r3, r3, #2
 801478e:	4413      	add	r3, r2
 8014790:	009b      	lsls	r3, r3, #2
 8014792:	440b      	add	r3, r1
 8014794:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014798:	2201      	movs	r2, #1
 801479a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801479c:	4b2f      	ldr	r3, [pc, #188]	; (801485c <USBD_CDC_Init+0x1ec>)
 801479e:	781b      	ldrb	r3, [r3, #0]
 80147a0:	f003 020f 	and.w	r2, r3, #15
 80147a4:	6879      	ldr	r1, [r7, #4]
 80147a6:	4613      	mov	r3, r2
 80147a8:	009b      	lsls	r3, r3, #2
 80147aa:	4413      	add	r3, r2
 80147ac:	009b      	lsls	r3, r3, #2
 80147ae:	440b      	add	r3, r1
 80147b0:	3326      	adds	r3, #38	; 0x26
 80147b2:	2210      	movs	r2, #16
 80147b4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80147b6:	4b29      	ldr	r3, [pc, #164]	; (801485c <USBD_CDC_Init+0x1ec>)
 80147b8:	7819      	ldrb	r1, [r3, #0]
 80147ba:	2308      	movs	r3, #8
 80147bc:	2203      	movs	r2, #3
 80147be:	6878      	ldr	r0, [r7, #4]
 80147c0:	f002 fb3d 	bl	8016e3e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80147c4:	4b25      	ldr	r3, [pc, #148]	; (801485c <USBD_CDC_Init+0x1ec>)
 80147c6:	781b      	ldrb	r3, [r3, #0]
 80147c8:	f003 020f 	and.w	r2, r3, #15
 80147cc:	6879      	ldr	r1, [r7, #4]
 80147ce:	4613      	mov	r3, r2
 80147d0:	009b      	lsls	r3, r3, #2
 80147d2:	4413      	add	r3, r2
 80147d4:	009b      	lsls	r3, r3, #2
 80147d6:	440b      	add	r3, r1
 80147d8:	3324      	adds	r3, #36	; 0x24
 80147da:	2201      	movs	r2, #1
 80147dc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80147de:	68fb      	ldr	r3, [r7, #12]
 80147e0:	2200      	movs	r2, #0
 80147e2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80147ec:	687a      	ldr	r2, [r7, #4]
 80147ee:	33b0      	adds	r3, #176	; 0xb0
 80147f0:	009b      	lsls	r3, r3, #2
 80147f2:	4413      	add	r3, r2
 80147f4:	685b      	ldr	r3, [r3, #4]
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	2200      	movs	r2, #0
 80147fe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	2200      	movs	r2, #0
 8014806:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8014810:	2b00      	cmp	r3, #0
 8014812:	d101      	bne.n	8014818 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8014814:	2302      	movs	r3, #2
 8014816:	e018      	b.n	801484a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	7c1b      	ldrb	r3, [r3, #16]
 801481c:	2b00      	cmp	r3, #0
 801481e:	d10a      	bne.n	8014836 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014820:	4b0d      	ldr	r3, [pc, #52]	; (8014858 <USBD_CDC_Init+0x1e8>)
 8014822:	7819      	ldrb	r1, [r3, #0]
 8014824:	68fb      	ldr	r3, [r7, #12]
 8014826:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801482a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801482e:	6878      	ldr	r0, [r7, #4]
 8014830:	f002 fbf4 	bl	801701c <USBD_LL_PrepareReceive>
 8014834:	e008      	b.n	8014848 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014836:	4b08      	ldr	r3, [pc, #32]	; (8014858 <USBD_CDC_Init+0x1e8>)
 8014838:	7819      	ldrb	r1, [r3, #0]
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014840:	2340      	movs	r3, #64	; 0x40
 8014842:	6878      	ldr	r0, [r7, #4]
 8014844:	f002 fbea 	bl	801701c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014848:	2300      	movs	r3, #0
}
 801484a:	4618      	mov	r0, r3
 801484c:	3710      	adds	r7, #16
 801484e:	46bd      	mov	sp, r7
 8014850:	bd80      	pop	{r7, pc}
 8014852:	bf00      	nop
 8014854:	24000097 	.word	0x24000097
 8014858:	24000098 	.word	0x24000098
 801485c:	24000099 	.word	0x24000099

08014860 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014860:	b580      	push	{r7, lr}
 8014862:	b082      	sub	sp, #8
 8014864:	af00      	add	r7, sp, #0
 8014866:	6078      	str	r0, [r7, #4]
 8014868:	460b      	mov	r3, r1
 801486a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 801486c:	4b3a      	ldr	r3, [pc, #232]	; (8014958 <USBD_CDC_DeInit+0xf8>)
 801486e:	781b      	ldrb	r3, [r3, #0]
 8014870:	4619      	mov	r1, r3
 8014872:	6878      	ldr	r0, [r7, #4]
 8014874:	f002 fb09 	bl	8016e8a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8014878:	4b37      	ldr	r3, [pc, #220]	; (8014958 <USBD_CDC_DeInit+0xf8>)
 801487a:	781b      	ldrb	r3, [r3, #0]
 801487c:	f003 020f 	and.w	r2, r3, #15
 8014880:	6879      	ldr	r1, [r7, #4]
 8014882:	4613      	mov	r3, r2
 8014884:	009b      	lsls	r3, r3, #2
 8014886:	4413      	add	r3, r2
 8014888:	009b      	lsls	r3, r3, #2
 801488a:	440b      	add	r3, r1
 801488c:	3324      	adds	r3, #36	; 0x24
 801488e:	2200      	movs	r2, #0
 8014890:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8014892:	4b32      	ldr	r3, [pc, #200]	; (801495c <USBD_CDC_DeInit+0xfc>)
 8014894:	781b      	ldrb	r3, [r3, #0]
 8014896:	4619      	mov	r1, r3
 8014898:	6878      	ldr	r0, [r7, #4]
 801489a:	f002 faf6 	bl	8016e8a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801489e:	4b2f      	ldr	r3, [pc, #188]	; (801495c <USBD_CDC_DeInit+0xfc>)
 80148a0:	781b      	ldrb	r3, [r3, #0]
 80148a2:	f003 020f 	and.w	r2, r3, #15
 80148a6:	6879      	ldr	r1, [r7, #4]
 80148a8:	4613      	mov	r3, r2
 80148aa:	009b      	lsls	r3, r3, #2
 80148ac:	4413      	add	r3, r2
 80148ae:	009b      	lsls	r3, r3, #2
 80148b0:	440b      	add	r3, r1
 80148b2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80148b6:	2200      	movs	r2, #0
 80148b8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80148ba:	4b29      	ldr	r3, [pc, #164]	; (8014960 <USBD_CDC_DeInit+0x100>)
 80148bc:	781b      	ldrb	r3, [r3, #0]
 80148be:	4619      	mov	r1, r3
 80148c0:	6878      	ldr	r0, [r7, #4]
 80148c2:	f002 fae2 	bl	8016e8a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80148c6:	4b26      	ldr	r3, [pc, #152]	; (8014960 <USBD_CDC_DeInit+0x100>)
 80148c8:	781b      	ldrb	r3, [r3, #0]
 80148ca:	f003 020f 	and.w	r2, r3, #15
 80148ce:	6879      	ldr	r1, [r7, #4]
 80148d0:	4613      	mov	r3, r2
 80148d2:	009b      	lsls	r3, r3, #2
 80148d4:	4413      	add	r3, r2
 80148d6:	009b      	lsls	r3, r3, #2
 80148d8:	440b      	add	r3, r1
 80148da:	3324      	adds	r3, #36	; 0x24
 80148dc:	2200      	movs	r2, #0
 80148de:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80148e0:	4b1f      	ldr	r3, [pc, #124]	; (8014960 <USBD_CDC_DeInit+0x100>)
 80148e2:	781b      	ldrb	r3, [r3, #0]
 80148e4:	f003 020f 	and.w	r2, r3, #15
 80148e8:	6879      	ldr	r1, [r7, #4]
 80148ea:	4613      	mov	r3, r2
 80148ec:	009b      	lsls	r3, r3, #2
 80148ee:	4413      	add	r3, r2
 80148f0:	009b      	lsls	r3, r3, #2
 80148f2:	440b      	add	r3, r1
 80148f4:	3326      	adds	r3, #38	; 0x26
 80148f6:	2200      	movs	r2, #0
 80148f8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	32b0      	adds	r2, #176	; 0xb0
 8014904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014908:	2b00      	cmp	r3, #0
 801490a:	d01f      	beq.n	801494c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014912:	687a      	ldr	r2, [r7, #4]
 8014914:	33b0      	adds	r3, #176	; 0xb0
 8014916:	009b      	lsls	r3, r3, #2
 8014918:	4413      	add	r3, r2
 801491a:	685b      	ldr	r3, [r3, #4]
 801491c:	685b      	ldr	r3, [r3, #4]
 801491e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	32b0      	adds	r2, #176	; 0xb0
 801492a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801492e:	4618      	mov	r0, r3
 8014930:	f002 fbb6 	bl	80170a0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	32b0      	adds	r2, #176	; 0xb0
 801493e:	2100      	movs	r1, #0
 8014940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	2200      	movs	r2, #0
 8014948:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801494c:	2300      	movs	r3, #0
}
 801494e:	4618      	mov	r0, r3
 8014950:	3708      	adds	r7, #8
 8014952:	46bd      	mov	sp, r7
 8014954:	bd80      	pop	{r7, pc}
 8014956:	bf00      	nop
 8014958:	24000097 	.word	0x24000097
 801495c:	24000098 	.word	0x24000098
 8014960:	24000099 	.word	0x24000099

08014964 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8014964:	b580      	push	{r7, lr}
 8014966:	b086      	sub	sp, #24
 8014968:	af00      	add	r7, sp, #0
 801496a:	6078      	str	r0, [r7, #4]
 801496c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	32b0      	adds	r2, #176	; 0xb0
 8014978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801497c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801497e:	2300      	movs	r3, #0
 8014980:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8014982:	2300      	movs	r3, #0
 8014984:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8014986:	2300      	movs	r3, #0
 8014988:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801498a:	693b      	ldr	r3, [r7, #16]
 801498c:	2b00      	cmp	r3, #0
 801498e:	d101      	bne.n	8014994 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8014990:	2303      	movs	r3, #3
 8014992:	e0bf      	b.n	8014b14 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014994:	683b      	ldr	r3, [r7, #0]
 8014996:	781b      	ldrb	r3, [r3, #0]
 8014998:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801499c:	2b00      	cmp	r3, #0
 801499e:	d050      	beq.n	8014a42 <USBD_CDC_Setup+0xde>
 80149a0:	2b20      	cmp	r3, #32
 80149a2:	f040 80af 	bne.w	8014b04 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80149a6:	683b      	ldr	r3, [r7, #0]
 80149a8:	88db      	ldrh	r3, [r3, #6]
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d03a      	beq.n	8014a24 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80149ae:	683b      	ldr	r3, [r7, #0]
 80149b0:	781b      	ldrb	r3, [r3, #0]
 80149b2:	b25b      	sxtb	r3, r3
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	da1b      	bge.n	80149f0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80149be:	687a      	ldr	r2, [r7, #4]
 80149c0:	33b0      	adds	r3, #176	; 0xb0
 80149c2:	009b      	lsls	r3, r3, #2
 80149c4:	4413      	add	r3, r2
 80149c6:	685b      	ldr	r3, [r3, #4]
 80149c8:	689b      	ldr	r3, [r3, #8]
 80149ca:	683a      	ldr	r2, [r7, #0]
 80149cc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80149ce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80149d0:	683a      	ldr	r2, [r7, #0]
 80149d2:	88d2      	ldrh	r2, [r2, #6]
 80149d4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80149d6:	683b      	ldr	r3, [r7, #0]
 80149d8:	88db      	ldrh	r3, [r3, #6]
 80149da:	2b07      	cmp	r3, #7
 80149dc:	bf28      	it	cs
 80149de:	2307      	movcs	r3, #7
 80149e0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80149e2:	693b      	ldr	r3, [r7, #16]
 80149e4:	89fa      	ldrh	r2, [r7, #14]
 80149e6:	4619      	mov	r1, r3
 80149e8:	6878      	ldr	r0, [r7, #4]
 80149ea:	f001 fd89 	bl	8016500 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80149ee:	e090      	b.n	8014b12 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80149f0:	683b      	ldr	r3, [r7, #0]
 80149f2:	785a      	ldrb	r2, [r3, #1]
 80149f4:	693b      	ldr	r3, [r7, #16]
 80149f6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80149fa:	683b      	ldr	r3, [r7, #0]
 80149fc:	88db      	ldrh	r3, [r3, #6]
 80149fe:	2b3f      	cmp	r3, #63	; 0x3f
 8014a00:	d803      	bhi.n	8014a0a <USBD_CDC_Setup+0xa6>
 8014a02:	683b      	ldr	r3, [r7, #0]
 8014a04:	88db      	ldrh	r3, [r3, #6]
 8014a06:	b2da      	uxtb	r2, r3
 8014a08:	e000      	b.n	8014a0c <USBD_CDC_Setup+0xa8>
 8014a0a:	2240      	movs	r2, #64	; 0x40
 8014a0c:	693b      	ldr	r3, [r7, #16]
 8014a0e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8014a12:	6939      	ldr	r1, [r7, #16]
 8014a14:	693b      	ldr	r3, [r7, #16]
 8014a16:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8014a1a:	461a      	mov	r2, r3
 8014a1c:	6878      	ldr	r0, [r7, #4]
 8014a1e:	f001 fd9b 	bl	8016558 <USBD_CtlPrepareRx>
      break;
 8014a22:	e076      	b.n	8014b12 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014a2a:	687a      	ldr	r2, [r7, #4]
 8014a2c:	33b0      	adds	r3, #176	; 0xb0
 8014a2e:	009b      	lsls	r3, r3, #2
 8014a30:	4413      	add	r3, r2
 8014a32:	685b      	ldr	r3, [r3, #4]
 8014a34:	689b      	ldr	r3, [r3, #8]
 8014a36:	683a      	ldr	r2, [r7, #0]
 8014a38:	7850      	ldrb	r0, [r2, #1]
 8014a3a:	2200      	movs	r2, #0
 8014a3c:	6839      	ldr	r1, [r7, #0]
 8014a3e:	4798      	blx	r3
      break;
 8014a40:	e067      	b.n	8014b12 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014a42:	683b      	ldr	r3, [r7, #0]
 8014a44:	785b      	ldrb	r3, [r3, #1]
 8014a46:	2b0b      	cmp	r3, #11
 8014a48:	d851      	bhi.n	8014aee <USBD_CDC_Setup+0x18a>
 8014a4a:	a201      	add	r2, pc, #4	; (adr r2, 8014a50 <USBD_CDC_Setup+0xec>)
 8014a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a50:	08014a81 	.word	0x08014a81
 8014a54:	08014afd 	.word	0x08014afd
 8014a58:	08014aef 	.word	0x08014aef
 8014a5c:	08014aef 	.word	0x08014aef
 8014a60:	08014aef 	.word	0x08014aef
 8014a64:	08014aef 	.word	0x08014aef
 8014a68:	08014aef 	.word	0x08014aef
 8014a6c:	08014aef 	.word	0x08014aef
 8014a70:	08014aef 	.word	0x08014aef
 8014a74:	08014aef 	.word	0x08014aef
 8014a78:	08014aab 	.word	0x08014aab
 8014a7c:	08014ad5 	.word	0x08014ad5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a86:	b2db      	uxtb	r3, r3
 8014a88:	2b03      	cmp	r3, #3
 8014a8a:	d107      	bne.n	8014a9c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014a8c:	f107 030a 	add.w	r3, r7, #10
 8014a90:	2202      	movs	r2, #2
 8014a92:	4619      	mov	r1, r3
 8014a94:	6878      	ldr	r0, [r7, #4]
 8014a96:	f001 fd33 	bl	8016500 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014a9a:	e032      	b.n	8014b02 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014a9c:	6839      	ldr	r1, [r7, #0]
 8014a9e:	6878      	ldr	r0, [r7, #4]
 8014aa0:	f001 fcbd 	bl	801641e <USBD_CtlError>
            ret = USBD_FAIL;
 8014aa4:	2303      	movs	r3, #3
 8014aa6:	75fb      	strb	r3, [r7, #23]
          break;
 8014aa8:	e02b      	b.n	8014b02 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014ab0:	b2db      	uxtb	r3, r3
 8014ab2:	2b03      	cmp	r3, #3
 8014ab4:	d107      	bne.n	8014ac6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014ab6:	f107 030d 	add.w	r3, r7, #13
 8014aba:	2201      	movs	r2, #1
 8014abc:	4619      	mov	r1, r3
 8014abe:	6878      	ldr	r0, [r7, #4]
 8014ac0:	f001 fd1e 	bl	8016500 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014ac4:	e01d      	b.n	8014b02 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014ac6:	6839      	ldr	r1, [r7, #0]
 8014ac8:	6878      	ldr	r0, [r7, #4]
 8014aca:	f001 fca8 	bl	801641e <USBD_CtlError>
            ret = USBD_FAIL;
 8014ace:	2303      	movs	r3, #3
 8014ad0:	75fb      	strb	r3, [r7, #23]
          break;
 8014ad2:	e016      	b.n	8014b02 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014ada:	b2db      	uxtb	r3, r3
 8014adc:	2b03      	cmp	r3, #3
 8014ade:	d00f      	beq.n	8014b00 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8014ae0:	6839      	ldr	r1, [r7, #0]
 8014ae2:	6878      	ldr	r0, [r7, #4]
 8014ae4:	f001 fc9b 	bl	801641e <USBD_CtlError>
            ret = USBD_FAIL;
 8014ae8:	2303      	movs	r3, #3
 8014aea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014aec:	e008      	b.n	8014b00 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8014aee:	6839      	ldr	r1, [r7, #0]
 8014af0:	6878      	ldr	r0, [r7, #4]
 8014af2:	f001 fc94 	bl	801641e <USBD_CtlError>
          ret = USBD_FAIL;
 8014af6:	2303      	movs	r3, #3
 8014af8:	75fb      	strb	r3, [r7, #23]
          break;
 8014afa:	e002      	b.n	8014b02 <USBD_CDC_Setup+0x19e>
          break;
 8014afc:	bf00      	nop
 8014afe:	e008      	b.n	8014b12 <USBD_CDC_Setup+0x1ae>
          break;
 8014b00:	bf00      	nop
      }
      break;
 8014b02:	e006      	b.n	8014b12 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8014b04:	6839      	ldr	r1, [r7, #0]
 8014b06:	6878      	ldr	r0, [r7, #4]
 8014b08:	f001 fc89 	bl	801641e <USBD_CtlError>
      ret = USBD_FAIL;
 8014b0c:	2303      	movs	r3, #3
 8014b0e:	75fb      	strb	r3, [r7, #23]
      break;
 8014b10:	bf00      	nop
  }

  return (uint8_t)ret;
 8014b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8014b14:	4618      	mov	r0, r3
 8014b16:	3718      	adds	r7, #24
 8014b18:	46bd      	mov	sp, r7
 8014b1a:	bd80      	pop	{r7, pc}

08014b1c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014b1c:	b580      	push	{r7, lr}
 8014b1e:	b084      	sub	sp, #16
 8014b20:	af00      	add	r7, sp, #0
 8014b22:	6078      	str	r0, [r7, #4]
 8014b24:	460b      	mov	r3, r1
 8014b26:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014b2e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	32b0      	adds	r2, #176	; 0xb0
 8014b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	d101      	bne.n	8014b46 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8014b42:	2303      	movs	r3, #3
 8014b44:	e065      	b.n	8014c12 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	32b0      	adds	r2, #176	; 0xb0
 8014b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b54:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014b56:	78fb      	ldrb	r3, [r7, #3]
 8014b58:	f003 020f 	and.w	r2, r3, #15
 8014b5c:	6879      	ldr	r1, [r7, #4]
 8014b5e:	4613      	mov	r3, r2
 8014b60:	009b      	lsls	r3, r3, #2
 8014b62:	4413      	add	r3, r2
 8014b64:	009b      	lsls	r3, r3, #2
 8014b66:	440b      	add	r3, r1
 8014b68:	3318      	adds	r3, #24
 8014b6a:	681b      	ldr	r3, [r3, #0]
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d02f      	beq.n	8014bd0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8014b70:	78fb      	ldrb	r3, [r7, #3]
 8014b72:	f003 020f 	and.w	r2, r3, #15
 8014b76:	6879      	ldr	r1, [r7, #4]
 8014b78:	4613      	mov	r3, r2
 8014b7a:	009b      	lsls	r3, r3, #2
 8014b7c:	4413      	add	r3, r2
 8014b7e:	009b      	lsls	r3, r3, #2
 8014b80:	440b      	add	r3, r1
 8014b82:	3318      	adds	r3, #24
 8014b84:	681a      	ldr	r2, [r3, #0]
 8014b86:	78fb      	ldrb	r3, [r7, #3]
 8014b88:	f003 010f 	and.w	r1, r3, #15
 8014b8c:	68f8      	ldr	r0, [r7, #12]
 8014b8e:	460b      	mov	r3, r1
 8014b90:	00db      	lsls	r3, r3, #3
 8014b92:	440b      	add	r3, r1
 8014b94:	009b      	lsls	r3, r3, #2
 8014b96:	4403      	add	r3, r0
 8014b98:	3344      	adds	r3, #68	; 0x44
 8014b9a:	681b      	ldr	r3, [r3, #0]
 8014b9c:	fbb2 f1f3 	udiv	r1, r2, r3
 8014ba0:	fb01 f303 	mul.w	r3, r1, r3
 8014ba4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d112      	bne.n	8014bd0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8014baa:	78fb      	ldrb	r3, [r7, #3]
 8014bac:	f003 020f 	and.w	r2, r3, #15
 8014bb0:	6879      	ldr	r1, [r7, #4]
 8014bb2:	4613      	mov	r3, r2
 8014bb4:	009b      	lsls	r3, r3, #2
 8014bb6:	4413      	add	r3, r2
 8014bb8:	009b      	lsls	r3, r3, #2
 8014bba:	440b      	add	r3, r1
 8014bbc:	3318      	adds	r3, #24
 8014bbe:	2200      	movs	r2, #0
 8014bc0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8014bc2:	78f9      	ldrb	r1, [r7, #3]
 8014bc4:	2300      	movs	r3, #0
 8014bc6:	2200      	movs	r2, #0
 8014bc8:	6878      	ldr	r0, [r7, #4]
 8014bca:	f002 fa06 	bl	8016fda <USBD_LL_Transmit>
 8014bce:	e01f      	b.n	8014c10 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8014bd0:	68bb      	ldr	r3, [r7, #8]
 8014bd2:	2200      	movs	r2, #0
 8014bd4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014bde:	687a      	ldr	r2, [r7, #4]
 8014be0:	33b0      	adds	r3, #176	; 0xb0
 8014be2:	009b      	lsls	r3, r3, #2
 8014be4:	4413      	add	r3, r2
 8014be6:	685b      	ldr	r3, [r3, #4]
 8014be8:	691b      	ldr	r3, [r3, #16]
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d010      	beq.n	8014c10 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014bf4:	687a      	ldr	r2, [r7, #4]
 8014bf6:	33b0      	adds	r3, #176	; 0xb0
 8014bf8:	009b      	lsls	r3, r3, #2
 8014bfa:	4413      	add	r3, r2
 8014bfc:	685b      	ldr	r3, [r3, #4]
 8014bfe:	691b      	ldr	r3, [r3, #16]
 8014c00:	68ba      	ldr	r2, [r7, #8]
 8014c02:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8014c06:	68ba      	ldr	r2, [r7, #8]
 8014c08:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8014c0c:	78fa      	ldrb	r2, [r7, #3]
 8014c0e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8014c10:	2300      	movs	r3, #0
}
 8014c12:	4618      	mov	r0, r3
 8014c14:	3710      	adds	r7, #16
 8014c16:	46bd      	mov	sp, r7
 8014c18:	bd80      	pop	{r7, pc}

08014c1a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014c1a:	b580      	push	{r7, lr}
 8014c1c:	b084      	sub	sp, #16
 8014c1e:	af00      	add	r7, sp, #0
 8014c20:	6078      	str	r0, [r7, #4]
 8014c22:	460b      	mov	r3, r1
 8014c24:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	32b0      	adds	r2, #176	; 0xb0
 8014c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c34:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	32b0      	adds	r2, #176	; 0xb0
 8014c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d101      	bne.n	8014c4c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8014c48:	2303      	movs	r3, #3
 8014c4a:	e01a      	b.n	8014c82 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014c4c:	78fb      	ldrb	r3, [r7, #3]
 8014c4e:	4619      	mov	r1, r3
 8014c50:	6878      	ldr	r0, [r7, #4]
 8014c52:	f002 fa04 	bl	801705e <USBD_LL_GetRxDataSize>
 8014c56:	4602      	mov	r2, r0
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014c64:	687a      	ldr	r2, [r7, #4]
 8014c66:	33b0      	adds	r3, #176	; 0xb0
 8014c68:	009b      	lsls	r3, r3, #2
 8014c6a:	4413      	add	r3, r2
 8014c6c:	685b      	ldr	r3, [r3, #4]
 8014c6e:	68db      	ldr	r3, [r3, #12]
 8014c70:	68fa      	ldr	r2, [r7, #12]
 8014c72:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8014c76:	68fa      	ldr	r2, [r7, #12]
 8014c78:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8014c7c:	4611      	mov	r1, r2
 8014c7e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8014c80:	2300      	movs	r3, #0
}
 8014c82:	4618      	mov	r0, r3
 8014c84:	3710      	adds	r7, #16
 8014c86:	46bd      	mov	sp, r7
 8014c88:	bd80      	pop	{r7, pc}

08014c8a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014c8a:	b580      	push	{r7, lr}
 8014c8c:	b084      	sub	sp, #16
 8014c8e:	af00      	add	r7, sp, #0
 8014c90:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	32b0      	adds	r2, #176	; 0xb0
 8014c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ca0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d101      	bne.n	8014cac <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014ca8:	2303      	movs	r3, #3
 8014caa:	e025      	b.n	8014cf8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014cb2:	687a      	ldr	r2, [r7, #4]
 8014cb4:	33b0      	adds	r3, #176	; 0xb0
 8014cb6:	009b      	lsls	r3, r3, #2
 8014cb8:	4413      	add	r3, r2
 8014cba:	685b      	ldr	r3, [r3, #4]
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d01a      	beq.n	8014cf6 <USBD_CDC_EP0_RxReady+0x6c>
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8014cc6:	2bff      	cmp	r3, #255	; 0xff
 8014cc8:	d015      	beq.n	8014cf6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014cd0:	687a      	ldr	r2, [r7, #4]
 8014cd2:	33b0      	adds	r3, #176	; 0xb0
 8014cd4:	009b      	lsls	r3, r3, #2
 8014cd6:	4413      	add	r3, r2
 8014cd8:	685b      	ldr	r3, [r3, #4]
 8014cda:	689b      	ldr	r3, [r3, #8]
 8014cdc:	68fa      	ldr	r2, [r7, #12]
 8014cde:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8014ce2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8014ce4:	68fa      	ldr	r2, [r7, #12]
 8014ce6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014cea:	b292      	uxth	r2, r2
 8014cec:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	22ff      	movs	r2, #255	; 0xff
 8014cf2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8014cf6:	2300      	movs	r3, #0
}
 8014cf8:	4618      	mov	r0, r3
 8014cfa:	3710      	adds	r7, #16
 8014cfc:	46bd      	mov	sp, r7
 8014cfe:	bd80      	pop	{r7, pc}

08014d00 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014d00:	b580      	push	{r7, lr}
 8014d02:	b086      	sub	sp, #24
 8014d04:	af00      	add	r7, sp, #0
 8014d06:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014d08:	2182      	movs	r1, #130	; 0x82
 8014d0a:	4818      	ldr	r0, [pc, #96]	; (8014d6c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014d0c:	f000 fd4f 	bl	80157ae <USBD_GetEpDesc>
 8014d10:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014d12:	2101      	movs	r1, #1
 8014d14:	4815      	ldr	r0, [pc, #84]	; (8014d6c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014d16:	f000 fd4a 	bl	80157ae <USBD_GetEpDesc>
 8014d1a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014d1c:	2181      	movs	r1, #129	; 0x81
 8014d1e:	4813      	ldr	r0, [pc, #76]	; (8014d6c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014d20:	f000 fd45 	bl	80157ae <USBD_GetEpDesc>
 8014d24:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014d26:	697b      	ldr	r3, [r7, #20]
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d002      	beq.n	8014d32 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014d2c:	697b      	ldr	r3, [r7, #20]
 8014d2e:	2210      	movs	r2, #16
 8014d30:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014d32:	693b      	ldr	r3, [r7, #16]
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d006      	beq.n	8014d46 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014d38:	693b      	ldr	r3, [r7, #16]
 8014d3a:	2200      	movs	r2, #0
 8014d3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014d40:	711a      	strb	r2, [r3, #4]
 8014d42:	2200      	movs	r2, #0
 8014d44:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d006      	beq.n	8014d5a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014d4c:	68fb      	ldr	r3, [r7, #12]
 8014d4e:	2200      	movs	r2, #0
 8014d50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014d54:	711a      	strb	r2, [r3, #4]
 8014d56:	2200      	movs	r2, #0
 8014d58:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	2243      	movs	r2, #67	; 0x43
 8014d5e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014d60:	4b02      	ldr	r3, [pc, #8]	; (8014d6c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8014d62:	4618      	mov	r0, r3
 8014d64:	3718      	adds	r7, #24
 8014d66:	46bd      	mov	sp, r7
 8014d68:	bd80      	pop	{r7, pc}
 8014d6a:	bf00      	nop
 8014d6c:	24000054 	.word	0x24000054

08014d70 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014d70:	b580      	push	{r7, lr}
 8014d72:	b086      	sub	sp, #24
 8014d74:	af00      	add	r7, sp, #0
 8014d76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014d78:	2182      	movs	r1, #130	; 0x82
 8014d7a:	4818      	ldr	r0, [pc, #96]	; (8014ddc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014d7c:	f000 fd17 	bl	80157ae <USBD_GetEpDesc>
 8014d80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014d82:	2101      	movs	r1, #1
 8014d84:	4815      	ldr	r0, [pc, #84]	; (8014ddc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014d86:	f000 fd12 	bl	80157ae <USBD_GetEpDesc>
 8014d8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014d8c:	2181      	movs	r1, #129	; 0x81
 8014d8e:	4813      	ldr	r0, [pc, #76]	; (8014ddc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014d90:	f000 fd0d 	bl	80157ae <USBD_GetEpDesc>
 8014d94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014d96:	697b      	ldr	r3, [r7, #20]
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d002      	beq.n	8014da2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8014d9c:	697b      	ldr	r3, [r7, #20]
 8014d9e:	2210      	movs	r2, #16
 8014da0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014da2:	693b      	ldr	r3, [r7, #16]
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d006      	beq.n	8014db6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014da8:	693b      	ldr	r3, [r7, #16]
 8014daa:	2200      	movs	r2, #0
 8014dac:	711a      	strb	r2, [r3, #4]
 8014dae:	2200      	movs	r2, #0
 8014db0:	f042 0202 	orr.w	r2, r2, #2
 8014db4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d006      	beq.n	8014dca <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	2200      	movs	r2, #0
 8014dc0:	711a      	strb	r2, [r3, #4]
 8014dc2:	2200      	movs	r2, #0
 8014dc4:	f042 0202 	orr.w	r2, r2, #2
 8014dc8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	2243      	movs	r2, #67	; 0x43
 8014dce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014dd0:	4b02      	ldr	r3, [pc, #8]	; (8014ddc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8014dd2:	4618      	mov	r0, r3
 8014dd4:	3718      	adds	r7, #24
 8014dd6:	46bd      	mov	sp, r7
 8014dd8:	bd80      	pop	{r7, pc}
 8014dda:	bf00      	nop
 8014ddc:	24000054 	.word	0x24000054

08014de0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014de0:	b580      	push	{r7, lr}
 8014de2:	b086      	sub	sp, #24
 8014de4:	af00      	add	r7, sp, #0
 8014de6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014de8:	2182      	movs	r1, #130	; 0x82
 8014dea:	4818      	ldr	r0, [pc, #96]	; (8014e4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014dec:	f000 fcdf 	bl	80157ae <USBD_GetEpDesc>
 8014df0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014df2:	2101      	movs	r1, #1
 8014df4:	4815      	ldr	r0, [pc, #84]	; (8014e4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014df6:	f000 fcda 	bl	80157ae <USBD_GetEpDesc>
 8014dfa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014dfc:	2181      	movs	r1, #129	; 0x81
 8014dfe:	4813      	ldr	r0, [pc, #76]	; (8014e4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014e00:	f000 fcd5 	bl	80157ae <USBD_GetEpDesc>
 8014e04:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014e06:	697b      	ldr	r3, [r7, #20]
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d002      	beq.n	8014e12 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014e0c:	697b      	ldr	r3, [r7, #20]
 8014e0e:	2210      	movs	r2, #16
 8014e10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014e12:	693b      	ldr	r3, [r7, #16]
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d006      	beq.n	8014e26 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014e18:	693b      	ldr	r3, [r7, #16]
 8014e1a:	2200      	movs	r2, #0
 8014e1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014e20:	711a      	strb	r2, [r3, #4]
 8014e22:	2200      	movs	r2, #0
 8014e24:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014e26:	68fb      	ldr	r3, [r7, #12]
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d006      	beq.n	8014e3a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014e2c:	68fb      	ldr	r3, [r7, #12]
 8014e2e:	2200      	movs	r2, #0
 8014e30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014e34:	711a      	strb	r2, [r3, #4]
 8014e36:	2200      	movs	r2, #0
 8014e38:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	2243      	movs	r2, #67	; 0x43
 8014e3e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014e40:	4b02      	ldr	r3, [pc, #8]	; (8014e4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8014e42:	4618      	mov	r0, r3
 8014e44:	3718      	adds	r7, #24
 8014e46:	46bd      	mov	sp, r7
 8014e48:	bd80      	pop	{r7, pc}
 8014e4a:	bf00      	nop
 8014e4c:	24000054 	.word	0x24000054

08014e50 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014e50:	b480      	push	{r7}
 8014e52:	b083      	sub	sp, #12
 8014e54:	af00      	add	r7, sp, #0
 8014e56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	220a      	movs	r2, #10
 8014e5c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8014e5e:	4b03      	ldr	r3, [pc, #12]	; (8014e6c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014e60:	4618      	mov	r0, r3
 8014e62:	370c      	adds	r7, #12
 8014e64:	46bd      	mov	sp, r7
 8014e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e6a:	4770      	bx	lr
 8014e6c:	24000010 	.word	0x24000010

08014e70 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8014e70:	b480      	push	{r7}
 8014e72:	b083      	sub	sp, #12
 8014e74:	af00      	add	r7, sp, #0
 8014e76:	6078      	str	r0, [r7, #4]
 8014e78:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014e7a:	683b      	ldr	r3, [r7, #0]
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d101      	bne.n	8014e84 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014e80:	2303      	movs	r3, #3
 8014e82:	e009      	b.n	8014e98 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014e8a:	687a      	ldr	r2, [r7, #4]
 8014e8c:	33b0      	adds	r3, #176	; 0xb0
 8014e8e:	009b      	lsls	r3, r3, #2
 8014e90:	4413      	add	r3, r2
 8014e92:	683a      	ldr	r2, [r7, #0]
 8014e94:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8014e96:	2300      	movs	r3, #0
}
 8014e98:	4618      	mov	r0, r3
 8014e9a:	370c      	adds	r7, #12
 8014e9c:	46bd      	mov	sp, r7
 8014e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ea2:	4770      	bx	lr

08014ea4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014ea4:	b480      	push	{r7}
 8014ea6:	b087      	sub	sp, #28
 8014ea8:	af00      	add	r7, sp, #0
 8014eaa:	60f8      	str	r0, [r7, #12]
 8014eac:	60b9      	str	r1, [r7, #8]
 8014eae:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	32b0      	adds	r2, #176	; 0xb0
 8014eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ebe:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014ec0:	697b      	ldr	r3, [r7, #20]
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d101      	bne.n	8014eca <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014ec6:	2303      	movs	r3, #3
 8014ec8:	e008      	b.n	8014edc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8014eca:	697b      	ldr	r3, [r7, #20]
 8014ecc:	68ba      	ldr	r2, [r7, #8]
 8014ece:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8014ed2:	697b      	ldr	r3, [r7, #20]
 8014ed4:	687a      	ldr	r2, [r7, #4]
 8014ed6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8014eda:	2300      	movs	r3, #0
}
 8014edc:	4618      	mov	r0, r3
 8014ede:	371c      	adds	r7, #28
 8014ee0:	46bd      	mov	sp, r7
 8014ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ee6:	4770      	bx	lr

08014ee8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014ee8:	b480      	push	{r7}
 8014eea:	b085      	sub	sp, #20
 8014eec:	af00      	add	r7, sp, #0
 8014eee:	6078      	str	r0, [r7, #4]
 8014ef0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	32b0      	adds	r2, #176	; 0xb0
 8014efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f00:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d101      	bne.n	8014f0c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8014f08:	2303      	movs	r3, #3
 8014f0a:	e004      	b.n	8014f16 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	683a      	ldr	r2, [r7, #0]
 8014f10:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8014f14:	2300      	movs	r3, #0
}
 8014f16:	4618      	mov	r0, r3
 8014f18:	3714      	adds	r7, #20
 8014f1a:	46bd      	mov	sp, r7
 8014f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f20:	4770      	bx	lr
	...

08014f24 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8014f24:	b580      	push	{r7, lr}
 8014f26:	b084      	sub	sp, #16
 8014f28:	af00      	add	r7, sp, #0
 8014f2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	32b0      	adds	r2, #176	; 0xb0
 8014f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f3a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8014f3c:	2301      	movs	r3, #1
 8014f3e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014f40:	68bb      	ldr	r3, [r7, #8]
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d101      	bne.n	8014f4a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014f46:	2303      	movs	r3, #3
 8014f48:	e025      	b.n	8014f96 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8014f4a:	68bb      	ldr	r3, [r7, #8]
 8014f4c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d11f      	bne.n	8014f94 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8014f54:	68bb      	ldr	r3, [r7, #8]
 8014f56:	2201      	movs	r2, #1
 8014f58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8014f5c:	4b10      	ldr	r3, [pc, #64]	; (8014fa0 <USBD_CDC_TransmitPacket+0x7c>)
 8014f5e:	781b      	ldrb	r3, [r3, #0]
 8014f60:	f003 020f 	and.w	r2, r3, #15
 8014f64:	68bb      	ldr	r3, [r7, #8]
 8014f66:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8014f6a:	6878      	ldr	r0, [r7, #4]
 8014f6c:	4613      	mov	r3, r2
 8014f6e:	009b      	lsls	r3, r3, #2
 8014f70:	4413      	add	r3, r2
 8014f72:	009b      	lsls	r3, r3, #2
 8014f74:	4403      	add	r3, r0
 8014f76:	3318      	adds	r3, #24
 8014f78:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8014f7a:	4b09      	ldr	r3, [pc, #36]	; (8014fa0 <USBD_CDC_TransmitPacket+0x7c>)
 8014f7c:	7819      	ldrb	r1, [r3, #0]
 8014f7e:	68bb      	ldr	r3, [r7, #8]
 8014f80:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8014f84:	68bb      	ldr	r3, [r7, #8]
 8014f86:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014f8a:	6878      	ldr	r0, [r7, #4]
 8014f8c:	f002 f825 	bl	8016fda <USBD_LL_Transmit>

    ret = USBD_OK;
 8014f90:	2300      	movs	r3, #0
 8014f92:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8014f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f96:	4618      	mov	r0, r3
 8014f98:	3710      	adds	r7, #16
 8014f9a:	46bd      	mov	sp, r7
 8014f9c:	bd80      	pop	{r7, pc}
 8014f9e:	bf00      	nop
 8014fa0:	24000097 	.word	0x24000097

08014fa4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014fa4:	b580      	push	{r7, lr}
 8014fa6:	b084      	sub	sp, #16
 8014fa8:	af00      	add	r7, sp, #0
 8014faa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	32b0      	adds	r2, #176	; 0xb0
 8014fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014fba:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	32b0      	adds	r2, #176	; 0xb0
 8014fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d101      	bne.n	8014fd2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8014fce:	2303      	movs	r3, #3
 8014fd0:	e018      	b.n	8015004 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	7c1b      	ldrb	r3, [r3, #16]
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d10a      	bne.n	8014ff0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014fda:	4b0c      	ldr	r3, [pc, #48]	; (801500c <USBD_CDC_ReceivePacket+0x68>)
 8014fdc:	7819      	ldrb	r1, [r3, #0]
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014fe4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014fe8:	6878      	ldr	r0, [r7, #4]
 8014fea:	f002 f817 	bl	801701c <USBD_LL_PrepareReceive>
 8014fee:	e008      	b.n	8015002 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014ff0:	4b06      	ldr	r3, [pc, #24]	; (801500c <USBD_CDC_ReceivePacket+0x68>)
 8014ff2:	7819      	ldrb	r1, [r3, #0]
 8014ff4:	68fb      	ldr	r3, [r7, #12]
 8014ff6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014ffa:	2340      	movs	r3, #64	; 0x40
 8014ffc:	6878      	ldr	r0, [r7, #4]
 8014ffe:	f002 f80d 	bl	801701c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015002:	2300      	movs	r3, #0
}
 8015004:	4618      	mov	r0, r3
 8015006:	3710      	adds	r7, #16
 8015008:	46bd      	mov	sp, r7
 801500a:	bd80      	pop	{r7, pc}
 801500c:	24000098 	.word	0x24000098

08015010 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8015010:	b580      	push	{r7, lr}
 8015012:	b086      	sub	sp, #24
 8015014:	af00      	add	r7, sp, #0
 8015016:	60f8      	str	r0, [r7, #12]
 8015018:	60b9      	str	r1, [r7, #8]
 801501a:	4613      	mov	r3, r2
 801501c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	2b00      	cmp	r3, #0
 8015022:	d101      	bne.n	8015028 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015024:	2303      	movs	r3, #3
 8015026:	e01f      	b.n	8015068 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	2200      	movs	r2, #0
 801502c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	2200      	movs	r2, #0
 8015034:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	2200      	movs	r2, #0
 801503c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015040:	68bb      	ldr	r3, [r7, #8]
 8015042:	2b00      	cmp	r3, #0
 8015044:	d003      	beq.n	801504e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	68ba      	ldr	r2, [r7, #8]
 801504a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801504e:	68fb      	ldr	r3, [r7, #12]
 8015050:	2201      	movs	r2, #1
 8015052:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8015056:	68fb      	ldr	r3, [r7, #12]
 8015058:	79fa      	ldrb	r2, [r7, #7]
 801505a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801505c:	68f8      	ldr	r0, [r7, #12]
 801505e:	f001 fe81 	bl	8016d64 <USBD_LL_Init>
 8015062:	4603      	mov	r3, r0
 8015064:	75fb      	strb	r3, [r7, #23]

  return ret;
 8015066:	7dfb      	ldrb	r3, [r7, #23]
}
 8015068:	4618      	mov	r0, r3
 801506a:	3718      	adds	r7, #24
 801506c:	46bd      	mov	sp, r7
 801506e:	bd80      	pop	{r7, pc}

08015070 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015070:	b580      	push	{r7, lr}
 8015072:	b084      	sub	sp, #16
 8015074:	af00      	add	r7, sp, #0
 8015076:	6078      	str	r0, [r7, #4]
 8015078:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801507a:	2300      	movs	r3, #0
 801507c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801507e:	683b      	ldr	r3, [r7, #0]
 8015080:	2b00      	cmp	r3, #0
 8015082:	d101      	bne.n	8015088 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015084:	2303      	movs	r3, #3
 8015086:	e025      	b.n	80150d4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	683a      	ldr	r2, [r7, #0]
 801508c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	32ae      	adds	r2, #174	; 0xae
 801509a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801509e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d00f      	beq.n	80150c4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	32ae      	adds	r2, #174	; 0xae
 80150ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150b4:	f107 020e 	add.w	r2, r7, #14
 80150b8:	4610      	mov	r0, r2
 80150ba:	4798      	blx	r3
 80150bc:	4602      	mov	r2, r0
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80150ca:	1c5a      	adds	r2, r3, #1
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80150d2:	2300      	movs	r3, #0
}
 80150d4:	4618      	mov	r0, r3
 80150d6:	3710      	adds	r7, #16
 80150d8:	46bd      	mov	sp, r7
 80150da:	bd80      	pop	{r7, pc}

080150dc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80150dc:	b580      	push	{r7, lr}
 80150de:	b082      	sub	sp, #8
 80150e0:	af00      	add	r7, sp, #0
 80150e2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80150e4:	6878      	ldr	r0, [r7, #4]
 80150e6:	f001 fe8f 	bl	8016e08 <USBD_LL_Start>
 80150ea:	4603      	mov	r3, r0
}
 80150ec:	4618      	mov	r0, r3
 80150ee:	3708      	adds	r7, #8
 80150f0:	46bd      	mov	sp, r7
 80150f2:	bd80      	pop	{r7, pc}

080150f4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80150f4:	b480      	push	{r7}
 80150f6:	b083      	sub	sp, #12
 80150f8:	af00      	add	r7, sp, #0
 80150fa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80150fc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80150fe:	4618      	mov	r0, r3
 8015100:	370c      	adds	r7, #12
 8015102:	46bd      	mov	sp, r7
 8015104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015108:	4770      	bx	lr

0801510a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801510a:	b580      	push	{r7, lr}
 801510c:	b084      	sub	sp, #16
 801510e:	af00      	add	r7, sp, #0
 8015110:	6078      	str	r0, [r7, #4]
 8015112:	460b      	mov	r3, r1
 8015114:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015116:	2300      	movs	r3, #0
 8015118:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015120:	2b00      	cmp	r3, #0
 8015122:	d009      	beq.n	8015138 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	78fa      	ldrb	r2, [r7, #3]
 801512e:	4611      	mov	r1, r2
 8015130:	6878      	ldr	r0, [r7, #4]
 8015132:	4798      	blx	r3
 8015134:	4603      	mov	r3, r0
 8015136:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015138:	7bfb      	ldrb	r3, [r7, #15]
}
 801513a:	4618      	mov	r0, r3
 801513c:	3710      	adds	r7, #16
 801513e:	46bd      	mov	sp, r7
 8015140:	bd80      	pop	{r7, pc}

08015142 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015142:	b580      	push	{r7, lr}
 8015144:	b084      	sub	sp, #16
 8015146:	af00      	add	r7, sp, #0
 8015148:	6078      	str	r0, [r7, #4]
 801514a:	460b      	mov	r3, r1
 801514c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801514e:	2300      	movs	r3, #0
 8015150:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015158:	685b      	ldr	r3, [r3, #4]
 801515a:	78fa      	ldrb	r2, [r7, #3]
 801515c:	4611      	mov	r1, r2
 801515e:	6878      	ldr	r0, [r7, #4]
 8015160:	4798      	blx	r3
 8015162:	4603      	mov	r3, r0
 8015164:	2b00      	cmp	r3, #0
 8015166:	d001      	beq.n	801516c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8015168:	2303      	movs	r3, #3
 801516a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801516c:	7bfb      	ldrb	r3, [r7, #15]
}
 801516e:	4618      	mov	r0, r3
 8015170:	3710      	adds	r7, #16
 8015172:	46bd      	mov	sp, r7
 8015174:	bd80      	pop	{r7, pc}

08015176 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015176:	b580      	push	{r7, lr}
 8015178:	b084      	sub	sp, #16
 801517a:	af00      	add	r7, sp, #0
 801517c:	6078      	str	r0, [r7, #4]
 801517e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015186:	6839      	ldr	r1, [r7, #0]
 8015188:	4618      	mov	r0, r3
 801518a:	f001 f90e 	bl	80163aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	2201      	movs	r2, #1
 8015192:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801519c:	461a      	mov	r2, r3
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80151aa:	f003 031f 	and.w	r3, r3, #31
 80151ae:	2b02      	cmp	r3, #2
 80151b0:	d01a      	beq.n	80151e8 <USBD_LL_SetupStage+0x72>
 80151b2:	2b02      	cmp	r3, #2
 80151b4:	d822      	bhi.n	80151fc <USBD_LL_SetupStage+0x86>
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d002      	beq.n	80151c0 <USBD_LL_SetupStage+0x4a>
 80151ba:	2b01      	cmp	r3, #1
 80151bc:	d00a      	beq.n	80151d4 <USBD_LL_SetupStage+0x5e>
 80151be:	e01d      	b.n	80151fc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80151c6:	4619      	mov	r1, r3
 80151c8:	6878      	ldr	r0, [r7, #4]
 80151ca:	f000 fb65 	bl	8015898 <USBD_StdDevReq>
 80151ce:	4603      	mov	r3, r0
 80151d0:	73fb      	strb	r3, [r7, #15]
      break;
 80151d2:	e020      	b.n	8015216 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80151da:	4619      	mov	r1, r3
 80151dc:	6878      	ldr	r0, [r7, #4]
 80151de:	f000 fbcd 	bl	801597c <USBD_StdItfReq>
 80151e2:	4603      	mov	r3, r0
 80151e4:	73fb      	strb	r3, [r7, #15]
      break;
 80151e6:	e016      	b.n	8015216 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80151ee:	4619      	mov	r1, r3
 80151f0:	6878      	ldr	r0, [r7, #4]
 80151f2:	f000 fc2f 	bl	8015a54 <USBD_StdEPReq>
 80151f6:	4603      	mov	r3, r0
 80151f8:	73fb      	strb	r3, [r7, #15]
      break;
 80151fa:	e00c      	b.n	8015216 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015202:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015206:	b2db      	uxtb	r3, r3
 8015208:	4619      	mov	r1, r3
 801520a:	6878      	ldr	r0, [r7, #4]
 801520c:	f001 fe5c 	bl	8016ec8 <USBD_LL_StallEP>
 8015210:	4603      	mov	r3, r0
 8015212:	73fb      	strb	r3, [r7, #15]
      break;
 8015214:	bf00      	nop
  }

  return ret;
 8015216:	7bfb      	ldrb	r3, [r7, #15]
}
 8015218:	4618      	mov	r0, r3
 801521a:	3710      	adds	r7, #16
 801521c:	46bd      	mov	sp, r7
 801521e:	bd80      	pop	{r7, pc}

08015220 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015220:	b580      	push	{r7, lr}
 8015222:	b086      	sub	sp, #24
 8015224:	af00      	add	r7, sp, #0
 8015226:	60f8      	str	r0, [r7, #12]
 8015228:	460b      	mov	r3, r1
 801522a:	607a      	str	r2, [r7, #4]
 801522c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801522e:	2300      	movs	r3, #0
 8015230:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8015232:	7afb      	ldrb	r3, [r7, #11]
 8015234:	2b00      	cmp	r3, #0
 8015236:	d16e      	bne.n	8015316 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801523e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015246:	2b03      	cmp	r3, #3
 8015248:	f040 8098 	bne.w	801537c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 801524c:	693b      	ldr	r3, [r7, #16]
 801524e:	689a      	ldr	r2, [r3, #8]
 8015250:	693b      	ldr	r3, [r7, #16]
 8015252:	68db      	ldr	r3, [r3, #12]
 8015254:	429a      	cmp	r2, r3
 8015256:	d913      	bls.n	8015280 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8015258:	693b      	ldr	r3, [r7, #16]
 801525a:	689a      	ldr	r2, [r3, #8]
 801525c:	693b      	ldr	r3, [r7, #16]
 801525e:	68db      	ldr	r3, [r3, #12]
 8015260:	1ad2      	subs	r2, r2, r3
 8015262:	693b      	ldr	r3, [r7, #16]
 8015264:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8015266:	693b      	ldr	r3, [r7, #16]
 8015268:	68da      	ldr	r2, [r3, #12]
 801526a:	693b      	ldr	r3, [r7, #16]
 801526c:	689b      	ldr	r3, [r3, #8]
 801526e:	4293      	cmp	r3, r2
 8015270:	bf28      	it	cs
 8015272:	4613      	movcs	r3, r2
 8015274:	461a      	mov	r2, r3
 8015276:	6879      	ldr	r1, [r7, #4]
 8015278:	68f8      	ldr	r0, [r7, #12]
 801527a:	f001 f98a 	bl	8016592 <USBD_CtlContinueRx>
 801527e:	e07d      	b.n	801537c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015286:	f003 031f 	and.w	r3, r3, #31
 801528a:	2b02      	cmp	r3, #2
 801528c:	d014      	beq.n	80152b8 <USBD_LL_DataOutStage+0x98>
 801528e:	2b02      	cmp	r3, #2
 8015290:	d81d      	bhi.n	80152ce <USBD_LL_DataOutStage+0xae>
 8015292:	2b00      	cmp	r3, #0
 8015294:	d002      	beq.n	801529c <USBD_LL_DataOutStage+0x7c>
 8015296:	2b01      	cmp	r3, #1
 8015298:	d003      	beq.n	80152a2 <USBD_LL_DataOutStage+0x82>
 801529a:	e018      	b.n	80152ce <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 801529c:	2300      	movs	r3, #0
 801529e:	75bb      	strb	r3, [r7, #22]
            break;
 80152a0:	e018      	b.n	80152d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80152a8:	b2db      	uxtb	r3, r3
 80152aa:	4619      	mov	r1, r3
 80152ac:	68f8      	ldr	r0, [r7, #12]
 80152ae:	f000 fa64 	bl	801577a <USBD_CoreFindIF>
 80152b2:	4603      	mov	r3, r0
 80152b4:	75bb      	strb	r3, [r7, #22]
            break;
 80152b6:	e00d      	b.n	80152d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80152be:	b2db      	uxtb	r3, r3
 80152c0:	4619      	mov	r1, r3
 80152c2:	68f8      	ldr	r0, [r7, #12]
 80152c4:	f000 fa66 	bl	8015794 <USBD_CoreFindEP>
 80152c8:	4603      	mov	r3, r0
 80152ca:	75bb      	strb	r3, [r7, #22]
            break;
 80152cc:	e002      	b.n	80152d4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80152ce:	2300      	movs	r3, #0
 80152d0:	75bb      	strb	r3, [r7, #22]
            break;
 80152d2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80152d4:	7dbb      	ldrb	r3, [r7, #22]
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d119      	bne.n	801530e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80152da:	68fb      	ldr	r3, [r7, #12]
 80152dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80152e0:	b2db      	uxtb	r3, r3
 80152e2:	2b03      	cmp	r3, #3
 80152e4:	d113      	bne.n	801530e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80152e6:	7dba      	ldrb	r2, [r7, #22]
 80152e8:	68fb      	ldr	r3, [r7, #12]
 80152ea:	32ae      	adds	r2, #174	; 0xae
 80152ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152f0:	691b      	ldr	r3, [r3, #16]
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d00b      	beq.n	801530e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80152f6:	7dba      	ldrb	r2, [r7, #22]
 80152f8:	68fb      	ldr	r3, [r7, #12]
 80152fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80152fe:	7dba      	ldrb	r2, [r7, #22]
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	32ae      	adds	r2, #174	; 0xae
 8015304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015308:	691b      	ldr	r3, [r3, #16]
 801530a:	68f8      	ldr	r0, [r7, #12]
 801530c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801530e:	68f8      	ldr	r0, [r7, #12]
 8015310:	f001 f950 	bl	80165b4 <USBD_CtlSendStatus>
 8015314:	e032      	b.n	801537c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8015316:	7afb      	ldrb	r3, [r7, #11]
 8015318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801531c:	b2db      	uxtb	r3, r3
 801531e:	4619      	mov	r1, r3
 8015320:	68f8      	ldr	r0, [r7, #12]
 8015322:	f000 fa37 	bl	8015794 <USBD_CoreFindEP>
 8015326:	4603      	mov	r3, r0
 8015328:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801532a:	7dbb      	ldrb	r3, [r7, #22]
 801532c:	2bff      	cmp	r3, #255	; 0xff
 801532e:	d025      	beq.n	801537c <USBD_LL_DataOutStage+0x15c>
 8015330:	7dbb      	ldrb	r3, [r7, #22]
 8015332:	2b00      	cmp	r3, #0
 8015334:	d122      	bne.n	801537c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015336:	68fb      	ldr	r3, [r7, #12]
 8015338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801533c:	b2db      	uxtb	r3, r3
 801533e:	2b03      	cmp	r3, #3
 8015340:	d117      	bne.n	8015372 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8015342:	7dba      	ldrb	r2, [r7, #22]
 8015344:	68fb      	ldr	r3, [r7, #12]
 8015346:	32ae      	adds	r2, #174	; 0xae
 8015348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801534c:	699b      	ldr	r3, [r3, #24]
 801534e:	2b00      	cmp	r3, #0
 8015350:	d00f      	beq.n	8015372 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8015352:	7dba      	ldrb	r2, [r7, #22]
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801535a:	7dba      	ldrb	r2, [r7, #22]
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	32ae      	adds	r2, #174	; 0xae
 8015360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015364:	699b      	ldr	r3, [r3, #24]
 8015366:	7afa      	ldrb	r2, [r7, #11]
 8015368:	4611      	mov	r1, r2
 801536a:	68f8      	ldr	r0, [r7, #12]
 801536c:	4798      	blx	r3
 801536e:	4603      	mov	r3, r0
 8015370:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8015372:	7dfb      	ldrb	r3, [r7, #23]
 8015374:	2b00      	cmp	r3, #0
 8015376:	d001      	beq.n	801537c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8015378:	7dfb      	ldrb	r3, [r7, #23]
 801537a:	e000      	b.n	801537e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 801537c:	2300      	movs	r3, #0
}
 801537e:	4618      	mov	r0, r3
 8015380:	3718      	adds	r7, #24
 8015382:	46bd      	mov	sp, r7
 8015384:	bd80      	pop	{r7, pc}

08015386 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8015386:	b580      	push	{r7, lr}
 8015388:	b086      	sub	sp, #24
 801538a:	af00      	add	r7, sp, #0
 801538c:	60f8      	str	r0, [r7, #12]
 801538e:	460b      	mov	r3, r1
 8015390:	607a      	str	r2, [r7, #4]
 8015392:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8015394:	7afb      	ldrb	r3, [r7, #11]
 8015396:	2b00      	cmp	r3, #0
 8015398:	d16f      	bne.n	801547a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801539a:	68fb      	ldr	r3, [r7, #12]
 801539c:	3314      	adds	r3, #20
 801539e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80153a0:	68fb      	ldr	r3, [r7, #12]
 80153a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80153a6:	2b02      	cmp	r3, #2
 80153a8:	d15a      	bne.n	8015460 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80153aa:	693b      	ldr	r3, [r7, #16]
 80153ac:	689a      	ldr	r2, [r3, #8]
 80153ae:	693b      	ldr	r3, [r7, #16]
 80153b0:	68db      	ldr	r3, [r3, #12]
 80153b2:	429a      	cmp	r2, r3
 80153b4:	d914      	bls.n	80153e0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80153b6:	693b      	ldr	r3, [r7, #16]
 80153b8:	689a      	ldr	r2, [r3, #8]
 80153ba:	693b      	ldr	r3, [r7, #16]
 80153bc:	68db      	ldr	r3, [r3, #12]
 80153be:	1ad2      	subs	r2, r2, r3
 80153c0:	693b      	ldr	r3, [r7, #16]
 80153c2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80153c4:	693b      	ldr	r3, [r7, #16]
 80153c6:	689b      	ldr	r3, [r3, #8]
 80153c8:	461a      	mov	r2, r3
 80153ca:	6879      	ldr	r1, [r7, #4]
 80153cc:	68f8      	ldr	r0, [r7, #12]
 80153ce:	f001 f8b2 	bl	8016536 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80153d2:	2300      	movs	r3, #0
 80153d4:	2200      	movs	r2, #0
 80153d6:	2100      	movs	r1, #0
 80153d8:	68f8      	ldr	r0, [r7, #12]
 80153da:	f001 fe1f 	bl	801701c <USBD_LL_PrepareReceive>
 80153de:	e03f      	b.n	8015460 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80153e0:	693b      	ldr	r3, [r7, #16]
 80153e2:	68da      	ldr	r2, [r3, #12]
 80153e4:	693b      	ldr	r3, [r7, #16]
 80153e6:	689b      	ldr	r3, [r3, #8]
 80153e8:	429a      	cmp	r2, r3
 80153ea:	d11c      	bne.n	8015426 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80153ec:	693b      	ldr	r3, [r7, #16]
 80153ee:	685a      	ldr	r2, [r3, #4]
 80153f0:	693b      	ldr	r3, [r7, #16]
 80153f2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80153f4:	429a      	cmp	r2, r3
 80153f6:	d316      	bcc.n	8015426 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80153f8:	693b      	ldr	r3, [r7, #16]
 80153fa:	685a      	ldr	r2, [r3, #4]
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8015402:	429a      	cmp	r2, r3
 8015404:	d20f      	bcs.n	8015426 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015406:	2200      	movs	r2, #0
 8015408:	2100      	movs	r1, #0
 801540a:	68f8      	ldr	r0, [r7, #12]
 801540c:	f001 f893 	bl	8016536 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	2200      	movs	r2, #0
 8015414:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015418:	2300      	movs	r3, #0
 801541a:	2200      	movs	r2, #0
 801541c:	2100      	movs	r1, #0
 801541e:	68f8      	ldr	r0, [r7, #12]
 8015420:	f001 fdfc 	bl	801701c <USBD_LL_PrepareReceive>
 8015424:	e01c      	b.n	8015460 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015426:	68fb      	ldr	r3, [r7, #12]
 8015428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801542c:	b2db      	uxtb	r3, r3
 801542e:	2b03      	cmp	r3, #3
 8015430:	d10f      	bne.n	8015452 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8015432:	68fb      	ldr	r3, [r7, #12]
 8015434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015438:	68db      	ldr	r3, [r3, #12]
 801543a:	2b00      	cmp	r3, #0
 801543c:	d009      	beq.n	8015452 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801543e:	68fb      	ldr	r3, [r7, #12]
 8015440:	2200      	movs	r2, #0
 8015442:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801544c:	68db      	ldr	r3, [r3, #12]
 801544e:	68f8      	ldr	r0, [r7, #12]
 8015450:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015452:	2180      	movs	r1, #128	; 0x80
 8015454:	68f8      	ldr	r0, [r7, #12]
 8015456:	f001 fd37 	bl	8016ec8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801545a:	68f8      	ldr	r0, [r7, #12]
 801545c:	f001 f8bd 	bl	80165da <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8015466:	2b00      	cmp	r3, #0
 8015468:	d03a      	beq.n	80154e0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801546a:	68f8      	ldr	r0, [r7, #12]
 801546c:	f7ff fe42 	bl	80150f4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	2200      	movs	r2, #0
 8015474:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8015478:	e032      	b.n	80154e0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801547a:	7afb      	ldrb	r3, [r7, #11]
 801547c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015480:	b2db      	uxtb	r3, r3
 8015482:	4619      	mov	r1, r3
 8015484:	68f8      	ldr	r0, [r7, #12]
 8015486:	f000 f985 	bl	8015794 <USBD_CoreFindEP>
 801548a:	4603      	mov	r3, r0
 801548c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801548e:	7dfb      	ldrb	r3, [r7, #23]
 8015490:	2bff      	cmp	r3, #255	; 0xff
 8015492:	d025      	beq.n	80154e0 <USBD_LL_DataInStage+0x15a>
 8015494:	7dfb      	ldrb	r3, [r7, #23]
 8015496:	2b00      	cmp	r3, #0
 8015498:	d122      	bne.n	80154e0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801549a:	68fb      	ldr	r3, [r7, #12]
 801549c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80154a0:	b2db      	uxtb	r3, r3
 80154a2:	2b03      	cmp	r3, #3
 80154a4:	d11c      	bne.n	80154e0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80154a6:	7dfa      	ldrb	r2, [r7, #23]
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	32ae      	adds	r2, #174	; 0xae
 80154ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154b0:	695b      	ldr	r3, [r3, #20]
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d014      	beq.n	80154e0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80154b6:	7dfa      	ldrb	r2, [r7, #23]
 80154b8:	68fb      	ldr	r3, [r7, #12]
 80154ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80154be:	7dfa      	ldrb	r2, [r7, #23]
 80154c0:	68fb      	ldr	r3, [r7, #12]
 80154c2:	32ae      	adds	r2, #174	; 0xae
 80154c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154c8:	695b      	ldr	r3, [r3, #20]
 80154ca:	7afa      	ldrb	r2, [r7, #11]
 80154cc:	4611      	mov	r1, r2
 80154ce:	68f8      	ldr	r0, [r7, #12]
 80154d0:	4798      	blx	r3
 80154d2:	4603      	mov	r3, r0
 80154d4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80154d6:	7dbb      	ldrb	r3, [r7, #22]
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d001      	beq.n	80154e0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80154dc:	7dbb      	ldrb	r3, [r7, #22]
 80154de:	e000      	b.n	80154e2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80154e0:	2300      	movs	r3, #0
}
 80154e2:	4618      	mov	r0, r3
 80154e4:	3718      	adds	r7, #24
 80154e6:	46bd      	mov	sp, r7
 80154e8:	bd80      	pop	{r7, pc}

080154ea <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80154ea:	b580      	push	{r7, lr}
 80154ec:	b084      	sub	sp, #16
 80154ee:	af00      	add	r7, sp, #0
 80154f0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80154f2:	2300      	movs	r3, #0
 80154f4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	2201      	movs	r2, #1
 80154fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	2200      	movs	r2, #0
 8015502:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	2200      	movs	r2, #0
 801550a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	2200      	movs	r2, #0
 8015510:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	2200      	movs	r2, #0
 8015518:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015522:	2b00      	cmp	r3, #0
 8015524:	d014      	beq.n	8015550 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801552c:	685b      	ldr	r3, [r3, #4]
 801552e:	2b00      	cmp	r3, #0
 8015530:	d00e      	beq.n	8015550 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015538:	685b      	ldr	r3, [r3, #4]
 801553a:	687a      	ldr	r2, [r7, #4]
 801553c:	6852      	ldr	r2, [r2, #4]
 801553e:	b2d2      	uxtb	r2, r2
 8015540:	4611      	mov	r1, r2
 8015542:	6878      	ldr	r0, [r7, #4]
 8015544:	4798      	blx	r3
 8015546:	4603      	mov	r3, r0
 8015548:	2b00      	cmp	r3, #0
 801554a:	d001      	beq.n	8015550 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 801554c:	2303      	movs	r3, #3
 801554e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015550:	2340      	movs	r3, #64	; 0x40
 8015552:	2200      	movs	r2, #0
 8015554:	2100      	movs	r1, #0
 8015556:	6878      	ldr	r0, [r7, #4]
 8015558:	f001 fc71 	bl	8016e3e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	2201      	movs	r2, #1
 8015560:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	2240      	movs	r2, #64	; 0x40
 8015568:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801556c:	2340      	movs	r3, #64	; 0x40
 801556e:	2200      	movs	r2, #0
 8015570:	2180      	movs	r1, #128	; 0x80
 8015572:	6878      	ldr	r0, [r7, #4]
 8015574:	f001 fc63 	bl	8016e3e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	2201      	movs	r2, #1
 801557c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	2240      	movs	r2, #64	; 0x40
 8015582:	621a      	str	r2, [r3, #32]

  return ret;
 8015584:	7bfb      	ldrb	r3, [r7, #15]
}
 8015586:	4618      	mov	r0, r3
 8015588:	3710      	adds	r7, #16
 801558a:	46bd      	mov	sp, r7
 801558c:	bd80      	pop	{r7, pc}

0801558e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801558e:	b480      	push	{r7}
 8015590:	b083      	sub	sp, #12
 8015592:	af00      	add	r7, sp, #0
 8015594:	6078      	str	r0, [r7, #4]
 8015596:	460b      	mov	r3, r1
 8015598:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	78fa      	ldrb	r2, [r7, #3]
 801559e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80155a0:	2300      	movs	r3, #0
}
 80155a2:	4618      	mov	r0, r3
 80155a4:	370c      	adds	r7, #12
 80155a6:	46bd      	mov	sp, r7
 80155a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ac:	4770      	bx	lr

080155ae <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80155ae:	b480      	push	{r7}
 80155b0:	b083      	sub	sp, #12
 80155b2:	af00      	add	r7, sp, #0
 80155b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80155bc:	b2db      	uxtb	r3, r3
 80155be:	2b04      	cmp	r3, #4
 80155c0:	d006      	beq.n	80155d0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80155c8:	b2da      	uxtb	r2, r3
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	2204      	movs	r2, #4
 80155d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80155d8:	2300      	movs	r3, #0
}
 80155da:	4618      	mov	r0, r3
 80155dc:	370c      	adds	r7, #12
 80155de:	46bd      	mov	sp, r7
 80155e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155e4:	4770      	bx	lr

080155e6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80155e6:	b480      	push	{r7}
 80155e8:	b083      	sub	sp, #12
 80155ea:	af00      	add	r7, sp, #0
 80155ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80155f4:	b2db      	uxtb	r3, r3
 80155f6:	2b04      	cmp	r3, #4
 80155f8:	d106      	bne.n	8015608 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8015600:	b2da      	uxtb	r2, r3
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8015608:	2300      	movs	r3, #0
}
 801560a:	4618      	mov	r0, r3
 801560c:	370c      	adds	r7, #12
 801560e:	46bd      	mov	sp, r7
 8015610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015614:	4770      	bx	lr

08015616 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015616:	b580      	push	{r7, lr}
 8015618:	b082      	sub	sp, #8
 801561a:	af00      	add	r7, sp, #0
 801561c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015624:	b2db      	uxtb	r3, r3
 8015626:	2b03      	cmp	r3, #3
 8015628:	d110      	bne.n	801564c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015630:	2b00      	cmp	r3, #0
 8015632:	d00b      	beq.n	801564c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801563a:	69db      	ldr	r3, [r3, #28]
 801563c:	2b00      	cmp	r3, #0
 801563e:	d005      	beq.n	801564c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015646:	69db      	ldr	r3, [r3, #28]
 8015648:	6878      	ldr	r0, [r7, #4]
 801564a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801564c:	2300      	movs	r3, #0
}
 801564e:	4618      	mov	r0, r3
 8015650:	3708      	adds	r7, #8
 8015652:	46bd      	mov	sp, r7
 8015654:	bd80      	pop	{r7, pc}

08015656 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8015656:	b580      	push	{r7, lr}
 8015658:	b082      	sub	sp, #8
 801565a:	af00      	add	r7, sp, #0
 801565c:	6078      	str	r0, [r7, #4]
 801565e:	460b      	mov	r3, r1
 8015660:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	32ae      	adds	r2, #174	; 0xae
 801566c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015670:	2b00      	cmp	r3, #0
 8015672:	d101      	bne.n	8015678 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8015674:	2303      	movs	r3, #3
 8015676:	e01c      	b.n	80156b2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801567e:	b2db      	uxtb	r3, r3
 8015680:	2b03      	cmp	r3, #3
 8015682:	d115      	bne.n	80156b0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	32ae      	adds	r2, #174	; 0xae
 801568e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015692:	6a1b      	ldr	r3, [r3, #32]
 8015694:	2b00      	cmp	r3, #0
 8015696:	d00b      	beq.n	80156b0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	32ae      	adds	r2, #174	; 0xae
 80156a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156a6:	6a1b      	ldr	r3, [r3, #32]
 80156a8:	78fa      	ldrb	r2, [r7, #3]
 80156aa:	4611      	mov	r1, r2
 80156ac:	6878      	ldr	r0, [r7, #4]
 80156ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80156b0:	2300      	movs	r3, #0
}
 80156b2:	4618      	mov	r0, r3
 80156b4:	3708      	adds	r7, #8
 80156b6:	46bd      	mov	sp, r7
 80156b8:	bd80      	pop	{r7, pc}

080156ba <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80156ba:	b580      	push	{r7, lr}
 80156bc:	b082      	sub	sp, #8
 80156be:	af00      	add	r7, sp, #0
 80156c0:	6078      	str	r0, [r7, #4]
 80156c2:	460b      	mov	r3, r1
 80156c4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	32ae      	adds	r2, #174	; 0xae
 80156d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d101      	bne.n	80156dc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80156d8:	2303      	movs	r3, #3
 80156da:	e01c      	b.n	8015716 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80156e2:	b2db      	uxtb	r3, r3
 80156e4:	2b03      	cmp	r3, #3
 80156e6:	d115      	bne.n	8015714 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	32ae      	adds	r2, #174	; 0xae
 80156f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d00b      	beq.n	8015714 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	32ae      	adds	r2, #174	; 0xae
 8015706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801570a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801570c:	78fa      	ldrb	r2, [r7, #3]
 801570e:	4611      	mov	r1, r2
 8015710:	6878      	ldr	r0, [r7, #4]
 8015712:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015714:	2300      	movs	r3, #0
}
 8015716:	4618      	mov	r0, r3
 8015718:	3708      	adds	r7, #8
 801571a:	46bd      	mov	sp, r7
 801571c:	bd80      	pop	{r7, pc}

0801571e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801571e:	b480      	push	{r7}
 8015720:	b083      	sub	sp, #12
 8015722:	af00      	add	r7, sp, #0
 8015724:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015726:	2300      	movs	r3, #0
}
 8015728:	4618      	mov	r0, r3
 801572a:	370c      	adds	r7, #12
 801572c:	46bd      	mov	sp, r7
 801572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015732:	4770      	bx	lr

08015734 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8015734:	b580      	push	{r7, lr}
 8015736:	b084      	sub	sp, #16
 8015738:	af00      	add	r7, sp, #0
 801573a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801573c:	2300      	movs	r3, #0
 801573e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	2201      	movs	r2, #1
 8015744:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801574e:	2b00      	cmp	r3, #0
 8015750:	d00e      	beq.n	8015770 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015758:	685b      	ldr	r3, [r3, #4]
 801575a:	687a      	ldr	r2, [r7, #4]
 801575c:	6852      	ldr	r2, [r2, #4]
 801575e:	b2d2      	uxtb	r2, r2
 8015760:	4611      	mov	r1, r2
 8015762:	6878      	ldr	r0, [r7, #4]
 8015764:	4798      	blx	r3
 8015766:	4603      	mov	r3, r0
 8015768:	2b00      	cmp	r3, #0
 801576a:	d001      	beq.n	8015770 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801576c:	2303      	movs	r3, #3
 801576e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015770:	7bfb      	ldrb	r3, [r7, #15]
}
 8015772:	4618      	mov	r0, r3
 8015774:	3710      	adds	r7, #16
 8015776:	46bd      	mov	sp, r7
 8015778:	bd80      	pop	{r7, pc}

0801577a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801577a:	b480      	push	{r7}
 801577c:	b083      	sub	sp, #12
 801577e:	af00      	add	r7, sp, #0
 8015780:	6078      	str	r0, [r7, #4]
 8015782:	460b      	mov	r3, r1
 8015784:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015786:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015788:	4618      	mov	r0, r3
 801578a:	370c      	adds	r7, #12
 801578c:	46bd      	mov	sp, r7
 801578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015792:	4770      	bx	lr

08015794 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015794:	b480      	push	{r7}
 8015796:	b083      	sub	sp, #12
 8015798:	af00      	add	r7, sp, #0
 801579a:	6078      	str	r0, [r7, #4]
 801579c:	460b      	mov	r3, r1
 801579e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80157a0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80157a2:	4618      	mov	r0, r3
 80157a4:	370c      	adds	r7, #12
 80157a6:	46bd      	mov	sp, r7
 80157a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ac:	4770      	bx	lr

080157ae <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80157ae:	b580      	push	{r7, lr}
 80157b0:	b086      	sub	sp, #24
 80157b2:	af00      	add	r7, sp, #0
 80157b4:	6078      	str	r0, [r7, #4]
 80157b6:	460b      	mov	r3, r1
 80157b8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80157c2:	2300      	movs	r3, #0
 80157c4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80157c6:	68fb      	ldr	r3, [r7, #12]
 80157c8:	885b      	ldrh	r3, [r3, #2]
 80157ca:	b29a      	uxth	r2, r3
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	781b      	ldrb	r3, [r3, #0]
 80157d0:	b29b      	uxth	r3, r3
 80157d2:	429a      	cmp	r2, r3
 80157d4:	d920      	bls.n	8015818 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80157d6:	68fb      	ldr	r3, [r7, #12]
 80157d8:	781b      	ldrb	r3, [r3, #0]
 80157da:	b29b      	uxth	r3, r3
 80157dc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80157de:	e013      	b.n	8015808 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80157e0:	f107 030a 	add.w	r3, r7, #10
 80157e4:	4619      	mov	r1, r3
 80157e6:	6978      	ldr	r0, [r7, #20]
 80157e8:	f000 f81b 	bl	8015822 <USBD_GetNextDesc>
 80157ec:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80157ee:	697b      	ldr	r3, [r7, #20]
 80157f0:	785b      	ldrb	r3, [r3, #1]
 80157f2:	2b05      	cmp	r3, #5
 80157f4:	d108      	bne.n	8015808 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80157f6:	697b      	ldr	r3, [r7, #20]
 80157f8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80157fa:	693b      	ldr	r3, [r7, #16]
 80157fc:	789b      	ldrb	r3, [r3, #2]
 80157fe:	78fa      	ldrb	r2, [r7, #3]
 8015800:	429a      	cmp	r2, r3
 8015802:	d008      	beq.n	8015816 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8015804:	2300      	movs	r3, #0
 8015806:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	885b      	ldrh	r3, [r3, #2]
 801580c:	b29a      	uxth	r2, r3
 801580e:	897b      	ldrh	r3, [r7, #10]
 8015810:	429a      	cmp	r2, r3
 8015812:	d8e5      	bhi.n	80157e0 <USBD_GetEpDesc+0x32>
 8015814:	e000      	b.n	8015818 <USBD_GetEpDesc+0x6a>
          break;
 8015816:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8015818:	693b      	ldr	r3, [r7, #16]
}
 801581a:	4618      	mov	r0, r3
 801581c:	3718      	adds	r7, #24
 801581e:	46bd      	mov	sp, r7
 8015820:	bd80      	pop	{r7, pc}

08015822 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8015822:	b480      	push	{r7}
 8015824:	b085      	sub	sp, #20
 8015826:	af00      	add	r7, sp, #0
 8015828:	6078      	str	r0, [r7, #4]
 801582a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8015830:	683b      	ldr	r3, [r7, #0]
 8015832:	881a      	ldrh	r2, [r3, #0]
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	781b      	ldrb	r3, [r3, #0]
 8015838:	b29b      	uxth	r3, r3
 801583a:	4413      	add	r3, r2
 801583c:	b29a      	uxth	r2, r3
 801583e:	683b      	ldr	r3, [r7, #0]
 8015840:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	781b      	ldrb	r3, [r3, #0]
 8015846:	461a      	mov	r2, r3
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	4413      	add	r3, r2
 801584c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801584e:	68fb      	ldr	r3, [r7, #12]
}
 8015850:	4618      	mov	r0, r3
 8015852:	3714      	adds	r7, #20
 8015854:	46bd      	mov	sp, r7
 8015856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801585a:	4770      	bx	lr

0801585c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801585c:	b480      	push	{r7}
 801585e:	b087      	sub	sp, #28
 8015860:	af00      	add	r7, sp, #0
 8015862:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015868:	697b      	ldr	r3, [r7, #20]
 801586a:	781b      	ldrb	r3, [r3, #0]
 801586c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801586e:	697b      	ldr	r3, [r7, #20]
 8015870:	3301      	adds	r3, #1
 8015872:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015874:	697b      	ldr	r3, [r7, #20]
 8015876:	781b      	ldrb	r3, [r3, #0]
 8015878:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801587a:	8a3b      	ldrh	r3, [r7, #16]
 801587c:	021b      	lsls	r3, r3, #8
 801587e:	b21a      	sxth	r2, r3
 8015880:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015884:	4313      	orrs	r3, r2
 8015886:	b21b      	sxth	r3, r3
 8015888:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801588a:	89fb      	ldrh	r3, [r7, #14]
}
 801588c:	4618      	mov	r0, r3
 801588e:	371c      	adds	r7, #28
 8015890:	46bd      	mov	sp, r7
 8015892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015896:	4770      	bx	lr

08015898 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015898:	b580      	push	{r7, lr}
 801589a:	b084      	sub	sp, #16
 801589c:	af00      	add	r7, sp, #0
 801589e:	6078      	str	r0, [r7, #4]
 80158a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80158a2:	2300      	movs	r3, #0
 80158a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80158a6:	683b      	ldr	r3, [r7, #0]
 80158a8:	781b      	ldrb	r3, [r3, #0]
 80158aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80158ae:	2b40      	cmp	r3, #64	; 0x40
 80158b0:	d005      	beq.n	80158be <USBD_StdDevReq+0x26>
 80158b2:	2b40      	cmp	r3, #64	; 0x40
 80158b4:	d857      	bhi.n	8015966 <USBD_StdDevReq+0xce>
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d00f      	beq.n	80158da <USBD_StdDevReq+0x42>
 80158ba:	2b20      	cmp	r3, #32
 80158bc:	d153      	bne.n	8015966 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	32ae      	adds	r2, #174	; 0xae
 80158c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158cc:	689b      	ldr	r3, [r3, #8]
 80158ce:	6839      	ldr	r1, [r7, #0]
 80158d0:	6878      	ldr	r0, [r7, #4]
 80158d2:	4798      	blx	r3
 80158d4:	4603      	mov	r3, r0
 80158d6:	73fb      	strb	r3, [r7, #15]
      break;
 80158d8:	e04a      	b.n	8015970 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80158da:	683b      	ldr	r3, [r7, #0]
 80158dc:	785b      	ldrb	r3, [r3, #1]
 80158de:	2b09      	cmp	r3, #9
 80158e0:	d83b      	bhi.n	801595a <USBD_StdDevReq+0xc2>
 80158e2:	a201      	add	r2, pc, #4	; (adr r2, 80158e8 <USBD_StdDevReq+0x50>)
 80158e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80158e8:	0801593d 	.word	0x0801593d
 80158ec:	08015951 	.word	0x08015951
 80158f0:	0801595b 	.word	0x0801595b
 80158f4:	08015947 	.word	0x08015947
 80158f8:	0801595b 	.word	0x0801595b
 80158fc:	0801591b 	.word	0x0801591b
 8015900:	08015911 	.word	0x08015911
 8015904:	0801595b 	.word	0x0801595b
 8015908:	08015933 	.word	0x08015933
 801590c:	08015925 	.word	0x08015925
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015910:	6839      	ldr	r1, [r7, #0]
 8015912:	6878      	ldr	r0, [r7, #4]
 8015914:	f000 fa3c 	bl	8015d90 <USBD_GetDescriptor>
          break;
 8015918:	e024      	b.n	8015964 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801591a:	6839      	ldr	r1, [r7, #0]
 801591c:	6878      	ldr	r0, [r7, #4]
 801591e:	f000 fba1 	bl	8016064 <USBD_SetAddress>
          break;
 8015922:	e01f      	b.n	8015964 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8015924:	6839      	ldr	r1, [r7, #0]
 8015926:	6878      	ldr	r0, [r7, #4]
 8015928:	f000 fbe0 	bl	80160ec <USBD_SetConfig>
 801592c:	4603      	mov	r3, r0
 801592e:	73fb      	strb	r3, [r7, #15]
          break;
 8015930:	e018      	b.n	8015964 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8015932:	6839      	ldr	r1, [r7, #0]
 8015934:	6878      	ldr	r0, [r7, #4]
 8015936:	f000 fc83 	bl	8016240 <USBD_GetConfig>
          break;
 801593a:	e013      	b.n	8015964 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801593c:	6839      	ldr	r1, [r7, #0]
 801593e:	6878      	ldr	r0, [r7, #4]
 8015940:	f000 fcb4 	bl	80162ac <USBD_GetStatus>
          break;
 8015944:	e00e      	b.n	8015964 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8015946:	6839      	ldr	r1, [r7, #0]
 8015948:	6878      	ldr	r0, [r7, #4]
 801594a:	f000 fce3 	bl	8016314 <USBD_SetFeature>
          break;
 801594e:	e009      	b.n	8015964 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015950:	6839      	ldr	r1, [r7, #0]
 8015952:	6878      	ldr	r0, [r7, #4]
 8015954:	f000 fd07 	bl	8016366 <USBD_ClrFeature>
          break;
 8015958:	e004      	b.n	8015964 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801595a:	6839      	ldr	r1, [r7, #0]
 801595c:	6878      	ldr	r0, [r7, #4]
 801595e:	f000 fd5e 	bl	801641e <USBD_CtlError>
          break;
 8015962:	bf00      	nop
      }
      break;
 8015964:	e004      	b.n	8015970 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8015966:	6839      	ldr	r1, [r7, #0]
 8015968:	6878      	ldr	r0, [r7, #4]
 801596a:	f000 fd58 	bl	801641e <USBD_CtlError>
      break;
 801596e:	bf00      	nop
  }

  return ret;
 8015970:	7bfb      	ldrb	r3, [r7, #15]
}
 8015972:	4618      	mov	r0, r3
 8015974:	3710      	adds	r7, #16
 8015976:	46bd      	mov	sp, r7
 8015978:	bd80      	pop	{r7, pc}
 801597a:	bf00      	nop

0801597c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801597c:	b580      	push	{r7, lr}
 801597e:	b084      	sub	sp, #16
 8015980:	af00      	add	r7, sp, #0
 8015982:	6078      	str	r0, [r7, #4]
 8015984:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015986:	2300      	movs	r3, #0
 8015988:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801598a:	683b      	ldr	r3, [r7, #0]
 801598c:	781b      	ldrb	r3, [r3, #0]
 801598e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015992:	2b40      	cmp	r3, #64	; 0x40
 8015994:	d005      	beq.n	80159a2 <USBD_StdItfReq+0x26>
 8015996:	2b40      	cmp	r3, #64	; 0x40
 8015998:	d852      	bhi.n	8015a40 <USBD_StdItfReq+0xc4>
 801599a:	2b00      	cmp	r3, #0
 801599c:	d001      	beq.n	80159a2 <USBD_StdItfReq+0x26>
 801599e:	2b20      	cmp	r3, #32
 80159a0:	d14e      	bne.n	8015a40 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80159a8:	b2db      	uxtb	r3, r3
 80159aa:	3b01      	subs	r3, #1
 80159ac:	2b02      	cmp	r3, #2
 80159ae:	d840      	bhi.n	8015a32 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80159b0:	683b      	ldr	r3, [r7, #0]
 80159b2:	889b      	ldrh	r3, [r3, #4]
 80159b4:	b2db      	uxtb	r3, r3
 80159b6:	2b01      	cmp	r3, #1
 80159b8:	d836      	bhi.n	8015a28 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80159ba:	683b      	ldr	r3, [r7, #0]
 80159bc:	889b      	ldrh	r3, [r3, #4]
 80159be:	b2db      	uxtb	r3, r3
 80159c0:	4619      	mov	r1, r3
 80159c2:	6878      	ldr	r0, [r7, #4]
 80159c4:	f7ff fed9 	bl	801577a <USBD_CoreFindIF>
 80159c8:	4603      	mov	r3, r0
 80159ca:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80159cc:	7bbb      	ldrb	r3, [r7, #14]
 80159ce:	2bff      	cmp	r3, #255	; 0xff
 80159d0:	d01d      	beq.n	8015a0e <USBD_StdItfReq+0x92>
 80159d2:	7bbb      	ldrb	r3, [r7, #14]
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d11a      	bne.n	8015a0e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80159d8:	7bba      	ldrb	r2, [r7, #14]
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	32ae      	adds	r2, #174	; 0xae
 80159de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159e2:	689b      	ldr	r3, [r3, #8]
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d00f      	beq.n	8015a08 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80159e8:	7bba      	ldrb	r2, [r7, #14]
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80159f0:	7bba      	ldrb	r2, [r7, #14]
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	32ae      	adds	r2, #174	; 0xae
 80159f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159fa:	689b      	ldr	r3, [r3, #8]
 80159fc:	6839      	ldr	r1, [r7, #0]
 80159fe:	6878      	ldr	r0, [r7, #4]
 8015a00:	4798      	blx	r3
 8015a02:	4603      	mov	r3, r0
 8015a04:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015a06:	e004      	b.n	8015a12 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8015a08:	2303      	movs	r3, #3
 8015a0a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015a0c:	e001      	b.n	8015a12 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8015a0e:	2303      	movs	r3, #3
 8015a10:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8015a12:	683b      	ldr	r3, [r7, #0]
 8015a14:	88db      	ldrh	r3, [r3, #6]
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d110      	bne.n	8015a3c <USBD_StdItfReq+0xc0>
 8015a1a:	7bfb      	ldrb	r3, [r7, #15]
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d10d      	bne.n	8015a3c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8015a20:	6878      	ldr	r0, [r7, #4]
 8015a22:	f000 fdc7 	bl	80165b4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8015a26:	e009      	b.n	8015a3c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8015a28:	6839      	ldr	r1, [r7, #0]
 8015a2a:	6878      	ldr	r0, [r7, #4]
 8015a2c:	f000 fcf7 	bl	801641e <USBD_CtlError>
          break;
 8015a30:	e004      	b.n	8015a3c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8015a32:	6839      	ldr	r1, [r7, #0]
 8015a34:	6878      	ldr	r0, [r7, #4]
 8015a36:	f000 fcf2 	bl	801641e <USBD_CtlError>
          break;
 8015a3a:	e000      	b.n	8015a3e <USBD_StdItfReq+0xc2>
          break;
 8015a3c:	bf00      	nop
      }
      break;
 8015a3e:	e004      	b.n	8015a4a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8015a40:	6839      	ldr	r1, [r7, #0]
 8015a42:	6878      	ldr	r0, [r7, #4]
 8015a44:	f000 fceb 	bl	801641e <USBD_CtlError>
      break;
 8015a48:	bf00      	nop
  }

  return ret;
 8015a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8015a4c:	4618      	mov	r0, r3
 8015a4e:	3710      	adds	r7, #16
 8015a50:	46bd      	mov	sp, r7
 8015a52:	bd80      	pop	{r7, pc}

08015a54 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015a54:	b580      	push	{r7, lr}
 8015a56:	b084      	sub	sp, #16
 8015a58:	af00      	add	r7, sp, #0
 8015a5a:	6078      	str	r0, [r7, #4]
 8015a5c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8015a5e:	2300      	movs	r3, #0
 8015a60:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8015a62:	683b      	ldr	r3, [r7, #0]
 8015a64:	889b      	ldrh	r3, [r3, #4]
 8015a66:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015a68:	683b      	ldr	r3, [r7, #0]
 8015a6a:	781b      	ldrb	r3, [r3, #0]
 8015a6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015a70:	2b40      	cmp	r3, #64	; 0x40
 8015a72:	d007      	beq.n	8015a84 <USBD_StdEPReq+0x30>
 8015a74:	2b40      	cmp	r3, #64	; 0x40
 8015a76:	f200 817f 	bhi.w	8015d78 <USBD_StdEPReq+0x324>
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d02a      	beq.n	8015ad4 <USBD_StdEPReq+0x80>
 8015a7e:	2b20      	cmp	r3, #32
 8015a80:	f040 817a 	bne.w	8015d78 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8015a84:	7bbb      	ldrb	r3, [r7, #14]
 8015a86:	4619      	mov	r1, r3
 8015a88:	6878      	ldr	r0, [r7, #4]
 8015a8a:	f7ff fe83 	bl	8015794 <USBD_CoreFindEP>
 8015a8e:	4603      	mov	r3, r0
 8015a90:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015a92:	7b7b      	ldrb	r3, [r7, #13]
 8015a94:	2bff      	cmp	r3, #255	; 0xff
 8015a96:	f000 8174 	beq.w	8015d82 <USBD_StdEPReq+0x32e>
 8015a9a:	7b7b      	ldrb	r3, [r7, #13]
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	f040 8170 	bne.w	8015d82 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8015aa2:	7b7a      	ldrb	r2, [r7, #13]
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8015aaa:	7b7a      	ldrb	r2, [r7, #13]
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	32ae      	adds	r2, #174	; 0xae
 8015ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ab4:	689b      	ldr	r3, [r3, #8]
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	f000 8163 	beq.w	8015d82 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015abc:	7b7a      	ldrb	r2, [r7, #13]
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	32ae      	adds	r2, #174	; 0xae
 8015ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ac6:	689b      	ldr	r3, [r3, #8]
 8015ac8:	6839      	ldr	r1, [r7, #0]
 8015aca:	6878      	ldr	r0, [r7, #4]
 8015acc:	4798      	blx	r3
 8015ace:	4603      	mov	r3, r0
 8015ad0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8015ad2:	e156      	b.n	8015d82 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015ad4:	683b      	ldr	r3, [r7, #0]
 8015ad6:	785b      	ldrb	r3, [r3, #1]
 8015ad8:	2b03      	cmp	r3, #3
 8015ada:	d008      	beq.n	8015aee <USBD_StdEPReq+0x9a>
 8015adc:	2b03      	cmp	r3, #3
 8015ade:	f300 8145 	bgt.w	8015d6c <USBD_StdEPReq+0x318>
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	f000 809b 	beq.w	8015c1e <USBD_StdEPReq+0x1ca>
 8015ae8:	2b01      	cmp	r3, #1
 8015aea:	d03c      	beq.n	8015b66 <USBD_StdEPReq+0x112>
 8015aec:	e13e      	b.n	8015d6c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015af4:	b2db      	uxtb	r3, r3
 8015af6:	2b02      	cmp	r3, #2
 8015af8:	d002      	beq.n	8015b00 <USBD_StdEPReq+0xac>
 8015afa:	2b03      	cmp	r3, #3
 8015afc:	d016      	beq.n	8015b2c <USBD_StdEPReq+0xd8>
 8015afe:	e02c      	b.n	8015b5a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015b00:	7bbb      	ldrb	r3, [r7, #14]
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d00d      	beq.n	8015b22 <USBD_StdEPReq+0xce>
 8015b06:	7bbb      	ldrb	r3, [r7, #14]
 8015b08:	2b80      	cmp	r3, #128	; 0x80
 8015b0a:	d00a      	beq.n	8015b22 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015b0c:	7bbb      	ldrb	r3, [r7, #14]
 8015b0e:	4619      	mov	r1, r3
 8015b10:	6878      	ldr	r0, [r7, #4]
 8015b12:	f001 f9d9 	bl	8016ec8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015b16:	2180      	movs	r1, #128	; 0x80
 8015b18:	6878      	ldr	r0, [r7, #4]
 8015b1a:	f001 f9d5 	bl	8016ec8 <USBD_LL_StallEP>
 8015b1e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015b20:	e020      	b.n	8015b64 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8015b22:	6839      	ldr	r1, [r7, #0]
 8015b24:	6878      	ldr	r0, [r7, #4]
 8015b26:	f000 fc7a 	bl	801641e <USBD_CtlError>
              break;
 8015b2a:	e01b      	b.n	8015b64 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015b2c:	683b      	ldr	r3, [r7, #0]
 8015b2e:	885b      	ldrh	r3, [r3, #2]
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d10e      	bne.n	8015b52 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015b34:	7bbb      	ldrb	r3, [r7, #14]
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d00b      	beq.n	8015b52 <USBD_StdEPReq+0xfe>
 8015b3a:	7bbb      	ldrb	r3, [r7, #14]
 8015b3c:	2b80      	cmp	r3, #128	; 0x80
 8015b3e:	d008      	beq.n	8015b52 <USBD_StdEPReq+0xfe>
 8015b40:	683b      	ldr	r3, [r7, #0]
 8015b42:	88db      	ldrh	r3, [r3, #6]
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d104      	bne.n	8015b52 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015b48:	7bbb      	ldrb	r3, [r7, #14]
 8015b4a:	4619      	mov	r1, r3
 8015b4c:	6878      	ldr	r0, [r7, #4]
 8015b4e:	f001 f9bb 	bl	8016ec8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8015b52:	6878      	ldr	r0, [r7, #4]
 8015b54:	f000 fd2e 	bl	80165b4 <USBD_CtlSendStatus>

              break;
 8015b58:	e004      	b.n	8015b64 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8015b5a:	6839      	ldr	r1, [r7, #0]
 8015b5c:	6878      	ldr	r0, [r7, #4]
 8015b5e:	f000 fc5e 	bl	801641e <USBD_CtlError>
              break;
 8015b62:	bf00      	nop
          }
          break;
 8015b64:	e107      	b.n	8015d76 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b6c:	b2db      	uxtb	r3, r3
 8015b6e:	2b02      	cmp	r3, #2
 8015b70:	d002      	beq.n	8015b78 <USBD_StdEPReq+0x124>
 8015b72:	2b03      	cmp	r3, #3
 8015b74:	d016      	beq.n	8015ba4 <USBD_StdEPReq+0x150>
 8015b76:	e04b      	b.n	8015c10 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015b78:	7bbb      	ldrb	r3, [r7, #14]
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d00d      	beq.n	8015b9a <USBD_StdEPReq+0x146>
 8015b7e:	7bbb      	ldrb	r3, [r7, #14]
 8015b80:	2b80      	cmp	r3, #128	; 0x80
 8015b82:	d00a      	beq.n	8015b9a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015b84:	7bbb      	ldrb	r3, [r7, #14]
 8015b86:	4619      	mov	r1, r3
 8015b88:	6878      	ldr	r0, [r7, #4]
 8015b8a:	f001 f99d 	bl	8016ec8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015b8e:	2180      	movs	r1, #128	; 0x80
 8015b90:	6878      	ldr	r0, [r7, #4]
 8015b92:	f001 f999 	bl	8016ec8 <USBD_LL_StallEP>
 8015b96:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015b98:	e040      	b.n	8015c1c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8015b9a:	6839      	ldr	r1, [r7, #0]
 8015b9c:	6878      	ldr	r0, [r7, #4]
 8015b9e:	f000 fc3e 	bl	801641e <USBD_CtlError>
              break;
 8015ba2:	e03b      	b.n	8015c1c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015ba4:	683b      	ldr	r3, [r7, #0]
 8015ba6:	885b      	ldrh	r3, [r3, #2]
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d136      	bne.n	8015c1a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015bac:	7bbb      	ldrb	r3, [r7, #14]
 8015bae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d004      	beq.n	8015bc0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015bb6:	7bbb      	ldrb	r3, [r7, #14]
 8015bb8:	4619      	mov	r1, r3
 8015bba:	6878      	ldr	r0, [r7, #4]
 8015bbc:	f001 f9a3 	bl	8016f06 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015bc0:	6878      	ldr	r0, [r7, #4]
 8015bc2:	f000 fcf7 	bl	80165b4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8015bc6:	7bbb      	ldrb	r3, [r7, #14]
 8015bc8:	4619      	mov	r1, r3
 8015bca:	6878      	ldr	r0, [r7, #4]
 8015bcc:	f7ff fde2 	bl	8015794 <USBD_CoreFindEP>
 8015bd0:	4603      	mov	r3, r0
 8015bd2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015bd4:	7b7b      	ldrb	r3, [r7, #13]
 8015bd6:	2bff      	cmp	r3, #255	; 0xff
 8015bd8:	d01f      	beq.n	8015c1a <USBD_StdEPReq+0x1c6>
 8015bda:	7b7b      	ldrb	r3, [r7, #13]
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	d11c      	bne.n	8015c1a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8015be0:	7b7a      	ldrb	r2, [r7, #13]
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8015be8:	7b7a      	ldrb	r2, [r7, #13]
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	32ae      	adds	r2, #174	; 0xae
 8015bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015bf2:	689b      	ldr	r3, [r3, #8]
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d010      	beq.n	8015c1a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015bf8:	7b7a      	ldrb	r2, [r7, #13]
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	32ae      	adds	r2, #174	; 0xae
 8015bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c02:	689b      	ldr	r3, [r3, #8]
 8015c04:	6839      	ldr	r1, [r7, #0]
 8015c06:	6878      	ldr	r0, [r7, #4]
 8015c08:	4798      	blx	r3
 8015c0a:	4603      	mov	r3, r0
 8015c0c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8015c0e:	e004      	b.n	8015c1a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8015c10:	6839      	ldr	r1, [r7, #0]
 8015c12:	6878      	ldr	r0, [r7, #4]
 8015c14:	f000 fc03 	bl	801641e <USBD_CtlError>
              break;
 8015c18:	e000      	b.n	8015c1c <USBD_StdEPReq+0x1c8>
              break;
 8015c1a:	bf00      	nop
          }
          break;
 8015c1c:	e0ab      	b.n	8015d76 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015c24:	b2db      	uxtb	r3, r3
 8015c26:	2b02      	cmp	r3, #2
 8015c28:	d002      	beq.n	8015c30 <USBD_StdEPReq+0x1dc>
 8015c2a:	2b03      	cmp	r3, #3
 8015c2c:	d032      	beq.n	8015c94 <USBD_StdEPReq+0x240>
 8015c2e:	e097      	b.n	8015d60 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015c30:	7bbb      	ldrb	r3, [r7, #14]
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	d007      	beq.n	8015c46 <USBD_StdEPReq+0x1f2>
 8015c36:	7bbb      	ldrb	r3, [r7, #14]
 8015c38:	2b80      	cmp	r3, #128	; 0x80
 8015c3a:	d004      	beq.n	8015c46 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8015c3c:	6839      	ldr	r1, [r7, #0]
 8015c3e:	6878      	ldr	r0, [r7, #4]
 8015c40:	f000 fbed 	bl	801641e <USBD_CtlError>
                break;
 8015c44:	e091      	b.n	8015d6a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015c46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	da0b      	bge.n	8015c66 <USBD_StdEPReq+0x212>
 8015c4e:	7bbb      	ldrb	r3, [r7, #14]
 8015c50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015c54:	4613      	mov	r3, r2
 8015c56:	009b      	lsls	r3, r3, #2
 8015c58:	4413      	add	r3, r2
 8015c5a:	009b      	lsls	r3, r3, #2
 8015c5c:	3310      	adds	r3, #16
 8015c5e:	687a      	ldr	r2, [r7, #4]
 8015c60:	4413      	add	r3, r2
 8015c62:	3304      	adds	r3, #4
 8015c64:	e00b      	b.n	8015c7e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015c66:	7bbb      	ldrb	r3, [r7, #14]
 8015c68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015c6c:	4613      	mov	r3, r2
 8015c6e:	009b      	lsls	r3, r3, #2
 8015c70:	4413      	add	r3, r2
 8015c72:	009b      	lsls	r3, r3, #2
 8015c74:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015c78:	687a      	ldr	r2, [r7, #4]
 8015c7a:	4413      	add	r3, r2
 8015c7c:	3304      	adds	r3, #4
 8015c7e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015c80:	68bb      	ldr	r3, [r7, #8]
 8015c82:	2200      	movs	r2, #0
 8015c84:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015c86:	68bb      	ldr	r3, [r7, #8]
 8015c88:	2202      	movs	r2, #2
 8015c8a:	4619      	mov	r1, r3
 8015c8c:	6878      	ldr	r0, [r7, #4]
 8015c8e:	f000 fc37 	bl	8016500 <USBD_CtlSendData>
              break;
 8015c92:	e06a      	b.n	8015d6a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015c94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	da11      	bge.n	8015cc0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015c9c:	7bbb      	ldrb	r3, [r7, #14]
 8015c9e:	f003 020f 	and.w	r2, r3, #15
 8015ca2:	6879      	ldr	r1, [r7, #4]
 8015ca4:	4613      	mov	r3, r2
 8015ca6:	009b      	lsls	r3, r3, #2
 8015ca8:	4413      	add	r3, r2
 8015caa:	009b      	lsls	r3, r3, #2
 8015cac:	440b      	add	r3, r1
 8015cae:	3324      	adds	r3, #36	; 0x24
 8015cb0:	881b      	ldrh	r3, [r3, #0]
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d117      	bne.n	8015ce6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015cb6:	6839      	ldr	r1, [r7, #0]
 8015cb8:	6878      	ldr	r0, [r7, #4]
 8015cba:	f000 fbb0 	bl	801641e <USBD_CtlError>
                  break;
 8015cbe:	e054      	b.n	8015d6a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015cc0:	7bbb      	ldrb	r3, [r7, #14]
 8015cc2:	f003 020f 	and.w	r2, r3, #15
 8015cc6:	6879      	ldr	r1, [r7, #4]
 8015cc8:	4613      	mov	r3, r2
 8015cca:	009b      	lsls	r3, r3, #2
 8015ccc:	4413      	add	r3, r2
 8015cce:	009b      	lsls	r3, r3, #2
 8015cd0:	440b      	add	r3, r1
 8015cd2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015cd6:	881b      	ldrh	r3, [r3, #0]
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d104      	bne.n	8015ce6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015cdc:	6839      	ldr	r1, [r7, #0]
 8015cde:	6878      	ldr	r0, [r7, #4]
 8015ce0:	f000 fb9d 	bl	801641e <USBD_CtlError>
                  break;
 8015ce4:	e041      	b.n	8015d6a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015ce6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	da0b      	bge.n	8015d06 <USBD_StdEPReq+0x2b2>
 8015cee:	7bbb      	ldrb	r3, [r7, #14]
 8015cf0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015cf4:	4613      	mov	r3, r2
 8015cf6:	009b      	lsls	r3, r3, #2
 8015cf8:	4413      	add	r3, r2
 8015cfa:	009b      	lsls	r3, r3, #2
 8015cfc:	3310      	adds	r3, #16
 8015cfe:	687a      	ldr	r2, [r7, #4]
 8015d00:	4413      	add	r3, r2
 8015d02:	3304      	adds	r3, #4
 8015d04:	e00b      	b.n	8015d1e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015d06:	7bbb      	ldrb	r3, [r7, #14]
 8015d08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015d0c:	4613      	mov	r3, r2
 8015d0e:	009b      	lsls	r3, r3, #2
 8015d10:	4413      	add	r3, r2
 8015d12:	009b      	lsls	r3, r3, #2
 8015d14:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015d18:	687a      	ldr	r2, [r7, #4]
 8015d1a:	4413      	add	r3, r2
 8015d1c:	3304      	adds	r3, #4
 8015d1e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015d20:	7bbb      	ldrb	r3, [r7, #14]
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d002      	beq.n	8015d2c <USBD_StdEPReq+0x2d8>
 8015d26:	7bbb      	ldrb	r3, [r7, #14]
 8015d28:	2b80      	cmp	r3, #128	; 0x80
 8015d2a:	d103      	bne.n	8015d34 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015d2c:	68bb      	ldr	r3, [r7, #8]
 8015d2e:	2200      	movs	r2, #0
 8015d30:	601a      	str	r2, [r3, #0]
 8015d32:	e00e      	b.n	8015d52 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015d34:	7bbb      	ldrb	r3, [r7, #14]
 8015d36:	4619      	mov	r1, r3
 8015d38:	6878      	ldr	r0, [r7, #4]
 8015d3a:	f001 f903 	bl	8016f44 <USBD_LL_IsStallEP>
 8015d3e:	4603      	mov	r3, r0
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d003      	beq.n	8015d4c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8015d44:	68bb      	ldr	r3, [r7, #8]
 8015d46:	2201      	movs	r2, #1
 8015d48:	601a      	str	r2, [r3, #0]
 8015d4a:	e002      	b.n	8015d52 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8015d4c:	68bb      	ldr	r3, [r7, #8]
 8015d4e:	2200      	movs	r2, #0
 8015d50:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015d52:	68bb      	ldr	r3, [r7, #8]
 8015d54:	2202      	movs	r2, #2
 8015d56:	4619      	mov	r1, r3
 8015d58:	6878      	ldr	r0, [r7, #4]
 8015d5a:	f000 fbd1 	bl	8016500 <USBD_CtlSendData>
              break;
 8015d5e:	e004      	b.n	8015d6a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8015d60:	6839      	ldr	r1, [r7, #0]
 8015d62:	6878      	ldr	r0, [r7, #4]
 8015d64:	f000 fb5b 	bl	801641e <USBD_CtlError>
              break;
 8015d68:	bf00      	nop
          }
          break;
 8015d6a:	e004      	b.n	8015d76 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015d6c:	6839      	ldr	r1, [r7, #0]
 8015d6e:	6878      	ldr	r0, [r7, #4]
 8015d70:	f000 fb55 	bl	801641e <USBD_CtlError>
          break;
 8015d74:	bf00      	nop
      }
      break;
 8015d76:	e005      	b.n	8015d84 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8015d78:	6839      	ldr	r1, [r7, #0]
 8015d7a:	6878      	ldr	r0, [r7, #4]
 8015d7c:	f000 fb4f 	bl	801641e <USBD_CtlError>
      break;
 8015d80:	e000      	b.n	8015d84 <USBD_StdEPReq+0x330>
      break;
 8015d82:	bf00      	nop
  }

  return ret;
 8015d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d86:	4618      	mov	r0, r3
 8015d88:	3710      	adds	r7, #16
 8015d8a:	46bd      	mov	sp, r7
 8015d8c:	bd80      	pop	{r7, pc}
	...

08015d90 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015d90:	b580      	push	{r7, lr}
 8015d92:	b084      	sub	sp, #16
 8015d94:	af00      	add	r7, sp, #0
 8015d96:	6078      	str	r0, [r7, #4]
 8015d98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015d9a:	2300      	movs	r3, #0
 8015d9c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015d9e:	2300      	movs	r3, #0
 8015da0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015da2:	2300      	movs	r3, #0
 8015da4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015da6:	683b      	ldr	r3, [r7, #0]
 8015da8:	885b      	ldrh	r3, [r3, #2]
 8015daa:	0a1b      	lsrs	r3, r3, #8
 8015dac:	b29b      	uxth	r3, r3
 8015dae:	3b01      	subs	r3, #1
 8015db0:	2b06      	cmp	r3, #6
 8015db2:	f200 8128 	bhi.w	8016006 <USBD_GetDescriptor+0x276>
 8015db6:	a201      	add	r2, pc, #4	; (adr r2, 8015dbc <USBD_GetDescriptor+0x2c>)
 8015db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015dbc:	08015dd9 	.word	0x08015dd9
 8015dc0:	08015df1 	.word	0x08015df1
 8015dc4:	08015e31 	.word	0x08015e31
 8015dc8:	08016007 	.word	0x08016007
 8015dcc:	08016007 	.word	0x08016007
 8015dd0:	08015fa7 	.word	0x08015fa7
 8015dd4:	08015fd3 	.word	0x08015fd3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	687a      	ldr	r2, [r7, #4]
 8015de2:	7c12      	ldrb	r2, [r2, #16]
 8015de4:	f107 0108 	add.w	r1, r7, #8
 8015de8:	4610      	mov	r0, r2
 8015dea:	4798      	blx	r3
 8015dec:	60f8      	str	r0, [r7, #12]
      break;
 8015dee:	e112      	b.n	8016016 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	7c1b      	ldrb	r3, [r3, #16]
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d10d      	bne.n	8015e14 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015e00:	f107 0208 	add.w	r2, r7, #8
 8015e04:	4610      	mov	r0, r2
 8015e06:	4798      	blx	r3
 8015e08:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015e0a:	68fb      	ldr	r3, [r7, #12]
 8015e0c:	3301      	adds	r3, #1
 8015e0e:	2202      	movs	r2, #2
 8015e10:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015e12:	e100      	b.n	8016016 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e1c:	f107 0208 	add.w	r2, r7, #8
 8015e20:	4610      	mov	r0, r2
 8015e22:	4798      	blx	r3
 8015e24:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015e26:	68fb      	ldr	r3, [r7, #12]
 8015e28:	3301      	adds	r3, #1
 8015e2a:	2202      	movs	r2, #2
 8015e2c:	701a      	strb	r2, [r3, #0]
      break;
 8015e2e:	e0f2      	b.n	8016016 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015e30:	683b      	ldr	r3, [r7, #0]
 8015e32:	885b      	ldrh	r3, [r3, #2]
 8015e34:	b2db      	uxtb	r3, r3
 8015e36:	2b05      	cmp	r3, #5
 8015e38:	f200 80ac 	bhi.w	8015f94 <USBD_GetDescriptor+0x204>
 8015e3c:	a201      	add	r2, pc, #4	; (adr r2, 8015e44 <USBD_GetDescriptor+0xb4>)
 8015e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e42:	bf00      	nop
 8015e44:	08015e5d 	.word	0x08015e5d
 8015e48:	08015e91 	.word	0x08015e91
 8015e4c:	08015ec5 	.word	0x08015ec5
 8015e50:	08015ef9 	.word	0x08015ef9
 8015e54:	08015f2d 	.word	0x08015f2d
 8015e58:	08015f61 	.word	0x08015f61
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e62:	685b      	ldr	r3, [r3, #4]
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d00b      	beq.n	8015e80 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e6e:	685b      	ldr	r3, [r3, #4]
 8015e70:	687a      	ldr	r2, [r7, #4]
 8015e72:	7c12      	ldrb	r2, [r2, #16]
 8015e74:	f107 0108 	add.w	r1, r7, #8
 8015e78:	4610      	mov	r0, r2
 8015e7a:	4798      	blx	r3
 8015e7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e7e:	e091      	b.n	8015fa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015e80:	6839      	ldr	r1, [r7, #0]
 8015e82:	6878      	ldr	r0, [r7, #4]
 8015e84:	f000 facb 	bl	801641e <USBD_CtlError>
            err++;
 8015e88:	7afb      	ldrb	r3, [r7, #11]
 8015e8a:	3301      	adds	r3, #1
 8015e8c:	72fb      	strb	r3, [r7, #11]
          break;
 8015e8e:	e089      	b.n	8015fa4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e96:	689b      	ldr	r3, [r3, #8]
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d00b      	beq.n	8015eb4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015ea2:	689b      	ldr	r3, [r3, #8]
 8015ea4:	687a      	ldr	r2, [r7, #4]
 8015ea6:	7c12      	ldrb	r2, [r2, #16]
 8015ea8:	f107 0108 	add.w	r1, r7, #8
 8015eac:	4610      	mov	r0, r2
 8015eae:	4798      	blx	r3
 8015eb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015eb2:	e077      	b.n	8015fa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015eb4:	6839      	ldr	r1, [r7, #0]
 8015eb6:	6878      	ldr	r0, [r7, #4]
 8015eb8:	f000 fab1 	bl	801641e <USBD_CtlError>
            err++;
 8015ebc:	7afb      	ldrb	r3, [r7, #11]
 8015ebe:	3301      	adds	r3, #1
 8015ec0:	72fb      	strb	r3, [r7, #11]
          break;
 8015ec2:	e06f      	b.n	8015fa4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015eca:	68db      	ldr	r3, [r3, #12]
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d00b      	beq.n	8015ee8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015ed6:	68db      	ldr	r3, [r3, #12]
 8015ed8:	687a      	ldr	r2, [r7, #4]
 8015eda:	7c12      	ldrb	r2, [r2, #16]
 8015edc:	f107 0108 	add.w	r1, r7, #8
 8015ee0:	4610      	mov	r0, r2
 8015ee2:	4798      	blx	r3
 8015ee4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015ee6:	e05d      	b.n	8015fa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015ee8:	6839      	ldr	r1, [r7, #0]
 8015eea:	6878      	ldr	r0, [r7, #4]
 8015eec:	f000 fa97 	bl	801641e <USBD_CtlError>
            err++;
 8015ef0:	7afb      	ldrb	r3, [r7, #11]
 8015ef2:	3301      	adds	r3, #1
 8015ef4:	72fb      	strb	r3, [r7, #11]
          break;
 8015ef6:	e055      	b.n	8015fa4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015efe:	691b      	ldr	r3, [r3, #16]
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d00b      	beq.n	8015f1c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015f0a:	691b      	ldr	r3, [r3, #16]
 8015f0c:	687a      	ldr	r2, [r7, #4]
 8015f0e:	7c12      	ldrb	r2, [r2, #16]
 8015f10:	f107 0108 	add.w	r1, r7, #8
 8015f14:	4610      	mov	r0, r2
 8015f16:	4798      	blx	r3
 8015f18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015f1a:	e043      	b.n	8015fa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015f1c:	6839      	ldr	r1, [r7, #0]
 8015f1e:	6878      	ldr	r0, [r7, #4]
 8015f20:	f000 fa7d 	bl	801641e <USBD_CtlError>
            err++;
 8015f24:	7afb      	ldrb	r3, [r7, #11]
 8015f26:	3301      	adds	r3, #1
 8015f28:	72fb      	strb	r3, [r7, #11]
          break;
 8015f2a:	e03b      	b.n	8015fa4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015f32:	695b      	ldr	r3, [r3, #20]
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d00b      	beq.n	8015f50 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015f3e:	695b      	ldr	r3, [r3, #20]
 8015f40:	687a      	ldr	r2, [r7, #4]
 8015f42:	7c12      	ldrb	r2, [r2, #16]
 8015f44:	f107 0108 	add.w	r1, r7, #8
 8015f48:	4610      	mov	r0, r2
 8015f4a:	4798      	blx	r3
 8015f4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015f4e:	e029      	b.n	8015fa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015f50:	6839      	ldr	r1, [r7, #0]
 8015f52:	6878      	ldr	r0, [r7, #4]
 8015f54:	f000 fa63 	bl	801641e <USBD_CtlError>
            err++;
 8015f58:	7afb      	ldrb	r3, [r7, #11]
 8015f5a:	3301      	adds	r3, #1
 8015f5c:	72fb      	strb	r3, [r7, #11]
          break;
 8015f5e:	e021      	b.n	8015fa4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015f66:	699b      	ldr	r3, [r3, #24]
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d00b      	beq.n	8015f84 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015f72:	699b      	ldr	r3, [r3, #24]
 8015f74:	687a      	ldr	r2, [r7, #4]
 8015f76:	7c12      	ldrb	r2, [r2, #16]
 8015f78:	f107 0108 	add.w	r1, r7, #8
 8015f7c:	4610      	mov	r0, r2
 8015f7e:	4798      	blx	r3
 8015f80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015f82:	e00f      	b.n	8015fa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015f84:	6839      	ldr	r1, [r7, #0]
 8015f86:	6878      	ldr	r0, [r7, #4]
 8015f88:	f000 fa49 	bl	801641e <USBD_CtlError>
            err++;
 8015f8c:	7afb      	ldrb	r3, [r7, #11]
 8015f8e:	3301      	adds	r3, #1
 8015f90:	72fb      	strb	r3, [r7, #11]
          break;
 8015f92:	e007      	b.n	8015fa4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015f94:	6839      	ldr	r1, [r7, #0]
 8015f96:	6878      	ldr	r0, [r7, #4]
 8015f98:	f000 fa41 	bl	801641e <USBD_CtlError>
          err++;
 8015f9c:	7afb      	ldrb	r3, [r7, #11]
 8015f9e:	3301      	adds	r3, #1
 8015fa0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8015fa2:	bf00      	nop
      }
      break;
 8015fa4:	e037      	b.n	8016016 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	7c1b      	ldrb	r3, [r3, #16]
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d109      	bne.n	8015fc2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015fb6:	f107 0208 	add.w	r2, r7, #8
 8015fba:	4610      	mov	r0, r2
 8015fbc:	4798      	blx	r3
 8015fbe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015fc0:	e029      	b.n	8016016 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015fc2:	6839      	ldr	r1, [r7, #0]
 8015fc4:	6878      	ldr	r0, [r7, #4]
 8015fc6:	f000 fa2a 	bl	801641e <USBD_CtlError>
        err++;
 8015fca:	7afb      	ldrb	r3, [r7, #11]
 8015fcc:	3301      	adds	r3, #1
 8015fce:	72fb      	strb	r3, [r7, #11]
      break;
 8015fd0:	e021      	b.n	8016016 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	7c1b      	ldrb	r3, [r3, #16]
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d10d      	bne.n	8015ff6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015fe2:	f107 0208 	add.w	r2, r7, #8
 8015fe6:	4610      	mov	r0, r2
 8015fe8:	4798      	blx	r3
 8015fea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015fec:	68fb      	ldr	r3, [r7, #12]
 8015fee:	3301      	adds	r3, #1
 8015ff0:	2207      	movs	r2, #7
 8015ff2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015ff4:	e00f      	b.n	8016016 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015ff6:	6839      	ldr	r1, [r7, #0]
 8015ff8:	6878      	ldr	r0, [r7, #4]
 8015ffa:	f000 fa10 	bl	801641e <USBD_CtlError>
        err++;
 8015ffe:	7afb      	ldrb	r3, [r7, #11]
 8016000:	3301      	adds	r3, #1
 8016002:	72fb      	strb	r3, [r7, #11]
      break;
 8016004:	e007      	b.n	8016016 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8016006:	6839      	ldr	r1, [r7, #0]
 8016008:	6878      	ldr	r0, [r7, #4]
 801600a:	f000 fa08 	bl	801641e <USBD_CtlError>
      err++;
 801600e:	7afb      	ldrb	r3, [r7, #11]
 8016010:	3301      	adds	r3, #1
 8016012:	72fb      	strb	r3, [r7, #11]
      break;
 8016014:	bf00      	nop
  }

  if (err != 0U)
 8016016:	7afb      	ldrb	r3, [r7, #11]
 8016018:	2b00      	cmp	r3, #0
 801601a:	d11e      	bne.n	801605a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 801601c:	683b      	ldr	r3, [r7, #0]
 801601e:	88db      	ldrh	r3, [r3, #6]
 8016020:	2b00      	cmp	r3, #0
 8016022:	d016      	beq.n	8016052 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8016024:	893b      	ldrh	r3, [r7, #8]
 8016026:	2b00      	cmp	r3, #0
 8016028:	d00e      	beq.n	8016048 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801602a:	683b      	ldr	r3, [r7, #0]
 801602c:	88da      	ldrh	r2, [r3, #6]
 801602e:	893b      	ldrh	r3, [r7, #8]
 8016030:	4293      	cmp	r3, r2
 8016032:	bf28      	it	cs
 8016034:	4613      	movcs	r3, r2
 8016036:	b29b      	uxth	r3, r3
 8016038:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801603a:	893b      	ldrh	r3, [r7, #8]
 801603c:	461a      	mov	r2, r3
 801603e:	68f9      	ldr	r1, [r7, #12]
 8016040:	6878      	ldr	r0, [r7, #4]
 8016042:	f000 fa5d 	bl	8016500 <USBD_CtlSendData>
 8016046:	e009      	b.n	801605c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8016048:	6839      	ldr	r1, [r7, #0]
 801604a:	6878      	ldr	r0, [r7, #4]
 801604c:	f000 f9e7 	bl	801641e <USBD_CtlError>
 8016050:	e004      	b.n	801605c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8016052:	6878      	ldr	r0, [r7, #4]
 8016054:	f000 faae 	bl	80165b4 <USBD_CtlSendStatus>
 8016058:	e000      	b.n	801605c <USBD_GetDescriptor+0x2cc>
    return;
 801605a:	bf00      	nop
  }
}
 801605c:	3710      	adds	r7, #16
 801605e:	46bd      	mov	sp, r7
 8016060:	bd80      	pop	{r7, pc}
 8016062:	bf00      	nop

08016064 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016064:	b580      	push	{r7, lr}
 8016066:	b084      	sub	sp, #16
 8016068:	af00      	add	r7, sp, #0
 801606a:	6078      	str	r0, [r7, #4]
 801606c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801606e:	683b      	ldr	r3, [r7, #0]
 8016070:	889b      	ldrh	r3, [r3, #4]
 8016072:	2b00      	cmp	r3, #0
 8016074:	d131      	bne.n	80160da <USBD_SetAddress+0x76>
 8016076:	683b      	ldr	r3, [r7, #0]
 8016078:	88db      	ldrh	r3, [r3, #6]
 801607a:	2b00      	cmp	r3, #0
 801607c:	d12d      	bne.n	80160da <USBD_SetAddress+0x76>
 801607e:	683b      	ldr	r3, [r7, #0]
 8016080:	885b      	ldrh	r3, [r3, #2]
 8016082:	2b7f      	cmp	r3, #127	; 0x7f
 8016084:	d829      	bhi.n	80160da <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8016086:	683b      	ldr	r3, [r7, #0]
 8016088:	885b      	ldrh	r3, [r3, #2]
 801608a:	b2db      	uxtb	r3, r3
 801608c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016090:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016098:	b2db      	uxtb	r3, r3
 801609a:	2b03      	cmp	r3, #3
 801609c:	d104      	bne.n	80160a8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801609e:	6839      	ldr	r1, [r7, #0]
 80160a0:	6878      	ldr	r0, [r7, #4]
 80160a2:	f000 f9bc 	bl	801641e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80160a6:	e01d      	b.n	80160e4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	7bfa      	ldrb	r2, [r7, #15]
 80160ac:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80160b0:	7bfb      	ldrb	r3, [r7, #15]
 80160b2:	4619      	mov	r1, r3
 80160b4:	6878      	ldr	r0, [r7, #4]
 80160b6:	f000 ff71 	bl	8016f9c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80160ba:	6878      	ldr	r0, [r7, #4]
 80160bc:	f000 fa7a 	bl	80165b4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80160c0:	7bfb      	ldrb	r3, [r7, #15]
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d004      	beq.n	80160d0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	2202      	movs	r2, #2
 80160ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80160ce:	e009      	b.n	80160e4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	2201      	movs	r2, #1
 80160d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80160d8:	e004      	b.n	80160e4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80160da:	6839      	ldr	r1, [r7, #0]
 80160dc:	6878      	ldr	r0, [r7, #4]
 80160de:	f000 f99e 	bl	801641e <USBD_CtlError>
  }
}
 80160e2:	bf00      	nop
 80160e4:	bf00      	nop
 80160e6:	3710      	adds	r7, #16
 80160e8:	46bd      	mov	sp, r7
 80160ea:	bd80      	pop	{r7, pc}

080160ec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80160ec:	b580      	push	{r7, lr}
 80160ee:	b084      	sub	sp, #16
 80160f0:	af00      	add	r7, sp, #0
 80160f2:	6078      	str	r0, [r7, #4]
 80160f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80160f6:	2300      	movs	r3, #0
 80160f8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80160fa:	683b      	ldr	r3, [r7, #0]
 80160fc:	885b      	ldrh	r3, [r3, #2]
 80160fe:	b2da      	uxtb	r2, r3
 8016100:	4b4e      	ldr	r3, [pc, #312]	; (801623c <USBD_SetConfig+0x150>)
 8016102:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8016104:	4b4d      	ldr	r3, [pc, #308]	; (801623c <USBD_SetConfig+0x150>)
 8016106:	781b      	ldrb	r3, [r3, #0]
 8016108:	2b01      	cmp	r3, #1
 801610a:	d905      	bls.n	8016118 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801610c:	6839      	ldr	r1, [r7, #0]
 801610e:	6878      	ldr	r0, [r7, #4]
 8016110:	f000 f985 	bl	801641e <USBD_CtlError>
    return USBD_FAIL;
 8016114:	2303      	movs	r3, #3
 8016116:	e08c      	b.n	8016232 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801611e:	b2db      	uxtb	r3, r3
 8016120:	2b02      	cmp	r3, #2
 8016122:	d002      	beq.n	801612a <USBD_SetConfig+0x3e>
 8016124:	2b03      	cmp	r3, #3
 8016126:	d029      	beq.n	801617c <USBD_SetConfig+0x90>
 8016128:	e075      	b.n	8016216 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801612a:	4b44      	ldr	r3, [pc, #272]	; (801623c <USBD_SetConfig+0x150>)
 801612c:	781b      	ldrb	r3, [r3, #0]
 801612e:	2b00      	cmp	r3, #0
 8016130:	d020      	beq.n	8016174 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8016132:	4b42      	ldr	r3, [pc, #264]	; (801623c <USBD_SetConfig+0x150>)
 8016134:	781b      	ldrb	r3, [r3, #0]
 8016136:	461a      	mov	r2, r3
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801613c:	4b3f      	ldr	r3, [pc, #252]	; (801623c <USBD_SetConfig+0x150>)
 801613e:	781b      	ldrb	r3, [r3, #0]
 8016140:	4619      	mov	r1, r3
 8016142:	6878      	ldr	r0, [r7, #4]
 8016144:	f7fe ffe1 	bl	801510a <USBD_SetClassConfig>
 8016148:	4603      	mov	r3, r0
 801614a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801614c:	7bfb      	ldrb	r3, [r7, #15]
 801614e:	2b00      	cmp	r3, #0
 8016150:	d008      	beq.n	8016164 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8016152:	6839      	ldr	r1, [r7, #0]
 8016154:	6878      	ldr	r0, [r7, #4]
 8016156:	f000 f962 	bl	801641e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	2202      	movs	r2, #2
 801615e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016162:	e065      	b.n	8016230 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016164:	6878      	ldr	r0, [r7, #4]
 8016166:	f000 fa25 	bl	80165b4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	2203      	movs	r2, #3
 801616e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016172:	e05d      	b.n	8016230 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016174:	6878      	ldr	r0, [r7, #4]
 8016176:	f000 fa1d 	bl	80165b4 <USBD_CtlSendStatus>
      break;
 801617a:	e059      	b.n	8016230 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801617c:	4b2f      	ldr	r3, [pc, #188]	; (801623c <USBD_SetConfig+0x150>)
 801617e:	781b      	ldrb	r3, [r3, #0]
 8016180:	2b00      	cmp	r3, #0
 8016182:	d112      	bne.n	80161aa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	2202      	movs	r2, #2
 8016188:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801618c:	4b2b      	ldr	r3, [pc, #172]	; (801623c <USBD_SetConfig+0x150>)
 801618e:	781b      	ldrb	r3, [r3, #0]
 8016190:	461a      	mov	r2, r3
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016196:	4b29      	ldr	r3, [pc, #164]	; (801623c <USBD_SetConfig+0x150>)
 8016198:	781b      	ldrb	r3, [r3, #0]
 801619a:	4619      	mov	r1, r3
 801619c:	6878      	ldr	r0, [r7, #4]
 801619e:	f7fe ffd0 	bl	8015142 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80161a2:	6878      	ldr	r0, [r7, #4]
 80161a4:	f000 fa06 	bl	80165b4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80161a8:	e042      	b.n	8016230 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80161aa:	4b24      	ldr	r3, [pc, #144]	; (801623c <USBD_SetConfig+0x150>)
 80161ac:	781b      	ldrb	r3, [r3, #0]
 80161ae:	461a      	mov	r2, r3
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	685b      	ldr	r3, [r3, #4]
 80161b4:	429a      	cmp	r2, r3
 80161b6:	d02a      	beq.n	801620e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	685b      	ldr	r3, [r3, #4]
 80161bc:	b2db      	uxtb	r3, r3
 80161be:	4619      	mov	r1, r3
 80161c0:	6878      	ldr	r0, [r7, #4]
 80161c2:	f7fe ffbe 	bl	8015142 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80161c6:	4b1d      	ldr	r3, [pc, #116]	; (801623c <USBD_SetConfig+0x150>)
 80161c8:	781b      	ldrb	r3, [r3, #0]
 80161ca:	461a      	mov	r2, r3
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80161d0:	4b1a      	ldr	r3, [pc, #104]	; (801623c <USBD_SetConfig+0x150>)
 80161d2:	781b      	ldrb	r3, [r3, #0]
 80161d4:	4619      	mov	r1, r3
 80161d6:	6878      	ldr	r0, [r7, #4]
 80161d8:	f7fe ff97 	bl	801510a <USBD_SetClassConfig>
 80161dc:	4603      	mov	r3, r0
 80161de:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80161e0:	7bfb      	ldrb	r3, [r7, #15]
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d00f      	beq.n	8016206 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80161e6:	6839      	ldr	r1, [r7, #0]
 80161e8:	6878      	ldr	r0, [r7, #4]
 80161ea:	f000 f918 	bl	801641e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	685b      	ldr	r3, [r3, #4]
 80161f2:	b2db      	uxtb	r3, r3
 80161f4:	4619      	mov	r1, r3
 80161f6:	6878      	ldr	r0, [r7, #4]
 80161f8:	f7fe ffa3 	bl	8015142 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	2202      	movs	r2, #2
 8016200:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016204:	e014      	b.n	8016230 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016206:	6878      	ldr	r0, [r7, #4]
 8016208:	f000 f9d4 	bl	80165b4 <USBD_CtlSendStatus>
      break;
 801620c:	e010      	b.n	8016230 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801620e:	6878      	ldr	r0, [r7, #4]
 8016210:	f000 f9d0 	bl	80165b4 <USBD_CtlSendStatus>
      break;
 8016214:	e00c      	b.n	8016230 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8016216:	6839      	ldr	r1, [r7, #0]
 8016218:	6878      	ldr	r0, [r7, #4]
 801621a:	f000 f900 	bl	801641e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801621e:	4b07      	ldr	r3, [pc, #28]	; (801623c <USBD_SetConfig+0x150>)
 8016220:	781b      	ldrb	r3, [r3, #0]
 8016222:	4619      	mov	r1, r3
 8016224:	6878      	ldr	r0, [r7, #4]
 8016226:	f7fe ff8c 	bl	8015142 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801622a:	2303      	movs	r3, #3
 801622c:	73fb      	strb	r3, [r7, #15]
      break;
 801622e:	bf00      	nop
  }

  return ret;
 8016230:	7bfb      	ldrb	r3, [r7, #15]
}
 8016232:	4618      	mov	r0, r3
 8016234:	3710      	adds	r7, #16
 8016236:	46bd      	mov	sp, r7
 8016238:	bd80      	pop	{r7, pc}
 801623a:	bf00      	nop
 801623c:	240015e4 	.word	0x240015e4

08016240 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016240:	b580      	push	{r7, lr}
 8016242:	b082      	sub	sp, #8
 8016244:	af00      	add	r7, sp, #0
 8016246:	6078      	str	r0, [r7, #4]
 8016248:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801624a:	683b      	ldr	r3, [r7, #0]
 801624c:	88db      	ldrh	r3, [r3, #6]
 801624e:	2b01      	cmp	r3, #1
 8016250:	d004      	beq.n	801625c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8016252:	6839      	ldr	r1, [r7, #0]
 8016254:	6878      	ldr	r0, [r7, #4]
 8016256:	f000 f8e2 	bl	801641e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801625a:	e023      	b.n	80162a4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016262:	b2db      	uxtb	r3, r3
 8016264:	2b02      	cmp	r3, #2
 8016266:	dc02      	bgt.n	801626e <USBD_GetConfig+0x2e>
 8016268:	2b00      	cmp	r3, #0
 801626a:	dc03      	bgt.n	8016274 <USBD_GetConfig+0x34>
 801626c:	e015      	b.n	801629a <USBD_GetConfig+0x5a>
 801626e:	2b03      	cmp	r3, #3
 8016270:	d00b      	beq.n	801628a <USBD_GetConfig+0x4a>
 8016272:	e012      	b.n	801629a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	2200      	movs	r2, #0
 8016278:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	3308      	adds	r3, #8
 801627e:	2201      	movs	r2, #1
 8016280:	4619      	mov	r1, r3
 8016282:	6878      	ldr	r0, [r7, #4]
 8016284:	f000 f93c 	bl	8016500 <USBD_CtlSendData>
        break;
 8016288:	e00c      	b.n	80162a4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	3304      	adds	r3, #4
 801628e:	2201      	movs	r2, #1
 8016290:	4619      	mov	r1, r3
 8016292:	6878      	ldr	r0, [r7, #4]
 8016294:	f000 f934 	bl	8016500 <USBD_CtlSendData>
        break;
 8016298:	e004      	b.n	80162a4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801629a:	6839      	ldr	r1, [r7, #0]
 801629c:	6878      	ldr	r0, [r7, #4]
 801629e:	f000 f8be 	bl	801641e <USBD_CtlError>
        break;
 80162a2:	bf00      	nop
}
 80162a4:	bf00      	nop
 80162a6:	3708      	adds	r7, #8
 80162a8:	46bd      	mov	sp, r7
 80162aa:	bd80      	pop	{r7, pc}

080162ac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80162ac:	b580      	push	{r7, lr}
 80162ae:	b082      	sub	sp, #8
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	6078      	str	r0, [r7, #4]
 80162b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80162bc:	b2db      	uxtb	r3, r3
 80162be:	3b01      	subs	r3, #1
 80162c0:	2b02      	cmp	r3, #2
 80162c2:	d81e      	bhi.n	8016302 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80162c4:	683b      	ldr	r3, [r7, #0]
 80162c6:	88db      	ldrh	r3, [r3, #6]
 80162c8:	2b02      	cmp	r3, #2
 80162ca:	d004      	beq.n	80162d6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80162cc:	6839      	ldr	r1, [r7, #0]
 80162ce:	6878      	ldr	r0, [r7, #4]
 80162d0:	f000 f8a5 	bl	801641e <USBD_CtlError>
        break;
 80162d4:	e01a      	b.n	801630c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	2201      	movs	r2, #1
 80162da:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d005      	beq.n	80162f2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	68db      	ldr	r3, [r3, #12]
 80162ea:	f043 0202 	orr.w	r2, r3, #2
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	330c      	adds	r3, #12
 80162f6:	2202      	movs	r2, #2
 80162f8:	4619      	mov	r1, r3
 80162fa:	6878      	ldr	r0, [r7, #4]
 80162fc:	f000 f900 	bl	8016500 <USBD_CtlSendData>
      break;
 8016300:	e004      	b.n	801630c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8016302:	6839      	ldr	r1, [r7, #0]
 8016304:	6878      	ldr	r0, [r7, #4]
 8016306:	f000 f88a 	bl	801641e <USBD_CtlError>
      break;
 801630a:	bf00      	nop
  }
}
 801630c:	bf00      	nop
 801630e:	3708      	adds	r7, #8
 8016310:	46bd      	mov	sp, r7
 8016312:	bd80      	pop	{r7, pc}

08016314 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016314:	b580      	push	{r7, lr}
 8016316:	b082      	sub	sp, #8
 8016318:	af00      	add	r7, sp, #0
 801631a:	6078      	str	r0, [r7, #4]
 801631c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801631e:	683b      	ldr	r3, [r7, #0]
 8016320:	885b      	ldrh	r3, [r3, #2]
 8016322:	2b01      	cmp	r3, #1
 8016324:	d107      	bne.n	8016336 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	2201      	movs	r2, #1
 801632a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801632e:	6878      	ldr	r0, [r7, #4]
 8016330:	f000 f940 	bl	80165b4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8016334:	e013      	b.n	801635e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8016336:	683b      	ldr	r3, [r7, #0]
 8016338:	885b      	ldrh	r3, [r3, #2]
 801633a:	2b02      	cmp	r3, #2
 801633c:	d10b      	bne.n	8016356 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801633e:	683b      	ldr	r3, [r7, #0]
 8016340:	889b      	ldrh	r3, [r3, #4]
 8016342:	0a1b      	lsrs	r3, r3, #8
 8016344:	b29b      	uxth	r3, r3
 8016346:	b2da      	uxtb	r2, r3
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801634e:	6878      	ldr	r0, [r7, #4]
 8016350:	f000 f930 	bl	80165b4 <USBD_CtlSendStatus>
}
 8016354:	e003      	b.n	801635e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8016356:	6839      	ldr	r1, [r7, #0]
 8016358:	6878      	ldr	r0, [r7, #4]
 801635a:	f000 f860 	bl	801641e <USBD_CtlError>
}
 801635e:	bf00      	nop
 8016360:	3708      	adds	r7, #8
 8016362:	46bd      	mov	sp, r7
 8016364:	bd80      	pop	{r7, pc}

08016366 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016366:	b580      	push	{r7, lr}
 8016368:	b082      	sub	sp, #8
 801636a:	af00      	add	r7, sp, #0
 801636c:	6078      	str	r0, [r7, #4]
 801636e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016376:	b2db      	uxtb	r3, r3
 8016378:	3b01      	subs	r3, #1
 801637a:	2b02      	cmp	r3, #2
 801637c:	d80b      	bhi.n	8016396 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801637e:	683b      	ldr	r3, [r7, #0]
 8016380:	885b      	ldrh	r3, [r3, #2]
 8016382:	2b01      	cmp	r3, #1
 8016384:	d10c      	bne.n	80163a0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	2200      	movs	r2, #0
 801638a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801638e:	6878      	ldr	r0, [r7, #4]
 8016390:	f000 f910 	bl	80165b4 <USBD_CtlSendStatus>
      }
      break;
 8016394:	e004      	b.n	80163a0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8016396:	6839      	ldr	r1, [r7, #0]
 8016398:	6878      	ldr	r0, [r7, #4]
 801639a:	f000 f840 	bl	801641e <USBD_CtlError>
      break;
 801639e:	e000      	b.n	80163a2 <USBD_ClrFeature+0x3c>
      break;
 80163a0:	bf00      	nop
  }
}
 80163a2:	bf00      	nop
 80163a4:	3708      	adds	r7, #8
 80163a6:	46bd      	mov	sp, r7
 80163a8:	bd80      	pop	{r7, pc}

080163aa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80163aa:	b580      	push	{r7, lr}
 80163ac:	b084      	sub	sp, #16
 80163ae:	af00      	add	r7, sp, #0
 80163b0:	6078      	str	r0, [r7, #4]
 80163b2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80163b4:	683b      	ldr	r3, [r7, #0]
 80163b6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80163b8:	68fb      	ldr	r3, [r7, #12]
 80163ba:	781a      	ldrb	r2, [r3, #0]
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	3301      	adds	r3, #1
 80163c4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80163c6:	68fb      	ldr	r3, [r7, #12]
 80163c8:	781a      	ldrb	r2, [r3, #0]
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80163ce:	68fb      	ldr	r3, [r7, #12]
 80163d0:	3301      	adds	r3, #1
 80163d2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80163d4:	68f8      	ldr	r0, [r7, #12]
 80163d6:	f7ff fa41 	bl	801585c <SWAPBYTE>
 80163da:	4603      	mov	r3, r0
 80163dc:	461a      	mov	r2, r3
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80163e2:	68fb      	ldr	r3, [r7, #12]
 80163e4:	3301      	adds	r3, #1
 80163e6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80163e8:	68fb      	ldr	r3, [r7, #12]
 80163ea:	3301      	adds	r3, #1
 80163ec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80163ee:	68f8      	ldr	r0, [r7, #12]
 80163f0:	f7ff fa34 	bl	801585c <SWAPBYTE>
 80163f4:	4603      	mov	r3, r0
 80163f6:	461a      	mov	r2, r3
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80163fc:	68fb      	ldr	r3, [r7, #12]
 80163fe:	3301      	adds	r3, #1
 8016400:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016402:	68fb      	ldr	r3, [r7, #12]
 8016404:	3301      	adds	r3, #1
 8016406:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8016408:	68f8      	ldr	r0, [r7, #12]
 801640a:	f7ff fa27 	bl	801585c <SWAPBYTE>
 801640e:	4603      	mov	r3, r0
 8016410:	461a      	mov	r2, r3
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	80da      	strh	r2, [r3, #6]
}
 8016416:	bf00      	nop
 8016418:	3710      	adds	r7, #16
 801641a:	46bd      	mov	sp, r7
 801641c:	bd80      	pop	{r7, pc}

0801641e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801641e:	b580      	push	{r7, lr}
 8016420:	b082      	sub	sp, #8
 8016422:	af00      	add	r7, sp, #0
 8016424:	6078      	str	r0, [r7, #4]
 8016426:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016428:	2180      	movs	r1, #128	; 0x80
 801642a:	6878      	ldr	r0, [r7, #4]
 801642c:	f000 fd4c 	bl	8016ec8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016430:	2100      	movs	r1, #0
 8016432:	6878      	ldr	r0, [r7, #4]
 8016434:	f000 fd48 	bl	8016ec8 <USBD_LL_StallEP>
}
 8016438:	bf00      	nop
 801643a:	3708      	adds	r7, #8
 801643c:	46bd      	mov	sp, r7
 801643e:	bd80      	pop	{r7, pc}

08016440 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016440:	b580      	push	{r7, lr}
 8016442:	b086      	sub	sp, #24
 8016444:	af00      	add	r7, sp, #0
 8016446:	60f8      	str	r0, [r7, #12]
 8016448:	60b9      	str	r1, [r7, #8]
 801644a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801644c:	2300      	movs	r3, #0
 801644e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	2b00      	cmp	r3, #0
 8016454:	d036      	beq.n	80164c4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8016456:	68fb      	ldr	r3, [r7, #12]
 8016458:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801645a:	6938      	ldr	r0, [r7, #16]
 801645c:	f000 f836 	bl	80164cc <USBD_GetLen>
 8016460:	4603      	mov	r3, r0
 8016462:	3301      	adds	r3, #1
 8016464:	b29b      	uxth	r3, r3
 8016466:	005b      	lsls	r3, r3, #1
 8016468:	b29a      	uxth	r2, r3
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801646e:	7dfb      	ldrb	r3, [r7, #23]
 8016470:	68ba      	ldr	r2, [r7, #8]
 8016472:	4413      	add	r3, r2
 8016474:	687a      	ldr	r2, [r7, #4]
 8016476:	7812      	ldrb	r2, [r2, #0]
 8016478:	701a      	strb	r2, [r3, #0]
  idx++;
 801647a:	7dfb      	ldrb	r3, [r7, #23]
 801647c:	3301      	adds	r3, #1
 801647e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016480:	7dfb      	ldrb	r3, [r7, #23]
 8016482:	68ba      	ldr	r2, [r7, #8]
 8016484:	4413      	add	r3, r2
 8016486:	2203      	movs	r2, #3
 8016488:	701a      	strb	r2, [r3, #0]
  idx++;
 801648a:	7dfb      	ldrb	r3, [r7, #23]
 801648c:	3301      	adds	r3, #1
 801648e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016490:	e013      	b.n	80164ba <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8016492:	7dfb      	ldrb	r3, [r7, #23]
 8016494:	68ba      	ldr	r2, [r7, #8]
 8016496:	4413      	add	r3, r2
 8016498:	693a      	ldr	r2, [r7, #16]
 801649a:	7812      	ldrb	r2, [r2, #0]
 801649c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801649e:	693b      	ldr	r3, [r7, #16]
 80164a0:	3301      	adds	r3, #1
 80164a2:	613b      	str	r3, [r7, #16]
    idx++;
 80164a4:	7dfb      	ldrb	r3, [r7, #23]
 80164a6:	3301      	adds	r3, #1
 80164a8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80164aa:	7dfb      	ldrb	r3, [r7, #23]
 80164ac:	68ba      	ldr	r2, [r7, #8]
 80164ae:	4413      	add	r3, r2
 80164b0:	2200      	movs	r2, #0
 80164b2:	701a      	strb	r2, [r3, #0]
    idx++;
 80164b4:	7dfb      	ldrb	r3, [r7, #23]
 80164b6:	3301      	adds	r3, #1
 80164b8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80164ba:	693b      	ldr	r3, [r7, #16]
 80164bc:	781b      	ldrb	r3, [r3, #0]
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d1e7      	bne.n	8016492 <USBD_GetString+0x52>
 80164c2:	e000      	b.n	80164c6 <USBD_GetString+0x86>
    return;
 80164c4:	bf00      	nop
  }
}
 80164c6:	3718      	adds	r7, #24
 80164c8:	46bd      	mov	sp, r7
 80164ca:	bd80      	pop	{r7, pc}

080164cc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80164cc:	b480      	push	{r7}
 80164ce:	b085      	sub	sp, #20
 80164d0:	af00      	add	r7, sp, #0
 80164d2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80164d4:	2300      	movs	r3, #0
 80164d6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80164dc:	e005      	b.n	80164ea <USBD_GetLen+0x1e>
  {
    len++;
 80164de:	7bfb      	ldrb	r3, [r7, #15]
 80164e0:	3301      	adds	r3, #1
 80164e2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80164e4:	68bb      	ldr	r3, [r7, #8]
 80164e6:	3301      	adds	r3, #1
 80164e8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80164ea:	68bb      	ldr	r3, [r7, #8]
 80164ec:	781b      	ldrb	r3, [r3, #0]
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d1f5      	bne.n	80164de <USBD_GetLen+0x12>
  }

  return len;
 80164f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80164f4:	4618      	mov	r0, r3
 80164f6:	3714      	adds	r7, #20
 80164f8:	46bd      	mov	sp, r7
 80164fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164fe:	4770      	bx	lr

08016500 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016500:	b580      	push	{r7, lr}
 8016502:	b084      	sub	sp, #16
 8016504:	af00      	add	r7, sp, #0
 8016506:	60f8      	str	r0, [r7, #12]
 8016508:	60b9      	str	r1, [r7, #8]
 801650a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801650c:	68fb      	ldr	r3, [r7, #12]
 801650e:	2202      	movs	r2, #2
 8016510:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8016514:	68fb      	ldr	r3, [r7, #12]
 8016516:	687a      	ldr	r2, [r7, #4]
 8016518:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801651a:	68fb      	ldr	r3, [r7, #12]
 801651c:	687a      	ldr	r2, [r7, #4]
 801651e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	68ba      	ldr	r2, [r7, #8]
 8016524:	2100      	movs	r1, #0
 8016526:	68f8      	ldr	r0, [r7, #12]
 8016528:	f000 fd57 	bl	8016fda <USBD_LL_Transmit>

  return USBD_OK;
 801652c:	2300      	movs	r3, #0
}
 801652e:	4618      	mov	r0, r3
 8016530:	3710      	adds	r7, #16
 8016532:	46bd      	mov	sp, r7
 8016534:	bd80      	pop	{r7, pc}

08016536 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8016536:	b580      	push	{r7, lr}
 8016538:	b084      	sub	sp, #16
 801653a:	af00      	add	r7, sp, #0
 801653c:	60f8      	str	r0, [r7, #12]
 801653e:	60b9      	str	r1, [r7, #8]
 8016540:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	68ba      	ldr	r2, [r7, #8]
 8016546:	2100      	movs	r1, #0
 8016548:	68f8      	ldr	r0, [r7, #12]
 801654a:	f000 fd46 	bl	8016fda <USBD_LL_Transmit>

  return USBD_OK;
 801654e:	2300      	movs	r3, #0
}
 8016550:	4618      	mov	r0, r3
 8016552:	3710      	adds	r7, #16
 8016554:	46bd      	mov	sp, r7
 8016556:	bd80      	pop	{r7, pc}

08016558 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8016558:	b580      	push	{r7, lr}
 801655a:	b084      	sub	sp, #16
 801655c:	af00      	add	r7, sp, #0
 801655e:	60f8      	str	r0, [r7, #12]
 8016560:	60b9      	str	r1, [r7, #8]
 8016562:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8016564:	68fb      	ldr	r3, [r7, #12]
 8016566:	2203      	movs	r2, #3
 8016568:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801656c:	68fb      	ldr	r3, [r7, #12]
 801656e:	687a      	ldr	r2, [r7, #4]
 8016570:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8016574:	68fb      	ldr	r3, [r7, #12]
 8016576:	687a      	ldr	r2, [r7, #4]
 8016578:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	68ba      	ldr	r2, [r7, #8]
 8016580:	2100      	movs	r1, #0
 8016582:	68f8      	ldr	r0, [r7, #12]
 8016584:	f000 fd4a 	bl	801701c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016588:	2300      	movs	r3, #0
}
 801658a:	4618      	mov	r0, r3
 801658c:	3710      	adds	r7, #16
 801658e:	46bd      	mov	sp, r7
 8016590:	bd80      	pop	{r7, pc}

08016592 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016592:	b580      	push	{r7, lr}
 8016594:	b084      	sub	sp, #16
 8016596:	af00      	add	r7, sp, #0
 8016598:	60f8      	str	r0, [r7, #12]
 801659a:	60b9      	str	r1, [r7, #8]
 801659c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	68ba      	ldr	r2, [r7, #8]
 80165a2:	2100      	movs	r1, #0
 80165a4:	68f8      	ldr	r0, [r7, #12]
 80165a6:	f000 fd39 	bl	801701c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80165aa:	2300      	movs	r3, #0
}
 80165ac:	4618      	mov	r0, r3
 80165ae:	3710      	adds	r7, #16
 80165b0:	46bd      	mov	sp, r7
 80165b2:	bd80      	pop	{r7, pc}

080165b4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80165b4:	b580      	push	{r7, lr}
 80165b6:	b082      	sub	sp, #8
 80165b8:	af00      	add	r7, sp, #0
 80165ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	2204      	movs	r2, #4
 80165c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80165c4:	2300      	movs	r3, #0
 80165c6:	2200      	movs	r2, #0
 80165c8:	2100      	movs	r1, #0
 80165ca:	6878      	ldr	r0, [r7, #4]
 80165cc:	f000 fd05 	bl	8016fda <USBD_LL_Transmit>

  return USBD_OK;
 80165d0:	2300      	movs	r3, #0
}
 80165d2:	4618      	mov	r0, r3
 80165d4:	3708      	adds	r7, #8
 80165d6:	46bd      	mov	sp, r7
 80165d8:	bd80      	pop	{r7, pc}

080165da <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80165da:	b580      	push	{r7, lr}
 80165dc:	b082      	sub	sp, #8
 80165de:	af00      	add	r7, sp, #0
 80165e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	2205      	movs	r2, #5
 80165e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80165ea:	2300      	movs	r3, #0
 80165ec:	2200      	movs	r2, #0
 80165ee:	2100      	movs	r1, #0
 80165f0:	6878      	ldr	r0, [r7, #4]
 80165f2:	f000 fd13 	bl	801701c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80165f6:	2300      	movs	r3, #0
}
 80165f8:	4618      	mov	r0, r3
 80165fa:	3708      	adds	r7, #8
 80165fc:	46bd      	mov	sp, r7
 80165fe:	bd80      	pop	{r7, pc}

08016600 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8016600:	b480      	push	{r7}
 8016602:	b087      	sub	sp, #28
 8016604:	af00      	add	r7, sp, #0
 8016606:	60f8      	str	r0, [r7, #12]
 8016608:	60b9      	str	r1, [r7, #8]
 801660a:	4613      	mov	r3, r2
 801660c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801660e:	2301      	movs	r3, #1
 8016610:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8016612:	2300      	movs	r3, #0
 8016614:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8016616:	4b1f      	ldr	r3, [pc, #124]	; (8016694 <FATFS_LinkDriverEx+0x94>)
 8016618:	7a5b      	ldrb	r3, [r3, #9]
 801661a:	b2db      	uxtb	r3, r3
 801661c:	2b00      	cmp	r3, #0
 801661e:	d131      	bne.n	8016684 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8016620:	4b1c      	ldr	r3, [pc, #112]	; (8016694 <FATFS_LinkDriverEx+0x94>)
 8016622:	7a5b      	ldrb	r3, [r3, #9]
 8016624:	b2db      	uxtb	r3, r3
 8016626:	461a      	mov	r2, r3
 8016628:	4b1a      	ldr	r3, [pc, #104]	; (8016694 <FATFS_LinkDriverEx+0x94>)
 801662a:	2100      	movs	r1, #0
 801662c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801662e:	4b19      	ldr	r3, [pc, #100]	; (8016694 <FATFS_LinkDriverEx+0x94>)
 8016630:	7a5b      	ldrb	r3, [r3, #9]
 8016632:	b2db      	uxtb	r3, r3
 8016634:	4a17      	ldr	r2, [pc, #92]	; (8016694 <FATFS_LinkDriverEx+0x94>)
 8016636:	009b      	lsls	r3, r3, #2
 8016638:	4413      	add	r3, r2
 801663a:	68fa      	ldr	r2, [r7, #12]
 801663c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801663e:	4b15      	ldr	r3, [pc, #84]	; (8016694 <FATFS_LinkDriverEx+0x94>)
 8016640:	7a5b      	ldrb	r3, [r3, #9]
 8016642:	b2db      	uxtb	r3, r3
 8016644:	461a      	mov	r2, r3
 8016646:	4b13      	ldr	r3, [pc, #76]	; (8016694 <FATFS_LinkDriverEx+0x94>)
 8016648:	4413      	add	r3, r2
 801664a:	79fa      	ldrb	r2, [r7, #7]
 801664c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801664e:	4b11      	ldr	r3, [pc, #68]	; (8016694 <FATFS_LinkDriverEx+0x94>)
 8016650:	7a5b      	ldrb	r3, [r3, #9]
 8016652:	b2db      	uxtb	r3, r3
 8016654:	1c5a      	adds	r2, r3, #1
 8016656:	b2d1      	uxtb	r1, r2
 8016658:	4a0e      	ldr	r2, [pc, #56]	; (8016694 <FATFS_LinkDriverEx+0x94>)
 801665a:	7251      	strb	r1, [r2, #9]
 801665c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801665e:	7dbb      	ldrb	r3, [r7, #22]
 8016660:	3330      	adds	r3, #48	; 0x30
 8016662:	b2da      	uxtb	r2, r3
 8016664:	68bb      	ldr	r3, [r7, #8]
 8016666:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016668:	68bb      	ldr	r3, [r7, #8]
 801666a:	3301      	adds	r3, #1
 801666c:	223a      	movs	r2, #58	; 0x3a
 801666e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8016670:	68bb      	ldr	r3, [r7, #8]
 8016672:	3302      	adds	r3, #2
 8016674:	222f      	movs	r2, #47	; 0x2f
 8016676:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016678:	68bb      	ldr	r3, [r7, #8]
 801667a:	3303      	adds	r3, #3
 801667c:	2200      	movs	r2, #0
 801667e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8016680:	2300      	movs	r3, #0
 8016682:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8016684:	7dfb      	ldrb	r3, [r7, #23]
}
 8016686:	4618      	mov	r0, r3
 8016688:	371c      	adds	r7, #28
 801668a:	46bd      	mov	sp, r7
 801668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016690:	4770      	bx	lr
 8016692:	bf00      	nop
 8016694:	240015e8 	.word	0x240015e8

08016698 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016698:	b580      	push	{r7, lr}
 801669a:	b082      	sub	sp, #8
 801669c:	af00      	add	r7, sp, #0
 801669e:	6078      	str	r0, [r7, #4]
 80166a0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80166a2:	2200      	movs	r2, #0
 80166a4:	6839      	ldr	r1, [r7, #0]
 80166a6:	6878      	ldr	r0, [r7, #4]
 80166a8:	f7ff ffaa 	bl	8016600 <FATFS_LinkDriverEx>
 80166ac:	4603      	mov	r3, r0
}
 80166ae:	4618      	mov	r0, r3
 80166b0:	3708      	adds	r7, #8
 80166b2:	46bd      	mov	sp, r7
 80166b4:	bd80      	pop	{r7, pc}
	...

080166b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80166b8:	b580      	push	{r7, lr}
 80166ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 80166bc:	2201      	movs	r2, #1
 80166be:	4913      	ldr	r1, [pc, #76]	; (801670c <MX_USB_DEVICE_Init+0x54>)
 80166c0:	4813      	ldr	r0, [pc, #76]	; (8016710 <MX_USB_DEVICE_Init+0x58>)
 80166c2:	f7fe fca5 	bl	8015010 <USBD_Init>
 80166c6:	4603      	mov	r3, r0
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	d001      	beq.n	80166d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80166cc:	f7ec f986 	bl	80029dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 80166d0:	4910      	ldr	r1, [pc, #64]	; (8016714 <MX_USB_DEVICE_Init+0x5c>)
 80166d2:	480f      	ldr	r0, [pc, #60]	; (8016710 <MX_USB_DEVICE_Init+0x58>)
 80166d4:	f7fe fccc 	bl	8015070 <USBD_RegisterClass>
 80166d8:	4603      	mov	r3, r0
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d001      	beq.n	80166e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80166de:	f7ec f97d 	bl	80029dc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 80166e2:	490d      	ldr	r1, [pc, #52]	; (8016718 <MX_USB_DEVICE_Init+0x60>)
 80166e4:	480a      	ldr	r0, [pc, #40]	; (8016710 <MX_USB_DEVICE_Init+0x58>)
 80166e6:	f7fe fbc3 	bl	8014e70 <USBD_CDC_RegisterInterface>
 80166ea:	4603      	mov	r3, r0
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d001      	beq.n	80166f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80166f0:	f7ec f974 	bl	80029dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 80166f4:	4806      	ldr	r0, [pc, #24]	; (8016710 <MX_USB_DEVICE_Init+0x58>)
 80166f6:	f7fe fcf1 	bl	80150dc <USBD_Start>
 80166fa:	4603      	mov	r3, r0
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	d001      	beq.n	8016704 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016700:	f7ec f96c 	bl	80029dc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8016704:	f7f3 f908 	bl	8009918 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016708:	bf00      	nop
 801670a:	bd80      	pop	{r7, pc}
 801670c:	240000b0 	.word	0x240000b0
 8016710:	240015f4 	.word	0x240015f4
 8016714:	2400001c 	.word	0x2400001c
 8016718:	2400009c 	.word	0x2400009c

0801671c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 801671c:	b580      	push	{r7, lr}
 801671e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8016720:	2200      	movs	r2, #0
 8016722:	4905      	ldr	r1, [pc, #20]	; (8016738 <CDC_Init_HS+0x1c>)
 8016724:	4805      	ldr	r0, [pc, #20]	; (801673c <CDC_Init_HS+0x20>)
 8016726:	f7fe fbbd 	bl	8014ea4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 801672a:	4905      	ldr	r1, [pc, #20]	; (8016740 <CDC_Init_HS+0x24>)
 801672c:	4803      	ldr	r0, [pc, #12]	; (801673c <CDC_Init_HS+0x20>)
 801672e:	f7fe fbdb 	bl	8014ee8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016732:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8016734:	4618      	mov	r0, r3
 8016736:	bd80      	pop	{r7, pc}
 8016738:	240020d0 	.word	0x240020d0
 801673c:	240015f4 	.word	0x240015f4
 8016740:	240018d0 	.word	0x240018d0

08016744 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8016744:	b480      	push	{r7}
 8016746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8016748:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 801674a:	4618      	mov	r0, r3
 801674c:	46bd      	mov	sp, r7
 801674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016752:	4770      	bx	lr

08016754 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016754:	b480      	push	{r7}
 8016756:	b083      	sub	sp, #12
 8016758:	af00      	add	r7, sp, #0
 801675a:	4603      	mov	r3, r0
 801675c:	6039      	str	r1, [r7, #0]
 801675e:	71fb      	strb	r3, [r7, #7]
 8016760:	4613      	mov	r3, r2
 8016762:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8016764:	79fb      	ldrb	r3, [r7, #7]
 8016766:	2b23      	cmp	r3, #35	; 0x23
 8016768:	d84a      	bhi.n	8016800 <CDC_Control_HS+0xac>
 801676a:	a201      	add	r2, pc, #4	; (adr r2, 8016770 <CDC_Control_HS+0x1c>)
 801676c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016770:	08016801 	.word	0x08016801
 8016774:	08016801 	.word	0x08016801
 8016778:	08016801 	.word	0x08016801
 801677c:	08016801 	.word	0x08016801
 8016780:	08016801 	.word	0x08016801
 8016784:	08016801 	.word	0x08016801
 8016788:	08016801 	.word	0x08016801
 801678c:	08016801 	.word	0x08016801
 8016790:	08016801 	.word	0x08016801
 8016794:	08016801 	.word	0x08016801
 8016798:	08016801 	.word	0x08016801
 801679c:	08016801 	.word	0x08016801
 80167a0:	08016801 	.word	0x08016801
 80167a4:	08016801 	.word	0x08016801
 80167a8:	08016801 	.word	0x08016801
 80167ac:	08016801 	.word	0x08016801
 80167b0:	08016801 	.word	0x08016801
 80167b4:	08016801 	.word	0x08016801
 80167b8:	08016801 	.word	0x08016801
 80167bc:	08016801 	.word	0x08016801
 80167c0:	08016801 	.word	0x08016801
 80167c4:	08016801 	.word	0x08016801
 80167c8:	08016801 	.word	0x08016801
 80167cc:	08016801 	.word	0x08016801
 80167d0:	08016801 	.word	0x08016801
 80167d4:	08016801 	.word	0x08016801
 80167d8:	08016801 	.word	0x08016801
 80167dc:	08016801 	.word	0x08016801
 80167e0:	08016801 	.word	0x08016801
 80167e4:	08016801 	.word	0x08016801
 80167e8:	08016801 	.word	0x08016801
 80167ec:	08016801 	.word	0x08016801
 80167f0:	08016801 	.word	0x08016801
 80167f4:	08016801 	.word	0x08016801
 80167f8:	08016801 	.word	0x08016801
 80167fc:	08016801 	.word	0x08016801
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016800:	bf00      	nop
  }

  return (USBD_OK);
 8016802:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8016804:	4618      	mov	r0, r3
 8016806:	370c      	adds	r7, #12
 8016808:	46bd      	mov	sp, r7
 801680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801680e:	4770      	bx	lr

08016810 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8016810:	b580      	push	{r7, lr}
 8016812:	b084      	sub	sp, #16
 8016814:	af00      	add	r7, sp, #0
 8016816:	6078      	str	r0, [r7, #4]
 8016818:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 801681a:	6879      	ldr	r1, [r7, #4]
 801681c:	480e      	ldr	r0, [pc, #56]	; (8016858 <CDC_Receive_HS+0x48>)
 801681e:	f7fe fb63 	bl	8014ee8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8016822:	480d      	ldr	r0, [pc, #52]	; (8016858 <CDC_Receive_HS+0x48>)
 8016824:	f7fe fbbe 	bl	8014fa4 <USBD_CDC_ReceivePacket>

  extern uint8_t usbDataBuffer[usbBufferLen];
  extern uint32_t usbBytesReady;

  uint32_t cpyLen = *Len;
 8016828:	683b      	ldr	r3, [r7, #0]
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	60fb      	str	r3, [r7, #12]
  /*char debug[250];
  sprintf(debug, "cpyLen: %d\n", cpyLen);
  CDC_Transmit_HS(debug, strlen(debug));*/

  memcpy(usbDataBuffer + usbBytesReady, Buf, cpyLen);
 801682e:	4b0b      	ldr	r3, [pc, #44]	; (801685c <CDC_Receive_HS+0x4c>)
 8016830:	681b      	ldr	r3, [r3, #0]
 8016832:	4a0b      	ldr	r2, [pc, #44]	; (8016860 <CDC_Receive_HS+0x50>)
 8016834:	4413      	add	r3, r2
 8016836:	68fa      	ldr	r2, [r7, #12]
 8016838:	6879      	ldr	r1, [r7, #4]
 801683a:	4618      	mov	r0, r3
 801683c:	f000 fcf0 	bl	8017220 <memcpy>
  usbBytesReady += cpyLen;
 8016840:	4b06      	ldr	r3, [pc, #24]	; (801685c <CDC_Receive_HS+0x4c>)
 8016842:	681a      	ldr	r2, [r3, #0]
 8016844:	68fb      	ldr	r3, [r7, #12]
 8016846:	4413      	add	r3, r2
 8016848:	4a04      	ldr	r2, [pc, #16]	; (801685c <CDC_Receive_HS+0x4c>)
 801684a:	6013      	str	r3, [r2, #0]
  
  return (USBD_OK);
 801684c:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 801684e:	4618      	mov	r0, r3
 8016850:	3710      	adds	r7, #16
 8016852:	46bd      	mov	sp, r7
 8016854:	bd80      	pop	{r7, pc}
 8016856:	bf00      	nop
 8016858:	240015f4 	.word	0x240015f4
 801685c:	2400026c 	.word	0x2400026c
 8016860:	2400016c 	.word	0x2400016c

08016864 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8016864:	b580      	push	{r7, lr}
 8016866:	b084      	sub	sp, #16
 8016868:	af00      	add	r7, sp, #0
 801686a:	6078      	str	r0, [r7, #4]
 801686c:	460b      	mov	r3, r1
 801686e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8016870:	2300      	movs	r3, #0
 8016872:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8016874:	4b0d      	ldr	r3, [pc, #52]	; (80168ac <CDC_Transmit_HS+0x48>)
 8016876:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801687a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801687c:	68bb      	ldr	r3, [r7, #8]
 801687e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8016882:	2b00      	cmp	r3, #0
 8016884:	d001      	beq.n	801688a <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8016886:	2301      	movs	r3, #1
 8016888:	e00b      	b.n	80168a2 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 801688a:	887b      	ldrh	r3, [r7, #2]
 801688c:	461a      	mov	r2, r3
 801688e:	6879      	ldr	r1, [r7, #4]
 8016890:	4806      	ldr	r0, [pc, #24]	; (80168ac <CDC_Transmit_HS+0x48>)
 8016892:	f7fe fb07 	bl	8014ea4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8016896:	4805      	ldr	r0, [pc, #20]	; (80168ac <CDC_Transmit_HS+0x48>)
 8016898:	f7fe fb44 	bl	8014f24 <USBD_CDC_TransmitPacket>
 801689c:	4603      	mov	r3, r0
 801689e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 80168a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80168a2:	4618      	mov	r0, r3
 80168a4:	3710      	adds	r7, #16
 80168a6:	46bd      	mov	sp, r7
 80168a8:	bd80      	pop	{r7, pc}
 80168aa:	bf00      	nop
 80168ac:	240015f4 	.word	0x240015f4

080168b0 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80168b0:	b480      	push	{r7}
 80168b2:	b087      	sub	sp, #28
 80168b4:	af00      	add	r7, sp, #0
 80168b6:	60f8      	str	r0, [r7, #12]
 80168b8:	60b9      	str	r1, [r7, #8]
 80168ba:	4613      	mov	r3, r2
 80168bc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80168be:	2300      	movs	r3, #0
 80168c0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 80168c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80168c6:	4618      	mov	r0, r3
 80168c8:	371c      	adds	r7, #28
 80168ca:	46bd      	mov	sp, r7
 80168cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168d0:	4770      	bx	lr
	...

080168d4 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80168d4:	b480      	push	{r7}
 80168d6:	b083      	sub	sp, #12
 80168d8:	af00      	add	r7, sp, #0
 80168da:	4603      	mov	r3, r0
 80168dc:	6039      	str	r1, [r7, #0]
 80168de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80168e0:	683b      	ldr	r3, [r7, #0]
 80168e2:	2212      	movs	r2, #18
 80168e4:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 80168e6:	4b03      	ldr	r3, [pc, #12]	; (80168f4 <USBD_HS_DeviceDescriptor+0x20>)
}
 80168e8:	4618      	mov	r0, r3
 80168ea:	370c      	adds	r7, #12
 80168ec:	46bd      	mov	sp, r7
 80168ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168f2:	4770      	bx	lr
 80168f4:	240000cc 	.word	0x240000cc

080168f8 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80168f8:	b480      	push	{r7}
 80168fa:	b083      	sub	sp, #12
 80168fc:	af00      	add	r7, sp, #0
 80168fe:	4603      	mov	r3, r0
 8016900:	6039      	str	r1, [r7, #0]
 8016902:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016904:	683b      	ldr	r3, [r7, #0]
 8016906:	2204      	movs	r2, #4
 8016908:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801690a:	4b03      	ldr	r3, [pc, #12]	; (8016918 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 801690c:	4618      	mov	r0, r3
 801690e:	370c      	adds	r7, #12
 8016910:	46bd      	mov	sp, r7
 8016912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016916:	4770      	bx	lr
 8016918:	240000e0 	.word	0x240000e0

0801691c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801691c:	b580      	push	{r7, lr}
 801691e:	b082      	sub	sp, #8
 8016920:	af00      	add	r7, sp, #0
 8016922:	4603      	mov	r3, r0
 8016924:	6039      	str	r1, [r7, #0]
 8016926:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016928:	79fb      	ldrb	r3, [r7, #7]
 801692a:	2b00      	cmp	r3, #0
 801692c:	d105      	bne.n	801693a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801692e:	683a      	ldr	r2, [r7, #0]
 8016930:	4907      	ldr	r1, [pc, #28]	; (8016950 <USBD_HS_ProductStrDescriptor+0x34>)
 8016932:	4808      	ldr	r0, [pc, #32]	; (8016954 <USBD_HS_ProductStrDescriptor+0x38>)
 8016934:	f7ff fd84 	bl	8016440 <USBD_GetString>
 8016938:	e004      	b.n	8016944 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801693a:	683a      	ldr	r2, [r7, #0]
 801693c:	4904      	ldr	r1, [pc, #16]	; (8016950 <USBD_HS_ProductStrDescriptor+0x34>)
 801693e:	4805      	ldr	r0, [pc, #20]	; (8016954 <USBD_HS_ProductStrDescriptor+0x38>)
 8016940:	f7ff fd7e 	bl	8016440 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016944:	4b02      	ldr	r3, [pc, #8]	; (8016950 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8016946:	4618      	mov	r0, r3
 8016948:	3708      	adds	r7, #8
 801694a:	46bd      	mov	sp, r7
 801694c:	bd80      	pop	{r7, pc}
 801694e:	bf00      	nop
 8016950:	240028d0 	.word	0x240028d0
 8016954:	08018570 	.word	0x08018570

08016958 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016958:	b580      	push	{r7, lr}
 801695a:	b082      	sub	sp, #8
 801695c:	af00      	add	r7, sp, #0
 801695e:	4603      	mov	r3, r0
 8016960:	6039      	str	r1, [r7, #0]
 8016962:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016964:	683a      	ldr	r2, [r7, #0]
 8016966:	4904      	ldr	r1, [pc, #16]	; (8016978 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8016968:	4804      	ldr	r0, [pc, #16]	; (801697c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 801696a:	f7ff fd69 	bl	8016440 <USBD_GetString>
  return USBD_StrDesc;
 801696e:	4b02      	ldr	r3, [pc, #8]	; (8016978 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8016970:	4618      	mov	r0, r3
 8016972:	3708      	adds	r7, #8
 8016974:	46bd      	mov	sp, r7
 8016976:	bd80      	pop	{r7, pc}
 8016978:	240028d0 	.word	0x240028d0
 801697c:	0801858c 	.word	0x0801858c

08016980 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016980:	b580      	push	{r7, lr}
 8016982:	b082      	sub	sp, #8
 8016984:	af00      	add	r7, sp, #0
 8016986:	4603      	mov	r3, r0
 8016988:	6039      	str	r1, [r7, #0]
 801698a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801698c:	683b      	ldr	r3, [r7, #0]
 801698e:	221a      	movs	r2, #26
 8016990:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016992:	f000 f843 	bl	8016a1c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8016996:	4b02      	ldr	r3, [pc, #8]	; (80169a0 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8016998:	4618      	mov	r0, r3
 801699a:	3708      	adds	r7, #8
 801699c:	46bd      	mov	sp, r7
 801699e:	bd80      	pop	{r7, pc}
 80169a0:	240000e4 	.word	0x240000e4

080169a4 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80169a4:	b580      	push	{r7, lr}
 80169a6:	b082      	sub	sp, #8
 80169a8:	af00      	add	r7, sp, #0
 80169aa:	4603      	mov	r3, r0
 80169ac:	6039      	str	r1, [r7, #0]
 80169ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80169b0:	79fb      	ldrb	r3, [r7, #7]
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	d105      	bne.n	80169c2 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80169b6:	683a      	ldr	r2, [r7, #0]
 80169b8:	4907      	ldr	r1, [pc, #28]	; (80169d8 <USBD_HS_ConfigStrDescriptor+0x34>)
 80169ba:	4808      	ldr	r0, [pc, #32]	; (80169dc <USBD_HS_ConfigStrDescriptor+0x38>)
 80169bc:	f7ff fd40 	bl	8016440 <USBD_GetString>
 80169c0:	e004      	b.n	80169cc <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80169c2:	683a      	ldr	r2, [r7, #0]
 80169c4:	4904      	ldr	r1, [pc, #16]	; (80169d8 <USBD_HS_ConfigStrDescriptor+0x34>)
 80169c6:	4805      	ldr	r0, [pc, #20]	; (80169dc <USBD_HS_ConfigStrDescriptor+0x38>)
 80169c8:	f7ff fd3a 	bl	8016440 <USBD_GetString>
  }
  return USBD_StrDesc;
 80169cc:	4b02      	ldr	r3, [pc, #8]	; (80169d8 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 80169ce:	4618      	mov	r0, r3
 80169d0:	3708      	adds	r7, #8
 80169d2:	46bd      	mov	sp, r7
 80169d4:	bd80      	pop	{r7, pc}
 80169d6:	bf00      	nop
 80169d8:	240028d0 	.word	0x240028d0
 80169dc:	08018590 	.word	0x08018590

080169e0 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80169e0:	b580      	push	{r7, lr}
 80169e2:	b082      	sub	sp, #8
 80169e4:	af00      	add	r7, sp, #0
 80169e6:	4603      	mov	r3, r0
 80169e8:	6039      	str	r1, [r7, #0]
 80169ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80169ec:	79fb      	ldrb	r3, [r7, #7]
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d105      	bne.n	80169fe <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80169f2:	683a      	ldr	r2, [r7, #0]
 80169f4:	4907      	ldr	r1, [pc, #28]	; (8016a14 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80169f6:	4808      	ldr	r0, [pc, #32]	; (8016a18 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80169f8:	f7ff fd22 	bl	8016440 <USBD_GetString>
 80169fc:	e004      	b.n	8016a08 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80169fe:	683a      	ldr	r2, [r7, #0]
 8016a00:	4904      	ldr	r1, [pc, #16]	; (8016a14 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8016a02:	4805      	ldr	r0, [pc, #20]	; (8016a18 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8016a04:	f7ff fd1c 	bl	8016440 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016a08:	4b02      	ldr	r3, [pc, #8]	; (8016a14 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8016a0a:	4618      	mov	r0, r3
 8016a0c:	3708      	adds	r7, #8
 8016a0e:	46bd      	mov	sp, r7
 8016a10:	bd80      	pop	{r7, pc}
 8016a12:	bf00      	nop
 8016a14:	240028d0 	.word	0x240028d0
 8016a18:	0801859c 	.word	0x0801859c

08016a1c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016a1c:	b580      	push	{r7, lr}
 8016a1e:	b084      	sub	sp, #16
 8016a20:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016a22:	4b0f      	ldr	r3, [pc, #60]	; (8016a60 <Get_SerialNum+0x44>)
 8016a24:	681b      	ldr	r3, [r3, #0]
 8016a26:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016a28:	4b0e      	ldr	r3, [pc, #56]	; (8016a64 <Get_SerialNum+0x48>)
 8016a2a:	681b      	ldr	r3, [r3, #0]
 8016a2c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016a2e:	4b0e      	ldr	r3, [pc, #56]	; (8016a68 <Get_SerialNum+0x4c>)
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016a34:	68fa      	ldr	r2, [r7, #12]
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	4413      	add	r3, r2
 8016a3a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016a3c:	68fb      	ldr	r3, [r7, #12]
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d009      	beq.n	8016a56 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016a42:	2208      	movs	r2, #8
 8016a44:	4909      	ldr	r1, [pc, #36]	; (8016a6c <Get_SerialNum+0x50>)
 8016a46:	68f8      	ldr	r0, [r7, #12]
 8016a48:	f000 f814 	bl	8016a74 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016a4c:	2204      	movs	r2, #4
 8016a4e:	4908      	ldr	r1, [pc, #32]	; (8016a70 <Get_SerialNum+0x54>)
 8016a50:	68b8      	ldr	r0, [r7, #8]
 8016a52:	f000 f80f 	bl	8016a74 <IntToUnicode>
  }
}
 8016a56:	bf00      	nop
 8016a58:	3710      	adds	r7, #16
 8016a5a:	46bd      	mov	sp, r7
 8016a5c:	bd80      	pop	{r7, pc}
 8016a5e:	bf00      	nop
 8016a60:	1ff1e800 	.word	0x1ff1e800
 8016a64:	1ff1e804 	.word	0x1ff1e804
 8016a68:	1ff1e808 	.word	0x1ff1e808
 8016a6c:	240000e6 	.word	0x240000e6
 8016a70:	240000f6 	.word	0x240000f6

08016a74 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016a74:	b480      	push	{r7}
 8016a76:	b087      	sub	sp, #28
 8016a78:	af00      	add	r7, sp, #0
 8016a7a:	60f8      	str	r0, [r7, #12]
 8016a7c:	60b9      	str	r1, [r7, #8]
 8016a7e:	4613      	mov	r3, r2
 8016a80:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016a82:	2300      	movs	r3, #0
 8016a84:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016a86:	2300      	movs	r3, #0
 8016a88:	75fb      	strb	r3, [r7, #23]
 8016a8a:	e027      	b.n	8016adc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016a8c:	68fb      	ldr	r3, [r7, #12]
 8016a8e:	0f1b      	lsrs	r3, r3, #28
 8016a90:	2b09      	cmp	r3, #9
 8016a92:	d80b      	bhi.n	8016aac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016a94:	68fb      	ldr	r3, [r7, #12]
 8016a96:	0f1b      	lsrs	r3, r3, #28
 8016a98:	b2da      	uxtb	r2, r3
 8016a9a:	7dfb      	ldrb	r3, [r7, #23]
 8016a9c:	005b      	lsls	r3, r3, #1
 8016a9e:	4619      	mov	r1, r3
 8016aa0:	68bb      	ldr	r3, [r7, #8]
 8016aa2:	440b      	add	r3, r1
 8016aa4:	3230      	adds	r2, #48	; 0x30
 8016aa6:	b2d2      	uxtb	r2, r2
 8016aa8:	701a      	strb	r2, [r3, #0]
 8016aaa:	e00a      	b.n	8016ac2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016aac:	68fb      	ldr	r3, [r7, #12]
 8016aae:	0f1b      	lsrs	r3, r3, #28
 8016ab0:	b2da      	uxtb	r2, r3
 8016ab2:	7dfb      	ldrb	r3, [r7, #23]
 8016ab4:	005b      	lsls	r3, r3, #1
 8016ab6:	4619      	mov	r1, r3
 8016ab8:	68bb      	ldr	r3, [r7, #8]
 8016aba:	440b      	add	r3, r1
 8016abc:	3237      	adds	r2, #55	; 0x37
 8016abe:	b2d2      	uxtb	r2, r2
 8016ac0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016ac2:	68fb      	ldr	r3, [r7, #12]
 8016ac4:	011b      	lsls	r3, r3, #4
 8016ac6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016ac8:	7dfb      	ldrb	r3, [r7, #23]
 8016aca:	005b      	lsls	r3, r3, #1
 8016acc:	3301      	adds	r3, #1
 8016ace:	68ba      	ldr	r2, [r7, #8]
 8016ad0:	4413      	add	r3, r2
 8016ad2:	2200      	movs	r2, #0
 8016ad4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016ad6:	7dfb      	ldrb	r3, [r7, #23]
 8016ad8:	3301      	adds	r3, #1
 8016ada:	75fb      	strb	r3, [r7, #23]
 8016adc:	7dfa      	ldrb	r2, [r7, #23]
 8016ade:	79fb      	ldrb	r3, [r7, #7]
 8016ae0:	429a      	cmp	r2, r3
 8016ae2:	d3d3      	bcc.n	8016a8c <IntToUnicode+0x18>
  }
}
 8016ae4:	bf00      	nop
 8016ae6:	bf00      	nop
 8016ae8:	371c      	adds	r7, #28
 8016aea:	46bd      	mov	sp, r7
 8016aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016af0:	4770      	bx	lr
	...

08016af4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016af4:	b580      	push	{r7, lr}
 8016af6:	b0b2      	sub	sp, #200	; 0xc8
 8016af8:	af00      	add	r7, sp, #0
 8016afa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8016afc:	f107 0310 	add.w	r3, r7, #16
 8016b00:	22b8      	movs	r2, #184	; 0xb8
 8016b02:	2100      	movs	r1, #0
 8016b04:	4618      	mov	r0, r3
 8016b06:	f000 fb4f 	bl	80171a8 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	681b      	ldr	r3, [r3, #0]
 8016b0e:	4a1a      	ldr	r2, [pc, #104]	; (8016b78 <HAL_PCD_MspInit+0x84>)
 8016b10:	4293      	cmp	r3, r2
 8016b12:	d12c      	bne.n	8016b6e <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8016b14:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8016b18:	f04f 0300 	mov.w	r3, #0
 8016b1c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8016b20:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8016b24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8016b28:	f107 0310 	add.w	r3, r7, #16
 8016b2c:	4618      	mov	r0, r3
 8016b2e:	f7f3 fed3 	bl	800a8d8 <HAL_RCCEx_PeriphCLKConfig>
 8016b32:	4603      	mov	r3, r0
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d001      	beq.n	8016b3c <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8016b38:	f7eb ff50 	bl	80029dc <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8016b3c:	f7f2 feec 	bl	8009918 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8016b40:	4b0e      	ldr	r3, [pc, #56]	; (8016b7c <HAL_PCD_MspInit+0x88>)
 8016b42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016b46:	4a0d      	ldr	r2, [pc, #52]	; (8016b7c <HAL_PCD_MspInit+0x88>)
 8016b48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8016b4c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8016b50:	4b0a      	ldr	r3, [pc, #40]	; (8016b7c <HAL_PCD_MspInit+0x88>)
 8016b52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016b5a:	60fb      	str	r3, [r7, #12]
 8016b5c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8016b5e:	2200      	movs	r2, #0
 8016b60:	2100      	movs	r1, #0
 8016b62:	204d      	movs	r0, #77	; 0x4d
 8016b64:	f7ee fc5d 	bl	8005422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8016b68:	204d      	movs	r0, #77	; 0x4d
 8016b6a:	f7ee fc74 	bl	8005456 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8016b6e:	bf00      	nop
 8016b70:	37c8      	adds	r7, #200	; 0xc8
 8016b72:	46bd      	mov	sp, r7
 8016b74:	bd80      	pop	{r7, pc}
 8016b76:	bf00      	nop
 8016b78:	40040000 	.word	0x40040000
 8016b7c:	58024400 	.word	0x58024400

08016b80 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b80:	b580      	push	{r7, lr}
 8016b82:	b082      	sub	sp, #8
 8016b84:	af00      	add	r7, sp, #0
 8016b86:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8016b94:	4619      	mov	r1, r3
 8016b96:	4610      	mov	r0, r2
 8016b98:	f7fe faed 	bl	8015176 <USBD_LL_SetupStage>
}
 8016b9c:	bf00      	nop
 8016b9e:	3708      	adds	r7, #8
 8016ba0:	46bd      	mov	sp, r7
 8016ba2:	bd80      	pop	{r7, pc}

08016ba4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ba4:	b580      	push	{r7, lr}
 8016ba6:	b082      	sub	sp, #8
 8016ba8:	af00      	add	r7, sp, #0
 8016baa:	6078      	str	r0, [r7, #4]
 8016bac:	460b      	mov	r3, r1
 8016bae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016bb6:	78fa      	ldrb	r2, [r7, #3]
 8016bb8:	6879      	ldr	r1, [r7, #4]
 8016bba:	4613      	mov	r3, r2
 8016bbc:	00db      	lsls	r3, r3, #3
 8016bbe:	4413      	add	r3, r2
 8016bc0:	009b      	lsls	r3, r3, #2
 8016bc2:	440b      	add	r3, r1
 8016bc4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8016bc8:	681a      	ldr	r2, [r3, #0]
 8016bca:	78fb      	ldrb	r3, [r7, #3]
 8016bcc:	4619      	mov	r1, r3
 8016bce:	f7fe fb27 	bl	8015220 <USBD_LL_DataOutStage>
}
 8016bd2:	bf00      	nop
 8016bd4:	3708      	adds	r7, #8
 8016bd6:	46bd      	mov	sp, r7
 8016bd8:	bd80      	pop	{r7, pc}

08016bda <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016bda:	b580      	push	{r7, lr}
 8016bdc:	b082      	sub	sp, #8
 8016bde:	af00      	add	r7, sp, #0
 8016be0:	6078      	str	r0, [r7, #4]
 8016be2:	460b      	mov	r3, r1
 8016be4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016bec:	78fa      	ldrb	r2, [r7, #3]
 8016bee:	6879      	ldr	r1, [r7, #4]
 8016bf0:	4613      	mov	r3, r2
 8016bf2:	00db      	lsls	r3, r3, #3
 8016bf4:	4413      	add	r3, r2
 8016bf6:	009b      	lsls	r3, r3, #2
 8016bf8:	440b      	add	r3, r1
 8016bfa:	3348      	adds	r3, #72	; 0x48
 8016bfc:	681a      	ldr	r2, [r3, #0]
 8016bfe:	78fb      	ldrb	r3, [r7, #3]
 8016c00:	4619      	mov	r1, r3
 8016c02:	f7fe fbc0 	bl	8015386 <USBD_LL_DataInStage>
}
 8016c06:	bf00      	nop
 8016c08:	3708      	adds	r7, #8
 8016c0a:	46bd      	mov	sp, r7
 8016c0c:	bd80      	pop	{r7, pc}

08016c0e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c0e:	b580      	push	{r7, lr}
 8016c10:	b082      	sub	sp, #8
 8016c12:	af00      	add	r7, sp, #0
 8016c14:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016c1c:	4618      	mov	r0, r3
 8016c1e:	f7fe fcfa 	bl	8015616 <USBD_LL_SOF>
}
 8016c22:	bf00      	nop
 8016c24:	3708      	adds	r7, #8
 8016c26:	46bd      	mov	sp, r7
 8016c28:	bd80      	pop	{r7, pc}

08016c2a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c2a:	b580      	push	{r7, lr}
 8016c2c:	b084      	sub	sp, #16
 8016c2e:	af00      	add	r7, sp, #0
 8016c30:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016c32:	2301      	movs	r3, #1
 8016c34:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	691b      	ldr	r3, [r3, #16]
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d102      	bne.n	8016c44 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8016c3e:	2300      	movs	r3, #0
 8016c40:	73fb      	strb	r3, [r7, #15]
 8016c42:	e008      	b.n	8016c56 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	691b      	ldr	r3, [r3, #16]
 8016c48:	2b02      	cmp	r3, #2
 8016c4a:	d102      	bne.n	8016c52 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016c4c:	2301      	movs	r3, #1
 8016c4e:	73fb      	strb	r3, [r7, #15]
 8016c50:	e001      	b.n	8016c56 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016c52:	f7eb fec3 	bl	80029dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016c5c:	7bfa      	ldrb	r2, [r7, #15]
 8016c5e:	4611      	mov	r1, r2
 8016c60:	4618      	mov	r0, r3
 8016c62:	f7fe fc94 	bl	801558e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016c6c:	4618      	mov	r0, r3
 8016c6e:	f7fe fc3c 	bl	80154ea <USBD_LL_Reset>
}
 8016c72:	bf00      	nop
 8016c74:	3710      	adds	r7, #16
 8016c76:	46bd      	mov	sp, r7
 8016c78:	bd80      	pop	{r7, pc}
	...

08016c7c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c7c:	b580      	push	{r7, lr}
 8016c7e:	b082      	sub	sp, #8
 8016c80:	af00      	add	r7, sp, #0
 8016c82:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016c8a:	4618      	mov	r0, r3
 8016c8c:	f7fe fc8f 	bl	80155ae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	681b      	ldr	r3, [r3, #0]
 8016c94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016c98:	681b      	ldr	r3, [r3, #0]
 8016c9a:	687a      	ldr	r2, [r7, #4]
 8016c9c:	6812      	ldr	r2, [r2, #0]
 8016c9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016ca2:	f043 0301 	orr.w	r3, r3, #1
 8016ca6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	6a1b      	ldr	r3, [r3, #32]
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	d005      	beq.n	8016cbc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016cb0:	4b04      	ldr	r3, [pc, #16]	; (8016cc4 <HAL_PCD_SuspendCallback+0x48>)
 8016cb2:	691b      	ldr	r3, [r3, #16]
 8016cb4:	4a03      	ldr	r2, [pc, #12]	; (8016cc4 <HAL_PCD_SuspendCallback+0x48>)
 8016cb6:	f043 0306 	orr.w	r3, r3, #6
 8016cba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016cbc:	bf00      	nop
 8016cbe:	3708      	adds	r7, #8
 8016cc0:	46bd      	mov	sp, r7
 8016cc2:	bd80      	pop	{r7, pc}
 8016cc4:	e000ed00 	.word	0xe000ed00

08016cc8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016cc8:	b580      	push	{r7, lr}
 8016cca:	b082      	sub	sp, #8
 8016ccc:	af00      	add	r7, sp, #0
 8016cce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016cd6:	4618      	mov	r0, r3
 8016cd8:	f7fe fc85 	bl	80155e6 <USBD_LL_Resume>
}
 8016cdc:	bf00      	nop
 8016cde:	3708      	adds	r7, #8
 8016ce0:	46bd      	mov	sp, r7
 8016ce2:	bd80      	pop	{r7, pc}

08016ce4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ce4:	b580      	push	{r7, lr}
 8016ce6:	b082      	sub	sp, #8
 8016ce8:	af00      	add	r7, sp, #0
 8016cea:	6078      	str	r0, [r7, #4]
 8016cec:	460b      	mov	r3, r1
 8016cee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016cf6:	78fa      	ldrb	r2, [r7, #3]
 8016cf8:	4611      	mov	r1, r2
 8016cfa:	4618      	mov	r0, r3
 8016cfc:	f7fe fcdd 	bl	80156ba <USBD_LL_IsoOUTIncomplete>
}
 8016d00:	bf00      	nop
 8016d02:	3708      	adds	r7, #8
 8016d04:	46bd      	mov	sp, r7
 8016d06:	bd80      	pop	{r7, pc}

08016d08 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016d08:	b580      	push	{r7, lr}
 8016d0a:	b082      	sub	sp, #8
 8016d0c:	af00      	add	r7, sp, #0
 8016d0e:	6078      	str	r0, [r7, #4]
 8016d10:	460b      	mov	r3, r1
 8016d12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016d1a:	78fa      	ldrb	r2, [r7, #3]
 8016d1c:	4611      	mov	r1, r2
 8016d1e:	4618      	mov	r0, r3
 8016d20:	f7fe fc99 	bl	8015656 <USBD_LL_IsoINIncomplete>
}
 8016d24:	bf00      	nop
 8016d26:	3708      	adds	r7, #8
 8016d28:	46bd      	mov	sp, r7
 8016d2a:	bd80      	pop	{r7, pc}

08016d2c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016d2c:	b580      	push	{r7, lr}
 8016d2e:	b082      	sub	sp, #8
 8016d30:	af00      	add	r7, sp, #0
 8016d32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016d3a:	4618      	mov	r0, r3
 8016d3c:	f7fe fcef 	bl	801571e <USBD_LL_DevConnected>
}
 8016d40:	bf00      	nop
 8016d42:	3708      	adds	r7, #8
 8016d44:	46bd      	mov	sp, r7
 8016d46:	bd80      	pop	{r7, pc}

08016d48 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016d48:	b580      	push	{r7, lr}
 8016d4a:	b082      	sub	sp, #8
 8016d4c:	af00      	add	r7, sp, #0
 8016d4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016d56:	4618      	mov	r0, r3
 8016d58:	f7fe fcec 	bl	8015734 <USBD_LL_DevDisconnected>
}
 8016d5c:	bf00      	nop
 8016d5e:	3708      	adds	r7, #8
 8016d60:	46bd      	mov	sp, r7
 8016d62:	bd80      	pop	{r7, pc}

08016d64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016d64:	b580      	push	{r7, lr}
 8016d66:	b082      	sub	sp, #8
 8016d68:	af00      	add	r7, sp, #0
 8016d6a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	781b      	ldrb	r3, [r3, #0]
 8016d70:	2b01      	cmp	r3, #1
 8016d72:	d140      	bne.n	8016df6 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8016d74:	4a22      	ldr	r2, [pc, #136]	; (8016e00 <USBD_LL_Init+0x9c>)
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	4a20      	ldr	r2, [pc, #128]	; (8016e00 <USBD_LL_Init+0x9c>)
 8016d80:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8016d84:	4b1e      	ldr	r3, [pc, #120]	; (8016e00 <USBD_LL_Init+0x9c>)
 8016d86:	4a1f      	ldr	r2, [pc, #124]	; (8016e04 <USBD_LL_Init+0xa0>)
 8016d88:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8016d8a:	4b1d      	ldr	r3, [pc, #116]	; (8016e00 <USBD_LL_Init+0x9c>)
 8016d8c:	2209      	movs	r2, #9
 8016d8e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8016d90:	4b1b      	ldr	r3, [pc, #108]	; (8016e00 <USBD_LL_Init+0x9c>)
 8016d92:	2202      	movs	r2, #2
 8016d94:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8016d96:	4b1a      	ldr	r3, [pc, #104]	; (8016e00 <USBD_LL_Init+0x9c>)
 8016d98:	2200      	movs	r2, #0
 8016d9a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8016d9c:	4b18      	ldr	r3, [pc, #96]	; (8016e00 <USBD_LL_Init+0x9c>)
 8016d9e:	2202      	movs	r2, #2
 8016da0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8016da2:	4b17      	ldr	r3, [pc, #92]	; (8016e00 <USBD_LL_Init+0x9c>)
 8016da4:	2200      	movs	r2, #0
 8016da6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8016da8:	4b15      	ldr	r3, [pc, #84]	; (8016e00 <USBD_LL_Init+0x9c>)
 8016daa:	2200      	movs	r2, #0
 8016dac:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8016dae:	4b14      	ldr	r3, [pc, #80]	; (8016e00 <USBD_LL_Init+0x9c>)
 8016db0:	2200      	movs	r2, #0
 8016db2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8016db4:	4b12      	ldr	r3, [pc, #72]	; (8016e00 <USBD_LL_Init+0x9c>)
 8016db6:	2200      	movs	r2, #0
 8016db8:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8016dba:	4b11      	ldr	r3, [pc, #68]	; (8016e00 <USBD_LL_Init+0x9c>)
 8016dbc:	2200      	movs	r2, #0
 8016dbe:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8016dc0:	4b0f      	ldr	r3, [pc, #60]	; (8016e00 <USBD_LL_Init+0x9c>)
 8016dc2:	2200      	movs	r2, #0
 8016dc4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8016dc6:	480e      	ldr	r0, [pc, #56]	; (8016e00 <USBD_LL_Init+0x9c>)
 8016dc8:	f7f1 fab3 	bl	8008332 <HAL_PCD_Init>
 8016dcc:	4603      	mov	r3, r0
 8016dce:	2b00      	cmp	r3, #0
 8016dd0:	d001      	beq.n	8016dd6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8016dd2:	f7eb fe03 	bl	80029dc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8016dd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8016dda:	4809      	ldr	r0, [pc, #36]	; (8016e00 <USBD_LL_Init+0x9c>)
 8016ddc:	f7f2 fd21 	bl	8009822 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8016de0:	2280      	movs	r2, #128	; 0x80
 8016de2:	2100      	movs	r1, #0
 8016de4:	4806      	ldr	r0, [pc, #24]	; (8016e00 <USBD_LL_Init+0x9c>)
 8016de6:	f7f2 fcd5 	bl	8009794 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8016dea:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8016dee:	2101      	movs	r1, #1
 8016df0:	4803      	ldr	r0, [pc, #12]	; (8016e00 <USBD_LL_Init+0x9c>)
 8016df2:	f7f2 fccf 	bl	8009794 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8016df6:	2300      	movs	r3, #0
}
 8016df8:	4618      	mov	r0, r3
 8016dfa:	3708      	adds	r7, #8
 8016dfc:	46bd      	mov	sp, r7
 8016dfe:	bd80      	pop	{r7, pc}
 8016e00:	24002ad0 	.word	0x24002ad0
 8016e04:	40040000 	.word	0x40040000

08016e08 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016e08:	b580      	push	{r7, lr}
 8016e0a:	b084      	sub	sp, #16
 8016e0c:	af00      	add	r7, sp, #0
 8016e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e10:	2300      	movs	r3, #0
 8016e12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e14:	2300      	movs	r3, #0
 8016e16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016e1e:	4618      	mov	r0, r3
 8016e20:	f7f1 fbab 	bl	800857a <HAL_PCD_Start>
 8016e24:	4603      	mov	r3, r0
 8016e26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e28:	7bfb      	ldrb	r3, [r7, #15]
 8016e2a:	4618      	mov	r0, r3
 8016e2c:	f000 f942 	bl	80170b4 <USBD_Get_USB_Status>
 8016e30:	4603      	mov	r3, r0
 8016e32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016e34:	7bbb      	ldrb	r3, [r7, #14]
}
 8016e36:	4618      	mov	r0, r3
 8016e38:	3710      	adds	r7, #16
 8016e3a:	46bd      	mov	sp, r7
 8016e3c:	bd80      	pop	{r7, pc}

08016e3e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016e3e:	b580      	push	{r7, lr}
 8016e40:	b084      	sub	sp, #16
 8016e42:	af00      	add	r7, sp, #0
 8016e44:	6078      	str	r0, [r7, #4]
 8016e46:	4608      	mov	r0, r1
 8016e48:	4611      	mov	r1, r2
 8016e4a:	461a      	mov	r2, r3
 8016e4c:	4603      	mov	r3, r0
 8016e4e:	70fb      	strb	r3, [r7, #3]
 8016e50:	460b      	mov	r3, r1
 8016e52:	70bb      	strb	r3, [r7, #2]
 8016e54:	4613      	mov	r3, r2
 8016e56:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e58:	2300      	movs	r3, #0
 8016e5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e5c:	2300      	movs	r3, #0
 8016e5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016e66:	78bb      	ldrb	r3, [r7, #2]
 8016e68:	883a      	ldrh	r2, [r7, #0]
 8016e6a:	78f9      	ldrb	r1, [r7, #3]
 8016e6c:	f7f2 f8ab 	bl	8008fc6 <HAL_PCD_EP_Open>
 8016e70:	4603      	mov	r3, r0
 8016e72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e74:	7bfb      	ldrb	r3, [r7, #15]
 8016e76:	4618      	mov	r0, r3
 8016e78:	f000 f91c 	bl	80170b4 <USBD_Get_USB_Status>
 8016e7c:	4603      	mov	r3, r0
 8016e7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016e80:	7bbb      	ldrb	r3, [r7, #14]
}
 8016e82:	4618      	mov	r0, r3
 8016e84:	3710      	adds	r7, #16
 8016e86:	46bd      	mov	sp, r7
 8016e88:	bd80      	pop	{r7, pc}

08016e8a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016e8a:	b580      	push	{r7, lr}
 8016e8c:	b084      	sub	sp, #16
 8016e8e:	af00      	add	r7, sp, #0
 8016e90:	6078      	str	r0, [r7, #4]
 8016e92:	460b      	mov	r3, r1
 8016e94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e96:	2300      	movs	r3, #0
 8016e98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e9a:	2300      	movs	r3, #0
 8016e9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016ea4:	78fa      	ldrb	r2, [r7, #3]
 8016ea6:	4611      	mov	r1, r2
 8016ea8:	4618      	mov	r0, r3
 8016eaa:	f7f2 f8f4 	bl	8009096 <HAL_PCD_EP_Close>
 8016eae:	4603      	mov	r3, r0
 8016eb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016eb2:	7bfb      	ldrb	r3, [r7, #15]
 8016eb4:	4618      	mov	r0, r3
 8016eb6:	f000 f8fd 	bl	80170b4 <USBD_Get_USB_Status>
 8016eba:	4603      	mov	r3, r0
 8016ebc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016ebe:	7bbb      	ldrb	r3, [r7, #14]
}
 8016ec0:	4618      	mov	r0, r3
 8016ec2:	3710      	adds	r7, #16
 8016ec4:	46bd      	mov	sp, r7
 8016ec6:	bd80      	pop	{r7, pc}

08016ec8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016ec8:	b580      	push	{r7, lr}
 8016eca:	b084      	sub	sp, #16
 8016ecc:	af00      	add	r7, sp, #0
 8016ece:	6078      	str	r0, [r7, #4]
 8016ed0:	460b      	mov	r3, r1
 8016ed2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ed4:	2300      	movs	r3, #0
 8016ed6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ed8:	2300      	movs	r3, #0
 8016eda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016ee2:	78fa      	ldrb	r2, [r7, #3]
 8016ee4:	4611      	mov	r1, r2
 8016ee6:	4618      	mov	r0, r3
 8016ee8:	f7f2 f9ae 	bl	8009248 <HAL_PCD_EP_SetStall>
 8016eec:	4603      	mov	r3, r0
 8016eee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016ef0:	7bfb      	ldrb	r3, [r7, #15]
 8016ef2:	4618      	mov	r0, r3
 8016ef4:	f000 f8de 	bl	80170b4 <USBD_Get_USB_Status>
 8016ef8:	4603      	mov	r3, r0
 8016efa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016efc:	7bbb      	ldrb	r3, [r7, #14]
}
 8016efe:	4618      	mov	r0, r3
 8016f00:	3710      	adds	r7, #16
 8016f02:	46bd      	mov	sp, r7
 8016f04:	bd80      	pop	{r7, pc}

08016f06 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016f06:	b580      	push	{r7, lr}
 8016f08:	b084      	sub	sp, #16
 8016f0a:	af00      	add	r7, sp, #0
 8016f0c:	6078      	str	r0, [r7, #4]
 8016f0e:	460b      	mov	r3, r1
 8016f10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016f12:	2300      	movs	r3, #0
 8016f14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f16:	2300      	movs	r3, #0
 8016f18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016f20:	78fa      	ldrb	r2, [r7, #3]
 8016f22:	4611      	mov	r1, r2
 8016f24:	4618      	mov	r0, r3
 8016f26:	f7f2 f9f3 	bl	8009310 <HAL_PCD_EP_ClrStall>
 8016f2a:	4603      	mov	r3, r0
 8016f2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016f2e:	7bfb      	ldrb	r3, [r7, #15]
 8016f30:	4618      	mov	r0, r3
 8016f32:	f000 f8bf 	bl	80170b4 <USBD_Get_USB_Status>
 8016f36:	4603      	mov	r3, r0
 8016f38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016f3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8016f3c:	4618      	mov	r0, r3
 8016f3e:	3710      	adds	r7, #16
 8016f40:	46bd      	mov	sp, r7
 8016f42:	bd80      	pop	{r7, pc}

08016f44 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016f44:	b480      	push	{r7}
 8016f46:	b085      	sub	sp, #20
 8016f48:	af00      	add	r7, sp, #0
 8016f4a:	6078      	str	r0, [r7, #4]
 8016f4c:	460b      	mov	r3, r1
 8016f4e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016f56:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016f58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	da0b      	bge.n	8016f78 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016f60:	78fb      	ldrb	r3, [r7, #3]
 8016f62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016f66:	68f9      	ldr	r1, [r7, #12]
 8016f68:	4613      	mov	r3, r2
 8016f6a:	00db      	lsls	r3, r3, #3
 8016f6c:	4413      	add	r3, r2
 8016f6e:	009b      	lsls	r3, r3, #2
 8016f70:	440b      	add	r3, r1
 8016f72:	333e      	adds	r3, #62	; 0x3e
 8016f74:	781b      	ldrb	r3, [r3, #0]
 8016f76:	e00b      	b.n	8016f90 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016f78:	78fb      	ldrb	r3, [r7, #3]
 8016f7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016f7e:	68f9      	ldr	r1, [r7, #12]
 8016f80:	4613      	mov	r3, r2
 8016f82:	00db      	lsls	r3, r3, #3
 8016f84:	4413      	add	r3, r2
 8016f86:	009b      	lsls	r3, r3, #2
 8016f88:	440b      	add	r3, r1
 8016f8a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8016f8e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016f90:	4618      	mov	r0, r3
 8016f92:	3714      	adds	r7, #20
 8016f94:	46bd      	mov	sp, r7
 8016f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f9a:	4770      	bx	lr

08016f9c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016f9c:	b580      	push	{r7, lr}
 8016f9e:	b084      	sub	sp, #16
 8016fa0:	af00      	add	r7, sp, #0
 8016fa2:	6078      	str	r0, [r7, #4]
 8016fa4:	460b      	mov	r3, r1
 8016fa6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016fa8:	2300      	movs	r3, #0
 8016faa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016fac:	2300      	movs	r3, #0
 8016fae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016fb6:	78fa      	ldrb	r2, [r7, #3]
 8016fb8:	4611      	mov	r1, r2
 8016fba:	4618      	mov	r0, r3
 8016fbc:	f7f1 ffde 	bl	8008f7c <HAL_PCD_SetAddress>
 8016fc0:	4603      	mov	r3, r0
 8016fc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016fc4:	7bfb      	ldrb	r3, [r7, #15]
 8016fc6:	4618      	mov	r0, r3
 8016fc8:	f000 f874 	bl	80170b4 <USBD_Get_USB_Status>
 8016fcc:	4603      	mov	r3, r0
 8016fce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016fd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8016fd2:	4618      	mov	r0, r3
 8016fd4:	3710      	adds	r7, #16
 8016fd6:	46bd      	mov	sp, r7
 8016fd8:	bd80      	pop	{r7, pc}

08016fda <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016fda:	b580      	push	{r7, lr}
 8016fdc:	b086      	sub	sp, #24
 8016fde:	af00      	add	r7, sp, #0
 8016fe0:	60f8      	str	r0, [r7, #12]
 8016fe2:	607a      	str	r2, [r7, #4]
 8016fe4:	603b      	str	r3, [r7, #0]
 8016fe6:	460b      	mov	r3, r1
 8016fe8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016fea:	2300      	movs	r3, #0
 8016fec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016fee:	2300      	movs	r3, #0
 8016ff0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016ff2:	68fb      	ldr	r3, [r7, #12]
 8016ff4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016ff8:	7af9      	ldrb	r1, [r7, #11]
 8016ffa:	683b      	ldr	r3, [r7, #0]
 8016ffc:	687a      	ldr	r2, [r7, #4]
 8016ffe:	f7f2 f8e8 	bl	80091d2 <HAL_PCD_EP_Transmit>
 8017002:	4603      	mov	r3, r0
 8017004:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017006:	7dfb      	ldrb	r3, [r7, #23]
 8017008:	4618      	mov	r0, r3
 801700a:	f000 f853 	bl	80170b4 <USBD_Get_USB_Status>
 801700e:	4603      	mov	r3, r0
 8017010:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017012:	7dbb      	ldrb	r3, [r7, #22]
}
 8017014:	4618      	mov	r0, r3
 8017016:	3718      	adds	r7, #24
 8017018:	46bd      	mov	sp, r7
 801701a:	bd80      	pop	{r7, pc}

0801701c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801701c:	b580      	push	{r7, lr}
 801701e:	b086      	sub	sp, #24
 8017020:	af00      	add	r7, sp, #0
 8017022:	60f8      	str	r0, [r7, #12]
 8017024:	607a      	str	r2, [r7, #4]
 8017026:	603b      	str	r3, [r7, #0]
 8017028:	460b      	mov	r3, r1
 801702a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801702c:	2300      	movs	r3, #0
 801702e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017030:	2300      	movs	r3, #0
 8017032:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017034:	68fb      	ldr	r3, [r7, #12]
 8017036:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801703a:	7af9      	ldrb	r1, [r7, #11]
 801703c:	683b      	ldr	r3, [r7, #0]
 801703e:	687a      	ldr	r2, [r7, #4]
 8017040:	f7f2 f873 	bl	800912a <HAL_PCD_EP_Receive>
 8017044:	4603      	mov	r3, r0
 8017046:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017048:	7dfb      	ldrb	r3, [r7, #23]
 801704a:	4618      	mov	r0, r3
 801704c:	f000 f832 	bl	80170b4 <USBD_Get_USB_Status>
 8017050:	4603      	mov	r3, r0
 8017052:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017054:	7dbb      	ldrb	r3, [r7, #22]
}
 8017056:	4618      	mov	r0, r3
 8017058:	3718      	adds	r7, #24
 801705a:	46bd      	mov	sp, r7
 801705c:	bd80      	pop	{r7, pc}

0801705e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801705e:	b580      	push	{r7, lr}
 8017060:	b082      	sub	sp, #8
 8017062:	af00      	add	r7, sp, #0
 8017064:	6078      	str	r0, [r7, #4]
 8017066:	460b      	mov	r3, r1
 8017068:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017070:	78fa      	ldrb	r2, [r7, #3]
 8017072:	4611      	mov	r1, r2
 8017074:	4618      	mov	r0, r3
 8017076:	f7f2 f894 	bl	80091a2 <HAL_PCD_EP_GetRxCount>
 801707a:	4603      	mov	r3, r0
}
 801707c:	4618      	mov	r0, r3
 801707e:	3708      	adds	r7, #8
 8017080:	46bd      	mov	sp, r7
 8017082:	bd80      	pop	{r7, pc}

08017084 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8017084:	b480      	push	{r7}
 8017086:	b083      	sub	sp, #12
 8017088:	af00      	add	r7, sp, #0
 801708a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801708c:	4b03      	ldr	r3, [pc, #12]	; (801709c <USBD_static_malloc+0x18>)
}
 801708e:	4618      	mov	r0, r3
 8017090:	370c      	adds	r7, #12
 8017092:	46bd      	mov	sp, r7
 8017094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017098:	4770      	bx	lr
 801709a:	bf00      	nop
 801709c:	24002fdc 	.word	0x24002fdc

080170a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80170a0:	b480      	push	{r7}
 80170a2:	b083      	sub	sp, #12
 80170a4:	af00      	add	r7, sp, #0
 80170a6:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80170a8:	bf00      	nop
 80170aa:	370c      	adds	r7, #12
 80170ac:	46bd      	mov	sp, r7
 80170ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170b2:	4770      	bx	lr

080170b4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80170b4:	b480      	push	{r7}
 80170b6:	b085      	sub	sp, #20
 80170b8:	af00      	add	r7, sp, #0
 80170ba:	4603      	mov	r3, r0
 80170bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80170be:	2300      	movs	r3, #0
 80170c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80170c2:	79fb      	ldrb	r3, [r7, #7]
 80170c4:	2b03      	cmp	r3, #3
 80170c6:	d817      	bhi.n	80170f8 <USBD_Get_USB_Status+0x44>
 80170c8:	a201      	add	r2, pc, #4	; (adr r2, 80170d0 <USBD_Get_USB_Status+0x1c>)
 80170ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80170ce:	bf00      	nop
 80170d0:	080170e1 	.word	0x080170e1
 80170d4:	080170e7 	.word	0x080170e7
 80170d8:	080170ed 	.word	0x080170ed
 80170dc:	080170f3 	.word	0x080170f3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80170e0:	2300      	movs	r3, #0
 80170e2:	73fb      	strb	r3, [r7, #15]
    break;
 80170e4:	e00b      	b.n	80170fe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80170e6:	2303      	movs	r3, #3
 80170e8:	73fb      	strb	r3, [r7, #15]
    break;
 80170ea:	e008      	b.n	80170fe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80170ec:	2301      	movs	r3, #1
 80170ee:	73fb      	strb	r3, [r7, #15]
    break;
 80170f0:	e005      	b.n	80170fe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80170f2:	2303      	movs	r3, #3
 80170f4:	73fb      	strb	r3, [r7, #15]
    break;
 80170f6:	e002      	b.n	80170fe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80170f8:	2303      	movs	r3, #3
 80170fa:	73fb      	strb	r3, [r7, #15]
    break;
 80170fc:	bf00      	nop
  }
  return usb_status;
 80170fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8017100:	4618      	mov	r0, r3
 8017102:	3714      	adds	r7, #20
 8017104:	46bd      	mov	sp, r7
 8017106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801710a:	4770      	bx	lr

0801710c <siprintf>:
 801710c:	b40e      	push	{r1, r2, r3}
 801710e:	b500      	push	{lr}
 8017110:	b09c      	sub	sp, #112	; 0x70
 8017112:	ab1d      	add	r3, sp, #116	; 0x74
 8017114:	9002      	str	r0, [sp, #8]
 8017116:	9006      	str	r0, [sp, #24]
 8017118:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801711c:	4809      	ldr	r0, [pc, #36]	; (8017144 <siprintf+0x38>)
 801711e:	9107      	str	r1, [sp, #28]
 8017120:	9104      	str	r1, [sp, #16]
 8017122:	4909      	ldr	r1, [pc, #36]	; (8017148 <siprintf+0x3c>)
 8017124:	f853 2b04 	ldr.w	r2, [r3], #4
 8017128:	9105      	str	r1, [sp, #20]
 801712a:	6800      	ldr	r0, [r0, #0]
 801712c:	9301      	str	r3, [sp, #4]
 801712e:	a902      	add	r1, sp, #8
 8017130:	f000 f9d6 	bl	80174e0 <_svfiprintf_r>
 8017134:	9b02      	ldr	r3, [sp, #8]
 8017136:	2200      	movs	r2, #0
 8017138:	701a      	strb	r2, [r3, #0]
 801713a:	b01c      	add	sp, #112	; 0x70
 801713c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017140:	b003      	add	sp, #12
 8017142:	4770      	bx	lr
 8017144:	2400014c 	.word	0x2400014c
 8017148:	ffff0208 	.word	0xffff0208

0801714c <siscanf>:
 801714c:	b40e      	push	{r1, r2, r3}
 801714e:	b510      	push	{r4, lr}
 8017150:	b09f      	sub	sp, #124	; 0x7c
 8017152:	ac21      	add	r4, sp, #132	; 0x84
 8017154:	f44f 7101 	mov.w	r1, #516	; 0x204
 8017158:	f854 2b04 	ldr.w	r2, [r4], #4
 801715c:	9201      	str	r2, [sp, #4]
 801715e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8017162:	9004      	str	r0, [sp, #16]
 8017164:	9008      	str	r0, [sp, #32]
 8017166:	f7e9 f8dd 	bl	8000324 <strlen>
 801716a:	4b0c      	ldr	r3, [pc, #48]	; (801719c <siscanf+0x50>)
 801716c:	9005      	str	r0, [sp, #20]
 801716e:	9009      	str	r0, [sp, #36]	; 0x24
 8017170:	930d      	str	r3, [sp, #52]	; 0x34
 8017172:	480b      	ldr	r0, [pc, #44]	; (80171a0 <siscanf+0x54>)
 8017174:	9a01      	ldr	r2, [sp, #4]
 8017176:	6800      	ldr	r0, [r0, #0]
 8017178:	9403      	str	r4, [sp, #12]
 801717a:	2300      	movs	r3, #0
 801717c:	9311      	str	r3, [sp, #68]	; 0x44
 801717e:	9316      	str	r3, [sp, #88]	; 0x58
 8017180:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017184:	f8ad 301e 	strh.w	r3, [sp, #30]
 8017188:	a904      	add	r1, sp, #16
 801718a:	4623      	mov	r3, r4
 801718c:	f000 fb00 	bl	8017790 <__ssvfiscanf_r>
 8017190:	b01f      	add	sp, #124	; 0x7c
 8017192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017196:	b003      	add	sp, #12
 8017198:	4770      	bx	lr
 801719a:	bf00      	nop
 801719c:	080171a5 	.word	0x080171a5
 80171a0:	2400014c 	.word	0x2400014c

080171a4 <__seofread>:
 80171a4:	2000      	movs	r0, #0
 80171a6:	4770      	bx	lr

080171a8 <memset>:
 80171a8:	4402      	add	r2, r0
 80171aa:	4603      	mov	r3, r0
 80171ac:	4293      	cmp	r3, r2
 80171ae:	d100      	bne.n	80171b2 <memset+0xa>
 80171b0:	4770      	bx	lr
 80171b2:	f803 1b01 	strb.w	r1, [r3], #1
 80171b6:	e7f9      	b.n	80171ac <memset+0x4>

080171b8 <__errno>:
 80171b8:	4b01      	ldr	r3, [pc, #4]	; (80171c0 <__errno+0x8>)
 80171ba:	6818      	ldr	r0, [r3, #0]
 80171bc:	4770      	bx	lr
 80171be:	bf00      	nop
 80171c0:	2400014c 	.word	0x2400014c

080171c4 <__libc_init_array>:
 80171c4:	b570      	push	{r4, r5, r6, lr}
 80171c6:	4d0d      	ldr	r5, [pc, #52]	; (80171fc <__libc_init_array+0x38>)
 80171c8:	4c0d      	ldr	r4, [pc, #52]	; (8017200 <__libc_init_array+0x3c>)
 80171ca:	1b64      	subs	r4, r4, r5
 80171cc:	10a4      	asrs	r4, r4, #2
 80171ce:	2600      	movs	r6, #0
 80171d0:	42a6      	cmp	r6, r4
 80171d2:	d109      	bne.n	80171e8 <__libc_init_array+0x24>
 80171d4:	4d0b      	ldr	r5, [pc, #44]	; (8017204 <__libc_init_array+0x40>)
 80171d6:	4c0c      	ldr	r4, [pc, #48]	; (8017208 <__libc_init_array+0x44>)
 80171d8:	f001 f8fe 	bl	80183d8 <_init>
 80171dc:	1b64      	subs	r4, r4, r5
 80171de:	10a4      	asrs	r4, r4, #2
 80171e0:	2600      	movs	r6, #0
 80171e2:	42a6      	cmp	r6, r4
 80171e4:	d105      	bne.n	80171f2 <__libc_init_array+0x2e>
 80171e6:	bd70      	pop	{r4, r5, r6, pc}
 80171e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80171ec:	4798      	blx	r3
 80171ee:	3601      	adds	r6, #1
 80171f0:	e7ee      	b.n	80171d0 <__libc_init_array+0xc>
 80171f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80171f6:	4798      	blx	r3
 80171f8:	3601      	adds	r6, #1
 80171fa:	e7f2      	b.n	80171e2 <__libc_init_array+0x1e>
 80171fc:	080187d4 	.word	0x080187d4
 8017200:	080187d4 	.word	0x080187d4
 8017204:	080187d4 	.word	0x080187d4
 8017208:	080187d8 	.word	0x080187d8

0801720c <__retarget_lock_acquire_recursive>:
 801720c:	4770      	bx	lr

0801720e <__retarget_lock_release_recursive>:
 801720e:	4770      	bx	lr

08017210 <strcpy>:
 8017210:	4603      	mov	r3, r0
 8017212:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017216:	f803 2b01 	strb.w	r2, [r3], #1
 801721a:	2a00      	cmp	r2, #0
 801721c:	d1f9      	bne.n	8017212 <strcpy+0x2>
 801721e:	4770      	bx	lr

08017220 <memcpy>:
 8017220:	440a      	add	r2, r1
 8017222:	4291      	cmp	r1, r2
 8017224:	f100 33ff 	add.w	r3, r0, #4294967295
 8017228:	d100      	bne.n	801722c <memcpy+0xc>
 801722a:	4770      	bx	lr
 801722c:	b510      	push	{r4, lr}
 801722e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017232:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017236:	4291      	cmp	r1, r2
 8017238:	d1f9      	bne.n	801722e <memcpy+0xe>
 801723a:	bd10      	pop	{r4, pc}

0801723c <_free_r>:
 801723c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801723e:	2900      	cmp	r1, #0
 8017240:	d044      	beq.n	80172cc <_free_r+0x90>
 8017242:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017246:	9001      	str	r0, [sp, #4]
 8017248:	2b00      	cmp	r3, #0
 801724a:	f1a1 0404 	sub.w	r4, r1, #4
 801724e:	bfb8      	it	lt
 8017250:	18e4      	addlt	r4, r4, r3
 8017252:	f000 f8df 	bl	8017414 <__malloc_lock>
 8017256:	4a1e      	ldr	r2, [pc, #120]	; (80172d0 <_free_r+0x94>)
 8017258:	9801      	ldr	r0, [sp, #4]
 801725a:	6813      	ldr	r3, [r2, #0]
 801725c:	b933      	cbnz	r3, 801726c <_free_r+0x30>
 801725e:	6063      	str	r3, [r4, #4]
 8017260:	6014      	str	r4, [r2, #0]
 8017262:	b003      	add	sp, #12
 8017264:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017268:	f000 b8da 	b.w	8017420 <__malloc_unlock>
 801726c:	42a3      	cmp	r3, r4
 801726e:	d908      	bls.n	8017282 <_free_r+0x46>
 8017270:	6825      	ldr	r5, [r4, #0]
 8017272:	1961      	adds	r1, r4, r5
 8017274:	428b      	cmp	r3, r1
 8017276:	bf01      	itttt	eq
 8017278:	6819      	ldreq	r1, [r3, #0]
 801727a:	685b      	ldreq	r3, [r3, #4]
 801727c:	1949      	addeq	r1, r1, r5
 801727e:	6021      	streq	r1, [r4, #0]
 8017280:	e7ed      	b.n	801725e <_free_r+0x22>
 8017282:	461a      	mov	r2, r3
 8017284:	685b      	ldr	r3, [r3, #4]
 8017286:	b10b      	cbz	r3, 801728c <_free_r+0x50>
 8017288:	42a3      	cmp	r3, r4
 801728a:	d9fa      	bls.n	8017282 <_free_r+0x46>
 801728c:	6811      	ldr	r1, [r2, #0]
 801728e:	1855      	adds	r5, r2, r1
 8017290:	42a5      	cmp	r5, r4
 8017292:	d10b      	bne.n	80172ac <_free_r+0x70>
 8017294:	6824      	ldr	r4, [r4, #0]
 8017296:	4421      	add	r1, r4
 8017298:	1854      	adds	r4, r2, r1
 801729a:	42a3      	cmp	r3, r4
 801729c:	6011      	str	r1, [r2, #0]
 801729e:	d1e0      	bne.n	8017262 <_free_r+0x26>
 80172a0:	681c      	ldr	r4, [r3, #0]
 80172a2:	685b      	ldr	r3, [r3, #4]
 80172a4:	6053      	str	r3, [r2, #4]
 80172a6:	440c      	add	r4, r1
 80172a8:	6014      	str	r4, [r2, #0]
 80172aa:	e7da      	b.n	8017262 <_free_r+0x26>
 80172ac:	d902      	bls.n	80172b4 <_free_r+0x78>
 80172ae:	230c      	movs	r3, #12
 80172b0:	6003      	str	r3, [r0, #0]
 80172b2:	e7d6      	b.n	8017262 <_free_r+0x26>
 80172b4:	6825      	ldr	r5, [r4, #0]
 80172b6:	1961      	adds	r1, r4, r5
 80172b8:	428b      	cmp	r3, r1
 80172ba:	bf04      	itt	eq
 80172bc:	6819      	ldreq	r1, [r3, #0]
 80172be:	685b      	ldreq	r3, [r3, #4]
 80172c0:	6063      	str	r3, [r4, #4]
 80172c2:	bf04      	itt	eq
 80172c4:	1949      	addeq	r1, r1, r5
 80172c6:	6021      	streq	r1, [r4, #0]
 80172c8:	6054      	str	r4, [r2, #4]
 80172ca:	e7ca      	b.n	8017262 <_free_r+0x26>
 80172cc:	b003      	add	sp, #12
 80172ce:	bd30      	pop	{r4, r5, pc}
 80172d0:	2400333c 	.word	0x2400333c

080172d4 <sbrk_aligned>:
 80172d4:	b570      	push	{r4, r5, r6, lr}
 80172d6:	4e0e      	ldr	r6, [pc, #56]	; (8017310 <sbrk_aligned+0x3c>)
 80172d8:	460c      	mov	r4, r1
 80172da:	6831      	ldr	r1, [r6, #0]
 80172dc:	4605      	mov	r5, r0
 80172de:	b911      	cbnz	r1, 80172e6 <sbrk_aligned+0x12>
 80172e0:	f000 ff3a 	bl	8018158 <_sbrk_r>
 80172e4:	6030      	str	r0, [r6, #0]
 80172e6:	4621      	mov	r1, r4
 80172e8:	4628      	mov	r0, r5
 80172ea:	f000 ff35 	bl	8018158 <_sbrk_r>
 80172ee:	1c43      	adds	r3, r0, #1
 80172f0:	d00a      	beq.n	8017308 <sbrk_aligned+0x34>
 80172f2:	1cc4      	adds	r4, r0, #3
 80172f4:	f024 0403 	bic.w	r4, r4, #3
 80172f8:	42a0      	cmp	r0, r4
 80172fa:	d007      	beq.n	801730c <sbrk_aligned+0x38>
 80172fc:	1a21      	subs	r1, r4, r0
 80172fe:	4628      	mov	r0, r5
 8017300:	f000 ff2a 	bl	8018158 <_sbrk_r>
 8017304:	3001      	adds	r0, #1
 8017306:	d101      	bne.n	801730c <sbrk_aligned+0x38>
 8017308:	f04f 34ff 	mov.w	r4, #4294967295
 801730c:	4620      	mov	r0, r4
 801730e:	bd70      	pop	{r4, r5, r6, pc}
 8017310:	24003340 	.word	0x24003340

08017314 <_malloc_r>:
 8017314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017318:	1ccd      	adds	r5, r1, #3
 801731a:	f025 0503 	bic.w	r5, r5, #3
 801731e:	3508      	adds	r5, #8
 8017320:	2d0c      	cmp	r5, #12
 8017322:	bf38      	it	cc
 8017324:	250c      	movcc	r5, #12
 8017326:	2d00      	cmp	r5, #0
 8017328:	4607      	mov	r7, r0
 801732a:	db01      	blt.n	8017330 <_malloc_r+0x1c>
 801732c:	42a9      	cmp	r1, r5
 801732e:	d905      	bls.n	801733c <_malloc_r+0x28>
 8017330:	230c      	movs	r3, #12
 8017332:	603b      	str	r3, [r7, #0]
 8017334:	2600      	movs	r6, #0
 8017336:	4630      	mov	r0, r6
 8017338:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801733c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017410 <_malloc_r+0xfc>
 8017340:	f000 f868 	bl	8017414 <__malloc_lock>
 8017344:	f8d8 3000 	ldr.w	r3, [r8]
 8017348:	461c      	mov	r4, r3
 801734a:	bb5c      	cbnz	r4, 80173a4 <_malloc_r+0x90>
 801734c:	4629      	mov	r1, r5
 801734e:	4638      	mov	r0, r7
 8017350:	f7ff ffc0 	bl	80172d4 <sbrk_aligned>
 8017354:	1c43      	adds	r3, r0, #1
 8017356:	4604      	mov	r4, r0
 8017358:	d155      	bne.n	8017406 <_malloc_r+0xf2>
 801735a:	f8d8 4000 	ldr.w	r4, [r8]
 801735e:	4626      	mov	r6, r4
 8017360:	2e00      	cmp	r6, #0
 8017362:	d145      	bne.n	80173f0 <_malloc_r+0xdc>
 8017364:	2c00      	cmp	r4, #0
 8017366:	d048      	beq.n	80173fa <_malloc_r+0xe6>
 8017368:	6823      	ldr	r3, [r4, #0]
 801736a:	4631      	mov	r1, r6
 801736c:	4638      	mov	r0, r7
 801736e:	eb04 0903 	add.w	r9, r4, r3
 8017372:	f000 fef1 	bl	8018158 <_sbrk_r>
 8017376:	4581      	cmp	r9, r0
 8017378:	d13f      	bne.n	80173fa <_malloc_r+0xe6>
 801737a:	6821      	ldr	r1, [r4, #0]
 801737c:	1a6d      	subs	r5, r5, r1
 801737e:	4629      	mov	r1, r5
 8017380:	4638      	mov	r0, r7
 8017382:	f7ff ffa7 	bl	80172d4 <sbrk_aligned>
 8017386:	3001      	adds	r0, #1
 8017388:	d037      	beq.n	80173fa <_malloc_r+0xe6>
 801738a:	6823      	ldr	r3, [r4, #0]
 801738c:	442b      	add	r3, r5
 801738e:	6023      	str	r3, [r4, #0]
 8017390:	f8d8 3000 	ldr.w	r3, [r8]
 8017394:	2b00      	cmp	r3, #0
 8017396:	d038      	beq.n	801740a <_malloc_r+0xf6>
 8017398:	685a      	ldr	r2, [r3, #4]
 801739a:	42a2      	cmp	r2, r4
 801739c:	d12b      	bne.n	80173f6 <_malloc_r+0xe2>
 801739e:	2200      	movs	r2, #0
 80173a0:	605a      	str	r2, [r3, #4]
 80173a2:	e00f      	b.n	80173c4 <_malloc_r+0xb0>
 80173a4:	6822      	ldr	r2, [r4, #0]
 80173a6:	1b52      	subs	r2, r2, r5
 80173a8:	d41f      	bmi.n	80173ea <_malloc_r+0xd6>
 80173aa:	2a0b      	cmp	r2, #11
 80173ac:	d917      	bls.n	80173de <_malloc_r+0xca>
 80173ae:	1961      	adds	r1, r4, r5
 80173b0:	42a3      	cmp	r3, r4
 80173b2:	6025      	str	r5, [r4, #0]
 80173b4:	bf18      	it	ne
 80173b6:	6059      	strne	r1, [r3, #4]
 80173b8:	6863      	ldr	r3, [r4, #4]
 80173ba:	bf08      	it	eq
 80173bc:	f8c8 1000 	streq.w	r1, [r8]
 80173c0:	5162      	str	r2, [r4, r5]
 80173c2:	604b      	str	r3, [r1, #4]
 80173c4:	4638      	mov	r0, r7
 80173c6:	f104 060b 	add.w	r6, r4, #11
 80173ca:	f000 f829 	bl	8017420 <__malloc_unlock>
 80173ce:	f026 0607 	bic.w	r6, r6, #7
 80173d2:	1d23      	adds	r3, r4, #4
 80173d4:	1af2      	subs	r2, r6, r3
 80173d6:	d0ae      	beq.n	8017336 <_malloc_r+0x22>
 80173d8:	1b9b      	subs	r3, r3, r6
 80173da:	50a3      	str	r3, [r4, r2]
 80173dc:	e7ab      	b.n	8017336 <_malloc_r+0x22>
 80173de:	42a3      	cmp	r3, r4
 80173e0:	6862      	ldr	r2, [r4, #4]
 80173e2:	d1dd      	bne.n	80173a0 <_malloc_r+0x8c>
 80173e4:	f8c8 2000 	str.w	r2, [r8]
 80173e8:	e7ec      	b.n	80173c4 <_malloc_r+0xb0>
 80173ea:	4623      	mov	r3, r4
 80173ec:	6864      	ldr	r4, [r4, #4]
 80173ee:	e7ac      	b.n	801734a <_malloc_r+0x36>
 80173f0:	4634      	mov	r4, r6
 80173f2:	6876      	ldr	r6, [r6, #4]
 80173f4:	e7b4      	b.n	8017360 <_malloc_r+0x4c>
 80173f6:	4613      	mov	r3, r2
 80173f8:	e7cc      	b.n	8017394 <_malloc_r+0x80>
 80173fa:	230c      	movs	r3, #12
 80173fc:	603b      	str	r3, [r7, #0]
 80173fe:	4638      	mov	r0, r7
 8017400:	f000 f80e 	bl	8017420 <__malloc_unlock>
 8017404:	e797      	b.n	8017336 <_malloc_r+0x22>
 8017406:	6025      	str	r5, [r4, #0]
 8017408:	e7dc      	b.n	80173c4 <_malloc_r+0xb0>
 801740a:	605b      	str	r3, [r3, #4]
 801740c:	deff      	udf	#255	; 0xff
 801740e:	bf00      	nop
 8017410:	2400333c 	.word	0x2400333c

08017414 <__malloc_lock>:
 8017414:	4801      	ldr	r0, [pc, #4]	; (801741c <__malloc_lock+0x8>)
 8017416:	f7ff bef9 	b.w	801720c <__retarget_lock_acquire_recursive>
 801741a:	bf00      	nop
 801741c:	24003338 	.word	0x24003338

08017420 <__malloc_unlock>:
 8017420:	4801      	ldr	r0, [pc, #4]	; (8017428 <__malloc_unlock+0x8>)
 8017422:	f7ff bef4 	b.w	801720e <__retarget_lock_release_recursive>
 8017426:	bf00      	nop
 8017428:	24003338 	.word	0x24003338

0801742c <__ssputs_r>:
 801742c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017430:	688e      	ldr	r6, [r1, #8]
 8017432:	461f      	mov	r7, r3
 8017434:	42be      	cmp	r6, r7
 8017436:	680b      	ldr	r3, [r1, #0]
 8017438:	4682      	mov	sl, r0
 801743a:	460c      	mov	r4, r1
 801743c:	4690      	mov	r8, r2
 801743e:	d82c      	bhi.n	801749a <__ssputs_r+0x6e>
 8017440:	898a      	ldrh	r2, [r1, #12]
 8017442:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017446:	d026      	beq.n	8017496 <__ssputs_r+0x6a>
 8017448:	6965      	ldr	r5, [r4, #20]
 801744a:	6909      	ldr	r1, [r1, #16]
 801744c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017450:	eba3 0901 	sub.w	r9, r3, r1
 8017454:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017458:	1c7b      	adds	r3, r7, #1
 801745a:	444b      	add	r3, r9
 801745c:	106d      	asrs	r5, r5, #1
 801745e:	429d      	cmp	r5, r3
 8017460:	bf38      	it	cc
 8017462:	461d      	movcc	r5, r3
 8017464:	0553      	lsls	r3, r2, #21
 8017466:	d527      	bpl.n	80174b8 <__ssputs_r+0x8c>
 8017468:	4629      	mov	r1, r5
 801746a:	f7ff ff53 	bl	8017314 <_malloc_r>
 801746e:	4606      	mov	r6, r0
 8017470:	b360      	cbz	r0, 80174cc <__ssputs_r+0xa0>
 8017472:	6921      	ldr	r1, [r4, #16]
 8017474:	464a      	mov	r2, r9
 8017476:	f7ff fed3 	bl	8017220 <memcpy>
 801747a:	89a3      	ldrh	r3, [r4, #12]
 801747c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017484:	81a3      	strh	r3, [r4, #12]
 8017486:	6126      	str	r6, [r4, #16]
 8017488:	6165      	str	r5, [r4, #20]
 801748a:	444e      	add	r6, r9
 801748c:	eba5 0509 	sub.w	r5, r5, r9
 8017490:	6026      	str	r6, [r4, #0]
 8017492:	60a5      	str	r5, [r4, #8]
 8017494:	463e      	mov	r6, r7
 8017496:	42be      	cmp	r6, r7
 8017498:	d900      	bls.n	801749c <__ssputs_r+0x70>
 801749a:	463e      	mov	r6, r7
 801749c:	6820      	ldr	r0, [r4, #0]
 801749e:	4632      	mov	r2, r6
 80174a0:	4641      	mov	r1, r8
 80174a2:	f000 fe3e 	bl	8018122 <memmove>
 80174a6:	68a3      	ldr	r3, [r4, #8]
 80174a8:	1b9b      	subs	r3, r3, r6
 80174aa:	60a3      	str	r3, [r4, #8]
 80174ac:	6823      	ldr	r3, [r4, #0]
 80174ae:	4433      	add	r3, r6
 80174b0:	6023      	str	r3, [r4, #0]
 80174b2:	2000      	movs	r0, #0
 80174b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174b8:	462a      	mov	r2, r5
 80174ba:	f000 fe5d 	bl	8018178 <_realloc_r>
 80174be:	4606      	mov	r6, r0
 80174c0:	2800      	cmp	r0, #0
 80174c2:	d1e0      	bne.n	8017486 <__ssputs_r+0x5a>
 80174c4:	6921      	ldr	r1, [r4, #16]
 80174c6:	4650      	mov	r0, sl
 80174c8:	f7ff feb8 	bl	801723c <_free_r>
 80174cc:	230c      	movs	r3, #12
 80174ce:	f8ca 3000 	str.w	r3, [sl]
 80174d2:	89a3      	ldrh	r3, [r4, #12]
 80174d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80174d8:	81a3      	strh	r3, [r4, #12]
 80174da:	f04f 30ff 	mov.w	r0, #4294967295
 80174de:	e7e9      	b.n	80174b4 <__ssputs_r+0x88>

080174e0 <_svfiprintf_r>:
 80174e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174e4:	4698      	mov	r8, r3
 80174e6:	898b      	ldrh	r3, [r1, #12]
 80174e8:	061b      	lsls	r3, r3, #24
 80174ea:	b09d      	sub	sp, #116	; 0x74
 80174ec:	4607      	mov	r7, r0
 80174ee:	460d      	mov	r5, r1
 80174f0:	4614      	mov	r4, r2
 80174f2:	d50e      	bpl.n	8017512 <_svfiprintf_r+0x32>
 80174f4:	690b      	ldr	r3, [r1, #16]
 80174f6:	b963      	cbnz	r3, 8017512 <_svfiprintf_r+0x32>
 80174f8:	2140      	movs	r1, #64	; 0x40
 80174fa:	f7ff ff0b 	bl	8017314 <_malloc_r>
 80174fe:	6028      	str	r0, [r5, #0]
 8017500:	6128      	str	r0, [r5, #16]
 8017502:	b920      	cbnz	r0, 801750e <_svfiprintf_r+0x2e>
 8017504:	230c      	movs	r3, #12
 8017506:	603b      	str	r3, [r7, #0]
 8017508:	f04f 30ff 	mov.w	r0, #4294967295
 801750c:	e0d0      	b.n	80176b0 <_svfiprintf_r+0x1d0>
 801750e:	2340      	movs	r3, #64	; 0x40
 8017510:	616b      	str	r3, [r5, #20]
 8017512:	2300      	movs	r3, #0
 8017514:	9309      	str	r3, [sp, #36]	; 0x24
 8017516:	2320      	movs	r3, #32
 8017518:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801751c:	f8cd 800c 	str.w	r8, [sp, #12]
 8017520:	2330      	movs	r3, #48	; 0x30
 8017522:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80176c8 <_svfiprintf_r+0x1e8>
 8017526:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801752a:	f04f 0901 	mov.w	r9, #1
 801752e:	4623      	mov	r3, r4
 8017530:	469a      	mov	sl, r3
 8017532:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017536:	b10a      	cbz	r2, 801753c <_svfiprintf_r+0x5c>
 8017538:	2a25      	cmp	r2, #37	; 0x25
 801753a:	d1f9      	bne.n	8017530 <_svfiprintf_r+0x50>
 801753c:	ebba 0b04 	subs.w	fp, sl, r4
 8017540:	d00b      	beq.n	801755a <_svfiprintf_r+0x7a>
 8017542:	465b      	mov	r3, fp
 8017544:	4622      	mov	r2, r4
 8017546:	4629      	mov	r1, r5
 8017548:	4638      	mov	r0, r7
 801754a:	f7ff ff6f 	bl	801742c <__ssputs_r>
 801754e:	3001      	adds	r0, #1
 8017550:	f000 80a9 	beq.w	80176a6 <_svfiprintf_r+0x1c6>
 8017554:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017556:	445a      	add	r2, fp
 8017558:	9209      	str	r2, [sp, #36]	; 0x24
 801755a:	f89a 3000 	ldrb.w	r3, [sl]
 801755e:	2b00      	cmp	r3, #0
 8017560:	f000 80a1 	beq.w	80176a6 <_svfiprintf_r+0x1c6>
 8017564:	2300      	movs	r3, #0
 8017566:	f04f 32ff 	mov.w	r2, #4294967295
 801756a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801756e:	f10a 0a01 	add.w	sl, sl, #1
 8017572:	9304      	str	r3, [sp, #16]
 8017574:	9307      	str	r3, [sp, #28]
 8017576:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801757a:	931a      	str	r3, [sp, #104]	; 0x68
 801757c:	4654      	mov	r4, sl
 801757e:	2205      	movs	r2, #5
 8017580:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017584:	4850      	ldr	r0, [pc, #320]	; (80176c8 <_svfiprintf_r+0x1e8>)
 8017586:	f7e8 fedb 	bl	8000340 <memchr>
 801758a:	9a04      	ldr	r2, [sp, #16]
 801758c:	b9d8      	cbnz	r0, 80175c6 <_svfiprintf_r+0xe6>
 801758e:	06d0      	lsls	r0, r2, #27
 8017590:	bf44      	itt	mi
 8017592:	2320      	movmi	r3, #32
 8017594:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017598:	0711      	lsls	r1, r2, #28
 801759a:	bf44      	itt	mi
 801759c:	232b      	movmi	r3, #43	; 0x2b
 801759e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80175a2:	f89a 3000 	ldrb.w	r3, [sl]
 80175a6:	2b2a      	cmp	r3, #42	; 0x2a
 80175a8:	d015      	beq.n	80175d6 <_svfiprintf_r+0xf6>
 80175aa:	9a07      	ldr	r2, [sp, #28]
 80175ac:	4654      	mov	r4, sl
 80175ae:	2000      	movs	r0, #0
 80175b0:	f04f 0c0a 	mov.w	ip, #10
 80175b4:	4621      	mov	r1, r4
 80175b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80175ba:	3b30      	subs	r3, #48	; 0x30
 80175bc:	2b09      	cmp	r3, #9
 80175be:	d94d      	bls.n	801765c <_svfiprintf_r+0x17c>
 80175c0:	b1b0      	cbz	r0, 80175f0 <_svfiprintf_r+0x110>
 80175c2:	9207      	str	r2, [sp, #28]
 80175c4:	e014      	b.n	80175f0 <_svfiprintf_r+0x110>
 80175c6:	eba0 0308 	sub.w	r3, r0, r8
 80175ca:	fa09 f303 	lsl.w	r3, r9, r3
 80175ce:	4313      	orrs	r3, r2
 80175d0:	9304      	str	r3, [sp, #16]
 80175d2:	46a2      	mov	sl, r4
 80175d4:	e7d2      	b.n	801757c <_svfiprintf_r+0x9c>
 80175d6:	9b03      	ldr	r3, [sp, #12]
 80175d8:	1d19      	adds	r1, r3, #4
 80175da:	681b      	ldr	r3, [r3, #0]
 80175dc:	9103      	str	r1, [sp, #12]
 80175de:	2b00      	cmp	r3, #0
 80175e0:	bfbb      	ittet	lt
 80175e2:	425b      	neglt	r3, r3
 80175e4:	f042 0202 	orrlt.w	r2, r2, #2
 80175e8:	9307      	strge	r3, [sp, #28]
 80175ea:	9307      	strlt	r3, [sp, #28]
 80175ec:	bfb8      	it	lt
 80175ee:	9204      	strlt	r2, [sp, #16]
 80175f0:	7823      	ldrb	r3, [r4, #0]
 80175f2:	2b2e      	cmp	r3, #46	; 0x2e
 80175f4:	d10c      	bne.n	8017610 <_svfiprintf_r+0x130>
 80175f6:	7863      	ldrb	r3, [r4, #1]
 80175f8:	2b2a      	cmp	r3, #42	; 0x2a
 80175fa:	d134      	bne.n	8017666 <_svfiprintf_r+0x186>
 80175fc:	9b03      	ldr	r3, [sp, #12]
 80175fe:	1d1a      	adds	r2, r3, #4
 8017600:	681b      	ldr	r3, [r3, #0]
 8017602:	9203      	str	r2, [sp, #12]
 8017604:	2b00      	cmp	r3, #0
 8017606:	bfb8      	it	lt
 8017608:	f04f 33ff 	movlt.w	r3, #4294967295
 801760c:	3402      	adds	r4, #2
 801760e:	9305      	str	r3, [sp, #20]
 8017610:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80176d8 <_svfiprintf_r+0x1f8>
 8017614:	7821      	ldrb	r1, [r4, #0]
 8017616:	2203      	movs	r2, #3
 8017618:	4650      	mov	r0, sl
 801761a:	f7e8 fe91 	bl	8000340 <memchr>
 801761e:	b138      	cbz	r0, 8017630 <_svfiprintf_r+0x150>
 8017620:	9b04      	ldr	r3, [sp, #16]
 8017622:	eba0 000a 	sub.w	r0, r0, sl
 8017626:	2240      	movs	r2, #64	; 0x40
 8017628:	4082      	lsls	r2, r0
 801762a:	4313      	orrs	r3, r2
 801762c:	3401      	adds	r4, #1
 801762e:	9304      	str	r3, [sp, #16]
 8017630:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017634:	4825      	ldr	r0, [pc, #148]	; (80176cc <_svfiprintf_r+0x1ec>)
 8017636:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801763a:	2206      	movs	r2, #6
 801763c:	f7e8 fe80 	bl	8000340 <memchr>
 8017640:	2800      	cmp	r0, #0
 8017642:	d038      	beq.n	80176b6 <_svfiprintf_r+0x1d6>
 8017644:	4b22      	ldr	r3, [pc, #136]	; (80176d0 <_svfiprintf_r+0x1f0>)
 8017646:	bb1b      	cbnz	r3, 8017690 <_svfiprintf_r+0x1b0>
 8017648:	9b03      	ldr	r3, [sp, #12]
 801764a:	3307      	adds	r3, #7
 801764c:	f023 0307 	bic.w	r3, r3, #7
 8017650:	3308      	adds	r3, #8
 8017652:	9303      	str	r3, [sp, #12]
 8017654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017656:	4433      	add	r3, r6
 8017658:	9309      	str	r3, [sp, #36]	; 0x24
 801765a:	e768      	b.n	801752e <_svfiprintf_r+0x4e>
 801765c:	fb0c 3202 	mla	r2, ip, r2, r3
 8017660:	460c      	mov	r4, r1
 8017662:	2001      	movs	r0, #1
 8017664:	e7a6      	b.n	80175b4 <_svfiprintf_r+0xd4>
 8017666:	2300      	movs	r3, #0
 8017668:	3401      	adds	r4, #1
 801766a:	9305      	str	r3, [sp, #20]
 801766c:	4619      	mov	r1, r3
 801766e:	f04f 0c0a 	mov.w	ip, #10
 8017672:	4620      	mov	r0, r4
 8017674:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017678:	3a30      	subs	r2, #48	; 0x30
 801767a:	2a09      	cmp	r2, #9
 801767c:	d903      	bls.n	8017686 <_svfiprintf_r+0x1a6>
 801767e:	2b00      	cmp	r3, #0
 8017680:	d0c6      	beq.n	8017610 <_svfiprintf_r+0x130>
 8017682:	9105      	str	r1, [sp, #20]
 8017684:	e7c4      	b.n	8017610 <_svfiprintf_r+0x130>
 8017686:	fb0c 2101 	mla	r1, ip, r1, r2
 801768a:	4604      	mov	r4, r0
 801768c:	2301      	movs	r3, #1
 801768e:	e7f0      	b.n	8017672 <_svfiprintf_r+0x192>
 8017690:	ab03      	add	r3, sp, #12
 8017692:	9300      	str	r3, [sp, #0]
 8017694:	462a      	mov	r2, r5
 8017696:	4b0f      	ldr	r3, [pc, #60]	; (80176d4 <_svfiprintf_r+0x1f4>)
 8017698:	a904      	add	r1, sp, #16
 801769a:	4638      	mov	r0, r7
 801769c:	f3af 8000 	nop.w
 80176a0:	1c42      	adds	r2, r0, #1
 80176a2:	4606      	mov	r6, r0
 80176a4:	d1d6      	bne.n	8017654 <_svfiprintf_r+0x174>
 80176a6:	89ab      	ldrh	r3, [r5, #12]
 80176a8:	065b      	lsls	r3, r3, #25
 80176aa:	f53f af2d 	bmi.w	8017508 <_svfiprintf_r+0x28>
 80176ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80176b0:	b01d      	add	sp, #116	; 0x74
 80176b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176b6:	ab03      	add	r3, sp, #12
 80176b8:	9300      	str	r3, [sp, #0]
 80176ba:	462a      	mov	r2, r5
 80176bc:	4b05      	ldr	r3, [pc, #20]	; (80176d4 <_svfiprintf_r+0x1f4>)
 80176be:	a904      	add	r1, sp, #16
 80176c0:	4638      	mov	r0, r7
 80176c2:	f000 fa4b 	bl	8017b5c <_printf_i>
 80176c6:	e7eb      	b.n	80176a0 <_svfiprintf_r+0x1c0>
 80176c8:	0801867c 	.word	0x0801867c
 80176cc:	08018686 	.word	0x08018686
 80176d0:	00000000 	.word	0x00000000
 80176d4:	0801742d 	.word	0x0801742d
 80176d8:	08018682 	.word	0x08018682

080176dc <_sungetc_r>:
 80176dc:	b538      	push	{r3, r4, r5, lr}
 80176de:	1c4b      	adds	r3, r1, #1
 80176e0:	4614      	mov	r4, r2
 80176e2:	d103      	bne.n	80176ec <_sungetc_r+0x10>
 80176e4:	f04f 35ff 	mov.w	r5, #4294967295
 80176e8:	4628      	mov	r0, r5
 80176ea:	bd38      	pop	{r3, r4, r5, pc}
 80176ec:	8993      	ldrh	r3, [r2, #12]
 80176ee:	f023 0320 	bic.w	r3, r3, #32
 80176f2:	8193      	strh	r3, [r2, #12]
 80176f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80176f6:	6852      	ldr	r2, [r2, #4]
 80176f8:	b2cd      	uxtb	r5, r1
 80176fa:	b18b      	cbz	r3, 8017720 <_sungetc_r+0x44>
 80176fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80176fe:	4293      	cmp	r3, r2
 8017700:	dd08      	ble.n	8017714 <_sungetc_r+0x38>
 8017702:	6823      	ldr	r3, [r4, #0]
 8017704:	1e5a      	subs	r2, r3, #1
 8017706:	6022      	str	r2, [r4, #0]
 8017708:	f803 5c01 	strb.w	r5, [r3, #-1]
 801770c:	6863      	ldr	r3, [r4, #4]
 801770e:	3301      	adds	r3, #1
 8017710:	6063      	str	r3, [r4, #4]
 8017712:	e7e9      	b.n	80176e8 <_sungetc_r+0xc>
 8017714:	4621      	mov	r1, r4
 8017716:	f000 fcca 	bl	80180ae <__submore>
 801771a:	2800      	cmp	r0, #0
 801771c:	d0f1      	beq.n	8017702 <_sungetc_r+0x26>
 801771e:	e7e1      	b.n	80176e4 <_sungetc_r+0x8>
 8017720:	6921      	ldr	r1, [r4, #16]
 8017722:	6823      	ldr	r3, [r4, #0]
 8017724:	b151      	cbz	r1, 801773c <_sungetc_r+0x60>
 8017726:	4299      	cmp	r1, r3
 8017728:	d208      	bcs.n	801773c <_sungetc_r+0x60>
 801772a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801772e:	42a9      	cmp	r1, r5
 8017730:	d104      	bne.n	801773c <_sungetc_r+0x60>
 8017732:	3b01      	subs	r3, #1
 8017734:	3201      	adds	r2, #1
 8017736:	6023      	str	r3, [r4, #0]
 8017738:	6062      	str	r2, [r4, #4]
 801773a:	e7d5      	b.n	80176e8 <_sungetc_r+0xc>
 801773c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8017740:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017744:	6363      	str	r3, [r4, #52]	; 0x34
 8017746:	2303      	movs	r3, #3
 8017748:	63a3      	str	r3, [r4, #56]	; 0x38
 801774a:	4623      	mov	r3, r4
 801774c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8017750:	6023      	str	r3, [r4, #0]
 8017752:	2301      	movs	r3, #1
 8017754:	e7dc      	b.n	8017710 <_sungetc_r+0x34>

08017756 <__ssrefill_r>:
 8017756:	b510      	push	{r4, lr}
 8017758:	460c      	mov	r4, r1
 801775a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801775c:	b169      	cbz	r1, 801777a <__ssrefill_r+0x24>
 801775e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017762:	4299      	cmp	r1, r3
 8017764:	d001      	beq.n	801776a <__ssrefill_r+0x14>
 8017766:	f7ff fd69 	bl	801723c <_free_r>
 801776a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801776c:	6063      	str	r3, [r4, #4]
 801776e:	2000      	movs	r0, #0
 8017770:	6360      	str	r0, [r4, #52]	; 0x34
 8017772:	b113      	cbz	r3, 801777a <__ssrefill_r+0x24>
 8017774:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017776:	6023      	str	r3, [r4, #0]
 8017778:	bd10      	pop	{r4, pc}
 801777a:	6923      	ldr	r3, [r4, #16]
 801777c:	6023      	str	r3, [r4, #0]
 801777e:	2300      	movs	r3, #0
 8017780:	6063      	str	r3, [r4, #4]
 8017782:	89a3      	ldrh	r3, [r4, #12]
 8017784:	f043 0320 	orr.w	r3, r3, #32
 8017788:	81a3      	strh	r3, [r4, #12]
 801778a:	f04f 30ff 	mov.w	r0, #4294967295
 801778e:	e7f3      	b.n	8017778 <__ssrefill_r+0x22>

08017790 <__ssvfiscanf_r>:
 8017790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017794:	460c      	mov	r4, r1
 8017796:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801779a:	2100      	movs	r1, #0
 801779c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80177a0:	49a6      	ldr	r1, [pc, #664]	; (8017a3c <__ssvfiscanf_r+0x2ac>)
 80177a2:	91a0      	str	r1, [sp, #640]	; 0x280
 80177a4:	f10d 0804 	add.w	r8, sp, #4
 80177a8:	49a5      	ldr	r1, [pc, #660]	; (8017a40 <__ssvfiscanf_r+0x2b0>)
 80177aa:	4fa6      	ldr	r7, [pc, #664]	; (8017a44 <__ssvfiscanf_r+0x2b4>)
 80177ac:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8017a48 <__ssvfiscanf_r+0x2b8>
 80177b0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80177b4:	4606      	mov	r6, r0
 80177b6:	91a1      	str	r1, [sp, #644]	; 0x284
 80177b8:	9300      	str	r3, [sp, #0]
 80177ba:	7813      	ldrb	r3, [r2, #0]
 80177bc:	2b00      	cmp	r3, #0
 80177be:	f000 815a 	beq.w	8017a76 <__ssvfiscanf_r+0x2e6>
 80177c2:	5cf9      	ldrb	r1, [r7, r3]
 80177c4:	f011 0108 	ands.w	r1, r1, #8
 80177c8:	f102 0501 	add.w	r5, r2, #1
 80177cc:	d019      	beq.n	8017802 <__ssvfiscanf_r+0x72>
 80177ce:	6863      	ldr	r3, [r4, #4]
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	dd0f      	ble.n	80177f4 <__ssvfiscanf_r+0x64>
 80177d4:	6823      	ldr	r3, [r4, #0]
 80177d6:	781a      	ldrb	r2, [r3, #0]
 80177d8:	5cba      	ldrb	r2, [r7, r2]
 80177da:	0712      	lsls	r2, r2, #28
 80177dc:	d401      	bmi.n	80177e2 <__ssvfiscanf_r+0x52>
 80177de:	462a      	mov	r2, r5
 80177e0:	e7eb      	b.n	80177ba <__ssvfiscanf_r+0x2a>
 80177e2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80177e4:	3201      	adds	r2, #1
 80177e6:	9245      	str	r2, [sp, #276]	; 0x114
 80177e8:	6862      	ldr	r2, [r4, #4]
 80177ea:	3301      	adds	r3, #1
 80177ec:	3a01      	subs	r2, #1
 80177ee:	6062      	str	r2, [r4, #4]
 80177f0:	6023      	str	r3, [r4, #0]
 80177f2:	e7ec      	b.n	80177ce <__ssvfiscanf_r+0x3e>
 80177f4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80177f6:	4621      	mov	r1, r4
 80177f8:	4630      	mov	r0, r6
 80177fa:	4798      	blx	r3
 80177fc:	2800      	cmp	r0, #0
 80177fe:	d0e9      	beq.n	80177d4 <__ssvfiscanf_r+0x44>
 8017800:	e7ed      	b.n	80177de <__ssvfiscanf_r+0x4e>
 8017802:	2b25      	cmp	r3, #37	; 0x25
 8017804:	d012      	beq.n	801782c <__ssvfiscanf_r+0x9c>
 8017806:	469a      	mov	sl, r3
 8017808:	6863      	ldr	r3, [r4, #4]
 801780a:	2b00      	cmp	r3, #0
 801780c:	f340 8091 	ble.w	8017932 <__ssvfiscanf_r+0x1a2>
 8017810:	6822      	ldr	r2, [r4, #0]
 8017812:	7813      	ldrb	r3, [r2, #0]
 8017814:	4553      	cmp	r3, sl
 8017816:	f040 812e 	bne.w	8017a76 <__ssvfiscanf_r+0x2e6>
 801781a:	6863      	ldr	r3, [r4, #4]
 801781c:	3b01      	subs	r3, #1
 801781e:	6063      	str	r3, [r4, #4]
 8017820:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8017822:	3201      	adds	r2, #1
 8017824:	3301      	adds	r3, #1
 8017826:	6022      	str	r2, [r4, #0]
 8017828:	9345      	str	r3, [sp, #276]	; 0x114
 801782a:	e7d8      	b.n	80177de <__ssvfiscanf_r+0x4e>
 801782c:	9141      	str	r1, [sp, #260]	; 0x104
 801782e:	9143      	str	r1, [sp, #268]	; 0x10c
 8017830:	7853      	ldrb	r3, [r2, #1]
 8017832:	2b2a      	cmp	r3, #42	; 0x2a
 8017834:	bf02      	ittt	eq
 8017836:	2310      	moveq	r3, #16
 8017838:	1c95      	addeq	r5, r2, #2
 801783a:	9341      	streq	r3, [sp, #260]	; 0x104
 801783c:	220a      	movs	r2, #10
 801783e:	46aa      	mov	sl, r5
 8017840:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8017844:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8017848:	2b09      	cmp	r3, #9
 801784a:	d91c      	bls.n	8017886 <__ssvfiscanf_r+0xf6>
 801784c:	487e      	ldr	r0, [pc, #504]	; (8017a48 <__ssvfiscanf_r+0x2b8>)
 801784e:	2203      	movs	r2, #3
 8017850:	f7e8 fd76 	bl	8000340 <memchr>
 8017854:	b138      	cbz	r0, 8017866 <__ssvfiscanf_r+0xd6>
 8017856:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017858:	eba0 0009 	sub.w	r0, r0, r9
 801785c:	2301      	movs	r3, #1
 801785e:	4083      	lsls	r3, r0
 8017860:	4313      	orrs	r3, r2
 8017862:	9341      	str	r3, [sp, #260]	; 0x104
 8017864:	4655      	mov	r5, sl
 8017866:	f815 3b01 	ldrb.w	r3, [r5], #1
 801786a:	2b78      	cmp	r3, #120	; 0x78
 801786c:	d806      	bhi.n	801787c <__ssvfiscanf_r+0xec>
 801786e:	2b57      	cmp	r3, #87	; 0x57
 8017870:	d810      	bhi.n	8017894 <__ssvfiscanf_r+0x104>
 8017872:	2b25      	cmp	r3, #37	; 0x25
 8017874:	d0c7      	beq.n	8017806 <__ssvfiscanf_r+0x76>
 8017876:	d857      	bhi.n	8017928 <__ssvfiscanf_r+0x198>
 8017878:	2b00      	cmp	r3, #0
 801787a:	d065      	beq.n	8017948 <__ssvfiscanf_r+0x1b8>
 801787c:	2303      	movs	r3, #3
 801787e:	9347      	str	r3, [sp, #284]	; 0x11c
 8017880:	230a      	movs	r3, #10
 8017882:	9342      	str	r3, [sp, #264]	; 0x108
 8017884:	e076      	b.n	8017974 <__ssvfiscanf_r+0x1e4>
 8017886:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017888:	fb02 1103 	mla	r1, r2, r3, r1
 801788c:	3930      	subs	r1, #48	; 0x30
 801788e:	9143      	str	r1, [sp, #268]	; 0x10c
 8017890:	4655      	mov	r5, sl
 8017892:	e7d4      	b.n	801783e <__ssvfiscanf_r+0xae>
 8017894:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8017898:	2a20      	cmp	r2, #32
 801789a:	d8ef      	bhi.n	801787c <__ssvfiscanf_r+0xec>
 801789c:	a101      	add	r1, pc, #4	; (adr r1, 80178a4 <__ssvfiscanf_r+0x114>)
 801789e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80178a2:	bf00      	nop
 80178a4:	08017957 	.word	0x08017957
 80178a8:	0801787d 	.word	0x0801787d
 80178ac:	0801787d 	.word	0x0801787d
 80178b0:	080179b5 	.word	0x080179b5
 80178b4:	0801787d 	.word	0x0801787d
 80178b8:	0801787d 	.word	0x0801787d
 80178bc:	0801787d 	.word	0x0801787d
 80178c0:	0801787d 	.word	0x0801787d
 80178c4:	0801787d 	.word	0x0801787d
 80178c8:	0801787d 	.word	0x0801787d
 80178cc:	0801787d 	.word	0x0801787d
 80178d0:	080179cb 	.word	0x080179cb
 80178d4:	080179b1 	.word	0x080179b1
 80178d8:	0801792f 	.word	0x0801792f
 80178dc:	0801792f 	.word	0x0801792f
 80178e0:	0801792f 	.word	0x0801792f
 80178e4:	0801787d 	.word	0x0801787d
 80178e8:	0801796d 	.word	0x0801796d
 80178ec:	0801787d 	.word	0x0801787d
 80178f0:	0801787d 	.word	0x0801787d
 80178f4:	0801787d 	.word	0x0801787d
 80178f8:	0801787d 	.word	0x0801787d
 80178fc:	080179db 	.word	0x080179db
 8017900:	080179a9 	.word	0x080179a9
 8017904:	0801794f 	.word	0x0801794f
 8017908:	0801787d 	.word	0x0801787d
 801790c:	0801787d 	.word	0x0801787d
 8017910:	080179d7 	.word	0x080179d7
 8017914:	0801787d 	.word	0x0801787d
 8017918:	080179b1 	.word	0x080179b1
 801791c:	0801787d 	.word	0x0801787d
 8017920:	0801787d 	.word	0x0801787d
 8017924:	08017957 	.word	0x08017957
 8017928:	3b45      	subs	r3, #69	; 0x45
 801792a:	2b02      	cmp	r3, #2
 801792c:	d8a6      	bhi.n	801787c <__ssvfiscanf_r+0xec>
 801792e:	2305      	movs	r3, #5
 8017930:	e01f      	b.n	8017972 <__ssvfiscanf_r+0x1e2>
 8017932:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017934:	4621      	mov	r1, r4
 8017936:	4630      	mov	r0, r6
 8017938:	4798      	blx	r3
 801793a:	2800      	cmp	r0, #0
 801793c:	f43f af68 	beq.w	8017810 <__ssvfiscanf_r+0x80>
 8017940:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017942:	2800      	cmp	r0, #0
 8017944:	f040 808d 	bne.w	8017a62 <__ssvfiscanf_r+0x2d2>
 8017948:	f04f 30ff 	mov.w	r0, #4294967295
 801794c:	e08f      	b.n	8017a6e <__ssvfiscanf_r+0x2de>
 801794e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017950:	f042 0220 	orr.w	r2, r2, #32
 8017954:	9241      	str	r2, [sp, #260]	; 0x104
 8017956:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017958:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801795c:	9241      	str	r2, [sp, #260]	; 0x104
 801795e:	2210      	movs	r2, #16
 8017960:	2b6f      	cmp	r3, #111	; 0x6f
 8017962:	9242      	str	r2, [sp, #264]	; 0x108
 8017964:	bf34      	ite	cc
 8017966:	2303      	movcc	r3, #3
 8017968:	2304      	movcs	r3, #4
 801796a:	e002      	b.n	8017972 <__ssvfiscanf_r+0x1e2>
 801796c:	2300      	movs	r3, #0
 801796e:	9342      	str	r3, [sp, #264]	; 0x108
 8017970:	2303      	movs	r3, #3
 8017972:	9347      	str	r3, [sp, #284]	; 0x11c
 8017974:	6863      	ldr	r3, [r4, #4]
 8017976:	2b00      	cmp	r3, #0
 8017978:	dd3d      	ble.n	80179f6 <__ssvfiscanf_r+0x266>
 801797a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801797c:	0659      	lsls	r1, r3, #25
 801797e:	d404      	bmi.n	801798a <__ssvfiscanf_r+0x1fa>
 8017980:	6823      	ldr	r3, [r4, #0]
 8017982:	781a      	ldrb	r2, [r3, #0]
 8017984:	5cba      	ldrb	r2, [r7, r2]
 8017986:	0712      	lsls	r2, r2, #28
 8017988:	d43c      	bmi.n	8017a04 <__ssvfiscanf_r+0x274>
 801798a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801798c:	2b02      	cmp	r3, #2
 801798e:	dc4b      	bgt.n	8017a28 <__ssvfiscanf_r+0x298>
 8017990:	466b      	mov	r3, sp
 8017992:	4622      	mov	r2, r4
 8017994:	a941      	add	r1, sp, #260	; 0x104
 8017996:	4630      	mov	r0, r6
 8017998:	f000 fa02 	bl	8017da0 <_scanf_chars>
 801799c:	2801      	cmp	r0, #1
 801799e:	d06a      	beq.n	8017a76 <__ssvfiscanf_r+0x2e6>
 80179a0:	2802      	cmp	r0, #2
 80179a2:	f47f af1c 	bne.w	80177de <__ssvfiscanf_r+0x4e>
 80179a6:	e7cb      	b.n	8017940 <__ssvfiscanf_r+0x1b0>
 80179a8:	2308      	movs	r3, #8
 80179aa:	9342      	str	r3, [sp, #264]	; 0x108
 80179ac:	2304      	movs	r3, #4
 80179ae:	e7e0      	b.n	8017972 <__ssvfiscanf_r+0x1e2>
 80179b0:	220a      	movs	r2, #10
 80179b2:	e7d5      	b.n	8017960 <__ssvfiscanf_r+0x1d0>
 80179b4:	4629      	mov	r1, r5
 80179b6:	4640      	mov	r0, r8
 80179b8:	f000 fb40 	bl	801803c <__sccl>
 80179bc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80179be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80179c2:	9341      	str	r3, [sp, #260]	; 0x104
 80179c4:	4605      	mov	r5, r0
 80179c6:	2301      	movs	r3, #1
 80179c8:	e7d3      	b.n	8017972 <__ssvfiscanf_r+0x1e2>
 80179ca:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80179cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80179d0:	9341      	str	r3, [sp, #260]	; 0x104
 80179d2:	2300      	movs	r3, #0
 80179d4:	e7cd      	b.n	8017972 <__ssvfiscanf_r+0x1e2>
 80179d6:	2302      	movs	r3, #2
 80179d8:	e7cb      	b.n	8017972 <__ssvfiscanf_r+0x1e2>
 80179da:	9841      	ldr	r0, [sp, #260]	; 0x104
 80179dc:	06c3      	lsls	r3, r0, #27
 80179de:	f53f aefe 	bmi.w	80177de <__ssvfiscanf_r+0x4e>
 80179e2:	9b00      	ldr	r3, [sp, #0]
 80179e4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80179e6:	1d19      	adds	r1, r3, #4
 80179e8:	9100      	str	r1, [sp, #0]
 80179ea:	681b      	ldr	r3, [r3, #0]
 80179ec:	07c0      	lsls	r0, r0, #31
 80179ee:	bf4c      	ite	mi
 80179f0:	801a      	strhmi	r2, [r3, #0]
 80179f2:	601a      	strpl	r2, [r3, #0]
 80179f4:	e6f3      	b.n	80177de <__ssvfiscanf_r+0x4e>
 80179f6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80179f8:	4621      	mov	r1, r4
 80179fa:	4630      	mov	r0, r6
 80179fc:	4798      	blx	r3
 80179fe:	2800      	cmp	r0, #0
 8017a00:	d0bb      	beq.n	801797a <__ssvfiscanf_r+0x1ea>
 8017a02:	e79d      	b.n	8017940 <__ssvfiscanf_r+0x1b0>
 8017a04:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017a06:	3201      	adds	r2, #1
 8017a08:	9245      	str	r2, [sp, #276]	; 0x114
 8017a0a:	6862      	ldr	r2, [r4, #4]
 8017a0c:	3a01      	subs	r2, #1
 8017a0e:	2a00      	cmp	r2, #0
 8017a10:	6062      	str	r2, [r4, #4]
 8017a12:	dd02      	ble.n	8017a1a <__ssvfiscanf_r+0x28a>
 8017a14:	3301      	adds	r3, #1
 8017a16:	6023      	str	r3, [r4, #0]
 8017a18:	e7b2      	b.n	8017980 <__ssvfiscanf_r+0x1f0>
 8017a1a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017a1c:	4621      	mov	r1, r4
 8017a1e:	4630      	mov	r0, r6
 8017a20:	4798      	blx	r3
 8017a22:	2800      	cmp	r0, #0
 8017a24:	d0ac      	beq.n	8017980 <__ssvfiscanf_r+0x1f0>
 8017a26:	e78b      	b.n	8017940 <__ssvfiscanf_r+0x1b0>
 8017a28:	2b04      	cmp	r3, #4
 8017a2a:	dc0f      	bgt.n	8017a4c <__ssvfiscanf_r+0x2bc>
 8017a2c:	466b      	mov	r3, sp
 8017a2e:	4622      	mov	r2, r4
 8017a30:	a941      	add	r1, sp, #260	; 0x104
 8017a32:	4630      	mov	r0, r6
 8017a34:	f000 fa0e 	bl	8017e54 <_scanf_i>
 8017a38:	e7b0      	b.n	801799c <__ssvfiscanf_r+0x20c>
 8017a3a:	bf00      	nop
 8017a3c:	080176dd 	.word	0x080176dd
 8017a40:	08017757 	.word	0x08017757
 8017a44:	080186cb 	.word	0x080186cb
 8017a48:	08018682 	.word	0x08018682
 8017a4c:	4b0b      	ldr	r3, [pc, #44]	; (8017a7c <__ssvfiscanf_r+0x2ec>)
 8017a4e:	2b00      	cmp	r3, #0
 8017a50:	f43f aec5 	beq.w	80177de <__ssvfiscanf_r+0x4e>
 8017a54:	466b      	mov	r3, sp
 8017a56:	4622      	mov	r2, r4
 8017a58:	a941      	add	r1, sp, #260	; 0x104
 8017a5a:	4630      	mov	r0, r6
 8017a5c:	f3af 8000 	nop.w
 8017a60:	e79c      	b.n	801799c <__ssvfiscanf_r+0x20c>
 8017a62:	89a3      	ldrh	r3, [r4, #12]
 8017a64:	f013 0f40 	tst.w	r3, #64	; 0x40
 8017a68:	bf18      	it	ne
 8017a6a:	f04f 30ff 	movne.w	r0, #4294967295
 8017a6e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8017a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a76:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017a78:	e7f9      	b.n	8017a6e <__ssvfiscanf_r+0x2de>
 8017a7a:	bf00      	nop
 8017a7c:	00000000 	.word	0x00000000

08017a80 <_printf_common>:
 8017a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a84:	4616      	mov	r6, r2
 8017a86:	4699      	mov	r9, r3
 8017a88:	688a      	ldr	r2, [r1, #8]
 8017a8a:	690b      	ldr	r3, [r1, #16]
 8017a8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017a90:	4293      	cmp	r3, r2
 8017a92:	bfb8      	it	lt
 8017a94:	4613      	movlt	r3, r2
 8017a96:	6033      	str	r3, [r6, #0]
 8017a98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017a9c:	4607      	mov	r7, r0
 8017a9e:	460c      	mov	r4, r1
 8017aa0:	b10a      	cbz	r2, 8017aa6 <_printf_common+0x26>
 8017aa2:	3301      	adds	r3, #1
 8017aa4:	6033      	str	r3, [r6, #0]
 8017aa6:	6823      	ldr	r3, [r4, #0]
 8017aa8:	0699      	lsls	r1, r3, #26
 8017aaa:	bf42      	ittt	mi
 8017aac:	6833      	ldrmi	r3, [r6, #0]
 8017aae:	3302      	addmi	r3, #2
 8017ab0:	6033      	strmi	r3, [r6, #0]
 8017ab2:	6825      	ldr	r5, [r4, #0]
 8017ab4:	f015 0506 	ands.w	r5, r5, #6
 8017ab8:	d106      	bne.n	8017ac8 <_printf_common+0x48>
 8017aba:	f104 0a19 	add.w	sl, r4, #25
 8017abe:	68e3      	ldr	r3, [r4, #12]
 8017ac0:	6832      	ldr	r2, [r6, #0]
 8017ac2:	1a9b      	subs	r3, r3, r2
 8017ac4:	42ab      	cmp	r3, r5
 8017ac6:	dc26      	bgt.n	8017b16 <_printf_common+0x96>
 8017ac8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017acc:	1e13      	subs	r3, r2, #0
 8017ace:	6822      	ldr	r2, [r4, #0]
 8017ad0:	bf18      	it	ne
 8017ad2:	2301      	movne	r3, #1
 8017ad4:	0692      	lsls	r2, r2, #26
 8017ad6:	d42b      	bmi.n	8017b30 <_printf_common+0xb0>
 8017ad8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017adc:	4649      	mov	r1, r9
 8017ade:	4638      	mov	r0, r7
 8017ae0:	47c0      	blx	r8
 8017ae2:	3001      	adds	r0, #1
 8017ae4:	d01e      	beq.n	8017b24 <_printf_common+0xa4>
 8017ae6:	6823      	ldr	r3, [r4, #0]
 8017ae8:	6922      	ldr	r2, [r4, #16]
 8017aea:	f003 0306 	and.w	r3, r3, #6
 8017aee:	2b04      	cmp	r3, #4
 8017af0:	bf02      	ittt	eq
 8017af2:	68e5      	ldreq	r5, [r4, #12]
 8017af4:	6833      	ldreq	r3, [r6, #0]
 8017af6:	1aed      	subeq	r5, r5, r3
 8017af8:	68a3      	ldr	r3, [r4, #8]
 8017afa:	bf0c      	ite	eq
 8017afc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017b00:	2500      	movne	r5, #0
 8017b02:	4293      	cmp	r3, r2
 8017b04:	bfc4      	itt	gt
 8017b06:	1a9b      	subgt	r3, r3, r2
 8017b08:	18ed      	addgt	r5, r5, r3
 8017b0a:	2600      	movs	r6, #0
 8017b0c:	341a      	adds	r4, #26
 8017b0e:	42b5      	cmp	r5, r6
 8017b10:	d11a      	bne.n	8017b48 <_printf_common+0xc8>
 8017b12:	2000      	movs	r0, #0
 8017b14:	e008      	b.n	8017b28 <_printf_common+0xa8>
 8017b16:	2301      	movs	r3, #1
 8017b18:	4652      	mov	r2, sl
 8017b1a:	4649      	mov	r1, r9
 8017b1c:	4638      	mov	r0, r7
 8017b1e:	47c0      	blx	r8
 8017b20:	3001      	adds	r0, #1
 8017b22:	d103      	bne.n	8017b2c <_printf_common+0xac>
 8017b24:	f04f 30ff 	mov.w	r0, #4294967295
 8017b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b2c:	3501      	adds	r5, #1
 8017b2e:	e7c6      	b.n	8017abe <_printf_common+0x3e>
 8017b30:	18e1      	adds	r1, r4, r3
 8017b32:	1c5a      	adds	r2, r3, #1
 8017b34:	2030      	movs	r0, #48	; 0x30
 8017b36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017b3a:	4422      	add	r2, r4
 8017b3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017b40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017b44:	3302      	adds	r3, #2
 8017b46:	e7c7      	b.n	8017ad8 <_printf_common+0x58>
 8017b48:	2301      	movs	r3, #1
 8017b4a:	4622      	mov	r2, r4
 8017b4c:	4649      	mov	r1, r9
 8017b4e:	4638      	mov	r0, r7
 8017b50:	47c0      	blx	r8
 8017b52:	3001      	adds	r0, #1
 8017b54:	d0e6      	beq.n	8017b24 <_printf_common+0xa4>
 8017b56:	3601      	adds	r6, #1
 8017b58:	e7d9      	b.n	8017b0e <_printf_common+0x8e>
	...

08017b5c <_printf_i>:
 8017b5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017b60:	7e0f      	ldrb	r7, [r1, #24]
 8017b62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017b64:	2f78      	cmp	r7, #120	; 0x78
 8017b66:	4691      	mov	r9, r2
 8017b68:	4680      	mov	r8, r0
 8017b6a:	460c      	mov	r4, r1
 8017b6c:	469a      	mov	sl, r3
 8017b6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017b72:	d807      	bhi.n	8017b84 <_printf_i+0x28>
 8017b74:	2f62      	cmp	r7, #98	; 0x62
 8017b76:	d80a      	bhi.n	8017b8e <_printf_i+0x32>
 8017b78:	2f00      	cmp	r7, #0
 8017b7a:	f000 80d4 	beq.w	8017d26 <_printf_i+0x1ca>
 8017b7e:	2f58      	cmp	r7, #88	; 0x58
 8017b80:	f000 80c0 	beq.w	8017d04 <_printf_i+0x1a8>
 8017b84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017b88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017b8c:	e03a      	b.n	8017c04 <_printf_i+0xa8>
 8017b8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017b92:	2b15      	cmp	r3, #21
 8017b94:	d8f6      	bhi.n	8017b84 <_printf_i+0x28>
 8017b96:	a101      	add	r1, pc, #4	; (adr r1, 8017b9c <_printf_i+0x40>)
 8017b98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017b9c:	08017bf5 	.word	0x08017bf5
 8017ba0:	08017c09 	.word	0x08017c09
 8017ba4:	08017b85 	.word	0x08017b85
 8017ba8:	08017b85 	.word	0x08017b85
 8017bac:	08017b85 	.word	0x08017b85
 8017bb0:	08017b85 	.word	0x08017b85
 8017bb4:	08017c09 	.word	0x08017c09
 8017bb8:	08017b85 	.word	0x08017b85
 8017bbc:	08017b85 	.word	0x08017b85
 8017bc0:	08017b85 	.word	0x08017b85
 8017bc4:	08017b85 	.word	0x08017b85
 8017bc8:	08017d0d 	.word	0x08017d0d
 8017bcc:	08017c35 	.word	0x08017c35
 8017bd0:	08017cc7 	.word	0x08017cc7
 8017bd4:	08017b85 	.word	0x08017b85
 8017bd8:	08017b85 	.word	0x08017b85
 8017bdc:	08017d2f 	.word	0x08017d2f
 8017be0:	08017b85 	.word	0x08017b85
 8017be4:	08017c35 	.word	0x08017c35
 8017be8:	08017b85 	.word	0x08017b85
 8017bec:	08017b85 	.word	0x08017b85
 8017bf0:	08017ccf 	.word	0x08017ccf
 8017bf4:	682b      	ldr	r3, [r5, #0]
 8017bf6:	1d1a      	adds	r2, r3, #4
 8017bf8:	681b      	ldr	r3, [r3, #0]
 8017bfa:	602a      	str	r2, [r5, #0]
 8017bfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017c00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017c04:	2301      	movs	r3, #1
 8017c06:	e09f      	b.n	8017d48 <_printf_i+0x1ec>
 8017c08:	6820      	ldr	r0, [r4, #0]
 8017c0a:	682b      	ldr	r3, [r5, #0]
 8017c0c:	0607      	lsls	r7, r0, #24
 8017c0e:	f103 0104 	add.w	r1, r3, #4
 8017c12:	6029      	str	r1, [r5, #0]
 8017c14:	d501      	bpl.n	8017c1a <_printf_i+0xbe>
 8017c16:	681e      	ldr	r6, [r3, #0]
 8017c18:	e003      	b.n	8017c22 <_printf_i+0xc6>
 8017c1a:	0646      	lsls	r6, r0, #25
 8017c1c:	d5fb      	bpl.n	8017c16 <_printf_i+0xba>
 8017c1e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8017c22:	2e00      	cmp	r6, #0
 8017c24:	da03      	bge.n	8017c2e <_printf_i+0xd2>
 8017c26:	232d      	movs	r3, #45	; 0x2d
 8017c28:	4276      	negs	r6, r6
 8017c2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017c2e:	485a      	ldr	r0, [pc, #360]	; (8017d98 <_printf_i+0x23c>)
 8017c30:	230a      	movs	r3, #10
 8017c32:	e012      	b.n	8017c5a <_printf_i+0xfe>
 8017c34:	682b      	ldr	r3, [r5, #0]
 8017c36:	6820      	ldr	r0, [r4, #0]
 8017c38:	1d19      	adds	r1, r3, #4
 8017c3a:	6029      	str	r1, [r5, #0]
 8017c3c:	0605      	lsls	r5, r0, #24
 8017c3e:	d501      	bpl.n	8017c44 <_printf_i+0xe8>
 8017c40:	681e      	ldr	r6, [r3, #0]
 8017c42:	e002      	b.n	8017c4a <_printf_i+0xee>
 8017c44:	0641      	lsls	r1, r0, #25
 8017c46:	d5fb      	bpl.n	8017c40 <_printf_i+0xe4>
 8017c48:	881e      	ldrh	r6, [r3, #0]
 8017c4a:	4853      	ldr	r0, [pc, #332]	; (8017d98 <_printf_i+0x23c>)
 8017c4c:	2f6f      	cmp	r7, #111	; 0x6f
 8017c4e:	bf0c      	ite	eq
 8017c50:	2308      	moveq	r3, #8
 8017c52:	230a      	movne	r3, #10
 8017c54:	2100      	movs	r1, #0
 8017c56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017c5a:	6865      	ldr	r5, [r4, #4]
 8017c5c:	60a5      	str	r5, [r4, #8]
 8017c5e:	2d00      	cmp	r5, #0
 8017c60:	bfa2      	ittt	ge
 8017c62:	6821      	ldrge	r1, [r4, #0]
 8017c64:	f021 0104 	bicge.w	r1, r1, #4
 8017c68:	6021      	strge	r1, [r4, #0]
 8017c6a:	b90e      	cbnz	r6, 8017c70 <_printf_i+0x114>
 8017c6c:	2d00      	cmp	r5, #0
 8017c6e:	d04b      	beq.n	8017d08 <_printf_i+0x1ac>
 8017c70:	4615      	mov	r5, r2
 8017c72:	fbb6 f1f3 	udiv	r1, r6, r3
 8017c76:	fb03 6711 	mls	r7, r3, r1, r6
 8017c7a:	5dc7      	ldrb	r7, [r0, r7]
 8017c7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017c80:	4637      	mov	r7, r6
 8017c82:	42bb      	cmp	r3, r7
 8017c84:	460e      	mov	r6, r1
 8017c86:	d9f4      	bls.n	8017c72 <_printf_i+0x116>
 8017c88:	2b08      	cmp	r3, #8
 8017c8a:	d10b      	bne.n	8017ca4 <_printf_i+0x148>
 8017c8c:	6823      	ldr	r3, [r4, #0]
 8017c8e:	07de      	lsls	r6, r3, #31
 8017c90:	d508      	bpl.n	8017ca4 <_printf_i+0x148>
 8017c92:	6923      	ldr	r3, [r4, #16]
 8017c94:	6861      	ldr	r1, [r4, #4]
 8017c96:	4299      	cmp	r1, r3
 8017c98:	bfde      	ittt	le
 8017c9a:	2330      	movle	r3, #48	; 0x30
 8017c9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017ca0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017ca4:	1b52      	subs	r2, r2, r5
 8017ca6:	6122      	str	r2, [r4, #16]
 8017ca8:	f8cd a000 	str.w	sl, [sp]
 8017cac:	464b      	mov	r3, r9
 8017cae:	aa03      	add	r2, sp, #12
 8017cb0:	4621      	mov	r1, r4
 8017cb2:	4640      	mov	r0, r8
 8017cb4:	f7ff fee4 	bl	8017a80 <_printf_common>
 8017cb8:	3001      	adds	r0, #1
 8017cba:	d14a      	bne.n	8017d52 <_printf_i+0x1f6>
 8017cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8017cc0:	b004      	add	sp, #16
 8017cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017cc6:	6823      	ldr	r3, [r4, #0]
 8017cc8:	f043 0320 	orr.w	r3, r3, #32
 8017ccc:	6023      	str	r3, [r4, #0]
 8017cce:	4833      	ldr	r0, [pc, #204]	; (8017d9c <_printf_i+0x240>)
 8017cd0:	2778      	movs	r7, #120	; 0x78
 8017cd2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017cd6:	6823      	ldr	r3, [r4, #0]
 8017cd8:	6829      	ldr	r1, [r5, #0]
 8017cda:	061f      	lsls	r7, r3, #24
 8017cdc:	f851 6b04 	ldr.w	r6, [r1], #4
 8017ce0:	d402      	bmi.n	8017ce8 <_printf_i+0x18c>
 8017ce2:	065f      	lsls	r7, r3, #25
 8017ce4:	bf48      	it	mi
 8017ce6:	b2b6      	uxthmi	r6, r6
 8017ce8:	07df      	lsls	r7, r3, #31
 8017cea:	bf48      	it	mi
 8017cec:	f043 0320 	orrmi.w	r3, r3, #32
 8017cf0:	6029      	str	r1, [r5, #0]
 8017cf2:	bf48      	it	mi
 8017cf4:	6023      	strmi	r3, [r4, #0]
 8017cf6:	b91e      	cbnz	r6, 8017d00 <_printf_i+0x1a4>
 8017cf8:	6823      	ldr	r3, [r4, #0]
 8017cfa:	f023 0320 	bic.w	r3, r3, #32
 8017cfe:	6023      	str	r3, [r4, #0]
 8017d00:	2310      	movs	r3, #16
 8017d02:	e7a7      	b.n	8017c54 <_printf_i+0xf8>
 8017d04:	4824      	ldr	r0, [pc, #144]	; (8017d98 <_printf_i+0x23c>)
 8017d06:	e7e4      	b.n	8017cd2 <_printf_i+0x176>
 8017d08:	4615      	mov	r5, r2
 8017d0a:	e7bd      	b.n	8017c88 <_printf_i+0x12c>
 8017d0c:	682b      	ldr	r3, [r5, #0]
 8017d0e:	6826      	ldr	r6, [r4, #0]
 8017d10:	6961      	ldr	r1, [r4, #20]
 8017d12:	1d18      	adds	r0, r3, #4
 8017d14:	6028      	str	r0, [r5, #0]
 8017d16:	0635      	lsls	r5, r6, #24
 8017d18:	681b      	ldr	r3, [r3, #0]
 8017d1a:	d501      	bpl.n	8017d20 <_printf_i+0x1c4>
 8017d1c:	6019      	str	r1, [r3, #0]
 8017d1e:	e002      	b.n	8017d26 <_printf_i+0x1ca>
 8017d20:	0670      	lsls	r0, r6, #25
 8017d22:	d5fb      	bpl.n	8017d1c <_printf_i+0x1c0>
 8017d24:	8019      	strh	r1, [r3, #0]
 8017d26:	2300      	movs	r3, #0
 8017d28:	6123      	str	r3, [r4, #16]
 8017d2a:	4615      	mov	r5, r2
 8017d2c:	e7bc      	b.n	8017ca8 <_printf_i+0x14c>
 8017d2e:	682b      	ldr	r3, [r5, #0]
 8017d30:	1d1a      	adds	r2, r3, #4
 8017d32:	602a      	str	r2, [r5, #0]
 8017d34:	681d      	ldr	r5, [r3, #0]
 8017d36:	6862      	ldr	r2, [r4, #4]
 8017d38:	2100      	movs	r1, #0
 8017d3a:	4628      	mov	r0, r5
 8017d3c:	f7e8 fb00 	bl	8000340 <memchr>
 8017d40:	b108      	cbz	r0, 8017d46 <_printf_i+0x1ea>
 8017d42:	1b40      	subs	r0, r0, r5
 8017d44:	6060      	str	r0, [r4, #4]
 8017d46:	6863      	ldr	r3, [r4, #4]
 8017d48:	6123      	str	r3, [r4, #16]
 8017d4a:	2300      	movs	r3, #0
 8017d4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017d50:	e7aa      	b.n	8017ca8 <_printf_i+0x14c>
 8017d52:	6923      	ldr	r3, [r4, #16]
 8017d54:	462a      	mov	r2, r5
 8017d56:	4649      	mov	r1, r9
 8017d58:	4640      	mov	r0, r8
 8017d5a:	47d0      	blx	sl
 8017d5c:	3001      	adds	r0, #1
 8017d5e:	d0ad      	beq.n	8017cbc <_printf_i+0x160>
 8017d60:	6823      	ldr	r3, [r4, #0]
 8017d62:	079b      	lsls	r3, r3, #30
 8017d64:	d413      	bmi.n	8017d8e <_printf_i+0x232>
 8017d66:	68e0      	ldr	r0, [r4, #12]
 8017d68:	9b03      	ldr	r3, [sp, #12]
 8017d6a:	4298      	cmp	r0, r3
 8017d6c:	bfb8      	it	lt
 8017d6e:	4618      	movlt	r0, r3
 8017d70:	e7a6      	b.n	8017cc0 <_printf_i+0x164>
 8017d72:	2301      	movs	r3, #1
 8017d74:	4632      	mov	r2, r6
 8017d76:	4649      	mov	r1, r9
 8017d78:	4640      	mov	r0, r8
 8017d7a:	47d0      	blx	sl
 8017d7c:	3001      	adds	r0, #1
 8017d7e:	d09d      	beq.n	8017cbc <_printf_i+0x160>
 8017d80:	3501      	adds	r5, #1
 8017d82:	68e3      	ldr	r3, [r4, #12]
 8017d84:	9903      	ldr	r1, [sp, #12]
 8017d86:	1a5b      	subs	r3, r3, r1
 8017d88:	42ab      	cmp	r3, r5
 8017d8a:	dcf2      	bgt.n	8017d72 <_printf_i+0x216>
 8017d8c:	e7eb      	b.n	8017d66 <_printf_i+0x20a>
 8017d8e:	2500      	movs	r5, #0
 8017d90:	f104 0619 	add.w	r6, r4, #25
 8017d94:	e7f5      	b.n	8017d82 <_printf_i+0x226>
 8017d96:	bf00      	nop
 8017d98:	0801868d 	.word	0x0801868d
 8017d9c:	0801869e 	.word	0x0801869e

08017da0 <_scanf_chars>:
 8017da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017da4:	4615      	mov	r5, r2
 8017da6:	688a      	ldr	r2, [r1, #8]
 8017da8:	4680      	mov	r8, r0
 8017daa:	460c      	mov	r4, r1
 8017dac:	b932      	cbnz	r2, 8017dbc <_scanf_chars+0x1c>
 8017dae:	698a      	ldr	r2, [r1, #24]
 8017db0:	2a00      	cmp	r2, #0
 8017db2:	bf0c      	ite	eq
 8017db4:	2201      	moveq	r2, #1
 8017db6:	f04f 32ff 	movne.w	r2, #4294967295
 8017dba:	608a      	str	r2, [r1, #8]
 8017dbc:	6822      	ldr	r2, [r4, #0]
 8017dbe:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8017e50 <_scanf_chars+0xb0>
 8017dc2:	06d1      	lsls	r1, r2, #27
 8017dc4:	bf5f      	itttt	pl
 8017dc6:	681a      	ldrpl	r2, [r3, #0]
 8017dc8:	1d11      	addpl	r1, r2, #4
 8017dca:	6019      	strpl	r1, [r3, #0]
 8017dcc:	6816      	ldrpl	r6, [r2, #0]
 8017dce:	2700      	movs	r7, #0
 8017dd0:	69a0      	ldr	r0, [r4, #24]
 8017dd2:	b188      	cbz	r0, 8017df8 <_scanf_chars+0x58>
 8017dd4:	2801      	cmp	r0, #1
 8017dd6:	d107      	bne.n	8017de8 <_scanf_chars+0x48>
 8017dd8:	682a      	ldr	r2, [r5, #0]
 8017dda:	7811      	ldrb	r1, [r2, #0]
 8017ddc:	6962      	ldr	r2, [r4, #20]
 8017dde:	5c52      	ldrb	r2, [r2, r1]
 8017de0:	b952      	cbnz	r2, 8017df8 <_scanf_chars+0x58>
 8017de2:	2f00      	cmp	r7, #0
 8017de4:	d031      	beq.n	8017e4a <_scanf_chars+0xaa>
 8017de6:	e022      	b.n	8017e2e <_scanf_chars+0x8e>
 8017de8:	2802      	cmp	r0, #2
 8017dea:	d120      	bne.n	8017e2e <_scanf_chars+0x8e>
 8017dec:	682b      	ldr	r3, [r5, #0]
 8017dee:	781b      	ldrb	r3, [r3, #0]
 8017df0:	f819 3003 	ldrb.w	r3, [r9, r3]
 8017df4:	071b      	lsls	r3, r3, #28
 8017df6:	d41a      	bmi.n	8017e2e <_scanf_chars+0x8e>
 8017df8:	6823      	ldr	r3, [r4, #0]
 8017dfa:	06da      	lsls	r2, r3, #27
 8017dfc:	bf5e      	ittt	pl
 8017dfe:	682b      	ldrpl	r3, [r5, #0]
 8017e00:	781b      	ldrbpl	r3, [r3, #0]
 8017e02:	f806 3b01 	strbpl.w	r3, [r6], #1
 8017e06:	682a      	ldr	r2, [r5, #0]
 8017e08:	686b      	ldr	r3, [r5, #4]
 8017e0a:	3201      	adds	r2, #1
 8017e0c:	602a      	str	r2, [r5, #0]
 8017e0e:	68a2      	ldr	r2, [r4, #8]
 8017e10:	3b01      	subs	r3, #1
 8017e12:	3a01      	subs	r2, #1
 8017e14:	606b      	str	r3, [r5, #4]
 8017e16:	3701      	adds	r7, #1
 8017e18:	60a2      	str	r2, [r4, #8]
 8017e1a:	b142      	cbz	r2, 8017e2e <_scanf_chars+0x8e>
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	dcd7      	bgt.n	8017dd0 <_scanf_chars+0x30>
 8017e20:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017e24:	4629      	mov	r1, r5
 8017e26:	4640      	mov	r0, r8
 8017e28:	4798      	blx	r3
 8017e2a:	2800      	cmp	r0, #0
 8017e2c:	d0d0      	beq.n	8017dd0 <_scanf_chars+0x30>
 8017e2e:	6823      	ldr	r3, [r4, #0]
 8017e30:	f013 0310 	ands.w	r3, r3, #16
 8017e34:	d105      	bne.n	8017e42 <_scanf_chars+0xa2>
 8017e36:	68e2      	ldr	r2, [r4, #12]
 8017e38:	3201      	adds	r2, #1
 8017e3a:	60e2      	str	r2, [r4, #12]
 8017e3c:	69a2      	ldr	r2, [r4, #24]
 8017e3e:	b102      	cbz	r2, 8017e42 <_scanf_chars+0xa2>
 8017e40:	7033      	strb	r3, [r6, #0]
 8017e42:	6923      	ldr	r3, [r4, #16]
 8017e44:	443b      	add	r3, r7
 8017e46:	6123      	str	r3, [r4, #16]
 8017e48:	2000      	movs	r0, #0
 8017e4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017e4e:	bf00      	nop
 8017e50:	080186cb 	.word	0x080186cb

08017e54 <_scanf_i>:
 8017e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e58:	4698      	mov	r8, r3
 8017e5a:	4b74      	ldr	r3, [pc, #464]	; (801802c <_scanf_i+0x1d8>)
 8017e5c:	460c      	mov	r4, r1
 8017e5e:	4682      	mov	sl, r0
 8017e60:	4616      	mov	r6, r2
 8017e62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017e66:	b087      	sub	sp, #28
 8017e68:	ab03      	add	r3, sp, #12
 8017e6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017e6e:	4b70      	ldr	r3, [pc, #448]	; (8018030 <_scanf_i+0x1dc>)
 8017e70:	69a1      	ldr	r1, [r4, #24]
 8017e72:	4a70      	ldr	r2, [pc, #448]	; (8018034 <_scanf_i+0x1e0>)
 8017e74:	2903      	cmp	r1, #3
 8017e76:	bf18      	it	ne
 8017e78:	461a      	movne	r2, r3
 8017e7a:	68a3      	ldr	r3, [r4, #8]
 8017e7c:	9201      	str	r2, [sp, #4]
 8017e7e:	1e5a      	subs	r2, r3, #1
 8017e80:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8017e84:	bf88      	it	hi
 8017e86:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017e8a:	4627      	mov	r7, r4
 8017e8c:	bf82      	ittt	hi
 8017e8e:	eb03 0905 	addhi.w	r9, r3, r5
 8017e92:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017e96:	60a3      	strhi	r3, [r4, #8]
 8017e98:	f857 3b1c 	ldr.w	r3, [r7], #28
 8017e9c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8017ea0:	bf98      	it	ls
 8017ea2:	f04f 0900 	movls.w	r9, #0
 8017ea6:	6023      	str	r3, [r4, #0]
 8017ea8:	463d      	mov	r5, r7
 8017eaa:	f04f 0b00 	mov.w	fp, #0
 8017eae:	6831      	ldr	r1, [r6, #0]
 8017eb0:	ab03      	add	r3, sp, #12
 8017eb2:	7809      	ldrb	r1, [r1, #0]
 8017eb4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8017eb8:	2202      	movs	r2, #2
 8017eba:	f7e8 fa41 	bl	8000340 <memchr>
 8017ebe:	b328      	cbz	r0, 8017f0c <_scanf_i+0xb8>
 8017ec0:	f1bb 0f01 	cmp.w	fp, #1
 8017ec4:	d159      	bne.n	8017f7a <_scanf_i+0x126>
 8017ec6:	6862      	ldr	r2, [r4, #4]
 8017ec8:	b92a      	cbnz	r2, 8017ed6 <_scanf_i+0x82>
 8017eca:	6822      	ldr	r2, [r4, #0]
 8017ecc:	2308      	movs	r3, #8
 8017ece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017ed2:	6063      	str	r3, [r4, #4]
 8017ed4:	6022      	str	r2, [r4, #0]
 8017ed6:	6822      	ldr	r2, [r4, #0]
 8017ed8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8017edc:	6022      	str	r2, [r4, #0]
 8017ede:	68a2      	ldr	r2, [r4, #8]
 8017ee0:	1e51      	subs	r1, r2, #1
 8017ee2:	60a1      	str	r1, [r4, #8]
 8017ee4:	b192      	cbz	r2, 8017f0c <_scanf_i+0xb8>
 8017ee6:	6832      	ldr	r2, [r6, #0]
 8017ee8:	1c51      	adds	r1, r2, #1
 8017eea:	6031      	str	r1, [r6, #0]
 8017eec:	7812      	ldrb	r2, [r2, #0]
 8017eee:	f805 2b01 	strb.w	r2, [r5], #1
 8017ef2:	6872      	ldr	r2, [r6, #4]
 8017ef4:	3a01      	subs	r2, #1
 8017ef6:	2a00      	cmp	r2, #0
 8017ef8:	6072      	str	r2, [r6, #4]
 8017efa:	dc07      	bgt.n	8017f0c <_scanf_i+0xb8>
 8017efc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8017f00:	4631      	mov	r1, r6
 8017f02:	4650      	mov	r0, sl
 8017f04:	4790      	blx	r2
 8017f06:	2800      	cmp	r0, #0
 8017f08:	f040 8085 	bne.w	8018016 <_scanf_i+0x1c2>
 8017f0c:	f10b 0b01 	add.w	fp, fp, #1
 8017f10:	f1bb 0f03 	cmp.w	fp, #3
 8017f14:	d1cb      	bne.n	8017eae <_scanf_i+0x5a>
 8017f16:	6863      	ldr	r3, [r4, #4]
 8017f18:	b90b      	cbnz	r3, 8017f1e <_scanf_i+0xca>
 8017f1a:	230a      	movs	r3, #10
 8017f1c:	6063      	str	r3, [r4, #4]
 8017f1e:	6863      	ldr	r3, [r4, #4]
 8017f20:	4945      	ldr	r1, [pc, #276]	; (8018038 <_scanf_i+0x1e4>)
 8017f22:	6960      	ldr	r0, [r4, #20]
 8017f24:	1ac9      	subs	r1, r1, r3
 8017f26:	f000 f889 	bl	801803c <__sccl>
 8017f2a:	f04f 0b00 	mov.w	fp, #0
 8017f2e:	68a3      	ldr	r3, [r4, #8]
 8017f30:	6822      	ldr	r2, [r4, #0]
 8017f32:	2b00      	cmp	r3, #0
 8017f34:	d03d      	beq.n	8017fb2 <_scanf_i+0x15e>
 8017f36:	6831      	ldr	r1, [r6, #0]
 8017f38:	6960      	ldr	r0, [r4, #20]
 8017f3a:	f891 c000 	ldrb.w	ip, [r1]
 8017f3e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8017f42:	2800      	cmp	r0, #0
 8017f44:	d035      	beq.n	8017fb2 <_scanf_i+0x15e>
 8017f46:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8017f4a:	d124      	bne.n	8017f96 <_scanf_i+0x142>
 8017f4c:	0510      	lsls	r0, r2, #20
 8017f4e:	d522      	bpl.n	8017f96 <_scanf_i+0x142>
 8017f50:	f10b 0b01 	add.w	fp, fp, #1
 8017f54:	f1b9 0f00 	cmp.w	r9, #0
 8017f58:	d003      	beq.n	8017f62 <_scanf_i+0x10e>
 8017f5a:	3301      	adds	r3, #1
 8017f5c:	f109 39ff 	add.w	r9, r9, #4294967295
 8017f60:	60a3      	str	r3, [r4, #8]
 8017f62:	6873      	ldr	r3, [r6, #4]
 8017f64:	3b01      	subs	r3, #1
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	6073      	str	r3, [r6, #4]
 8017f6a:	dd1b      	ble.n	8017fa4 <_scanf_i+0x150>
 8017f6c:	6833      	ldr	r3, [r6, #0]
 8017f6e:	3301      	adds	r3, #1
 8017f70:	6033      	str	r3, [r6, #0]
 8017f72:	68a3      	ldr	r3, [r4, #8]
 8017f74:	3b01      	subs	r3, #1
 8017f76:	60a3      	str	r3, [r4, #8]
 8017f78:	e7d9      	b.n	8017f2e <_scanf_i+0xda>
 8017f7a:	f1bb 0f02 	cmp.w	fp, #2
 8017f7e:	d1ae      	bne.n	8017ede <_scanf_i+0x8a>
 8017f80:	6822      	ldr	r2, [r4, #0]
 8017f82:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8017f86:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8017f8a:	d1bf      	bne.n	8017f0c <_scanf_i+0xb8>
 8017f8c:	2310      	movs	r3, #16
 8017f8e:	6063      	str	r3, [r4, #4]
 8017f90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017f94:	e7a2      	b.n	8017edc <_scanf_i+0x88>
 8017f96:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8017f9a:	6022      	str	r2, [r4, #0]
 8017f9c:	780b      	ldrb	r3, [r1, #0]
 8017f9e:	f805 3b01 	strb.w	r3, [r5], #1
 8017fa2:	e7de      	b.n	8017f62 <_scanf_i+0x10e>
 8017fa4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017fa8:	4631      	mov	r1, r6
 8017faa:	4650      	mov	r0, sl
 8017fac:	4798      	blx	r3
 8017fae:	2800      	cmp	r0, #0
 8017fb0:	d0df      	beq.n	8017f72 <_scanf_i+0x11e>
 8017fb2:	6823      	ldr	r3, [r4, #0]
 8017fb4:	05d9      	lsls	r1, r3, #23
 8017fb6:	d50d      	bpl.n	8017fd4 <_scanf_i+0x180>
 8017fb8:	42bd      	cmp	r5, r7
 8017fba:	d909      	bls.n	8017fd0 <_scanf_i+0x17c>
 8017fbc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017fc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017fc4:	4632      	mov	r2, r6
 8017fc6:	4650      	mov	r0, sl
 8017fc8:	4798      	blx	r3
 8017fca:	f105 39ff 	add.w	r9, r5, #4294967295
 8017fce:	464d      	mov	r5, r9
 8017fd0:	42bd      	cmp	r5, r7
 8017fd2:	d028      	beq.n	8018026 <_scanf_i+0x1d2>
 8017fd4:	6822      	ldr	r2, [r4, #0]
 8017fd6:	f012 0210 	ands.w	r2, r2, #16
 8017fda:	d113      	bne.n	8018004 <_scanf_i+0x1b0>
 8017fdc:	702a      	strb	r2, [r5, #0]
 8017fde:	6863      	ldr	r3, [r4, #4]
 8017fe0:	9e01      	ldr	r6, [sp, #4]
 8017fe2:	4639      	mov	r1, r7
 8017fe4:	4650      	mov	r0, sl
 8017fe6:	47b0      	blx	r6
 8017fe8:	f8d8 3000 	ldr.w	r3, [r8]
 8017fec:	6821      	ldr	r1, [r4, #0]
 8017fee:	1d1a      	adds	r2, r3, #4
 8017ff0:	f8c8 2000 	str.w	r2, [r8]
 8017ff4:	f011 0f20 	tst.w	r1, #32
 8017ff8:	681b      	ldr	r3, [r3, #0]
 8017ffa:	d00f      	beq.n	801801c <_scanf_i+0x1c8>
 8017ffc:	6018      	str	r0, [r3, #0]
 8017ffe:	68e3      	ldr	r3, [r4, #12]
 8018000:	3301      	adds	r3, #1
 8018002:	60e3      	str	r3, [r4, #12]
 8018004:	6923      	ldr	r3, [r4, #16]
 8018006:	1bed      	subs	r5, r5, r7
 8018008:	445d      	add	r5, fp
 801800a:	442b      	add	r3, r5
 801800c:	6123      	str	r3, [r4, #16]
 801800e:	2000      	movs	r0, #0
 8018010:	b007      	add	sp, #28
 8018012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018016:	f04f 0b00 	mov.w	fp, #0
 801801a:	e7ca      	b.n	8017fb2 <_scanf_i+0x15e>
 801801c:	07ca      	lsls	r2, r1, #31
 801801e:	bf4c      	ite	mi
 8018020:	8018      	strhmi	r0, [r3, #0]
 8018022:	6018      	strpl	r0, [r3, #0]
 8018024:	e7eb      	b.n	8017ffe <_scanf_i+0x1aa>
 8018026:	2001      	movs	r0, #1
 8018028:	e7f2      	b.n	8018010 <_scanf_i+0x1bc>
 801802a:	bf00      	nop
 801802c:	080185ac 	.word	0x080185ac
 8018030:	080183c5 	.word	0x080183c5
 8018034:	080182dd 	.word	0x080182dd
 8018038:	080186bf 	.word	0x080186bf

0801803c <__sccl>:
 801803c:	b570      	push	{r4, r5, r6, lr}
 801803e:	780b      	ldrb	r3, [r1, #0]
 8018040:	4604      	mov	r4, r0
 8018042:	2b5e      	cmp	r3, #94	; 0x5e
 8018044:	bf0b      	itete	eq
 8018046:	784b      	ldrbeq	r3, [r1, #1]
 8018048:	1c4a      	addne	r2, r1, #1
 801804a:	1c8a      	addeq	r2, r1, #2
 801804c:	2100      	movne	r1, #0
 801804e:	bf08      	it	eq
 8018050:	2101      	moveq	r1, #1
 8018052:	3801      	subs	r0, #1
 8018054:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8018058:	f800 1f01 	strb.w	r1, [r0, #1]!
 801805c:	42a8      	cmp	r0, r5
 801805e:	d1fb      	bne.n	8018058 <__sccl+0x1c>
 8018060:	b90b      	cbnz	r3, 8018066 <__sccl+0x2a>
 8018062:	1e50      	subs	r0, r2, #1
 8018064:	bd70      	pop	{r4, r5, r6, pc}
 8018066:	f081 0101 	eor.w	r1, r1, #1
 801806a:	54e1      	strb	r1, [r4, r3]
 801806c:	4610      	mov	r0, r2
 801806e:	4602      	mov	r2, r0
 8018070:	f812 5b01 	ldrb.w	r5, [r2], #1
 8018074:	2d2d      	cmp	r5, #45	; 0x2d
 8018076:	d005      	beq.n	8018084 <__sccl+0x48>
 8018078:	2d5d      	cmp	r5, #93	; 0x5d
 801807a:	d016      	beq.n	80180aa <__sccl+0x6e>
 801807c:	2d00      	cmp	r5, #0
 801807e:	d0f1      	beq.n	8018064 <__sccl+0x28>
 8018080:	462b      	mov	r3, r5
 8018082:	e7f2      	b.n	801806a <__sccl+0x2e>
 8018084:	7846      	ldrb	r6, [r0, #1]
 8018086:	2e5d      	cmp	r6, #93	; 0x5d
 8018088:	d0fa      	beq.n	8018080 <__sccl+0x44>
 801808a:	42b3      	cmp	r3, r6
 801808c:	dcf8      	bgt.n	8018080 <__sccl+0x44>
 801808e:	3002      	adds	r0, #2
 8018090:	461a      	mov	r2, r3
 8018092:	3201      	adds	r2, #1
 8018094:	4296      	cmp	r6, r2
 8018096:	54a1      	strb	r1, [r4, r2]
 8018098:	dcfb      	bgt.n	8018092 <__sccl+0x56>
 801809a:	1af2      	subs	r2, r6, r3
 801809c:	3a01      	subs	r2, #1
 801809e:	1c5d      	adds	r5, r3, #1
 80180a0:	42b3      	cmp	r3, r6
 80180a2:	bfa8      	it	ge
 80180a4:	2200      	movge	r2, #0
 80180a6:	18ab      	adds	r3, r5, r2
 80180a8:	e7e1      	b.n	801806e <__sccl+0x32>
 80180aa:	4610      	mov	r0, r2
 80180ac:	e7da      	b.n	8018064 <__sccl+0x28>

080180ae <__submore>:
 80180ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180b2:	460c      	mov	r4, r1
 80180b4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80180b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80180ba:	4299      	cmp	r1, r3
 80180bc:	d11d      	bne.n	80180fa <__submore+0x4c>
 80180be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80180c2:	f7ff f927 	bl	8017314 <_malloc_r>
 80180c6:	b918      	cbnz	r0, 80180d0 <__submore+0x22>
 80180c8:	f04f 30ff 	mov.w	r0, #4294967295
 80180cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80180d4:	63a3      	str	r3, [r4, #56]	; 0x38
 80180d6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80180da:	6360      	str	r0, [r4, #52]	; 0x34
 80180dc:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80180e0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80180e4:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80180e8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80180ec:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80180f0:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80180f4:	6020      	str	r0, [r4, #0]
 80180f6:	2000      	movs	r0, #0
 80180f8:	e7e8      	b.n	80180cc <__submore+0x1e>
 80180fa:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80180fc:	0077      	lsls	r7, r6, #1
 80180fe:	463a      	mov	r2, r7
 8018100:	f000 f83a 	bl	8018178 <_realloc_r>
 8018104:	4605      	mov	r5, r0
 8018106:	2800      	cmp	r0, #0
 8018108:	d0de      	beq.n	80180c8 <__submore+0x1a>
 801810a:	eb00 0806 	add.w	r8, r0, r6
 801810e:	4601      	mov	r1, r0
 8018110:	4632      	mov	r2, r6
 8018112:	4640      	mov	r0, r8
 8018114:	f7ff f884 	bl	8017220 <memcpy>
 8018118:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801811c:	f8c4 8000 	str.w	r8, [r4]
 8018120:	e7e9      	b.n	80180f6 <__submore+0x48>

08018122 <memmove>:
 8018122:	4288      	cmp	r0, r1
 8018124:	b510      	push	{r4, lr}
 8018126:	eb01 0402 	add.w	r4, r1, r2
 801812a:	d902      	bls.n	8018132 <memmove+0x10>
 801812c:	4284      	cmp	r4, r0
 801812e:	4623      	mov	r3, r4
 8018130:	d807      	bhi.n	8018142 <memmove+0x20>
 8018132:	1e43      	subs	r3, r0, #1
 8018134:	42a1      	cmp	r1, r4
 8018136:	d008      	beq.n	801814a <memmove+0x28>
 8018138:	f811 2b01 	ldrb.w	r2, [r1], #1
 801813c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018140:	e7f8      	b.n	8018134 <memmove+0x12>
 8018142:	4402      	add	r2, r0
 8018144:	4601      	mov	r1, r0
 8018146:	428a      	cmp	r2, r1
 8018148:	d100      	bne.n	801814c <memmove+0x2a>
 801814a:	bd10      	pop	{r4, pc}
 801814c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018150:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018154:	e7f7      	b.n	8018146 <memmove+0x24>
	...

08018158 <_sbrk_r>:
 8018158:	b538      	push	{r3, r4, r5, lr}
 801815a:	4d06      	ldr	r5, [pc, #24]	; (8018174 <_sbrk_r+0x1c>)
 801815c:	2300      	movs	r3, #0
 801815e:	4604      	mov	r4, r0
 8018160:	4608      	mov	r0, r1
 8018162:	602b      	str	r3, [r5, #0]
 8018164:	f7eb fb6e 	bl	8003844 <_sbrk>
 8018168:	1c43      	adds	r3, r0, #1
 801816a:	d102      	bne.n	8018172 <_sbrk_r+0x1a>
 801816c:	682b      	ldr	r3, [r5, #0]
 801816e:	b103      	cbz	r3, 8018172 <_sbrk_r+0x1a>
 8018170:	6023      	str	r3, [r4, #0]
 8018172:	bd38      	pop	{r3, r4, r5, pc}
 8018174:	24003334 	.word	0x24003334

08018178 <_realloc_r>:
 8018178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801817c:	4680      	mov	r8, r0
 801817e:	4614      	mov	r4, r2
 8018180:	460e      	mov	r6, r1
 8018182:	b921      	cbnz	r1, 801818e <_realloc_r+0x16>
 8018184:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018188:	4611      	mov	r1, r2
 801818a:	f7ff b8c3 	b.w	8017314 <_malloc_r>
 801818e:	b92a      	cbnz	r2, 801819c <_realloc_r+0x24>
 8018190:	f7ff f854 	bl	801723c <_free_r>
 8018194:	4625      	mov	r5, r4
 8018196:	4628      	mov	r0, r5
 8018198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801819c:	f000 f914 	bl	80183c8 <_malloc_usable_size_r>
 80181a0:	4284      	cmp	r4, r0
 80181a2:	4607      	mov	r7, r0
 80181a4:	d802      	bhi.n	80181ac <_realloc_r+0x34>
 80181a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80181aa:	d812      	bhi.n	80181d2 <_realloc_r+0x5a>
 80181ac:	4621      	mov	r1, r4
 80181ae:	4640      	mov	r0, r8
 80181b0:	f7ff f8b0 	bl	8017314 <_malloc_r>
 80181b4:	4605      	mov	r5, r0
 80181b6:	2800      	cmp	r0, #0
 80181b8:	d0ed      	beq.n	8018196 <_realloc_r+0x1e>
 80181ba:	42bc      	cmp	r4, r7
 80181bc:	4622      	mov	r2, r4
 80181be:	4631      	mov	r1, r6
 80181c0:	bf28      	it	cs
 80181c2:	463a      	movcs	r2, r7
 80181c4:	f7ff f82c 	bl	8017220 <memcpy>
 80181c8:	4631      	mov	r1, r6
 80181ca:	4640      	mov	r0, r8
 80181cc:	f7ff f836 	bl	801723c <_free_r>
 80181d0:	e7e1      	b.n	8018196 <_realloc_r+0x1e>
 80181d2:	4635      	mov	r5, r6
 80181d4:	e7df      	b.n	8018196 <_realloc_r+0x1e>
	...

080181d8 <_strtol_l.constprop.0>:
 80181d8:	2b01      	cmp	r3, #1
 80181da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80181de:	d001      	beq.n	80181e4 <_strtol_l.constprop.0+0xc>
 80181e0:	2b24      	cmp	r3, #36	; 0x24
 80181e2:	d906      	bls.n	80181f2 <_strtol_l.constprop.0+0x1a>
 80181e4:	f7fe ffe8 	bl	80171b8 <__errno>
 80181e8:	2316      	movs	r3, #22
 80181ea:	6003      	str	r3, [r0, #0]
 80181ec:	2000      	movs	r0, #0
 80181ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80181f2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80182d8 <_strtol_l.constprop.0+0x100>
 80181f6:	460d      	mov	r5, r1
 80181f8:	462e      	mov	r6, r5
 80181fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80181fe:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8018202:	f017 0708 	ands.w	r7, r7, #8
 8018206:	d1f7      	bne.n	80181f8 <_strtol_l.constprop.0+0x20>
 8018208:	2c2d      	cmp	r4, #45	; 0x2d
 801820a:	d132      	bne.n	8018272 <_strtol_l.constprop.0+0x9a>
 801820c:	782c      	ldrb	r4, [r5, #0]
 801820e:	2701      	movs	r7, #1
 8018210:	1cb5      	adds	r5, r6, #2
 8018212:	2b00      	cmp	r3, #0
 8018214:	d05b      	beq.n	80182ce <_strtol_l.constprop.0+0xf6>
 8018216:	2b10      	cmp	r3, #16
 8018218:	d109      	bne.n	801822e <_strtol_l.constprop.0+0x56>
 801821a:	2c30      	cmp	r4, #48	; 0x30
 801821c:	d107      	bne.n	801822e <_strtol_l.constprop.0+0x56>
 801821e:	782c      	ldrb	r4, [r5, #0]
 8018220:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8018224:	2c58      	cmp	r4, #88	; 0x58
 8018226:	d14d      	bne.n	80182c4 <_strtol_l.constprop.0+0xec>
 8018228:	786c      	ldrb	r4, [r5, #1]
 801822a:	2310      	movs	r3, #16
 801822c:	3502      	adds	r5, #2
 801822e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8018232:	f108 38ff 	add.w	r8, r8, #4294967295
 8018236:	f04f 0e00 	mov.w	lr, #0
 801823a:	fbb8 f9f3 	udiv	r9, r8, r3
 801823e:	4676      	mov	r6, lr
 8018240:	fb03 8a19 	mls	sl, r3, r9, r8
 8018244:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8018248:	f1bc 0f09 	cmp.w	ip, #9
 801824c:	d816      	bhi.n	801827c <_strtol_l.constprop.0+0xa4>
 801824e:	4664      	mov	r4, ip
 8018250:	42a3      	cmp	r3, r4
 8018252:	dd24      	ble.n	801829e <_strtol_l.constprop.0+0xc6>
 8018254:	f1be 3fff 	cmp.w	lr, #4294967295
 8018258:	d008      	beq.n	801826c <_strtol_l.constprop.0+0x94>
 801825a:	45b1      	cmp	r9, r6
 801825c:	d31c      	bcc.n	8018298 <_strtol_l.constprop.0+0xc0>
 801825e:	d101      	bne.n	8018264 <_strtol_l.constprop.0+0x8c>
 8018260:	45a2      	cmp	sl, r4
 8018262:	db19      	blt.n	8018298 <_strtol_l.constprop.0+0xc0>
 8018264:	fb06 4603 	mla	r6, r6, r3, r4
 8018268:	f04f 0e01 	mov.w	lr, #1
 801826c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018270:	e7e8      	b.n	8018244 <_strtol_l.constprop.0+0x6c>
 8018272:	2c2b      	cmp	r4, #43	; 0x2b
 8018274:	bf04      	itt	eq
 8018276:	782c      	ldrbeq	r4, [r5, #0]
 8018278:	1cb5      	addeq	r5, r6, #2
 801827a:	e7ca      	b.n	8018212 <_strtol_l.constprop.0+0x3a>
 801827c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8018280:	f1bc 0f19 	cmp.w	ip, #25
 8018284:	d801      	bhi.n	801828a <_strtol_l.constprop.0+0xb2>
 8018286:	3c37      	subs	r4, #55	; 0x37
 8018288:	e7e2      	b.n	8018250 <_strtol_l.constprop.0+0x78>
 801828a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801828e:	f1bc 0f19 	cmp.w	ip, #25
 8018292:	d804      	bhi.n	801829e <_strtol_l.constprop.0+0xc6>
 8018294:	3c57      	subs	r4, #87	; 0x57
 8018296:	e7db      	b.n	8018250 <_strtol_l.constprop.0+0x78>
 8018298:	f04f 3eff 	mov.w	lr, #4294967295
 801829c:	e7e6      	b.n	801826c <_strtol_l.constprop.0+0x94>
 801829e:	f1be 3fff 	cmp.w	lr, #4294967295
 80182a2:	d105      	bne.n	80182b0 <_strtol_l.constprop.0+0xd8>
 80182a4:	2322      	movs	r3, #34	; 0x22
 80182a6:	6003      	str	r3, [r0, #0]
 80182a8:	4646      	mov	r6, r8
 80182aa:	b942      	cbnz	r2, 80182be <_strtol_l.constprop.0+0xe6>
 80182ac:	4630      	mov	r0, r6
 80182ae:	e79e      	b.n	80181ee <_strtol_l.constprop.0+0x16>
 80182b0:	b107      	cbz	r7, 80182b4 <_strtol_l.constprop.0+0xdc>
 80182b2:	4276      	negs	r6, r6
 80182b4:	2a00      	cmp	r2, #0
 80182b6:	d0f9      	beq.n	80182ac <_strtol_l.constprop.0+0xd4>
 80182b8:	f1be 0f00 	cmp.w	lr, #0
 80182bc:	d000      	beq.n	80182c0 <_strtol_l.constprop.0+0xe8>
 80182be:	1e69      	subs	r1, r5, #1
 80182c0:	6011      	str	r1, [r2, #0]
 80182c2:	e7f3      	b.n	80182ac <_strtol_l.constprop.0+0xd4>
 80182c4:	2430      	movs	r4, #48	; 0x30
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	d1b1      	bne.n	801822e <_strtol_l.constprop.0+0x56>
 80182ca:	2308      	movs	r3, #8
 80182cc:	e7af      	b.n	801822e <_strtol_l.constprop.0+0x56>
 80182ce:	2c30      	cmp	r4, #48	; 0x30
 80182d0:	d0a5      	beq.n	801821e <_strtol_l.constprop.0+0x46>
 80182d2:	230a      	movs	r3, #10
 80182d4:	e7ab      	b.n	801822e <_strtol_l.constprop.0+0x56>
 80182d6:	bf00      	nop
 80182d8:	080186cb 	.word	0x080186cb

080182dc <_strtol_r>:
 80182dc:	f7ff bf7c 	b.w	80181d8 <_strtol_l.constprop.0>

080182e0 <_strtoul_l.constprop.0>:
 80182e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80182e4:	4f36      	ldr	r7, [pc, #216]	; (80183c0 <_strtoul_l.constprop.0+0xe0>)
 80182e6:	4686      	mov	lr, r0
 80182e8:	460d      	mov	r5, r1
 80182ea:	4628      	mov	r0, r5
 80182ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80182f0:	5d3e      	ldrb	r6, [r7, r4]
 80182f2:	f016 0608 	ands.w	r6, r6, #8
 80182f6:	d1f8      	bne.n	80182ea <_strtoul_l.constprop.0+0xa>
 80182f8:	2c2d      	cmp	r4, #45	; 0x2d
 80182fa:	d130      	bne.n	801835e <_strtoul_l.constprop.0+0x7e>
 80182fc:	782c      	ldrb	r4, [r5, #0]
 80182fe:	2601      	movs	r6, #1
 8018300:	1c85      	adds	r5, r0, #2
 8018302:	2b00      	cmp	r3, #0
 8018304:	d057      	beq.n	80183b6 <_strtoul_l.constprop.0+0xd6>
 8018306:	2b10      	cmp	r3, #16
 8018308:	d109      	bne.n	801831e <_strtoul_l.constprop.0+0x3e>
 801830a:	2c30      	cmp	r4, #48	; 0x30
 801830c:	d107      	bne.n	801831e <_strtoul_l.constprop.0+0x3e>
 801830e:	7828      	ldrb	r0, [r5, #0]
 8018310:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8018314:	2858      	cmp	r0, #88	; 0x58
 8018316:	d149      	bne.n	80183ac <_strtoul_l.constprop.0+0xcc>
 8018318:	786c      	ldrb	r4, [r5, #1]
 801831a:	2310      	movs	r3, #16
 801831c:	3502      	adds	r5, #2
 801831e:	f04f 38ff 	mov.w	r8, #4294967295
 8018322:	2700      	movs	r7, #0
 8018324:	fbb8 f8f3 	udiv	r8, r8, r3
 8018328:	fb03 f908 	mul.w	r9, r3, r8
 801832c:	ea6f 0909 	mvn.w	r9, r9
 8018330:	4638      	mov	r0, r7
 8018332:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8018336:	f1bc 0f09 	cmp.w	ip, #9
 801833a:	d815      	bhi.n	8018368 <_strtoul_l.constprop.0+0x88>
 801833c:	4664      	mov	r4, ip
 801833e:	42a3      	cmp	r3, r4
 8018340:	dd23      	ble.n	801838a <_strtoul_l.constprop.0+0xaa>
 8018342:	f1b7 3fff 	cmp.w	r7, #4294967295
 8018346:	d007      	beq.n	8018358 <_strtoul_l.constprop.0+0x78>
 8018348:	4580      	cmp	r8, r0
 801834a:	d31b      	bcc.n	8018384 <_strtoul_l.constprop.0+0xa4>
 801834c:	d101      	bne.n	8018352 <_strtoul_l.constprop.0+0x72>
 801834e:	45a1      	cmp	r9, r4
 8018350:	db18      	blt.n	8018384 <_strtoul_l.constprop.0+0xa4>
 8018352:	fb00 4003 	mla	r0, r0, r3, r4
 8018356:	2701      	movs	r7, #1
 8018358:	f815 4b01 	ldrb.w	r4, [r5], #1
 801835c:	e7e9      	b.n	8018332 <_strtoul_l.constprop.0+0x52>
 801835e:	2c2b      	cmp	r4, #43	; 0x2b
 8018360:	bf04      	itt	eq
 8018362:	782c      	ldrbeq	r4, [r5, #0]
 8018364:	1c85      	addeq	r5, r0, #2
 8018366:	e7cc      	b.n	8018302 <_strtoul_l.constprop.0+0x22>
 8018368:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801836c:	f1bc 0f19 	cmp.w	ip, #25
 8018370:	d801      	bhi.n	8018376 <_strtoul_l.constprop.0+0x96>
 8018372:	3c37      	subs	r4, #55	; 0x37
 8018374:	e7e3      	b.n	801833e <_strtoul_l.constprop.0+0x5e>
 8018376:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801837a:	f1bc 0f19 	cmp.w	ip, #25
 801837e:	d804      	bhi.n	801838a <_strtoul_l.constprop.0+0xaa>
 8018380:	3c57      	subs	r4, #87	; 0x57
 8018382:	e7dc      	b.n	801833e <_strtoul_l.constprop.0+0x5e>
 8018384:	f04f 37ff 	mov.w	r7, #4294967295
 8018388:	e7e6      	b.n	8018358 <_strtoul_l.constprop.0+0x78>
 801838a:	1c7b      	adds	r3, r7, #1
 801838c:	d106      	bne.n	801839c <_strtoul_l.constprop.0+0xbc>
 801838e:	2322      	movs	r3, #34	; 0x22
 8018390:	f8ce 3000 	str.w	r3, [lr]
 8018394:	4638      	mov	r0, r7
 8018396:	b932      	cbnz	r2, 80183a6 <_strtoul_l.constprop.0+0xc6>
 8018398:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801839c:	b106      	cbz	r6, 80183a0 <_strtoul_l.constprop.0+0xc0>
 801839e:	4240      	negs	r0, r0
 80183a0:	2a00      	cmp	r2, #0
 80183a2:	d0f9      	beq.n	8018398 <_strtoul_l.constprop.0+0xb8>
 80183a4:	b107      	cbz	r7, 80183a8 <_strtoul_l.constprop.0+0xc8>
 80183a6:	1e69      	subs	r1, r5, #1
 80183a8:	6011      	str	r1, [r2, #0]
 80183aa:	e7f5      	b.n	8018398 <_strtoul_l.constprop.0+0xb8>
 80183ac:	2430      	movs	r4, #48	; 0x30
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	d1b5      	bne.n	801831e <_strtoul_l.constprop.0+0x3e>
 80183b2:	2308      	movs	r3, #8
 80183b4:	e7b3      	b.n	801831e <_strtoul_l.constprop.0+0x3e>
 80183b6:	2c30      	cmp	r4, #48	; 0x30
 80183b8:	d0a9      	beq.n	801830e <_strtoul_l.constprop.0+0x2e>
 80183ba:	230a      	movs	r3, #10
 80183bc:	e7af      	b.n	801831e <_strtoul_l.constprop.0+0x3e>
 80183be:	bf00      	nop
 80183c0:	080186cb 	.word	0x080186cb

080183c4 <_strtoul_r>:
 80183c4:	f7ff bf8c 	b.w	80182e0 <_strtoul_l.constprop.0>

080183c8 <_malloc_usable_size_r>:
 80183c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80183cc:	1f18      	subs	r0, r3, #4
 80183ce:	2b00      	cmp	r3, #0
 80183d0:	bfbc      	itt	lt
 80183d2:	580b      	ldrlt	r3, [r1, r0]
 80183d4:	18c0      	addlt	r0, r0, r3
 80183d6:	4770      	bx	lr

080183d8 <_init>:
 80183d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183da:	bf00      	nop
 80183dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80183de:	bc08      	pop	{r3}
 80183e0:	469e      	mov	lr, r3
 80183e2:	4770      	bx	lr

080183e4 <_fini>:
 80183e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183e6:	bf00      	nop
 80183e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80183ea:	bc08      	pop	{r3}
 80183ec:	469e      	mov	lr, r3
 80183ee:	4770      	bx	lr
