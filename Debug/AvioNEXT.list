
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ff48  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bb4  08020218  08020218  00030218  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08020dcc  08020dcc  00030dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08020dd4  08020dd4  00030dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08020dd8  08020dd8  00030dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002c8  24000000  08020ddc  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000337c  240002c8  080210a4  000402c8  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  24003644  080210a4  00043644  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000402c8  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000402f6  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003853f  00000000  00000000  00040339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00006761  00000000  00000000  00078878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002e50  00000000  00000000  0007efe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000023f5  00000000  00000000  00081e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0000bd2d  00000000  00000000  00084225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00040913  00000000  00000000  0008ff52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00180e06  00000000  00000000  000d0865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000df28  00000000  00000000  0025166c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  0025f594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002c8 	.word	0x240002c8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08020200 	.word	0x08020200

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002cc 	.word	0x240002cc
 800030c:	08020200 	.word	0x08020200

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	; 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295
 8000768:	f04f 30ff 	movne.w	r0, #4294967295
 800076c:	f000 b9a8 	b.w	8000ac0 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f83e 	bl	80007f8 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__aeabi_d2lz>:
 8000788:	b508      	push	{r3, lr}
 800078a:	4602      	mov	r2, r0
 800078c:	460b      	mov	r3, r1
 800078e:	ec43 2b17 	vmov	d7, r2, r3
 8000792:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079a:	d403      	bmi.n	80007a4 <__aeabi_d2lz+0x1c>
 800079c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007a0:	f000 b80a 	b.w	80007b8 <__aeabi_d2ulz>
 80007a4:	eeb1 7b47 	vneg.f64	d7, d7
 80007a8:	ec51 0b17 	vmov	r0, r1, d7
 80007ac:	f000 f804 	bl	80007b8 <__aeabi_d2ulz>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	bd08      	pop	{r3, pc}

080007b8 <__aeabi_d2ulz>:
 80007b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007e8 <__aeabi_d2ulz+0x30>
 80007bc:	ec41 0b17 	vmov	d7, r0, r1
 80007c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007f0 <__aeabi_d2ulz+0x38>
 80007c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007d8:	ee16 1a10 	vmov	r1, s12
 80007dc:	ee17 0a90 	vmov	r0, s15
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	f3af 8000 	nop.w
 80007e8:	00000000 	.word	0x00000000
 80007ec:	3df00000 	.word	0x3df00000
 80007f0:	00000000 	.word	0x00000000
 80007f4:	41f00000 	.word	0x41f00000

080007f8 <__udivmoddi4>:
 80007f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007fc:	9e08      	ldr	r6, [sp, #32]
 80007fe:	460d      	mov	r5, r1
 8000800:	4604      	mov	r4, r0
 8000802:	460f      	mov	r7, r1
 8000804:	2b00      	cmp	r3, #0
 8000806:	d14a      	bne.n	800089e <__udivmoddi4+0xa6>
 8000808:	428a      	cmp	r2, r1
 800080a:	4694      	mov	ip, r2
 800080c:	d965      	bls.n	80008da <__udivmoddi4+0xe2>
 800080e:	fab2 f382 	clz	r3, r2
 8000812:	b143      	cbz	r3, 8000826 <__udivmoddi4+0x2e>
 8000814:	fa02 fc03 	lsl.w	ip, r2, r3
 8000818:	f1c3 0220 	rsb	r2, r3, #32
 800081c:	409f      	lsls	r7, r3
 800081e:	fa20 f202 	lsr.w	r2, r0, r2
 8000822:	4317      	orrs	r7, r2
 8000824:	409c      	lsls	r4, r3
 8000826:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800082a:	fa1f f58c 	uxth.w	r5, ip
 800082e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000832:	0c22      	lsrs	r2, r4, #16
 8000834:	fb0e 7711 	mls	r7, lr, r1, r7
 8000838:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800083c:	fb01 f005 	mul.w	r0, r1, r5
 8000840:	4290      	cmp	r0, r2
 8000842:	d90a      	bls.n	800085a <__udivmoddi4+0x62>
 8000844:	eb1c 0202 	adds.w	r2, ip, r2
 8000848:	f101 37ff 	add.w	r7, r1, #4294967295
 800084c:	f080 811c 	bcs.w	8000a88 <__udivmoddi4+0x290>
 8000850:	4290      	cmp	r0, r2
 8000852:	f240 8119 	bls.w	8000a88 <__udivmoddi4+0x290>
 8000856:	3902      	subs	r1, #2
 8000858:	4462      	add	r2, ip
 800085a:	1a12      	subs	r2, r2, r0
 800085c:	b2a4      	uxth	r4, r4
 800085e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000862:	fb0e 2210 	mls	r2, lr, r0, r2
 8000866:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800086a:	fb00 f505 	mul.w	r5, r0, r5
 800086e:	42a5      	cmp	r5, r4
 8000870:	d90a      	bls.n	8000888 <__udivmoddi4+0x90>
 8000872:	eb1c 0404 	adds.w	r4, ip, r4
 8000876:	f100 32ff 	add.w	r2, r0, #4294967295
 800087a:	f080 8107 	bcs.w	8000a8c <__udivmoddi4+0x294>
 800087e:	42a5      	cmp	r5, r4
 8000880:	f240 8104 	bls.w	8000a8c <__udivmoddi4+0x294>
 8000884:	4464      	add	r4, ip
 8000886:	3802      	subs	r0, #2
 8000888:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800088c:	1b64      	subs	r4, r4, r5
 800088e:	2100      	movs	r1, #0
 8000890:	b11e      	cbz	r6, 800089a <__udivmoddi4+0xa2>
 8000892:	40dc      	lsrs	r4, r3
 8000894:	2300      	movs	r3, #0
 8000896:	e9c6 4300 	strd	r4, r3, [r6]
 800089a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800089e:	428b      	cmp	r3, r1
 80008a0:	d908      	bls.n	80008b4 <__udivmoddi4+0xbc>
 80008a2:	2e00      	cmp	r6, #0
 80008a4:	f000 80ed 	beq.w	8000a82 <__udivmoddi4+0x28a>
 80008a8:	2100      	movs	r1, #0
 80008aa:	e9c6 0500 	strd	r0, r5, [r6]
 80008ae:	4608      	mov	r0, r1
 80008b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008b4:	fab3 f183 	clz	r1, r3
 80008b8:	2900      	cmp	r1, #0
 80008ba:	d149      	bne.n	8000950 <__udivmoddi4+0x158>
 80008bc:	42ab      	cmp	r3, r5
 80008be:	d302      	bcc.n	80008c6 <__udivmoddi4+0xce>
 80008c0:	4282      	cmp	r2, r0
 80008c2:	f200 80f8 	bhi.w	8000ab6 <__udivmoddi4+0x2be>
 80008c6:	1a84      	subs	r4, r0, r2
 80008c8:	eb65 0203 	sbc.w	r2, r5, r3
 80008cc:	2001      	movs	r0, #1
 80008ce:	4617      	mov	r7, r2
 80008d0:	2e00      	cmp	r6, #0
 80008d2:	d0e2      	beq.n	800089a <__udivmoddi4+0xa2>
 80008d4:	e9c6 4700 	strd	r4, r7, [r6]
 80008d8:	e7df      	b.n	800089a <__udivmoddi4+0xa2>
 80008da:	b902      	cbnz	r2, 80008de <__udivmoddi4+0xe6>
 80008dc:	deff      	udf	#255	; 0xff
 80008de:	fab2 f382 	clz	r3, r2
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	f040 8090 	bne.w	8000a08 <__udivmoddi4+0x210>
 80008e8:	1a8a      	subs	r2, r1, r2
 80008ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008ee:	fa1f fe8c 	uxth.w	lr, ip
 80008f2:	2101      	movs	r1, #1
 80008f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008f8:	fb07 2015 	mls	r0, r7, r5, r2
 80008fc:	0c22      	lsrs	r2, r4, #16
 80008fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000902:	fb0e f005 	mul.w	r0, lr, r5
 8000906:	4290      	cmp	r0, r2
 8000908:	d908      	bls.n	800091c <__udivmoddi4+0x124>
 800090a:	eb1c 0202 	adds.w	r2, ip, r2
 800090e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000912:	d202      	bcs.n	800091a <__udivmoddi4+0x122>
 8000914:	4290      	cmp	r0, r2
 8000916:	f200 80cb 	bhi.w	8000ab0 <__udivmoddi4+0x2b8>
 800091a:	4645      	mov	r5, r8
 800091c:	1a12      	subs	r2, r2, r0
 800091e:	b2a4      	uxth	r4, r4
 8000920:	fbb2 f0f7 	udiv	r0, r2, r7
 8000924:	fb07 2210 	mls	r2, r7, r0, r2
 8000928:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800092c:	fb0e fe00 	mul.w	lr, lr, r0
 8000930:	45a6      	cmp	lr, r4
 8000932:	d908      	bls.n	8000946 <__udivmoddi4+0x14e>
 8000934:	eb1c 0404 	adds.w	r4, ip, r4
 8000938:	f100 32ff 	add.w	r2, r0, #4294967295
 800093c:	d202      	bcs.n	8000944 <__udivmoddi4+0x14c>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f200 80bb 	bhi.w	8000aba <__udivmoddi4+0x2c2>
 8000944:	4610      	mov	r0, r2
 8000946:	eba4 040e 	sub.w	r4, r4, lr
 800094a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800094e:	e79f      	b.n	8000890 <__udivmoddi4+0x98>
 8000950:	f1c1 0720 	rsb	r7, r1, #32
 8000954:	408b      	lsls	r3, r1
 8000956:	fa22 fc07 	lsr.w	ip, r2, r7
 800095a:	ea4c 0c03 	orr.w	ip, ip, r3
 800095e:	fa05 f401 	lsl.w	r4, r5, r1
 8000962:	fa20 f307 	lsr.w	r3, r0, r7
 8000966:	40fd      	lsrs	r5, r7
 8000968:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800096c:	4323      	orrs	r3, r4
 800096e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000972:	fa1f fe8c 	uxth.w	lr, ip
 8000976:	fb09 5518 	mls	r5, r9, r8, r5
 800097a:	0c1c      	lsrs	r4, r3, #16
 800097c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000980:	fb08 f50e 	mul.w	r5, r8, lr
 8000984:	42a5      	cmp	r5, r4
 8000986:	fa02 f201 	lsl.w	r2, r2, r1
 800098a:	fa00 f001 	lsl.w	r0, r0, r1
 800098e:	d90b      	bls.n	80009a8 <__udivmoddi4+0x1b0>
 8000990:	eb1c 0404 	adds.w	r4, ip, r4
 8000994:	f108 3aff 	add.w	sl, r8, #4294967295
 8000998:	f080 8088 	bcs.w	8000aac <__udivmoddi4+0x2b4>
 800099c:	42a5      	cmp	r5, r4
 800099e:	f240 8085 	bls.w	8000aac <__udivmoddi4+0x2b4>
 80009a2:	f1a8 0802 	sub.w	r8, r8, #2
 80009a6:	4464      	add	r4, ip
 80009a8:	1b64      	subs	r4, r4, r5
 80009aa:	b29d      	uxth	r5, r3
 80009ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80009b0:	fb09 4413 	mls	r4, r9, r3, r4
 80009b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80009bc:	45a6      	cmp	lr, r4
 80009be:	d908      	bls.n	80009d2 <__udivmoddi4+0x1da>
 80009c0:	eb1c 0404 	adds.w	r4, ip, r4
 80009c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80009c8:	d26c      	bcs.n	8000aa4 <__udivmoddi4+0x2ac>
 80009ca:	45a6      	cmp	lr, r4
 80009cc:	d96a      	bls.n	8000aa4 <__udivmoddi4+0x2ac>
 80009ce:	3b02      	subs	r3, #2
 80009d0:	4464      	add	r4, ip
 80009d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009d6:	fba3 9502 	umull	r9, r5, r3, r2
 80009da:	eba4 040e 	sub.w	r4, r4, lr
 80009de:	42ac      	cmp	r4, r5
 80009e0:	46c8      	mov	r8, r9
 80009e2:	46ae      	mov	lr, r5
 80009e4:	d356      	bcc.n	8000a94 <__udivmoddi4+0x29c>
 80009e6:	d053      	beq.n	8000a90 <__udivmoddi4+0x298>
 80009e8:	b156      	cbz	r6, 8000a00 <__udivmoddi4+0x208>
 80009ea:	ebb0 0208 	subs.w	r2, r0, r8
 80009ee:	eb64 040e 	sbc.w	r4, r4, lr
 80009f2:	fa04 f707 	lsl.w	r7, r4, r7
 80009f6:	40ca      	lsrs	r2, r1
 80009f8:	40cc      	lsrs	r4, r1
 80009fa:	4317      	orrs	r7, r2
 80009fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000a00:	4618      	mov	r0, r3
 8000a02:	2100      	movs	r1, #0
 8000a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a08:	f1c3 0120 	rsb	r1, r3, #32
 8000a0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a10:	fa20 f201 	lsr.w	r2, r0, r1
 8000a14:	fa25 f101 	lsr.w	r1, r5, r1
 8000a18:	409d      	lsls	r5, r3
 8000a1a:	432a      	orrs	r2, r5
 8000a1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a20:	fa1f fe8c 	uxth.w	lr, ip
 8000a24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a28:	fb07 1510 	mls	r5, r7, r0, r1
 8000a2c:	0c11      	lsrs	r1, r2, #16
 8000a2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a32:	fb00 f50e 	mul.w	r5, r0, lr
 8000a36:	428d      	cmp	r5, r1
 8000a38:	fa04 f403 	lsl.w	r4, r4, r3
 8000a3c:	d908      	bls.n	8000a50 <__udivmoddi4+0x258>
 8000a3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000a42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a46:	d22f      	bcs.n	8000aa8 <__udivmoddi4+0x2b0>
 8000a48:	428d      	cmp	r5, r1
 8000a4a:	d92d      	bls.n	8000aa8 <__udivmoddi4+0x2b0>
 8000a4c:	3802      	subs	r0, #2
 8000a4e:	4461      	add	r1, ip
 8000a50:	1b49      	subs	r1, r1, r5
 8000a52:	b292      	uxth	r2, r2
 8000a54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a58:	fb07 1115 	mls	r1, r7, r5, r1
 8000a5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a60:	fb05 f10e 	mul.w	r1, r5, lr
 8000a64:	4291      	cmp	r1, r2
 8000a66:	d908      	bls.n	8000a7a <__udivmoddi4+0x282>
 8000a68:	eb1c 0202 	adds.w	r2, ip, r2
 8000a6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a70:	d216      	bcs.n	8000aa0 <__udivmoddi4+0x2a8>
 8000a72:	4291      	cmp	r1, r2
 8000a74:	d914      	bls.n	8000aa0 <__udivmoddi4+0x2a8>
 8000a76:	3d02      	subs	r5, #2
 8000a78:	4462      	add	r2, ip
 8000a7a:	1a52      	subs	r2, r2, r1
 8000a7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a80:	e738      	b.n	80008f4 <__udivmoddi4+0xfc>
 8000a82:	4631      	mov	r1, r6
 8000a84:	4630      	mov	r0, r6
 8000a86:	e708      	b.n	800089a <__udivmoddi4+0xa2>
 8000a88:	4639      	mov	r1, r7
 8000a8a:	e6e6      	b.n	800085a <__udivmoddi4+0x62>
 8000a8c:	4610      	mov	r0, r2
 8000a8e:	e6fb      	b.n	8000888 <__udivmoddi4+0x90>
 8000a90:	4548      	cmp	r0, r9
 8000a92:	d2a9      	bcs.n	80009e8 <__udivmoddi4+0x1f0>
 8000a94:	ebb9 0802 	subs.w	r8, r9, r2
 8000a98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a9c:	3b01      	subs	r3, #1
 8000a9e:	e7a3      	b.n	80009e8 <__udivmoddi4+0x1f0>
 8000aa0:	4645      	mov	r5, r8
 8000aa2:	e7ea      	b.n	8000a7a <__udivmoddi4+0x282>
 8000aa4:	462b      	mov	r3, r5
 8000aa6:	e794      	b.n	80009d2 <__udivmoddi4+0x1da>
 8000aa8:	4640      	mov	r0, r8
 8000aaa:	e7d1      	b.n	8000a50 <__udivmoddi4+0x258>
 8000aac:	46d0      	mov	r8, sl
 8000aae:	e77b      	b.n	80009a8 <__udivmoddi4+0x1b0>
 8000ab0:	3d02      	subs	r5, #2
 8000ab2:	4462      	add	r2, ip
 8000ab4:	e732      	b.n	800091c <__udivmoddi4+0x124>
 8000ab6:	4608      	mov	r0, r1
 8000ab8:	e70a      	b.n	80008d0 <__udivmoddi4+0xd8>
 8000aba:	4464      	add	r4, ip
 8000abc:	3802      	subs	r0, #2
 8000abe:	e742      	b.n	8000946 <__udivmoddi4+0x14e>

08000ac0 <__aeabi_idiv0>:
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <setServo>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;

void setServo(int servoNum, float angle) {
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal = (int) (3000 + (4000 * (angle / 100)));
 8000ad0:	ed97 7a00 	vldr	s14, [r7]
 8000ad4:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000b44 <setServo+0x80>
 8000ad8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000adc:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000b48 <setServo+0x84>
 8000ae0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ae4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000b4c <setServo+0x88>
 8000ae8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000aec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000af0:	ee17 3a90 	vmov	r3, s15
 8000af4:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	3b01      	subs	r3, #1
 8000afa:	2b03      	cmp	r3, #3
 8000afc:	d81a      	bhi.n	8000b34 <setServo+0x70>
 8000afe:	a201      	add	r2, pc, #4	; (adr r2, 8000b04 <setServo+0x40>)
 8000b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b04:	08000b15 	.word	0x08000b15
 8000b08:	08000b1d 	.word	0x08000b1d
 8000b0c:	08000b25 	.word	0x08000b25
 8000b10:	08000b2d 	.word	0x08000b2d
	case 1:
		TIM4->CCR4 = timerVal;
 8000b14:	4a0e      	ldr	r2, [pc, #56]	; (8000b50 <setServo+0x8c>)
 8000b16:	89fb      	ldrh	r3, [r7, #14]
 8000b18:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8000b1a:	e00c      	b.n	8000b36 <setServo+0x72>
	case 2:
		TIM4->CCR3 = timerVal;
 8000b1c:	4a0c      	ldr	r2, [pc, #48]	; (8000b50 <setServo+0x8c>)
 8000b1e:	89fb      	ldrh	r3, [r7, #14]
 8000b20:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8000b22:	e008      	b.n	8000b36 <setServo+0x72>
	case 3:
		TIM4->CCR2 = timerVal;
 8000b24:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <setServo+0x8c>)
 8000b26:	89fb      	ldrh	r3, [r7, #14]
 8000b28:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8000b2a:	e004      	b.n	8000b36 <setServo+0x72>
	case 4:
		TIM4->CCR1 = timerVal;
 8000b2c:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <setServo+0x8c>)
 8000b2e:	89fb      	ldrh	r3, [r7, #14]
 8000b30:	6353      	str	r3, [r2, #52]	; 0x34
		break;
 8000b32:	e000      	b.n	8000b36 <setServo+0x72>

	default:
		break;
 8000b34:	bf00      	nop
	}
}
 8000b36:	bf00      	nop
 8000b38:	3714      	adds	r7, #20
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	42c80000 	.word	0x42c80000
 8000b48:	457a0000 	.word	0x457a0000
 8000b4c:	453b8000 	.word	0x453b8000
 8000b50:	40000800 	.word	0x40000800

08000b54 <setLEDs>:

void setLEDs(void) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08e      	sub	sp, #56	; 0x38
 8000b58:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8000b5e:	e181      	b.n	8000e64 <setLEDs+0x310>
			i++) {
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 8000b60:	4aa1      	ldr	r2, [pc, #644]	; (8000de8 <setLEDs+0x294>)
 8000b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000b68:	2b03      	cmp	r3, #3
 8000b6a:	f200 8177 	bhi.w	8000e5c <setLEDs+0x308>
 8000b6e:	a201      	add	r2, pc, #4	; (adr r2, 8000b74 <setLEDs+0x20>)
 8000b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b74:	08000b85 	.word	0x08000b85
 8000b78:	08000c35 	.word	0x08000c35
 8000b7c:	08000ce5 	.word	0x08000ce5
 8000b80:	08000d95 	.word	0x08000d95
		case 0:
			for (int j = 0; j < 3; j++) {
 8000b84:	2300      	movs	r3, #0
 8000b86:	633b      	str	r3, [r7, #48]	; 0x30
 8000b88:	e042      	b.n	8000c10 <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b8e:	e039      	b.n	8000c04 <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000b90:	4996      	ldr	r1, [pc, #600]	; (8000dec <setLEDs+0x298>)
 8000b92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b94:	4613      	mov	r3, r2
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	4413      	add	r3, r2
 8000b9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b9c:	4413      	add	r3, r2
 8000b9e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ba2:	2180      	movs	r1, #128	; 0x80
 8000ba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ba6:	fa41 f202 	asr.w	r2, r1, r2
 8000baa:	4013      	ands	r3, r2
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d013      	beq.n	8000bd8 <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bb2:	00da      	lsls	r2, r3, #3
 8000bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bb6:	18d1      	adds	r1, r2, r3
 8000bb8:	4a8b      	ldr	r2, [pc, #556]	; (8000de8 <setLEDs+0x294>)
 8000bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bbc:	00db      	lsls	r3, r3, #3
 8000bbe:	4413      	add	r3, r2
 8000bc0:	685a      	ldr	r2, [r3, #4]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	4413      	add	r3, r2
 8000bc8:	00db      	lsls	r3, r3, #3
 8000bca:	440b      	add	r3, r1
								+ 8] = 60;
 8000bcc:	3308      	adds	r3, #8
 8000bce:	4a88      	ldr	r2, [pc, #544]	; (8000df0 <setLEDs+0x29c>)
 8000bd0:	213c      	movs	r1, #60	; 0x3c
 8000bd2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000bd6:	e012      	b.n	8000bfe <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bda:	00da      	lsls	r2, r3, #3
 8000bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bde:	18d1      	adds	r1, r2, r3
 8000be0:	4a81      	ldr	r2, [pc, #516]	; (8000de8 <setLEDs+0x294>)
 8000be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	4413      	add	r3, r2
 8000be8:	685a      	ldr	r2, [r3, #4]
 8000bea:	4613      	mov	r3, r2
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	4413      	add	r3, r2
 8000bf0:	00db      	lsls	r3, r3, #3
 8000bf2:	440b      	add	r3, r1
								+ 8] = 30;
 8000bf4:	3308      	adds	r3, #8
 8000bf6:	4a7e      	ldr	r2, [pc, #504]	; (8000df0 <setLEDs+0x29c>)
 8000bf8:	211e      	movs	r1, #30
 8000bfa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c00:	3301      	adds	r3, #1
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c06:	2b07      	cmp	r3, #7
 8000c08:	ddc2      	ble.n	8000b90 <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 8000c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	633b      	str	r3, [r7, #48]	; 0x30
 8000c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	ddb9      	ble.n	8000b8a <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58;
 8000c16:	2380      	movs	r3, #128	; 0x80
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c1a:	e007      	b.n	8000c2c <setLEDs+0xd8>
					i++) {
				LED_PWM_Data_0[i] = 0;
 8000c1c:	4a74      	ldr	r2, [pc, #464]	; (8000df0 <setLEDs+0x29c>)
 8000c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c20:	2100      	movs	r1, #0
 8000c22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c28:	3301      	adds	r3, #1
 8000c2a:	62bb      	str	r3, [r7, #40]	; 0x28
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58;
 8000c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c2e:	2bb1      	cmp	r3, #177	; 0xb1
 8000c30:	ddf4      	ble.n	8000c1c <setLEDs+0xc8>
			}
			break;
 8000c32:	e114      	b.n	8000e5e <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 8000c34:	2300      	movs	r3, #0
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
 8000c38:	e042      	b.n	8000cc0 <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	623b      	str	r3, [r7, #32]
 8000c3e:	e039      	b.n	8000cb4 <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000c40:	496a      	ldr	r1, [pc, #424]	; (8000dec <setLEDs+0x298>)
 8000c42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c44:	4613      	mov	r3, r2
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	4413      	add	r3, r2
 8000c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c4c:	4413      	add	r3, r2
 8000c4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c52:	2180      	movs	r1, #128	; 0x80
 8000c54:	6a3a      	ldr	r2, [r7, #32]
 8000c56:	fa41 f202 	asr.w	r2, r1, r2
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d013      	beq.n	8000c88 <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c62:	00da      	lsls	r2, r3, #3
 8000c64:	6a3b      	ldr	r3, [r7, #32]
 8000c66:	18d1      	adds	r1, r2, r3
 8000c68:	4a5f      	ldr	r2, [pc, #380]	; (8000de8 <setLEDs+0x294>)
 8000c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c6c:	00db      	lsls	r3, r3, #3
 8000c6e:	4413      	add	r3, r2
 8000c70:	685a      	ldr	r2, [r3, #4]
 8000c72:	4613      	mov	r3, r2
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	4413      	add	r3, r2
 8000c78:	00db      	lsls	r3, r3, #3
 8000c7a:	440b      	add	r3, r1
								+ 8] = 60;
 8000c7c:	3308      	adds	r3, #8
 8000c7e:	4a5d      	ldr	r2, [pc, #372]	; (8000df4 <setLEDs+0x2a0>)
 8000c80:	213c      	movs	r1, #60	; 0x3c
 8000c82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000c86:	e012      	b.n	8000cae <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8a:	00da      	lsls	r2, r3, #3
 8000c8c:	6a3b      	ldr	r3, [r7, #32]
 8000c8e:	18d1      	adds	r1, r2, r3
 8000c90:	4a55      	ldr	r2, [pc, #340]	; (8000de8 <setLEDs+0x294>)
 8000c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c94:	00db      	lsls	r3, r3, #3
 8000c96:	4413      	add	r3, r2
 8000c98:	685a      	ldr	r2, [r3, #4]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	4413      	add	r3, r2
 8000ca0:	00db      	lsls	r3, r3, #3
 8000ca2:	440b      	add	r3, r1
								+ 8] = 30;
 8000ca4:	3308      	adds	r3, #8
 8000ca6:	4a53      	ldr	r2, [pc, #332]	; (8000df4 <setLEDs+0x2a0>)
 8000ca8:	211e      	movs	r1, #30
 8000caa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000cae:	6a3b      	ldr	r3, [r7, #32]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	623b      	str	r3, [r7, #32]
 8000cb4:	6a3b      	ldr	r3, [r7, #32]
 8000cb6:	2b07      	cmp	r3, #7
 8000cb8:	ddc2      	ble.n	8000c40 <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 8000cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8000cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	ddb9      	ble.n	8000c3a <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58;
 8000cc6:	2380      	movs	r3, #128	; 0x80
 8000cc8:	61fb      	str	r3, [r7, #28]
 8000cca:	e007      	b.n	8000cdc <setLEDs+0x188>
					i++) {
				LED_PWM_Data_1[i] = 0;
 8000ccc:	4a49      	ldr	r2, [pc, #292]	; (8000df4 <setLEDs+0x2a0>)
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	61fb      	str	r3, [r7, #28]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58;
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	2bb1      	cmp	r3, #177	; 0xb1
 8000ce0:	ddf4      	ble.n	8000ccc <setLEDs+0x178>
			}
			break;
 8000ce2:	e0bc      	b.n	8000e5e <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61bb      	str	r3, [r7, #24]
 8000ce8:	e042      	b.n	8000d70 <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	e039      	b.n	8000d64 <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000cf0:	493e      	ldr	r1, [pc, #248]	; (8000dec <setLEDs+0x298>)
 8000cf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	4413      	add	r3, r2
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d02:	2180      	movs	r1, #128	; 0x80
 8000d04:	697a      	ldr	r2, [r7, #20]
 8000d06:	fa41 f202 	asr.w	r2, r1, r2
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d013      	beq.n	8000d38 <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	00da      	lsls	r2, r3, #3
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	18d1      	adds	r1, r2, r3
 8000d18:	4a33      	ldr	r2, [pc, #204]	; (8000de8 <setLEDs+0x294>)
 8000d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d1c:	00db      	lsls	r3, r3, #3
 8000d1e:	4413      	add	r3, r2
 8000d20:	685a      	ldr	r2, [r3, #4]
 8000d22:	4613      	mov	r3, r2
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	4413      	add	r3, r2
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	440b      	add	r3, r1
								+ 8] = 60;
 8000d2c:	3308      	adds	r3, #8
 8000d2e:	4a32      	ldr	r2, [pc, #200]	; (8000df8 <setLEDs+0x2a4>)
 8000d30:	213c      	movs	r1, #60	; 0x3c
 8000d32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000d36:	e012      	b.n	8000d5e <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	00da      	lsls	r2, r3, #3
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	18d1      	adds	r1, r2, r3
 8000d40:	4a29      	ldr	r2, [pc, #164]	; (8000de8 <setLEDs+0x294>)
 8000d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	4413      	add	r3, r2
 8000d48:	685a      	ldr	r2, [r3, #4]
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	4413      	add	r3, r2
 8000d50:	00db      	lsls	r3, r3, #3
 8000d52:	440b      	add	r3, r1
								+ 8] = 30;
 8000d54:	3308      	adds	r3, #8
 8000d56:	4a28      	ldr	r2, [pc, #160]	; (8000df8 <setLEDs+0x2a4>)
 8000d58:	211e      	movs	r1, #30
 8000d5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	3301      	adds	r3, #1
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	2b07      	cmp	r3, #7
 8000d68:	ddc2      	ble.n	8000cf0 <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	61bb      	str	r3, [r7, #24]
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	ddb9      	ble.n	8000cea <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58;
 8000d76:	2338      	movs	r3, #56	; 0x38
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	e007      	b.n	8000d8c <setLEDs+0x238>
					i++) {
				LED_PWM_Data_2[i] = 0;
 8000d7c:	4a1e      	ldr	r2, [pc, #120]	; (8000df8 <setLEDs+0x2a4>)
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	2100      	movs	r1, #0
 8000d82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	613b      	str	r3, [r7, #16]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58;
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	2b69      	cmp	r3, #105	; 0x69
 8000d90:	ddf4      	ble.n	8000d7c <setLEDs+0x228>
			}
			break;
 8000d92:	e064      	b.n	8000e5e <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 8000d94:	2300      	movs	r3, #0
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	e04e      	b.n	8000e38 <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	e045      	b.n	8000e2c <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000da0:	4912      	ldr	r1, [pc, #72]	; (8000dec <setLEDs+0x298>)
 8000da2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000da4:	4613      	mov	r3, r2
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	4413      	add	r3, r2
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	4413      	add	r3, r2
 8000dae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000db2:	2180      	movs	r1, #128	; 0x80
 8000db4:	68ba      	ldr	r2, [r7, #8]
 8000db6:	fa41 f202 	asr.w	r2, r1, r2
 8000dba:	4013      	ands	r3, r2
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d01f      	beq.n	8000e00 <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	00da      	lsls	r2, r3, #3
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	18d1      	adds	r1, r2, r3
 8000dc8:	4a07      	ldr	r2, [pc, #28]	; (8000de8 <setLEDs+0x294>)
 8000dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dcc:	00db      	lsls	r3, r3, #3
 8000dce:	4413      	add	r3, r2
 8000dd0:	685a      	ldr	r2, [r3, #4]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	4413      	add	r3, r2
 8000dd8:	00db      	lsls	r3, r3, #3
 8000dda:	440b      	add	r3, r1
								+ 8] = 60;
 8000ddc:	3308      	adds	r3, #8
 8000dde:	4a07      	ldr	r2, [pc, #28]	; (8000dfc <setLEDs+0x2a8>)
 8000de0:	213c      	movs	r1, #60	; 0x3c
 8000de2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000de6:	e01e      	b.n	8000e26 <setLEDs+0x2d2>
 8000de8:	08020484 	.word	0x08020484
 8000dec:	24000bc4 	.word	0x24000bc4
 8000df0:	240002e4 	.word	0x240002e4
 8000df4:	240005ac 	.word	0x240005ac
 8000df8:	24000874 	.word	0x24000874
 8000dfc:	24000a1c 	.word	0x24000a1c
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	00da      	lsls	r2, r3, #3
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	18d1      	adds	r1, r2, r3
 8000e08:	4a26      	ldr	r2, [pc, #152]	; (8000ea4 <setLEDs+0x350>)
 8000e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e0c:	00db      	lsls	r3, r3, #3
 8000e0e:	4413      	add	r3, r2
 8000e10:	685a      	ldr	r2, [r3, #4]
 8000e12:	4613      	mov	r3, r2
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	4413      	add	r3, r2
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	440b      	add	r3, r1
								+ 8] = 30;
 8000e1c:	3308      	adds	r3, #8
 8000e1e:	4a22      	ldr	r2, [pc, #136]	; (8000ea8 <setLEDs+0x354>)
 8000e20:	211e      	movs	r1, #30
 8000e22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	2b07      	cmp	r3, #7
 8000e30:	ddb6      	ble.n	8000da0 <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	3301      	adds	r3, #1
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	ddad      	ble.n	8000d9a <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58;
 8000e3e:	2338      	movs	r3, #56	; 0x38
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	e007      	b.n	8000e54 <setLEDs+0x300>
					i++) {
				LED_PWM_Data_3[i] = 0;
 8000e44:	4a18      	ldr	r2, [pc, #96]	; (8000ea8 <setLEDs+0x354>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	3301      	adds	r3, #1
 8000e52:	607b      	str	r3, [r7, #4]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2b69      	cmp	r3, #105	; 0x69
 8000e58:	ddf4      	ble.n	8000e44 <setLEDs+0x2f0>
			}
			break;
 8000e5a:	e000      	b.n	8000e5e <setLEDs+0x30a>
		default:
			break;
 8000e5c:	bf00      	nop
			i++) {
 8000e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e60:	3301      	adds	r3, #1
 8000e62:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3;
 8000e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e66:	2b0d      	cmp	r3, #13
 8000e68:	f77f ae7a 	ble.w	8000b60 <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0,
 8000e6c:	23b2      	movs	r3, #178	; 0xb2
 8000e6e:	4a0f      	ldr	r2, [pc, #60]	; (8000eac <setLEDs+0x358>)
 8000e70:	210c      	movs	r1, #12
 8000e72:	480f      	ldr	r0, [pc, #60]	; (8000eb0 <setLEDs+0x35c>)
 8000e74:	f00f fee4 	bl	8010c40 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1,
 8000e78:	23b2      	movs	r3, #178	; 0xb2
 8000e7a:	4a0e      	ldr	r2, [pc, #56]	; (8000eb4 <setLEDs+0x360>)
 8000e7c:	2108      	movs	r1, #8
 8000e7e:	480e      	ldr	r0, [pc, #56]	; (8000eb8 <setLEDs+0x364>)
 8000e80:	f00f fede 	bl	8010c40 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2,
 8000e84:	236a      	movs	r3, #106	; 0x6a
 8000e86:	4a0d      	ldr	r2, [pc, #52]	; (8000ebc <setLEDs+0x368>)
 8000e88:	2104      	movs	r1, #4
 8000e8a:	480d      	ldr	r0, [pc, #52]	; (8000ec0 <setLEDs+0x36c>)
 8000e8c:	f00f fed8 	bl	8010c40 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3,
 8000e90:	236a      	movs	r3, #106	; 0x6a
 8000e92:	4a05      	ldr	r2, [pc, #20]	; (8000ea8 <setLEDs+0x354>)
 8000e94:	2100      	movs	r1, #0
 8000e96:	480a      	ldr	r0, [pc, #40]	; (8000ec0 <setLEDs+0x36c>)
 8000e98:	f00f fed2 	bl	8010c40 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3

}
 8000e9c:	bf00      	nop
 8000e9e:	3738      	adds	r7, #56	; 0x38
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	08020484 	.word	0x08020484
 8000ea8:	24000a1c 	.word	0x24000a1c
 8000eac:	240002e4 	.word	0x240002e4
 8000eb0:	2400123c 	.word	0x2400123c
 8000eb4:	240005ac 	.word	0x240005ac
 8000eb8:	24001158 	.word	0x24001158
 8000ebc:	24000874 	.word	0x24000874
 8000ec0:	240011a4 	.word	0x240011a4

08000ec4 <rand_range>:
	} else {
		return normalized - LENGTH * 2 / 3;
	}
}

uint32_t rand_range(uint32_t a, uint32_t b) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
	uint32_t rand = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60bb      	str	r3, [r7, #8]
	uint32_t MAX = 4294967295;
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed6:	60fb      	str	r3, [r7, #12]
	if(b>a && HAL_RNG_GenerateRandomNumber(&hrng, &rand) == HAL_OK)
 8000ed8:	683a      	ldr	r2, [r7, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d914      	bls.n	8000f0a <rand_range+0x46>
 8000ee0:	f107 0308 	add.w	r3, r7, #8
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	480f      	ldr	r0, [pc, #60]	; (8000f24 <rand_range+0x60>)
 8000ee8:	f00d f9d8 	bl	800e29c <HAL_RNG_GenerateRandomNumber>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d10b      	bne.n	8000f0a <rand_range+0x46>
	{
		return a+rand/(MAX/(b-a));
 8000ef2:	68ba      	ldr	r2, [r7, #8]
 8000ef4:	6839      	ldr	r1, [r7, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	68f9      	ldr	r1, [r7, #12]
 8000efc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f00:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4413      	add	r3, r2
 8000f08:	e008      	b.n	8000f1c <rand_range+0x58>
	}
	else
	{
		HAL_Delay(100);
 8000f0a:	2064      	movs	r0, #100	; 0x64
 8000f0c:	f003 fa10 	bl	8004330 <HAL_Delay>
		CDC_Transmit_HS("rng error\n", strlen("rng error\n"));
 8000f10:	210a      	movs	r1, #10
 8000f12:	4805      	ldr	r0, [pc, #20]	; (8000f28 <rand_range+0x64>)
 8000f14:	f019 fe0a 	bl	801ab2c <CDC_Transmit_HS>
	}
	return -1;
 8000f18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	24000f30 	.word	0x24000f30
 8000f28:	08020218 	.word	0x08020218

08000f2c <LoRA_Read_Register>:

uint8_t LoRA_Read_Register(uint8_t addr) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f3c:	480d      	ldr	r0, [pc, #52]	; (8000f74 <LoRA_Read_Register+0x48>)
 8000f3e:	f008 f8f5 	bl	800912c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000f42:	1df9      	adds	r1, r7, #7
 8000f44:	2364      	movs	r3, #100	; 0x64
 8000f46:	2201      	movs	r2, #1
 8000f48:	480b      	ldr	r0, [pc, #44]	; (8000f78 <LoRA_Read_Register+0x4c>)
 8000f4a:	f00f f839 	bl	800ffc0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 8000f4e:	f107 010f 	add.w	r1, r7, #15
 8000f52:	2364      	movs	r3, #100	; 0x64
 8000f54:	2201      	movs	r2, #1
 8000f56:	4808      	ldr	r0, [pc, #32]	; (8000f78 <LoRA_Read_Register+0x4c>)
 8000f58:	f00f fa2e 	bl	80103b8 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f62:	4804      	ldr	r0, [pc, #16]	; (8000f74 <LoRA_Read_Register+0x48>)
 8000f64:	f008 f8e2 	bl	800912c <HAL_GPIO_WritePin>

	return reg_value;
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	58020000 	.word	0x58020000
 8000f78:	240010d0 	.word	0x240010d0

08000f7c <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	460a      	mov	r2, r1
 8000f86:	71fb      	strb	r3, [r7, #7]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	71bb      	strb	r3, [r7, #6]
	addr |= (1 << 7);
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f9c:	480c      	ldr	r0, [pc, #48]	; (8000fd0 <LoRA_Write_Register+0x54>)
 8000f9e:	f008 f8c5 	bl	800912c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000fa2:	1df9      	adds	r1, r7, #7
 8000fa4:	2364      	movs	r3, #100	; 0x64
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	480a      	ldr	r0, [pc, #40]	; (8000fd4 <LoRA_Write_Register+0x58>)
 8000faa:	f00f f809 	bl	800ffc0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8000fae:	1db9      	adds	r1, r7, #6
 8000fb0:	2364      	movs	r3, #100	; 0x64
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	4807      	ldr	r0, [pc, #28]	; (8000fd4 <LoRA_Write_Register+0x58>)
 8000fb6:	f00f f803 	bl	800ffc0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fc0:	4803      	ldr	r0, [pc, #12]	; (8000fd0 <LoRA_Write_Register+0x54>)
 8000fc2:	f008 f8b3 	bl	800912c <HAL_GPIO_WritePin>

}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	58020000 	.word	0x58020000
 8000fd4:	240010d0 	.word	0x240010d0

08000fd8 <LoRA_sleep>:

void LoRA_sleep(void) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000fdc:	2180      	movs	r1, #128	; 0x80
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f7ff ffcc 	bl	8000f7c <LoRA_Write_Register>
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency) {
 8000fe8:	b5b0      	push	{r4, r5, r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t) frequency << 19) / 32000000;
 8000ff0:	6879      	ldr	r1, [r7, #4]
 8000ff2:	17c8      	asrs	r0, r1, #31
 8000ff4:	460a      	mov	r2, r1
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	1355      	asrs	r5, r2, #13
 8000ffa:	04d4      	lsls	r4, r2, #19
 8000ffc:	4a18      	ldr	r2, [pc, #96]	; (8001060 <LoRA_set_frequency+0x78>)
 8000ffe:	f04f 0300 	mov.w	r3, #0
 8001002:	4620      	mov	r0, r4
 8001004:	4629      	mov	r1, r5
 8001006:	f7ff fba7 	bl	8000758 <__aeabi_uldivmod>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t) (frf >> 16));
 8001012:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001016:	f04f 0200 	mov.w	r2, #0
 800101a:	f04f 0300 	mov.w	r3, #0
 800101e:	0c02      	lsrs	r2, r0, #16
 8001020:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001024:	0c0b      	lsrs	r3, r1, #16
 8001026:	b2d3      	uxtb	r3, r2
 8001028:	4619      	mov	r1, r3
 800102a:	2006      	movs	r0, #6
 800102c:	f7ff ffa6 	bl	8000f7c <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t) (frf >> 8));
 8001030:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001034:	f04f 0200 	mov.w	r2, #0
 8001038:	f04f 0300 	mov.w	r3, #0
 800103c:	0a02      	lsrs	r2, r0, #8
 800103e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001042:	0a0b      	lsrs	r3, r1, #8
 8001044:	b2d3      	uxtb	r3, r2
 8001046:	4619      	mov	r1, r3
 8001048:	2007      	movs	r0, #7
 800104a:	f7ff ff97 	bl	8000f7c <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t) (frf >> 0));
 800104e:	7a3b      	ldrb	r3, [r7, #8]
 8001050:	4619      	mov	r1, r3
 8001052:	2008      	movs	r0, #8
 8001054:	f7ff ff92 	bl	8000f7c <LoRA_Write_Register>
}
 8001058:	bf00      	nop
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bdb0      	pop	{r4, r5, r7, pc}
 8001060:	01e84800 	.word	0x01e84800

08001064 <LoRA_idle>:

void LoRA_idle() {
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8001068:	2181      	movs	r1, #129	; 0x81
 800106a:	2001      	movs	r0, #1
 800106c:	f7ff ff86 	bl	8000f7c <LoRA_Write_Register>
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}

08001074 <LoRA_setOCP>:

void LoRA_setOCP(uint8_t mA) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
	uint8_t ocpTrim = 27;
 800107e:	231b      	movs	r3, #27
 8001080:	73fb      	strb	r3, [r7, #15]

	if (mA <= 120) {
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	2b78      	cmp	r3, #120	; 0x78
 8001086:	d809      	bhi.n	800109c <LoRA_setOCP+0x28>
		ocpTrim = (mA - 45) / 5;
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	3b2d      	subs	r3, #45	; 0x2d
 800108c:	4a11      	ldr	r2, [pc, #68]	; (80010d4 <LoRA_setOCP+0x60>)
 800108e:	fb82 1203 	smull	r1, r2, r2, r3
 8001092:	1052      	asrs	r2, r2, #1
 8001094:	17db      	asrs	r3, r3, #31
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	73fb      	strb	r3, [r7, #15]
 800109a:	e00b      	b.n	80010b4 <LoRA_setOCP+0x40>
	} else if (mA <= 240) {
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	2bf0      	cmp	r3, #240	; 0xf0
 80010a0:	d808      	bhi.n	80010b4 <LoRA_setOCP+0x40>
		ocpTrim = (mA + 30) / 10;
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	331e      	adds	r3, #30
 80010a6:	4a0b      	ldr	r2, [pc, #44]	; (80010d4 <LoRA_setOCP+0x60>)
 80010a8:	fb82 1203 	smull	r1, r2, r2, r3
 80010ac:	1092      	asrs	r2, r2, #2
 80010ae:	17db      	asrs	r3, r3, #31
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	73fb      	strb	r3, [r7, #15]
	}

	LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	f003 031f 	and.w	r3, r3, #31
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	f043 0320 	orr.w	r3, r3, #32
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	4619      	mov	r1, r3
 80010c4:	200b      	movs	r0, #11
 80010c6:	f7ff ff59 	bl	8000f7c <LoRA_Write_Register>
}
 80010ca:	bf00      	nop
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	66666667 	.word	0x66666667

080010d8 <LoRA_setTxPower>:

void LoRA_setTxPower(int level) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	// PA BOOST
	if (level > 17) {
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b11      	cmp	r3, #17
 80010e4:	dd0f      	ble.n	8001106 <LoRA_setTxPower+0x2e>
		if (level > 20) {
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2b14      	cmp	r3, #20
 80010ea:	dd01      	ble.n	80010f0 <LoRA_setTxPower+0x18>
			level = 20;
 80010ec:	2314      	movs	r3, #20
 80010ee:	607b      	str	r3, [r7, #4]
		}

		// subtract 3 from level, so 18 - 20 maps to 15 - 17
		level -= 3;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3b03      	subs	r3, #3
 80010f4:	607b      	str	r3, [r7, #4]

		// High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
		LoRA_Write_Register(REG_PA_DAC, 0x87);
 80010f6:	2187      	movs	r1, #135	; 0x87
 80010f8:	204d      	movs	r0, #77	; 0x4d
 80010fa:	f7ff ff3f 	bl	8000f7c <LoRA_Write_Register>
		LoRA_setOCP(140);
 80010fe:	208c      	movs	r0, #140	; 0x8c
 8001100:	f7ff ffb8 	bl	8001074 <LoRA_setOCP>
 8001104:	e00b      	b.n	800111e <LoRA_setTxPower+0x46>
	} else {
		if (level < 2) {
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b01      	cmp	r3, #1
 800110a:	dc01      	bgt.n	8001110 <LoRA_setTxPower+0x38>
			level = 2;
 800110c:	2302      	movs	r3, #2
 800110e:	607b      	str	r3, [r7, #4]
		}
		//Default value PA_HF/LF or +17dBm
		LoRA_Write_Register(REG_PA_DAC, 0x84);
 8001110:	2184      	movs	r1, #132	; 0x84
 8001112:	204d      	movs	r0, #77	; 0x4d
 8001114:	f7ff ff32 	bl	8000f7c <LoRA_Write_Register>
		LoRA_setOCP(100);
 8001118:	2064      	movs	r0, #100	; 0x64
 800111a:	f7ff ffab 	bl	8001074 <LoRA_setOCP>
	}

	LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	b2db      	uxtb	r3, r3
 8001122:	3b02      	subs	r3, #2
 8001124:	b2db      	uxtb	r3, r3
 8001126:	b25b      	sxtb	r3, r3
 8001128:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800112c:	b25b      	sxtb	r3, r3
 800112e:	b2db      	uxtb	r3, r3
 8001130:	4619      	mov	r1, r3
 8001132:	2009      	movs	r0, #9
 8001134:	f7ff ff22 	bl	8000f7c <LoRA_Write_Register>
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode() {
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1,
			LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 8001144:	201d      	movs	r0, #29
 8001146:	f7ff fef1 	bl	8000f2c <LoRA_Read_Register>
 800114a:	4603      	mov	r3, r0
	LoRA_Write_Register(REG_MODEM_CONFIG_1,
 800114c:	f023 0301 	bic.w	r3, r3, #1
 8001150:	b2db      	uxtb	r3, r3
 8001152:	4619      	mov	r1, r3
 8001154:	201d      	movs	r0, #29
 8001156:	f7ff ff11 	bl	8000f7c <LoRA_Write_Register>
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <LoRA_begin>:

void LoRA_begin(long frequency) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001168:	2201      	movs	r2, #1
 800116a:	2101      	movs	r1, #1
 800116c:	4818      	ldr	r0, [pc, #96]	; (80011d0 <LoRA_begin+0x70>)
 800116e:	f007 ffdd 	bl	800912c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8001172:	2201      	movs	r2, #1
 8001174:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001178:	4816      	ldr	r0, [pc, #88]	; (80011d4 <LoRA_begin+0x74>)
 800117a:	f007 ffd7 	bl	800912c <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 800117e:	2042      	movs	r0, #66	; 0x42
 8001180:	f7ff fed4 	bl	8000f2c <LoRA_Read_Register>
 8001184:	4603      	mov	r3, r0
 8001186:	73fb      	strb	r3, [r7, #15]

	LoRA_sleep();
 8001188:	f7ff ff26 	bl	8000fd8 <LoRA_sleep>
	LoRA_set_frequency(868000000);
 800118c:	4812      	ldr	r0, [pc, #72]	; (80011d8 <LoRA_begin+0x78>)
 800118e:	f7ff ff2b 	bl	8000fe8 <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 8001192:	2100      	movs	r1, #0
 8001194:	200f      	movs	r0, #15
 8001196:	f7ff fef1 	bl	8000f7c <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 800119a:	2100      	movs	r1, #0
 800119c:	200e      	movs	r0, #14
 800119e:	f7ff feed 	bl	8000f7c <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 80011a2:	200c      	movs	r0, #12
 80011a4:	f7ff fec2 	bl	8000f2c <LoRA_Read_Register>
 80011a8:	4603      	mov	r3, r0
 80011aa:	f043 0303 	orr.w	r3, r3, #3
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	4619      	mov	r1, r3
 80011b2:	200c      	movs	r0, #12
 80011b4:	f7ff fee2 	bl	8000f7c <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 80011b8:	2104      	movs	r1, #4
 80011ba:	2026      	movs	r0, #38	; 0x26
 80011bc:	f7ff fede 	bl	8000f7c <LoRA_Write_Register>

	LoRA_setTxPower(17);
 80011c0:	2011      	movs	r0, #17
 80011c2:	f7ff ff89 	bl	80010d8 <LoRA_setTxPower>

}
 80011c6:	bf00      	nop
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	58020c00 	.word	0x58020c00
 80011d4:	58020000 	.word	0x58020000
 80011d8:	33bca100 	.word	0x33bca100

080011dc <LoRA_beginPacket>:

void LoRA_beginPacket() {
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	LoRA_explicit_header_mode();
 80011e0:	f7ff ffae 	bl	8001140 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 80011e4:	2100      	movs	r1, #0
 80011e6:	200d      	movs	r0, #13
 80011e8:	f7ff fec8 	bl	8000f7c <LoRA_Write_Register>
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, 0);
 80011ec:	2100      	movs	r1, #0
 80011ee:	2022      	movs	r0, #34	; 0x22
 80011f0:	f7ff fec4 	bl	8000f7c <LoRA_Write_Register>
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <LoRA_endPacket>:

void LoRA_endPacket(){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 80011fc:	2183      	movs	r1, #131	; 0x83
 80011fe:	2001      	movs	r0, #1
 8001200:	f7ff febc 	bl	8000f7c <LoRA_Write_Register>

	while((LoRA_Read_Register(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0){
 8001204:	bf00      	nop
 8001206:	2012      	movs	r0, #18
 8001208:	f7ff fe90 	bl	8000f2c <LoRA_Read_Register>
 800120c:	4603      	mov	r3, r0
 800120e:	f003 0308 	and.w	r3, r3, #8
 8001212:	2b00      	cmp	r3, #0
 8001214:	d0f7      	beq.n	8001206 <LoRA_endPacket+0xe>

	}
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8001216:	2185      	movs	r1, #133	; 0x85
 8001218:	2001      	movs	r0, #1
 800121a:	f7ff feaf 	bl	8000f7c <LoRA_Write_Register>

	LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 800121e:	2108      	movs	r1, #8
 8001220:	2012      	movs	r0, #18
 8001222:	f7ff feab 	bl	8000f7c <LoRA_Write_Register>

}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}

0800122a <LoRA_parsePacket>:


int LoRA_parsePacket(){
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
	int packetLenght = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	607b      	str	r3, [r7, #4]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 8001234:	2012      	movs	r0, #18
 8001236:	f7ff fe79 	bl	8000f2c <LoRA_Read_Register>
 800123a:	4603      	mov	r3, r0
 800123c:	603b      	str	r3, [r7, #0]

	LoRA_explicit_header_mode();
 800123e:	f7ff ff7f 	bl	8001140 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	b2db      	uxtb	r3, r3
 8001246:	4619      	mov	r1, r3
 8001248:	2012      	movs	r0, #18
 800124a:	f7ff fe97 	bl	8000f7c <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001254:	2b00      	cmp	r3, #0
 8001256:	d016      	beq.n	8001286 <LoRA_parsePacket+0x5c>
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	f003 0320 	and.w	r3, r3, #32
 800125e:	2b00      	cmp	r3, #0
 8001260:	d111      	bne.n	8001286 <LoRA_parsePacket+0x5c>
		packetLenght = LoRA_Read_Register(REG_RX_NB_BYTES);
 8001262:	2013      	movs	r0, #19
 8001264:	f7ff fe62 	bl	8000f2c <LoRA_Read_Register>
 8001268:	4603      	mov	r3, r0
 800126a:	607b      	str	r3, [r7, #4]
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 800126c:	2010      	movs	r0, #16
 800126e:	f7ff fe5d 	bl	8000f2c <LoRA_Read_Register>
 8001272:	4603      	mov	r3, r0
 8001274:	4619      	mov	r1, r3
 8001276:	200d      	movs	r0, #13
 8001278:	f7ff fe80 	bl	8000f7c <LoRA_Write_Register>
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 800127c:	2185      	movs	r1, #133	; 0x85
 800127e:	2001      	movs	r0, #1
 8001280:	f7ff fe7c 	bl	8000f7c <LoRA_Write_Register>
 8001284:	e00d      	b.n	80012a2 <LoRA_parsePacket+0x78>

		//LoRA_idle();
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS)){
 8001286:	2001      	movs	r0, #1
 8001288:	f7ff fe50 	bl	8000f2c <LoRA_Read_Register>
 800128c:	4603      	mov	r3, r0
 800128e:	2b85      	cmp	r3, #133	; 0x85
 8001290:	d007      	beq.n	80012a2 <LoRA_parsePacket+0x78>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8001292:	2100      	movs	r1, #0
 8001294:	200d      	movs	r0, #13
 8001296:	f7ff fe71 	bl	8000f7c <LoRA_Write_Register>

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 800129a:	2185      	movs	r1, #133	; 0x85
 800129c:	2001      	movs	r0, #1
 800129e:	f7ff fe6d 	bl	8000f7c <LoRA_Write_Register>
	}
	return packetLenght;
 80012a2:	687b      	ldr	r3, [r7, #4]

}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <LoRA_sendPacket>:

void LoRA_sendPacket(char *data) {
 80012ac:	b5b0      	push	{r4, r5, r7, lr}
 80012ae:	b0c4      	sub	sp, #272	; 0x110
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80012b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80012ba:	6018      	str	r0, [r3, #0]
	LoRA_idle();
 80012bc:	f7ff fed2 	bl	8001064 <LoRA_idle>

	char debug[MAX_PACKET_LENGTH];
	if(recv_packet(debug, MAX_PACKET_LENGTH)) {
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	21fa      	movs	r1, #250	; 0xfa
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f91e 	bl	8001508 <recv_packet>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d022      	beq.n	8001318 <LoRA_sendPacket+0x6c>
		HAL_Delay(100);
 80012d2:	2064      	movs	r0, #100	; 0x64
 80012d4:	f003 f82c 	bl	8004330 <HAL_Delay>
		strcat(debug, " was thrown away");
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f877 	bl	80003d0 <strlen>
 80012e2:	4603      	mov	r3, r0
 80012e4:	461a      	mov	r2, r3
 80012e6:	f107 030c 	add.w	r3, r7, #12
 80012ea:	4413      	add	r3, r2
 80012ec:	4a32      	ldr	r2, [pc, #200]	; (80013b8 <LoRA_sendPacket+0x10c>)
 80012ee:	461d      	mov	r5, r3
 80012f0:	4614      	mov	r4, r2
 80012f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012f4:	6028      	str	r0, [r5, #0]
 80012f6:	6069      	str	r1, [r5, #4]
 80012f8:	60aa      	str	r2, [r5, #8]
 80012fa:	60eb      	str	r3, [r5, #12]
 80012fc:	7823      	ldrb	r3, [r4, #0]
 80012fe:	742b      	strb	r3, [r5, #16]
		CDC_Transmit_HS(debug, strlen(debug));
 8001300:	f107 030c 	add.w	r3, r7, #12
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff f863 	bl	80003d0 <strlen>
 800130a:	4602      	mov	r2, r0
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	4611      	mov	r1, r2
 8001312:	4618      	mov	r0, r3
 8001314:	f019 fc0a 	bl	801ab2c <CDC_Transmit_HS>
	}

	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 8001318:	2012      	movs	r0, #18
 800131a:	f7ff fe07 	bl	8000f2c <LoRA_Read_Register>
 800131e:	4603      	mov	r3, r0
 8001320:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	/*char debug[250];
	sprintf(debug, "here: %d\n", (irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK));
	CDC_Transmit_HS(debug, strlen(debug));
	HAL_Delay(100);*/
	if(!((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0))
 8001324:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800132c:	2b00      	cmp	r3, #0
 800132e:	d005      	beq.n	800133c <LoRA_sendPacket+0x90>
 8001330:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001334:	f003 0320 	and.w	r3, r3, #32
 8001338:	2b00      	cmp	r3, #0
 800133a:	d033      	beq.n	80013a4 <LoRA_sendPacket+0xf8>
	{
		//CDC_Transmit_HS("here1\n", strlen("here1\n"));
		LoRA_beginPacket();
 800133c:	f7ff ff4e 	bl	80011dc <LoRA_beginPacket>
    	for(int i = 0; i < strlen(data); i++){
 8001340:	2300      	movs	r3, #0
 8001342:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001346:	e011      	b.n	800136c <LoRA_sendPacket+0xc0>
    		LoRA_Write_Register(REG_FIFO, data[i]);
 8001348:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800134c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001350:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001354:	6812      	ldr	r2, [r2, #0]
 8001356:	4413      	add	r3, r2
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	4619      	mov	r1, r3
 800135c:	2000      	movs	r0, #0
 800135e:	f7ff fe0d 	bl	8000f7c <LoRA_Write_Register>
    	for(int i = 0; i < strlen(data); i++){
 8001362:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001366:	3301      	adds	r3, #1
 8001368:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800136c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001370:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001374:	6818      	ldr	r0, [r3, #0]
 8001376:	f7ff f82b 	bl	80003d0 <strlen>
 800137a:	4602      	mov	r2, r0
 800137c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001380:	429a      	cmp	r2, r3
 8001382:	d8e1      	bhi.n	8001348 <LoRA_sendPacket+0x9c>
    	}
    	LoRA_Write_Register(REG_PAYLOAD_LENGTH, strlen(data));
 8001384:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001388:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800138c:	6818      	ldr	r0, [r3, #0]
 800138e:	f7ff f81f 	bl	80003d0 <strlen>
 8001392:	4603      	mov	r3, r0
 8001394:	b2db      	uxtb	r3, r3
 8001396:	4619      	mov	r1, r3
 8001398:	2022      	movs	r0, #34	; 0x22
 800139a:	f7ff fdef 	bl	8000f7c <LoRA_Write_Register>
    	LoRA_endPacket();
 800139e:	f7ff ff2b 	bl	80011f8 <LoRA_endPacket>
 80013a2:	e004      	b.n	80013ae <LoRA_sendPacket+0x102>
	}
	else {
		//CDC_Transmit_HS("here2\n", strlen("here2\n"));
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 80013a4:	2185      	movs	r1, #133	; 0x85
 80013a6:	2001      	movs	r0, #1
 80013a8:	f7ff fde8 	bl	8000f7c <LoRA_Write_Register>
	}
	/*char sent[300];
	sprintf(sent, "\nsent: %s\n", data);
	HAL_Delay(100);
	CDC_Transmit_HS(sent, strlen(sent));*/
}
 80013ac:	bf00      	nop
 80013ae:	bf00      	nop
 80013b0:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bdb0      	pop	{r4, r5, r7, pc}
 80013b8:	08020224 	.word	0x08020224

080013bc <disarm>:
int mount_SD() {
	int status = f_mount(&SDFatFS, (TCHAR const*) SDPath, 0);
	return status;
}

int disarm(char *state) {
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2102      	movs	r1, #2
 80013c8:	482d      	ldr	r0, [pc, #180]	; (8001480 <disarm+0xc4>)
 80013ca:	f007 feaf 	bl	800912c <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);

	HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2102      	movs	r1, #2
 80013d2:	482c      	ldr	r0, [pc, #176]	; (8001484 <disarm+0xc8>)
 80013d4:	f007 feaa 	bl	800912c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 80013d8:	2200      	movs	r2, #0
 80013da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013de:	482a      	ldr	r0, [pc, #168]	; (8001488 <disarm+0xcc>)
 80013e0:	f007 fea4 	bl	800912c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 80013e4:	2200      	movs	r2, #0
 80013e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ea:	4827      	ldr	r0, [pc, #156]	; (8001488 <disarm+0xcc>)
 80013ec:	f007 fe9e 	bl	800912c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 80013f0:	2200      	movs	r2, #0
 80013f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013f6:	4824      	ldr	r0, [pc, #144]	; (8001488 <disarm+0xcc>)
 80013f8:	f007 fe98 	bl	800912c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 80013fc:	2200      	movs	r2, #0
 80013fe:	2102      	movs	r1, #2
 8001400:	4822      	ldr	r0, [pc, #136]	; (800148c <disarm+0xd0>)
 8001402:	f007 fe93 	bl	800912c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 8001406:	2200      	movs	r2, #0
 8001408:	f44f 7180 	mov.w	r1, #256	; 0x100
 800140c:	4820      	ldr	r0, [pc, #128]	; (8001490 <disarm+0xd4>)
 800140e:	f007 fe8d 	bl	800912c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 8001412:	2200      	movs	r2, #0
 8001414:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001418:	481d      	ldr	r0, [pc, #116]	; (8001490 <disarm+0xd4>)
 800141a:	f007 fe87 	bl	800912c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001424:	481a      	ldr	r0, [pc, #104]	; (8001490 <disarm+0xd4>)
 8001426:	f007 fe81 	bl	800912c <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800142a:	210c      	movs	r1, #12
 800142c:	4819      	ldr	r0, [pc, #100]	; (8001494 <disarm+0xd8>)
 800142e:	f00f faeb 	bl	8010a08 <HAL_TIM_PWM_Start>
	setServo(1, 0);
 8001432:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8001498 <disarm+0xdc>
 8001436:	2001      	movs	r0, #1
 8001438:	f7ff fb44 	bl	8000ac4 <setServo>

	LED_Color_Data[7][0] = 255;
 800143c:	4b17      	ldr	r3, [pc, #92]	; (800149c <disarm+0xe0>)
 800143e:	22ff      	movs	r2, #255	; 0xff
 8001440:	655a      	str	r2, [r3, #84]	; 0x54
	LED_Color_Data[7][1] = 0;
 8001442:	4b16      	ldr	r3, [pc, #88]	; (800149c <disarm+0xe0>)
 8001444:	2200      	movs	r2, #0
 8001446:	659a      	str	r2, [r3, #88]	; 0x58
	LED_Color_Data[7][2] = 0;
 8001448:	4b14      	ldr	r3, [pc, #80]	; (800149c <disarm+0xe0>)
 800144a:	2200      	movs	r2, #0
 800144c:	65da      	str	r2, [r3, #92]	; 0x5c

	LED_Color_Data[2][0] = 255;
 800144e:	4b13      	ldr	r3, [pc, #76]	; (800149c <disarm+0xe0>)
 8001450:	22ff      	movs	r2, #255	; 0xff
 8001452:	619a      	str	r2, [r3, #24]
	LED_Color_Data[2][1] = 0;
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <disarm+0xe0>)
 8001456:	2200      	movs	r2, #0
 8001458:	61da      	str	r2, [r3, #28]
	LED_Color_Data[2][2] = 0;
 800145a:	4b10      	ldr	r3, [pc, #64]	; (800149c <disarm+0xe0>)
 800145c:	2200      	movs	r2, #0
 800145e:	621a      	str	r2, [r3, #32]
	setLEDs();
 8001460:	f7ff fb78 	bl	8000b54 <setLEDs>

	strcpy(state, "DISARMED");
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	490e      	ldr	r1, [pc, #56]	; (80014a0 <disarm+0xe4>)
 8001468:	461a      	mov	r2, r3
 800146a:	460b      	mov	r3, r1
 800146c:	cb03      	ldmia	r3!, {r0, r1}
 800146e:	6010      	str	r0, [r2, #0]
 8001470:	6051      	str	r1, [r2, #4]
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	7213      	strb	r3, [r2, #8]
	return 0;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	58020000 	.word	0x58020000
 8001484:	58020400 	.word	0x58020400
 8001488:	58021400 	.word	0x58021400
 800148c:	58021800 	.word	0x58021800
 8001490:	58021000 	.word	0x58021000
 8001494:	240011f0 	.word	0x240011f0
 8001498:	00000000 	.word	0x00000000
 800149c:	24000bc4 	.word	0x24000bc4
 80014a0:	08020238 	.word	0x08020238

080014a4 <arm>:

int arm(char *state) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 1);
 80014ac:	2201      	movs	r2, #1
 80014ae:	2102      	movs	r1, #2
 80014b0:	4810      	ldr	r0, [pc, #64]	; (80014f4 <arm+0x50>)
 80014b2:	f007 fe3b 	bl	800912c <HAL_GPIO_WritePin>
//HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 1);

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80014b6:	210c      	movs	r1, #12
 80014b8:	480f      	ldr	r0, [pc, #60]	; (80014f8 <arm+0x54>)
 80014ba:	f00f faa5 	bl	8010a08 <HAL_TIM_PWM_Start>
	setServo(1, 100);
 80014be:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80014fc <arm+0x58>
 80014c2:	2001      	movs	r0, #1
 80014c4:	f7ff fafe 	bl	8000ac4 <setServo>

	strcpy(state, "ARMED");
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a0d      	ldr	r2, [pc, #52]	; (8001500 <arm+0x5c>)
 80014cc:	6810      	ldr	r0, [r2, #0]
 80014ce:	6018      	str	r0, [r3, #0]
 80014d0:	8892      	ldrh	r2, [r2, #4]
 80014d2:	809a      	strh	r2, [r3, #4]
	LED_Color_Data[7][0] = 0;
 80014d4:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <arm+0x60>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	655a      	str	r2, [r3, #84]	; 0x54
	LED_Color_Data[7][1] = 255;
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <arm+0x60>)
 80014dc:	22ff      	movs	r2, #255	; 0xff
 80014de:	659a      	str	r2, [r3, #88]	; 0x58
	LED_Color_Data[7][2] = 0;
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <arm+0x60>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	65da      	str	r2, [r3, #92]	; 0x5c
	setLEDs();
 80014e6:	f7ff fb35 	bl	8000b54 <setLEDs>
	return 0;
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	58020000 	.word	0x58020000
 80014f8:	240011f0 	.word	0x240011f0
 80014fc:	42c80000 	.word	0x42c80000
 8001500:	08020244 	.word	0x08020244
 8001504:	24000bc4 	.word	0x24000bc4

08001508 <recv_packet>:

int recv_packet(char *LoRA_data, int max_length) {
 8001508:	b590      	push	{r4, r7, lr}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
	int packet_length = LoRA_parsePacket();
 8001512:	f7ff fe8a 	bl	800122a <LoRA_parsePacket>
 8001516:	60b8      	str	r0, [r7, #8]
	if (max_length - 1 < packet_length) //-1 for the null terminator
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	429a      	cmp	r2, r3
 800151e:	dc01      	bgt.n	8001524 <recv_packet+0x1c>
			{
		return 0;
 8001520:	2300      	movs	r3, #0
 8001522:	e01c      	b.n	800155e <recv_packet+0x56>
	}
	if (packet_length) {
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d018      	beq.n	800155c <recv_packet+0x54>
		for (int i = 0; i < packet_length; i++) {
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	e00a      	b.n	8001546 <recv_packet+0x3e>
			LoRA_data[i] = LoRA_Read_Register(0x00);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	18d4      	adds	r4, r2, r3
 8001536:	2000      	movs	r0, #0
 8001538:	f7ff fcf8 	bl	8000f2c <LoRA_Read_Register>
 800153c:	4603      	mov	r3, r0
 800153e:	7023      	strb	r3, [r4, #0]
		for (int i = 0; i < packet_length; i++) {
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	3301      	adds	r3, #1
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	429a      	cmp	r2, r3
 800154c:	dbf0      	blt.n	8001530 <recv_packet+0x28>
		}
		LoRA_data[packet_length] = '\0';
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	4413      	add	r3, r2
 8001554:	2200      	movs	r2, #0
 8001556:	701a      	strb	r2, [r3, #0]
	    /*char rec[300];
	    sprintf(rec, "received: %s\n", LoRA_data);
	    CDC_Transmit_HS(rec, strlen(rec));*/
		return packet_length;
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	e000      	b.n	800155e <recv_packet+0x56>
	} else {
		return 0;
 800155c:	2300      	movs	r3, #0
	}
}
 800155e:	4618      	mov	r0, r3
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	bd90      	pop	{r4, r7, pc}

08001566 <reliable_send_packet>:

void reliable_send_packet(char *LoRA_data) {
 8001566:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800156a:	b089      	sub	sp, #36	; 0x24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	466b      	mov	r3, sp
 8001572:	461e      	mov	r6, r3
	/*char debug[300];
	sprintf(debug, "sending: %s", LoRA_data);
	CDC_Transmit_HS(debug, strlen(debug));*/

	uint16_t length = strlen(LoRA_data) + 1; //+1 for the \0
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7fe ff2b 	bl	80003d0 <strlen>
 800157a:	4603      	mov	r3, r0
 800157c:	b29b      	uxth	r3, r3
 800157e:	3301      	adds	r3, #1
 8001580:	82fb      	strh	r3, [r7, #22]
	char acknowledge[length];
 8001582:	8af9      	ldrh	r1, [r7, #22]
 8001584:	460b      	mov	r3, r1
 8001586:	3b01      	subs	r3, #1
 8001588:	613b      	str	r3, [r7, #16]
 800158a:	b28b      	uxth	r3, r1
 800158c:	2200      	movs	r2, #0
 800158e:	4698      	mov	r8, r3
 8001590:	4691      	mov	r9, r2
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	f04f 0300 	mov.w	r3, #0
 800159a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800159e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80015a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80015a6:	b28b      	uxth	r3, r1
 80015a8:	2200      	movs	r2, #0
 80015aa:	461c      	mov	r4, r3
 80015ac:	4615      	mov	r5, r2
 80015ae:	f04f 0200 	mov.w	r2, #0
 80015b2:	f04f 0300 	mov.w	r3, #0
 80015b6:	00eb      	lsls	r3, r5, #3
 80015b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80015bc:	00e2      	lsls	r2, r4, #3
 80015be:	460b      	mov	r3, r1
 80015c0:	3307      	adds	r3, #7
 80015c2:	08db      	lsrs	r3, r3, #3
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	ebad 0d03 	sub.w	sp, sp, r3
 80015ca:	466b      	mov	r3, sp
 80015cc:	3300      	adds	r3, #0
 80015ce:	60fb      	str	r3, [r7, #12]
	uint32_t lastTime = HAL_GetTick();
 80015d0:	f002 fea2 	bl	8004318 <HAL_GetTick>
 80015d4:	61f8      	str	r0, [r7, #28]
	uint32_t wait_time = 700;
 80015d6:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80015da:	61bb      	str	r3, [r7, #24]
	LoRA_sendPacket(LoRA_data);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff fe65 	bl	80012ac <LoRA_sendPacket>
	while (1) {

		if (recv_packet(acknowledge, length)) {
 80015e2:	8afb      	ldrh	r3, [r7, #22]
 80015e4:	4619      	mov	r1, r3
 80015e6:	68f8      	ldr	r0, [r7, #12]
 80015e8:	f7ff ff8e 	bl	8001508 <recv_packet>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d009      	beq.n	8001606 <reliable_send_packet+0xa0>
			//cehck crc
			if (strcmp(acknowledge, LoRA_data) != 0) {
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	68f8      	ldr	r0, [r7, #12]
 80015f6:	f7fe fe8b 	bl	8000310 <strcmp>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d01a      	beq.n	8001636 <reliable_send_packet+0xd0>
				LoRA_sendPacket(LoRA_data);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff fe53 	bl	80012ac <LoRA_sendPacket>
			} else {
				break;
			}
		}

		if (HAL_GetTick() - lastTime > wait_time) {
 8001606:	f002 fe87 	bl	8004318 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	429a      	cmp	r2, r3
 8001614:	d2e5      	bcs.n	80015e2 <reliable_send_packet+0x7c>
			wait_time = rand_range(3, 13)*100;
 8001616:	210d      	movs	r1, #13
 8001618:	2003      	movs	r0, #3
 800161a:	f7ff fc53 	bl	8000ec4 <rand_range>
 800161e:	4603      	mov	r3, r0
 8001620:	2264      	movs	r2, #100	; 0x64
 8001622:	fb02 f303 	mul.w	r3, r2, r3
 8001626:	61bb      	str	r3, [r7, #24]
			LoRA_sendPacket(LoRA_data);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff fe3f 	bl	80012ac <LoRA_sendPacket>
			lastTime = HAL_GetTick();
 800162e:	f002 fe73 	bl	8004318 <HAL_GetTick>
 8001632:	61f8      	str	r0, [r7, #28]
		if (recv_packet(acknowledge, length)) {
 8001634:	e7d5      	b.n	80015e2 <reliable_send_packet+0x7c>
				break;
 8001636:	bf00      	nop
 8001638:	46b5      	mov	sp, r6
		}
	}
}
 800163a:	bf00      	nop
 800163c:	3724      	adds	r7, #36	; 0x24
 800163e:	46bd      	mov	sp, r7
 8001640:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001644 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001644:	b5b0      	push	{r4, r5, r7, lr}
 8001646:	f5ad 5d20 	sub.w	sp, sp, #10240	; 0x2800
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800164e:	f002 fddd 	bl	800420c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001652:	f000 fd4d 	bl	80020f0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001656:	f000 fdc3 	bl	80021e0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800165a:	f001 fb85 	bl	8002d68 <MX_GPIO_Init>
  MX_DMA_Init();
 800165e:	f001 fb23 	bl	8002ca8 <MX_DMA_Init>
  MX_SPI3_Init();
 8001662:	f001 f859 	bl	8002718 <MX_SPI3_Init>
  MX_FDCAN3_Init();
 8001666:	f000 fed3 	bl	8002410 <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 800166a:	f001 fad1 	bl	8002c10 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800166e:	f000 fde9 	bl	8002244 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001672:	f001 f963 	bl	800293c <MX_TIM4_Init>
  MX_ADC3_Init();
 8001676:	f000 fe5d 	bl	8002334 <MX_ADC3_Init>
  MX_SPI2_Init();
 800167a:	f000 fff7 	bl	800266c <MX_SPI2_Init>
  MX_I2C2_Init();
 800167e:	f000 ff2b 	bl	80024d8 <MX_I2C2_Init>
  MX_TIM2_Init();
 8001682:	f001 f89f 	bl	80027c4 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001686:	f001 f9d5 	bl	8002a34 <MX_TIM5_Init>
  MX_TIM3_Init();
 800168a:	f001 f8f3 	bl	8002874 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 800168e:	f019 f98d 	bl	801a9ac <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8001692:	f000 ff95 	bl	80025c0 <MX_SPI1_Init>
  MX_UART4_Init();
 8001696:	f001 fa6f 	bl	8002b78 <MX_UART4_Init>
  MX_FATFS_Init();
 800169a:	f013 ffa7 	bl	80155ec <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 800169e:	f000 ff71 	bl	8002584 <MX_SDMMC2_SD_Init>
  MX_TIM13_Init();
 80016a2:	f001 fa21 	bl	8002ae8 <MX_TIM13_Init>
  MX_TIM14_Init();
 80016a6:	f001 fa43 	bl	8002b30 <MX_TIM14_Init>
  MX_RNG_Init();
 80016aa:	f000 ff55 	bl	8002558 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
	char dummy[50];
	disarm(dummy);
 80016ae:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fe82 	bl	80013bc <disarm>

	FATFS FatFs;
	FIL Fil;
	FRESULT FR_Status;
	FR_Status = f_mount(&FatFs, SDPath, 1);
 80016b8:	4bc2      	ldr	r3, [pc, #776]	; (80019c4 <main+0x380>)
 80016ba:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80016be:	f103 0310 	add.w	r3, r3, #16
 80016c2:	443b      	add	r3, r7
 80016c4:	2201      	movs	r2, #1
 80016c6:	49c0      	ldr	r1, [pc, #768]	; (80019c8 <main+0x384>)
 80016c8:	4618      	mov	r0, r3
 80016ca:	f018 fb63 	bl	8019d94 <f_mount>
 80016ce:	4603      	mov	r3, r0
 80016d0:	f642 0203 	movw	r2, #10243	; 0x2803
 80016d4:	443a      	add	r2, r7
 80016d6:	7013      	strb	r3, [r2, #0]

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80016d8:	210c      	movs	r1, #12
 80016da:	48bc      	ldr	r0, [pc, #752]	; (80019cc <main+0x388>)
 80016dc:	f00f f994 	bl	8010a08 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 80016e0:	2201      	movs	r2, #1
 80016e2:	2104      	movs	r1, #4
 80016e4:	48ba      	ldr	r0, [pc, #744]	; (80019d0 <main+0x38c>)
 80016e6:	f007 fd21 	bl	800912c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 80016ea:	2201      	movs	r2, #1
 80016ec:	2108      	movs	r1, #8
 80016ee:	48b8      	ldr	r0, [pc, #736]	; (80019d0 <main+0x38c>)
 80016f0:	f007 fd1c 	bl	800912c <HAL_GPIO_WritePin>

	FR_Status = f_open(&Fil, "MyTextFile.txt", FA_CREATE_NEW);
 80016f4:	4bb7      	ldr	r3, [pc, #732]	; (80019d4 <main+0x390>)
 80016f6:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80016fa:	f103 0310 	add.w	r3, r3, #16
 80016fe:	443b      	add	r3, r7
 8001700:	2204      	movs	r2, #4
 8001702:	49b5      	ldr	r1, [pc, #724]	; (80019d8 <main+0x394>)
 8001704:	4618      	mov	r0, r3
 8001706:	f018 fb8b 	bl	8019e20 <f_open>
 800170a:	4603      	mov	r3, r0
 800170c:	f642 0203 	movw	r2, #10243	; 0x2803
 8001710:	443a      	add	r2, r7
 8001712:	7013      	strb	r3, [r2, #0]
	f_close(&Fil);
 8001714:	4baf      	ldr	r3, [pc, #700]	; (80019d4 <main+0x390>)
 8001716:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800171a:	f103 0310 	add.w	r3, r3, #16
 800171e:	443b      	add	r3, r7
 8001720:	4618      	mov	r0, r3
 8001722:	f018 ff5b 	bl	801a5dc <f_close>

	LoRA_begin(868000000);
 8001726:	48ad      	ldr	r0, [pc, #692]	; (80019dc <main+0x398>)
 8001728:	f7ff fd1a 	bl	8001160 <LoRA_begin>
		}
		HAL_Delay(1000);
		LoRA_sendPacket("SENDIT");
	}*/

	int connected = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	f242 72fc 	movw	r2, #10236	; 0x27fc
 8001732:	443a      	add	r2, r7
 8001734:	6013      	str	r3, [r2, #0]
	long last_packet = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	f242 72f8 	movw	r2, #10232	; 0x27f8
 800173c:	443a      	add	r2, r7
 800173e:	6013      	str	r3, [r2, #0]
	int ARMED = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	f242 72f4 	movw	r2, #10228	; 0x27f4
 8001746:	443a      	add	r2, r7
 8001748:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//HAL_ADC_Start_DMA(&hadc3, &read_Data, 1);
	//char buffered_debug_data[MAX_PACKET_LENGTH];
	char state[MAX_PACKET_LENGTH] = "DISARMED";
 800174a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800174e:	f5a3 74da 	sub.w	r4, r3, #436	; 0x1b4
 8001752:	4aa3      	ldr	r2, [pc, #652]	; (80019e0 <main+0x39c>)
 8001754:	4623      	mov	r3, r4
 8001756:	6810      	ldr	r0, [r2, #0]
 8001758:	6851      	ldr	r1, [r2, #4]
 800175a:	c303      	stmia	r3!, {r0, r1}
 800175c:	7a12      	ldrb	r2, [r2, #8]
 800175e:	701a      	strb	r2, [r3, #0]
 8001760:	f104 0309 	add.w	r3, r4, #9
 8001764:	22f1      	movs	r2, #241	; 0xf1
 8001766:	2100      	movs	r1, #0
 8001768:	4618      	mov	r0, r3
 800176a:	f01a fdc6 	bl	801c2fa <memset>
	char command[MAX_PACKET_LENGTH];
	char recieved_packet[MAX_PACKET_LENGTH] = "";
 800176e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001772:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	3304      	adds	r3, #4
 800177c:	22f6      	movs	r2, #246	; 0xf6
 800177e:	2100      	movs	r1, #0
 8001780:	4618      	mov	r0, r3
 8001782:	f01a fdba 	bl	801c2fa <memset>
	char previous_packet[MAX_PACKET_LENGTH];
	char response_packet[MAX_PACKET_LENGTH];
	char packets_streamed[MAX_PACKET_LENGTH];
	int max_packet_count = 0;
 8001786:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800178a:	f2a3 63a4 	subw	r3, r3, #1700	; 0x6a4
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
	int packetId;
	char communication_state[MAX_PACKET_LENGTH] = "TRANSITIONING";
 8001792:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001796:	f5a3 65f4 	sub.w	r5, r3, #1952	; 0x7a0
 800179a:	4a92      	ldr	r2, [pc, #584]	; (80019e4 <main+0x3a0>)
 800179c:	462b      	mov	r3, r5
 800179e:	4614      	mov	r4, r2
 80017a0:	6820      	ldr	r0, [r4, #0]
 80017a2:	6861      	ldr	r1, [r4, #4]
 80017a4:	68a2      	ldr	r2, [r4, #8]
 80017a6:	c307      	stmia	r3!, {r0, r1, r2}
 80017a8:	89a2      	ldrh	r2, [r4, #12]
 80017aa:	801a      	strh	r2, [r3, #0]
 80017ac:	f105 030e 	add.w	r3, r5, #14
 80017b0:	22ec      	movs	r2, #236	; 0xec
 80017b2:	2100      	movs	r1, #0
 80017b4:	4618      	mov	r0, r3
 80017b6:	f01a fda0 	bl	801c2fa <memset>
		//sprintf(data, "%x", version);
		//CDC_Transmit_HS(data, strlen(data));
		LoRA_sendPacket("hello\n");
		HAL_Delay(1000);
	}*/
	uint32_t previousTime = HAL_GetTick();
 80017ba:	f002 fdad 	bl	8004318 <HAL_GetTick>
 80017be:	f642 030c 	movw	r3, #10252	; 0x280c
 80017c2:	443b      	add	r3, r7
 80017c4:	6018      	str	r0, [r3, #0]
	uint32_t wait_time = 1000;
 80017c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ca:	f642 0208 	movw	r2, #10248	; 0x2808
 80017ce:	443a      	add	r2, r7
 80017d0:	6013      	str	r3, [r2, #0]
			debugTime = HAL_GetTick();
			sprintf(response_packet, "Lora: %d, Sate: %s, Comms: %s\n", LoRA_Read_Register(REG_MODEM_CONFIG_1), state, communication_state);
			CDC_Transmit_HS(response_packet, strlen(response_packet));
		}*/

		if (strcmp(communication_state, "RECEIVING RELIABLE") == 0) {
 80017d2:	4b85      	ldr	r3, [pc, #532]	; (80019e8 <main+0x3a4>)
 80017d4:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80017d8:	f103 0310 	add.w	r3, r3, #16
 80017dc:	443b      	add	r3, r7
 80017de:	4983      	ldr	r1, [pc, #524]	; (80019ec <main+0x3a8>)
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7fe fd95 	bl	8000310 <strcmp>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f040 8094 	bne.w	8001916 <main+0x2d2>
			//CDC_Transmit_HS("hi4\n", strlen("hi4\n"));
			if (recv_packet(recieved_packet, MAX_PACKET_LENGTH)) {
 80017ee:	4b80      	ldr	r3, [pc, #512]	; (80019f0 <main+0x3ac>)
 80017f0:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80017f4:	f103 0310 	add.w	r3, r3, #16
 80017f8:	443b      	add	r3, r7
 80017fa:	21fa      	movs	r1, #250	; 0xfa
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fe83 	bl	8001508 <recv_packet>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d0e4      	beq.n	80017d2 <main+0x18e>
				//CDC_Transmit_HS("hi3", strlen("hi3"));
				previousTime = HAL_GetTick();
 8001808:	f002 fd86 	bl	8004318 <HAL_GetTick>
 800180c:	f642 030c 	movw	r3, #10252	; 0x280c
 8001810:	443b      	add	r3, r7
 8001812:	6018      	str	r0, [r3, #0]
				if (strcmp(recieved_packet, "$") == 0) {
 8001814:	4b76      	ldr	r3, [pc, #472]	; (80019f0 <main+0x3ac>)
 8001816:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800181a:	f103 0310 	add.w	r3, r3, #16
 800181e:	443b      	add	r3, r7
 8001820:	4974      	ldr	r1, [pc, #464]	; (80019f4 <main+0x3b0>)
 8001822:	4618      	mov	r0, r3
 8001824:	f7fe fd74 	bl	8000310 <strcmp>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d10d      	bne.n	800184a <main+0x206>
					//CDC_Transmit_HS("hi2", strlen("hi2"));
					strcpy(communication_state, "SENDING RELIABLE");
 800182e:	4b6e      	ldr	r3, [pc, #440]	; (80019e8 <main+0x3a4>)
 8001830:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001834:	f103 0310 	add.w	r3, r3, #16
 8001838:	443b      	add	r3, r7
 800183a:	4a6f      	ldr	r2, [pc, #444]	; (80019f8 <main+0x3b4>)
 800183c:	461c      	mov	r4, r3
 800183e:	4615      	mov	r5, r2
 8001840:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001842:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001844:	682b      	ldr	r3, [r5, #0]
 8001846:	7023      	strb	r3, [r4, #0]
 8001848:	e7c3      	b.n	80017d2 <main+0x18e>
				} else if(sscanf(recieved_packet, "! %d", &max_packet_count) == 1) {
 800184a:	4a6c      	ldr	r2, [pc, #432]	; (80019fc <main+0x3b8>)
 800184c:	f642 0310 	movw	r3, #10256	; 0x2810
 8001850:	4413      	add	r3, r2
 8001852:	19da      	adds	r2, r3, r7
 8001854:	4b66      	ldr	r3, [pc, #408]	; (80019f0 <main+0x3ac>)
 8001856:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800185a:	f103 0310 	add.w	r3, r3, #16
 800185e:	443b      	add	r3, r7
 8001860:	4967      	ldr	r1, [pc, #412]	; (8001a00 <main+0x3bc>)
 8001862:	4618      	mov	r0, r3
 8001864:	f01a fcd8 	bl	801c218 <siscanf>
 8001868:	4603      	mov	r3, r0
 800186a:	2b01      	cmp	r3, #1
 800186c:	d10f      	bne.n	800188e <main+0x24a>
					strcpy(communication_state,"SENDING STREAM");
 800186e:	4b5e      	ldr	r3, [pc, #376]	; (80019e8 <main+0x3a4>)
 8001870:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001874:	f103 0310 	add.w	r3, r3, #16
 8001878:	443b      	add	r3, r7
 800187a:	4a62      	ldr	r2, [pc, #392]	; (8001a04 <main+0x3c0>)
 800187c:	461c      	mov	r4, r3
 800187e:	4613      	mov	r3, r2
 8001880:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001882:	c407      	stmia	r4!, {r0, r1, r2}
 8001884:	8023      	strh	r3, [r4, #0]
 8001886:	3402      	adds	r4, #2
 8001888:	0c1b      	lsrs	r3, r3, #16
 800188a:	7023      	strb	r3, [r4, #0]
 800188c:	e7a1      	b.n	80017d2 <main+0x18e>
				} else if (strcmp(recieved_packet, previous_packet) == 0) {
 800188e:	4a5e      	ldr	r2, [pc, #376]	; (8001a08 <main+0x3c4>)
 8001890:	f642 0310 	movw	r3, #10256	; 0x2810
 8001894:	4413      	add	r3, r2
 8001896:	19da      	adds	r2, r3, r7
 8001898:	4b55      	ldr	r3, [pc, #340]	; (80019f0 <main+0x3ac>)
 800189a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800189e:	f103 0310 	add.w	r3, r3, #16
 80018a2:	443b      	add	r3, r7
 80018a4:	4611      	mov	r1, r2
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe fd32 	bl	8000310 <strcmp>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d109      	bne.n	80018c6 <main+0x282>
					//send acknowledge again
					LoRA_sendPacket(recieved_packet);
 80018b2:	4b4f      	ldr	r3, [pc, #316]	; (80019f0 <main+0x3ac>)
 80018b4:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80018b8:	f103 0310 	add.w	r3, r3, #16
 80018bc:	443b      	add	r3, r7
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff fcf4 	bl	80012ac <LoRA_sendPacket>
 80018c4:	e785      	b.n	80017d2 <main+0x18e>
				} else {
					//CDC_Transmit_HS("hi1", strlen("hi1"));
					strcpy(previous_packet, recieved_packet);
 80018c6:	4a4a      	ldr	r2, [pc, #296]	; (80019f0 <main+0x3ac>)
 80018c8:	f642 0310 	movw	r3, #10256	; 0x2810
 80018cc:	4413      	add	r3, r2
 80018ce:	19da      	adds	r2, r3, r7
 80018d0:	4b4d      	ldr	r3, [pc, #308]	; (8001a08 <main+0x3c4>)
 80018d2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80018d6:	f103 0310 	add.w	r3, r3, #16
 80018da:	443b      	add	r3, r7
 80018dc:	4611      	mov	r1, r2
 80018de:	4618      	mov	r0, r3
 80018e0:	f01a fd8b 	bl	801c3fa <strcpy>
					LoRA_sendPacket(recieved_packet);
 80018e4:	4b42      	ldr	r3, [pc, #264]	; (80019f0 <main+0x3ac>)
 80018e6:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80018ea:	f103 0310 	add.w	r3, r3, #16
 80018ee:	443b      	add	r3, r7
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fcdb 	bl	80012ac <LoRA_sendPacket>
					strcpy(command, recieved_packet);
 80018f6:	4a3e      	ldr	r2, [pc, #248]	; (80019f0 <main+0x3ac>)
 80018f8:	f642 0310 	movw	r3, #10256	; 0x2810
 80018fc:	4413      	add	r3, r2
 80018fe:	19da      	adds	r2, r3, r7
 8001900:	4b42      	ldr	r3, [pc, #264]	; (8001a0c <main+0x3c8>)
 8001902:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001906:	f103 0310 	add.w	r3, r3, #16
 800190a:	443b      	add	r3, r7
 800190c:	4611      	mov	r1, r2
 800190e:	4618      	mov	r0, r3
 8001910:	f01a fd73 	bl	801c3fa <strcpy>
 8001914:	e75d      	b.n	80017d2 <main+0x18e>
					//CDC_Transmit_HS(command, strlen(command));
				}
			}
		} else if (strcmp(communication_state, "RECEIVING STREAM") == 0){
 8001916:	4b34      	ldr	r3, [pc, #208]	; (80019e8 <main+0x3a4>)
 8001918:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800191c:	f103 0310 	add.w	r3, r3, #16
 8001920:	443b      	add	r3, r7
 8001922:	493b      	ldr	r1, [pc, #236]	; (8001a10 <main+0x3cc>)
 8001924:	4618      	mov	r0, r3
 8001926:	f7fe fcf3 	bl	8000310 <strcmp>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	f040 80af 	bne.w	8001a90 <main+0x44c>
			if(recv_packet(recieved_packet, MAX_PACKET_LENGTH))
 8001932:	4b2f      	ldr	r3, [pc, #188]	; (80019f0 <main+0x3ac>)
 8001934:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001938:	f103 0310 	add.w	r3, r3, #16
 800193c:	443b      	add	r3, r7
 800193e:	21fa      	movs	r1, #250	; 0xfa
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff fde1 	bl	8001508 <recv_packet>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d067      	beq.n	8001a1c <main+0x3d8>
			{
				previousTime = HAL_GetTick();
 800194c:	f002 fce4 	bl	8004318 <HAL_GetTick>
 8001950:	f642 030c 	movw	r3, #10252	; 0x280c
 8001954:	443b      	add	r3, r7
 8001956:	6018      	str	r0, [r3, #0]
				if(sscanf(recieved_packet, "$ %s", state) == 1)
 8001958:	4a2e      	ldr	r2, [pc, #184]	; (8001a14 <main+0x3d0>)
 800195a:	f642 0310 	movw	r3, #10256	; 0x2810
 800195e:	4413      	add	r3, r2
 8001960:	19da      	adds	r2, r3, r7
 8001962:	4b23      	ldr	r3, [pc, #140]	; (80019f0 <main+0x3ac>)
 8001964:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001968:	f103 0310 	add.w	r3, r3, #16
 800196c:	443b      	add	r3, r7
 800196e:	492a      	ldr	r1, [pc, #168]	; (8001a18 <main+0x3d4>)
 8001970:	4618      	mov	r0, r3
 8001972:	f01a fc51 	bl	801c218 <siscanf>
 8001976:	4603      	mov	r3, r0
 8001978:	2b01      	cmp	r3, #1
 800197a:	d10d      	bne.n	8001998 <main+0x354>
				{
					strcpy(communication_state,"SENDING RELIABLE");
 800197c:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <main+0x3a4>)
 800197e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001982:	f103 0310 	add.w	r3, r3, #16
 8001986:	443b      	add	r3, r7
 8001988:	4a1b      	ldr	r2, [pc, #108]	; (80019f8 <main+0x3b4>)
 800198a:	461c      	mov	r4, r3
 800198c:	4615      	mov	r5, r2
 800198e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001990:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001992:	682b      	ldr	r3, [r5, #0]
 8001994:	7023      	strb	r3, [r4, #0]
 8001996:	e71c      	b.n	80017d2 <main+0x18e>
				}
				else
				{
					CDC_Transmit_HS(recieved_packet, strlen(recieved_packet));
 8001998:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <main+0x3ac>)
 800199a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800199e:	f103 0310 	add.w	r3, r3, #16
 80019a2:	443b      	add	r3, r7
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe fd13 	bl	80003d0 <strlen>
 80019aa:	4602      	mov	r2, r0
 80019ac:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <main+0x3ac>)
 80019ae:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80019b2:	f103 0310 	add.w	r3, r3, #16
 80019b6:	443b      	add	r3, r7
 80019b8:	4611      	mov	r1, r2
 80019ba:	4618      	mov	r0, r3
 80019bc:	f019 f8b6 	bl	801ab2c <CDC_Transmit_HS>
 80019c0:	e707      	b.n	80017d2 <main+0x18e>
 80019c2:	bf00      	nop
 80019c4:	ffffef78 	.word	0xffffef78
 80019c8:	240016ac 	.word	0x240016ac
 80019cc:	240011f0 	.word	0x240011f0
 80019d0:	58021800 	.word	0x58021800
 80019d4:	ffffdf48 	.word	0xffffdf48
 80019d8:	0802024c 	.word	0x0802024c
 80019dc:	33bca100 	.word	0x33bca100
 80019e0:	08020238 	.word	0x08020238
 80019e4:	080202bc 	.word	0x080202bc
 80019e8:	ffffd860 	.word	0xffffd860
 80019ec:	0802025c 	.word	0x0802025c
 80019f0:	ffffdc54 	.word	0xffffdc54
 80019f4:	08020270 	.word	0x08020270
 80019f8:	08020274 	.word	0x08020274
 80019fc:	ffffd95c 	.word	0xffffd95c
 8001a00:	08020288 	.word	0x08020288
 8001a04:	08020290 	.word	0x08020290
 8001a08:	ffffdb58 	.word	0xffffdb58
 8001a0c:	ffffdd50 	.word	0xffffdd50
 8001a10:	080202a0 	.word	0x080202a0
 8001a14:	ffffde4c 	.word	0xffffde4c
 8001a18:	080202b4 	.word	0x080202b4
				}
			}
			else if(HAL_GetTick()-previousTime > wait_time)
 8001a1c:	f002 fc7c 	bl	8004318 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	f642 030c 	movw	r3, #10252	; 0x280c
 8001a26:	443b      	add	r3, r7
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	f642 0208 	movw	r2, #10248	; 0x2808
 8001a30:	443a      	add	r2, r7
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	f4bf aecc 	bcs.w	80017d2 <main+0x18e>
			{
			  wait_time = rand_range(3, 13)*100;
 8001a3a:	210d      	movs	r1, #13
 8001a3c:	2003      	movs	r0, #3
 8001a3e:	f7ff fa41 	bl	8000ec4 <rand_range>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2264      	movs	r2, #100	; 0x64
 8001a46:	fb02 f303 	mul.w	r3, r2, r3
 8001a4a:	f642 0208 	movw	r2, #10248	; 0x2808
 8001a4e:	443a      	add	r2, r7
 8001a50:	6013      	str	r3, [r2, #0]
			  previousTime = HAL_GetTick();
 8001a52:	f002 fc61 	bl	8004318 <HAL_GetTick>
 8001a56:	f642 030c 	movw	r3, #10252	; 0x280c
 8001a5a:	443b      	add	r3, r7
 8001a5c:	6018      	str	r0, [r3, #0]
			  //give up SENDING
			  sprintf(response_packet, "! %d", packets_streamed);
 8001a5e:	4ac6      	ldr	r2, [pc, #792]	; (8001d78 <main+0x734>)
 8001a60:	f642 0310 	movw	r3, #10256	; 0x2810
 8001a64:	4413      	add	r3, r2
 8001a66:	19da      	adds	r2, r3, r7
 8001a68:	4bc4      	ldr	r3, [pc, #784]	; (8001d7c <main+0x738>)
 8001a6a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001a6e:	f103 0310 	add.w	r3, r3, #16
 8001a72:	443b      	add	r3, r7
 8001a74:	49c2      	ldr	r1, [pc, #776]	; (8001d80 <main+0x73c>)
 8001a76:	4618      	mov	r0, r3
 8001a78:	f01a fbae 	bl	801c1d8 <siprintf>
			  LoRA_sendPacket(response_packet);
 8001a7c:	4bbf      	ldr	r3, [pc, #764]	; (8001d7c <main+0x738>)
 8001a7e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001a82:	f103 0310 	add.w	r3, r3, #16
 8001a86:	443b      	add	r3, r7
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff fc0f 	bl	80012ac <LoRA_sendPacket>
 8001a8e:	e6a0      	b.n	80017d2 <main+0x18e>
			}
		} else if(strcmp(communication_state,"SENDING STREAM") == 0) {
 8001a90:	4bbc      	ldr	r3, [pc, #752]	; (8001d84 <main+0x740>)
 8001a92:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001a96:	f103 0310 	add.w	r3, r3, #16
 8001a9a:	443b      	add	r3, r7
 8001a9c:	49ba      	ldr	r1, [pc, #744]	; (8001d88 <main+0x744>)
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7fe fc36 	bl	8000310 <strcmp>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f040 80a4 	bne.w	8001bf4 <main+0x5b0>
			if(max_packet_count == 0)
 8001aac:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001ab0:	f2a3 63a4 	subw	r3, r3, #1700	; 0x6a4
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d124      	bne.n	8001b04 <main+0x4c0>
			{
				strcpy(communication_state,"TRANSITIONING");
 8001aba:	4bb2      	ldr	r3, [pc, #712]	; (8001d84 <main+0x740>)
 8001abc:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001ac0:	f103 0310 	add.w	r3, r3, #16
 8001ac4:	443b      	add	r3, r7
 8001ac6:	4ab1      	ldr	r2, [pc, #708]	; (8001d8c <main+0x748>)
 8001ac8:	461c      	mov	r4, r3
 8001aca:	4613      	mov	r3, r2
 8001acc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ace:	c407      	stmia	r4!, {r0, r1, r2}
 8001ad0:	8023      	strh	r3, [r4, #0]
				sprintf(response_packet, "$ %s", state);
 8001ad2:	4aaf      	ldr	r2, [pc, #700]	; (8001d90 <main+0x74c>)
 8001ad4:	f642 0310 	movw	r3, #10256	; 0x2810
 8001ad8:	4413      	add	r3, r2
 8001ada:	19da      	adds	r2, r3, r7
 8001adc:	4ba7      	ldr	r3, [pc, #668]	; (8001d7c <main+0x738>)
 8001ade:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001ae2:	f103 0310 	add.w	r3, r3, #16
 8001ae6:	443b      	add	r3, r7
 8001ae8:	49aa      	ldr	r1, [pc, #680]	; (8001d94 <main+0x750>)
 8001aea:	4618      	mov	r0, r3
 8001aec:	f01a fb74 	bl	801c1d8 <siprintf>
				LoRA_sendPacket(response_packet);
 8001af0:	4ba2      	ldr	r3, [pc, #648]	; (8001d7c <main+0x738>)
 8001af2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001af6:	f103 0310 	add.w	r3, r3, #16
 8001afa:	443b      	add	r3, r7
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff fbd5 	bl	80012ac <LoRA_sendPacket>
 8001b02:	e666      	b.n	80017d2 <main+0x18e>
			}
			else
			{
				//send whatever
				if (strcmp(state, "ARMED") == 0) {
 8001b04:	4ba2      	ldr	r3, [pc, #648]	; (8001d90 <main+0x74c>)
 8001b06:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001b0a:	f103 0310 	add.w	r3, r3, #16
 8001b0e:	443b      	add	r3, r7
 8001b10:	49a1      	ldr	r1, [pc, #644]	; (8001d98 <main+0x754>)
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7fe fbfc 	bl	8000310 <strcmp>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d15e      	bne.n	8001bdc <main+0x598>
					if (strcmp(command, "FIRE") == 0) {
 8001b1e:	4b9f      	ldr	r3, [pc, #636]	; (8001d9c <main+0x758>)
 8001b20:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001b24:	f103 0310 	add.w	r3, r3, #16
 8001b28:	443b      	add	r3, r7
 8001b2a:	499d      	ldr	r1, [pc, #628]	; (8001da0 <main+0x75c>)
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe fbef 	bl	8000310 <strcmp>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d151      	bne.n	8001bdc <main+0x598>
						HAL_ADC_Start(&hadc1); // start the adc
 8001b38:	489a      	ldr	r0, [pc, #616]	; (8001da4 <main+0x760>)
 8001b3a:	f003 f927 	bl	8004d8c <HAL_ADC_Start>
						HAL_ADC_PollForConversion(&hadc1, 100); // poll for conversion
 8001b3e:	2164      	movs	r1, #100	; 0x64
 8001b40:	4898      	ldr	r0, [pc, #608]	; (8001da4 <main+0x760>)
 8001b42:	f003 fa21 	bl	8004f88 <HAL_ADC_PollForConversion>
						char debug_data[100];
						uint16_t adc_val = HAL_ADC_GetValue(&hadc1); // get the adc value
 8001b46:	4897      	ldr	r0, [pc, #604]	; (8001da4 <main+0x760>)
 8001b48:	f003 fb12 	bl	8005170 <HAL_ADC_GetValue>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	f242 72f2 	movw	r2, #10226	; 0x27f2
 8001b52:	443a      	add	r2, r7
 8001b54:	8013      	strh	r3, [r2, #0]
						sprintf(debug_data, "%d, %d\n", HAL_GetTick(), adc_val);
 8001b56:	f002 fbdf 	bl	8004318 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	f242 73f2 	movw	r3, #10226	; 0x27f2
 8001b60:	443b      	add	r3, r7
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	4890      	ldr	r0, [pc, #576]	; (8001da8 <main+0x764>)
 8001b66:	f642 0110 	movw	r1, #10256	; 0x2810
 8001b6a:	4401      	add	r1, r0
 8001b6c:	19c8      	adds	r0, r1, r7
 8001b6e:	498f      	ldr	r1, [pc, #572]	; (8001dac <main+0x768>)
 8001b70:	f01a fb32 	bl	801c1d8 <siprintf>
						FR_Status = f_open(&Fil, "MyTextFile.txt",
 8001b74:	4b8e      	ldr	r3, [pc, #568]	; (8001db0 <main+0x76c>)
 8001b76:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001b7a:	f103 0310 	add.w	r3, r3, #16
 8001b7e:	443b      	add	r3, r7
 8001b80:	2232      	movs	r2, #50	; 0x32
 8001b82:	498c      	ldr	r1, [pc, #560]	; (8001db4 <main+0x770>)
 8001b84:	4618      	mov	r0, r3
 8001b86:	f018 f94b 	bl	8019e20 <f_open>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	f642 0203 	movw	r2, #10243	; 0x2803
 8001b90:	443a      	add	r2, r7
 8001b92:	7013      	strb	r3, [r2, #0]
								FA_OPEN_APPEND | FA_WRITE);
						f_puts(debug_data, &Fil);
 8001b94:	4a86      	ldr	r2, [pc, #536]	; (8001db0 <main+0x76c>)
 8001b96:	f642 0310 	movw	r3, #10256	; 0x2810
 8001b9a:	4413      	add	r3, r2
 8001b9c:	19da      	adds	r2, r3, r7
 8001b9e:	4b82      	ldr	r3, [pc, #520]	; (8001da8 <main+0x764>)
 8001ba0:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001ba4:	f103 0310 	add.w	r3, r3, #16
 8001ba8:	443b      	add	r3, r7
 8001baa:	4611      	mov	r1, r2
 8001bac:	4618      	mov	r0, r3
 8001bae:	f018 fdb6 	bl	801a71e <f_puts>
						f_close(&Fil);
 8001bb2:	4b7f      	ldr	r3, [pc, #508]	; (8001db0 <main+0x76c>)
 8001bb4:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001bb8:	f103 0310 	add.w	r3, r3, #16
 8001bbc:	443b      	add	r3, r7
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f018 fd0c 	bl	801a5dc <f_close>
						HAL_ADC_Stop(&hadc1); // stop adc
 8001bc4:	4877      	ldr	r0, [pc, #476]	; (8001da4 <main+0x760>)
 8001bc6:	f003 f9ab 	bl	8004f20 <HAL_ADC_Stop>
						LoRA_sendPacket(debug_data);
 8001bca:	4b77      	ldr	r3, [pc, #476]	; (8001da8 <main+0x764>)
 8001bcc:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001bd0:	f103 0310 	add.w	r3, r3, #16
 8001bd4:	443b      	add	r3, r7
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff fb68 	bl	80012ac <LoRA_sendPacket>
					}
				}
				max_packet_count--;
 8001bdc:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001be0:	f2a3 63a4 	subw	r3, r3, #1700	; 0x6a4
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	1e5a      	subs	r2, r3, #1
 8001be8:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001bec:	f2a3 63a4 	subw	r3, r3, #1700	; 0x6a4
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	e5ee      	b.n	80017d2 <main+0x18e>
			}
			
		}
		else if (strcmp(communication_state, "SENDING RELIABLE") == 0) {
 8001bf4:	4b63      	ldr	r3, [pc, #396]	; (8001d84 <main+0x740>)
 8001bf6:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001bfa:	f103 0310 	add.w	r3, r3, #16
 8001bfe:	443b      	add	r3, r7
 8001c00:	496d      	ldr	r1, [pc, #436]	; (8001db8 <main+0x774>)
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fb84 	bl	8000310 <strcmp>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f040 81b0 	bne.w	8001f70 <main+0x92c>
			reliable_send_packet("*");
 8001c10:	486a      	ldr	r0, [pc, #424]	; (8001dbc <main+0x778>)
 8001c12:	f7ff fca8 	bl	8001566 <reliable_send_packet>
			if (strcmp(state, "DISARMED") == 0) {
 8001c16:	4b5e      	ldr	r3, [pc, #376]	; (8001d90 <main+0x74c>)
 8001c18:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001c1c:	f103 0310 	add.w	r3, r3, #16
 8001c20:	443b      	add	r3, r7
 8001c22:	4967      	ldr	r1, [pc, #412]	; (8001dc0 <main+0x77c>)
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7fe fb73 	bl	8000310 <strcmp>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f040 8121 	bne.w	8001e74 <main+0x830>
				if (strcmp(command, "ARM") == 0) {
 8001c32:	4b5a      	ldr	r3, [pc, #360]	; (8001d9c <main+0x758>)
 8001c34:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001c38:	f103 0310 	add.w	r3, r3, #16
 8001c3c:	443b      	add	r3, r7
 8001c3e:	4961      	ldr	r1, [pc, #388]	; (8001dc4 <main+0x780>)
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7fe fb65 	bl	8000310 <strcmp>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d113      	bne.n	8001c74 <main+0x630>
					//CDC_Transmit_HS("HELLO 2", strlen("HELLO 2"));
					if (!arm(state)) {
 8001c4c:	4b50      	ldr	r3, [pc, #320]	; (8001d90 <main+0x74c>)
 8001c4e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001c52:	f103 0310 	add.w	r3, r3, #16
 8001c56:	443b      	add	r3, r7
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fc23 	bl	80014a4 <arm>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d103      	bne.n	8001c6c <main+0x628>
						reliable_send_packet("ARM SUCCESS");
 8001c64:	4858      	ldr	r0, [pc, #352]	; (8001dc8 <main+0x784>)
 8001c66:	f7ff fc7e 	bl	8001566 <reliable_send_packet>
 8001c6a:	e15c      	b.n	8001f26 <main+0x8e2>
					} else {
						reliable_send_packet("ARM UNSUCCESSFUL");
 8001c6c:	4857      	ldr	r0, [pc, #348]	; (8001dcc <main+0x788>)
 8001c6e:	f7ff fc7a 	bl	8001566 <reliable_send_packet>
 8001c72:	e158      	b.n	8001f26 <main+0x8e2>
					}
				} else if (strcmp(command, "DISARM") == 0) {
 8001c74:	4b49      	ldr	r3, [pc, #292]	; (8001d9c <main+0x758>)
 8001c76:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001c7a:	f103 0310 	add.w	r3, r3, #16
 8001c7e:	443b      	add	r3, r7
 8001c80:	4953      	ldr	r1, [pc, #332]	; (8001dd0 <main+0x78c>)
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7fe fb44 	bl	8000310 <strcmp>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d103      	bne.n	8001c96 <main+0x652>
					reliable_send_packet("ALREADY DISARMED");
 8001c8e:	4851      	ldr	r0, [pc, #324]	; (8001dd4 <main+0x790>)
 8001c90:	f7ff fc69 	bl	8001566 <reliable_send_packet>
 8001c94:	e147      	b.n	8001f26 <main+0x8e2>
				} else if (strcmp(command, "CONT") == 0) {
 8001c96:	4b41      	ldr	r3, [pc, #260]	; (8001d9c <main+0x758>)
 8001c98:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001c9c:	f103 0310 	add.w	r3, r3, #16
 8001ca0:	443b      	add	r3, r7
 8001ca2:	494d      	ldr	r1, [pc, #308]	; (8001dd8 <main+0x794>)
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7fe fb33 	bl	8000310 <strcmp>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f040 813a 	bne.w	8001f26 <main+0x8e2>
					uint8_t CONTS[8];
					CONTS[0] = HAL_GPIO_ReadPin(CONT1_GPIO_Port, CONT1_Pin);
 8001cb2:	2104      	movs	r1, #4
 8001cb4:	4849      	ldr	r0, [pc, #292]	; (8001ddc <main+0x798>)
 8001cb6:	f007 fa21 	bl	80090fc <HAL_GPIO_ReadPin>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001cc2:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 8001cc6:	701a      	strb	r2, [r3, #0]
					CONTS[1] = HAL_GPIO_ReadPin(CONT2_GPIO_Port, CONT2_Pin);
 8001cc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ccc:	4844      	ldr	r0, [pc, #272]	; (8001de0 <main+0x79c>)
 8001cce:	f007 fa15 	bl	80090fc <HAL_GPIO_ReadPin>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001cda:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 8001cde:	705a      	strb	r2, [r3, #1]
					CONTS[2] = HAL_GPIO_ReadPin(CONT3_GPIO_Port, CONT3_Pin);
 8001ce0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ce4:	483e      	ldr	r0, [pc, #248]	; (8001de0 <main+0x79c>)
 8001ce6:	f007 fa09 	bl	80090fc <HAL_GPIO_ReadPin>
 8001cea:	4603      	mov	r3, r0
 8001cec:	461a      	mov	r2, r3
 8001cee:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001cf2:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 8001cf6:	709a      	strb	r2, [r3, #2]
					CONTS[3] = HAL_GPIO_ReadPin(CONT4_GPIO_Port, CONT4_Pin);
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	483a      	ldr	r0, [pc, #232]	; (8001de4 <main+0x7a0>)
 8001cfc:	f007 f9fe 	bl	80090fc <HAL_GPIO_ReadPin>
 8001d00:	4603      	mov	r3, r0
 8001d02:	461a      	mov	r2, r3
 8001d04:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001d08:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 8001d0c:	70da      	strb	r2, [r3, #3]
					CONTS[4] = HAL_GPIO_ReadPin(CONT5_GPIO_Port, CONT5_Pin);
 8001d0e:	2180      	movs	r1, #128	; 0x80
 8001d10:	4835      	ldr	r0, [pc, #212]	; (8001de8 <main+0x7a4>)
 8001d12:	f007 f9f3 	bl	80090fc <HAL_GPIO_ReadPin>
 8001d16:	4603      	mov	r3, r0
 8001d18:	461a      	mov	r2, r3
 8001d1a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001d1e:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 8001d22:	711a      	strb	r2, [r3, #4]
					CONTS[5] = HAL_GPIO_ReadPin(CONT6_GPIO_Port, CONT6_Pin);
 8001d24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d28:	482f      	ldr	r0, [pc, #188]	; (8001de8 <main+0x7a4>)
 8001d2a:	f007 f9e7 	bl	80090fc <HAL_GPIO_ReadPin>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	461a      	mov	r2, r3
 8001d32:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001d36:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 8001d3a:	715a      	strb	r2, [r3, #5]
					CONTS[6] = HAL_GPIO_ReadPin(CONT7_GPIO_Port, CONT7_Pin);
 8001d3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d40:	4829      	ldr	r0, [pc, #164]	; (8001de8 <main+0x7a4>)
 8001d42:	f007 f9db 	bl	80090fc <HAL_GPIO_ReadPin>
 8001d46:	4603      	mov	r3, r0
 8001d48:	461a      	mov	r2, r3
 8001d4a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001d4e:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 8001d52:	719a      	strb	r2, [r3, #6]
					CONTS[7] = HAL_GPIO_ReadPin(CONT8_GPIO_Port, CONT8_Pin);
 8001d54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d58:	4823      	ldr	r0, [pc, #140]	; (8001de8 <main+0x7a4>)
 8001d5a:	f007 f9cf 	bl	80090fc <HAL_GPIO_ReadPin>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	461a      	mov	r2, r3
 8001d62:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001d66:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 8001d6a:	71da      	strb	r2, [r3, #7]

					char message[100];
					for (int i = 0; i < 8; i++) {
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	f642 0204 	movw	r2, #10244	; 0x2804
 8001d72:	443a      	add	r2, r7
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	e076      	b.n	8001e66 <main+0x822>
 8001d78:	ffffd960 	.word	0xffffd960
 8001d7c:	ffffda5c 	.word	0xffffda5c
 8001d80:	08020288 	.word	0x08020288
 8001d84:	ffffd860 	.word	0xffffd860
 8001d88:	08020290 	.word	0x08020290
 8001d8c:	080202bc 	.word	0x080202bc
 8001d90:	ffffde4c 	.word	0xffffde4c
 8001d94:	080202b4 	.word	0x080202b4
 8001d98:	08020244 	.word	0x08020244
 8001d9c:	ffffdd50 	.word	0xffffdd50
 8001da0:	080202cc 	.word	0x080202cc
 8001da4:	24000c6c 	.word	0x24000c6c
 8001da8:	ffffd7f4 	.word	0xffffd7f4
 8001dac:	080202d4 	.word	0x080202d4
 8001db0:	ffffdf48 	.word	0xffffdf48
 8001db4:	0802024c 	.word	0x0802024c
 8001db8:	08020274 	.word	0x08020274
 8001dbc:	080202dc 	.word	0x080202dc
 8001dc0:	08020238 	.word	0x08020238
 8001dc4:	080202e0 	.word	0x080202e0
 8001dc8:	080202e4 	.word	0x080202e4
 8001dcc:	080202f0 	.word	0x080202f0
 8001dd0:	08020304 	.word	0x08020304
 8001dd4:	0802030c 	.word	0x0802030c
 8001dd8:	08020320 	.word	0x08020320
 8001ddc:	58020400 	.word	0x58020400
 8001de0:	58021400 	.word	0x58021400
 8001de4:	58021800 	.word	0x58021800
 8001de8:	58021000 	.word	0x58021000
						if (CONTS[i]) {
 8001dec:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001df0:	f5a3 62f5 	sub.w	r2, r3, #1960	; 0x7a8
 8001df4:	f642 0304 	movw	r3, #10244	; 0x2804
 8001df8:	443b      	add	r3, r7
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00f      	beq.n	8001e24 <main+0x7e0>
							sprintf(message, "PYRO %d DOESN'T HAVE CONTINUITY",
 8001e04:	f642 0304 	movw	r3, #10244	; 0x2804
 8001e08:	443b      	add	r3, r7
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	1c5a      	adds	r2, r3, #1
 8001e0e:	4ba3      	ldr	r3, [pc, #652]	; (800209c <main+0xa58>)
 8001e10:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001e14:	f103 0310 	add.w	r3, r3, #16
 8001e18:	443b      	add	r3, r7
 8001e1a:	49a1      	ldr	r1, [pc, #644]	; (80020a0 <main+0xa5c>)
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f01a f9db 	bl	801c1d8 <siprintf>
 8001e22:	e00e      	b.n	8001e42 <main+0x7fe>
									i + 1);
						} else {
							sprintf(message, "PYRO %d HAS CONTINUITY", i + 1);
 8001e24:	f642 0304 	movw	r3, #10244	; 0x2804
 8001e28:	443b      	add	r3, r7
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	1c5a      	adds	r2, r3, #1
 8001e2e:	4b9b      	ldr	r3, [pc, #620]	; (800209c <main+0xa58>)
 8001e30:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001e34:	f103 0310 	add.w	r3, r3, #16
 8001e38:	443b      	add	r3, r7
 8001e3a:	499a      	ldr	r1, [pc, #616]	; (80020a4 <main+0xa60>)
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f01a f9cb 	bl	801c1d8 <siprintf>
						}

						reliable_send_packet(message);
 8001e42:	4b96      	ldr	r3, [pc, #600]	; (800209c <main+0xa58>)
 8001e44:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001e48:	f103 0310 	add.w	r3, r3, #16
 8001e4c:	443b      	add	r3, r7
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff fb89 	bl	8001566 <reliable_send_packet>
					for (int i = 0; i < 8; i++) {
 8001e54:	f642 0304 	movw	r3, #10244	; 0x2804
 8001e58:	443b      	add	r3, r7
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	f642 0204 	movw	r2, #10244	; 0x2804
 8001e62:	443a      	add	r2, r7
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	f642 0304 	movw	r3, #10244	; 0x2804
 8001e6a:	443b      	add	r3, r7
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2b07      	cmp	r3, #7
 8001e70:	ddbc      	ble.n	8001dec <main+0x7a8>
 8001e72:	e058      	b.n	8001f26 <main+0x8e2>
					}
				}
			} else if (strcmp(state, "ARMED") == 0) {
 8001e74:	4b8c      	ldr	r3, [pc, #560]	; (80020a8 <main+0xa64>)
 8001e76:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001e7a:	f103 0310 	add.w	r3, r3, #16
 8001e7e:	443b      	add	r3, r7
 8001e80:	498a      	ldr	r1, [pc, #552]	; (80020ac <main+0xa68>)
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7fe fa44 	bl	8000310 <strcmp>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d13c      	bne.n	8001f08 <main+0x8c4>
				if (strcmp(command, "DISARM") == 0) {
 8001e8e:	4b88      	ldr	r3, [pc, #544]	; (80020b0 <main+0xa6c>)
 8001e90:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001e94:	f103 0310 	add.w	r3, r3, #16
 8001e98:	443b      	add	r3, r7
 8001e9a:	4986      	ldr	r1, [pc, #536]	; (80020b4 <main+0xa70>)
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7fe fa37 	bl	8000310 <strcmp>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d113      	bne.n	8001ed0 <main+0x88c>
					if (!disarm(state)) {
 8001ea8:	4b7f      	ldr	r3, [pc, #508]	; (80020a8 <main+0xa64>)
 8001eaa:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001eae:	f103 0310 	add.w	r3, r3, #16
 8001eb2:	443b      	add	r3, r7
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff fa81 	bl	80013bc <disarm>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d103      	bne.n	8001ec8 <main+0x884>
						reliable_send_packet("DISARM SUCCESS");
 8001ec0:	487d      	ldr	r0, [pc, #500]	; (80020b8 <main+0xa74>)
 8001ec2:	f7ff fb50 	bl	8001566 <reliable_send_packet>
 8001ec6:	e02e      	b.n	8001f26 <main+0x8e2>
					} else {
						reliable_send_packet("DISARM UNSUCCESS");
 8001ec8:	487c      	ldr	r0, [pc, #496]	; (80020bc <main+0xa78>)
 8001eca:	f7ff fb4c 	bl	8001566 <reliable_send_packet>
 8001ece:	e02a      	b.n	8001f26 <main+0x8e2>
					}
				} else if (strcmp(command, "ARM") == 0) {
 8001ed0:	4b77      	ldr	r3, [pc, #476]	; (80020b0 <main+0xa6c>)
 8001ed2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001ed6:	f103 0310 	add.w	r3, r3, #16
 8001eda:	443b      	add	r3, r7
 8001edc:	4978      	ldr	r1, [pc, #480]	; (80020c0 <main+0xa7c>)
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe fa16 	bl	8000310 <strcmp>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d103      	bne.n	8001ef2 <main+0x8ae>
					reliable_send_packet("ALREADY ARMED");
 8001eea:	4876      	ldr	r0, [pc, #472]	; (80020c4 <main+0xa80>)
 8001eec:	f7ff fb3b 	bl	8001566 <reliable_send_packet>
 8001ef0:	e019      	b.n	8001f26 <main+0x8e2>
				} else if (strcmp(command, "FIRE") == 0) {
 8001ef2:	4b6f      	ldr	r3, [pc, #444]	; (80020b0 <main+0xa6c>)
 8001ef4:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001ef8:	f103 0310 	add.w	r3, r3, #16
 8001efc:	443b      	add	r3, r7
 8001efe:	4972      	ldr	r1, [pc, #456]	; (80020c8 <main+0xa84>)
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe fa05 	bl	8000310 <strcmp>
 8001f06:	e00e      	b.n	8001f26 <main+0x8e2>
					//strcpy(state, "STATIC_FIRE_LOGGING");
				}
				//CDC_Transmit_HS("\nIamhere\n", strlen("\nIamhere\n"));
			} else {
				LoRA_sendPacket("state wrong!");
 8001f08:	4870      	ldr	r0, [pc, #448]	; (80020cc <main+0xa88>)
 8001f0a:	f7ff f9cf 	bl	80012ac <LoRA_sendPacket>
				HAL_Delay(100);
 8001f0e:	2064      	movs	r0, #100	; 0x64
 8001f10:	f002 fa0e 	bl	8004330 <HAL_Delay>
				LoRA_sendPacket(state);
 8001f14:	4b64      	ldr	r3, [pc, #400]	; (80020a8 <main+0xa64>)
 8001f16:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001f1a:	f103 0310 	add.w	r3, r3, #16
 8001f1e:	443b      	add	r3, r7
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff f9c3 	bl	80012ac <LoRA_sendPacket>
			}
			//HAL_Delay(100);
			sprintf(response_packet, "$ %s", state);
 8001f26:	4a60      	ldr	r2, [pc, #384]	; (80020a8 <main+0xa64>)
 8001f28:	f642 0310 	movw	r3, #10256	; 0x2810
 8001f2c:	4413      	add	r3, r2
 8001f2e:	19da      	adds	r2, r3, r7
 8001f30:	4b67      	ldr	r3, [pc, #412]	; (80020d0 <main+0xa8c>)
 8001f32:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001f36:	f103 0310 	add.w	r3, r3, #16
 8001f3a:	443b      	add	r3, r7
 8001f3c:	4965      	ldr	r1, [pc, #404]	; (80020d4 <main+0xa90>)
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f01a f94a 	bl	801c1d8 <siprintf>
			LoRA_sendPacket(response_packet);
 8001f44:	4b62      	ldr	r3, [pc, #392]	; (80020d0 <main+0xa8c>)
 8001f46:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001f4a:	f103 0310 	add.w	r3, r3, #16
 8001f4e:	443b      	add	r3, r7
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff f9ab 	bl	80012ac <LoRA_sendPacket>
			//CDC_Transmit_HS("\nIamhere2\n", strlen("\nIamhere2\n"));
			strcpy(communication_state, "TRANSITIONING");
 8001f56:	4b60      	ldr	r3, [pc, #384]	; (80020d8 <main+0xa94>)
 8001f58:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001f5c:	f103 0310 	add.w	r3, r3, #16
 8001f60:	443b      	add	r3, r7
 8001f62:	4a5e      	ldr	r2, [pc, #376]	; (80020dc <main+0xa98>)
 8001f64:	461c      	mov	r4, r3
 8001f66:	4613      	mov	r3, r2
 8001f68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f6a:	c407      	stmia	r4!, {r0, r1, r2}
 8001f6c:	8023      	strh	r3, [r4, #0]
 8001f6e:	e430      	b.n	80017d2 <main+0x18e>
		}
	    else if(strcmp(communication_state,"TRANSITIONING") == 0)
 8001f70:	4b59      	ldr	r3, [pc, #356]	; (80020d8 <main+0xa94>)
 8001f72:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001f76:	f103 0310 	add.w	r3, r3, #16
 8001f7a:	443b      	add	r3, r7
 8001f7c:	4957      	ldr	r1, [pc, #348]	; (80020dc <main+0xa98>)
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7fe f9c6 	bl	8000310 <strcmp>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f47f ac23 	bne.w	80017d2 <main+0x18e>
	    {
	        if(recv_packet(recieved_packet, MAX_PACKET_LENGTH))
 8001f8c:	4b54      	ldr	r3, [pc, #336]	; (80020e0 <main+0xa9c>)
 8001f8e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001f92:	f103 0310 	add.w	r3, r3, #16
 8001f96:	443b      	add	r3, r7
 8001f98:	21fa      	movs	r1, #250	; 0xfa
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff fab4 	bl	8001508 <recv_packet>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d03e      	beq.n	8002024 <main+0x9e0>
	        {
	          previousTime = HAL_GetTick();
 8001fa6:	f002 f9b7 	bl	8004318 <HAL_GetTick>
 8001faa:	f642 030c 	movw	r3, #10252	; 0x280c
 8001fae:	443b      	add	r3, r7
 8001fb0:	6018      	str	r0, [r3, #0]
	          if(strcmp(recieved_packet, "*")==0)
 8001fb2:	4b4b      	ldr	r3, [pc, #300]	; (80020e0 <main+0xa9c>)
 8001fb4:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001fb8:	f103 0310 	add.w	r3, r3, #16
 8001fbc:	443b      	add	r3, r7
 8001fbe:	4949      	ldr	r1, [pc, #292]	; (80020e4 <main+0xaa0>)
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7fe f9a5 	bl	8000310 <strcmp>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f47f ac02 	bne.w	80017d2 <main+0x18e>
	          {
	        	strcpy(previous_packet, recieved_packet);
 8001fce:	4a44      	ldr	r2, [pc, #272]	; (80020e0 <main+0xa9c>)
 8001fd0:	f642 0310 	movw	r3, #10256	; 0x2810
 8001fd4:	4413      	add	r3, r2
 8001fd6:	19da      	adds	r2, r3, r7
 8001fd8:	4b43      	ldr	r3, [pc, #268]	; (80020e8 <main+0xaa4>)
 8001fda:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001fde:	f103 0310 	add.w	r3, r3, #16
 8001fe2:	443b      	add	r3, r7
 8001fe4:	4611      	mov	r1, r2
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f01a fa07 	bl	801c3fa <strcpy>
	        	strcpy(communication_state, "RECEIVING RELIABLE");
 8001fec:	4b3a      	ldr	r3, [pc, #232]	; (80020d8 <main+0xa94>)
 8001fee:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001ff2:	f103 0310 	add.w	r3, r3, #16
 8001ff6:	443b      	add	r3, r7
 8001ff8:	4a3c      	ldr	r2, [pc, #240]	; (80020ec <main+0xaa8>)
 8001ffa:	461c      	mov	r4, r3
 8001ffc:	4615      	mov	r5, r2
 8001ffe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002000:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002002:	682b      	ldr	r3, [r5, #0]
 8002004:	461a      	mov	r2, r3
 8002006:	8022      	strh	r2, [r4, #0]
 8002008:	3402      	adds	r4, #2
 800200a:	0c1b      	lsrs	r3, r3, #16
 800200c:	7023      	strb	r3, [r4, #0]
	            LoRA_sendPacket(recieved_packet);
 800200e:	4b34      	ldr	r3, [pc, #208]	; (80020e0 <main+0xa9c>)
 8002010:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002014:	f103 0310 	add.w	r3, r3, #16
 8002018:	443b      	add	r3, r7
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff f946 	bl	80012ac <LoRA_sendPacket>
 8002020:	f7ff bbd7 	b.w	80017d2 <main+0x18e>
	          }
	        }
	        else if (HAL_GetTick()-previousTime > wait_time)
 8002024:	f002 f978 	bl	8004318 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	f642 030c 	movw	r3, #10252	; 0x280c
 800202e:	443b      	add	r3, r7
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	f642 0208 	movw	r2, #10248	; 0x2808
 8002038:	443a      	add	r2, r7
 800203a:	6812      	ldr	r2, [r2, #0]
 800203c:	429a      	cmp	r2, r3
 800203e:	f4bf abc8 	bcs.w	80017d2 <main+0x18e>
	        {
	          wait_time = rand_range(3, 13)*100;
 8002042:	210d      	movs	r1, #13
 8002044:	2003      	movs	r0, #3
 8002046:	f7fe ff3d 	bl	8000ec4 <rand_range>
 800204a:	4603      	mov	r3, r0
 800204c:	2264      	movs	r2, #100	; 0x64
 800204e:	fb02 f303 	mul.w	r3, r2, r3
 8002052:	f642 0208 	movw	r2, #10248	; 0x2808
 8002056:	443a      	add	r2, r7
 8002058:	6013      	str	r3, [r2, #0]
	          previousTime = HAL_GetTick();
 800205a:	f002 f95d 	bl	8004318 <HAL_GetTick>
 800205e:	f642 030c 	movw	r3, #10252	; 0x280c
 8002062:	443b      	add	r3, r7
 8002064:	6018      	str	r0, [r3, #0]
			  sprintf(response_packet, "$ %s", state);
 8002066:	4a10      	ldr	r2, [pc, #64]	; (80020a8 <main+0xa64>)
 8002068:	f642 0310 	movw	r3, #10256	; 0x2810
 800206c:	4413      	add	r3, r2
 800206e:	19da      	adds	r2, r3, r7
 8002070:	4b17      	ldr	r3, [pc, #92]	; (80020d0 <main+0xa8c>)
 8002072:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002076:	f103 0310 	add.w	r3, r3, #16
 800207a:	443b      	add	r3, r7
 800207c:	4915      	ldr	r1, [pc, #84]	; (80020d4 <main+0xa90>)
 800207e:	4618      	mov	r0, r3
 8002080:	f01a f8aa 	bl	801c1d8 <siprintf>
			  LoRA_sendPacket(response_packet);
 8002084:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <main+0xa8c>)
 8002086:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800208a:	f103 0310 	add.w	r3, r3, #16
 800208e:	443b      	add	r3, r7
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff f90b 	bl	80012ac <LoRA_sendPacket>
		if (strcmp(communication_state, "RECEIVING RELIABLE") == 0) {
 8002096:	f7ff bb9c 	b.w	80017d2 <main+0x18e>
 800209a:	bf00      	nop
 800209c:	ffffd7f4 	.word	0xffffd7f4
 80020a0:	08020328 	.word	0x08020328
 80020a4:	08020348 	.word	0x08020348
 80020a8:	ffffde4c 	.word	0xffffde4c
 80020ac:	08020244 	.word	0x08020244
 80020b0:	ffffdd50 	.word	0xffffdd50
 80020b4:	08020304 	.word	0x08020304
 80020b8:	08020360 	.word	0x08020360
 80020bc:	08020370 	.word	0x08020370
 80020c0:	080202e0 	.word	0x080202e0
 80020c4:	08020384 	.word	0x08020384
 80020c8:	080202cc 	.word	0x080202cc
 80020cc:	08020394 	.word	0x08020394
 80020d0:	ffffda5c 	.word	0xffffda5c
 80020d4:	080202b4 	.word	0x080202b4
 80020d8:	ffffd860 	.word	0xffffd860
 80020dc:	080202bc 	.word	0x080202bc
 80020e0:	ffffdc54 	.word	0xffffdc54
 80020e4:	080202dc 	.word	0x080202dc
 80020e8:	ffffdb58 	.word	0xffffdb58
 80020ec:	0802025c 	.word	0x0802025c

080020f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b09c      	sub	sp, #112	; 0x70
 80020f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020fa:	224c      	movs	r2, #76	; 0x4c
 80020fc:	2100      	movs	r1, #0
 80020fe:	4618      	mov	r0, r3
 8002100:	f01a f8fb 	bl	801c2fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002104:	1d3b      	adds	r3, r7, #4
 8002106:	2220      	movs	r2, #32
 8002108:	2100      	movs	r1, #0
 800210a:	4618      	mov	r0, r3
 800210c:	f01a f8f5 	bl	801c2fa <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002110:	2002      	movs	r0, #2
 8002112:	f008 fc1f 	bl	800a954 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002116:	2300      	movs	r3, #0
 8002118:	603b      	str	r3, [r7, #0]
 800211a:	4b30      	ldr	r3, [pc, #192]	; (80021dc <SystemClock_Config+0xec>)
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002122:	4a2e      	ldr	r2, [pc, #184]	; (80021dc <SystemClock_Config+0xec>)
 8002124:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002128:	6193      	str	r3, [r2, #24]
 800212a:	4b2c      	ldr	r3, [pc, #176]	; (80021dc <SystemClock_Config+0xec>)
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002132:	603b      	str	r3, [r7, #0]
 8002134:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002136:	bf00      	nop
 8002138:	4b28      	ldr	r3, [pc, #160]	; (80021dc <SystemClock_Config+0xec>)
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002140:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002144:	d1f8      	bne.n	8002138 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8002146:	2322      	movs	r3, #34	; 0x22
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800214a:	2301      	movs	r3, #1
 800214c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800214e:	2340      	movs	r3, #64	; 0x40
 8002150:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002152:	2301      	movs	r3, #1
 8002154:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002156:	2302      	movs	r3, #2
 8002158:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800215a:	2300      	movs	r3, #0
 800215c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800215e:	2304      	movs	r3, #4
 8002160:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8002162:	230c      	movs	r3, #12
 8002164:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8002166:	2301      	movs	r3, #1
 8002168:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800216a:	2303      	movs	r3, #3
 800216c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800216e:	2302      	movs	r3, #2
 8002170:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002172:	230c      	movs	r3, #12
 8002174:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002176:	2300      	movs	r3, #0
 8002178:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800217a:	2300      	movs	r3, #0
 800217c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800217e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002182:	4618      	mov	r0, r3
 8002184:	f008 fc30 	bl	800a9e8 <HAL_RCC_OscConfig>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800218e:	f000 ff4f 	bl	8003030 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002192:	233f      	movs	r3, #63	; 0x3f
 8002194:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002196:	2303      	movs	r3, #3
 8002198:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800219e:	2308      	movs	r3, #8
 80021a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80021a2:	2340      	movs	r3, #64	; 0x40
 80021a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80021a6:	2340      	movs	r3, #64	; 0x40
 80021a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80021aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021ae:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80021b0:	2340      	movs	r3, #64	; 0x40
 80021b2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80021b4:	1d3b      	adds	r3, r7, #4
 80021b6:	2101      	movs	r1, #1
 80021b8:	4618      	mov	r0, r3
 80021ba:	f008 ffef 	bl	800b19c <HAL_RCC_ClockConfig>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80021c4:	f000 ff34 	bl	8003030 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80021c8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80021cc:	2100      	movs	r1, #0
 80021ce:	2000      	movs	r0, #0
 80021d0:	f009 f99a 	bl	800b508 <HAL_RCC_MCOConfig>
}
 80021d4:	bf00      	nop
 80021d6:	3770      	adds	r7, #112	; 0x70
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	58024800 	.word	0x58024800

080021e0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b0ae      	sub	sp, #184	; 0xb8
 80021e4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021e6:	463b      	mov	r3, r7
 80021e8:	22b8      	movs	r2, #184	; 0xb8
 80021ea:	2100      	movs	r1, #0
 80021ec:	4618      	mov	r0, r3
 80021ee:	f01a f884 	bl	801c2fa <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 80021f2:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 80021f6:	f04f 0300 	mov.w	r3, #0
 80021fa:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80021fe:	2304      	movs	r3, #4
 8002200:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8002202:	230c      	movs	r3, #12
 8002204:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8002206:	2304      	movs	r3, #4
 8002208:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800220a:	2302      	movs	r3, #2
 800220c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800220e:	2302      	movs	r3, #2
 8002210:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8002212:	23c0      	movs	r3, #192	; 0xc0
 8002214:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8002216:	2300      	movs	r3, #0
 8002218:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800221e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002222:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002224:	2300      	movs	r3, #0
 8002226:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800222a:	463b      	mov	r3, r7
 800222c:	4618      	mov	r0, r3
 800222e:	f009 fbab 	bl	800b988 <HAL_RCCEx_PeriphCLKConfig>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8002238:	f000 fefa 	bl	8003030 <Error_Handler>
  }
}
 800223c:	bf00      	nop
 800223e:	37b8      	adds	r7, #184	; 0xb8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08c      	sub	sp, #48	; 0x30
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800224a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	605a      	str	r2, [r3, #4]
 8002254:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002256:	463b      	mov	r3, r7
 8002258:	2224      	movs	r2, #36	; 0x24
 800225a:	2100      	movs	r1, #0
 800225c:	4618      	mov	r0, r3
 800225e:	f01a f84c 	bl	801c2fa <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002262:	4b31      	ldr	r3, [pc, #196]	; (8002328 <MX_ADC1_Init+0xe4>)
 8002264:	4a31      	ldr	r2, [pc, #196]	; (800232c <MX_ADC1_Init+0xe8>)
 8002266:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8002268:	4b2f      	ldr	r3, [pc, #188]	; (8002328 <MX_ADC1_Init+0xe4>)
 800226a:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 800226e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8002270:	4b2d      	ldr	r3, [pc, #180]	; (8002328 <MX_ADC1_Init+0xe4>)
 8002272:	2200      	movs	r2, #0
 8002274:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002276:	4b2c      	ldr	r3, [pc, #176]	; (8002328 <MX_ADC1_Init+0xe4>)
 8002278:	2200      	movs	r2, #0
 800227a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800227c:	4b2a      	ldr	r3, [pc, #168]	; (8002328 <MX_ADC1_Init+0xe4>)
 800227e:	2204      	movs	r2, #4
 8002280:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002282:	4b29      	ldr	r3, [pc, #164]	; (8002328 <MX_ADC1_Init+0xe4>)
 8002284:	2200      	movs	r2, #0
 8002286:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002288:	4b27      	ldr	r3, [pc, #156]	; (8002328 <MX_ADC1_Init+0xe4>)
 800228a:	2200      	movs	r2, #0
 800228c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800228e:	4b26      	ldr	r3, [pc, #152]	; (8002328 <MX_ADC1_Init+0xe4>)
 8002290:	2201      	movs	r2, #1
 8002292:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002294:	4b24      	ldr	r3, [pc, #144]	; (8002328 <MX_ADC1_Init+0xe4>)
 8002296:	2200      	movs	r2, #0
 8002298:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800229c:	4b22      	ldr	r3, [pc, #136]	; (8002328 <MX_ADC1_Init+0xe4>)
 800229e:	2200      	movs	r2, #0
 80022a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022a2:	4b21      	ldr	r3, [pc, #132]	; (8002328 <MX_ADC1_Init+0xe4>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80022a8:	4b1f      	ldr	r3, [pc, #124]	; (8002328 <MX_ADC1_Init+0xe4>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80022ae:	4b1e      	ldr	r3, [pc, #120]	; (8002328 <MX_ADC1_Init+0xe4>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80022b4:	4b1c      	ldr	r3, [pc, #112]	; (8002328 <MX_ADC1_Init+0xe4>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80022ba:	4b1b      	ldr	r3, [pc, #108]	; (8002328 <MX_ADC1_Init+0xe4>)
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022c2:	4819      	ldr	r0, [pc, #100]	; (8002328 <MX_ADC1_Init+0xe4>)
 80022c4:	f002 fb5a 	bl	800497c <HAL_ADC_Init>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80022ce:	f000 feaf 	bl	8003030 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80022d2:	2300      	movs	r3, #0
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80022d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022da:	4619      	mov	r1, r3
 80022dc:	4812      	ldr	r0, [pc, #72]	; (8002328 <MX_ADC1_Init+0xe4>)
 80022de:	f003 ff3b 	bl	8006158 <HAL_ADCEx_MultiModeConfigChannel>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80022e8:	f000 fea2 	bl	8003030 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80022ec:	4b10      	ldr	r3, [pc, #64]	; (8002330 <MX_ADC1_Init+0xec>)
 80022ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80022f0:	2306      	movs	r3, #6
 80022f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 80022f4:	2303      	movs	r3, #3
 80022f6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80022f8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80022fc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80022fe:	2304      	movs	r3, #4
 8002300:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002302:	2300      	movs	r3, #0
 8002304:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8002306:	2300      	movs	r3, #0
 8002308:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800230c:	463b      	mov	r3, r7
 800230e:	4619      	mov	r1, r3
 8002310:	4805      	ldr	r0, [pc, #20]	; (8002328 <MX_ADC1_Init+0xe4>)
 8002312:	f002 ff3b 	bl	800518c <HAL_ADC_ConfigChannel>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 800231c:	f000 fe88 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002320:	bf00      	nop
 8002322:	3730      	adds	r7, #48	; 0x30
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	24000c6c 	.word	0x24000c6c
 800232c:	40022000 	.word	0x40022000
 8002330:	3ac04000 	.word	0x3ac04000

08002334 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08a      	sub	sp, #40	; 0x28
 8002338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800233a:	1d3b      	adds	r3, r7, #4
 800233c:	2224      	movs	r2, #36	; 0x24
 800233e:	2100      	movs	r1, #0
 8002340:	4618      	mov	r0, r3
 8002342:	f019 ffda 	bl	801c2fa <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8002346:	4b2f      	ldr	r3, [pc, #188]	; (8002404 <MX_ADC3_Init+0xd0>)
 8002348:	4a2f      	ldr	r2, [pc, #188]	; (8002408 <MX_ADC3_Init+0xd4>)
 800234a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 800234c:	4b2d      	ldr	r3, [pc, #180]	; (8002404 <MX_ADC3_Init+0xd0>)
 800234e:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8002352:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002354:	4b2b      	ldr	r3, [pc, #172]	; (8002404 <MX_ADC3_Init+0xd0>)
 8002356:	2208      	movs	r2, #8
 8002358:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 800235a:	4b2a      	ldr	r3, [pc, #168]	; (8002404 <MX_ADC3_Init+0xd0>)
 800235c:	2200      	movs	r2, #0
 800235e:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002360:	4b28      	ldr	r3, [pc, #160]	; (8002404 <MX_ADC3_Init+0xd0>)
 8002362:	2200      	movs	r2, #0
 8002364:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002366:	4b27      	ldr	r3, [pc, #156]	; (8002404 <MX_ADC3_Init+0xd0>)
 8002368:	2204      	movs	r2, #4
 800236a:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800236c:	4b25      	ldr	r3, [pc, #148]	; (8002404 <MX_ADC3_Init+0xd0>)
 800236e:	2200      	movs	r2, #0
 8002370:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002372:	4b24      	ldr	r3, [pc, #144]	; (8002404 <MX_ADC3_Init+0xd0>)
 8002374:	2200      	movs	r2, #0
 8002376:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8002378:	4b22      	ldr	r3, [pc, #136]	; (8002404 <MX_ADC3_Init+0xd0>)
 800237a:	2201      	movs	r2, #1
 800237c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800237e:	4b21      	ldr	r3, [pc, #132]	; (8002404 <MX_ADC3_Init+0xd0>)
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002386:	4b1f      	ldr	r3, [pc, #124]	; (8002404 <MX_ADC3_Init+0xd0>)
 8002388:	2200      	movs	r2, #0
 800238a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800238c:	4b1d      	ldr	r3, [pc, #116]	; (8002404 <MX_ADC3_Init+0xd0>)
 800238e:	2200      	movs	r2, #0
 8002390:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8002392:	4b1c      	ldr	r3, [pc, #112]	; (8002404 <MX_ADC3_Init+0xd0>)
 8002394:	2201      	movs	r2, #1
 8002396:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 800239a:	4b1a      	ldr	r3, [pc, #104]	; (8002404 <MX_ADC3_Init+0xd0>)
 800239c:	2200      	movs	r2, #0
 800239e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80023a0:	4b18      	ldr	r3, [pc, #96]	; (8002404 <MX_ADC3_Init+0xd0>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80023a6:	4b17      	ldr	r3, [pc, #92]	; (8002404 <MX_ADC3_Init+0xd0>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80023ac:	4b15      	ldr	r3, [pc, #84]	; (8002404 <MX_ADC3_Init+0xd0>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 80023b2:	4b14      	ldr	r3, [pc, #80]	; (8002404 <MX_ADC3_Init+0xd0>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80023ba:	4812      	ldr	r0, [pc, #72]	; (8002404 <MX_ADC3_Init+0xd0>)
 80023bc:	f002 fade 	bl	800497c <HAL_ADC_Init>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 80023c6:	f000 fe33 	bl	8003030 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80023ca:	4b10      	ldr	r3, [pc, #64]	; (800240c <MX_ADC3_Init+0xd8>)
 80023cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80023ce:	2306      	movs	r3, #6
 80023d0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 80023d2:	2300      	movs	r3, #0
 80023d4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80023d6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80023da:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80023dc:	2304      	movs	r3, #4
 80023de:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80023e4:	2300      	movs	r3, #0
 80023e6:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80023e8:	1d3b      	adds	r3, r7, #4
 80023ea:	4619      	mov	r1, r3
 80023ec:	4805      	ldr	r0, [pc, #20]	; (8002404 <MX_ADC3_Init+0xd0>)
 80023ee:	f002 fecd 	bl	800518c <HAL_ADC_ConfigChannel>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 80023f8:	f000 fe1a 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80023fc:	bf00      	nop
 80023fe:	3728      	adds	r7, #40	; 0x28
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	24000cdc 	.word	0x24000cdc
 8002408:	58026000 	.word	0x58026000
 800240c:	04300002 	.word	0x04300002

08002410 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8002414:	4b2e      	ldr	r3, [pc, #184]	; (80024d0 <MX_FDCAN3_Init+0xc0>)
 8002416:	4a2f      	ldr	r2, [pc, #188]	; (80024d4 <MX_FDCAN3_Init+0xc4>)
 8002418:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800241a:	4b2d      	ldr	r3, [pc, #180]	; (80024d0 <MX_FDCAN3_Init+0xc0>)
 800241c:	2200      	movs	r2, #0
 800241e:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8002420:	4b2b      	ldr	r3, [pc, #172]	; (80024d0 <MX_FDCAN3_Init+0xc0>)
 8002422:	2200      	movs	r2, #0
 8002424:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8002426:	4b2a      	ldr	r3, [pc, #168]	; (80024d0 <MX_FDCAN3_Init+0xc0>)
 8002428:	2200      	movs	r2, #0
 800242a:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 800242c:	4b28      	ldr	r3, [pc, #160]	; (80024d0 <MX_FDCAN3_Init+0xc0>)
 800242e:	2200      	movs	r2, #0
 8002430:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8002432:	4b27      	ldr	r3, [pc, #156]	; (80024d0 <MX_FDCAN3_Init+0xc0>)
 8002434:	2200      	movs	r2, #0
 8002436:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8002438:	4b25      	ldr	r3, [pc, #148]	; (80024d0 <MX_FDCAN3_Init+0xc0>)
 800243a:	2210      	movs	r2, #16
 800243c:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 800243e:	4b24      	ldr	r3, [pc, #144]	; (80024d0 <MX_FDCAN3_Init+0xc0>)
 8002440:	2201      	movs	r2, #1
 8002442:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8002444:	4b22      	ldr	r3, [pc, #136]	; (80024d0 <MX_FDCAN3_Init+0xc0>)
 8002446:	2202      	movs	r2, #2
 8002448:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 800244a:	4b21      	ldr	r3, [pc, #132]	; (80024d0 <MX_FDCAN3_Init+0xc0>)
 800244c:	2202      	movs	r2, #2
 800244e:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8002450:	4b1f      	ldr	r3, [pc, #124]	; (80024d0 <MX_FDCAN3_Init+0xc0>)
 8002452:	2201      	movs	r2, #1
 8002454:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8002456:	4b1e      	ldr	r3, [pc, #120]	; (80024d0 <MX_FDCAN3_Init+0xc0>)
 8002458:	2201      	movs	r2, #1
 800245a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 800245c:	4b1c      	ldr	r3, [pc, #112]	; (80024d0 <MX_FDCAN3_Init+0xc0>)
 800245e:	2201      	movs	r2, #1
 8002460:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8002462:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <MX_FDCAN3_Init+0xc0>)
 8002464:	2201      	movs	r2, #1
 8002466:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8002468:	4b19      	ldr	r3, [pc, #100]	; (80024d0 <MX_FDCAN3_Init+0xc0>)
 800246a:	2200      	movs	r2, #0
 800246c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 800246e:	4b18      	ldr	r3, [pc, #96]	; (80024d0 <MX_FDCAN3_Init+0xc0>)
 8002470:	2200      	movs	r2, #0
 8002472:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8002474:	4b16      	ldr	r3, [pc, #88]	; (80024d0 <MX_FDCAN3_Init+0xc0>)
 8002476:	2200      	movs	r2, #0
 8002478:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 800247a:	4b15      	ldr	r3, [pc, #84]	; (80024d0 <MX_FDCAN3_Init+0xc0>)
 800247c:	2200      	movs	r2, #0
 800247e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8002480:	4b13      	ldr	r3, [pc, #76]	; (80024d0 <MX_FDCAN3_Init+0xc0>)
 8002482:	2204      	movs	r2, #4
 8002484:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8002486:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <MX_FDCAN3_Init+0xc0>)
 8002488:	2200      	movs	r2, #0
 800248a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800248c:	4b10      	ldr	r3, [pc, #64]	; (80024d0 <MX_FDCAN3_Init+0xc0>)
 800248e:	2204      	movs	r2, #4
 8002490:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8002492:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <MX_FDCAN3_Init+0xc0>)
 8002494:	2200      	movs	r2, #0
 8002496:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8002498:	4b0d      	ldr	r3, [pc, #52]	; (80024d0 <MX_FDCAN3_Init+0xc0>)
 800249a:	2204      	movs	r2, #4
 800249c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 800249e:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <MX_FDCAN3_Init+0xc0>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 80024a4:	4b0a      	ldr	r3, [pc, #40]	; (80024d0 <MX_FDCAN3_Init+0xc0>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 80024aa:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <MX_FDCAN3_Init+0xc0>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80024b0:	4b07      	ldr	r3, [pc, #28]	; (80024d0 <MX_FDCAN3_Init+0xc0>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80024b6:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <MX_FDCAN3_Init+0xc0>)
 80024b8:	2204      	movs	r2, #4
 80024ba:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 80024bc:	4804      	ldr	r0, [pc, #16]	; (80024d0 <MX_FDCAN3_Init+0xc0>)
 80024be:	f006 f911 	bl	80086e4 <HAL_FDCAN_Init>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 80024c8:	f000 fdb2 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 80024cc:	bf00      	nop
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	24000e3c 	.word	0x24000e3c
 80024d4:	4000d400 	.word	0x4000d400

080024d8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80024dc:	4b1b      	ldr	r3, [pc, #108]	; (800254c <MX_I2C2_Init+0x74>)
 80024de:	4a1c      	ldr	r2, [pc, #112]	; (8002550 <MX_I2C2_Init+0x78>)
 80024e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 80024e2:	4b1a      	ldr	r3, [pc, #104]	; (800254c <MX_I2C2_Init+0x74>)
 80024e4:	4a1b      	ldr	r2, [pc, #108]	; (8002554 <MX_I2C2_Init+0x7c>)
 80024e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80024e8:	4b18      	ldr	r3, [pc, #96]	; (800254c <MX_I2C2_Init+0x74>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024ee:	4b17      	ldr	r3, [pc, #92]	; (800254c <MX_I2C2_Init+0x74>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024f4:	4b15      	ldr	r3, [pc, #84]	; (800254c <MX_I2C2_Init+0x74>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80024fa:	4b14      	ldr	r3, [pc, #80]	; (800254c <MX_I2C2_Init+0x74>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002500:	4b12      	ldr	r3, [pc, #72]	; (800254c <MX_I2C2_Init+0x74>)
 8002502:	2200      	movs	r2, #0
 8002504:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002506:	4b11      	ldr	r3, [pc, #68]	; (800254c <MX_I2C2_Init+0x74>)
 8002508:	2200      	movs	r2, #0
 800250a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800250c:	4b0f      	ldr	r3, [pc, #60]	; (800254c <MX_I2C2_Init+0x74>)
 800250e:	2200      	movs	r2, #0
 8002510:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002512:	480e      	ldr	r0, [pc, #56]	; (800254c <MX_I2C2_Init+0x74>)
 8002514:	f006 fe24 	bl	8009160 <HAL_I2C_Init>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800251e:	f000 fd87 	bl	8003030 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002522:	2100      	movs	r1, #0
 8002524:	4809      	ldr	r0, [pc, #36]	; (800254c <MX_I2C2_Init+0x74>)
 8002526:	f006 fec5 	bl	80092b4 <HAL_I2CEx_ConfigAnalogFilter>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002530:	f000 fd7e 	bl	8003030 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002534:	2100      	movs	r1, #0
 8002536:	4805      	ldr	r0, [pc, #20]	; (800254c <MX_I2C2_Init+0x74>)
 8002538:	f006 ff07 	bl	800934a <HAL_I2CEx_ConfigDigitalFilter>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002542:	f000 fd75 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	24000edc 	.word	0x24000edc
 8002550:	40005800 	.word	0x40005800
 8002554:	20303e5d 	.word	0x20303e5d

08002558 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800255c:	4b07      	ldr	r3, [pc, #28]	; (800257c <MX_RNG_Init+0x24>)
 800255e:	4a08      	ldr	r2, [pc, #32]	; (8002580 <MX_RNG_Init+0x28>)
 8002560:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8002562:	4b06      	ldr	r3, [pc, #24]	; (800257c <MX_RNG_Init+0x24>)
 8002564:	2200      	movs	r2, #0
 8002566:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002568:	4804      	ldr	r0, [pc, #16]	; (800257c <MX_RNG_Init+0x24>)
 800256a:	f00b fdf3 	bl	800e154 <HAL_RNG_Init>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8002574:	f000 fd5c 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002578:	bf00      	nop
 800257a:	bd80      	pop	{r7, pc}
 800257c:	24000f30 	.word	0x24000f30
 8002580:	48021800 	.word	0x48021800

08002584 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <MX_SDMMC2_SD_Init+0x34>)
 800258a:	4a0c      	ldr	r2, [pc, #48]	; (80025bc <MX_SDMMC2_SD_Init+0x38>)
 800258c:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800258e:	4b0a      	ldr	r3, [pc, #40]	; (80025b8 <MX_SDMMC2_SD_Init+0x34>)
 8002590:	2200      	movs	r2, #0
 8002592:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002594:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <MX_SDMMC2_SD_Init+0x34>)
 8002596:	2200      	movs	r2, #0
 8002598:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800259a:	4b07      	ldr	r3, [pc, #28]	; (80025b8 <MX_SDMMC2_SD_Init+0x34>)
 800259c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025a0:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80025a2:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <MX_SDMMC2_SD_Init+0x34>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 8;
 80025a8:	4b03      	ldr	r3, [pc, #12]	; (80025b8 <MX_SDMMC2_SD_Init+0x34>)
 80025aa:	2208      	movs	r2, #8
 80025ac:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 80025ae:	bf00      	nop
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	24000f44 	.word	0x24000f44
 80025bc:	48022400 	.word	0x48022400

080025c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80025c4:	4b27      	ldr	r3, [pc, #156]	; (8002664 <MX_SPI1_Init+0xa4>)
 80025c6:	4a28      	ldr	r2, [pc, #160]	; (8002668 <MX_SPI1_Init+0xa8>)
 80025c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025ca:	4b26      	ldr	r3, [pc, #152]	; (8002664 <MX_SPI1_Init+0xa4>)
 80025cc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80025d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025d2:	4b24      	ldr	r3, [pc, #144]	; (8002664 <MX_SPI1_Init+0xa4>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025d8:	4b22      	ldr	r3, [pc, #136]	; (8002664 <MX_SPI1_Init+0xa4>)
 80025da:	2207      	movs	r2, #7
 80025dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025de:	4b21      	ldr	r3, [pc, #132]	; (8002664 <MX_SPI1_Init+0xa4>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025e4:	4b1f      	ldr	r3, [pc, #124]	; (8002664 <MX_SPI1_Init+0xa4>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025ea:	4b1e      	ldr	r3, [pc, #120]	; (8002664 <MX_SPI1_Init+0xa4>)
 80025ec:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80025f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80025f2:	4b1c      	ldr	r3, [pc, #112]	; (8002664 <MX_SPI1_Init+0xa4>)
 80025f4:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80025f8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025fa:	4b1a      	ldr	r3, [pc, #104]	; (8002664 <MX_SPI1_Init+0xa4>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002600:	4b18      	ldr	r3, [pc, #96]	; (8002664 <MX_SPI1_Init+0xa4>)
 8002602:	2200      	movs	r2, #0
 8002604:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002606:	4b17      	ldr	r3, [pc, #92]	; (8002664 <MX_SPI1_Init+0xa4>)
 8002608:	2200      	movs	r2, #0
 800260a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800260c:	4b15      	ldr	r3, [pc, #84]	; (8002664 <MX_SPI1_Init+0xa4>)
 800260e:	2200      	movs	r2, #0
 8002610:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002612:	4b14      	ldr	r3, [pc, #80]	; (8002664 <MX_SPI1_Init+0xa4>)
 8002614:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002618:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800261a:	4b12      	ldr	r3, [pc, #72]	; (8002664 <MX_SPI1_Init+0xa4>)
 800261c:	2200      	movs	r2, #0
 800261e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002620:	4b10      	ldr	r3, [pc, #64]	; (8002664 <MX_SPI1_Init+0xa4>)
 8002622:	2200      	movs	r2, #0
 8002624:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002626:	4b0f      	ldr	r3, [pc, #60]	; (8002664 <MX_SPI1_Init+0xa4>)
 8002628:	2200      	movs	r2, #0
 800262a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800262c:	4b0d      	ldr	r3, [pc, #52]	; (8002664 <MX_SPI1_Init+0xa4>)
 800262e:	2200      	movs	r2, #0
 8002630:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002632:	4b0c      	ldr	r3, [pc, #48]	; (8002664 <MX_SPI1_Init+0xa4>)
 8002634:	2200      	movs	r2, #0
 8002636:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002638:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <MX_SPI1_Init+0xa4>)
 800263a:	2200      	movs	r2, #0
 800263c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800263e:	4b09      	ldr	r3, [pc, #36]	; (8002664 <MX_SPI1_Init+0xa4>)
 8002640:	2200      	movs	r2, #0
 8002642:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002644:	4b07      	ldr	r3, [pc, #28]	; (8002664 <MX_SPI1_Init+0xa4>)
 8002646:	2200      	movs	r2, #0
 8002648:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800264a:	4b06      	ldr	r3, [pc, #24]	; (8002664 <MX_SPI1_Init+0xa4>)
 800264c:	2200      	movs	r2, #0
 800264e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002650:	4804      	ldr	r0, [pc, #16]	; (8002664 <MX_SPI1_Init+0xa4>)
 8002652:	f00d fb91 	bl	800fd78 <HAL_SPI_Init>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800265c:	f000 fce8 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002660:	bf00      	nop
 8002662:	bd80      	pop	{r7, pc}
 8002664:	24000fc0 	.word	0x24000fc0
 8002668:	40013000 	.word	0x40013000

0800266c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002670:	4b27      	ldr	r3, [pc, #156]	; (8002710 <MX_SPI2_Init+0xa4>)
 8002672:	4a28      	ldr	r2, [pc, #160]	; (8002714 <MX_SPI2_Init+0xa8>)
 8002674:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002676:	4b26      	ldr	r3, [pc, #152]	; (8002710 <MX_SPI2_Init+0xa4>)
 8002678:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800267c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800267e:	4b24      	ldr	r3, [pc, #144]	; (8002710 <MX_SPI2_Init+0xa4>)
 8002680:	2200      	movs	r2, #0
 8002682:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002684:	4b22      	ldr	r3, [pc, #136]	; (8002710 <MX_SPI2_Init+0xa4>)
 8002686:	2207      	movs	r2, #7
 8002688:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800268a:	4b21      	ldr	r3, [pc, #132]	; (8002710 <MX_SPI2_Init+0xa4>)
 800268c:	2200      	movs	r2, #0
 800268e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002690:	4b1f      	ldr	r3, [pc, #124]	; (8002710 <MX_SPI2_Init+0xa4>)
 8002692:	2200      	movs	r2, #0
 8002694:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002696:	4b1e      	ldr	r3, [pc, #120]	; (8002710 <MX_SPI2_Init+0xa4>)
 8002698:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800269c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800269e:	4b1c      	ldr	r3, [pc, #112]	; (8002710 <MX_SPI2_Init+0xa4>)
 80026a0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80026a4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026a6:	4b1a      	ldr	r3, [pc, #104]	; (8002710 <MX_SPI2_Init+0xa4>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80026ac:	4b18      	ldr	r3, [pc, #96]	; (8002710 <MX_SPI2_Init+0xa4>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026b2:	4b17      	ldr	r3, [pc, #92]	; (8002710 <MX_SPI2_Init+0xa4>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80026b8:	4b15      	ldr	r3, [pc, #84]	; (8002710 <MX_SPI2_Init+0xa4>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80026be:	4b14      	ldr	r3, [pc, #80]	; (8002710 <MX_SPI2_Init+0xa4>)
 80026c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026c4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80026c6:	4b12      	ldr	r3, [pc, #72]	; (8002710 <MX_SPI2_Init+0xa4>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80026cc:	4b10      	ldr	r3, [pc, #64]	; (8002710 <MX_SPI2_Init+0xa4>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80026d2:	4b0f      	ldr	r3, [pc, #60]	; (8002710 <MX_SPI2_Init+0xa4>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80026d8:	4b0d      	ldr	r3, [pc, #52]	; (8002710 <MX_SPI2_Init+0xa4>)
 80026da:	2200      	movs	r2, #0
 80026dc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80026de:	4b0c      	ldr	r3, [pc, #48]	; (8002710 <MX_SPI2_Init+0xa4>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80026e4:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <MX_SPI2_Init+0xa4>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80026ea:	4b09      	ldr	r3, [pc, #36]	; (8002710 <MX_SPI2_Init+0xa4>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80026f0:	4b07      	ldr	r3, [pc, #28]	; (8002710 <MX_SPI2_Init+0xa4>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80026f6:	4b06      	ldr	r3, [pc, #24]	; (8002710 <MX_SPI2_Init+0xa4>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80026fc:	4804      	ldr	r0, [pc, #16]	; (8002710 <MX_SPI2_Init+0xa4>)
 80026fe:	f00d fb3b 	bl	800fd78 <HAL_SPI_Init>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8002708:	f000 fc92 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800270c:	bf00      	nop
 800270e:	bd80      	pop	{r7, pc}
 8002710:	24001048 	.word	0x24001048
 8002714:	40003800 	.word	0x40003800

08002718 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800271c:	4b27      	ldr	r3, [pc, #156]	; (80027bc <MX_SPI3_Init+0xa4>)
 800271e:	4a28      	ldr	r2, [pc, #160]	; (80027c0 <MX_SPI3_Init+0xa8>)
 8002720:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002722:	4b26      	ldr	r3, [pc, #152]	; (80027bc <MX_SPI3_Init+0xa4>)
 8002724:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002728:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800272a:	4b24      	ldr	r3, [pc, #144]	; (80027bc <MX_SPI3_Init+0xa4>)
 800272c:	2200      	movs	r2, #0
 800272e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002730:	4b22      	ldr	r3, [pc, #136]	; (80027bc <MX_SPI3_Init+0xa4>)
 8002732:	2207      	movs	r2, #7
 8002734:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002736:	4b21      	ldr	r3, [pc, #132]	; (80027bc <MX_SPI3_Init+0xa4>)
 8002738:	2200      	movs	r2, #0
 800273a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800273c:	4b1f      	ldr	r3, [pc, #124]	; (80027bc <MX_SPI3_Init+0xa4>)
 800273e:	2200      	movs	r2, #0
 8002740:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002742:	4b1e      	ldr	r3, [pc, #120]	; (80027bc <MX_SPI3_Init+0xa4>)
 8002744:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002748:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800274a:	4b1c      	ldr	r3, [pc, #112]	; (80027bc <MX_SPI3_Init+0xa4>)
 800274c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002750:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002752:	4b1a      	ldr	r3, [pc, #104]	; (80027bc <MX_SPI3_Init+0xa4>)
 8002754:	2200      	movs	r2, #0
 8002756:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002758:	4b18      	ldr	r3, [pc, #96]	; (80027bc <MX_SPI3_Init+0xa4>)
 800275a:	2200      	movs	r2, #0
 800275c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800275e:	4b17      	ldr	r3, [pc, #92]	; (80027bc <MX_SPI3_Init+0xa4>)
 8002760:	2200      	movs	r2, #0
 8002762:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8002764:	4b15      	ldr	r3, [pc, #84]	; (80027bc <MX_SPI3_Init+0xa4>)
 8002766:	2200      	movs	r2, #0
 8002768:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800276a:	4b14      	ldr	r3, [pc, #80]	; (80027bc <MX_SPI3_Init+0xa4>)
 800276c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002770:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002772:	4b12      	ldr	r3, [pc, #72]	; (80027bc <MX_SPI3_Init+0xa4>)
 8002774:	2200      	movs	r2, #0
 8002776:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002778:	4b10      	ldr	r3, [pc, #64]	; (80027bc <MX_SPI3_Init+0xa4>)
 800277a:	2200      	movs	r2, #0
 800277c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800277e:	4b0f      	ldr	r3, [pc, #60]	; (80027bc <MX_SPI3_Init+0xa4>)
 8002780:	2200      	movs	r2, #0
 8002782:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002784:	4b0d      	ldr	r3, [pc, #52]	; (80027bc <MX_SPI3_Init+0xa4>)
 8002786:	2200      	movs	r2, #0
 8002788:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800278a:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <MX_SPI3_Init+0xa4>)
 800278c:	2200      	movs	r2, #0
 800278e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002790:	4b0a      	ldr	r3, [pc, #40]	; (80027bc <MX_SPI3_Init+0xa4>)
 8002792:	2200      	movs	r2, #0
 8002794:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002796:	4b09      	ldr	r3, [pc, #36]	; (80027bc <MX_SPI3_Init+0xa4>)
 8002798:	2200      	movs	r2, #0
 800279a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800279c:	4b07      	ldr	r3, [pc, #28]	; (80027bc <MX_SPI3_Init+0xa4>)
 800279e:	2200      	movs	r2, #0
 80027a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80027a2:	4b06      	ldr	r3, [pc, #24]	; (80027bc <MX_SPI3_Init+0xa4>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80027a8:	4804      	ldr	r0, [pc, #16]	; (80027bc <MX_SPI3_Init+0xa4>)
 80027aa:	f00d fae5 	bl	800fd78 <HAL_SPI_Init>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 80027b4:	f000 fc3c 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80027b8:	bf00      	nop
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	240010d0 	.word	0x240010d0
 80027c0:	40003c00 	.word	0x40003c00

080027c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b08a      	sub	sp, #40	; 0x28
 80027c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ca:	f107 031c 	add.w	r3, r7, #28
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	605a      	str	r2, [r3, #4]
 80027d4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027d6:	463b      	mov	r3, r7
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	60da      	str	r2, [r3, #12]
 80027e2:	611a      	str	r2, [r3, #16]
 80027e4:	615a      	str	r2, [r3, #20]
 80027e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027e8:	4b21      	ldr	r3, [pc, #132]	; (8002870 <MX_TIM2_Init+0xac>)
 80027ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80027f0:	4b1f      	ldr	r3, [pc, #124]	; (8002870 <MX_TIM2_Init+0xac>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027f6:	4b1e      	ldr	r3, [pc, #120]	; (8002870 <MX_TIM2_Init+0xac>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 80027fc:	4b1c      	ldr	r3, [pc, #112]	; (8002870 <MX_TIM2_Init+0xac>)
 80027fe:	225a      	movs	r2, #90	; 0x5a
 8002800:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002802:	4b1b      	ldr	r3, [pc, #108]	; (8002870 <MX_TIM2_Init+0xac>)
 8002804:	2200      	movs	r2, #0
 8002806:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002808:	4b19      	ldr	r3, [pc, #100]	; (8002870 <MX_TIM2_Init+0xac>)
 800280a:	2200      	movs	r2, #0
 800280c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800280e:	4818      	ldr	r0, [pc, #96]	; (8002870 <MX_TIM2_Init+0xac>)
 8002810:	f00e f8a2 	bl	8010958 <HAL_TIM_PWM_Init>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800281a:	f000 fc09 	bl	8003030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800281e:	2300      	movs	r3, #0
 8002820:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002822:	2300      	movs	r3, #0
 8002824:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002826:	f107 031c 	add.w	r3, r7, #28
 800282a:	4619      	mov	r1, r3
 800282c:	4810      	ldr	r0, [pc, #64]	; (8002870 <MX_TIM2_Init+0xac>)
 800282e:	f00f fb29 	bl	8011e84 <HAL_TIMEx_MasterConfigSynchronization>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002838:	f000 fbfa 	bl	8003030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800283c:	2360      	movs	r3, #96	; 0x60
 800283e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002840:	2300      	movs	r3, #0
 8002842:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002844:	2300      	movs	r3, #0
 8002846:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002848:	2300      	movs	r3, #0
 800284a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800284c:	463b      	mov	r3, r7
 800284e:	2208      	movs	r2, #8
 8002850:	4619      	mov	r1, r3
 8002852:	4807      	ldr	r0, [pc, #28]	; (8002870 <MX_TIM2_Init+0xac>)
 8002854:	f00e fd48 	bl	80112e8 <HAL_TIM_PWM_ConfigChannel>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800285e:	f000 fbe7 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002862:	4803      	ldr	r0, [pc, #12]	; (8002870 <MX_TIM2_Init+0xac>)
 8002864:	f001 f954 	bl	8003b10 <HAL_TIM_MspPostInit>

}
 8002868:	bf00      	nop
 800286a:	3728      	adds	r7, #40	; 0x28
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	24001158 	.word	0x24001158

08002874 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b08a      	sub	sp, #40	; 0x28
 8002878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800287a:	f107 031c 	add.w	r3, r7, #28
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	605a      	str	r2, [r3, #4]
 8002884:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002886:	463b      	mov	r3, r7
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	605a      	str	r2, [r3, #4]
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	60da      	str	r2, [r3, #12]
 8002892:	611a      	str	r2, [r3, #16]
 8002894:	615a      	str	r2, [r3, #20]
 8002896:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002898:	4b26      	ldr	r3, [pc, #152]	; (8002934 <MX_TIM3_Init+0xc0>)
 800289a:	4a27      	ldr	r2, [pc, #156]	; (8002938 <MX_TIM3_Init+0xc4>)
 800289c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800289e:	4b25      	ldr	r3, [pc, #148]	; (8002934 <MX_TIM3_Init+0xc0>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028a4:	4b23      	ldr	r3, [pc, #140]	; (8002934 <MX_TIM3_Init+0xc0>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 80028aa:	4b22      	ldr	r3, [pc, #136]	; (8002934 <MX_TIM3_Init+0xc0>)
 80028ac:	225a      	movs	r2, #90	; 0x5a
 80028ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028b0:	4b20      	ldr	r3, [pc, #128]	; (8002934 <MX_TIM3_Init+0xc0>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028b6:	4b1f      	ldr	r3, [pc, #124]	; (8002934 <MX_TIM3_Init+0xc0>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80028bc:	481d      	ldr	r0, [pc, #116]	; (8002934 <MX_TIM3_Init+0xc0>)
 80028be:	f00e f84b 	bl	8010958 <HAL_TIM_PWM_Init>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80028c8:	f000 fbb2 	bl	8003030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028cc:	2300      	movs	r3, #0
 80028ce:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028d0:	2300      	movs	r3, #0
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028d4:	f107 031c 	add.w	r3, r7, #28
 80028d8:	4619      	mov	r1, r3
 80028da:	4816      	ldr	r0, [pc, #88]	; (8002934 <MX_TIM3_Init+0xc0>)
 80028dc:	f00f fad2 	bl	8011e84 <HAL_TIMEx_MasterConfigSynchronization>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80028e6:	f000 fba3 	bl	8003030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028ea:	2360      	movs	r3, #96	; 0x60
 80028ec:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80028ee:	2300      	movs	r3, #0
 80028f0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028f2:	2300      	movs	r3, #0
 80028f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028f6:	2300      	movs	r3, #0
 80028f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028fa:	463b      	mov	r3, r7
 80028fc:	2200      	movs	r2, #0
 80028fe:	4619      	mov	r1, r3
 8002900:	480c      	ldr	r0, [pc, #48]	; (8002934 <MX_TIM3_Init+0xc0>)
 8002902:	f00e fcf1 	bl	80112e8 <HAL_TIM_PWM_ConfigChannel>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800290c:	f000 fb90 	bl	8003030 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002910:	463b      	mov	r3, r7
 8002912:	2204      	movs	r2, #4
 8002914:	4619      	mov	r1, r3
 8002916:	4807      	ldr	r0, [pc, #28]	; (8002934 <MX_TIM3_Init+0xc0>)
 8002918:	f00e fce6 	bl	80112e8 <HAL_TIM_PWM_ConfigChannel>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002922:	f000 fb85 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002926:	4803      	ldr	r0, [pc, #12]	; (8002934 <MX_TIM3_Init+0xc0>)
 8002928:	f001 f8f2 	bl	8003b10 <HAL_TIM_MspPostInit>

}
 800292c:	bf00      	nop
 800292e:	3728      	adds	r7, #40	; 0x28
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	240011a4 	.word	0x240011a4
 8002938:	40000400 	.word	0x40000400

0800293c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b08a      	sub	sp, #40	; 0x28
 8002940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002942:	f107 031c 	add.w	r3, r7, #28
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	605a      	str	r2, [r3, #4]
 800294c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800294e:	463b      	mov	r3, r7
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	611a      	str	r2, [r3, #16]
 800295c:	615a      	str	r2, [r3, #20]
 800295e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002960:	4b32      	ldr	r3, [pc, #200]	; (8002a2c <MX_TIM4_Init+0xf0>)
 8002962:	4a33      	ldr	r2, [pc, #204]	; (8002a30 <MX_TIM4_Init+0xf4>)
 8002964:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 29;
 8002966:	4b31      	ldr	r3, [pc, #196]	; (8002a2c <MX_TIM4_Init+0xf0>)
 8002968:	221d      	movs	r2, #29
 800296a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800296c:	4b2f      	ldr	r3, [pc, #188]	; (8002a2c <MX_TIM4_Init+0xf0>)
 800296e:	2200      	movs	r2, #0
 8002970:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8002972:	4b2e      	ldr	r3, [pc, #184]	; (8002a2c <MX_TIM4_Init+0xf0>)
 8002974:	f242 720f 	movw	r2, #9999	; 0x270f
 8002978:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800297a:	4b2c      	ldr	r3, [pc, #176]	; (8002a2c <MX_TIM4_Init+0xf0>)
 800297c:	2200      	movs	r2, #0
 800297e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002980:	4b2a      	ldr	r3, [pc, #168]	; (8002a2c <MX_TIM4_Init+0xf0>)
 8002982:	2200      	movs	r2, #0
 8002984:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002986:	4829      	ldr	r0, [pc, #164]	; (8002a2c <MX_TIM4_Init+0xf0>)
 8002988:	f00d ffe6 	bl	8010958 <HAL_TIM_PWM_Init>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002992:	f000 fb4d 	bl	8003030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002996:	2300      	movs	r3, #0
 8002998:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800299a:	2300      	movs	r3, #0
 800299c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800299e:	f107 031c 	add.w	r3, r7, #28
 80029a2:	4619      	mov	r1, r3
 80029a4:	4821      	ldr	r0, [pc, #132]	; (8002a2c <MX_TIM4_Init+0xf0>)
 80029a6:	f00f fa6d 	bl	8011e84 <HAL_TIMEx_MasterConfigSynchronization>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80029b0:	f000 fb3e 	bl	8003030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029b4:	2360      	movs	r3, #96	; 0x60
 80029b6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80029b8:	2300      	movs	r3, #0
 80029ba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029bc:	2300      	movs	r3, #0
 80029be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029c0:	2300      	movs	r3, #0
 80029c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029c4:	463b      	mov	r3, r7
 80029c6:	2200      	movs	r2, #0
 80029c8:	4619      	mov	r1, r3
 80029ca:	4818      	ldr	r0, [pc, #96]	; (8002a2c <MX_TIM4_Init+0xf0>)
 80029cc:	f00e fc8c 	bl	80112e8 <HAL_TIM_PWM_ConfigChannel>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80029d6:	f000 fb2b 	bl	8003030 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80029da:	463b      	mov	r3, r7
 80029dc:	2204      	movs	r2, #4
 80029de:	4619      	mov	r1, r3
 80029e0:	4812      	ldr	r0, [pc, #72]	; (8002a2c <MX_TIM4_Init+0xf0>)
 80029e2:	f00e fc81 	bl	80112e8 <HAL_TIM_PWM_ConfigChannel>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80029ec:	f000 fb20 	bl	8003030 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80029f0:	463b      	mov	r3, r7
 80029f2:	2208      	movs	r2, #8
 80029f4:	4619      	mov	r1, r3
 80029f6:	480d      	ldr	r0, [pc, #52]	; (8002a2c <MX_TIM4_Init+0xf0>)
 80029f8:	f00e fc76 	bl	80112e8 <HAL_TIM_PWM_ConfigChannel>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8002a02:	f000 fb15 	bl	8003030 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002a06:	463b      	mov	r3, r7
 8002a08:	220c      	movs	r2, #12
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4807      	ldr	r0, [pc, #28]	; (8002a2c <MX_TIM4_Init+0xf0>)
 8002a0e:	f00e fc6b 	bl	80112e8 <HAL_TIM_PWM_ConfigChannel>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8002a18:	f000 fb0a 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002a1c:	4803      	ldr	r0, [pc, #12]	; (8002a2c <MX_TIM4_Init+0xf0>)
 8002a1e:	f001 f877 	bl	8003b10 <HAL_TIM_MspPostInit>

}
 8002a22:	bf00      	nop
 8002a24:	3728      	adds	r7, #40	; 0x28
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	240011f0 	.word	0x240011f0
 8002a30:	40000800 	.word	0x40000800

08002a34 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08a      	sub	sp, #40	; 0x28
 8002a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a3a:	f107 031c 	add.w	r3, r7, #28
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	605a      	str	r2, [r3, #4]
 8002a44:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a46:	463b      	mov	r3, r7
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
 8002a50:	60da      	str	r2, [r3, #12]
 8002a52:	611a      	str	r2, [r3, #16]
 8002a54:	615a      	str	r2, [r3, #20]
 8002a56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002a58:	4b21      	ldr	r3, [pc, #132]	; (8002ae0 <MX_TIM5_Init+0xac>)
 8002a5a:	4a22      	ldr	r2, [pc, #136]	; (8002ae4 <MX_TIM5_Init+0xb0>)
 8002a5c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002a5e:	4b20      	ldr	r3, [pc, #128]	; (8002ae0 <MX_TIM5_Init+0xac>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a64:	4b1e      	ldr	r3, [pc, #120]	; (8002ae0 <MX_TIM5_Init+0xac>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 8002a6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ae0 <MX_TIM5_Init+0xac>)
 8002a6c:	225a      	movs	r2, #90	; 0x5a
 8002a6e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a70:	4b1b      	ldr	r3, [pc, #108]	; (8002ae0 <MX_TIM5_Init+0xac>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a76:	4b1a      	ldr	r3, [pc, #104]	; (8002ae0 <MX_TIM5_Init+0xac>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002a7c:	4818      	ldr	r0, [pc, #96]	; (8002ae0 <MX_TIM5_Init+0xac>)
 8002a7e:	f00d ff6b 	bl	8010958 <HAL_TIM_PWM_Init>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002a88:	f000 fad2 	bl	8003030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a90:	2300      	movs	r3, #0
 8002a92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002a94:	f107 031c 	add.w	r3, r7, #28
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4811      	ldr	r0, [pc, #68]	; (8002ae0 <MX_TIM5_Init+0xac>)
 8002a9c:	f00f f9f2 	bl	8011e84 <HAL_TIMEx_MasterConfigSynchronization>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8002aa6:	f000 fac3 	bl	8003030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002aaa:	2360      	movs	r3, #96	; 0x60
 8002aac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002aba:	463b      	mov	r3, r7
 8002abc:	220c      	movs	r2, #12
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4807      	ldr	r0, [pc, #28]	; (8002ae0 <MX_TIM5_Init+0xac>)
 8002ac2:	f00e fc11 	bl	80112e8 <HAL_TIM_PWM_ConfigChannel>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002acc:	f000 fab0 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002ad0:	4803      	ldr	r0, [pc, #12]	; (8002ae0 <MX_TIM5_Init+0xac>)
 8002ad2:	f001 f81d 	bl	8003b10 <HAL_TIM_MspPostInit>

}
 8002ad6:	bf00      	nop
 8002ad8:	3728      	adds	r7, #40	; 0x28
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	2400123c 	.word	0x2400123c
 8002ae4:	40000c00 	.word	0x40000c00

08002ae8 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002aec:	4b0e      	ldr	r3, [pc, #56]	; (8002b28 <MX_TIM13_Init+0x40>)
 8002aee:	4a0f      	ldr	r2, [pc, #60]	; (8002b2c <MX_TIM13_Init+0x44>)
 8002af0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 99;
 8002af2:	4b0d      	ldr	r3, [pc, #52]	; (8002b28 <MX_TIM13_Init+0x40>)
 8002af4:	2263      	movs	r2, #99	; 0x63
 8002af6:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002af8:	4b0b      	ldr	r3, [pc, #44]	; (8002b28 <MX_TIM13_Init+0x40>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8002afe:	4b0a      	ldr	r3, [pc, #40]	; (8002b28 <MX_TIM13_Init+0x40>)
 8002b00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b04:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b06:	4b08      	ldr	r3, [pc, #32]	; (8002b28 <MX_TIM13_Init+0x40>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b0c:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <MX_TIM13_Init+0x40>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002b12:	4805      	ldr	r0, [pc, #20]	; (8002b28 <MX_TIM13_Init+0x40>)
 8002b14:	f00d fec9 	bl	80108aa <HAL_TIM_Base_Init>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8002b1e:	f000 fa87 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002b22:	bf00      	nop
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	24001288 	.word	0x24001288
 8002b2c:	40001c00 	.word	0x40001c00

08002b30 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002b34:	4b0e      	ldr	r3, [pc, #56]	; (8002b70 <MX_TIM14_Init+0x40>)
 8002b36:	4a0f      	ldr	r2, [pc, #60]	; (8002b74 <MX_TIM14_Init+0x44>)
 8002b38:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 99;
 8002b3a:	4b0d      	ldr	r3, [pc, #52]	; (8002b70 <MX_TIM14_Init+0x40>)
 8002b3c:	2263      	movs	r2, #99	; 0x63
 8002b3e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b40:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <MX_TIM14_Init+0x40>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8002b46:	4b0a      	ldr	r3, [pc, #40]	; (8002b70 <MX_TIM14_Init+0x40>)
 8002b48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b4c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b4e:	4b08      	ldr	r3, [pc, #32]	; (8002b70 <MX_TIM14_Init+0x40>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b54:	4b06      	ldr	r3, [pc, #24]	; (8002b70 <MX_TIM14_Init+0x40>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002b5a:	4805      	ldr	r0, [pc, #20]	; (8002b70 <MX_TIM14_Init+0x40>)
 8002b5c:	f00d fea5 	bl	80108aa <HAL_TIM_Base_Init>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8002b66:	f000 fa63 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002b6a:	bf00      	nop
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	240012d4 	.word	0x240012d4
 8002b74:	40002000 	.word	0x40002000

08002b78 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002b7c:	4b22      	ldr	r3, [pc, #136]	; (8002c08 <MX_UART4_Init+0x90>)
 8002b7e:	4a23      	ldr	r2, [pc, #140]	; (8002c0c <MX_UART4_Init+0x94>)
 8002b80:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002b82:	4b21      	ldr	r3, [pc, #132]	; (8002c08 <MX_UART4_Init+0x90>)
 8002b84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b88:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002b8a:	4b1f      	ldr	r3, [pc, #124]	; (8002c08 <MX_UART4_Init+0x90>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002b90:	4b1d      	ldr	r3, [pc, #116]	; (8002c08 <MX_UART4_Init+0x90>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002b96:	4b1c      	ldr	r3, [pc, #112]	; (8002c08 <MX_UART4_Init+0x90>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002b9c:	4b1a      	ldr	r3, [pc, #104]	; (8002c08 <MX_UART4_Init+0x90>)
 8002b9e:	220c      	movs	r2, #12
 8002ba0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ba2:	4b19      	ldr	r3, [pc, #100]	; (8002c08 <MX_UART4_Init+0x90>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ba8:	4b17      	ldr	r3, [pc, #92]	; (8002c08 <MX_UART4_Init+0x90>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bae:	4b16      	ldr	r3, [pc, #88]	; (8002c08 <MX_UART4_Init+0x90>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002bb4:	4b14      	ldr	r3, [pc, #80]	; (8002c08 <MX_UART4_Init+0x90>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bba:	4b13      	ldr	r3, [pc, #76]	; (8002c08 <MX_UART4_Init+0x90>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002bc0:	4811      	ldr	r0, [pc, #68]	; (8002c08 <MX_UART4_Init+0x90>)
 8002bc2:	f00f fa19 	bl	8011ff8 <HAL_UART_Init>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002bcc:	f000 fa30 	bl	8003030 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	480d      	ldr	r0, [pc, #52]	; (8002c08 <MX_UART4_Init+0x90>)
 8002bd4:	f010 fb1f 	bl	8013216 <HAL_UARTEx_SetTxFifoThreshold>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002bde:	f000 fa27 	bl	8003030 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002be2:	2100      	movs	r1, #0
 8002be4:	4808      	ldr	r0, [pc, #32]	; (8002c08 <MX_UART4_Init+0x90>)
 8002be6:	f010 fb54 	bl	8013292 <HAL_UARTEx_SetRxFifoThreshold>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002bf0:	f000 fa1e 	bl	8003030 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002bf4:	4804      	ldr	r0, [pc, #16]	; (8002c08 <MX_UART4_Init+0x90>)
 8002bf6:	f010 fad5 	bl	80131a4 <HAL_UARTEx_DisableFifoMode>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002c00:	f000 fa16 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002c04:	bf00      	nop
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	24001578 	.word	0x24001578
 8002c0c:	40004c00 	.word	0x40004c00

08002c10 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002c14:	4b22      	ldr	r3, [pc, #136]	; (8002ca0 <MX_USART6_UART_Init+0x90>)
 8002c16:	4a23      	ldr	r2, [pc, #140]	; (8002ca4 <MX_USART6_UART_Init+0x94>)
 8002c18:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002c1a:	4b21      	ldr	r3, [pc, #132]	; (8002ca0 <MX_USART6_UART_Init+0x90>)
 8002c1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c20:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002c22:	4b1f      	ldr	r3, [pc, #124]	; (8002ca0 <MX_USART6_UART_Init+0x90>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002c28:	4b1d      	ldr	r3, [pc, #116]	; (8002ca0 <MX_USART6_UART_Init+0x90>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002c2e:	4b1c      	ldr	r3, [pc, #112]	; (8002ca0 <MX_USART6_UART_Init+0x90>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002c34:	4b1a      	ldr	r3, [pc, #104]	; (8002ca0 <MX_USART6_UART_Init+0x90>)
 8002c36:	220c      	movs	r2, #12
 8002c38:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c3a:	4b19      	ldr	r3, [pc, #100]	; (8002ca0 <MX_USART6_UART_Init+0x90>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c40:	4b17      	ldr	r3, [pc, #92]	; (8002ca0 <MX_USART6_UART_Init+0x90>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c46:	4b16      	ldr	r3, [pc, #88]	; (8002ca0 <MX_USART6_UART_Init+0x90>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c4c:	4b14      	ldr	r3, [pc, #80]	; (8002ca0 <MX_USART6_UART_Init+0x90>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c52:	4b13      	ldr	r3, [pc, #76]	; (8002ca0 <MX_USART6_UART_Init+0x90>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002c58:	4811      	ldr	r0, [pc, #68]	; (8002ca0 <MX_USART6_UART_Init+0x90>)
 8002c5a:	f00f f9cd 	bl	8011ff8 <HAL_UART_Init>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002c64:	f000 f9e4 	bl	8003030 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c68:	2100      	movs	r1, #0
 8002c6a:	480d      	ldr	r0, [pc, #52]	; (8002ca0 <MX_USART6_UART_Init+0x90>)
 8002c6c:	f010 fad3 	bl	8013216 <HAL_UARTEx_SetTxFifoThreshold>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8002c76:	f000 f9db 	bl	8003030 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	4808      	ldr	r0, [pc, #32]	; (8002ca0 <MX_USART6_UART_Init+0x90>)
 8002c7e:	f010 fb08 	bl	8013292 <HAL_UARTEx_SetRxFifoThreshold>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002c88:	f000 f9d2 	bl	8003030 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8002c8c:	4804      	ldr	r0, [pc, #16]	; (8002ca0 <MX_USART6_UART_Init+0x90>)
 8002c8e:	f010 fa89 	bl	80131a4 <HAL_UARTEx_DisableFifoMode>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002c98:	f000 f9ca 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002c9c:	bf00      	nop
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	2400160c 	.word	0x2400160c
 8002ca4:	40011400 	.word	0x40011400

08002ca8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002cae:	4b2d      	ldr	r3, [pc, #180]	; (8002d64 <MX_DMA_Init+0xbc>)
 8002cb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002cb4:	4a2b      	ldr	r2, [pc, #172]	; (8002d64 <MX_DMA_Init+0xbc>)
 8002cb6:	f043 0301 	orr.w	r3, r3, #1
 8002cba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002cbe:	4b29      	ldr	r3, [pc, #164]	; (8002d64 <MX_DMA_Init+0xbc>)
 8002cc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	607b      	str	r3, [r7, #4]
 8002cca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002ccc:	4b25      	ldr	r3, [pc, #148]	; (8002d64 <MX_DMA_Init+0xbc>)
 8002cce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002cd2:	4a24      	ldr	r2, [pc, #144]	; (8002d64 <MX_DMA_Init+0xbc>)
 8002cd4:	f043 0302 	orr.w	r3, r3, #2
 8002cd8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002cdc:	4b21      	ldr	r3, [pc, #132]	; (8002d64 <MX_DMA_Init+0xbc>)
 8002cde:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	603b      	str	r3, [r7, #0]
 8002ce8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002cea:	2200      	movs	r2, #0
 8002cec:	2100      	movs	r1, #0
 8002cee:	200b      	movs	r0, #11
 8002cf0:	f003 fbef 	bl	80064d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002cf4:	200b      	movs	r0, #11
 8002cf6:	f003 fc06 	bl	8006506 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	200c      	movs	r0, #12
 8002d00:	f003 fbe7 	bl	80064d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002d04:	200c      	movs	r0, #12
 8002d06:	f003 fbfe 	bl	8006506 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	200d      	movs	r0, #13
 8002d10:	f003 fbdf 	bl	80064d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002d14:	200d      	movs	r0, #13
 8002d16:	f003 fbf6 	bl	8006506 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	200e      	movs	r0, #14
 8002d20:	f003 fbd7 	bl	80064d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002d24:	200e      	movs	r0, #14
 8002d26:	f003 fbee 	bl	8006506 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	200f      	movs	r0, #15
 8002d30:	f003 fbcf 	bl	80064d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002d34:	200f      	movs	r0, #15
 8002d36:	f003 fbe6 	bl	8006506 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	2010      	movs	r0, #16
 8002d40:	f003 fbc7 	bl	80064d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002d44:	2010      	movs	r0, #16
 8002d46:	f003 fbde 	bl	8006506 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	2046      	movs	r0, #70	; 0x46
 8002d50:	f003 fbbf 	bl	80064d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002d54:	2046      	movs	r0, #70	; 0x46
 8002d56:	f003 fbd6 	bl	8006506 <HAL_NVIC_EnableIRQ>

}
 8002d5a:	bf00      	nop
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	58024400 	.word	0x58024400

08002d68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b08c      	sub	sp, #48	; 0x30
 8002d6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d6e:	f107 031c 	add.w	r3, r7, #28
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	605a      	str	r2, [r3, #4]
 8002d78:	609a      	str	r2, [r3, #8]
 8002d7a:	60da      	str	r2, [r3, #12]
 8002d7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d7e:	4ba4      	ldr	r3, [pc, #656]	; (8003010 <MX_GPIO_Init+0x2a8>)
 8002d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d84:	4aa2      	ldr	r2, [pc, #648]	; (8003010 <MX_GPIO_Init+0x2a8>)
 8002d86:	f043 0310 	orr.w	r3, r3, #16
 8002d8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d8e:	4ba0      	ldr	r3, [pc, #640]	; (8003010 <MX_GPIO_Init+0x2a8>)
 8002d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d94:	f003 0310 	and.w	r3, r3, #16
 8002d98:	61bb      	str	r3, [r7, #24]
 8002d9a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d9c:	4b9c      	ldr	r3, [pc, #624]	; (8003010 <MX_GPIO_Init+0x2a8>)
 8002d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002da2:	4a9b      	ldr	r2, [pc, #620]	; (8003010 <MX_GPIO_Init+0x2a8>)
 8002da4:	f043 0320 	orr.w	r3, r3, #32
 8002da8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dac:	4b98      	ldr	r3, [pc, #608]	; (8003010 <MX_GPIO_Init+0x2a8>)
 8002dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002db2:	f003 0320 	and.w	r3, r3, #32
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dba:	4b95      	ldr	r3, [pc, #596]	; (8003010 <MX_GPIO_Init+0x2a8>)
 8002dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dc0:	4a93      	ldr	r2, [pc, #588]	; (8003010 <MX_GPIO_Init+0x2a8>)
 8002dc2:	f043 0304 	orr.w	r3, r3, #4
 8002dc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dca:	4b91      	ldr	r3, [pc, #580]	; (8003010 <MX_GPIO_Init+0x2a8>)
 8002dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	613b      	str	r3, [r7, #16]
 8002dd6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd8:	4b8d      	ldr	r3, [pc, #564]	; (8003010 <MX_GPIO_Init+0x2a8>)
 8002dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dde:	4a8c      	ldr	r2, [pc, #560]	; (8003010 <MX_GPIO_Init+0x2a8>)
 8002de0:	f043 0301 	orr.w	r3, r3, #1
 8002de4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002de8:	4b89      	ldr	r3, [pc, #548]	; (8003010 <MX_GPIO_Init+0x2a8>)
 8002dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002df6:	4b86      	ldr	r3, [pc, #536]	; (8003010 <MX_GPIO_Init+0x2a8>)
 8002df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dfc:	4a84      	ldr	r2, [pc, #528]	; (8003010 <MX_GPIO_Init+0x2a8>)
 8002dfe:	f043 0302 	orr.w	r3, r3, #2
 8002e02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e06:	4b82      	ldr	r3, [pc, #520]	; (8003010 <MX_GPIO_Init+0x2a8>)
 8002e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	60bb      	str	r3, [r7, #8]
 8002e12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e14:	4b7e      	ldr	r3, [pc, #504]	; (8003010 <MX_GPIO_Init+0x2a8>)
 8002e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e1a:	4a7d      	ldr	r2, [pc, #500]	; (8003010 <MX_GPIO_Init+0x2a8>)
 8002e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e24:	4b7a      	ldr	r3, [pc, #488]	; (8003010 <MX_GPIO_Init+0x2a8>)
 8002e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2e:	607b      	str	r3, [r7, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e32:	4b77      	ldr	r3, [pc, #476]	; (8003010 <MX_GPIO_Init+0x2a8>)
 8002e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e38:	4a75      	ldr	r2, [pc, #468]	; (8003010 <MX_GPIO_Init+0x2a8>)
 8002e3a:	f043 0308 	orr.w	r3, r3, #8
 8002e3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e42:	4b73      	ldr	r3, [pc, #460]	; (8003010 <MX_GPIO_Init+0x2a8>)
 8002e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e48:	f003 0308 	and.w	r3, r3, #8
 8002e4c:	603b      	str	r3, [r7, #0]
 8002e4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 8002e50:	2200      	movs	r2, #0
 8002e52:	f241 5104 	movw	r1, #5380	; 0x1504
 8002e56:	486f      	ldr	r0, [pc, #444]	; (8003014 <MX_GPIO_Init+0x2ac>)
 8002e58:	f006 f968 	bl	800912c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f248 0102 	movw	r1, #32770	; 0x8002
 8002e62:	486d      	ldr	r0, [pc, #436]	; (8003018 <MX_GPIO_Init+0x2b0>)
 8002e64:	f006 f962 	bl	800912c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2130      	movs	r1, #48	; 0x30
 8002e6c:	486b      	ldr	r0, [pc, #428]	; (800301c <MX_GPIO_Init+0x2b4>)
 8002e6e:	f006 f95d 	bl	800912c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, GPIO_PIN_RESET);
 8002e72:	2200      	movs	r2, #0
 8002e74:	2102      	movs	r1, #2
 8002e76:	486a      	ldr	r0, [pc, #424]	; (8003020 <MX_GPIO_Init+0x2b8>)
 8002e78:	f006 f958 	bl	800912c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8002e82:	4868      	ldr	r0, [pc, #416]	; (8003024 <MX_GPIO_Init+0x2bc>)
 8002e84:	f006 f952 	bl	800912c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8002e88:	2200      	movs	r2, #0
 8002e8a:	210e      	movs	r1, #14
 8002e8c:	4866      	ldr	r0, [pc, #408]	; (8003028 <MX_GPIO_Init+0x2c0>)
 8002e8e:	f006 f94d 	bl	800912c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0, GPIO_PIN_RESET);
 8002e92:	2200      	movs	r2, #0
 8002e94:	f240 3101 	movw	r1, #769	; 0x301
 8002e98:	4864      	ldr	r0, [pc, #400]	; (800302c <MX_GPIO_Init+0x2c4>)
 8002e9a:	f006 f947 	bl	800912c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 8002e9e:	f241 5304 	movw	r3, #5380	; 0x1504
 8002ea2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eac:	2300      	movs	r3, #0
 8002eae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002eb0:	f107 031c 	add.w	r3, r7, #28
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4857      	ldr	r0, [pc, #348]	; (8003014 <MX_GPIO_Init+0x2ac>)
 8002eb8:	f005 ff78 	bl	8008dac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|GPIO_PIN_15;
 8002ebc:	f248 0302 	movw	r3, #32770	; 0x8002
 8002ec0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ece:	f107 031c 	add.w	r3, r7, #28
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4850      	ldr	r0, [pc, #320]	; (8003018 <MX_GPIO_Init+0x2b0>)
 8002ed6:	f005 ff69 	bl	8008dac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002eda:	2330      	movs	r3, #48	; 0x30
 8002edc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eea:	f107 031c 	add.w	r3, r7, #28
 8002eee:	4619      	mov	r1, r3
 8002ef0:	484a      	ldr	r0, [pc, #296]	; (800301c <MX_GPIO_Init+0x2b4>)
 8002ef2:	f005 ff5b 	bl	8008dac <HAL_GPIO_Init>

  /*Configure GPIO pin : PYRO1_Pin */
  GPIO_InitStruct.Pin = PYRO1_Pin;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002efa:	2301      	movs	r3, #1
 8002efc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efe:	2300      	movs	r3, #0
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f02:	2300      	movs	r3, #0
 8002f04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PYRO1_GPIO_Port, &GPIO_InitStruct);
 8002f06:	f107 031c 	add.w	r3, r7, #28
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	4844      	ldr	r0, [pc, #272]	; (8003020 <MX_GPIO_Init+0x2b8>)
 8002f0e:	f005 ff4d 	bl	8008dac <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 8002f12:	2304      	movs	r3, #4
 8002f14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f16:	2300      	movs	r3, #0
 8002f18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 8002f1e:	f107 031c 	add.w	r3, r7, #28
 8002f22:	4619      	mov	r1, r3
 8002f24:	483e      	ldr	r0, [pc, #248]	; (8003020 <MX_GPIO_Init+0x2b8>)
 8002f26:	f005 ff41 	bl	8008dac <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 8002f2a:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8002f2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f30:	2301      	movs	r3, #1
 8002f32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f34:	2300      	movs	r3, #0
 8002f36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f3c:	f107 031c 	add.w	r3, r7, #28
 8002f40:	4619      	mov	r1, r3
 8002f42:	4838      	ldr	r0, [pc, #224]	; (8003024 <MX_GPIO_Init+0x2bc>)
 8002f44:	f005 ff32 	bl	8008dac <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 8002f48:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002f4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f52:	2301      	movs	r3, #1
 8002f54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f56:	f107 031c 	add.w	r3, r7, #28
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4831      	ldr	r0, [pc, #196]	; (8003024 <MX_GPIO_Init+0x2bc>)
 8002f5e:	f005 ff25 	bl	8008dac <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 8002f62:	2301      	movs	r3, #1
 8002f64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f66:	2300      	movs	r3, #0
 8002f68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 8002f6e:	f107 031c 	add.w	r3, r7, #28
 8002f72:	4619      	mov	r1, r3
 8002f74:	482c      	ldr	r0, [pc, #176]	; (8003028 <MX_GPIO_Init+0x2c0>)
 8002f76:	f005 ff19 	bl	8008dac <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 8002f7a:	230e      	movs	r3, #14
 8002f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f82:	2300      	movs	r3, #0
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f86:	2300      	movs	r3, #0
 8002f88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f8a:	f107 031c 	add.w	r3, r7, #28
 8002f8e:	4619      	mov	r1, r3
 8002f90:	4825      	ldr	r0, [pc, #148]	; (8003028 <MX_GPIO_Init+0x2c0>)
 8002f92:	f005 ff0b 	bl	8008dac <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 8002f96:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8002f9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002fa4:	f107 031c 	add.w	r3, r7, #28
 8002fa8:	4619      	mov	r1, r3
 8002faa:	481a      	ldr	r0, [pc, #104]	; (8003014 <MX_GPIO_Init+0x2ac>)
 8002fac:	f005 fefe 	bl	8008dac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0;
 8002fb0:	f240 3301 	movw	r3, #769	; 0x301
 8002fb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fc2:	f107 031c 	add.w	r3, r7, #28
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4818      	ldr	r0, [pc, #96]	; (800302c <MX_GPIO_Init+0x2c4>)
 8002fca:	f005 feef 	bl	8008dac <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 8002fce:	2310      	movs	r3, #16
 8002fd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002fda:	f107 031c 	add.w	r3, r7, #28
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4811      	ldr	r0, [pc, #68]	; (8003028 <MX_GPIO_Init+0x2c0>)
 8002fe2:	f005 fee3 	bl	8008dac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002fe6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fec:	2302      	movs	r3, #2
 8002fee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ffc:	f107 031c 	add.w	r3, r7, #28
 8003000:	4619      	mov	r1, r3
 8003002:	4805      	ldr	r0, [pc, #20]	; (8003018 <MX_GPIO_Init+0x2b0>)
 8003004:	f005 fed2 	bl	8008dac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003008:	bf00      	nop
 800300a:	3730      	adds	r7, #48	; 0x30
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	58024400 	.word	0x58024400
 8003014:	58021000 	.word	0x58021000
 8003018:	58020000 	.word	0x58020000
 800301c:	58020800 	.word	0x58020800
 8003020:	58020400 	.word	0x58020400
 8003024:	58021400 	.word	0x58021400
 8003028:	58021800 	.word	0x58021800
 800302c:	58020c00 	.word	0x58020c00

08003030 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003034:	b672      	cpsid	i
}
 8003036:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003038:	e7fe      	b.n	8003038 <Error_Handler+0x8>
	...

0800303c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003042:	4b0a      	ldr	r3, [pc, #40]	; (800306c <HAL_MspInit+0x30>)
 8003044:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003048:	4a08      	ldr	r2, [pc, #32]	; (800306c <HAL_MspInit+0x30>)
 800304a:	f043 0302 	orr.w	r3, r3, #2
 800304e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003052:	4b06      	ldr	r3, [pc, #24]	; (800306c <HAL_MspInit+0x30>)
 8003054:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	607b      	str	r3, [r7, #4]
 800305e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	58024400 	.word	0x58024400

08003070 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b08c      	sub	sp, #48	; 0x30
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003078:	f107 031c 	add.w	r3, r7, #28
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	605a      	str	r2, [r3, #4]
 8003082:	609a      	str	r2, [r3, #8]
 8003084:	60da      	str	r2, [r3, #12]
 8003086:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a5d      	ldr	r2, [pc, #372]	; (8003204 <HAL_ADC_MspInit+0x194>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d159      	bne.n	8003146 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003092:	4b5d      	ldr	r3, [pc, #372]	; (8003208 <HAL_ADC_MspInit+0x198>)
 8003094:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003098:	4a5b      	ldr	r2, [pc, #364]	; (8003208 <HAL_ADC_MspInit+0x198>)
 800309a:	f043 0320 	orr.w	r3, r3, #32
 800309e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80030a2:	4b59      	ldr	r3, [pc, #356]	; (8003208 <HAL_ADC_MspInit+0x198>)
 80030a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80030a8:	f003 0320 	and.w	r3, r3, #32
 80030ac:	61bb      	str	r3, [r7, #24]
 80030ae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030b0:	4b55      	ldr	r3, [pc, #340]	; (8003208 <HAL_ADC_MspInit+0x198>)
 80030b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030b6:	4a54      	ldr	r2, [pc, #336]	; (8003208 <HAL_ADC_MspInit+0x198>)
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030c0:	4b51      	ldr	r3, [pc, #324]	; (8003208 <HAL_ADC_MspInit+0x198>)
 80030c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	617b      	str	r3, [r7, #20]
 80030cc:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_INP14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80030ce:	2304      	movs	r3, #4
 80030d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030d2:	2303      	movs	r3, #3
 80030d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030da:	f107 031c 	add.w	r3, r7, #28
 80030de:	4619      	mov	r1, r3
 80030e0:	484a      	ldr	r0, [pc, #296]	; (800320c <HAL_ADC_MspInit+0x19c>)
 80030e2:	f005 fe63 	bl	8008dac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 80030e6:	4b4a      	ldr	r3, [pc, #296]	; (8003210 <HAL_ADC_MspInit+0x1a0>)
 80030e8:	4a4a      	ldr	r2, [pc, #296]	; (8003214 <HAL_ADC_MspInit+0x1a4>)
 80030ea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80030ec:	4b48      	ldr	r3, [pc, #288]	; (8003210 <HAL_ADC_MspInit+0x1a0>)
 80030ee:	2209      	movs	r2, #9
 80030f0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030f2:	4b47      	ldr	r3, [pc, #284]	; (8003210 <HAL_ADC_MspInit+0x1a0>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80030f8:	4b45      	ldr	r3, [pc, #276]	; (8003210 <HAL_ADC_MspInit+0x1a0>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80030fe:	4b44      	ldr	r3, [pc, #272]	; (8003210 <HAL_ADC_MspInit+0x1a0>)
 8003100:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003104:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003106:	4b42      	ldr	r3, [pc, #264]	; (8003210 <HAL_ADC_MspInit+0x1a0>)
 8003108:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800310c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800310e:	4b40      	ldr	r3, [pc, #256]	; (8003210 <HAL_ADC_MspInit+0x1a0>)
 8003110:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003114:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003116:	4b3e      	ldr	r3, [pc, #248]	; (8003210 <HAL_ADC_MspInit+0x1a0>)
 8003118:	2200      	movs	r2, #0
 800311a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800311c:	4b3c      	ldr	r3, [pc, #240]	; (8003210 <HAL_ADC_MspInit+0x1a0>)
 800311e:	2200      	movs	r2, #0
 8003120:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003122:	4b3b      	ldr	r3, [pc, #236]	; (8003210 <HAL_ADC_MspInit+0x1a0>)
 8003124:	2200      	movs	r2, #0
 8003126:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003128:	4839      	ldr	r0, [pc, #228]	; (8003210 <HAL_ADC_MspInit+0x1a0>)
 800312a:	f003 fa07 	bl	800653c <HAL_DMA_Init>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8003134:	f7ff ff7c 	bl	8003030 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a35      	ldr	r2, [pc, #212]	; (8003210 <HAL_ADC_MspInit+0x1a0>)
 800313c:	659a      	str	r2, [r3, #88]	; 0x58
 800313e:	4a34      	ldr	r2, [pc, #208]	; (8003210 <HAL_ADC_MspInit+0x1a0>)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003144:	e059      	b.n	80031fa <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a33      	ldr	r2, [pc, #204]	; (8003218 <HAL_ADC_MspInit+0x1a8>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d154      	bne.n	80031fa <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003150:	4b2d      	ldr	r3, [pc, #180]	; (8003208 <HAL_ADC_MspInit+0x198>)
 8003152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003156:	4a2c      	ldr	r2, [pc, #176]	; (8003208 <HAL_ADC_MspInit+0x198>)
 8003158:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800315c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003160:	4b29      	ldr	r3, [pc, #164]	; (8003208 <HAL_ADC_MspInit+0x198>)
 8003162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003166:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800316a:	613b      	str	r3, [r7, #16]
 800316c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800316e:	4b26      	ldr	r3, [pc, #152]	; (8003208 <HAL_ADC_MspInit+0x198>)
 8003170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003174:	4a24      	ldr	r2, [pc, #144]	; (8003208 <HAL_ADC_MspInit+0x198>)
 8003176:	f043 0304 	orr.w	r3, r3, #4
 800317a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800317e:	4b22      	ldr	r3, [pc, #136]	; (8003208 <HAL_ADC_MspInit+0x198>)
 8003180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	60fb      	str	r3, [r7, #12]
 800318a:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800318c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8003190:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8003194:	f001 f8f0 	bl	8004378 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8003198:	4b20      	ldr	r3, [pc, #128]	; (800321c <HAL_ADC_MspInit+0x1ac>)
 800319a:	4a21      	ldr	r2, [pc, #132]	; (8003220 <HAL_ADC_MspInit+0x1b0>)
 800319c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800319e:	4b1f      	ldr	r3, [pc, #124]	; (800321c <HAL_ADC_MspInit+0x1ac>)
 80031a0:	2273      	movs	r2, #115	; 0x73
 80031a2:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031a4:	4b1d      	ldr	r3, [pc, #116]	; (800321c <HAL_ADC_MspInit+0x1ac>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80031aa:	4b1c      	ldr	r3, [pc, #112]	; (800321c <HAL_ADC_MspInit+0x1ac>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80031b0:	4b1a      	ldr	r3, [pc, #104]	; (800321c <HAL_ADC_MspInit+0x1ac>)
 80031b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031b6:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80031b8:	4b18      	ldr	r3, [pc, #96]	; (800321c <HAL_ADC_MspInit+0x1ac>)
 80031ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031be:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80031c0:	4b16      	ldr	r3, [pc, #88]	; (800321c <HAL_ADC_MspInit+0x1ac>)
 80031c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031c6:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80031c8:	4b14      	ldr	r3, [pc, #80]	; (800321c <HAL_ADC_MspInit+0x1ac>)
 80031ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031ce:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 80031d0:	4b12      	ldr	r3, [pc, #72]	; (800321c <HAL_ADC_MspInit+0x1ac>)
 80031d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80031d6:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031d8:	4b10      	ldr	r3, [pc, #64]	; (800321c <HAL_ADC_MspInit+0x1ac>)
 80031da:	2200      	movs	r2, #0
 80031dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80031de:	480f      	ldr	r0, [pc, #60]	; (800321c <HAL_ADC_MspInit+0x1ac>)
 80031e0:	f003 f9ac 	bl	800653c <HAL_DMA_Init>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 80031ea:	f7ff ff21 	bl	8003030 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a0a      	ldr	r2, [pc, #40]	; (800321c <HAL_ADC_MspInit+0x1ac>)
 80031f2:	659a      	str	r2, [r3, #88]	; 0x58
 80031f4:	4a09      	ldr	r2, [pc, #36]	; (800321c <HAL_ADC_MspInit+0x1ac>)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80031fa:	bf00      	nop
 80031fc:	3730      	adds	r7, #48	; 0x30
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40022000 	.word	0x40022000
 8003208:	58024400 	.word	0x58024400
 800320c:	58020000 	.word	0x58020000
 8003210:	24000d4c 	.word	0x24000d4c
 8003214:	40020088 	.word	0x40020088
 8003218:	58026000 	.word	0x58026000
 800321c:	24000dc4 	.word	0x24000dc4
 8003220:	400204b8 	.word	0x400204b8

08003224 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b0b8      	sub	sp, #224	; 0xe0
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800322c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	605a      	str	r2, [r3, #4]
 8003236:	609a      	str	r2, [r3, #8]
 8003238:	60da      	str	r2, [r3, #12]
 800323a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800323c:	f107 0310 	add.w	r3, r7, #16
 8003240:	22b8      	movs	r2, #184	; 0xb8
 8003242:	2100      	movs	r1, #0
 8003244:	4618      	mov	r0, r3
 8003246:	f019 f858 	bl	801c2fa <memset>
  if(hfdcan->Instance==FDCAN3)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a26      	ldr	r2, [pc, #152]	; (80032e8 <HAL_FDCAN_MspInit+0xc4>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d145      	bne.n	80032e0 <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003254:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003258:	f04f 0300 	mov.w	r3, #0
 800325c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8003260:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003264:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003266:	f107 0310 	add.w	r3, r7, #16
 800326a:	4618      	mov	r0, r3
 800326c:	f008 fb8c 	bl	800b988 <HAL_RCCEx_PeriphCLKConfig>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8003276:	f7ff fedb 	bl	8003030 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800327a:	4b1c      	ldr	r3, [pc, #112]	; (80032ec <HAL_FDCAN_MspInit+0xc8>)
 800327c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003280:	4a1a      	ldr	r2, [pc, #104]	; (80032ec <HAL_FDCAN_MspInit+0xc8>)
 8003282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003286:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800328a:	4b18      	ldr	r3, [pc, #96]	; (80032ec <HAL_FDCAN_MspInit+0xc8>)
 800328c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003298:	4b14      	ldr	r3, [pc, #80]	; (80032ec <HAL_FDCAN_MspInit+0xc8>)
 800329a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800329e:	4a13      	ldr	r2, [pc, #76]	; (80032ec <HAL_FDCAN_MspInit+0xc8>)
 80032a0:	f043 0320 	orr.w	r3, r3, #32
 80032a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032a8:	4b10      	ldr	r3, [pc, #64]	; (80032ec <HAL_FDCAN_MspInit+0xc8>)
 80032aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032ae:	f003 0320 	and.w	r3, r3, #32
 80032b2:	60bb      	str	r3, [r7, #8]
 80032b4:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80032b6:	23c0      	movs	r3, #192	; 0xc0
 80032b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032bc:	2302      	movs	r3, #2
 80032be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c2:	2300      	movs	r3, #0
 80032c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c8:	2300      	movs	r3, #0
 80032ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 80032ce:	2302      	movs	r3, #2
 80032d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80032d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80032d8:	4619      	mov	r1, r3
 80032da:	4805      	ldr	r0, [pc, #20]	; (80032f0 <HAL_FDCAN_MspInit+0xcc>)
 80032dc:	f005 fd66 	bl	8008dac <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 80032e0:	bf00      	nop
 80032e2:	37e0      	adds	r7, #224	; 0xe0
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	4000d400 	.word	0x4000d400
 80032ec:	58024400 	.word	0x58024400
 80032f0:	58021400 	.word	0x58021400

080032f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b0b8      	sub	sp, #224	; 0xe0
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	605a      	str	r2, [r3, #4]
 8003306:	609a      	str	r2, [r3, #8]
 8003308:	60da      	str	r2, [r3, #12]
 800330a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800330c:	f107 0310 	add.w	r3, r7, #16
 8003310:	22b8      	movs	r2, #184	; 0xb8
 8003312:	2100      	movs	r1, #0
 8003314:	4618      	mov	r0, r3
 8003316:	f018 fff0 	bl	801c2fa <memset>
  if(hi2c->Instance==I2C2)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a2a      	ldr	r2, [pc, #168]	; (80033c8 <HAL_I2C_MspInit+0xd4>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d14d      	bne.n	80033c0 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003324:	f04f 0208 	mov.w	r2, #8
 8003328:	f04f 0300 	mov.w	r3, #0
 800332c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8003330:	2300      	movs	r3, #0
 8003332:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003336:	f107 0310 	add.w	r3, r7, #16
 800333a:	4618      	mov	r0, r3
 800333c:	f008 fb24 	bl	800b988 <HAL_RCCEx_PeriphCLKConfig>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8003346:	f7ff fe73 	bl	8003030 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800334a:	4b20      	ldr	r3, [pc, #128]	; (80033cc <HAL_I2C_MspInit+0xd8>)
 800334c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003350:	4a1e      	ldr	r2, [pc, #120]	; (80033cc <HAL_I2C_MspInit+0xd8>)
 8003352:	f043 0320 	orr.w	r3, r3, #32
 8003356:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800335a:	4b1c      	ldr	r3, [pc, #112]	; (80033cc <HAL_I2C_MspInit+0xd8>)
 800335c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003360:	f003 0320 	and.w	r3, r3, #32
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003368:	2303      	movs	r3, #3
 800336a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800336e:	2312      	movs	r3, #18
 8003370:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003374:	2300      	movs	r3, #0
 8003376:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800337a:	2300      	movs	r3, #0
 800337c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003380:	2304      	movs	r3, #4
 8003382:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003386:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800338a:	4619      	mov	r1, r3
 800338c:	4810      	ldr	r0, [pc, #64]	; (80033d0 <HAL_I2C_MspInit+0xdc>)
 800338e:	f005 fd0d 	bl	8008dac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003392:	4b0e      	ldr	r3, [pc, #56]	; (80033cc <HAL_I2C_MspInit+0xd8>)
 8003394:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003398:	4a0c      	ldr	r2, [pc, #48]	; (80033cc <HAL_I2C_MspInit+0xd8>)
 800339a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800339e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80033a2:	4b0a      	ldr	r3, [pc, #40]	; (80033cc <HAL_I2C_MspInit+0xd8>)
 80033a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ac:	60bb      	str	r3, [r7, #8]
 80033ae:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 80033b0:	2200      	movs	r2, #0
 80033b2:	2101      	movs	r1, #1
 80033b4:	2021      	movs	r0, #33	; 0x21
 80033b6:	f003 f88c 	bl	80064d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80033ba:	2021      	movs	r0, #33	; 0x21
 80033bc:	f003 f8a3 	bl	8006506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80033c0:	bf00      	nop
 80033c2:	37e0      	adds	r7, #224	; 0xe0
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	40005800 	.word	0x40005800
 80033cc:	58024400 	.word	0x58024400
 80033d0:	58021400 	.word	0x58021400

080033d4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b0b2      	sub	sp, #200	; 0xc8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033dc:	f107 0310 	add.w	r3, r7, #16
 80033e0:	22b8      	movs	r2, #184	; 0xb8
 80033e2:	2100      	movs	r1, #0
 80033e4:	4618      	mov	r0, r3
 80033e6:	f018 ff88 	bl	801c2fa <memset>
  if(hrng->Instance==RNG)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a14      	ldr	r2, [pc, #80]	; (8003440 <HAL_RNG_MspInit+0x6c>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d121      	bne.n	8003438 <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80033f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033f8:	f04f 0300 	mov.w	r3, #0
 80033fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8003400:	2300      	movs	r3, #0
 8003402:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003406:	f107 0310 	add.w	r3, r7, #16
 800340a:	4618      	mov	r0, r3
 800340c:	f008 fabc 	bl	800b988 <HAL_RCCEx_PeriphCLKConfig>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 8003416:	f7ff fe0b 	bl	8003030 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800341a:	4b0a      	ldr	r3, [pc, #40]	; (8003444 <HAL_RNG_MspInit+0x70>)
 800341c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003420:	4a08      	ldr	r2, [pc, #32]	; (8003444 <HAL_RNG_MspInit+0x70>)
 8003422:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003426:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800342a:	4b06      	ldr	r3, [pc, #24]	; (8003444 <HAL_RNG_MspInit+0x70>)
 800342c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003434:	60fb      	str	r3, [r7, #12]
 8003436:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8003438:	bf00      	nop
 800343a:	37c8      	adds	r7, #200	; 0xc8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	48021800 	.word	0x48021800
 8003444:	58024400 	.word	0x58024400

08003448 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b0ba      	sub	sp, #232	; 0xe8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003450:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	605a      	str	r2, [r3, #4]
 800345a:	609a      	str	r2, [r3, #8]
 800345c:	60da      	str	r2, [r3, #12]
 800345e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003460:	f107 0318 	add.w	r3, r7, #24
 8003464:	22b8      	movs	r2, #184	; 0xb8
 8003466:	2100      	movs	r1, #0
 8003468:	4618      	mov	r0, r3
 800346a:	f018 ff46 	bl	801c2fa <memset>
  if(hsd->Instance==SDMMC2)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a5d      	ldr	r2, [pc, #372]	; (80035e8 <HAL_SD_MspInit+0x1a0>)
 8003474:	4293      	cmp	r3, r2
 8003476:	f040 80b3 	bne.w	80035e0 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800347a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800347e:	f04f 0300 	mov.w	r3, #0
 8003482:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8003486:	2300      	movs	r3, #0
 8003488:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800348a:	f107 0318 	add.w	r3, r7, #24
 800348e:	4618      	mov	r0, r3
 8003490:	f008 fa7a 	bl	800b988 <HAL_RCCEx_PeriphCLKConfig>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 800349a:	f7ff fdc9 	bl	8003030 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 800349e:	4b53      	ldr	r3, [pc, #332]	; (80035ec <HAL_SD_MspInit+0x1a4>)
 80034a0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80034a4:	4a51      	ldr	r2, [pc, #324]	; (80035ec <HAL_SD_MspInit+0x1a4>)
 80034a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034aa:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80034ae:	4b4f      	ldr	r3, [pc, #316]	; (80035ec <HAL_SD_MspInit+0x1a4>)
 80034b0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80034b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034b8:	617b      	str	r3, [r7, #20]
 80034ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034bc:	4b4b      	ldr	r3, [pc, #300]	; (80035ec <HAL_SD_MspInit+0x1a4>)
 80034be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034c2:	4a4a      	ldr	r2, [pc, #296]	; (80035ec <HAL_SD_MspInit+0x1a4>)
 80034c4:	f043 0308 	orr.w	r3, r3, #8
 80034c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034cc:	4b47      	ldr	r3, [pc, #284]	; (80035ec <HAL_SD_MspInit+0x1a4>)
 80034ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034d2:	f003 0308 	and.w	r3, r3, #8
 80034d6:	613b      	str	r3, [r7, #16]
 80034d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80034da:	4b44      	ldr	r3, [pc, #272]	; (80035ec <HAL_SD_MspInit+0x1a4>)
 80034dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034e0:	4a42      	ldr	r2, [pc, #264]	; (80035ec <HAL_SD_MspInit+0x1a4>)
 80034e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034ea:	4b40      	ldr	r3, [pc, #256]	; (80035ec <HAL_SD_MspInit+0x1a4>)
 80034ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80034f8:	2340      	movs	r3, #64	; 0x40
 80034fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fe:	2302      	movs	r3, #2
 8003500:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003504:	2300      	movs	r3, #0
 8003506:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800350a:	2303      	movs	r3, #3
 800350c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003510:	230b      	movs	r3, #11
 8003512:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003516:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800351a:	4619      	mov	r1, r3
 800351c:	4834      	ldr	r0, [pc, #208]	; (80035f0 <HAL_SD_MspInit+0x1a8>)
 800351e:	f005 fc45 	bl	8008dac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003522:	2380      	movs	r3, #128	; 0x80
 8003524:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003528:	2302      	movs	r3, #2
 800352a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800352e:	2301      	movs	r3, #1
 8003530:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003534:	2303      	movs	r3, #3
 8003536:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800353a:	230b      	movs	r3, #11
 800353c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003540:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003544:	4619      	mov	r1, r3
 8003546:	482a      	ldr	r0, [pc, #168]	; (80035f0 <HAL_SD_MspInit+0x1a8>)
 8003548:	f005 fc30 	bl	8008dac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800354c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003550:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003554:	2302      	movs	r3, #2
 8003556:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800355a:	2301      	movs	r3, #1
 800355c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003560:	2303      	movs	r3, #3
 8003562:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003566:	230b      	movs	r3, #11
 8003568:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800356c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003570:	4619      	mov	r1, r3
 8003572:	4820      	ldr	r0, [pc, #128]	; (80035f4 <HAL_SD_MspInit+0x1ac>)
 8003574:	f005 fc1a 	bl	8008dac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003578:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800357c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003580:	2302      	movs	r3, #2
 8003582:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003586:	2300      	movs	r3, #0
 8003588:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800358c:	2303      	movs	r3, #3
 800358e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003592:	230b      	movs	r3, #11
 8003594:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003598:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800359c:	4619      	mov	r1, r3
 800359e:	4815      	ldr	r0, [pc, #84]	; (80035f4 <HAL_SD_MspInit+0x1ac>)
 80035a0:	f005 fc04 	bl	8008dac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80035a4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80035a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ac:	2302      	movs	r3, #2
 80035ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035b8:	2303      	movs	r3, #3
 80035ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 80035be:	230a      	movs	r3, #10
 80035c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80035c4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80035c8:	4619      	mov	r1, r3
 80035ca:	480a      	ldr	r0, [pc, #40]	; (80035f4 <HAL_SD_MspInit+0x1ac>)
 80035cc:	f005 fbee 	bl	8008dac <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 80035d0:	2200      	movs	r2, #0
 80035d2:	2100      	movs	r1, #0
 80035d4:	207c      	movs	r0, #124	; 0x7c
 80035d6:	f002 ff7c 	bl	80064d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 80035da:	207c      	movs	r0, #124	; 0x7c
 80035dc:	f002 ff93 	bl	8006506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 80035e0:	bf00      	nop
 80035e2:	37e8      	adds	r7, #232	; 0xe8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	48022400 	.word	0x48022400
 80035ec:	58024400 	.word	0x58024400
 80035f0:	58020c00 	.word	0x58020c00
 80035f4:	58021800 	.word	0x58021800

080035f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b08e      	sub	sp, #56	; 0x38
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	605a      	str	r2, [r3, #4]
 800360a:	609a      	str	r2, [r3, #8]
 800360c:	60da      	str	r2, [r3, #12]
 800360e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a4f      	ldr	r2, [pc, #316]	; (8003754 <HAL_SPI_MspInit+0x15c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d12e      	bne.n	8003678 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800361a:	4b4f      	ldr	r3, [pc, #316]	; (8003758 <HAL_SPI_MspInit+0x160>)
 800361c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003620:	4a4d      	ldr	r2, [pc, #308]	; (8003758 <HAL_SPI_MspInit+0x160>)
 8003622:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003626:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800362a:	4b4b      	ldr	r3, [pc, #300]	; (8003758 <HAL_SPI_MspInit+0x160>)
 800362c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003630:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003634:	623b      	str	r3, [r7, #32]
 8003636:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003638:	4b47      	ldr	r3, [pc, #284]	; (8003758 <HAL_SPI_MspInit+0x160>)
 800363a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800363e:	4a46      	ldr	r2, [pc, #280]	; (8003758 <HAL_SPI_MspInit+0x160>)
 8003640:	f043 0301 	orr.w	r3, r3, #1
 8003644:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003648:	4b43      	ldr	r3, [pc, #268]	; (8003758 <HAL_SPI_MspInit+0x160>)
 800364a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	61fb      	str	r3, [r7, #28]
 8003654:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003656:	23e0      	movs	r3, #224	; 0xe0
 8003658:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800365a:	2302      	movs	r3, #2
 800365c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365e:	2300      	movs	r3, #0
 8003660:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003662:	2300      	movs	r3, #0
 8003664:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003666:	2305      	movs	r3, #5
 8003668:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800366a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800366e:	4619      	mov	r1, r3
 8003670:	483a      	ldr	r0, [pc, #232]	; (800375c <HAL_SPI_MspInit+0x164>)
 8003672:	f005 fb9b 	bl	8008dac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003676:	e068      	b.n	800374a <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a38      	ldr	r2, [pc, #224]	; (8003760 <HAL_SPI_MspInit+0x168>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d12f      	bne.n	80036e2 <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003682:	4b35      	ldr	r3, [pc, #212]	; (8003758 <HAL_SPI_MspInit+0x160>)
 8003684:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003688:	4a33      	ldr	r2, [pc, #204]	; (8003758 <HAL_SPI_MspInit+0x160>)
 800368a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800368e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003692:	4b31      	ldr	r3, [pc, #196]	; (8003758 <HAL_SPI_MspInit+0x160>)
 8003694:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800369c:	61bb      	str	r3, [r7, #24]
 800369e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036a0:	4b2d      	ldr	r3, [pc, #180]	; (8003758 <HAL_SPI_MspInit+0x160>)
 80036a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036a6:	4a2c      	ldr	r2, [pc, #176]	; (8003758 <HAL_SPI_MspInit+0x160>)
 80036a8:	f043 0302 	orr.w	r3, r3, #2
 80036ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036b0:	4b29      	ldr	r3, [pc, #164]	; (8003758 <HAL_SPI_MspInit+0x160>)
 80036b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	617b      	str	r3, [r7, #20]
 80036bc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80036be:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80036c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c4:	2302      	movs	r3, #2
 80036c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c8:	2300      	movs	r3, #0
 80036ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036cc:	2300      	movs	r3, #0
 80036ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80036d0:	2305      	movs	r3, #5
 80036d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036d8:	4619      	mov	r1, r3
 80036da:	4822      	ldr	r0, [pc, #136]	; (8003764 <HAL_SPI_MspInit+0x16c>)
 80036dc:	f005 fb66 	bl	8008dac <HAL_GPIO_Init>
}
 80036e0:	e033      	b.n	800374a <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a20      	ldr	r2, [pc, #128]	; (8003768 <HAL_SPI_MspInit+0x170>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d12e      	bne.n	800374a <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80036ec:	4b1a      	ldr	r3, [pc, #104]	; (8003758 <HAL_SPI_MspInit+0x160>)
 80036ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036f2:	4a19      	ldr	r2, [pc, #100]	; (8003758 <HAL_SPI_MspInit+0x160>)
 80036f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036f8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80036fc:	4b16      	ldr	r3, [pc, #88]	; (8003758 <HAL_SPI_MspInit+0x160>)
 80036fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003702:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003706:	613b      	str	r3, [r7, #16]
 8003708:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800370a:	4b13      	ldr	r3, [pc, #76]	; (8003758 <HAL_SPI_MspInit+0x160>)
 800370c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003710:	4a11      	ldr	r2, [pc, #68]	; (8003758 <HAL_SPI_MspInit+0x160>)
 8003712:	f043 0304 	orr.w	r3, r3, #4
 8003716:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800371a:	4b0f      	ldr	r3, [pc, #60]	; (8003758 <HAL_SPI_MspInit+0x160>)
 800371c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003720:	f003 0304 	and.w	r3, r3, #4
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003728:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800372e:	2302      	movs	r3, #2
 8003730:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003732:	2300      	movs	r3, #0
 8003734:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003736:	2300      	movs	r3, #0
 8003738:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800373a:	2306      	movs	r3, #6
 800373c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800373e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003742:	4619      	mov	r1, r3
 8003744:	4809      	ldr	r0, [pc, #36]	; (800376c <HAL_SPI_MspInit+0x174>)
 8003746:	f005 fb31 	bl	8008dac <HAL_GPIO_Init>
}
 800374a:	bf00      	nop
 800374c:	3738      	adds	r7, #56	; 0x38
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40013000 	.word	0x40013000
 8003758:	58024400 	.word	0x58024400
 800375c:	58020000 	.word	0x58020000
 8003760:	40003800 	.word	0x40003800
 8003764:	58020400 	.word	0x58020400
 8003768:	40003c00 	.word	0x40003c00
 800376c:	58020800 	.word	0x58020800

08003770 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b08c      	sub	sp, #48	; 0x30
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003778:	f107 031c 	add.w	r3, r7, #28
 800377c:	2200      	movs	r2, #0
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	605a      	str	r2, [r3, #4]
 8003782:	609a      	str	r2, [r3, #8]
 8003784:	60da      	str	r2, [r3, #12]
 8003786:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003790:	d15d      	bne.n	800384e <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003792:	4b8e      	ldr	r3, [pc, #568]	; (80039cc <HAL_TIM_PWM_MspInit+0x25c>)
 8003794:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003798:	4a8c      	ldr	r2, [pc, #560]	; (80039cc <HAL_TIM_PWM_MspInit+0x25c>)
 800379a:	f043 0301 	orr.w	r3, r3, #1
 800379e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80037a2:	4b8a      	ldr	r3, [pc, #552]	; (80039cc <HAL_TIM_PWM_MspInit+0x25c>)
 80037a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	61bb      	str	r3, [r7, #24]
 80037ae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037b0:	4b86      	ldr	r3, [pc, #536]	; (80039cc <HAL_TIM_PWM_MspInit+0x25c>)
 80037b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037b6:	4a85      	ldr	r2, [pc, #532]	; (80039cc <HAL_TIM_PWM_MspInit+0x25c>)
 80037b8:	f043 0301 	orr.w	r3, r3, #1
 80037bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037c0:	4b82      	ldr	r3, [pc, #520]	; (80039cc <HAL_TIM_PWM_MspInit+0x25c>)
 80037c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80037ce:	2301      	movs	r3, #1
 80037d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d2:	2302      	movs	r3, #2
 80037d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d6:	2300      	movs	r3, #0
 80037d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037da:	2300      	movs	r3, #0
 80037dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80037de:	2301      	movs	r3, #1
 80037e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037e2:	f107 031c 	add.w	r3, r7, #28
 80037e6:	4619      	mov	r1, r3
 80037e8:	4879      	ldr	r0, [pc, #484]	; (80039d0 <HAL_TIM_PWM_MspInit+0x260>)
 80037ea:	f005 fadf 	bl	8008dac <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 80037ee:	4b79      	ldr	r3, [pc, #484]	; (80039d4 <HAL_TIM_PWM_MspInit+0x264>)
 80037f0:	4a79      	ldr	r2, [pc, #484]	; (80039d8 <HAL_TIM_PWM_MspInit+0x268>)
 80037f2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 80037f4:	4b77      	ldr	r3, [pc, #476]	; (80039d4 <HAL_TIM_PWM_MspInit+0x264>)
 80037f6:	2214      	movs	r2, #20
 80037f8:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037fa:	4b76      	ldr	r3, [pc, #472]	; (80039d4 <HAL_TIM_PWM_MspInit+0x264>)
 80037fc:	2240      	movs	r2, #64	; 0x40
 80037fe:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003800:	4b74      	ldr	r3, [pc, #464]	; (80039d4 <HAL_TIM_PWM_MspInit+0x264>)
 8003802:	2200      	movs	r2, #0
 8003804:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003806:	4b73      	ldr	r3, [pc, #460]	; (80039d4 <HAL_TIM_PWM_MspInit+0x264>)
 8003808:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800380c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800380e:	4b71      	ldr	r3, [pc, #452]	; (80039d4 <HAL_TIM_PWM_MspInit+0x264>)
 8003810:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003814:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003816:	4b6f      	ldr	r3, [pc, #444]	; (80039d4 <HAL_TIM_PWM_MspInit+0x264>)
 8003818:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800381c:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 800381e:	4b6d      	ldr	r3, [pc, #436]	; (80039d4 <HAL_TIM_PWM_MspInit+0x264>)
 8003820:	2200      	movs	r2, #0
 8003822:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003824:	4b6b      	ldr	r3, [pc, #428]	; (80039d4 <HAL_TIM_PWM_MspInit+0x264>)
 8003826:	2200      	movs	r2, #0
 8003828:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800382a:	4b6a      	ldr	r3, [pc, #424]	; (80039d4 <HAL_TIM_PWM_MspInit+0x264>)
 800382c:	2200      	movs	r2, #0
 800382e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8003830:	4868      	ldr	r0, [pc, #416]	; (80039d4 <HAL_TIM_PWM_MspInit+0x264>)
 8003832:	f002 fe83 	bl	800653c <HAL_DMA_Init>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 800383c:	f7ff fbf8 	bl	8003030 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a64      	ldr	r2, [pc, #400]	; (80039d4 <HAL_TIM_PWM_MspInit+0x264>)
 8003844:	62da      	str	r2, [r3, #44]	; 0x2c
 8003846:	4a63      	ldr	r2, [pc, #396]	; (80039d4 <HAL_TIM_PWM_MspInit+0x264>)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800384c:	e119      	b.n	8003a82 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a62      	ldr	r2, [pc, #392]	; (80039dc <HAL_TIM_PWM_MspInit+0x26c>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d16d      	bne.n	8003934 <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003858:	4b5c      	ldr	r3, [pc, #368]	; (80039cc <HAL_TIM_PWM_MspInit+0x25c>)
 800385a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800385e:	4a5b      	ldr	r2, [pc, #364]	; (80039cc <HAL_TIM_PWM_MspInit+0x25c>)
 8003860:	f043 0302 	orr.w	r3, r3, #2
 8003864:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003868:	4b58      	ldr	r3, [pc, #352]	; (80039cc <HAL_TIM_PWM_MspInit+0x25c>)
 800386a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	613b      	str	r3, [r7, #16]
 8003874:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 8003876:	4b5a      	ldr	r3, [pc, #360]	; (80039e0 <HAL_TIM_PWM_MspInit+0x270>)
 8003878:	4a5a      	ldr	r2, [pc, #360]	; (80039e4 <HAL_TIM_PWM_MspInit+0x274>)
 800387a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 800387c:	4b58      	ldr	r3, [pc, #352]	; (80039e0 <HAL_TIM_PWM_MspInit+0x270>)
 800387e:	2218      	movs	r2, #24
 8003880:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003882:	4b57      	ldr	r3, [pc, #348]	; (80039e0 <HAL_TIM_PWM_MspInit+0x270>)
 8003884:	2240      	movs	r2, #64	; 0x40
 8003886:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003888:	4b55      	ldr	r3, [pc, #340]	; (80039e0 <HAL_TIM_PWM_MspInit+0x270>)
 800388a:	2200      	movs	r2, #0
 800388c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800388e:	4b54      	ldr	r3, [pc, #336]	; (80039e0 <HAL_TIM_PWM_MspInit+0x270>)
 8003890:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003894:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003896:	4b52      	ldr	r3, [pc, #328]	; (80039e0 <HAL_TIM_PWM_MspInit+0x270>)
 8003898:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800389c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800389e:	4b50      	ldr	r3, [pc, #320]	; (80039e0 <HAL_TIM_PWM_MspInit+0x270>)
 80038a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80038a4:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 80038a6:	4b4e      	ldr	r3, [pc, #312]	; (80039e0 <HAL_TIM_PWM_MspInit+0x270>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80038ac:	4b4c      	ldr	r3, [pc, #304]	; (80039e0 <HAL_TIM_PWM_MspInit+0x270>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038b2:	4b4b      	ldr	r3, [pc, #300]	; (80039e0 <HAL_TIM_PWM_MspInit+0x270>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 80038b8:	4849      	ldr	r0, [pc, #292]	; (80039e0 <HAL_TIM_PWM_MspInit+0x270>)
 80038ba:	f002 fe3f 	bl	800653c <HAL_DMA_Init>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 80038c4:	f7ff fbb4 	bl	8003030 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a45      	ldr	r2, [pc, #276]	; (80039e0 <HAL_TIM_PWM_MspInit+0x270>)
 80038cc:	629a      	str	r2, [r3, #40]	; 0x28
 80038ce:	4a44      	ldr	r2, [pc, #272]	; (80039e0 <HAL_TIM_PWM_MspInit+0x270>)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 80038d4:	4b44      	ldr	r3, [pc, #272]	; (80039e8 <HAL_TIM_PWM_MspInit+0x278>)
 80038d6:	4a45      	ldr	r2, [pc, #276]	; (80039ec <HAL_TIM_PWM_MspInit+0x27c>)
 80038d8:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 80038da:	4b43      	ldr	r3, [pc, #268]	; (80039e8 <HAL_TIM_PWM_MspInit+0x278>)
 80038dc:	2217      	movs	r2, #23
 80038de:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80038e0:	4b41      	ldr	r3, [pc, #260]	; (80039e8 <HAL_TIM_PWM_MspInit+0x278>)
 80038e2:	2240      	movs	r2, #64	; 0x40
 80038e4:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80038e6:	4b40      	ldr	r3, [pc, #256]	; (80039e8 <HAL_TIM_PWM_MspInit+0x278>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80038ec:	4b3e      	ldr	r3, [pc, #248]	; (80039e8 <HAL_TIM_PWM_MspInit+0x278>)
 80038ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038f2:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80038f4:	4b3c      	ldr	r3, [pc, #240]	; (80039e8 <HAL_TIM_PWM_MspInit+0x278>)
 80038f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80038fa:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80038fc:	4b3a      	ldr	r3, [pc, #232]	; (80039e8 <HAL_TIM_PWM_MspInit+0x278>)
 80038fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003902:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8003904:	4b38      	ldr	r3, [pc, #224]	; (80039e8 <HAL_TIM_PWM_MspInit+0x278>)
 8003906:	2200      	movs	r2, #0
 8003908:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800390a:	4b37      	ldr	r3, [pc, #220]	; (80039e8 <HAL_TIM_PWM_MspInit+0x278>)
 800390c:	2200      	movs	r2, #0
 800390e:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003910:	4b35      	ldr	r3, [pc, #212]	; (80039e8 <HAL_TIM_PWM_MspInit+0x278>)
 8003912:	2200      	movs	r2, #0
 8003914:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8003916:	4834      	ldr	r0, [pc, #208]	; (80039e8 <HAL_TIM_PWM_MspInit+0x278>)
 8003918:	f002 fe10 	bl	800653c <HAL_DMA_Init>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 8003922:	f7ff fb85 	bl	8003030 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a2f      	ldr	r2, [pc, #188]	; (80039e8 <HAL_TIM_PWM_MspInit+0x278>)
 800392a:	625a      	str	r2, [r3, #36]	; 0x24
 800392c:	4a2e      	ldr	r2, [pc, #184]	; (80039e8 <HAL_TIM_PWM_MspInit+0x278>)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003932:	e0a6      	b.n	8003a82 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a2d      	ldr	r2, [pc, #180]	; (80039f0 <HAL_TIM_PWM_MspInit+0x280>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d15e      	bne.n	80039fc <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800393e:	4b23      	ldr	r3, [pc, #140]	; (80039cc <HAL_TIM_PWM_MspInit+0x25c>)
 8003940:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003944:	4a21      	ldr	r2, [pc, #132]	; (80039cc <HAL_TIM_PWM_MspInit+0x25c>)
 8003946:	f043 0304 	orr.w	r3, r3, #4
 800394a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800394e:	4b1f      	ldr	r3, [pc, #124]	; (80039cc <HAL_TIM_PWM_MspInit+0x25c>)
 8003950:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	60fb      	str	r3, [r7, #12]
 800395a:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 800395c:	4b25      	ldr	r3, [pc, #148]	; (80039f4 <HAL_TIM_PWM_MspInit+0x284>)
 800395e:	4a26      	ldr	r2, [pc, #152]	; (80039f8 <HAL_TIM_PWM_MspInit+0x288>)
 8003960:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 8003962:	4b24      	ldr	r3, [pc, #144]	; (80039f4 <HAL_TIM_PWM_MspInit+0x284>)
 8003964:	221f      	movs	r2, #31
 8003966:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003968:	4b22      	ldr	r3, [pc, #136]	; (80039f4 <HAL_TIM_PWM_MspInit+0x284>)
 800396a:	2240      	movs	r2, #64	; 0x40
 800396c:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800396e:	4b21      	ldr	r3, [pc, #132]	; (80039f4 <HAL_TIM_PWM_MspInit+0x284>)
 8003970:	2200      	movs	r2, #0
 8003972:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003974:	4b1f      	ldr	r3, [pc, #124]	; (80039f4 <HAL_TIM_PWM_MspInit+0x284>)
 8003976:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800397a:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800397c:	4b1d      	ldr	r3, [pc, #116]	; (80039f4 <HAL_TIM_PWM_MspInit+0x284>)
 800397e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003982:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003984:	4b1b      	ldr	r3, [pc, #108]	; (80039f4 <HAL_TIM_PWM_MspInit+0x284>)
 8003986:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800398a:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 800398c:	4b19      	ldr	r3, [pc, #100]	; (80039f4 <HAL_TIM_PWM_MspInit+0x284>)
 800398e:	2200      	movs	r2, #0
 8003990:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003992:	4b18      	ldr	r3, [pc, #96]	; (80039f4 <HAL_TIM_PWM_MspInit+0x284>)
 8003994:	2200      	movs	r2, #0
 8003996:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003998:	4b16      	ldr	r3, [pc, #88]	; (80039f4 <HAL_TIM_PWM_MspInit+0x284>)
 800399a:	2200      	movs	r2, #0
 800399c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 800399e:	4815      	ldr	r0, [pc, #84]	; (80039f4 <HAL_TIM_PWM_MspInit+0x284>)
 80039a0:	f002 fdcc 	bl	800653c <HAL_DMA_Init>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 80039aa:	f7ff fb41 	bl	8003030 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a10      	ldr	r2, [pc, #64]	; (80039f4 <HAL_TIM_PWM_MspInit+0x284>)
 80039b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80039b4:	4a0f      	ldr	r2, [pc, #60]	; (80039f4 <HAL_TIM_PWM_MspInit+0x284>)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80039ba:	2200      	movs	r2, #0
 80039bc:	2100      	movs	r1, #0
 80039be:	201e      	movs	r0, #30
 80039c0:	f002 fd87 	bl	80064d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80039c4:	201e      	movs	r0, #30
 80039c6:	f002 fd9e 	bl	8006506 <HAL_NVIC_EnableIRQ>
}
 80039ca:	e05a      	b.n	8003a82 <HAL_TIM_PWM_MspInit+0x312>
 80039cc:	58024400 	.word	0x58024400
 80039d0:	58020000 	.word	0x58020000
 80039d4:	24001320 	.word	0x24001320
 80039d8:	40020028 	.word	0x40020028
 80039dc:	40000400 	.word	0x40000400
 80039e0:	24001398 	.word	0x24001398
 80039e4:	40020058 	.word	0x40020058
 80039e8:	24001410 	.word	0x24001410
 80039ec:	40020070 	.word	0x40020070
 80039f0:	40000800 	.word	0x40000800
 80039f4:	24001488 	.word	0x24001488
 80039f8:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a22      	ldr	r2, [pc, #136]	; (8003a8c <HAL_TIM_PWM_MspInit+0x31c>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d13d      	bne.n	8003a82 <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003a06:	4b22      	ldr	r3, [pc, #136]	; (8003a90 <HAL_TIM_PWM_MspInit+0x320>)
 8003a08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a0c:	4a20      	ldr	r2, [pc, #128]	; (8003a90 <HAL_TIM_PWM_MspInit+0x320>)
 8003a0e:	f043 0308 	orr.w	r3, r3, #8
 8003a12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003a16:	4b1e      	ldr	r3, [pc, #120]	; (8003a90 <HAL_TIM_PWM_MspInit+0x320>)
 8003a18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	60bb      	str	r3, [r7, #8]
 8003a22:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 8003a24:	4b1b      	ldr	r3, [pc, #108]	; (8003a94 <HAL_TIM_PWM_MspInit+0x324>)
 8003a26:	4a1c      	ldr	r2, [pc, #112]	; (8003a98 <HAL_TIM_PWM_MspInit+0x328>)
 8003a28:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 8003a2a:	4b1a      	ldr	r3, [pc, #104]	; (8003a94 <HAL_TIM_PWM_MspInit+0x324>)
 8003a2c:	223a      	movs	r2, #58	; 0x3a
 8003a2e:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a30:	4b18      	ldr	r3, [pc, #96]	; (8003a94 <HAL_TIM_PWM_MspInit+0x324>)
 8003a32:	2240      	movs	r2, #64	; 0x40
 8003a34:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a36:	4b17      	ldr	r3, [pc, #92]	; (8003a94 <HAL_TIM_PWM_MspInit+0x324>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8003a3c:	4b15      	ldr	r3, [pc, #84]	; (8003a94 <HAL_TIM_PWM_MspInit+0x324>)
 8003a3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a42:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003a44:	4b13      	ldr	r3, [pc, #76]	; (8003a94 <HAL_TIM_PWM_MspInit+0x324>)
 8003a46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a4a:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003a4c:	4b11      	ldr	r3, [pc, #68]	; (8003a94 <HAL_TIM_PWM_MspInit+0x324>)
 8003a4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a52:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 8003a54:	4b0f      	ldr	r3, [pc, #60]	; (8003a94 <HAL_TIM_PWM_MspInit+0x324>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8003a5a:	4b0e      	ldr	r3, [pc, #56]	; (8003a94 <HAL_TIM_PWM_MspInit+0x324>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a60:	4b0c      	ldr	r3, [pc, #48]	; (8003a94 <HAL_TIM_PWM_MspInit+0x324>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 8003a66:	480b      	ldr	r0, [pc, #44]	; (8003a94 <HAL_TIM_PWM_MspInit+0x324>)
 8003a68:	f002 fd68 	bl	800653c <HAL_DMA_Init>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 8003a72:	f7ff fadd 	bl	8003030 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a06      	ldr	r2, [pc, #24]	; (8003a94 <HAL_TIM_PWM_MspInit+0x324>)
 8003a7a:	631a      	str	r2, [r3, #48]	; 0x30
 8003a7c:	4a05      	ldr	r2, [pc, #20]	; (8003a94 <HAL_TIM_PWM_MspInit+0x324>)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003a82:	bf00      	nop
 8003a84:	3730      	adds	r7, #48	; 0x30
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	40000c00 	.word	0x40000c00
 8003a90:	58024400 	.word	0x58024400
 8003a94:	24001500 	.word	0x24001500
 8003a98:	40020040 	.word	0x40020040

08003a9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a16      	ldr	r2, [pc, #88]	; (8003b04 <HAL_TIM_Base_MspInit+0x68>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d10f      	bne.n	8003ace <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003aae:	4b16      	ldr	r3, [pc, #88]	; (8003b08 <HAL_TIM_Base_MspInit+0x6c>)
 8003ab0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ab4:	4a14      	ldr	r2, [pc, #80]	; (8003b08 <HAL_TIM_Base_MspInit+0x6c>)
 8003ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003abe:	4b12      	ldr	r3, [pc, #72]	; (8003b08 <HAL_TIM_Base_MspInit+0x6c>)
 8003ac0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac8:	60fb      	str	r3, [r7, #12]
 8003aca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8003acc:	e013      	b.n	8003af6 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM14)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a0e      	ldr	r2, [pc, #56]	; (8003b0c <HAL_TIM_Base_MspInit+0x70>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d10e      	bne.n	8003af6 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003ad8:	4b0b      	ldr	r3, [pc, #44]	; (8003b08 <HAL_TIM_Base_MspInit+0x6c>)
 8003ada:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ade:	4a0a      	ldr	r2, [pc, #40]	; (8003b08 <HAL_TIM_Base_MspInit+0x6c>)
 8003ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ae8:	4b07      	ldr	r3, [pc, #28]	; (8003b08 <HAL_TIM_Base_MspInit+0x6c>)
 8003aea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af2:	60bb      	str	r3, [r7, #8]
 8003af4:	68bb      	ldr	r3, [r7, #8]
}
 8003af6:	bf00      	nop
 8003af8:	3714      	adds	r7, #20
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	40001c00 	.word	0x40001c00
 8003b08:	58024400 	.word	0x58024400
 8003b0c:	40002000 	.word	0x40002000

08003b10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08c      	sub	sp, #48	; 0x30
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b18:	f107 031c 	add.w	r3, r7, #28
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	605a      	str	r2, [r3, #4]
 8003b22:	609a      	str	r2, [r3, #8]
 8003b24:	60da      	str	r2, [r3, #12]
 8003b26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b30:	d120      	bne.n	8003b74 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b32:	4b52      	ldr	r3, [pc, #328]	; (8003c7c <HAL_TIM_MspPostInit+0x16c>)
 8003b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b38:	4a50      	ldr	r2, [pc, #320]	; (8003c7c <HAL_TIM_MspPostInit+0x16c>)
 8003b3a:	f043 0302 	orr.w	r3, r3, #2
 8003b3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b42:	4b4e      	ldr	r3, [pc, #312]	; (8003c7c <HAL_TIM_MspPostInit+0x16c>)
 8003b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	61bb      	str	r3, [r7, #24]
 8003b4e:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003b50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b56:	2302      	movs	r3, #2
 8003b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003b62:	2301      	movs	r3, #1
 8003b64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b66:	f107 031c 	add.w	r3, r7, #28
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	4844      	ldr	r0, [pc, #272]	; (8003c80 <HAL_TIM_MspPostInit+0x170>)
 8003b6e:	f005 f91d 	bl	8008dac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8003b72:	e07f      	b.n	8003c74 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a42      	ldr	r2, [pc, #264]	; (8003c84 <HAL_TIM_MspPostInit+0x174>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d11f      	bne.n	8003bbe <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b7e:	4b3f      	ldr	r3, [pc, #252]	; (8003c7c <HAL_TIM_MspPostInit+0x16c>)
 8003b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b84:	4a3d      	ldr	r2, [pc, #244]	; (8003c7c <HAL_TIM_MspPostInit+0x16c>)
 8003b86:	f043 0302 	orr.w	r3, r3, #2
 8003b8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b8e:	4b3b      	ldr	r3, [pc, #236]	; (8003c7c <HAL_TIM_MspPostInit+0x16c>)
 8003b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	617b      	str	r3, [r7, #20]
 8003b9a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003b9c:	2330      	movs	r3, #48	; 0x30
 8003b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003bac:	2302      	movs	r3, #2
 8003bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bb0:	f107 031c 	add.w	r3, r7, #28
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	4832      	ldr	r0, [pc, #200]	; (8003c80 <HAL_TIM_MspPostInit+0x170>)
 8003bb8:	f005 f8f8 	bl	8008dac <HAL_GPIO_Init>
}
 8003bbc:	e05a      	b.n	8003c74 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a31      	ldr	r2, [pc, #196]	; (8003c88 <HAL_TIM_MspPostInit+0x178>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d131      	bne.n	8003c2c <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bc8:	4b2c      	ldr	r3, [pc, #176]	; (8003c7c <HAL_TIM_MspPostInit+0x16c>)
 8003bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bce:	4a2b      	ldr	r2, [pc, #172]	; (8003c7c <HAL_TIM_MspPostInit+0x16c>)
 8003bd0:	f043 0308 	orr.w	r3, r3, #8
 8003bd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003bd8:	4b28      	ldr	r3, [pc, #160]	; (8003c7c <HAL_TIM_MspPostInit+0x16c>)
 8003bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bde:	f003 0308 	and.w	r3, r3, #8
 8003be2:	613b      	str	r3, [r7, #16]
 8003be4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8003be6:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8003bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bec:	2302      	movs	r3, #2
 8003bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003bfc:	f107 031c 	add.w	r3, r7, #28
 8003c00:	4619      	mov	r1, r3
 8003c02:	4822      	ldr	r0, [pc, #136]	; (8003c8c <HAL_TIM_MspPostInit+0x17c>)
 8003c04:	f005 f8d2 	bl	8008dac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003c08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c0e:	2302      	movs	r3, #2
 8003c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003c12:	2302      	movs	r3, #2
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c16:	2300      	movs	r3, #0
 8003c18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c1e:	f107 031c 	add.w	r3, r7, #28
 8003c22:	4619      	mov	r1, r3
 8003c24:	4819      	ldr	r0, [pc, #100]	; (8003c8c <HAL_TIM_MspPostInit+0x17c>)
 8003c26:	f005 f8c1 	bl	8008dac <HAL_GPIO_Init>
}
 8003c2a:	e023      	b.n	8003c74 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a17      	ldr	r2, [pc, #92]	; (8003c90 <HAL_TIM_MspPostInit+0x180>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d11e      	bne.n	8003c74 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c36:	4b11      	ldr	r3, [pc, #68]	; (8003c7c <HAL_TIM_MspPostInit+0x16c>)
 8003c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c3c:	4a0f      	ldr	r2, [pc, #60]	; (8003c7c <HAL_TIM_MspPostInit+0x16c>)
 8003c3e:	f043 0301 	orr.w	r3, r3, #1
 8003c42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c46:	4b0d      	ldr	r3, [pc, #52]	; (8003c7c <HAL_TIM_MspPostInit+0x16c>)
 8003c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	60fb      	str	r3, [r7, #12]
 8003c52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003c54:	2308      	movs	r3, #8
 8003c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c58:	2302      	movs	r3, #2
 8003c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c60:	2300      	movs	r3, #0
 8003c62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003c64:	2302      	movs	r3, #2
 8003c66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c68:	f107 031c 	add.w	r3, r7, #28
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	4809      	ldr	r0, [pc, #36]	; (8003c94 <HAL_TIM_MspPostInit+0x184>)
 8003c70:	f005 f89c 	bl	8008dac <HAL_GPIO_Init>
}
 8003c74:	bf00      	nop
 8003c76:	3730      	adds	r7, #48	; 0x30
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	58024400 	.word	0x58024400
 8003c80:	58020400 	.word	0x58020400
 8003c84:	40000400 	.word	0x40000400
 8003c88:	40000800 	.word	0x40000800
 8003c8c:	58020c00 	.word	0x58020c00
 8003c90:	40000c00 	.word	0x40000c00
 8003c94:	58020000 	.word	0x58020000

08003c98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b0ba      	sub	sp, #232	; 0xe8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ca0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	605a      	str	r2, [r3, #4]
 8003caa:	609a      	str	r2, [r3, #8]
 8003cac:	60da      	str	r2, [r3, #12]
 8003cae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003cb0:	f107 0318 	add.w	r3, r7, #24
 8003cb4:	22b8      	movs	r2, #184	; 0xb8
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f018 fb1e 	bl	801c2fa <memset>
  if(huart->Instance==UART4)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a4d      	ldr	r2, [pc, #308]	; (8003df8 <HAL_UART_MspInit+0x160>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d147      	bne.n	8003d58 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003cc8:	f04f 0202 	mov.w	r2, #2
 8003ccc:	f04f 0300 	mov.w	r3, #0
 8003cd0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003cda:	f107 0318 	add.w	r3, r7, #24
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f007 fe52 	bl	800b988 <HAL_RCCEx_PeriphCLKConfig>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003cea:	f7ff f9a1 	bl	8003030 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003cee:	4b43      	ldr	r3, [pc, #268]	; (8003dfc <HAL_UART_MspInit+0x164>)
 8003cf0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003cf4:	4a41      	ldr	r2, [pc, #260]	; (8003dfc <HAL_UART_MspInit+0x164>)
 8003cf6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003cfa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003cfe:	4b3f      	ldr	r3, [pc, #252]	; (8003dfc <HAL_UART_MspInit+0x164>)
 8003d00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d08:	617b      	str	r3, [r7, #20]
 8003d0a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d0c:	4b3b      	ldr	r3, [pc, #236]	; (8003dfc <HAL_UART_MspInit+0x164>)
 8003d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d12:	4a3a      	ldr	r2, [pc, #232]	; (8003dfc <HAL_UART_MspInit+0x164>)
 8003d14:	f043 0302 	orr.w	r3, r3, #2
 8003d18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d1c:	4b37      	ldr	r3, [pc, #220]	; (8003dfc <HAL_UART_MspInit+0x164>)
 8003d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	613b      	str	r3, [r7, #16]
 8003d28:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003d2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003d2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d32:	2302      	movs	r3, #2
 8003d34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003d44:	2308      	movs	r3, #8
 8003d46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d4a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003d4e:	4619      	mov	r1, r3
 8003d50:	482b      	ldr	r0, [pc, #172]	; (8003e00 <HAL_UART_MspInit+0x168>)
 8003d52:	f005 f82b 	bl	8008dac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003d56:	e04a      	b.n	8003dee <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a29      	ldr	r2, [pc, #164]	; (8003e04 <HAL_UART_MspInit+0x16c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d145      	bne.n	8003dee <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003d62:	f04f 0201 	mov.w	r2, #1
 8003d66:	f04f 0300 	mov.w	r3, #0
 8003d6a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d74:	f107 0318 	add.w	r3, r7, #24
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f007 fe05 	bl	800b988 <HAL_RCCEx_PeriphCLKConfig>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8003d84:	f7ff f954 	bl	8003030 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003d88:	4b1c      	ldr	r3, [pc, #112]	; (8003dfc <HAL_UART_MspInit+0x164>)
 8003d8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d8e:	4a1b      	ldr	r2, [pc, #108]	; (8003dfc <HAL_UART_MspInit+0x164>)
 8003d90:	f043 0320 	orr.w	r3, r3, #32
 8003d94:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003d98:	4b18      	ldr	r3, [pc, #96]	; (8003dfc <HAL_UART_MspInit+0x164>)
 8003d9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d9e:	f003 0320 	and.w	r3, r3, #32
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003da6:	4b15      	ldr	r3, [pc, #84]	; (8003dfc <HAL_UART_MspInit+0x164>)
 8003da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dac:	4a13      	ldr	r2, [pc, #76]	; (8003dfc <HAL_UART_MspInit+0x164>)
 8003dae:	f043 0304 	orr.w	r3, r3, #4
 8003db2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003db6:	4b11      	ldr	r3, [pc, #68]	; (8003dfc <HAL_UART_MspInit+0x164>)
 8003db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	60bb      	str	r3, [r7, #8]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003dc4:	23c0      	movs	r3, #192	; 0xc0
 8003dc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dca:	2302      	movs	r3, #2
 8003dcc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8003ddc:	2307      	movs	r3, #7
 8003dde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003de2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003de6:	4619      	mov	r1, r3
 8003de8:	4807      	ldr	r0, [pc, #28]	; (8003e08 <HAL_UART_MspInit+0x170>)
 8003dea:	f004 ffdf 	bl	8008dac <HAL_GPIO_Init>
}
 8003dee:	bf00      	nop
 8003df0:	37e8      	adds	r7, #232	; 0xe8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	40004c00 	.word	0x40004c00
 8003dfc:	58024400 	.word	0x58024400
 8003e00:	58020400 	.word	0x58020400
 8003e04:	40011400 	.word	0x40011400
 8003e08:	58020800 	.word	0x58020800

08003e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e10:	e7fe      	b.n	8003e10 <NMI_Handler+0x4>

08003e12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e12:	b480      	push	{r7}
 8003e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e16:	e7fe      	b.n	8003e16 <HardFault_Handler+0x4>

08003e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e1c:	e7fe      	b.n	8003e1c <MemManage_Handler+0x4>

08003e1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e22:	e7fe      	b.n	8003e22 <BusFault_Handler+0x4>

08003e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e28:	e7fe      	b.n	8003e28 <UsageFault_Handler+0x4>

08003e2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e2e:	bf00      	nop
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e3c:	bf00      	nop
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e46:	b480      	push	{r7}
 8003e48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e4a:	bf00      	nop
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e58:	f000 fa4a 	bl	80042f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e5c:	bf00      	nop
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8003e64:	4802      	ldr	r0, [pc, #8]	; (8003e70 <DMA1_Stream0_IRQHandler+0x10>)
 8003e66:	f003 f92b 	bl	80070c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003e6a:	bf00      	nop
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	24001488 	.word	0x24001488

08003e74 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8003e78:	4802      	ldr	r0, [pc, #8]	; (8003e84 <DMA1_Stream1_IRQHandler+0x10>)
 8003e7a:	f003 f921 	bl	80070c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003e7e:	bf00      	nop
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	24001320 	.word	0x24001320

08003e88 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8003e8c:	4802      	ldr	r0, [pc, #8]	; (8003e98 <DMA1_Stream2_IRQHandler+0x10>)
 8003e8e:	f003 f917 	bl	80070c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003e92:	bf00      	nop
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	24001500 	.word	0x24001500

08003e9c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003ea0:	4802      	ldr	r0, [pc, #8]	; (8003eac <DMA1_Stream3_IRQHandler+0x10>)
 8003ea2:	f003 f90d 	bl	80070c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003ea6:	bf00      	nop
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	24001398 	.word	0x24001398

08003eb0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8003eb4:	4802      	ldr	r0, [pc, #8]	; (8003ec0 <DMA1_Stream4_IRQHandler+0x10>)
 8003eb6:	f003 f903 	bl	80070c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003eba:	bf00      	nop
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	24001410 	.word	0x24001410

08003ec4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003ec8:	4802      	ldr	r0, [pc, #8]	; (8003ed4 <DMA1_Stream5_IRQHandler+0x10>)
 8003eca:	f003 f8f9 	bl	80070c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003ece:	bf00      	nop
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	24000d4c 	.word	0x24000d4c

08003ed8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003edc:	4802      	ldr	r0, [pc, #8]	; (8003ee8 <TIM4_IRQHandler+0x10>)
 8003ede:	f00d f8e3 	bl	80110a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003ee2:	bf00      	nop
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	240011f0 	.word	0x240011f0

08003eec <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003ef0:	4802      	ldr	r0, [pc, #8]	; (8003efc <I2C2_EV_IRQHandler+0x10>)
 8003ef2:	f005 f9c5 	bl	8009280 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003ef6:	bf00      	nop
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	24000edc 	.word	0x24000edc

08003f00 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003f04:	4802      	ldr	r0, [pc, #8]	; (8003f10 <DMA2_Stream7_IRQHandler+0x10>)
 8003f06:	f003 f8db 	bl	80070c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003f0a:	bf00      	nop
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	24000dc4 	.word	0x24000dc4

08003f14 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003f18:	4802      	ldr	r0, [pc, #8]	; (8003f24 <OTG_HS_IRQHandler+0x10>)
 8003f1a:	f005 fbbb 	bl	8009694 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8003f1e:	bf00      	nop
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	24002dcc 	.word	0x24002dcc

08003f28 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8003f2c:	4802      	ldr	r0, [pc, #8]	; (8003f38 <SDMMC2_IRQHandler+0x10>)
 8003f2e:	f00a fd2f 	bl	800e990 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 8003f32:	bf00      	nop
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	24000f44 	.word	0x24000f44

08003f3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0
  return 1;
 8003f40:	2301      	movs	r3, #1
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <_kill>:

int _kill(int pid, int sig)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003f56:	f018 fa23 	bl	801c3a0 <__errno>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2216      	movs	r2, #22
 8003f5e:	601a      	str	r2, [r3, #0]
  return -1;
 8003f60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3708      	adds	r7, #8
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <_exit>:

void _exit (int status)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003f74:	f04f 31ff 	mov.w	r1, #4294967295
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7ff ffe7 	bl	8003f4c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003f7e:	e7fe      	b.n	8003f7e <_exit+0x12>

08003f80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	617b      	str	r3, [r7, #20]
 8003f90:	e00a      	b.n	8003fa8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003f92:	f3af 8000 	nop.w
 8003f96:	4601      	mov	r1, r0
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	1c5a      	adds	r2, r3, #1
 8003f9c:	60ba      	str	r2, [r7, #8]
 8003f9e:	b2ca      	uxtb	r2, r1
 8003fa0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	617b      	str	r3, [r7, #20]
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	dbf0      	blt.n	8003f92 <_read+0x12>
  }

  return len;
 8003fb0:	687b      	ldr	r3, [r7, #4]
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3718      	adds	r7, #24
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b086      	sub	sp, #24
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	60f8      	str	r0, [r7, #12]
 8003fc2:	60b9      	str	r1, [r7, #8]
 8003fc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	617b      	str	r3, [r7, #20]
 8003fca:	e009      	b.n	8003fe0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	1c5a      	adds	r2, r3, #1
 8003fd0:	60ba      	str	r2, [r7, #8]
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	617b      	str	r3, [r7, #20]
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	dbf1      	blt.n	8003fcc <_write+0x12>
  }
  return len;
 8003fe8:	687b      	ldr	r3, [r7, #4]
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3718      	adds	r7, #24
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <_close>:

int _close(int file)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003ffa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
 8004012:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800401a:	605a      	str	r2, [r3, #4]
  return 0;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <_isatty>:

int _isatty(int file)
{
 800402a:	b480      	push	{r7}
 800402c:	b083      	sub	sp, #12
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004032:	2301      	movs	r3, #1
}
 8004034:	4618      	mov	r0, r3
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
	...

0800405c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004064:	4a14      	ldr	r2, [pc, #80]	; (80040b8 <_sbrk+0x5c>)
 8004066:	4b15      	ldr	r3, [pc, #84]	; (80040bc <_sbrk+0x60>)
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004070:	4b13      	ldr	r3, [pc, #76]	; (80040c0 <_sbrk+0x64>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d102      	bne.n	800407e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004078:	4b11      	ldr	r3, [pc, #68]	; (80040c0 <_sbrk+0x64>)
 800407a:	4a12      	ldr	r2, [pc, #72]	; (80040c4 <_sbrk+0x68>)
 800407c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800407e:	4b10      	ldr	r3, [pc, #64]	; (80040c0 <_sbrk+0x64>)
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4413      	add	r3, r2
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	429a      	cmp	r2, r3
 800408a:	d207      	bcs.n	800409c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800408c:	f018 f988 	bl	801c3a0 <__errno>
 8004090:	4603      	mov	r3, r0
 8004092:	220c      	movs	r2, #12
 8004094:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004096:	f04f 33ff 	mov.w	r3, #4294967295
 800409a:	e009      	b.n	80040b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800409c:	4b08      	ldr	r3, [pc, #32]	; (80040c0 <_sbrk+0x64>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80040a2:	4b07      	ldr	r3, [pc, #28]	; (80040c0 <_sbrk+0x64>)
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4413      	add	r3, r2
 80040aa:	4a05      	ldr	r2, [pc, #20]	; (80040c0 <_sbrk+0x64>)
 80040ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80040ae:	68fb      	ldr	r3, [r7, #12]
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3718      	adds	r7, #24
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	24050000 	.word	0x24050000
 80040bc:	00000800 	.word	0x00000800
 80040c0:	240016a0 	.word	0x240016a0
 80040c4:	24003648 	.word	0x24003648

080040c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80040cc:	4b32      	ldr	r3, [pc, #200]	; (8004198 <SystemInit+0xd0>)
 80040ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d2:	4a31      	ldr	r2, [pc, #196]	; (8004198 <SystemInit+0xd0>)
 80040d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80040dc:	4b2f      	ldr	r3, [pc, #188]	; (800419c <SystemInit+0xd4>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 030f 	and.w	r3, r3, #15
 80040e4:	2b06      	cmp	r3, #6
 80040e6:	d807      	bhi.n	80040f8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80040e8:	4b2c      	ldr	r3, [pc, #176]	; (800419c <SystemInit+0xd4>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f023 030f 	bic.w	r3, r3, #15
 80040f0:	4a2a      	ldr	r2, [pc, #168]	; (800419c <SystemInit+0xd4>)
 80040f2:	f043 0307 	orr.w	r3, r3, #7
 80040f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80040f8:	4b29      	ldr	r3, [pc, #164]	; (80041a0 <SystemInit+0xd8>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a28      	ldr	r2, [pc, #160]	; (80041a0 <SystemInit+0xd8>)
 80040fe:	f043 0301 	orr.w	r3, r3, #1
 8004102:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004104:	4b26      	ldr	r3, [pc, #152]	; (80041a0 <SystemInit+0xd8>)
 8004106:	2200      	movs	r2, #0
 8004108:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800410a:	4b25      	ldr	r3, [pc, #148]	; (80041a0 <SystemInit+0xd8>)
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	4924      	ldr	r1, [pc, #144]	; (80041a0 <SystemInit+0xd8>)
 8004110:	4b24      	ldr	r3, [pc, #144]	; (80041a4 <SystemInit+0xdc>)
 8004112:	4013      	ands	r3, r2
 8004114:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004116:	4b21      	ldr	r3, [pc, #132]	; (800419c <SystemInit+0xd4>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0308 	and.w	r3, r3, #8
 800411e:	2b00      	cmp	r3, #0
 8004120:	d007      	beq.n	8004132 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004122:	4b1e      	ldr	r3, [pc, #120]	; (800419c <SystemInit+0xd4>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f023 030f 	bic.w	r3, r3, #15
 800412a:	4a1c      	ldr	r2, [pc, #112]	; (800419c <SystemInit+0xd4>)
 800412c:	f043 0307 	orr.w	r3, r3, #7
 8004130:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004132:	4b1b      	ldr	r3, [pc, #108]	; (80041a0 <SystemInit+0xd8>)
 8004134:	2200      	movs	r2, #0
 8004136:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004138:	4b19      	ldr	r3, [pc, #100]	; (80041a0 <SystemInit+0xd8>)
 800413a:	2200      	movs	r2, #0
 800413c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800413e:	4b18      	ldr	r3, [pc, #96]	; (80041a0 <SystemInit+0xd8>)
 8004140:	2200      	movs	r2, #0
 8004142:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004144:	4b16      	ldr	r3, [pc, #88]	; (80041a0 <SystemInit+0xd8>)
 8004146:	4a18      	ldr	r2, [pc, #96]	; (80041a8 <SystemInit+0xe0>)
 8004148:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800414a:	4b15      	ldr	r3, [pc, #84]	; (80041a0 <SystemInit+0xd8>)
 800414c:	4a17      	ldr	r2, [pc, #92]	; (80041ac <SystemInit+0xe4>)
 800414e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004150:	4b13      	ldr	r3, [pc, #76]	; (80041a0 <SystemInit+0xd8>)
 8004152:	4a17      	ldr	r2, [pc, #92]	; (80041b0 <SystemInit+0xe8>)
 8004154:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004156:	4b12      	ldr	r3, [pc, #72]	; (80041a0 <SystemInit+0xd8>)
 8004158:	2200      	movs	r2, #0
 800415a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800415c:	4b10      	ldr	r3, [pc, #64]	; (80041a0 <SystemInit+0xd8>)
 800415e:	4a14      	ldr	r2, [pc, #80]	; (80041b0 <SystemInit+0xe8>)
 8004160:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004162:	4b0f      	ldr	r3, [pc, #60]	; (80041a0 <SystemInit+0xd8>)
 8004164:	2200      	movs	r2, #0
 8004166:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004168:	4b0d      	ldr	r3, [pc, #52]	; (80041a0 <SystemInit+0xd8>)
 800416a:	4a11      	ldr	r2, [pc, #68]	; (80041b0 <SystemInit+0xe8>)
 800416c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800416e:	4b0c      	ldr	r3, [pc, #48]	; (80041a0 <SystemInit+0xd8>)
 8004170:	2200      	movs	r2, #0
 8004172:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004174:	4b0a      	ldr	r3, [pc, #40]	; (80041a0 <SystemInit+0xd8>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a09      	ldr	r2, [pc, #36]	; (80041a0 <SystemInit+0xd8>)
 800417a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800417e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004180:	4b07      	ldr	r3, [pc, #28]	; (80041a0 <SystemInit+0xd8>)
 8004182:	2200      	movs	r2, #0
 8004184:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004186:	4b0b      	ldr	r3, [pc, #44]	; (80041b4 <SystemInit+0xec>)
 8004188:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800418c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800418e:	bf00      	nop
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	e000ed00 	.word	0xe000ed00
 800419c:	52002000 	.word	0x52002000
 80041a0:	58024400 	.word	0x58024400
 80041a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80041a8:	02020200 	.word	0x02020200
 80041ac:	01ff0000 	.word	0x01ff0000
 80041b0:	01010280 	.word	0x01010280
 80041b4:	52004000 	.word	0x52004000

080041b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80041b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80041bc:	f7ff ff84 	bl	80040c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80041c0:	480c      	ldr	r0, [pc, #48]	; (80041f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80041c2:	490d      	ldr	r1, [pc, #52]	; (80041f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80041c4:	4a0d      	ldr	r2, [pc, #52]	; (80041fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80041c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80041c8:	e002      	b.n	80041d0 <LoopCopyDataInit>

080041ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80041ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80041cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80041ce:	3304      	adds	r3, #4

080041d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80041d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80041d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80041d4:	d3f9      	bcc.n	80041ca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80041d6:	4a0a      	ldr	r2, [pc, #40]	; (8004200 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80041d8:	4c0a      	ldr	r4, [pc, #40]	; (8004204 <LoopFillZerobss+0x22>)
  movs r3, #0
 80041da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80041dc:	e001      	b.n	80041e2 <LoopFillZerobss>

080041de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80041de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80041e0:	3204      	adds	r2, #4

080041e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80041e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80041e4:	d3fb      	bcc.n	80041de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80041e6:	f018 f8e1 	bl	801c3ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80041ea:	f7fd fa2b 	bl	8001644 <main>
  bx  lr
 80041ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80041f0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80041f4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80041f8:	240002c8 	.word	0x240002c8
  ldr r2, =_sidata
 80041fc:	08020ddc 	.word	0x08020ddc
  ldr r2, =_sbss
 8004200:	240002c8 	.word	0x240002c8
  ldr r4, =_ebss
 8004204:	24003644 	.word	0x24003644

08004208 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004208:	e7fe      	b.n	8004208 <ADC3_IRQHandler>
	...

0800420c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004212:	2003      	movs	r0, #3
 8004214:	f002 f952 	bl	80064bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004218:	f007 f9e0 	bl	800b5dc <HAL_RCC_GetSysClockFreq>
 800421c:	4602      	mov	r2, r0
 800421e:	4b15      	ldr	r3, [pc, #84]	; (8004274 <HAL_Init+0x68>)
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	0a1b      	lsrs	r3, r3, #8
 8004224:	f003 030f 	and.w	r3, r3, #15
 8004228:	4913      	ldr	r1, [pc, #76]	; (8004278 <HAL_Init+0x6c>)
 800422a:	5ccb      	ldrb	r3, [r1, r3]
 800422c:	f003 031f 	and.w	r3, r3, #31
 8004230:	fa22 f303 	lsr.w	r3, r2, r3
 8004234:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004236:	4b0f      	ldr	r3, [pc, #60]	; (8004274 <HAL_Init+0x68>)
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	4a0e      	ldr	r2, [pc, #56]	; (8004278 <HAL_Init+0x6c>)
 8004240:	5cd3      	ldrb	r3, [r2, r3]
 8004242:	f003 031f 	and.w	r3, r3, #31
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	fa22 f303 	lsr.w	r3, r2, r3
 800424c:	4a0b      	ldr	r2, [pc, #44]	; (800427c <HAL_Init+0x70>)
 800424e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004250:	4a0b      	ldr	r2, [pc, #44]	; (8004280 <HAL_Init+0x74>)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004256:	200f      	movs	r0, #15
 8004258:	f000 f814 	bl	8004284 <HAL_InitTick>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e002      	b.n	800426c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004266:	f7fe fee9 	bl	800303c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3708      	adds	r7, #8
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	58024400 	.word	0x58024400
 8004278:	080204f4 	.word	0x080204f4
 800427c:	24000004 	.word	0x24000004
 8004280:	24000000 	.word	0x24000000

08004284 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800428c:	4b15      	ldr	r3, [pc, #84]	; (80042e4 <HAL_InitTick+0x60>)
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e021      	b.n	80042dc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004298:	4b13      	ldr	r3, [pc, #76]	; (80042e8 <HAL_InitTick+0x64>)
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	4b11      	ldr	r3, [pc, #68]	; (80042e4 <HAL_InitTick+0x60>)
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	4619      	mov	r1, r3
 80042a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80042aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ae:	4618      	mov	r0, r3
 80042b0:	f002 f937 	bl	8006522 <HAL_SYSTICK_Config>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e00e      	b.n	80042dc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b0f      	cmp	r3, #15
 80042c2:	d80a      	bhi.n	80042da <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80042c4:	2200      	movs	r2, #0
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	f04f 30ff 	mov.w	r0, #4294967295
 80042cc:	f002 f901 	bl	80064d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80042d0:	4a06      	ldr	r2, [pc, #24]	; (80042ec <HAL_InitTick+0x68>)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
 80042d8:	e000      	b.n	80042dc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	2400000c 	.word	0x2400000c
 80042e8:	24000000 	.word	0x24000000
 80042ec:	24000008 	.word	0x24000008

080042f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80042f4:	4b06      	ldr	r3, [pc, #24]	; (8004310 <HAL_IncTick+0x20>)
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	461a      	mov	r2, r3
 80042fa:	4b06      	ldr	r3, [pc, #24]	; (8004314 <HAL_IncTick+0x24>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4413      	add	r3, r2
 8004300:	4a04      	ldr	r2, [pc, #16]	; (8004314 <HAL_IncTick+0x24>)
 8004302:	6013      	str	r3, [r2, #0]
}
 8004304:	bf00      	nop
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	2400000c 	.word	0x2400000c
 8004314:	240016a4 	.word	0x240016a4

08004318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0
  return uwTick;
 800431c:	4b03      	ldr	r3, [pc, #12]	; (800432c <HAL_GetTick+0x14>)
 800431e:	681b      	ldr	r3, [r3, #0]
}
 8004320:	4618      	mov	r0, r3
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	240016a4 	.word	0x240016a4

08004330 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004338:	f7ff ffee 	bl	8004318 <HAL_GetTick>
 800433c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004348:	d005      	beq.n	8004356 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800434a:	4b0a      	ldr	r3, [pc, #40]	; (8004374 <HAL_Delay+0x44>)
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	461a      	mov	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4413      	add	r3, r2
 8004354:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004356:	bf00      	nop
 8004358:	f7ff ffde 	bl	8004318 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	429a      	cmp	r2, r3
 8004366:	d8f7      	bhi.n	8004358 <HAL_Delay+0x28>
  {
  }
}
 8004368:	bf00      	nop
 800436a:	bf00      	nop
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	2400000c 	.word	0x2400000c

08004378 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8004382:	4b07      	ldr	r3, [pc, #28]	; (80043a0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	43db      	mvns	r3, r3
 800438a:	401a      	ands	r2, r3
 800438c:	4904      	ldr	r1, [pc, #16]	; (80043a0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	4313      	orrs	r3, r2
 8004392:	604b      	str	r3, [r1, #4]
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	58000400 	.word	0x58000400

080043a4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	431a      	orrs	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	609a      	str	r2, [r3, #8]
}
 80043be:	bf00      	nop
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr

080043ca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80043ca:	b480      	push	{r7}
 80043cc:	b083      	sub	sp, #12
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
 80043d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	431a      	orrs	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	609a      	str	r2, [r3, #8]
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004400:	4618      	mov	r0, r3
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800440c:	b480      	push	{r7}
 800440e:	b087      	sub	sp, #28
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
 8004418:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	3360      	adds	r3, #96	; 0x60
 800441e:	461a      	mov	r2, r3
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4a10      	ldr	r2, [pc, #64]	; (800446c <LL_ADC_SetOffset+0x60>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d10b      	bne.n	8004448 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	4313      	orrs	r3, r2
 800443e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004446:	e00b      	b.n	8004460 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	430b      	orrs	r3, r1
 800445a:	431a      	orrs	r2, r3
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	601a      	str	r2, [r3, #0]
}
 8004460:	bf00      	nop
 8004462:	371c      	adds	r7, #28
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr
 800446c:	58026000 	.word	0x58026000

08004470 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	3360      	adds	r3, #96	; 0x60
 800447e:	461a      	mov	r2, r3
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	4413      	add	r3, r2
 8004486:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004490:	4618      	mov	r0, r3
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	f003 031f 	and.w	r3, r3, #31
 80044b6:	6879      	ldr	r1, [r7, #4]
 80044b8:	fa01 f303 	lsl.w	r3, r1, r3
 80044bc:	431a      	orrs	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	611a      	str	r2, [r3, #16]
}
 80044c2:	bf00      	nop
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
	...

080044d0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b087      	sub	sp, #28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	4a0c      	ldr	r2, [pc, #48]	; (8004510 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d00e      	beq.n	8004502 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	3360      	adds	r3, #96	; 0x60
 80044e8:	461a      	mov	r2, r3
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4413      	add	r3, r2
 80044f0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	431a      	orrs	r2, r3
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	601a      	str	r2, [r3, #0]
  }
}
 8004502:	bf00      	nop
 8004504:	371c      	adds	r7, #28
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	58026000 	.word	0x58026000

08004514 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004514:	b480      	push	{r7}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4a0c      	ldr	r2, [pc, #48]	; (8004554 <LL_ADC_SetOffsetSaturation+0x40>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d10e      	bne.n	8004546 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	3360      	adds	r3, #96	; 0x60
 800452c:	461a      	mov	r2, r3
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	4413      	add	r3, r2
 8004534:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	431a      	orrs	r2, r3
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8004546:	bf00      	nop
 8004548:	371c      	adds	r7, #28
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	58026000 	.word	0x58026000

08004558 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004558:	b480      	push	{r7}
 800455a:	b087      	sub	sp, #28
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	4a0c      	ldr	r2, [pc, #48]	; (8004598 <LL_ADC_SetOffsetSign+0x40>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d10e      	bne.n	800458a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	3360      	adds	r3, #96	; 0x60
 8004570:	461a      	mov	r2, r3
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	431a      	orrs	r2, r3
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800458a:	bf00      	nop
 800458c:	371c      	adds	r7, #28
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	58026000 	.word	0x58026000

0800459c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800459c:	b480      	push	{r7}
 800459e:	b087      	sub	sp, #28
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	3360      	adds	r3, #96	; 0x60
 80045ac:	461a      	mov	r2, r3
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4413      	add	r3, r2
 80045b4:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	4a0c      	ldr	r2, [pc, #48]	; (80045ec <LL_ADC_SetOffsetState+0x50>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d108      	bne.n	80045d0 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	431a      	orrs	r2, r3
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80045ce:	e007      	b.n	80045e0 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	431a      	orrs	r2, r3
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	601a      	str	r2, [r3, #0]
}
 80045e0:	bf00      	nop
 80045e2:	371c      	adds	r7, #28
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	58026000 	.word	0x58026000

080045f0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004604:	2301      	movs	r3, #1
 8004606:	e000      	b.n	800460a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004616:	b480      	push	{r7}
 8004618:	b087      	sub	sp, #28
 800461a:	af00      	add	r7, sp, #0
 800461c:	60f8      	str	r0, [r7, #12]
 800461e:	60b9      	str	r1, [r7, #8]
 8004620:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	3330      	adds	r3, #48	; 0x30
 8004626:	461a      	mov	r2, r3
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	0a1b      	lsrs	r3, r3, #8
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	f003 030c 	and.w	r3, r3, #12
 8004632:	4413      	add	r3, r2
 8004634:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	f003 031f 	and.w	r3, r3, #31
 8004640:	211f      	movs	r1, #31
 8004642:	fa01 f303 	lsl.w	r3, r1, r3
 8004646:	43db      	mvns	r3, r3
 8004648:	401a      	ands	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	0e9b      	lsrs	r3, r3, #26
 800464e:	f003 011f 	and.w	r1, r3, #31
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	f003 031f 	and.w	r3, r3, #31
 8004658:	fa01 f303 	lsl.w	r3, r1, r3
 800465c:	431a      	orrs	r2, r3
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004662:	bf00      	nop
 8004664:	371c      	adds	r7, #28
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800466e:	b480      	push	{r7}
 8004670:	b087      	sub	sp, #28
 8004672:	af00      	add	r7, sp, #0
 8004674:	60f8      	str	r0, [r7, #12]
 8004676:	60b9      	str	r1, [r7, #8]
 8004678:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	3314      	adds	r3, #20
 800467e:	461a      	mov	r2, r3
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	0e5b      	lsrs	r3, r3, #25
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	f003 0304 	and.w	r3, r3, #4
 800468a:	4413      	add	r3, r2
 800468c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	0d1b      	lsrs	r3, r3, #20
 8004696:	f003 031f 	and.w	r3, r3, #31
 800469a:	2107      	movs	r1, #7
 800469c:	fa01 f303 	lsl.w	r3, r1, r3
 80046a0:	43db      	mvns	r3, r3
 80046a2:	401a      	ands	r2, r3
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	0d1b      	lsrs	r3, r3, #20
 80046a8:	f003 031f 	and.w	r3, r3, #31
 80046ac:	6879      	ldr	r1, [r7, #4]
 80046ae:	fa01 f303 	lsl.w	r3, r1, r3
 80046b2:	431a      	orrs	r2, r3
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80046b8:	bf00      	nop
 80046ba:	371c      	adds	r7, #28
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4a1a      	ldr	r2, [pc, #104]	; (800473c <LL_ADC_SetChannelSingleDiff+0x78>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d115      	bne.n	8004704 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046e4:	43db      	mvns	r3, r3
 80046e6:	401a      	ands	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f003 0318 	and.w	r3, r3, #24
 80046ee:	4914      	ldr	r1, [pc, #80]	; (8004740 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80046f0:	40d9      	lsrs	r1, r3
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	400b      	ands	r3, r1
 80046f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046fa:	431a      	orrs	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8004702:	e014      	b.n	800472e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004710:	43db      	mvns	r3, r3
 8004712:	401a      	ands	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f003 0318 	and.w	r3, r3, #24
 800471a:	4909      	ldr	r1, [pc, #36]	; (8004740 <LL_ADC_SetChannelSingleDiff+0x7c>)
 800471c:	40d9      	lsrs	r1, r3
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	400b      	ands	r3, r1
 8004722:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004726:	431a      	orrs	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 800472e:	bf00      	nop
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	58026000 	.word	0x58026000
 8004740:	000fffff 	.word	0x000fffff

08004744 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f003 031f 	and.w	r3, r3, #31
}
 8004754:	4618      	mov	r0, r3
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8004770:	4618      	mov	r0, r3
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	4b04      	ldr	r3, [pc, #16]	; (800479c <LL_ADC_DisableDeepPowerDown+0x20>)
 800478a:	4013      	ands	r3, r2
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6093      	str	r3, [r2, #8]
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	5fffffc0 	.word	0x5fffffc0

080047a0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047b4:	d101      	bne.n	80047ba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80047b6:	2301      	movs	r3, #1
 80047b8:	e000      	b.n	80047bc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	4b05      	ldr	r3, [pc, #20]	; (80047ec <LL_ADC_EnableInternalRegulator+0x24>)
 80047d6:	4013      	ands	r3, r2
 80047d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	6fffffc0 	.word	0x6fffffc0

080047f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004800:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004804:	d101      	bne.n	800480a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004806:	2301      	movs	r3, #1
 8004808:	e000      	b.n	800480c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689a      	ldr	r2, [r3, #8]
 8004824:	4b05      	ldr	r3, [pc, #20]	; (800483c <LL_ADC_Enable+0x24>)
 8004826:	4013      	ands	r3, r2
 8004828:	f043 0201 	orr.w	r2, r3, #1
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr
 800483c:	7fffffc0 	.word	0x7fffffc0

08004840 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	4b05      	ldr	r3, [pc, #20]	; (8004864 <LL_ADC_Disable+0x24>)
 800484e:	4013      	ands	r3, r2
 8004850:	f043 0202 	orr.w	r2, r3, #2
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	7fffffc0 	.word	0x7fffffc0

08004868 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f003 0301 	and.w	r3, r3, #1
 8004878:	2b01      	cmp	r3, #1
 800487a:	d101      	bne.n	8004880 <LL_ADC_IsEnabled+0x18>
 800487c:	2301      	movs	r3, #1
 800487e:	e000      	b.n	8004882 <LL_ADC_IsEnabled+0x1a>
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800488e:	b480      	push	{r7}
 8004890:	b083      	sub	sp, #12
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d101      	bne.n	80048a6 <LL_ADC_IsDisableOngoing+0x18>
 80048a2:	2301      	movs	r3, #1
 80048a4:	e000      	b.n	80048a8 <LL_ADC_IsDisableOngoing+0x1a>
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <LL_ADC_REG_StartConversion+0x24>)
 80048c2:	4013      	ands	r3, r2
 80048c4:	f043 0204 	orr.w	r2, r3, #4
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr
 80048d8:	7fffffc0 	.word	0x7fffffc0

080048dc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	4b05      	ldr	r3, [pc, #20]	; (8004900 <LL_ADC_REG_StopConversion+0x24>)
 80048ea:	4013      	ands	r3, r2
 80048ec:	f043 0210 	orr.w	r2, r3, #16
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	7fffffc0 	.word	0x7fffffc0

08004904 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b04      	cmp	r3, #4
 8004916:	d101      	bne.n	800491c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004918:	2301      	movs	r3, #1
 800491a:	e000      	b.n	800491e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
	...

0800492c <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689a      	ldr	r2, [r3, #8]
 8004938:	4b05      	ldr	r3, [pc, #20]	; (8004950 <LL_ADC_INJ_StopConversion+0x24>)
 800493a:	4013      	ands	r3, r2
 800493c:	f043 0220 	orr.w	r2, r3, #32
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr
 8004950:	7fffffc0 	.word	0x7fffffc0

08004954 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f003 0308 	and.w	r3, r3, #8
 8004964:	2b08      	cmp	r3, #8
 8004966:	d101      	bne.n	800496c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004968:	2301      	movs	r3, #1
 800496a:	e000      	b.n	800496e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
	...

0800497c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800497c:	b590      	push	{r4, r7, lr}
 800497e:	b089      	sub	sp, #36	; 0x24
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004984:	2300      	movs	r3, #0
 8004986:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004988:	2300      	movs	r3, #0
 800498a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e1ee      	b.n	8004d74 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d109      	bne.n	80049b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f7fe fb63 	bl	8003070 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4618      	mov	r0, r3
 80049be:	f7ff feef 	bl	80047a0 <LL_ADC_IsDeepPowerDownEnabled>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d004      	beq.n	80049d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7ff fed5 	bl	800477c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7ff ff0a 	bl	80047f0 <LL_ADC_IsInternalRegulatorEnabled>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d114      	bne.n	8004a0c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7ff feee 	bl	80047c8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80049ec:	4b8e      	ldr	r3, [pc, #568]	; (8004c28 <HAL_ADC_Init+0x2ac>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	099b      	lsrs	r3, r3, #6
 80049f2:	4a8e      	ldr	r2, [pc, #568]	; (8004c2c <HAL_ADC_Init+0x2b0>)
 80049f4:	fba2 2303 	umull	r2, r3, r2, r3
 80049f8:	099b      	lsrs	r3, r3, #6
 80049fa:	3301      	adds	r3, #1
 80049fc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80049fe:	e002      	b.n	8004a06 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	3b01      	subs	r3, #1
 8004a04:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1f9      	bne.n	8004a00 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7ff feed 	bl	80047f0 <LL_ADC_IsInternalRegulatorEnabled>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10d      	bne.n	8004a38 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a20:	f043 0210 	orr.w	r2, r3, #16
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a2c:	f043 0201 	orr.w	r2, r3, #1
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7ff ff61 	bl	8004904 <LL_ADC_REG_IsConversionOngoing>
 8004a42:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a48:	f003 0310 	and.w	r3, r3, #16
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f040 8188 	bne.w	8004d62 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f040 8184 	bne.w	8004d62 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a5e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004a62:	f043 0202 	orr.w	r2, r3, #2
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7ff fefa 	bl	8004868 <LL_ADC_IsEnabled>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d136      	bne.n	8004ae8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a6c      	ldr	r2, [pc, #432]	; (8004c30 <HAL_ADC_Init+0x2b4>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d004      	beq.n	8004a8e <HAL_ADC_Init+0x112>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a6a      	ldr	r2, [pc, #424]	; (8004c34 <HAL_ADC_Init+0x2b8>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d10e      	bne.n	8004aac <HAL_ADC_Init+0x130>
 8004a8e:	4868      	ldr	r0, [pc, #416]	; (8004c30 <HAL_ADC_Init+0x2b4>)
 8004a90:	f7ff feea 	bl	8004868 <LL_ADC_IsEnabled>
 8004a94:	4604      	mov	r4, r0
 8004a96:	4867      	ldr	r0, [pc, #412]	; (8004c34 <HAL_ADC_Init+0x2b8>)
 8004a98:	f7ff fee6 	bl	8004868 <LL_ADC_IsEnabled>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	4323      	orrs	r3, r4
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	bf0c      	ite	eq
 8004aa4:	2301      	moveq	r3, #1
 8004aa6:	2300      	movne	r3, #0
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	e008      	b.n	8004abe <HAL_ADC_Init+0x142>
 8004aac:	4862      	ldr	r0, [pc, #392]	; (8004c38 <HAL_ADC_Init+0x2bc>)
 8004aae:	f7ff fedb 	bl	8004868 <LL_ADC_IsEnabled>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	bf0c      	ite	eq
 8004ab8:	2301      	moveq	r3, #1
 8004aba:	2300      	movne	r3, #0
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d012      	beq.n	8004ae8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a5a      	ldr	r2, [pc, #360]	; (8004c30 <HAL_ADC_Init+0x2b4>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d004      	beq.n	8004ad6 <HAL_ADC_Init+0x15a>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a58      	ldr	r2, [pc, #352]	; (8004c34 <HAL_ADC_Init+0x2b8>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d101      	bne.n	8004ada <HAL_ADC_Init+0x15e>
 8004ad6:	4a59      	ldr	r2, [pc, #356]	; (8004c3c <HAL_ADC_Init+0x2c0>)
 8004ad8:	e000      	b.n	8004adc <HAL_ADC_Init+0x160>
 8004ada:	4a59      	ldr	r2, [pc, #356]	; (8004c40 <HAL_ADC_Init+0x2c4>)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	4610      	mov	r0, r2
 8004ae4:	f7ff fc5e 	bl	80043a4 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a52      	ldr	r2, [pc, #328]	; (8004c38 <HAL_ADC_Init+0x2bc>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d129      	bne.n	8004b46 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	7e5b      	ldrb	r3, [r3, #25]
 8004af6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004afc:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8004b02:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	2b08      	cmp	r3, #8
 8004b0a:	d013      	beq.n	8004b34 <HAL_ADC_Init+0x1b8>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	2b0c      	cmp	r3, #12
 8004b12:	d00d      	beq.n	8004b30 <HAL_ADC_Init+0x1b4>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	2b1c      	cmp	r3, #28
 8004b1a:	d007      	beq.n	8004b2c <HAL_ADC_Init+0x1b0>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	2b18      	cmp	r3, #24
 8004b22:	d101      	bne.n	8004b28 <HAL_ADC_Init+0x1ac>
 8004b24:	2318      	movs	r3, #24
 8004b26:	e006      	b.n	8004b36 <HAL_ADC_Init+0x1ba>
 8004b28:	2300      	movs	r3, #0
 8004b2a:	e004      	b.n	8004b36 <HAL_ADC_Init+0x1ba>
 8004b2c:	2310      	movs	r3, #16
 8004b2e:	e002      	b.n	8004b36 <HAL_ADC_Init+0x1ba>
 8004b30:	2308      	movs	r3, #8
 8004b32:	e000      	b.n	8004b36 <HAL_ADC_Init+0x1ba>
 8004b34:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8004b36:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b3e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004b40:	4313      	orrs	r3, r2
 8004b42:	61bb      	str	r3, [r7, #24]
 8004b44:	e00e      	b.n	8004b64 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	7e5b      	ldrb	r3, [r3, #25]
 8004b4a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004b50:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004b56:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b5e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004b60:	4313      	orrs	r3, r2
 8004b62:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d106      	bne.n	8004b7c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	3b01      	subs	r3, #1
 8004b74:	045b      	lsls	r3, r3, #17
 8004b76:	69ba      	ldr	r2, [r7, #24]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d009      	beq.n	8004b98 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b88:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b90:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a26      	ldr	r2, [pc, #152]	; (8004c38 <HAL_ADC_Init+0x2bc>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d115      	bne.n	8004bce <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68da      	ldr	r2, [r3, #12]
 8004ba8:	4b26      	ldr	r3, [pc, #152]	; (8004c44 <HAL_ADC_Init+0x2c8>)
 8004baa:	4013      	ands	r3, r2
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6812      	ldr	r2, [r2, #0]
 8004bb0:	69b9      	ldr	r1, [r7, #24]
 8004bb2:	430b      	orrs	r3, r1
 8004bb4:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	611a      	str	r2, [r3, #16]
 8004bcc:	e009      	b.n	8004be2 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68da      	ldr	r2, [r3, #12]
 8004bd4:	4b1c      	ldr	r3, [pc, #112]	; (8004c48 <HAL_ADC_Init+0x2cc>)
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	6812      	ldr	r2, [r2, #0]
 8004bdc:	69b9      	ldr	r1, [r7, #24]
 8004bde:	430b      	orrs	r3, r1
 8004be0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7ff fe8c 	bl	8004904 <LL_ADC_REG_IsConversionOngoing>
 8004bec:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7ff feae 	bl	8004954 <LL_ADC_INJ_IsConversionOngoing>
 8004bf8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f040 808e 	bne.w	8004d1e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f040 808a 	bne.w	8004d1e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a0a      	ldr	r2, [pc, #40]	; (8004c38 <HAL_ADC_Init+0x2bc>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d11b      	bne.n	8004c4c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	7e1b      	ldrb	r3, [r3, #24]
 8004c18:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c20:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8004c22:	4313      	orrs	r3, r2
 8004c24:	61bb      	str	r3, [r7, #24]
 8004c26:	e018      	b.n	8004c5a <HAL_ADC_Init+0x2de>
 8004c28:	24000000 	.word	0x24000000
 8004c2c:	053e2d63 	.word	0x053e2d63
 8004c30:	40022000 	.word	0x40022000
 8004c34:	40022100 	.word	0x40022100
 8004c38:	58026000 	.word	0x58026000
 8004c3c:	40022300 	.word	0x40022300
 8004c40:	58026300 	.word	0x58026300
 8004c44:	fff04007 	.word	0xfff04007
 8004c48:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	7e1b      	ldrb	r3, [r3, #24]
 8004c50:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8004c56:	4313      	orrs	r3, r2
 8004c58:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68da      	ldr	r2, [r3, #12]
 8004c60:	4b46      	ldr	r3, [pc, #280]	; (8004d7c <HAL_ADC_Init+0x400>)
 8004c62:	4013      	ands	r3, r2
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	6812      	ldr	r2, [r2, #0]
 8004c68:	69b9      	ldr	r1, [r7, #24]
 8004c6a:	430b      	orrs	r3, r1
 8004c6c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d137      	bne.n	8004ce8 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a3f      	ldr	r2, [pc, #252]	; (8004d80 <HAL_ADC_Init+0x404>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d116      	bne.n	8004cb6 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	691a      	ldr	r2, [r3, #16]
 8004c8e:	4b3d      	ldr	r3, [pc, #244]	; (8004d84 <HAL_ADC_Init+0x408>)
 8004c90:	4013      	ands	r3, r2
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004c9a:	4311      	orrs	r1, r2
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004ca0:	4311      	orrs	r1, r2
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f042 0201 	orr.w	r2, r2, #1
 8004cb2:	611a      	str	r2, [r3, #16]
 8004cb4:	e020      	b.n	8004cf8 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	691a      	ldr	r2, [r3, #16]
 8004cbc:	4b32      	ldr	r3, [pc, #200]	; (8004d88 <HAL_ADC_Init+0x40c>)
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004cc4:	3a01      	subs	r2, #1
 8004cc6:	0411      	lsls	r1, r2, #16
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004ccc:	4311      	orrs	r1, r2
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004cd2:	4311      	orrs	r1, r2
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f042 0201 	orr.w	r2, r2, #1
 8004ce4:	611a      	str	r2, [r3, #16]
 8004ce6:	e007      	b.n	8004cf8 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	691a      	ldr	r2, [r3, #16]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f022 0201 	bic.w	r2, r2, #1
 8004cf6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a1b      	ldr	r2, [pc, #108]	; (8004d80 <HAL_ADC_Init+0x404>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d002      	beq.n	8004d1e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f001 f909 	bl	8005f30 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d10c      	bne.n	8004d40 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2c:	f023 010f 	bic.w	r1, r3, #15
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	69db      	ldr	r3, [r3, #28]
 8004d34:	1e5a      	subs	r2, r3, #1
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	631a      	str	r2, [r3, #48]	; 0x30
 8004d3e:	e007      	b.n	8004d50 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 020f 	bic.w	r2, r2, #15
 8004d4e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d54:	f023 0303 	bic.w	r3, r3, #3
 8004d58:	f043 0201 	orr.w	r2, r3, #1
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	661a      	str	r2, [r3, #96]	; 0x60
 8004d60:	e007      	b.n	8004d72 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d66:	f043 0210 	orr.w	r2, r3, #16
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004d72:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3724      	adds	r7, #36	; 0x24
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd90      	pop	{r4, r7, pc}
 8004d7c:	ffffbffc 	.word	0xffffbffc
 8004d80:	58026000 	.word	0x58026000
 8004d84:	fc00f81f 	.word	0xfc00f81f
 8004d88:	fc00f81e 	.word	0xfc00f81e

08004d8c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a5c      	ldr	r2, [pc, #368]	; (8004f0c <HAL_ADC_Start+0x180>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d004      	beq.n	8004da8 <HAL_ADC_Start+0x1c>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a5b      	ldr	r2, [pc, #364]	; (8004f10 <HAL_ADC_Start+0x184>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d101      	bne.n	8004dac <HAL_ADC_Start+0x20>
 8004da8:	4b5a      	ldr	r3, [pc, #360]	; (8004f14 <HAL_ADC_Start+0x188>)
 8004daa:	e000      	b.n	8004dae <HAL_ADC_Start+0x22>
 8004dac:	4b5a      	ldr	r3, [pc, #360]	; (8004f18 <HAL_ADC_Start+0x18c>)
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7ff fcc8 	bl	8004744 <LL_ADC_GetMultimode>
 8004db4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7ff fda2 	bl	8004904 <LL_ADC_REG_IsConversionOngoing>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f040 809a 	bne.w	8004efc <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d101      	bne.n	8004dd6 <HAL_ADC_Start+0x4a>
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	e095      	b.n	8004f02 <HAL_ADC_Start+0x176>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 ffbc 	bl	8005d5c <ADC_Enable>
 8004de4:	4603      	mov	r3, r0
 8004de6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004de8:	7dfb      	ldrb	r3, [r7, #23]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f040 8081 	bne.w	8004ef2 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004df4:	4b49      	ldr	r3, [pc, #292]	; (8004f1c <HAL_ADC_Start+0x190>)
 8004df6:	4013      	ands	r3, r2
 8004df8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a42      	ldr	r2, [pc, #264]	; (8004f10 <HAL_ADC_Start+0x184>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d002      	beq.n	8004e10 <HAL_ADC_Start+0x84>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	e000      	b.n	8004e12 <HAL_ADC_Start+0x86>
 8004e10:	4b3e      	ldr	r3, [pc, #248]	; (8004f0c <HAL_ADC_Start+0x180>)
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	6812      	ldr	r2, [r2, #0]
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d002      	beq.n	8004e20 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d105      	bne.n	8004e2c <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e24:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e38:	d106      	bne.n	8004e48 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e3e:	f023 0206 	bic.w	r2, r3, #6
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	665a      	str	r2, [r3, #100]	; 0x64
 8004e46:	e002      	b.n	8004e4e <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	221c      	movs	r2, #28
 8004e54:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a2b      	ldr	r2, [pc, #172]	; (8004f10 <HAL_ADC_Start+0x184>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d002      	beq.n	8004e6e <HAL_ADC_Start+0xe2>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	e000      	b.n	8004e70 <HAL_ADC_Start+0xe4>
 8004e6e:	4b27      	ldr	r3, [pc, #156]	; (8004f0c <HAL_ADC_Start+0x180>)
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6812      	ldr	r2, [r2, #0]
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d008      	beq.n	8004e8a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d005      	beq.n	8004e8a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	2b05      	cmp	r3, #5
 8004e82:	d002      	beq.n	8004e8a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	2b09      	cmp	r3, #9
 8004e88:	d114      	bne.n	8004eb4 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d007      	beq.n	8004ea8 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e9c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004ea0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7ff fd01 	bl	80048b4 <LL_ADC_REG_StartConversion>
 8004eb2:	e025      	b.n	8004f00 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eb8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a12      	ldr	r2, [pc, #72]	; (8004f10 <HAL_ADC_Start+0x184>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d002      	beq.n	8004ed0 <HAL_ADC_Start+0x144>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	e000      	b.n	8004ed2 <HAL_ADC_Start+0x146>
 8004ed0:	4b0e      	ldr	r3, [pc, #56]	; (8004f0c <HAL_ADC_Start+0x180>)
 8004ed2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00f      	beq.n	8004f00 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ee4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004ee8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	661a      	str	r2, [r3, #96]	; 0x60
 8004ef0:	e006      	b.n	8004f00 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8004efa:	e001      	b.n	8004f00 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004efc:	2302      	movs	r3, #2
 8004efe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3718      	adds	r7, #24
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	40022000 	.word	0x40022000
 8004f10:	40022100 	.word	0x40022100
 8004f14:	40022300 	.word	0x40022300
 8004f18:	58026300 	.word	0x58026300
 8004f1c:	fffff0fe 	.word	0xfffff0fe

08004f20 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d101      	bne.n	8004f36 <HAL_ADC_Stop+0x16>
 8004f32:	2302      	movs	r3, #2
 8004f34:	e021      	b.n	8004f7a <HAL_ADC_Stop+0x5a>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004f3e:	2103      	movs	r1, #3
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 fe4f 	bl	8005be4 <ADC_ConversionStop>
 8004f46:	4603      	mov	r3, r0
 8004f48:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004f4a:	7bfb      	ldrb	r3, [r7, #15]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10f      	bne.n	8004f70 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 ff8d 	bl	8005e70 <ADC_Disable>
 8004f56:	4603      	mov	r3, r0
 8004f58:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004f5a:	7bfb      	ldrb	r3, [r7, #15]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d107      	bne.n	8004f70 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004f64:	4b07      	ldr	r3, [pc, #28]	; (8004f84 <HAL_ADC_Stop+0x64>)
 8004f66:	4013      	ands	r3, r2
 8004f68:	f043 0201 	orr.w	r2, r3, #1
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	ffffeefe 	.word	0xffffeefe

08004f88 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b088      	sub	sp, #32
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a72      	ldr	r2, [pc, #456]	; (8005160 <HAL_ADC_PollForConversion+0x1d8>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d004      	beq.n	8004fa6 <HAL_ADC_PollForConversion+0x1e>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a70      	ldr	r2, [pc, #448]	; (8005164 <HAL_ADC_PollForConversion+0x1dc>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d101      	bne.n	8004faa <HAL_ADC_PollForConversion+0x22>
 8004fa6:	4b70      	ldr	r3, [pc, #448]	; (8005168 <HAL_ADC_PollForConversion+0x1e0>)
 8004fa8:	e000      	b.n	8004fac <HAL_ADC_PollForConversion+0x24>
 8004faa:	4b70      	ldr	r3, [pc, #448]	; (800516c <HAL_ADC_PollForConversion+0x1e4>)
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7ff fbc9 	bl	8004744 <LL_ADC_GetMultimode>
 8004fb2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	2b08      	cmp	r3, #8
 8004fba:	d102      	bne.n	8004fc2 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8004fbc:	2308      	movs	r3, #8
 8004fbe:	61fb      	str	r3, [r7, #28]
 8004fc0:	e037      	b.n	8005032 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d005      	beq.n	8004fd4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	2b05      	cmp	r3, #5
 8004fcc:	d002      	beq.n	8004fd4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	2b09      	cmp	r3, #9
 8004fd2:	d111      	bne.n	8004ff8 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d007      	beq.n	8004ff2 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fe6:	f043 0220 	orr.w	r2, r3, #32
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e0b1      	b.n	8005156 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004ff2:	2304      	movs	r3, #4
 8004ff4:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8004ff6:	e01c      	b.n	8005032 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a58      	ldr	r2, [pc, #352]	; (8005160 <HAL_ADC_PollForConversion+0x1d8>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d004      	beq.n	800500c <HAL_ADC_PollForConversion+0x84>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a57      	ldr	r2, [pc, #348]	; (8005164 <HAL_ADC_PollForConversion+0x1dc>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d101      	bne.n	8005010 <HAL_ADC_PollForConversion+0x88>
 800500c:	4b56      	ldr	r3, [pc, #344]	; (8005168 <HAL_ADC_PollForConversion+0x1e0>)
 800500e:	e000      	b.n	8005012 <HAL_ADC_PollForConversion+0x8a>
 8005010:	4b56      	ldr	r3, [pc, #344]	; (800516c <HAL_ADC_PollForConversion+0x1e4>)
 8005012:	4618      	mov	r0, r3
 8005014:	f7ff fba4 	bl	8004760 <LL_ADC_GetMultiDMATransfer>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d007      	beq.n	800502e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005022:	f043 0220 	orr.w	r2, r3, #32
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e093      	b.n	8005156 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800502e:	2304      	movs	r3, #4
 8005030:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8005032:	f7ff f971 	bl	8004318 <HAL_GetTick>
 8005036:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005038:	e021      	b.n	800507e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005040:	d01d      	beq.n	800507e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8005042:	f7ff f969 	bl	8004318 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	429a      	cmp	r2, r3
 8005050:	d302      	bcc.n	8005058 <HAL_ADC_PollForConversion+0xd0>
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d112      	bne.n	800507e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	4013      	ands	r3, r2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10b      	bne.n	800507e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800506a:	f043 0204 	orr.w	r2, r3, #4
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	661a      	str	r2, [r3, #96]	; 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

          return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e06b      	b.n	8005156 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	4013      	ands	r3, r2
 8005088:	2b00      	cmp	r3, #0
 800508a:	d0d6      	beq.n	800503a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005090:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	661a      	str	r2, [r3, #96]	; 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4618      	mov	r0, r3
 800509e:	f7ff faa7 	bl	80045f0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d01c      	beq.n	80050e2 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	7e5b      	ldrb	r3, [r3, #25]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d118      	bne.n	80050e2 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0308 	and.w	r3, r3, #8
 80050ba:	2b08      	cmp	r3, #8
 80050bc:	d111      	bne.n	80050e2 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	661a      	str	r2, [r3, #96]	; 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d105      	bne.n	80050e2 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050da:	f043 0201 	orr.w	r2, r3, #1
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a1f      	ldr	r2, [pc, #124]	; (8005164 <HAL_ADC_PollForConversion+0x1dc>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d002      	beq.n	80050f2 <HAL_ADC_PollForConversion+0x16a>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	e000      	b.n	80050f4 <HAL_ADC_PollForConversion+0x16c>
 80050f2:	4b1b      	ldr	r3, [pc, #108]	; (8005160 <HAL_ADC_PollForConversion+0x1d8>)
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	6812      	ldr	r2, [r2, #0]
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d008      	beq.n	800510e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d005      	beq.n	800510e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	2b05      	cmp	r3, #5
 8005106:	d002      	beq.n	800510e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	2b09      	cmp	r3, #9
 800510c:	d104      	bne.n	8005118 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	61bb      	str	r3, [r7, #24]
 8005116:	e00c      	b.n	8005132 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a11      	ldr	r2, [pc, #68]	; (8005164 <HAL_ADC_PollForConversion+0x1dc>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d002      	beq.n	8005128 <HAL_ADC_PollForConversion+0x1a0>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	e000      	b.n	800512a <HAL_ADC_PollForConversion+0x1a2>
 8005128:	4b0d      	ldr	r3, [pc, #52]	; (8005160 <HAL_ADC_PollForConversion+0x1d8>)
 800512a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	2b08      	cmp	r3, #8
 8005136:	d104      	bne.n	8005142 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2208      	movs	r2, #8
 800513e:	601a      	str	r2, [r3, #0]
 8005140:	e008      	b.n	8005154 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d103      	bne.n	8005154 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	220c      	movs	r2, #12
 8005152:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3720      	adds	r7, #32
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	40022000 	.word	0x40022000
 8005164:	40022100 	.word	0x40022100
 8005168:	40022300 	.word	0x40022300
 800516c:	58026300 	.word	0x58026300

08005170 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800517e:	4618      	mov	r0, r3
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
	...

0800518c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800518c:	b590      	push	{r4, r7, lr}
 800518e:	b0b9      	sub	sp, #228	; 0xe4
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005196:	2300      	movs	r3, #0
 8005198:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800519c:	2300      	movs	r3, #0
 800519e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051a6:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	4aa9      	ldr	r2, [pc, #676]	; (8005454 <HAL_ADC_ConfigChannel+0x2c8>)
 80051ae:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d102      	bne.n	80051c0 <HAL_ADC_ConfigChannel+0x34>
 80051ba:	2302      	movs	r3, #2
 80051bc:	f000 bcfa 	b.w	8005bb4 <HAL_ADC_ConfigChannel+0xa28>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7ff fb99 	bl	8004904 <LL_ADC_REG_IsConversionOngoing>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f040 84de 	bne.w	8005b96 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a9e      	ldr	r2, [pc, #632]	; (8005458 <HAL_ADC_ConfigChannel+0x2cc>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d033      	beq.n	800524c <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d108      	bne.n	8005202 <HAL_ADC_ConfigChannel+0x76>
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	0e9b      	lsrs	r3, r3, #26
 80051f6:	f003 031f 	and.w	r3, r3, #31
 80051fa:	2201      	movs	r2, #1
 80051fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005200:	e01d      	b.n	800523e <HAL_ADC_ConfigChannel+0xb2>
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800520a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800520e:	fa93 f3a3 	rbit	r3, r3
 8005212:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005216:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800521a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800521e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8005226:	2320      	movs	r3, #32
 8005228:	e004      	b.n	8005234 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 800522a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800522e:	fab3 f383 	clz	r3, r3
 8005232:	b2db      	uxtb	r3, r3
 8005234:	f003 031f 	and.w	r3, r3, #31
 8005238:	2201      	movs	r2, #1
 800523a:	fa02 f303 	lsl.w	r3, r2, r3
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	6812      	ldr	r2, [r2, #0]
 8005242:	69d1      	ldr	r1, [r2, #28]
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	6812      	ldr	r2, [r2, #0]
 8005248:	430b      	orrs	r3, r1
 800524a:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6818      	ldr	r0, [r3, #0]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	6859      	ldr	r1, [r3, #4]
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	461a      	mov	r2, r3
 800525a:	f7ff f9dc 	bl	8004616 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4618      	mov	r0, r3
 8005264:	f7ff fb4e 	bl	8004904 <LL_ADC_REG_IsConversionOngoing>
 8005268:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4618      	mov	r0, r3
 8005272:	f7ff fb6f 	bl	8004954 <LL_ADC_INJ_IsConversionOngoing>
 8005276:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800527a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800527e:	2b00      	cmp	r3, #0
 8005280:	f040 8270 	bne.w	8005764 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005284:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005288:	2b00      	cmp	r3, #0
 800528a:	f040 826b 	bne.w	8005764 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6818      	ldr	r0, [r3, #0]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	6819      	ldr	r1, [r3, #0]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	461a      	mov	r2, r3
 800529c:	f7ff f9e7 	bl	800466e <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a6c      	ldr	r2, [pc, #432]	; (8005458 <HAL_ADC_ConfigChannel+0x2cc>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d10d      	bne.n	80052c6 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	695a      	ldr	r2, [r3, #20]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	08db      	lsrs	r3, r3, #3
 80052b6:	f003 0303 	and.w	r3, r3, #3
 80052ba:	005b      	lsls	r3, r3, #1
 80052bc:	fa02 f303 	lsl.w	r3, r2, r3
 80052c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80052c4:	e032      	b.n	800532c <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80052c6:	4b65      	ldr	r3, [pc, #404]	; (800545c <HAL_ADC_ConfigChannel+0x2d0>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80052ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052d2:	d10b      	bne.n	80052ec <HAL_ADC_ConfigChannel+0x160>
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	695a      	ldr	r2, [r3, #20]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	089b      	lsrs	r3, r3, #2
 80052e0:	f003 0307 	and.w	r3, r3, #7
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ea:	e01d      	b.n	8005328 <HAL_ADC_ConfigChannel+0x19c>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	f003 0310 	and.w	r3, r3, #16
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10b      	bne.n	8005312 <HAL_ADC_ConfigChannel+0x186>
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	695a      	ldr	r2, [r3, #20]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	089b      	lsrs	r3, r3, #2
 8005306:	f003 0307 	and.w	r3, r3, #7
 800530a:	005b      	lsls	r3, r3, #1
 800530c:	fa02 f303 	lsl.w	r3, r2, r3
 8005310:	e00a      	b.n	8005328 <HAL_ADC_ConfigChannel+0x19c>
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	695a      	ldr	r2, [r3, #20]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	089b      	lsrs	r3, r3, #2
 800531e:	f003 0304 	and.w	r3, r3, #4
 8005322:	005b      	lsls	r3, r3, #1
 8005324:	fa02 f303 	lsl.w	r3, r2, r3
 8005328:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	2b04      	cmp	r3, #4
 8005332:	d048      	beq.n	80053c6 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6818      	ldr	r0, [r3, #0]
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	6919      	ldr	r1, [r3, #16]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005344:	f7ff f862 	bl	800440c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a42      	ldr	r2, [pc, #264]	; (8005458 <HAL_ADC_ConfigChannel+0x2cc>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d119      	bne.n	8005386 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6818      	ldr	r0, [r3, #0]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	6919      	ldr	r1, [r3, #16]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	69db      	ldr	r3, [r3, #28]
 800535e:	461a      	mov	r2, r3
 8005360:	f7ff f8fa 	bl	8004558 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6818      	ldr	r0, [r3, #0]
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	6919      	ldr	r1, [r3, #16]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d102      	bne.n	800537c <HAL_ADC_ConfigChannel+0x1f0>
 8005376:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800537a:	e000      	b.n	800537e <HAL_ADC_ConfigChannel+0x1f2>
 800537c:	2300      	movs	r3, #0
 800537e:	461a      	mov	r2, r3
 8005380:	f7ff f8c8 	bl	8004514 <LL_ADC_SetOffsetSaturation>
 8005384:	e1ee      	b.n	8005764 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6818      	ldr	r0, [r3, #0]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	6919      	ldr	r1, [r3, #16]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005394:	2b01      	cmp	r3, #1
 8005396:	d102      	bne.n	800539e <HAL_ADC_ConfigChannel+0x212>
 8005398:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800539c:	e000      	b.n	80053a0 <HAL_ADC_ConfigChannel+0x214>
 800539e:	2300      	movs	r3, #0
 80053a0:	461a      	mov	r2, r3
 80053a2:	f7ff f895 	bl	80044d0 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6818      	ldr	r0, [r3, #0]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	6919      	ldr	r1, [r3, #16]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	7e1b      	ldrb	r3, [r3, #24]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d102      	bne.n	80053bc <HAL_ADC_ConfigChannel+0x230>
 80053b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80053ba:	e000      	b.n	80053be <HAL_ADC_ConfigChannel+0x232>
 80053bc:	2300      	movs	r3, #0
 80053be:	461a      	mov	r2, r3
 80053c0:	f7ff f86c 	bl	800449c <LL_ADC_SetDataRightShift>
 80053c4:	e1ce      	b.n	8005764 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a23      	ldr	r2, [pc, #140]	; (8005458 <HAL_ADC_ConfigChannel+0x2cc>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	f040 8181 	bne.w	80056d4 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2100      	movs	r1, #0
 80053d8:	4618      	mov	r0, r3
 80053da:	f7ff f849 	bl	8004470 <LL_ADC_GetOffsetChannel>
 80053de:	4603      	mov	r3, r0
 80053e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10a      	bne.n	80053fe <HAL_ADC_ConfigChannel+0x272>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2100      	movs	r1, #0
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7ff f83e 	bl	8004470 <LL_ADC_GetOffsetChannel>
 80053f4:	4603      	mov	r3, r0
 80053f6:	0e9b      	lsrs	r3, r3, #26
 80053f8:	f003 021f 	and.w	r2, r3, #31
 80053fc:	e01e      	b.n	800543c <HAL_ADC_ConfigChannel+0x2b0>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2100      	movs	r1, #0
 8005404:	4618      	mov	r0, r3
 8005406:	f7ff f833 	bl	8004470 <LL_ADC_GetOffsetChannel>
 800540a:	4603      	mov	r3, r0
 800540c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005410:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005414:	fa93 f3a3 	rbit	r3, r3
 8005418:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 800541c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005420:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8005424:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 800542c:	2320      	movs	r3, #32
 800542e:	e004      	b.n	800543a <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8005430:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005434:	fab3 f383 	clz	r3, r3
 8005438:	b2db      	uxtb	r3, r3
 800543a:	461a      	mov	r2, r3
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10b      	bne.n	8005460 <HAL_ADC_ConfigChannel+0x2d4>
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	0e9b      	lsrs	r3, r3, #26
 800544e:	f003 031f 	and.w	r3, r3, #31
 8005452:	e01e      	b.n	8005492 <HAL_ADC_ConfigChannel+0x306>
 8005454:	47ff0000 	.word	0x47ff0000
 8005458:	58026000 	.word	0x58026000
 800545c:	5c001000 	.word	0x5c001000
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005468:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800546c:	fa93 f3a3 	rbit	r3, r3
 8005470:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8005474:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005478:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800547c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d101      	bne.n	8005488 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8005484:	2320      	movs	r3, #32
 8005486:	e004      	b.n	8005492 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8005488:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800548c:	fab3 f383 	clz	r3, r3
 8005490:	b2db      	uxtb	r3, r3
 8005492:	429a      	cmp	r2, r3
 8005494:	d106      	bne.n	80054a4 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2200      	movs	r2, #0
 800549c:	2100      	movs	r1, #0
 800549e:	4618      	mov	r0, r3
 80054a0:	f7ff f87c 	bl	800459c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2101      	movs	r1, #1
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7fe ffe0 	bl	8004470 <LL_ADC_GetOffsetChannel>
 80054b0:	4603      	mov	r3, r0
 80054b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10a      	bne.n	80054d0 <HAL_ADC_ConfigChannel+0x344>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2101      	movs	r1, #1
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7fe ffd5 	bl	8004470 <LL_ADC_GetOffsetChannel>
 80054c6:	4603      	mov	r3, r0
 80054c8:	0e9b      	lsrs	r3, r3, #26
 80054ca:	f003 021f 	and.w	r2, r3, #31
 80054ce:	e01e      	b.n	800550e <HAL_ADC_ConfigChannel+0x382>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2101      	movs	r1, #1
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7fe ffca 	bl	8004470 <LL_ADC_GetOffsetChannel>
 80054dc:	4603      	mov	r3, r0
 80054de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80054e6:	fa93 f3a3 	rbit	r3, r3
 80054ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80054ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80054f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80054f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d101      	bne.n	8005502 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 80054fe:	2320      	movs	r3, #32
 8005500:	e004      	b.n	800550c <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8005502:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005506:	fab3 f383 	clz	r3, r3
 800550a:	b2db      	uxtb	r3, r3
 800550c:	461a      	mov	r2, r3
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005516:	2b00      	cmp	r3, #0
 8005518:	d105      	bne.n	8005526 <HAL_ADC_ConfigChannel+0x39a>
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	0e9b      	lsrs	r3, r3, #26
 8005520:	f003 031f 	and.w	r3, r3, #31
 8005524:	e018      	b.n	8005558 <HAL_ADC_ConfigChannel+0x3cc>
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800552e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005532:	fa93 f3a3 	rbit	r3, r3
 8005536:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800553a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800553e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8005542:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 800554a:	2320      	movs	r3, #32
 800554c:	e004      	b.n	8005558 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 800554e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005552:	fab3 f383 	clz	r3, r3
 8005556:	b2db      	uxtb	r3, r3
 8005558:	429a      	cmp	r2, r3
 800555a:	d106      	bne.n	800556a <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2200      	movs	r2, #0
 8005562:	2101      	movs	r1, #1
 8005564:	4618      	mov	r0, r3
 8005566:	f7ff f819 	bl	800459c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2102      	movs	r1, #2
 8005570:	4618      	mov	r0, r3
 8005572:	f7fe ff7d 	bl	8004470 <LL_ADC_GetOffsetChannel>
 8005576:	4603      	mov	r3, r0
 8005578:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800557c:	2b00      	cmp	r3, #0
 800557e:	d10a      	bne.n	8005596 <HAL_ADC_ConfigChannel+0x40a>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2102      	movs	r1, #2
 8005586:	4618      	mov	r0, r3
 8005588:	f7fe ff72 	bl	8004470 <LL_ADC_GetOffsetChannel>
 800558c:	4603      	mov	r3, r0
 800558e:	0e9b      	lsrs	r3, r3, #26
 8005590:	f003 021f 	and.w	r2, r3, #31
 8005594:	e01e      	b.n	80055d4 <HAL_ADC_ConfigChannel+0x448>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2102      	movs	r1, #2
 800559c:	4618      	mov	r0, r3
 800559e:	f7fe ff67 	bl	8004470 <LL_ADC_GetOffsetChannel>
 80055a2:	4603      	mov	r3, r0
 80055a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055ac:	fa93 f3a3 	rbit	r3, r3
 80055b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80055b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80055bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d101      	bne.n	80055c8 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 80055c4:	2320      	movs	r3, #32
 80055c6:	e004      	b.n	80055d2 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 80055c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055cc:	fab3 f383 	clz	r3, r3
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	461a      	mov	r2, r3
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d105      	bne.n	80055ec <HAL_ADC_ConfigChannel+0x460>
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	0e9b      	lsrs	r3, r3, #26
 80055e6:	f003 031f 	and.w	r3, r3, #31
 80055ea:	e014      	b.n	8005616 <HAL_ADC_ConfigChannel+0x48a>
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055f4:	fa93 f3a3 	rbit	r3, r3
 80055f8:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80055fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8005600:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005604:	2b00      	cmp	r3, #0
 8005606:	d101      	bne.n	800560c <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8005608:	2320      	movs	r3, #32
 800560a:	e004      	b.n	8005616 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 800560c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005610:	fab3 f383 	clz	r3, r3
 8005614:	b2db      	uxtb	r3, r3
 8005616:	429a      	cmp	r2, r3
 8005618:	d106      	bne.n	8005628 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2200      	movs	r2, #0
 8005620:	2102      	movs	r1, #2
 8005622:	4618      	mov	r0, r3
 8005624:	f7fe ffba 	bl	800459c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2103      	movs	r1, #3
 800562e:	4618      	mov	r0, r3
 8005630:	f7fe ff1e 	bl	8004470 <LL_ADC_GetOffsetChannel>
 8005634:	4603      	mov	r3, r0
 8005636:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10a      	bne.n	8005654 <HAL_ADC_ConfigChannel+0x4c8>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2103      	movs	r1, #3
 8005644:	4618      	mov	r0, r3
 8005646:	f7fe ff13 	bl	8004470 <LL_ADC_GetOffsetChannel>
 800564a:	4603      	mov	r3, r0
 800564c:	0e9b      	lsrs	r3, r3, #26
 800564e:	f003 021f 	and.w	r2, r3, #31
 8005652:	e017      	b.n	8005684 <HAL_ADC_ConfigChannel+0x4f8>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2103      	movs	r1, #3
 800565a:	4618      	mov	r0, r3
 800565c:	f7fe ff08 	bl	8004470 <LL_ADC_GetOffsetChannel>
 8005660:	4603      	mov	r3, r0
 8005662:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005664:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005666:	fa93 f3a3 	rbit	r3, r3
 800566a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800566c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800566e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8005670:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8005676:	2320      	movs	r3, #32
 8005678:	e003      	b.n	8005682 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800567a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800567c:	fab3 f383 	clz	r3, r3
 8005680:	b2db      	uxtb	r3, r3
 8005682:	461a      	mov	r2, r3
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800568c:	2b00      	cmp	r3, #0
 800568e:	d105      	bne.n	800569c <HAL_ADC_ConfigChannel+0x510>
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	0e9b      	lsrs	r3, r3, #26
 8005696:	f003 031f 	and.w	r3, r3, #31
 800569a:	e011      	b.n	80056c0 <HAL_ADC_ConfigChannel+0x534>
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056a4:	fa93 f3a3 	rbit	r3, r3
 80056a8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80056aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056ac:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80056ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 80056b4:	2320      	movs	r3, #32
 80056b6:	e003      	b.n	80056c0 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 80056b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056ba:	fab3 f383 	clz	r3, r3
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d14f      	bne.n	8005764 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2200      	movs	r2, #0
 80056ca:	2103      	movs	r1, #3
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7fe ff65 	bl	800459c <LL_ADC_SetOffsetState>
 80056d2:	e047      	b.n	8005764 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	069b      	lsls	r3, r3, #26
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d107      	bne.n	80056f8 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80056f6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	069b      	lsls	r3, r3, #26
 8005708:	429a      	cmp	r2, r3
 800570a:	d107      	bne.n	800571c <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800571a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005722:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	069b      	lsls	r3, r3, #26
 800572c:	429a      	cmp	r2, r3
 800572e:	d107      	bne.n	8005740 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800573e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005746:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	069b      	lsls	r3, r3, #26
 8005750:	429a      	cmp	r2, r3
 8005752:	d107      	bne.n	8005764 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005762:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4618      	mov	r0, r3
 800576a:	f7ff f87d 	bl	8004868 <LL_ADC_IsEnabled>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	f040 8219 	bne.w	8005ba8 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6818      	ldr	r0, [r3, #0]
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	6819      	ldr	r1, [r3, #0]
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	461a      	mov	r2, r3
 8005784:	f7fe ff9e 	bl	80046c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	4aa1      	ldr	r2, [pc, #644]	; (8005a14 <HAL_ADC_ConfigChannel+0x888>)
 800578e:	4293      	cmp	r3, r2
 8005790:	f040 812e 	bne.w	80059f0 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10b      	bne.n	80057bc <HAL_ADC_ConfigChannel+0x630>
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	0e9b      	lsrs	r3, r3, #26
 80057aa:	3301      	adds	r3, #1
 80057ac:	f003 031f 	and.w	r3, r3, #31
 80057b0:	2b09      	cmp	r3, #9
 80057b2:	bf94      	ite	ls
 80057b4:	2301      	movls	r3, #1
 80057b6:	2300      	movhi	r3, #0
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	e019      	b.n	80057f0 <HAL_ADC_ConfigChannel+0x664>
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057c4:	fa93 f3a3 	rbit	r3, r3
 80057c8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80057ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80057ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d101      	bne.n	80057d8 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80057d4:	2320      	movs	r3, #32
 80057d6:	e003      	b.n	80057e0 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80057d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057da:	fab3 f383 	clz	r3, r3
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	3301      	adds	r3, #1
 80057e2:	f003 031f 	and.w	r3, r3, #31
 80057e6:	2b09      	cmp	r3, #9
 80057e8:	bf94      	ite	ls
 80057ea:	2301      	movls	r3, #1
 80057ec:	2300      	movhi	r3, #0
 80057ee:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d079      	beq.n	80058e8 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d107      	bne.n	8005810 <HAL_ADC_ConfigChannel+0x684>
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	0e9b      	lsrs	r3, r3, #26
 8005806:	3301      	adds	r3, #1
 8005808:	069b      	lsls	r3, r3, #26
 800580a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800580e:	e015      	b.n	800583c <HAL_ADC_ConfigChannel+0x6b0>
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005818:	fa93 f3a3 	rbit	r3, r3
 800581c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800581e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005820:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8005822:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8005828:	2320      	movs	r3, #32
 800582a:	e003      	b.n	8005834 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 800582c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800582e:	fab3 f383 	clz	r3, r3
 8005832:	b2db      	uxtb	r3, r3
 8005834:	3301      	adds	r3, #1
 8005836:	069b      	lsls	r3, r3, #26
 8005838:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005844:	2b00      	cmp	r3, #0
 8005846:	d109      	bne.n	800585c <HAL_ADC_ConfigChannel+0x6d0>
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	0e9b      	lsrs	r3, r3, #26
 800584e:	3301      	adds	r3, #1
 8005850:	f003 031f 	and.w	r3, r3, #31
 8005854:	2101      	movs	r1, #1
 8005856:	fa01 f303 	lsl.w	r3, r1, r3
 800585a:	e017      	b.n	800588c <HAL_ADC_ConfigChannel+0x700>
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005864:	fa93 f3a3 	rbit	r3, r3
 8005868:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800586a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800586c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800586e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005870:	2b00      	cmp	r3, #0
 8005872:	d101      	bne.n	8005878 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8005874:	2320      	movs	r3, #32
 8005876:	e003      	b.n	8005880 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8005878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800587a:	fab3 f383 	clz	r3, r3
 800587e:	b2db      	uxtb	r3, r3
 8005880:	3301      	adds	r3, #1
 8005882:	f003 031f 	and.w	r3, r3, #31
 8005886:	2101      	movs	r1, #1
 8005888:	fa01 f303 	lsl.w	r3, r1, r3
 800588c:	ea42 0103 	orr.w	r1, r2, r3
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10a      	bne.n	80058b2 <HAL_ADC_ConfigChannel+0x726>
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	0e9b      	lsrs	r3, r3, #26
 80058a2:	3301      	adds	r3, #1
 80058a4:	f003 021f 	and.w	r2, r3, #31
 80058a8:	4613      	mov	r3, r2
 80058aa:	005b      	lsls	r3, r3, #1
 80058ac:	4413      	add	r3, r2
 80058ae:	051b      	lsls	r3, r3, #20
 80058b0:	e018      	b.n	80058e4 <HAL_ADC_ConfigChannel+0x758>
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ba:	fa93 f3a3 	rbit	r3, r3
 80058be:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80058c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80058c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 80058ca:	2320      	movs	r3, #32
 80058cc:	e003      	b.n	80058d6 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 80058ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d0:	fab3 f383 	clz	r3, r3
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	3301      	adds	r3, #1
 80058d8:	f003 021f 	and.w	r2, r3, #31
 80058dc:	4613      	mov	r3, r2
 80058de:	005b      	lsls	r3, r3, #1
 80058e0:	4413      	add	r3, r2
 80058e2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058e4:	430b      	orrs	r3, r1
 80058e6:	e07e      	b.n	80059e6 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d107      	bne.n	8005904 <HAL_ADC_ConfigChannel+0x778>
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	0e9b      	lsrs	r3, r3, #26
 80058fa:	3301      	adds	r3, #1
 80058fc:	069b      	lsls	r3, r3, #26
 80058fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005902:	e015      	b.n	8005930 <HAL_ADC_ConfigChannel+0x7a4>
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800590a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590c:	fa93 f3a3 	rbit	r3, r3
 8005910:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005914:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005918:	2b00      	cmp	r3, #0
 800591a:	d101      	bne.n	8005920 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 800591c:	2320      	movs	r3, #32
 800591e:	e003      	b.n	8005928 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8005920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005922:	fab3 f383 	clz	r3, r3
 8005926:	b2db      	uxtb	r3, r3
 8005928:	3301      	adds	r3, #1
 800592a:	069b      	lsls	r3, r3, #26
 800592c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005938:	2b00      	cmp	r3, #0
 800593a:	d109      	bne.n	8005950 <HAL_ADC_ConfigChannel+0x7c4>
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	0e9b      	lsrs	r3, r3, #26
 8005942:	3301      	adds	r3, #1
 8005944:	f003 031f 	and.w	r3, r3, #31
 8005948:	2101      	movs	r1, #1
 800594a:	fa01 f303 	lsl.w	r3, r1, r3
 800594e:	e017      	b.n	8005980 <HAL_ADC_ConfigChannel+0x7f4>
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	fa93 f3a3 	rbit	r3, r3
 800595c:	61bb      	str	r3, [r7, #24]
  return result;
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005962:	6a3b      	ldr	r3, [r7, #32]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d101      	bne.n	800596c <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8005968:	2320      	movs	r3, #32
 800596a:	e003      	b.n	8005974 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 800596c:	6a3b      	ldr	r3, [r7, #32]
 800596e:	fab3 f383 	clz	r3, r3
 8005972:	b2db      	uxtb	r3, r3
 8005974:	3301      	adds	r3, #1
 8005976:	f003 031f 	and.w	r3, r3, #31
 800597a:	2101      	movs	r1, #1
 800597c:	fa01 f303 	lsl.w	r3, r1, r3
 8005980:	ea42 0103 	orr.w	r1, r2, r3
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10d      	bne.n	80059ac <HAL_ADC_ConfigChannel+0x820>
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	0e9b      	lsrs	r3, r3, #26
 8005996:	3301      	adds	r3, #1
 8005998:	f003 021f 	and.w	r2, r3, #31
 800599c:	4613      	mov	r3, r2
 800599e:	005b      	lsls	r3, r3, #1
 80059a0:	4413      	add	r3, r2
 80059a2:	3b1e      	subs	r3, #30
 80059a4:	051b      	lsls	r3, r3, #20
 80059a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80059aa:	e01b      	b.n	80059e4 <HAL_ADC_ConfigChannel+0x858>
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	fa93 f3a3 	rbit	r3, r3
 80059b8:	60fb      	str	r3, [r7, #12]
  return result;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d101      	bne.n	80059c8 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 80059c4:	2320      	movs	r3, #32
 80059c6:	e003      	b.n	80059d0 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	fab3 f383 	clz	r3, r3
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	3301      	adds	r3, #1
 80059d2:	f003 021f 	and.w	r2, r3, #31
 80059d6:	4613      	mov	r3, r2
 80059d8:	005b      	lsls	r3, r3, #1
 80059da:	4413      	add	r3, r2
 80059dc:	3b1e      	subs	r3, #30
 80059de:	051b      	lsls	r3, r3, #20
 80059e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80059e4:	430b      	orrs	r3, r1
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	6892      	ldr	r2, [r2, #8]
 80059ea:	4619      	mov	r1, r3
 80059ec:	f7fe fe3f 	bl	800466e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f280 80d7 	bge.w	8005ba8 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a06      	ldr	r2, [pc, #24]	; (8005a18 <HAL_ADC_ConfigChannel+0x88c>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d004      	beq.n	8005a0e <HAL_ADC_ConfigChannel+0x882>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a04      	ldr	r2, [pc, #16]	; (8005a1c <HAL_ADC_ConfigChannel+0x890>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d10a      	bne.n	8005a24 <HAL_ADC_ConfigChannel+0x898>
 8005a0e:	4b04      	ldr	r3, [pc, #16]	; (8005a20 <HAL_ADC_ConfigChannel+0x894>)
 8005a10:	e009      	b.n	8005a26 <HAL_ADC_ConfigChannel+0x89a>
 8005a12:	bf00      	nop
 8005a14:	47ff0000 	.word	0x47ff0000
 8005a18:	40022000 	.word	0x40022000
 8005a1c:	40022100 	.word	0x40022100
 8005a20:	40022300 	.word	0x40022300
 8005a24:	4b65      	ldr	r3, [pc, #404]	; (8005bbc <HAL_ADC_ConfigChannel+0xa30>)
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7fe fce2 	bl	80043f0 <LL_ADC_GetCommonPathInternalCh>
 8005a2c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a62      	ldr	r2, [pc, #392]	; (8005bc0 <HAL_ADC_ConfigChannel+0xa34>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d004      	beq.n	8005a44 <HAL_ADC_ConfigChannel+0x8b8>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a61      	ldr	r2, [pc, #388]	; (8005bc4 <HAL_ADC_ConfigChannel+0xa38>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d10e      	bne.n	8005a62 <HAL_ADC_ConfigChannel+0x8d6>
 8005a44:	485e      	ldr	r0, [pc, #376]	; (8005bc0 <HAL_ADC_ConfigChannel+0xa34>)
 8005a46:	f7fe ff0f 	bl	8004868 <LL_ADC_IsEnabled>
 8005a4a:	4604      	mov	r4, r0
 8005a4c:	485d      	ldr	r0, [pc, #372]	; (8005bc4 <HAL_ADC_ConfigChannel+0xa38>)
 8005a4e:	f7fe ff0b 	bl	8004868 <LL_ADC_IsEnabled>
 8005a52:	4603      	mov	r3, r0
 8005a54:	4323      	orrs	r3, r4
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	bf0c      	ite	eq
 8005a5a:	2301      	moveq	r3, #1
 8005a5c:	2300      	movne	r3, #0
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	e008      	b.n	8005a74 <HAL_ADC_ConfigChannel+0x8e8>
 8005a62:	4859      	ldr	r0, [pc, #356]	; (8005bc8 <HAL_ADC_ConfigChannel+0xa3c>)
 8005a64:	f7fe ff00 	bl	8004868 <LL_ADC_IsEnabled>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	bf0c      	ite	eq
 8005a6e:	2301      	moveq	r3, #1
 8005a70:	2300      	movne	r3, #0
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f000 8084 	beq.w	8005b82 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a53      	ldr	r2, [pc, #332]	; (8005bcc <HAL_ADC_ConfigChannel+0xa40>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d132      	bne.n	8005aea <HAL_ADC_ConfigChannel+0x95e>
 8005a84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d12c      	bne.n	8005aea <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a4c      	ldr	r2, [pc, #304]	; (8005bc8 <HAL_ADC_ConfigChannel+0xa3c>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	f040 8086 	bne.w	8005ba8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a47      	ldr	r2, [pc, #284]	; (8005bc0 <HAL_ADC_ConfigChannel+0xa34>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d004      	beq.n	8005ab0 <HAL_ADC_ConfigChannel+0x924>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a46      	ldr	r2, [pc, #280]	; (8005bc4 <HAL_ADC_ConfigChannel+0xa38>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d101      	bne.n	8005ab4 <HAL_ADC_ConfigChannel+0x928>
 8005ab0:	4a47      	ldr	r2, [pc, #284]	; (8005bd0 <HAL_ADC_ConfigChannel+0xa44>)
 8005ab2:	e000      	b.n	8005ab6 <HAL_ADC_ConfigChannel+0x92a>
 8005ab4:	4a41      	ldr	r2, [pc, #260]	; (8005bbc <HAL_ADC_ConfigChannel+0xa30>)
 8005ab6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005aba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005abe:	4619      	mov	r1, r3
 8005ac0:	4610      	mov	r0, r2
 8005ac2:	f7fe fc82 	bl	80043ca <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005ac6:	4b43      	ldr	r3, [pc, #268]	; (8005bd4 <HAL_ADC_ConfigChannel+0xa48>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	099b      	lsrs	r3, r3, #6
 8005acc:	4a42      	ldr	r2, [pc, #264]	; (8005bd8 <HAL_ADC_ConfigChannel+0xa4c>)
 8005ace:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad2:	099b      	lsrs	r3, r3, #6
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	005b      	lsls	r3, r3, #1
 8005ad8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005ada:	e002      	b.n	8005ae2 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d1f9      	bne.n	8005adc <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005ae8:	e05e      	b.n	8005ba8 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a3b      	ldr	r2, [pc, #236]	; (8005bdc <HAL_ADC_ConfigChannel+0xa50>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d120      	bne.n	8005b36 <HAL_ADC_ConfigChannel+0x9aa>
 8005af4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005af8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d11a      	bne.n	8005b36 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a30      	ldr	r2, [pc, #192]	; (8005bc8 <HAL_ADC_ConfigChannel+0xa3c>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d14e      	bne.n	8005ba8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a2c      	ldr	r2, [pc, #176]	; (8005bc0 <HAL_ADC_ConfigChannel+0xa34>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d004      	beq.n	8005b1e <HAL_ADC_ConfigChannel+0x992>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a2a      	ldr	r2, [pc, #168]	; (8005bc4 <HAL_ADC_ConfigChannel+0xa38>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d101      	bne.n	8005b22 <HAL_ADC_ConfigChannel+0x996>
 8005b1e:	4a2c      	ldr	r2, [pc, #176]	; (8005bd0 <HAL_ADC_ConfigChannel+0xa44>)
 8005b20:	e000      	b.n	8005b24 <HAL_ADC_ConfigChannel+0x998>
 8005b22:	4a26      	ldr	r2, [pc, #152]	; (8005bbc <HAL_ADC_ConfigChannel+0xa30>)
 8005b24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	4610      	mov	r0, r2
 8005b30:	f7fe fc4b 	bl	80043ca <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005b34:	e038      	b.n	8005ba8 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a29      	ldr	r2, [pc, #164]	; (8005be0 <HAL_ADC_ConfigChannel+0xa54>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d133      	bne.n	8005ba8 <HAL_ADC_ConfigChannel+0xa1c>
 8005b40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d12d      	bne.n	8005ba8 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a1d      	ldr	r2, [pc, #116]	; (8005bc8 <HAL_ADC_ConfigChannel+0xa3c>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d128      	bne.n	8005ba8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a19      	ldr	r2, [pc, #100]	; (8005bc0 <HAL_ADC_ConfigChannel+0xa34>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d004      	beq.n	8005b6a <HAL_ADC_ConfigChannel+0x9de>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a17      	ldr	r2, [pc, #92]	; (8005bc4 <HAL_ADC_ConfigChannel+0xa38>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d101      	bne.n	8005b6e <HAL_ADC_ConfigChannel+0x9e2>
 8005b6a:	4a19      	ldr	r2, [pc, #100]	; (8005bd0 <HAL_ADC_ConfigChannel+0xa44>)
 8005b6c:	e000      	b.n	8005b70 <HAL_ADC_ConfigChannel+0x9e4>
 8005b6e:	4a13      	ldr	r2, [pc, #76]	; (8005bbc <HAL_ADC_ConfigChannel+0xa30>)
 8005b70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005b78:	4619      	mov	r1, r3
 8005b7a:	4610      	mov	r0, r2
 8005b7c:	f7fe fc25 	bl	80043ca <LL_ADC_SetCommonPathInternalCh>
 8005b80:	e012      	b.n	8005ba8 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b86:	f043 0220 	orr.w	r2, r3, #32
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8005b94:	e008      	b.n	8005ba8 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b9a:	f043 0220 	orr.w	r2, r3, #32
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005bb0:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	37e4      	adds	r7, #228	; 0xe4
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd90      	pop	{r4, r7, pc}
 8005bbc:	58026300 	.word	0x58026300
 8005bc0:	40022000 	.word	0x40022000
 8005bc4:	40022100 	.word	0x40022100
 8005bc8:	58026000 	.word	0x58026000
 8005bcc:	c7520000 	.word	0xc7520000
 8005bd0:	40022300 	.word	0x40022300
 8005bd4:	24000000 	.word	0x24000000
 8005bd8:	053e2d63 	.word	0x053e2d63
 8005bdc:	c3210000 	.word	0xc3210000
 8005be0:	cb840000 	.word	0xcb840000

08005be4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b088      	sub	sp, #32
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7fe fe82 	bl	8004904 <LL_ADC_REG_IsConversionOngoing>
 8005c00:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7fe fea4 	bl	8004954 <LL_ADC_INJ_IsConversionOngoing>
 8005c0c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d103      	bne.n	8005c1c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f000 8098 	beq.w	8005d4c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d02a      	beq.n	8005c80 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	7e5b      	ldrb	r3, [r3, #25]
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d126      	bne.n	8005c80 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	7e1b      	ldrb	r3, [r3, #24]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d122      	bne.n	8005c80 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005c3e:	e014      	b.n	8005c6a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	4a45      	ldr	r2, [pc, #276]	; (8005d58 <ADC_ConversionStop+0x174>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d90d      	bls.n	8005c64 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c4c:	f043 0210 	orr.w	r2, r3, #16
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c58:	f043 0201 	orr.w	r2, r3, #1
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e074      	b.n	8005d4e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	3301      	adds	r3, #1
 8005c68:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c74:	2b40      	cmp	r3, #64	; 0x40
 8005c76:	d1e3      	bne.n	8005c40 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2240      	movs	r2, #64	; 0x40
 8005c7e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d014      	beq.n	8005cb0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7fe fe3a 	bl	8004904 <LL_ADC_REG_IsConversionOngoing>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00c      	beq.n	8005cb0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7fe fdf7 	bl	800488e <LL_ADC_IsDisableOngoing>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d104      	bne.n	8005cb0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7fe fe16 	bl	80048dc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d014      	beq.n	8005ce0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7fe fe4a 	bl	8004954 <LL_ADC_INJ_IsConversionOngoing>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00c      	beq.n	8005ce0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7fe fddf 	bl	800488e <LL_ADC_IsDisableOngoing>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d104      	bne.n	8005ce0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7fe fe26 	bl	800492c <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d005      	beq.n	8005cf2 <ADC_ConversionStop+0x10e>
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	2b03      	cmp	r3, #3
 8005cea:	d105      	bne.n	8005cf8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005cec:	230c      	movs	r3, #12
 8005cee:	617b      	str	r3, [r7, #20]
        break;
 8005cf0:	e005      	b.n	8005cfe <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005cf2:	2308      	movs	r3, #8
 8005cf4:	617b      	str	r3, [r7, #20]
        break;
 8005cf6:	e002      	b.n	8005cfe <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005cf8:	2304      	movs	r3, #4
 8005cfa:	617b      	str	r3, [r7, #20]
        break;
 8005cfc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8005cfe:	f7fe fb0b 	bl	8004318 <HAL_GetTick>
 8005d02:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005d04:	e01b      	b.n	8005d3e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005d06:	f7fe fb07 	bl	8004318 <HAL_GetTick>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	2b05      	cmp	r3, #5
 8005d12:	d914      	bls.n	8005d3e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689a      	ldr	r2, [r3, #8]
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00d      	beq.n	8005d3e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d26:	f043 0210 	orr.w	r2, r3, #16
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d32:	f043 0201 	orr.w	r2, r3, #1
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e007      	b.n	8005d4e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689a      	ldr	r2, [r3, #8]
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	4013      	ands	r3, r2
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1dc      	bne.n	8005d06 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3720      	adds	r7, #32
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	000cdbff 	.word	0x000cdbff

08005d5c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f7fe fd7d 	bl	8004868 <LL_ADC_IsEnabled>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d16e      	bne.n	8005e52 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689a      	ldr	r2, [r3, #8]
 8005d7a:	4b38      	ldr	r3, [pc, #224]	; (8005e5c <ADC_Enable+0x100>)
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00d      	beq.n	8005d9e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d86:	f043 0210 	orr.w	r2, r3, #16
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d92:	f043 0201 	orr.w	r2, r3, #1
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e05a      	b.n	8005e54 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7fe fd38 	bl	8004818 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005da8:	f7fe fab6 	bl	8004318 <HAL_GetTick>
 8005dac:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a2b      	ldr	r2, [pc, #172]	; (8005e60 <ADC_Enable+0x104>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d004      	beq.n	8005dc2 <ADC_Enable+0x66>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a29      	ldr	r2, [pc, #164]	; (8005e64 <ADC_Enable+0x108>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d101      	bne.n	8005dc6 <ADC_Enable+0x6a>
 8005dc2:	4b29      	ldr	r3, [pc, #164]	; (8005e68 <ADC_Enable+0x10c>)
 8005dc4:	e000      	b.n	8005dc8 <ADC_Enable+0x6c>
 8005dc6:	4b29      	ldr	r3, [pc, #164]	; (8005e6c <ADC_Enable+0x110>)
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7fe fcbb 	bl	8004744 <LL_ADC_GetMultimode>
 8005dce:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a23      	ldr	r2, [pc, #140]	; (8005e64 <ADC_Enable+0x108>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d002      	beq.n	8005de0 <ADC_Enable+0x84>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	e000      	b.n	8005de2 <ADC_Enable+0x86>
 8005de0:	4b1f      	ldr	r3, [pc, #124]	; (8005e60 <ADC_Enable+0x104>)
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	6812      	ldr	r2, [r2, #0]
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d02c      	beq.n	8005e44 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d130      	bne.n	8005e52 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005df0:	e028      	b.n	8005e44 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7fe fd36 	bl	8004868 <LL_ADC_IsEnabled>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d104      	bne.n	8005e0c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7fe fd06 	bl	8004818 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005e0c:	f7fe fa84 	bl	8004318 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d914      	bls.n	8005e44 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d00d      	beq.n	8005e44 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e2c:	f043 0210 	orr.w	r2, r3, #16
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e38:	f043 0201 	orr.w	r2, r3, #1
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e007      	b.n	8005e54 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d1cf      	bne.n	8005df2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	8000003f 	.word	0x8000003f
 8005e60:	40022000 	.word	0x40022000
 8005e64:	40022100 	.word	0x40022100
 8005e68:	40022300 	.word	0x40022300
 8005e6c:	58026300 	.word	0x58026300

08005e70 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7fe fd06 	bl	800488e <LL_ADC_IsDisableOngoing>
 8005e82:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7fe fced 	bl	8004868 <LL_ADC_IsEnabled>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d047      	beq.n	8005f24 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d144      	bne.n	8005f24 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f003 030d 	and.w	r3, r3, #13
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d10c      	bne.n	8005ec2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7fe fcc7 	bl	8004840 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2203      	movs	r2, #3
 8005eb8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005eba:	f7fe fa2d 	bl	8004318 <HAL_GetTick>
 8005ebe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005ec0:	e029      	b.n	8005f16 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ec6:	f043 0210 	orr.w	r2, r3, #16
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ed2:	f043 0201 	orr.w	r2, r3, #1
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e023      	b.n	8005f26 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005ede:	f7fe fa1b 	bl	8004318 <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d914      	bls.n	8005f16 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00d      	beq.n	8005f16 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005efe:	f043 0210 	orr.w	r2, r3, #16
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f0a:	f043 0201 	orr.w	r2, r3, #1
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e007      	b.n	8005f26 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f003 0301 	and.w	r3, r3, #1
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d1dc      	bne.n	8005ede <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
	...

08005f30 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a6c      	ldr	r2, [pc, #432]	; (80060f0 <ADC_ConfigureBoostMode+0x1c0>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d004      	beq.n	8005f4c <ADC_ConfigureBoostMode+0x1c>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a6b      	ldr	r2, [pc, #428]	; (80060f4 <ADC_ConfigureBoostMode+0x1c4>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d109      	bne.n	8005f60 <ADC_ConfigureBoostMode+0x30>
 8005f4c:	4b6a      	ldr	r3, [pc, #424]	; (80060f8 <ADC_ConfigureBoostMode+0x1c8>)
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	bf14      	ite	ne
 8005f58:	2301      	movne	r3, #1
 8005f5a:	2300      	moveq	r3, #0
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	e008      	b.n	8005f72 <ADC_ConfigureBoostMode+0x42>
 8005f60:	4b66      	ldr	r3, [pc, #408]	; (80060fc <ADC_ConfigureBoostMode+0x1cc>)
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	bf14      	ite	ne
 8005f6c:	2301      	movne	r3, #1
 8005f6e:	2300      	moveq	r3, #0
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d01c      	beq.n	8005fb0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005f76:	f005 fcab 	bl	800b8d0 <HAL_RCC_GetHCLKFreq>
 8005f7a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f84:	d010      	beq.n	8005fa8 <ADC_ConfigureBoostMode+0x78>
 8005f86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f8a:	d873      	bhi.n	8006074 <ADC_ConfigureBoostMode+0x144>
 8005f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f90:	d002      	beq.n	8005f98 <ADC_ConfigureBoostMode+0x68>
 8005f92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f96:	d16d      	bne.n	8006074 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	0c1b      	lsrs	r3, r3, #16
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa4:	60fb      	str	r3, [r7, #12]
        break;
 8005fa6:	e068      	b.n	800607a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	089b      	lsrs	r3, r3, #2
 8005fac:	60fb      	str	r3, [r7, #12]
        break;
 8005fae:	e064      	b.n	800607a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005fb0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005fb4:	f04f 0100 	mov.w	r1, #0
 8005fb8:	f006 fe86 	bl	800ccc8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005fbc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005fc6:	d051      	beq.n	800606c <ADC_ConfigureBoostMode+0x13c>
 8005fc8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005fcc:	d854      	bhi.n	8006078 <ADC_ConfigureBoostMode+0x148>
 8005fce:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005fd2:	d047      	beq.n	8006064 <ADC_ConfigureBoostMode+0x134>
 8005fd4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005fd8:	d84e      	bhi.n	8006078 <ADC_ConfigureBoostMode+0x148>
 8005fda:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005fde:	d03d      	beq.n	800605c <ADC_ConfigureBoostMode+0x12c>
 8005fe0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005fe4:	d848      	bhi.n	8006078 <ADC_ConfigureBoostMode+0x148>
 8005fe6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fea:	d033      	beq.n	8006054 <ADC_ConfigureBoostMode+0x124>
 8005fec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ff0:	d842      	bhi.n	8006078 <ADC_ConfigureBoostMode+0x148>
 8005ff2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005ff6:	d029      	beq.n	800604c <ADC_ConfigureBoostMode+0x11c>
 8005ff8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005ffc:	d83c      	bhi.n	8006078 <ADC_ConfigureBoostMode+0x148>
 8005ffe:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006002:	d01a      	beq.n	800603a <ADC_ConfigureBoostMode+0x10a>
 8006004:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006008:	d836      	bhi.n	8006078 <ADC_ConfigureBoostMode+0x148>
 800600a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800600e:	d014      	beq.n	800603a <ADC_ConfigureBoostMode+0x10a>
 8006010:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006014:	d830      	bhi.n	8006078 <ADC_ConfigureBoostMode+0x148>
 8006016:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800601a:	d00e      	beq.n	800603a <ADC_ConfigureBoostMode+0x10a>
 800601c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006020:	d82a      	bhi.n	8006078 <ADC_ConfigureBoostMode+0x148>
 8006022:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006026:	d008      	beq.n	800603a <ADC_ConfigureBoostMode+0x10a>
 8006028:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800602c:	d824      	bhi.n	8006078 <ADC_ConfigureBoostMode+0x148>
 800602e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006032:	d002      	beq.n	800603a <ADC_ConfigureBoostMode+0x10a>
 8006034:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006038:	d11e      	bne.n	8006078 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	0c9b      	lsrs	r3, r3, #18
 8006040:	005b      	lsls	r3, r3, #1
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	fbb2 f3f3 	udiv	r3, r2, r3
 8006048:	60fb      	str	r3, [r7, #12]
        break;
 800604a:	e016      	b.n	800607a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	091b      	lsrs	r3, r3, #4
 8006050:	60fb      	str	r3, [r7, #12]
        break;
 8006052:	e012      	b.n	800607a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	095b      	lsrs	r3, r3, #5
 8006058:	60fb      	str	r3, [r7, #12]
        break;
 800605a:	e00e      	b.n	800607a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	099b      	lsrs	r3, r3, #6
 8006060:	60fb      	str	r3, [r7, #12]
        break;
 8006062:	e00a      	b.n	800607a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	09db      	lsrs	r3, r3, #7
 8006068:	60fb      	str	r3, [r7, #12]
        break;
 800606a:	e006      	b.n	800607a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	0a1b      	lsrs	r3, r3, #8
 8006070:	60fb      	str	r3, [r7, #12]
        break;
 8006072:	e002      	b.n	800607a <ADC_ConfigureBoostMode+0x14a>
        break;
 8006074:	bf00      	nop
 8006076:	e000      	b.n	800607a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8006078:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	085b      	lsrs	r3, r3, #1
 800607e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	4a1f      	ldr	r2, [pc, #124]	; (8006100 <ADC_ConfigureBoostMode+0x1d0>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d808      	bhi.n	800609a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	689a      	ldr	r2, [r3, #8]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006096:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006098:	e025      	b.n	80060e6 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	4a19      	ldr	r2, [pc, #100]	; (8006104 <ADC_ConfigureBoostMode+0x1d4>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d80a      	bhi.n	80060b8 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060b4:	609a      	str	r2, [r3, #8]
}
 80060b6:	e016      	b.n	80060e6 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	4a13      	ldr	r2, [pc, #76]	; (8006108 <ADC_ConfigureBoostMode+0x1d8>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d80a      	bhi.n	80060d6 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060d2:	609a      	str	r2, [r3, #8]
}
 80060d4:	e007      	b.n	80060e6 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	689a      	ldr	r2, [r3, #8]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80060e4:	609a      	str	r2, [r3, #8]
}
 80060e6:	bf00      	nop
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	40022000 	.word	0x40022000
 80060f4:	40022100 	.word	0x40022100
 80060f8:	40022300 	.word	0x40022300
 80060fc:	58026300 	.word	0x58026300
 8006100:	005f5e10 	.word	0x005f5e10
 8006104:	00bebc20 	.word	0x00bebc20
 8006108:	017d7840 	.word	0x017d7840

0800610c <LL_ADC_IsEnabled>:
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f003 0301 	and.w	r3, r3, #1
 800611c:	2b01      	cmp	r3, #1
 800611e:	d101      	bne.n	8006124 <LL_ADC_IsEnabled+0x18>
 8006120:	2301      	movs	r3, #1
 8006122:	e000      	b.n	8006126 <LL_ADC_IsEnabled+0x1a>
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr

08006132 <LL_ADC_REG_IsConversionOngoing>:
{
 8006132:	b480      	push	{r7}
 8006134:	b083      	sub	sp, #12
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f003 0304 	and.w	r3, r3, #4
 8006142:	2b04      	cmp	r3, #4
 8006144:	d101      	bne.n	800614a <LL_ADC_REG_IsConversionOngoing+0x18>
 8006146:	2301      	movs	r3, #1
 8006148:	e000      	b.n	800614c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006158:	b590      	push	{r4, r7, lr}
 800615a:	b0a3      	sub	sp, #140	; 0x8c
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006162:	2300      	movs	r3, #0
 8006164:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800616e:	2b01      	cmp	r3, #1
 8006170:	d101      	bne.n	8006176 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006172:	2302      	movs	r3, #2
 8006174:	e0c1      	b.n	80062fa <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800617e:	2300      	movs	r3, #0
 8006180:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006182:	2300      	movs	r3, #0
 8006184:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a5e      	ldr	r2, [pc, #376]	; (8006304 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d102      	bne.n	8006196 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006190:	4b5d      	ldr	r3, [pc, #372]	; (8006308 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006192:	60fb      	str	r3, [r7, #12]
 8006194:	e001      	b.n	800619a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006196:	2300      	movs	r3, #0
 8006198:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d10b      	bne.n	80061b8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061a4:	f043 0220 	orr.w	r2, r3, #32
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e0a0      	b.n	80062fa <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7ff ffb9 	bl	8006132 <LL_ADC_REG_IsConversionOngoing>
 80061c0:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7ff ffb2 	bl	8006132 <LL_ADC_REG_IsConversionOngoing>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f040 8081 	bne.w	80062d8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80061d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d17c      	bne.n	80062d8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a48      	ldr	r2, [pc, #288]	; (8006304 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d004      	beq.n	80061f2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a46      	ldr	r2, [pc, #280]	; (8006308 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d101      	bne.n	80061f6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80061f2:	4b46      	ldr	r3, [pc, #280]	; (800630c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80061f4:	e000      	b.n	80061f8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80061f6:	4b46      	ldr	r3, [pc, #280]	; (8006310 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80061f8:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d039      	beq.n	8006276 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006202:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	431a      	orrs	r2, r3
 8006210:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006212:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a3a      	ldr	r2, [pc, #232]	; (8006304 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d004      	beq.n	8006228 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a39      	ldr	r2, [pc, #228]	; (8006308 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d10e      	bne.n	8006246 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8006228:	4836      	ldr	r0, [pc, #216]	; (8006304 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800622a:	f7ff ff6f 	bl	800610c <LL_ADC_IsEnabled>
 800622e:	4604      	mov	r4, r0
 8006230:	4835      	ldr	r0, [pc, #212]	; (8006308 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006232:	f7ff ff6b 	bl	800610c <LL_ADC_IsEnabled>
 8006236:	4603      	mov	r3, r0
 8006238:	4323      	orrs	r3, r4
 800623a:	2b00      	cmp	r3, #0
 800623c:	bf0c      	ite	eq
 800623e:	2301      	moveq	r3, #1
 8006240:	2300      	movne	r3, #0
 8006242:	b2db      	uxtb	r3, r3
 8006244:	e008      	b.n	8006258 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8006246:	4833      	ldr	r0, [pc, #204]	; (8006314 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8006248:	f7ff ff60 	bl	800610c <LL_ADC_IsEnabled>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	bf0c      	ite	eq
 8006252:	2301      	moveq	r3, #1
 8006254:	2300      	movne	r3, #0
 8006256:	b2db      	uxtb	r3, r3
 8006258:	2b00      	cmp	r3, #0
 800625a:	d047      	beq.n	80062ec <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800625c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800625e:	689a      	ldr	r2, [r3, #8]
 8006260:	4b2d      	ldr	r3, [pc, #180]	; (8006318 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006262:	4013      	ands	r3, r2
 8006264:	683a      	ldr	r2, [r7, #0]
 8006266:	6811      	ldr	r1, [r2, #0]
 8006268:	683a      	ldr	r2, [r7, #0]
 800626a:	6892      	ldr	r2, [r2, #8]
 800626c:	430a      	orrs	r2, r1
 800626e:	431a      	orrs	r2, r3
 8006270:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006272:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006274:	e03a      	b.n	80062ec <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006276:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800627e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006280:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a1f      	ldr	r2, [pc, #124]	; (8006304 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d004      	beq.n	8006296 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a1d      	ldr	r2, [pc, #116]	; (8006308 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d10e      	bne.n	80062b4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8006296:	481b      	ldr	r0, [pc, #108]	; (8006304 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006298:	f7ff ff38 	bl	800610c <LL_ADC_IsEnabled>
 800629c:	4604      	mov	r4, r0
 800629e:	481a      	ldr	r0, [pc, #104]	; (8006308 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80062a0:	f7ff ff34 	bl	800610c <LL_ADC_IsEnabled>
 80062a4:	4603      	mov	r3, r0
 80062a6:	4323      	orrs	r3, r4
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	bf0c      	ite	eq
 80062ac:	2301      	moveq	r3, #1
 80062ae:	2300      	movne	r3, #0
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	e008      	b.n	80062c6 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80062b4:	4817      	ldr	r0, [pc, #92]	; (8006314 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80062b6:	f7ff ff29 	bl	800610c <LL_ADC_IsEnabled>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	bf0c      	ite	eq
 80062c0:	2301      	moveq	r3, #1
 80062c2:	2300      	movne	r3, #0
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d010      	beq.n	80062ec <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80062ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80062cc:	689a      	ldr	r2, [r3, #8]
 80062ce:	4b12      	ldr	r3, [pc, #72]	; (8006318 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80062d0:	4013      	ands	r3, r2
 80062d2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80062d4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80062d6:	e009      	b.n	80062ec <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062dc:	f043 0220 	orr.w	r2, r3, #32
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80062ea:	e000      	b.n	80062ee <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80062ec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80062f6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	378c      	adds	r7, #140	; 0x8c
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd90      	pop	{r4, r7, pc}
 8006302:	bf00      	nop
 8006304:	40022000 	.word	0x40022000
 8006308:	40022100 	.word	0x40022100
 800630c:	40022300 	.word	0x40022300
 8006310:	58026300 	.word	0x58026300
 8006314:	58026000 	.word	0x58026000
 8006318:	fffff0e0 	.word	0xfffff0e0

0800631c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f003 0307 	and.w	r3, r3, #7
 800632a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800632c:	4b0b      	ldr	r3, [pc, #44]	; (800635c <__NVIC_SetPriorityGrouping+0x40>)
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006338:	4013      	ands	r3, r2
 800633a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006344:	4b06      	ldr	r3, [pc, #24]	; (8006360 <__NVIC_SetPriorityGrouping+0x44>)
 8006346:	4313      	orrs	r3, r2
 8006348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800634a:	4a04      	ldr	r2, [pc, #16]	; (800635c <__NVIC_SetPriorityGrouping+0x40>)
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	60d3      	str	r3, [r2, #12]
}
 8006350:	bf00      	nop
 8006352:	3714      	adds	r7, #20
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr
 800635c:	e000ed00 	.word	0xe000ed00
 8006360:	05fa0000 	.word	0x05fa0000

08006364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006364:	b480      	push	{r7}
 8006366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006368:	4b04      	ldr	r3, [pc, #16]	; (800637c <__NVIC_GetPriorityGrouping+0x18>)
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	0a1b      	lsrs	r3, r3, #8
 800636e:	f003 0307 	and.w	r3, r3, #7
}
 8006372:	4618      	mov	r0, r3
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr
 800637c:	e000ed00 	.word	0xe000ed00

08006380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	4603      	mov	r3, r0
 8006388:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800638a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800638e:	2b00      	cmp	r3, #0
 8006390:	db0b      	blt.n	80063aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006392:	88fb      	ldrh	r3, [r7, #6]
 8006394:	f003 021f 	and.w	r2, r3, #31
 8006398:	4907      	ldr	r1, [pc, #28]	; (80063b8 <__NVIC_EnableIRQ+0x38>)
 800639a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800639e:	095b      	lsrs	r3, r3, #5
 80063a0:	2001      	movs	r0, #1
 80063a2:	fa00 f202 	lsl.w	r2, r0, r2
 80063a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80063aa:	bf00      	nop
 80063ac:	370c      	adds	r7, #12
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	e000e100 	.word	0xe000e100

080063bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	4603      	mov	r3, r0
 80063c4:	6039      	str	r1, [r7, #0]
 80063c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80063c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	db0a      	blt.n	80063e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	b2da      	uxtb	r2, r3
 80063d4:	490c      	ldr	r1, [pc, #48]	; (8006408 <__NVIC_SetPriority+0x4c>)
 80063d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80063da:	0112      	lsls	r2, r2, #4
 80063dc:	b2d2      	uxtb	r2, r2
 80063de:	440b      	add	r3, r1
 80063e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80063e4:	e00a      	b.n	80063fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	4908      	ldr	r1, [pc, #32]	; (800640c <__NVIC_SetPriority+0x50>)
 80063ec:	88fb      	ldrh	r3, [r7, #6]
 80063ee:	f003 030f 	and.w	r3, r3, #15
 80063f2:	3b04      	subs	r3, #4
 80063f4:	0112      	lsls	r2, r2, #4
 80063f6:	b2d2      	uxtb	r2, r2
 80063f8:	440b      	add	r3, r1
 80063fa:	761a      	strb	r2, [r3, #24]
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr
 8006408:	e000e100 	.word	0xe000e100
 800640c:	e000ed00 	.word	0xe000ed00

08006410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006410:	b480      	push	{r7}
 8006412:	b089      	sub	sp, #36	; 0x24
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f003 0307 	and.w	r3, r3, #7
 8006422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	f1c3 0307 	rsb	r3, r3, #7
 800642a:	2b04      	cmp	r3, #4
 800642c:	bf28      	it	cs
 800642e:	2304      	movcs	r3, #4
 8006430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	3304      	adds	r3, #4
 8006436:	2b06      	cmp	r3, #6
 8006438:	d902      	bls.n	8006440 <NVIC_EncodePriority+0x30>
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	3b03      	subs	r3, #3
 800643e:	e000      	b.n	8006442 <NVIC_EncodePriority+0x32>
 8006440:	2300      	movs	r3, #0
 8006442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006444:	f04f 32ff 	mov.w	r2, #4294967295
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	fa02 f303 	lsl.w	r3, r2, r3
 800644e:	43da      	mvns	r2, r3
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	401a      	ands	r2, r3
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006458:	f04f 31ff 	mov.w	r1, #4294967295
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	fa01 f303 	lsl.w	r3, r1, r3
 8006462:	43d9      	mvns	r1, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006468:	4313      	orrs	r3, r2
         );
}
 800646a:	4618      	mov	r0, r3
 800646c:	3724      	adds	r7, #36	; 0x24
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr
	...

08006478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	3b01      	subs	r3, #1
 8006484:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006488:	d301      	bcc.n	800648e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800648a:	2301      	movs	r3, #1
 800648c:	e00f      	b.n	80064ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800648e:	4a0a      	ldr	r2, [pc, #40]	; (80064b8 <SysTick_Config+0x40>)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	3b01      	subs	r3, #1
 8006494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006496:	210f      	movs	r1, #15
 8006498:	f04f 30ff 	mov.w	r0, #4294967295
 800649c:	f7ff ff8e 	bl	80063bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80064a0:	4b05      	ldr	r3, [pc, #20]	; (80064b8 <SysTick_Config+0x40>)
 80064a2:	2200      	movs	r2, #0
 80064a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80064a6:	4b04      	ldr	r3, [pc, #16]	; (80064b8 <SysTick_Config+0x40>)
 80064a8:	2207      	movs	r2, #7
 80064aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3708      	adds	r7, #8
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	e000e010 	.word	0xe000e010

080064bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f7ff ff29 	bl	800631c <__NVIC_SetPriorityGrouping>
}
 80064ca:	bf00      	nop
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b086      	sub	sp, #24
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	4603      	mov	r3, r0
 80064da:	60b9      	str	r1, [r7, #8]
 80064dc:	607a      	str	r2, [r7, #4]
 80064de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80064e0:	f7ff ff40 	bl	8006364 <__NVIC_GetPriorityGrouping>
 80064e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	68b9      	ldr	r1, [r7, #8]
 80064ea:	6978      	ldr	r0, [r7, #20]
 80064ec:	f7ff ff90 	bl	8006410 <NVIC_EncodePriority>
 80064f0:	4602      	mov	r2, r0
 80064f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80064f6:	4611      	mov	r1, r2
 80064f8:	4618      	mov	r0, r3
 80064fa:	f7ff ff5f 	bl	80063bc <__NVIC_SetPriority>
}
 80064fe:	bf00      	nop
 8006500:	3718      	adds	r7, #24
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006506:	b580      	push	{r7, lr}
 8006508:	b082      	sub	sp, #8
 800650a:	af00      	add	r7, sp, #0
 800650c:	4603      	mov	r3, r0
 800650e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006510:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006514:	4618      	mov	r0, r3
 8006516:	f7ff ff33 	bl	8006380 <__NVIC_EnableIRQ>
}
 800651a:	bf00      	nop
 800651c:	3708      	adds	r7, #8
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b082      	sub	sp, #8
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f7ff ffa4 	bl	8006478 <SysTick_Config>
 8006530:	4603      	mov	r3, r0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
	...

0800653c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006544:	f7fd fee8 	bl	8004318 <HAL_GetTick>
 8006548:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d101      	bne.n	8006554 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e312      	b.n	8006b7a <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a66      	ldr	r2, [pc, #408]	; (80066f4 <HAL_DMA_Init+0x1b8>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d04a      	beq.n	80065f4 <HAL_DMA_Init+0xb8>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a65      	ldr	r2, [pc, #404]	; (80066f8 <HAL_DMA_Init+0x1bc>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d045      	beq.n	80065f4 <HAL_DMA_Init+0xb8>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a63      	ldr	r2, [pc, #396]	; (80066fc <HAL_DMA_Init+0x1c0>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d040      	beq.n	80065f4 <HAL_DMA_Init+0xb8>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a62      	ldr	r2, [pc, #392]	; (8006700 <HAL_DMA_Init+0x1c4>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d03b      	beq.n	80065f4 <HAL_DMA_Init+0xb8>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a60      	ldr	r2, [pc, #384]	; (8006704 <HAL_DMA_Init+0x1c8>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d036      	beq.n	80065f4 <HAL_DMA_Init+0xb8>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a5f      	ldr	r2, [pc, #380]	; (8006708 <HAL_DMA_Init+0x1cc>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d031      	beq.n	80065f4 <HAL_DMA_Init+0xb8>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a5d      	ldr	r2, [pc, #372]	; (800670c <HAL_DMA_Init+0x1d0>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d02c      	beq.n	80065f4 <HAL_DMA_Init+0xb8>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a5c      	ldr	r2, [pc, #368]	; (8006710 <HAL_DMA_Init+0x1d4>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d027      	beq.n	80065f4 <HAL_DMA_Init+0xb8>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a5a      	ldr	r2, [pc, #360]	; (8006714 <HAL_DMA_Init+0x1d8>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d022      	beq.n	80065f4 <HAL_DMA_Init+0xb8>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a59      	ldr	r2, [pc, #356]	; (8006718 <HAL_DMA_Init+0x1dc>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d01d      	beq.n	80065f4 <HAL_DMA_Init+0xb8>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a57      	ldr	r2, [pc, #348]	; (800671c <HAL_DMA_Init+0x1e0>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d018      	beq.n	80065f4 <HAL_DMA_Init+0xb8>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a56      	ldr	r2, [pc, #344]	; (8006720 <HAL_DMA_Init+0x1e4>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d013      	beq.n	80065f4 <HAL_DMA_Init+0xb8>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a54      	ldr	r2, [pc, #336]	; (8006724 <HAL_DMA_Init+0x1e8>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d00e      	beq.n	80065f4 <HAL_DMA_Init+0xb8>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a53      	ldr	r2, [pc, #332]	; (8006728 <HAL_DMA_Init+0x1ec>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d009      	beq.n	80065f4 <HAL_DMA_Init+0xb8>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a51      	ldr	r2, [pc, #324]	; (800672c <HAL_DMA_Init+0x1f0>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d004      	beq.n	80065f4 <HAL_DMA_Init+0xb8>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a50      	ldr	r2, [pc, #320]	; (8006730 <HAL_DMA_Init+0x1f4>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d101      	bne.n	80065f8 <HAL_DMA_Init+0xbc>
 80065f4:	2301      	movs	r3, #1
 80065f6:	e000      	b.n	80065fa <HAL_DMA_Init+0xbe>
 80065f8:	2300      	movs	r3, #0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f000 813c 	beq.w	8006878 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2202      	movs	r2, #2
 8006604:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a37      	ldr	r2, [pc, #220]	; (80066f4 <HAL_DMA_Init+0x1b8>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d04a      	beq.n	80066b0 <HAL_DMA_Init+0x174>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a36      	ldr	r2, [pc, #216]	; (80066f8 <HAL_DMA_Init+0x1bc>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d045      	beq.n	80066b0 <HAL_DMA_Init+0x174>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a34      	ldr	r2, [pc, #208]	; (80066fc <HAL_DMA_Init+0x1c0>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d040      	beq.n	80066b0 <HAL_DMA_Init+0x174>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a33      	ldr	r2, [pc, #204]	; (8006700 <HAL_DMA_Init+0x1c4>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d03b      	beq.n	80066b0 <HAL_DMA_Init+0x174>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a31      	ldr	r2, [pc, #196]	; (8006704 <HAL_DMA_Init+0x1c8>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d036      	beq.n	80066b0 <HAL_DMA_Init+0x174>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a30      	ldr	r2, [pc, #192]	; (8006708 <HAL_DMA_Init+0x1cc>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d031      	beq.n	80066b0 <HAL_DMA_Init+0x174>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a2e      	ldr	r2, [pc, #184]	; (800670c <HAL_DMA_Init+0x1d0>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d02c      	beq.n	80066b0 <HAL_DMA_Init+0x174>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a2d      	ldr	r2, [pc, #180]	; (8006710 <HAL_DMA_Init+0x1d4>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d027      	beq.n	80066b0 <HAL_DMA_Init+0x174>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a2b      	ldr	r2, [pc, #172]	; (8006714 <HAL_DMA_Init+0x1d8>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d022      	beq.n	80066b0 <HAL_DMA_Init+0x174>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a2a      	ldr	r2, [pc, #168]	; (8006718 <HAL_DMA_Init+0x1dc>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d01d      	beq.n	80066b0 <HAL_DMA_Init+0x174>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a28      	ldr	r2, [pc, #160]	; (800671c <HAL_DMA_Init+0x1e0>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d018      	beq.n	80066b0 <HAL_DMA_Init+0x174>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a27      	ldr	r2, [pc, #156]	; (8006720 <HAL_DMA_Init+0x1e4>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d013      	beq.n	80066b0 <HAL_DMA_Init+0x174>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a25      	ldr	r2, [pc, #148]	; (8006724 <HAL_DMA_Init+0x1e8>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d00e      	beq.n	80066b0 <HAL_DMA_Init+0x174>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a24      	ldr	r2, [pc, #144]	; (8006728 <HAL_DMA_Init+0x1ec>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d009      	beq.n	80066b0 <HAL_DMA_Init+0x174>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a22      	ldr	r2, [pc, #136]	; (800672c <HAL_DMA_Init+0x1f0>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d004      	beq.n	80066b0 <HAL_DMA_Init+0x174>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a21      	ldr	r2, [pc, #132]	; (8006730 <HAL_DMA_Init+0x1f4>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d108      	bne.n	80066c2 <HAL_DMA_Init+0x186>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f022 0201 	bic.w	r2, r2, #1
 80066be:	601a      	str	r2, [r3, #0]
 80066c0:	e007      	b.n	80066d2 <HAL_DMA_Init+0x196>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f022 0201 	bic.w	r2, r2, #1
 80066d0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80066d2:	e02f      	b.n	8006734 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80066d4:	f7fd fe20 	bl	8004318 <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	2b05      	cmp	r3, #5
 80066e0:	d928      	bls.n	8006734 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2220      	movs	r2, #32
 80066e6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2203      	movs	r2, #3
 80066ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e242      	b.n	8006b7a <HAL_DMA_Init+0x63e>
 80066f4:	40020010 	.word	0x40020010
 80066f8:	40020028 	.word	0x40020028
 80066fc:	40020040 	.word	0x40020040
 8006700:	40020058 	.word	0x40020058
 8006704:	40020070 	.word	0x40020070
 8006708:	40020088 	.word	0x40020088
 800670c:	400200a0 	.word	0x400200a0
 8006710:	400200b8 	.word	0x400200b8
 8006714:	40020410 	.word	0x40020410
 8006718:	40020428 	.word	0x40020428
 800671c:	40020440 	.word	0x40020440
 8006720:	40020458 	.word	0x40020458
 8006724:	40020470 	.word	0x40020470
 8006728:	40020488 	.word	0x40020488
 800672c:	400204a0 	.word	0x400204a0
 8006730:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1c8      	bne.n	80066d4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800674a:	697a      	ldr	r2, [r7, #20]
 800674c:	4b83      	ldr	r3, [pc, #524]	; (800695c <HAL_DMA_Init+0x420>)
 800674e:	4013      	ands	r3, r2
 8006750:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800675a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006766:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006772:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a1b      	ldr	r3, [r3, #32]
 8006778:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	4313      	orrs	r3, r2
 800677e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006784:	2b04      	cmp	r3, #4
 8006786:	d107      	bne.n	8006798 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006790:	4313      	orrs	r3, r2
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	4313      	orrs	r3, r2
 8006796:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	2b28      	cmp	r3, #40	; 0x28
 800679e:	d903      	bls.n	80067a8 <HAL_DMA_Init+0x26c>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	2b2e      	cmp	r3, #46	; 0x2e
 80067a6:	d91f      	bls.n	80067e8 <HAL_DMA_Init+0x2ac>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	2b3e      	cmp	r3, #62	; 0x3e
 80067ae:	d903      	bls.n	80067b8 <HAL_DMA_Init+0x27c>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	2b42      	cmp	r3, #66	; 0x42
 80067b6:	d917      	bls.n	80067e8 <HAL_DMA_Init+0x2ac>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	2b46      	cmp	r3, #70	; 0x46
 80067be:	d903      	bls.n	80067c8 <HAL_DMA_Init+0x28c>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	2b48      	cmp	r3, #72	; 0x48
 80067c6:	d90f      	bls.n	80067e8 <HAL_DMA_Init+0x2ac>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	2b4e      	cmp	r3, #78	; 0x4e
 80067ce:	d903      	bls.n	80067d8 <HAL_DMA_Init+0x29c>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	2b52      	cmp	r3, #82	; 0x52
 80067d6:	d907      	bls.n	80067e8 <HAL_DMA_Init+0x2ac>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	2b73      	cmp	r3, #115	; 0x73
 80067de:	d905      	bls.n	80067ec <HAL_DMA_Init+0x2b0>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	2b77      	cmp	r3, #119	; 0x77
 80067e6:	d801      	bhi.n	80067ec <HAL_DMA_Init+0x2b0>
 80067e8:	2301      	movs	r3, #1
 80067ea:	e000      	b.n	80067ee <HAL_DMA_Init+0x2b2>
 80067ec:	2300      	movs	r3, #0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d003      	beq.n	80067fa <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067f8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	695b      	ldr	r3, [r3, #20]
 8006808:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	f023 0307 	bic.w	r3, r3, #7
 8006810:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	4313      	orrs	r3, r2
 800681a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006820:	2b04      	cmp	r3, #4
 8006822:	d117      	bne.n	8006854 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006828:	697a      	ldr	r2, [r7, #20]
 800682a:	4313      	orrs	r3, r2
 800682c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00e      	beq.n	8006854 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f001 fdca 	bl	80083d0 <DMA_CheckFifoParam>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d008      	beq.n	8006854 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2240      	movs	r2, #64	; 0x40
 8006846:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e192      	b.n	8006b7a <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	697a      	ldr	r2, [r7, #20]
 800685a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f001 fd05 	bl	800826c <DMA_CalcBaseAndBitshift>
 8006862:	4603      	mov	r3, r0
 8006864:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800686a:	f003 031f 	and.w	r3, r3, #31
 800686e:	223f      	movs	r2, #63	; 0x3f
 8006870:	409a      	lsls	r2, r3
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	609a      	str	r2, [r3, #8]
 8006876:	e0c8      	b.n	8006a0a <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a38      	ldr	r2, [pc, #224]	; (8006960 <HAL_DMA_Init+0x424>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d022      	beq.n	80068c8 <HAL_DMA_Init+0x38c>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a37      	ldr	r2, [pc, #220]	; (8006964 <HAL_DMA_Init+0x428>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d01d      	beq.n	80068c8 <HAL_DMA_Init+0x38c>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a35      	ldr	r2, [pc, #212]	; (8006968 <HAL_DMA_Init+0x42c>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d018      	beq.n	80068c8 <HAL_DMA_Init+0x38c>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a34      	ldr	r2, [pc, #208]	; (800696c <HAL_DMA_Init+0x430>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d013      	beq.n	80068c8 <HAL_DMA_Init+0x38c>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a32      	ldr	r2, [pc, #200]	; (8006970 <HAL_DMA_Init+0x434>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d00e      	beq.n	80068c8 <HAL_DMA_Init+0x38c>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a31      	ldr	r2, [pc, #196]	; (8006974 <HAL_DMA_Init+0x438>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d009      	beq.n	80068c8 <HAL_DMA_Init+0x38c>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a2f      	ldr	r2, [pc, #188]	; (8006978 <HAL_DMA_Init+0x43c>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d004      	beq.n	80068c8 <HAL_DMA_Init+0x38c>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a2e      	ldr	r2, [pc, #184]	; (800697c <HAL_DMA_Init+0x440>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d101      	bne.n	80068cc <HAL_DMA_Init+0x390>
 80068c8:	2301      	movs	r3, #1
 80068ca:	e000      	b.n	80068ce <HAL_DMA_Init+0x392>
 80068cc:	2300      	movs	r3, #0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f000 8092 	beq.w	80069f8 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a21      	ldr	r2, [pc, #132]	; (8006960 <HAL_DMA_Init+0x424>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d021      	beq.n	8006922 <HAL_DMA_Init+0x3e6>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a20      	ldr	r2, [pc, #128]	; (8006964 <HAL_DMA_Init+0x428>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d01c      	beq.n	8006922 <HAL_DMA_Init+0x3e6>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a1e      	ldr	r2, [pc, #120]	; (8006968 <HAL_DMA_Init+0x42c>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d017      	beq.n	8006922 <HAL_DMA_Init+0x3e6>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a1d      	ldr	r2, [pc, #116]	; (800696c <HAL_DMA_Init+0x430>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d012      	beq.n	8006922 <HAL_DMA_Init+0x3e6>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a1b      	ldr	r2, [pc, #108]	; (8006970 <HAL_DMA_Init+0x434>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d00d      	beq.n	8006922 <HAL_DMA_Init+0x3e6>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a1a      	ldr	r2, [pc, #104]	; (8006974 <HAL_DMA_Init+0x438>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d008      	beq.n	8006922 <HAL_DMA_Init+0x3e6>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a18      	ldr	r2, [pc, #96]	; (8006978 <HAL_DMA_Init+0x43c>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d003      	beq.n	8006922 <HAL_DMA_Init+0x3e6>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a17      	ldr	r2, [pc, #92]	; (800697c <HAL_DMA_Init+0x440>)
 8006920:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2202      	movs	r2, #2
 8006926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	4b10      	ldr	r3, [pc, #64]	; (8006980 <HAL_DMA_Init+0x444>)
 800693e:	4013      	ands	r3, r2
 8006940:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	2b40      	cmp	r3, #64	; 0x40
 8006948:	d01c      	beq.n	8006984 <HAL_DMA_Init+0x448>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	2b80      	cmp	r3, #128	; 0x80
 8006950:	d102      	bne.n	8006958 <HAL_DMA_Init+0x41c>
 8006952:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006956:	e016      	b.n	8006986 <HAL_DMA_Init+0x44a>
 8006958:	2300      	movs	r3, #0
 800695a:	e014      	b.n	8006986 <HAL_DMA_Init+0x44a>
 800695c:	fe10803f 	.word	0xfe10803f
 8006960:	58025408 	.word	0x58025408
 8006964:	5802541c 	.word	0x5802541c
 8006968:	58025430 	.word	0x58025430
 800696c:	58025444 	.word	0x58025444
 8006970:	58025458 	.word	0x58025458
 8006974:	5802546c 	.word	0x5802546c
 8006978:	58025480 	.word	0x58025480
 800697c:	58025494 	.word	0x58025494
 8006980:	fffe000f 	.word	0xfffe000f
 8006984:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	68d2      	ldr	r2, [r2, #12]
 800698a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800698c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006994:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800699c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	699b      	ldr	r3, [r3, #24]
 80069a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80069a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	69db      	ldr	r3, [r3, #28]
 80069aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80069ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80069b4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	697a      	ldr	r2, [r7, #20]
 80069c2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	461a      	mov	r2, r3
 80069ca:	4b6e      	ldr	r3, [pc, #440]	; (8006b84 <HAL_DMA_Init+0x648>)
 80069cc:	4413      	add	r3, r2
 80069ce:	4a6e      	ldr	r2, [pc, #440]	; (8006b88 <HAL_DMA_Init+0x64c>)
 80069d0:	fba2 2303 	umull	r2, r3, r2, r3
 80069d4:	091b      	lsrs	r3, r3, #4
 80069d6:	009a      	lsls	r2, r3, #2
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f001 fc45 	bl	800826c <DMA_CalcBaseAndBitshift>
 80069e2:	4603      	mov	r3, r0
 80069e4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ea:	f003 031f 	and.w	r3, r3, #31
 80069ee:	2201      	movs	r2, #1
 80069f0:	409a      	lsls	r2, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	605a      	str	r2, [r3, #4]
 80069f6:	e008      	b.n	8006a0a <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2240      	movs	r2, #64	; 0x40
 80069fc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2203      	movs	r2, #3
 8006a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e0b7      	b.n	8006b7a <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a5f      	ldr	r2, [pc, #380]	; (8006b8c <HAL_DMA_Init+0x650>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d072      	beq.n	8006afa <HAL_DMA_Init+0x5be>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a5d      	ldr	r2, [pc, #372]	; (8006b90 <HAL_DMA_Init+0x654>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d06d      	beq.n	8006afa <HAL_DMA_Init+0x5be>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a5c      	ldr	r2, [pc, #368]	; (8006b94 <HAL_DMA_Init+0x658>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d068      	beq.n	8006afa <HAL_DMA_Init+0x5be>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a5a      	ldr	r2, [pc, #360]	; (8006b98 <HAL_DMA_Init+0x65c>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d063      	beq.n	8006afa <HAL_DMA_Init+0x5be>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a59      	ldr	r2, [pc, #356]	; (8006b9c <HAL_DMA_Init+0x660>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d05e      	beq.n	8006afa <HAL_DMA_Init+0x5be>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a57      	ldr	r2, [pc, #348]	; (8006ba0 <HAL_DMA_Init+0x664>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d059      	beq.n	8006afa <HAL_DMA_Init+0x5be>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a56      	ldr	r2, [pc, #344]	; (8006ba4 <HAL_DMA_Init+0x668>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d054      	beq.n	8006afa <HAL_DMA_Init+0x5be>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a54      	ldr	r2, [pc, #336]	; (8006ba8 <HAL_DMA_Init+0x66c>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d04f      	beq.n	8006afa <HAL_DMA_Init+0x5be>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a53      	ldr	r2, [pc, #332]	; (8006bac <HAL_DMA_Init+0x670>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d04a      	beq.n	8006afa <HAL_DMA_Init+0x5be>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a51      	ldr	r2, [pc, #324]	; (8006bb0 <HAL_DMA_Init+0x674>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d045      	beq.n	8006afa <HAL_DMA_Init+0x5be>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a50      	ldr	r2, [pc, #320]	; (8006bb4 <HAL_DMA_Init+0x678>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d040      	beq.n	8006afa <HAL_DMA_Init+0x5be>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a4e      	ldr	r2, [pc, #312]	; (8006bb8 <HAL_DMA_Init+0x67c>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d03b      	beq.n	8006afa <HAL_DMA_Init+0x5be>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a4d      	ldr	r2, [pc, #308]	; (8006bbc <HAL_DMA_Init+0x680>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d036      	beq.n	8006afa <HAL_DMA_Init+0x5be>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a4b      	ldr	r2, [pc, #300]	; (8006bc0 <HAL_DMA_Init+0x684>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d031      	beq.n	8006afa <HAL_DMA_Init+0x5be>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a4a      	ldr	r2, [pc, #296]	; (8006bc4 <HAL_DMA_Init+0x688>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d02c      	beq.n	8006afa <HAL_DMA_Init+0x5be>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a48      	ldr	r2, [pc, #288]	; (8006bc8 <HAL_DMA_Init+0x68c>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d027      	beq.n	8006afa <HAL_DMA_Init+0x5be>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a47      	ldr	r2, [pc, #284]	; (8006bcc <HAL_DMA_Init+0x690>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d022      	beq.n	8006afa <HAL_DMA_Init+0x5be>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a45      	ldr	r2, [pc, #276]	; (8006bd0 <HAL_DMA_Init+0x694>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d01d      	beq.n	8006afa <HAL_DMA_Init+0x5be>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a44      	ldr	r2, [pc, #272]	; (8006bd4 <HAL_DMA_Init+0x698>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d018      	beq.n	8006afa <HAL_DMA_Init+0x5be>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a42      	ldr	r2, [pc, #264]	; (8006bd8 <HAL_DMA_Init+0x69c>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d013      	beq.n	8006afa <HAL_DMA_Init+0x5be>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a41      	ldr	r2, [pc, #260]	; (8006bdc <HAL_DMA_Init+0x6a0>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d00e      	beq.n	8006afa <HAL_DMA_Init+0x5be>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a3f      	ldr	r2, [pc, #252]	; (8006be0 <HAL_DMA_Init+0x6a4>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d009      	beq.n	8006afa <HAL_DMA_Init+0x5be>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a3e      	ldr	r2, [pc, #248]	; (8006be4 <HAL_DMA_Init+0x6a8>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d004      	beq.n	8006afa <HAL_DMA_Init+0x5be>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a3c      	ldr	r2, [pc, #240]	; (8006be8 <HAL_DMA_Init+0x6ac>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d101      	bne.n	8006afe <HAL_DMA_Init+0x5c2>
 8006afa:	2301      	movs	r3, #1
 8006afc:	e000      	b.n	8006b00 <HAL_DMA_Init+0x5c4>
 8006afe:	2300      	movs	r3, #0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d032      	beq.n	8006b6a <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f001 fcdf 	bl	80084c8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	2b80      	cmp	r3, #128	; 0x80
 8006b10:	d102      	bne.n	8006b18 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685a      	ldr	r2, [r3, #4]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b20:	b2d2      	uxtb	r2, r2
 8006b22:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006b2c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d010      	beq.n	8006b58 <HAL_DMA_Init+0x61c>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	2b08      	cmp	r3, #8
 8006b3c:	d80c      	bhi.n	8006b58 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f001 fd5c 	bl	80085fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b48:	2200      	movs	r2, #0
 8006b4a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006b54:	605a      	str	r2, [r3, #4]
 8006b56:	e008      	b.n	8006b6a <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3718      	adds	r7, #24
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	a7fdabf8 	.word	0xa7fdabf8
 8006b88:	cccccccd 	.word	0xcccccccd
 8006b8c:	40020010 	.word	0x40020010
 8006b90:	40020028 	.word	0x40020028
 8006b94:	40020040 	.word	0x40020040
 8006b98:	40020058 	.word	0x40020058
 8006b9c:	40020070 	.word	0x40020070
 8006ba0:	40020088 	.word	0x40020088
 8006ba4:	400200a0 	.word	0x400200a0
 8006ba8:	400200b8 	.word	0x400200b8
 8006bac:	40020410 	.word	0x40020410
 8006bb0:	40020428 	.word	0x40020428
 8006bb4:	40020440 	.word	0x40020440
 8006bb8:	40020458 	.word	0x40020458
 8006bbc:	40020470 	.word	0x40020470
 8006bc0:	40020488 	.word	0x40020488
 8006bc4:	400204a0 	.word	0x400204a0
 8006bc8:	400204b8 	.word	0x400204b8
 8006bcc:	58025408 	.word	0x58025408
 8006bd0:	5802541c 	.word	0x5802541c
 8006bd4:	58025430 	.word	0x58025430
 8006bd8:	58025444 	.word	0x58025444
 8006bdc:	58025458 	.word	0x58025458
 8006be0:	5802546c 	.word	0x5802546c
 8006be4:	58025480 	.word	0x58025480
 8006be8:	58025494 	.word	0x58025494

08006bec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b086      	sub	sp, #24
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	607a      	str	r2, [r7, #4]
 8006bf8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d101      	bne.n	8006c08 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e226      	b.n	8007056 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d101      	bne.n	8006c16 <HAL_DMA_Start_IT+0x2a>
 8006c12:	2302      	movs	r3, #2
 8006c14:	e21f      	b.n	8007056 <HAL_DMA_Start_IT+0x46a>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	f040 820a 	bne.w	8007040 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2202      	movs	r2, #2
 8006c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a68      	ldr	r2, [pc, #416]	; (8006de0 <HAL_DMA_Start_IT+0x1f4>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d04a      	beq.n	8006cda <HAL_DMA_Start_IT+0xee>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a66      	ldr	r2, [pc, #408]	; (8006de4 <HAL_DMA_Start_IT+0x1f8>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d045      	beq.n	8006cda <HAL_DMA_Start_IT+0xee>
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a65      	ldr	r2, [pc, #404]	; (8006de8 <HAL_DMA_Start_IT+0x1fc>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d040      	beq.n	8006cda <HAL_DMA_Start_IT+0xee>
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a63      	ldr	r2, [pc, #396]	; (8006dec <HAL_DMA_Start_IT+0x200>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d03b      	beq.n	8006cda <HAL_DMA_Start_IT+0xee>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a62      	ldr	r2, [pc, #392]	; (8006df0 <HAL_DMA_Start_IT+0x204>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d036      	beq.n	8006cda <HAL_DMA_Start_IT+0xee>
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a60      	ldr	r2, [pc, #384]	; (8006df4 <HAL_DMA_Start_IT+0x208>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d031      	beq.n	8006cda <HAL_DMA_Start_IT+0xee>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a5f      	ldr	r2, [pc, #380]	; (8006df8 <HAL_DMA_Start_IT+0x20c>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d02c      	beq.n	8006cda <HAL_DMA_Start_IT+0xee>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a5d      	ldr	r2, [pc, #372]	; (8006dfc <HAL_DMA_Start_IT+0x210>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d027      	beq.n	8006cda <HAL_DMA_Start_IT+0xee>
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a5c      	ldr	r2, [pc, #368]	; (8006e00 <HAL_DMA_Start_IT+0x214>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d022      	beq.n	8006cda <HAL_DMA_Start_IT+0xee>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a5a      	ldr	r2, [pc, #360]	; (8006e04 <HAL_DMA_Start_IT+0x218>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d01d      	beq.n	8006cda <HAL_DMA_Start_IT+0xee>
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a59      	ldr	r2, [pc, #356]	; (8006e08 <HAL_DMA_Start_IT+0x21c>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d018      	beq.n	8006cda <HAL_DMA_Start_IT+0xee>
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a57      	ldr	r2, [pc, #348]	; (8006e0c <HAL_DMA_Start_IT+0x220>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d013      	beq.n	8006cda <HAL_DMA_Start_IT+0xee>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a56      	ldr	r2, [pc, #344]	; (8006e10 <HAL_DMA_Start_IT+0x224>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d00e      	beq.n	8006cda <HAL_DMA_Start_IT+0xee>
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a54      	ldr	r2, [pc, #336]	; (8006e14 <HAL_DMA_Start_IT+0x228>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d009      	beq.n	8006cda <HAL_DMA_Start_IT+0xee>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a53      	ldr	r2, [pc, #332]	; (8006e18 <HAL_DMA_Start_IT+0x22c>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d004      	beq.n	8006cda <HAL_DMA_Start_IT+0xee>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a51      	ldr	r2, [pc, #324]	; (8006e1c <HAL_DMA_Start_IT+0x230>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d108      	bne.n	8006cec <HAL_DMA_Start_IT+0x100>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f022 0201 	bic.w	r2, r2, #1
 8006ce8:	601a      	str	r2, [r3, #0]
 8006cea:	e007      	b.n	8006cfc <HAL_DMA_Start_IT+0x110>
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f022 0201 	bic.w	r2, r2, #1
 8006cfa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	68b9      	ldr	r1, [r7, #8]
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f001 f906 	bl	8007f14 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a34      	ldr	r2, [pc, #208]	; (8006de0 <HAL_DMA_Start_IT+0x1f4>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d04a      	beq.n	8006da8 <HAL_DMA_Start_IT+0x1bc>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a33      	ldr	r2, [pc, #204]	; (8006de4 <HAL_DMA_Start_IT+0x1f8>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d045      	beq.n	8006da8 <HAL_DMA_Start_IT+0x1bc>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a31      	ldr	r2, [pc, #196]	; (8006de8 <HAL_DMA_Start_IT+0x1fc>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d040      	beq.n	8006da8 <HAL_DMA_Start_IT+0x1bc>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a30      	ldr	r2, [pc, #192]	; (8006dec <HAL_DMA_Start_IT+0x200>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d03b      	beq.n	8006da8 <HAL_DMA_Start_IT+0x1bc>
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a2e      	ldr	r2, [pc, #184]	; (8006df0 <HAL_DMA_Start_IT+0x204>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d036      	beq.n	8006da8 <HAL_DMA_Start_IT+0x1bc>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a2d      	ldr	r2, [pc, #180]	; (8006df4 <HAL_DMA_Start_IT+0x208>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d031      	beq.n	8006da8 <HAL_DMA_Start_IT+0x1bc>
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a2b      	ldr	r2, [pc, #172]	; (8006df8 <HAL_DMA_Start_IT+0x20c>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d02c      	beq.n	8006da8 <HAL_DMA_Start_IT+0x1bc>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a2a      	ldr	r2, [pc, #168]	; (8006dfc <HAL_DMA_Start_IT+0x210>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d027      	beq.n	8006da8 <HAL_DMA_Start_IT+0x1bc>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a28      	ldr	r2, [pc, #160]	; (8006e00 <HAL_DMA_Start_IT+0x214>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d022      	beq.n	8006da8 <HAL_DMA_Start_IT+0x1bc>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a27      	ldr	r2, [pc, #156]	; (8006e04 <HAL_DMA_Start_IT+0x218>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d01d      	beq.n	8006da8 <HAL_DMA_Start_IT+0x1bc>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a25      	ldr	r2, [pc, #148]	; (8006e08 <HAL_DMA_Start_IT+0x21c>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d018      	beq.n	8006da8 <HAL_DMA_Start_IT+0x1bc>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a24      	ldr	r2, [pc, #144]	; (8006e0c <HAL_DMA_Start_IT+0x220>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d013      	beq.n	8006da8 <HAL_DMA_Start_IT+0x1bc>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a22      	ldr	r2, [pc, #136]	; (8006e10 <HAL_DMA_Start_IT+0x224>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d00e      	beq.n	8006da8 <HAL_DMA_Start_IT+0x1bc>
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a21      	ldr	r2, [pc, #132]	; (8006e14 <HAL_DMA_Start_IT+0x228>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d009      	beq.n	8006da8 <HAL_DMA_Start_IT+0x1bc>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a1f      	ldr	r2, [pc, #124]	; (8006e18 <HAL_DMA_Start_IT+0x22c>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d004      	beq.n	8006da8 <HAL_DMA_Start_IT+0x1bc>
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a1e      	ldr	r2, [pc, #120]	; (8006e1c <HAL_DMA_Start_IT+0x230>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d101      	bne.n	8006dac <HAL_DMA_Start_IT+0x1c0>
 8006da8:	2301      	movs	r3, #1
 8006daa:	e000      	b.n	8006dae <HAL_DMA_Start_IT+0x1c2>
 8006dac:	2300      	movs	r3, #0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d036      	beq.n	8006e20 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f023 021e 	bic.w	r2, r3, #30
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f042 0216 	orr.w	r2, r2, #22
 8006dc4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d03e      	beq.n	8006e4c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f042 0208 	orr.w	r2, r2, #8
 8006ddc:	601a      	str	r2, [r3, #0]
 8006dde:	e035      	b.n	8006e4c <HAL_DMA_Start_IT+0x260>
 8006de0:	40020010 	.word	0x40020010
 8006de4:	40020028 	.word	0x40020028
 8006de8:	40020040 	.word	0x40020040
 8006dec:	40020058 	.word	0x40020058
 8006df0:	40020070 	.word	0x40020070
 8006df4:	40020088 	.word	0x40020088
 8006df8:	400200a0 	.word	0x400200a0
 8006dfc:	400200b8 	.word	0x400200b8
 8006e00:	40020410 	.word	0x40020410
 8006e04:	40020428 	.word	0x40020428
 8006e08:	40020440 	.word	0x40020440
 8006e0c:	40020458 	.word	0x40020458
 8006e10:	40020470 	.word	0x40020470
 8006e14:	40020488 	.word	0x40020488
 8006e18:	400204a0 	.word	0x400204a0
 8006e1c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f023 020e 	bic.w	r2, r3, #14
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f042 020a 	orr.w	r2, r2, #10
 8006e32:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d007      	beq.n	8006e4c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f042 0204 	orr.w	r2, r2, #4
 8006e4a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a83      	ldr	r2, [pc, #524]	; (8007060 <HAL_DMA_Start_IT+0x474>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d072      	beq.n	8006f3c <HAL_DMA_Start_IT+0x350>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a82      	ldr	r2, [pc, #520]	; (8007064 <HAL_DMA_Start_IT+0x478>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d06d      	beq.n	8006f3c <HAL_DMA_Start_IT+0x350>
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a80      	ldr	r2, [pc, #512]	; (8007068 <HAL_DMA_Start_IT+0x47c>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d068      	beq.n	8006f3c <HAL_DMA_Start_IT+0x350>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a7f      	ldr	r2, [pc, #508]	; (800706c <HAL_DMA_Start_IT+0x480>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d063      	beq.n	8006f3c <HAL_DMA_Start_IT+0x350>
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a7d      	ldr	r2, [pc, #500]	; (8007070 <HAL_DMA_Start_IT+0x484>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d05e      	beq.n	8006f3c <HAL_DMA_Start_IT+0x350>
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a7c      	ldr	r2, [pc, #496]	; (8007074 <HAL_DMA_Start_IT+0x488>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d059      	beq.n	8006f3c <HAL_DMA_Start_IT+0x350>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a7a      	ldr	r2, [pc, #488]	; (8007078 <HAL_DMA_Start_IT+0x48c>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d054      	beq.n	8006f3c <HAL_DMA_Start_IT+0x350>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a79      	ldr	r2, [pc, #484]	; (800707c <HAL_DMA_Start_IT+0x490>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d04f      	beq.n	8006f3c <HAL_DMA_Start_IT+0x350>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a77      	ldr	r2, [pc, #476]	; (8007080 <HAL_DMA_Start_IT+0x494>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d04a      	beq.n	8006f3c <HAL_DMA_Start_IT+0x350>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a76      	ldr	r2, [pc, #472]	; (8007084 <HAL_DMA_Start_IT+0x498>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d045      	beq.n	8006f3c <HAL_DMA_Start_IT+0x350>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a74      	ldr	r2, [pc, #464]	; (8007088 <HAL_DMA_Start_IT+0x49c>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d040      	beq.n	8006f3c <HAL_DMA_Start_IT+0x350>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a73      	ldr	r2, [pc, #460]	; (800708c <HAL_DMA_Start_IT+0x4a0>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d03b      	beq.n	8006f3c <HAL_DMA_Start_IT+0x350>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a71      	ldr	r2, [pc, #452]	; (8007090 <HAL_DMA_Start_IT+0x4a4>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d036      	beq.n	8006f3c <HAL_DMA_Start_IT+0x350>
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a70      	ldr	r2, [pc, #448]	; (8007094 <HAL_DMA_Start_IT+0x4a8>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d031      	beq.n	8006f3c <HAL_DMA_Start_IT+0x350>
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a6e      	ldr	r2, [pc, #440]	; (8007098 <HAL_DMA_Start_IT+0x4ac>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d02c      	beq.n	8006f3c <HAL_DMA_Start_IT+0x350>
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a6d      	ldr	r2, [pc, #436]	; (800709c <HAL_DMA_Start_IT+0x4b0>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d027      	beq.n	8006f3c <HAL_DMA_Start_IT+0x350>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a6b      	ldr	r2, [pc, #428]	; (80070a0 <HAL_DMA_Start_IT+0x4b4>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d022      	beq.n	8006f3c <HAL_DMA_Start_IT+0x350>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a6a      	ldr	r2, [pc, #424]	; (80070a4 <HAL_DMA_Start_IT+0x4b8>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d01d      	beq.n	8006f3c <HAL_DMA_Start_IT+0x350>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a68      	ldr	r2, [pc, #416]	; (80070a8 <HAL_DMA_Start_IT+0x4bc>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d018      	beq.n	8006f3c <HAL_DMA_Start_IT+0x350>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a67      	ldr	r2, [pc, #412]	; (80070ac <HAL_DMA_Start_IT+0x4c0>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d013      	beq.n	8006f3c <HAL_DMA_Start_IT+0x350>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a65      	ldr	r2, [pc, #404]	; (80070b0 <HAL_DMA_Start_IT+0x4c4>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d00e      	beq.n	8006f3c <HAL_DMA_Start_IT+0x350>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a64      	ldr	r2, [pc, #400]	; (80070b4 <HAL_DMA_Start_IT+0x4c8>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d009      	beq.n	8006f3c <HAL_DMA_Start_IT+0x350>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a62      	ldr	r2, [pc, #392]	; (80070b8 <HAL_DMA_Start_IT+0x4cc>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d004      	beq.n	8006f3c <HAL_DMA_Start_IT+0x350>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a61      	ldr	r2, [pc, #388]	; (80070bc <HAL_DMA_Start_IT+0x4d0>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d101      	bne.n	8006f40 <HAL_DMA_Start_IT+0x354>
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e000      	b.n	8006f42 <HAL_DMA_Start_IT+0x356>
 8006f40:	2300      	movs	r3, #0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d01a      	beq.n	8006f7c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d007      	beq.n	8006f64 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f62:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d007      	beq.n	8006f7c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f7a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a37      	ldr	r2, [pc, #220]	; (8007060 <HAL_DMA_Start_IT+0x474>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d04a      	beq.n	800701c <HAL_DMA_Start_IT+0x430>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a36      	ldr	r2, [pc, #216]	; (8007064 <HAL_DMA_Start_IT+0x478>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d045      	beq.n	800701c <HAL_DMA_Start_IT+0x430>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a34      	ldr	r2, [pc, #208]	; (8007068 <HAL_DMA_Start_IT+0x47c>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d040      	beq.n	800701c <HAL_DMA_Start_IT+0x430>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a33      	ldr	r2, [pc, #204]	; (800706c <HAL_DMA_Start_IT+0x480>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d03b      	beq.n	800701c <HAL_DMA_Start_IT+0x430>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a31      	ldr	r2, [pc, #196]	; (8007070 <HAL_DMA_Start_IT+0x484>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d036      	beq.n	800701c <HAL_DMA_Start_IT+0x430>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a30      	ldr	r2, [pc, #192]	; (8007074 <HAL_DMA_Start_IT+0x488>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d031      	beq.n	800701c <HAL_DMA_Start_IT+0x430>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a2e      	ldr	r2, [pc, #184]	; (8007078 <HAL_DMA_Start_IT+0x48c>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d02c      	beq.n	800701c <HAL_DMA_Start_IT+0x430>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a2d      	ldr	r2, [pc, #180]	; (800707c <HAL_DMA_Start_IT+0x490>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d027      	beq.n	800701c <HAL_DMA_Start_IT+0x430>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a2b      	ldr	r2, [pc, #172]	; (8007080 <HAL_DMA_Start_IT+0x494>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d022      	beq.n	800701c <HAL_DMA_Start_IT+0x430>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a2a      	ldr	r2, [pc, #168]	; (8007084 <HAL_DMA_Start_IT+0x498>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d01d      	beq.n	800701c <HAL_DMA_Start_IT+0x430>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a28      	ldr	r2, [pc, #160]	; (8007088 <HAL_DMA_Start_IT+0x49c>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d018      	beq.n	800701c <HAL_DMA_Start_IT+0x430>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a27      	ldr	r2, [pc, #156]	; (800708c <HAL_DMA_Start_IT+0x4a0>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d013      	beq.n	800701c <HAL_DMA_Start_IT+0x430>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a25      	ldr	r2, [pc, #148]	; (8007090 <HAL_DMA_Start_IT+0x4a4>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d00e      	beq.n	800701c <HAL_DMA_Start_IT+0x430>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a24      	ldr	r2, [pc, #144]	; (8007094 <HAL_DMA_Start_IT+0x4a8>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d009      	beq.n	800701c <HAL_DMA_Start_IT+0x430>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a22      	ldr	r2, [pc, #136]	; (8007098 <HAL_DMA_Start_IT+0x4ac>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d004      	beq.n	800701c <HAL_DMA_Start_IT+0x430>
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a21      	ldr	r2, [pc, #132]	; (800709c <HAL_DMA_Start_IT+0x4b0>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d108      	bne.n	800702e <HAL_DMA_Start_IT+0x442>
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f042 0201 	orr.w	r2, r2, #1
 800702a:	601a      	str	r2, [r3, #0]
 800702c:	e012      	b.n	8007054 <HAL_DMA_Start_IT+0x468>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f042 0201 	orr.w	r2, r2, #1
 800703c:	601a      	str	r2, [r3, #0]
 800703e:	e009      	b.n	8007054 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007046:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2200      	movs	r2, #0
 800704c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007054:	7dfb      	ldrb	r3, [r7, #23]
}
 8007056:	4618      	mov	r0, r3
 8007058:	3718      	adds	r7, #24
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	40020010 	.word	0x40020010
 8007064:	40020028 	.word	0x40020028
 8007068:	40020040 	.word	0x40020040
 800706c:	40020058 	.word	0x40020058
 8007070:	40020070 	.word	0x40020070
 8007074:	40020088 	.word	0x40020088
 8007078:	400200a0 	.word	0x400200a0
 800707c:	400200b8 	.word	0x400200b8
 8007080:	40020410 	.word	0x40020410
 8007084:	40020428 	.word	0x40020428
 8007088:	40020440 	.word	0x40020440
 800708c:	40020458 	.word	0x40020458
 8007090:	40020470 	.word	0x40020470
 8007094:	40020488 	.word	0x40020488
 8007098:	400204a0 	.word	0x400204a0
 800709c:	400204b8 	.word	0x400204b8
 80070a0:	58025408 	.word	0x58025408
 80070a4:	5802541c 	.word	0x5802541c
 80070a8:	58025430 	.word	0x58025430
 80070ac:	58025444 	.word	0x58025444
 80070b0:	58025458 	.word	0x58025458
 80070b4:	5802546c 	.word	0x5802546c
 80070b8:	58025480 	.word	0x58025480
 80070bc:	58025494 	.word	0x58025494

080070c0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b08a      	sub	sp, #40	; 0x28
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80070c8:	2300      	movs	r3, #0
 80070ca:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80070cc:	4b67      	ldr	r3, [pc, #412]	; (800726c <HAL_DMA_IRQHandler+0x1ac>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a67      	ldr	r2, [pc, #412]	; (8007270 <HAL_DMA_IRQHandler+0x1b0>)
 80070d2:	fba2 2303 	umull	r2, r3, r2, r3
 80070d6:	0a9b      	lsrs	r3, r3, #10
 80070d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070de:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070e4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80070e6:	6a3b      	ldr	r3, [r7, #32]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a5f      	ldr	r2, [pc, #380]	; (8007274 <HAL_DMA_IRQHandler+0x1b4>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d04a      	beq.n	8007192 <HAL_DMA_IRQHandler+0xd2>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a5d      	ldr	r2, [pc, #372]	; (8007278 <HAL_DMA_IRQHandler+0x1b8>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d045      	beq.n	8007192 <HAL_DMA_IRQHandler+0xd2>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a5c      	ldr	r2, [pc, #368]	; (800727c <HAL_DMA_IRQHandler+0x1bc>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d040      	beq.n	8007192 <HAL_DMA_IRQHandler+0xd2>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a5a      	ldr	r2, [pc, #360]	; (8007280 <HAL_DMA_IRQHandler+0x1c0>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d03b      	beq.n	8007192 <HAL_DMA_IRQHandler+0xd2>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a59      	ldr	r2, [pc, #356]	; (8007284 <HAL_DMA_IRQHandler+0x1c4>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d036      	beq.n	8007192 <HAL_DMA_IRQHandler+0xd2>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a57      	ldr	r2, [pc, #348]	; (8007288 <HAL_DMA_IRQHandler+0x1c8>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d031      	beq.n	8007192 <HAL_DMA_IRQHandler+0xd2>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a56      	ldr	r2, [pc, #344]	; (800728c <HAL_DMA_IRQHandler+0x1cc>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d02c      	beq.n	8007192 <HAL_DMA_IRQHandler+0xd2>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a54      	ldr	r2, [pc, #336]	; (8007290 <HAL_DMA_IRQHandler+0x1d0>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d027      	beq.n	8007192 <HAL_DMA_IRQHandler+0xd2>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a53      	ldr	r2, [pc, #332]	; (8007294 <HAL_DMA_IRQHandler+0x1d4>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d022      	beq.n	8007192 <HAL_DMA_IRQHandler+0xd2>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a51      	ldr	r2, [pc, #324]	; (8007298 <HAL_DMA_IRQHandler+0x1d8>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d01d      	beq.n	8007192 <HAL_DMA_IRQHandler+0xd2>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a50      	ldr	r2, [pc, #320]	; (800729c <HAL_DMA_IRQHandler+0x1dc>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d018      	beq.n	8007192 <HAL_DMA_IRQHandler+0xd2>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a4e      	ldr	r2, [pc, #312]	; (80072a0 <HAL_DMA_IRQHandler+0x1e0>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d013      	beq.n	8007192 <HAL_DMA_IRQHandler+0xd2>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a4d      	ldr	r2, [pc, #308]	; (80072a4 <HAL_DMA_IRQHandler+0x1e4>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d00e      	beq.n	8007192 <HAL_DMA_IRQHandler+0xd2>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a4b      	ldr	r2, [pc, #300]	; (80072a8 <HAL_DMA_IRQHandler+0x1e8>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d009      	beq.n	8007192 <HAL_DMA_IRQHandler+0xd2>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a4a      	ldr	r2, [pc, #296]	; (80072ac <HAL_DMA_IRQHandler+0x1ec>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d004      	beq.n	8007192 <HAL_DMA_IRQHandler+0xd2>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a48      	ldr	r2, [pc, #288]	; (80072b0 <HAL_DMA_IRQHandler+0x1f0>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d101      	bne.n	8007196 <HAL_DMA_IRQHandler+0xd6>
 8007192:	2301      	movs	r3, #1
 8007194:	e000      	b.n	8007198 <HAL_DMA_IRQHandler+0xd8>
 8007196:	2300      	movs	r3, #0
 8007198:	2b00      	cmp	r3, #0
 800719a:	f000 842b 	beq.w	80079f4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071a2:	f003 031f 	and.w	r3, r3, #31
 80071a6:	2208      	movs	r2, #8
 80071a8:	409a      	lsls	r2, r3
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	4013      	ands	r3, r2
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	f000 80a2 	beq.w	80072f8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a2e      	ldr	r2, [pc, #184]	; (8007274 <HAL_DMA_IRQHandler+0x1b4>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d04a      	beq.n	8007254 <HAL_DMA_IRQHandler+0x194>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a2d      	ldr	r2, [pc, #180]	; (8007278 <HAL_DMA_IRQHandler+0x1b8>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d045      	beq.n	8007254 <HAL_DMA_IRQHandler+0x194>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a2b      	ldr	r2, [pc, #172]	; (800727c <HAL_DMA_IRQHandler+0x1bc>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d040      	beq.n	8007254 <HAL_DMA_IRQHandler+0x194>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a2a      	ldr	r2, [pc, #168]	; (8007280 <HAL_DMA_IRQHandler+0x1c0>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d03b      	beq.n	8007254 <HAL_DMA_IRQHandler+0x194>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a28      	ldr	r2, [pc, #160]	; (8007284 <HAL_DMA_IRQHandler+0x1c4>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d036      	beq.n	8007254 <HAL_DMA_IRQHandler+0x194>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a27      	ldr	r2, [pc, #156]	; (8007288 <HAL_DMA_IRQHandler+0x1c8>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d031      	beq.n	8007254 <HAL_DMA_IRQHandler+0x194>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a25      	ldr	r2, [pc, #148]	; (800728c <HAL_DMA_IRQHandler+0x1cc>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d02c      	beq.n	8007254 <HAL_DMA_IRQHandler+0x194>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a24      	ldr	r2, [pc, #144]	; (8007290 <HAL_DMA_IRQHandler+0x1d0>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d027      	beq.n	8007254 <HAL_DMA_IRQHandler+0x194>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a22      	ldr	r2, [pc, #136]	; (8007294 <HAL_DMA_IRQHandler+0x1d4>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d022      	beq.n	8007254 <HAL_DMA_IRQHandler+0x194>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a21      	ldr	r2, [pc, #132]	; (8007298 <HAL_DMA_IRQHandler+0x1d8>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d01d      	beq.n	8007254 <HAL_DMA_IRQHandler+0x194>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a1f      	ldr	r2, [pc, #124]	; (800729c <HAL_DMA_IRQHandler+0x1dc>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d018      	beq.n	8007254 <HAL_DMA_IRQHandler+0x194>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a1e      	ldr	r2, [pc, #120]	; (80072a0 <HAL_DMA_IRQHandler+0x1e0>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d013      	beq.n	8007254 <HAL_DMA_IRQHandler+0x194>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a1c      	ldr	r2, [pc, #112]	; (80072a4 <HAL_DMA_IRQHandler+0x1e4>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d00e      	beq.n	8007254 <HAL_DMA_IRQHandler+0x194>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a1b      	ldr	r2, [pc, #108]	; (80072a8 <HAL_DMA_IRQHandler+0x1e8>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d009      	beq.n	8007254 <HAL_DMA_IRQHandler+0x194>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a19      	ldr	r2, [pc, #100]	; (80072ac <HAL_DMA_IRQHandler+0x1ec>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d004      	beq.n	8007254 <HAL_DMA_IRQHandler+0x194>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a18      	ldr	r2, [pc, #96]	; (80072b0 <HAL_DMA_IRQHandler+0x1f0>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d12f      	bne.n	80072b4 <HAL_DMA_IRQHandler+0x1f4>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f003 0304 	and.w	r3, r3, #4
 800725e:	2b00      	cmp	r3, #0
 8007260:	bf14      	ite	ne
 8007262:	2301      	movne	r3, #1
 8007264:	2300      	moveq	r3, #0
 8007266:	b2db      	uxtb	r3, r3
 8007268:	e02e      	b.n	80072c8 <HAL_DMA_IRQHandler+0x208>
 800726a:	bf00      	nop
 800726c:	24000000 	.word	0x24000000
 8007270:	1b4e81b5 	.word	0x1b4e81b5
 8007274:	40020010 	.word	0x40020010
 8007278:	40020028 	.word	0x40020028
 800727c:	40020040 	.word	0x40020040
 8007280:	40020058 	.word	0x40020058
 8007284:	40020070 	.word	0x40020070
 8007288:	40020088 	.word	0x40020088
 800728c:	400200a0 	.word	0x400200a0
 8007290:	400200b8 	.word	0x400200b8
 8007294:	40020410 	.word	0x40020410
 8007298:	40020428 	.word	0x40020428
 800729c:	40020440 	.word	0x40020440
 80072a0:	40020458 	.word	0x40020458
 80072a4:	40020470 	.word	0x40020470
 80072a8:	40020488 	.word	0x40020488
 80072ac:	400204a0 	.word	0x400204a0
 80072b0:	400204b8 	.word	0x400204b8
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 0308 	and.w	r3, r3, #8
 80072be:	2b00      	cmp	r3, #0
 80072c0:	bf14      	ite	ne
 80072c2:	2301      	movne	r3, #1
 80072c4:	2300      	moveq	r3, #0
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d015      	beq.n	80072f8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f022 0204 	bic.w	r2, r2, #4
 80072da:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072e0:	f003 031f 	and.w	r3, r3, #31
 80072e4:	2208      	movs	r2, #8
 80072e6:	409a      	lsls	r2, r3
 80072e8:	6a3b      	ldr	r3, [r7, #32]
 80072ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072f0:	f043 0201 	orr.w	r2, r3, #1
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072fc:	f003 031f 	and.w	r3, r3, #31
 8007300:	69ba      	ldr	r2, [r7, #24]
 8007302:	fa22 f303 	lsr.w	r3, r2, r3
 8007306:	f003 0301 	and.w	r3, r3, #1
 800730a:	2b00      	cmp	r3, #0
 800730c:	d06e      	beq.n	80073ec <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a69      	ldr	r2, [pc, #420]	; (80074b8 <HAL_DMA_IRQHandler+0x3f8>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d04a      	beq.n	80073ae <HAL_DMA_IRQHandler+0x2ee>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a67      	ldr	r2, [pc, #412]	; (80074bc <HAL_DMA_IRQHandler+0x3fc>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d045      	beq.n	80073ae <HAL_DMA_IRQHandler+0x2ee>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a66      	ldr	r2, [pc, #408]	; (80074c0 <HAL_DMA_IRQHandler+0x400>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d040      	beq.n	80073ae <HAL_DMA_IRQHandler+0x2ee>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a64      	ldr	r2, [pc, #400]	; (80074c4 <HAL_DMA_IRQHandler+0x404>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d03b      	beq.n	80073ae <HAL_DMA_IRQHandler+0x2ee>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a63      	ldr	r2, [pc, #396]	; (80074c8 <HAL_DMA_IRQHandler+0x408>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d036      	beq.n	80073ae <HAL_DMA_IRQHandler+0x2ee>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a61      	ldr	r2, [pc, #388]	; (80074cc <HAL_DMA_IRQHandler+0x40c>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d031      	beq.n	80073ae <HAL_DMA_IRQHandler+0x2ee>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a60      	ldr	r2, [pc, #384]	; (80074d0 <HAL_DMA_IRQHandler+0x410>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d02c      	beq.n	80073ae <HAL_DMA_IRQHandler+0x2ee>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a5e      	ldr	r2, [pc, #376]	; (80074d4 <HAL_DMA_IRQHandler+0x414>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d027      	beq.n	80073ae <HAL_DMA_IRQHandler+0x2ee>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a5d      	ldr	r2, [pc, #372]	; (80074d8 <HAL_DMA_IRQHandler+0x418>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d022      	beq.n	80073ae <HAL_DMA_IRQHandler+0x2ee>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a5b      	ldr	r2, [pc, #364]	; (80074dc <HAL_DMA_IRQHandler+0x41c>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d01d      	beq.n	80073ae <HAL_DMA_IRQHandler+0x2ee>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a5a      	ldr	r2, [pc, #360]	; (80074e0 <HAL_DMA_IRQHandler+0x420>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d018      	beq.n	80073ae <HAL_DMA_IRQHandler+0x2ee>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a58      	ldr	r2, [pc, #352]	; (80074e4 <HAL_DMA_IRQHandler+0x424>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d013      	beq.n	80073ae <HAL_DMA_IRQHandler+0x2ee>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a57      	ldr	r2, [pc, #348]	; (80074e8 <HAL_DMA_IRQHandler+0x428>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d00e      	beq.n	80073ae <HAL_DMA_IRQHandler+0x2ee>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a55      	ldr	r2, [pc, #340]	; (80074ec <HAL_DMA_IRQHandler+0x42c>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d009      	beq.n	80073ae <HAL_DMA_IRQHandler+0x2ee>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a54      	ldr	r2, [pc, #336]	; (80074f0 <HAL_DMA_IRQHandler+0x430>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d004      	beq.n	80073ae <HAL_DMA_IRQHandler+0x2ee>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a52      	ldr	r2, [pc, #328]	; (80074f4 <HAL_DMA_IRQHandler+0x434>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d10a      	bne.n	80073c4 <HAL_DMA_IRQHandler+0x304>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	695b      	ldr	r3, [r3, #20]
 80073b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	bf14      	ite	ne
 80073bc:	2301      	movne	r3, #1
 80073be:	2300      	moveq	r3, #0
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	e003      	b.n	80073cc <HAL_DMA_IRQHandler+0x30c>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2300      	movs	r3, #0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00d      	beq.n	80073ec <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073d4:	f003 031f 	and.w	r3, r3, #31
 80073d8:	2201      	movs	r2, #1
 80073da:	409a      	lsls	r2, r3
 80073dc:	6a3b      	ldr	r3, [r7, #32]
 80073de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e4:	f043 0202 	orr.w	r2, r3, #2
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073f0:	f003 031f 	and.w	r3, r3, #31
 80073f4:	2204      	movs	r2, #4
 80073f6:	409a      	lsls	r2, r3
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	4013      	ands	r3, r2
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f000 808f 	beq.w	8007520 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a2c      	ldr	r2, [pc, #176]	; (80074b8 <HAL_DMA_IRQHandler+0x3f8>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d04a      	beq.n	80074a2 <HAL_DMA_IRQHandler+0x3e2>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a2a      	ldr	r2, [pc, #168]	; (80074bc <HAL_DMA_IRQHandler+0x3fc>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d045      	beq.n	80074a2 <HAL_DMA_IRQHandler+0x3e2>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a29      	ldr	r2, [pc, #164]	; (80074c0 <HAL_DMA_IRQHandler+0x400>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d040      	beq.n	80074a2 <HAL_DMA_IRQHandler+0x3e2>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a27      	ldr	r2, [pc, #156]	; (80074c4 <HAL_DMA_IRQHandler+0x404>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d03b      	beq.n	80074a2 <HAL_DMA_IRQHandler+0x3e2>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a26      	ldr	r2, [pc, #152]	; (80074c8 <HAL_DMA_IRQHandler+0x408>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d036      	beq.n	80074a2 <HAL_DMA_IRQHandler+0x3e2>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a24      	ldr	r2, [pc, #144]	; (80074cc <HAL_DMA_IRQHandler+0x40c>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d031      	beq.n	80074a2 <HAL_DMA_IRQHandler+0x3e2>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a23      	ldr	r2, [pc, #140]	; (80074d0 <HAL_DMA_IRQHandler+0x410>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d02c      	beq.n	80074a2 <HAL_DMA_IRQHandler+0x3e2>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a21      	ldr	r2, [pc, #132]	; (80074d4 <HAL_DMA_IRQHandler+0x414>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d027      	beq.n	80074a2 <HAL_DMA_IRQHandler+0x3e2>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a20      	ldr	r2, [pc, #128]	; (80074d8 <HAL_DMA_IRQHandler+0x418>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d022      	beq.n	80074a2 <HAL_DMA_IRQHandler+0x3e2>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a1e      	ldr	r2, [pc, #120]	; (80074dc <HAL_DMA_IRQHandler+0x41c>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d01d      	beq.n	80074a2 <HAL_DMA_IRQHandler+0x3e2>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a1d      	ldr	r2, [pc, #116]	; (80074e0 <HAL_DMA_IRQHandler+0x420>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d018      	beq.n	80074a2 <HAL_DMA_IRQHandler+0x3e2>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a1b      	ldr	r2, [pc, #108]	; (80074e4 <HAL_DMA_IRQHandler+0x424>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d013      	beq.n	80074a2 <HAL_DMA_IRQHandler+0x3e2>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a1a      	ldr	r2, [pc, #104]	; (80074e8 <HAL_DMA_IRQHandler+0x428>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d00e      	beq.n	80074a2 <HAL_DMA_IRQHandler+0x3e2>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a18      	ldr	r2, [pc, #96]	; (80074ec <HAL_DMA_IRQHandler+0x42c>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d009      	beq.n	80074a2 <HAL_DMA_IRQHandler+0x3e2>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a17      	ldr	r2, [pc, #92]	; (80074f0 <HAL_DMA_IRQHandler+0x430>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d004      	beq.n	80074a2 <HAL_DMA_IRQHandler+0x3e2>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a15      	ldr	r2, [pc, #84]	; (80074f4 <HAL_DMA_IRQHandler+0x434>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d12a      	bne.n	80074f8 <HAL_DMA_IRQHandler+0x438>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 0302 	and.w	r3, r3, #2
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	bf14      	ite	ne
 80074b0:	2301      	movne	r3, #1
 80074b2:	2300      	moveq	r3, #0
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	e023      	b.n	8007500 <HAL_DMA_IRQHandler+0x440>
 80074b8:	40020010 	.word	0x40020010
 80074bc:	40020028 	.word	0x40020028
 80074c0:	40020040 	.word	0x40020040
 80074c4:	40020058 	.word	0x40020058
 80074c8:	40020070 	.word	0x40020070
 80074cc:	40020088 	.word	0x40020088
 80074d0:	400200a0 	.word	0x400200a0
 80074d4:	400200b8 	.word	0x400200b8
 80074d8:	40020410 	.word	0x40020410
 80074dc:	40020428 	.word	0x40020428
 80074e0:	40020440 	.word	0x40020440
 80074e4:	40020458 	.word	0x40020458
 80074e8:	40020470 	.word	0x40020470
 80074ec:	40020488 	.word	0x40020488
 80074f0:	400204a0 	.word	0x400204a0
 80074f4:	400204b8 	.word	0x400204b8
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2300      	movs	r3, #0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00d      	beq.n	8007520 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007508:	f003 031f 	and.w	r3, r3, #31
 800750c:	2204      	movs	r2, #4
 800750e:	409a      	lsls	r2, r3
 8007510:	6a3b      	ldr	r3, [r7, #32]
 8007512:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007518:	f043 0204 	orr.w	r2, r3, #4
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007524:	f003 031f 	and.w	r3, r3, #31
 8007528:	2210      	movs	r2, #16
 800752a:	409a      	lsls	r2, r3
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	4013      	ands	r3, r2
 8007530:	2b00      	cmp	r3, #0
 8007532:	f000 80a6 	beq.w	8007682 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a85      	ldr	r2, [pc, #532]	; (8007750 <HAL_DMA_IRQHandler+0x690>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d04a      	beq.n	80075d6 <HAL_DMA_IRQHandler+0x516>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a83      	ldr	r2, [pc, #524]	; (8007754 <HAL_DMA_IRQHandler+0x694>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d045      	beq.n	80075d6 <HAL_DMA_IRQHandler+0x516>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a82      	ldr	r2, [pc, #520]	; (8007758 <HAL_DMA_IRQHandler+0x698>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d040      	beq.n	80075d6 <HAL_DMA_IRQHandler+0x516>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a80      	ldr	r2, [pc, #512]	; (800775c <HAL_DMA_IRQHandler+0x69c>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d03b      	beq.n	80075d6 <HAL_DMA_IRQHandler+0x516>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a7f      	ldr	r2, [pc, #508]	; (8007760 <HAL_DMA_IRQHandler+0x6a0>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d036      	beq.n	80075d6 <HAL_DMA_IRQHandler+0x516>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a7d      	ldr	r2, [pc, #500]	; (8007764 <HAL_DMA_IRQHandler+0x6a4>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d031      	beq.n	80075d6 <HAL_DMA_IRQHandler+0x516>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a7c      	ldr	r2, [pc, #496]	; (8007768 <HAL_DMA_IRQHandler+0x6a8>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d02c      	beq.n	80075d6 <HAL_DMA_IRQHandler+0x516>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a7a      	ldr	r2, [pc, #488]	; (800776c <HAL_DMA_IRQHandler+0x6ac>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d027      	beq.n	80075d6 <HAL_DMA_IRQHandler+0x516>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a79      	ldr	r2, [pc, #484]	; (8007770 <HAL_DMA_IRQHandler+0x6b0>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d022      	beq.n	80075d6 <HAL_DMA_IRQHandler+0x516>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a77      	ldr	r2, [pc, #476]	; (8007774 <HAL_DMA_IRQHandler+0x6b4>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d01d      	beq.n	80075d6 <HAL_DMA_IRQHandler+0x516>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a76      	ldr	r2, [pc, #472]	; (8007778 <HAL_DMA_IRQHandler+0x6b8>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d018      	beq.n	80075d6 <HAL_DMA_IRQHandler+0x516>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a74      	ldr	r2, [pc, #464]	; (800777c <HAL_DMA_IRQHandler+0x6bc>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d013      	beq.n	80075d6 <HAL_DMA_IRQHandler+0x516>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a73      	ldr	r2, [pc, #460]	; (8007780 <HAL_DMA_IRQHandler+0x6c0>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d00e      	beq.n	80075d6 <HAL_DMA_IRQHandler+0x516>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a71      	ldr	r2, [pc, #452]	; (8007784 <HAL_DMA_IRQHandler+0x6c4>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d009      	beq.n	80075d6 <HAL_DMA_IRQHandler+0x516>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a70      	ldr	r2, [pc, #448]	; (8007788 <HAL_DMA_IRQHandler+0x6c8>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d004      	beq.n	80075d6 <HAL_DMA_IRQHandler+0x516>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a6e      	ldr	r2, [pc, #440]	; (800778c <HAL_DMA_IRQHandler+0x6cc>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d10a      	bne.n	80075ec <HAL_DMA_IRQHandler+0x52c>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 0308 	and.w	r3, r3, #8
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	bf14      	ite	ne
 80075e4:	2301      	movne	r3, #1
 80075e6:	2300      	moveq	r3, #0
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	e009      	b.n	8007600 <HAL_DMA_IRQHandler+0x540>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 0304 	and.w	r3, r3, #4
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	bf14      	ite	ne
 80075fa:	2301      	movne	r3, #1
 80075fc:	2300      	moveq	r3, #0
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	2b00      	cmp	r3, #0
 8007602:	d03e      	beq.n	8007682 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007608:	f003 031f 	and.w	r3, r3, #31
 800760c:	2210      	movs	r2, #16
 800760e:	409a      	lsls	r2, r3
 8007610:	6a3b      	ldr	r3, [r7, #32]
 8007612:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800761e:	2b00      	cmp	r3, #0
 8007620:	d018      	beq.n	8007654 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800762c:	2b00      	cmp	r3, #0
 800762e:	d108      	bne.n	8007642 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007634:	2b00      	cmp	r3, #0
 8007636:	d024      	beq.n	8007682 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	4798      	blx	r3
 8007640:	e01f      	b.n	8007682 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007646:	2b00      	cmp	r3, #0
 8007648:	d01b      	beq.n	8007682 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	4798      	blx	r3
 8007652:	e016      	b.n	8007682 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800765e:	2b00      	cmp	r3, #0
 8007660:	d107      	bne.n	8007672 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f022 0208 	bic.w	r2, r2, #8
 8007670:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007676:	2b00      	cmp	r3, #0
 8007678:	d003      	beq.n	8007682 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007686:	f003 031f 	and.w	r3, r3, #31
 800768a:	2220      	movs	r2, #32
 800768c:	409a      	lsls	r2, r3
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	4013      	ands	r3, r2
 8007692:	2b00      	cmp	r3, #0
 8007694:	f000 8110 	beq.w	80078b8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a2c      	ldr	r2, [pc, #176]	; (8007750 <HAL_DMA_IRQHandler+0x690>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d04a      	beq.n	8007738 <HAL_DMA_IRQHandler+0x678>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a2b      	ldr	r2, [pc, #172]	; (8007754 <HAL_DMA_IRQHandler+0x694>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d045      	beq.n	8007738 <HAL_DMA_IRQHandler+0x678>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a29      	ldr	r2, [pc, #164]	; (8007758 <HAL_DMA_IRQHandler+0x698>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d040      	beq.n	8007738 <HAL_DMA_IRQHandler+0x678>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a28      	ldr	r2, [pc, #160]	; (800775c <HAL_DMA_IRQHandler+0x69c>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d03b      	beq.n	8007738 <HAL_DMA_IRQHandler+0x678>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a26      	ldr	r2, [pc, #152]	; (8007760 <HAL_DMA_IRQHandler+0x6a0>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d036      	beq.n	8007738 <HAL_DMA_IRQHandler+0x678>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a25      	ldr	r2, [pc, #148]	; (8007764 <HAL_DMA_IRQHandler+0x6a4>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d031      	beq.n	8007738 <HAL_DMA_IRQHandler+0x678>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a23      	ldr	r2, [pc, #140]	; (8007768 <HAL_DMA_IRQHandler+0x6a8>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d02c      	beq.n	8007738 <HAL_DMA_IRQHandler+0x678>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a22      	ldr	r2, [pc, #136]	; (800776c <HAL_DMA_IRQHandler+0x6ac>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d027      	beq.n	8007738 <HAL_DMA_IRQHandler+0x678>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a20      	ldr	r2, [pc, #128]	; (8007770 <HAL_DMA_IRQHandler+0x6b0>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d022      	beq.n	8007738 <HAL_DMA_IRQHandler+0x678>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a1f      	ldr	r2, [pc, #124]	; (8007774 <HAL_DMA_IRQHandler+0x6b4>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d01d      	beq.n	8007738 <HAL_DMA_IRQHandler+0x678>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a1d      	ldr	r2, [pc, #116]	; (8007778 <HAL_DMA_IRQHandler+0x6b8>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d018      	beq.n	8007738 <HAL_DMA_IRQHandler+0x678>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a1c      	ldr	r2, [pc, #112]	; (800777c <HAL_DMA_IRQHandler+0x6bc>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d013      	beq.n	8007738 <HAL_DMA_IRQHandler+0x678>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a1a      	ldr	r2, [pc, #104]	; (8007780 <HAL_DMA_IRQHandler+0x6c0>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d00e      	beq.n	8007738 <HAL_DMA_IRQHandler+0x678>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a19      	ldr	r2, [pc, #100]	; (8007784 <HAL_DMA_IRQHandler+0x6c4>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d009      	beq.n	8007738 <HAL_DMA_IRQHandler+0x678>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a17      	ldr	r2, [pc, #92]	; (8007788 <HAL_DMA_IRQHandler+0x6c8>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d004      	beq.n	8007738 <HAL_DMA_IRQHandler+0x678>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a16      	ldr	r2, [pc, #88]	; (800778c <HAL_DMA_IRQHandler+0x6cc>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d12b      	bne.n	8007790 <HAL_DMA_IRQHandler+0x6d0>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 0310 	and.w	r3, r3, #16
 8007742:	2b00      	cmp	r3, #0
 8007744:	bf14      	ite	ne
 8007746:	2301      	movne	r3, #1
 8007748:	2300      	moveq	r3, #0
 800774a:	b2db      	uxtb	r3, r3
 800774c:	e02a      	b.n	80077a4 <HAL_DMA_IRQHandler+0x6e4>
 800774e:	bf00      	nop
 8007750:	40020010 	.word	0x40020010
 8007754:	40020028 	.word	0x40020028
 8007758:	40020040 	.word	0x40020040
 800775c:	40020058 	.word	0x40020058
 8007760:	40020070 	.word	0x40020070
 8007764:	40020088 	.word	0x40020088
 8007768:	400200a0 	.word	0x400200a0
 800776c:	400200b8 	.word	0x400200b8
 8007770:	40020410 	.word	0x40020410
 8007774:	40020428 	.word	0x40020428
 8007778:	40020440 	.word	0x40020440
 800777c:	40020458 	.word	0x40020458
 8007780:	40020470 	.word	0x40020470
 8007784:	40020488 	.word	0x40020488
 8007788:	400204a0 	.word	0x400204a0
 800778c:	400204b8 	.word	0x400204b8
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f003 0302 	and.w	r3, r3, #2
 800779a:	2b00      	cmp	r3, #0
 800779c:	bf14      	ite	ne
 800779e:	2301      	movne	r3, #1
 80077a0:	2300      	moveq	r3, #0
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f000 8087 	beq.w	80078b8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077ae:	f003 031f 	and.w	r3, r3, #31
 80077b2:	2220      	movs	r2, #32
 80077b4:	409a      	lsls	r2, r3
 80077b6:	6a3b      	ldr	r3, [r7, #32]
 80077b8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	2b04      	cmp	r3, #4
 80077c4:	d139      	bne.n	800783a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f022 0216 	bic.w	r2, r2, #22
 80077d4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	695a      	ldr	r2, [r3, #20]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80077e4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d103      	bne.n	80077f6 <HAL_DMA_IRQHandler+0x736>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d007      	beq.n	8007806 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f022 0208 	bic.w	r2, r2, #8
 8007804:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800780a:	f003 031f 	and.w	r3, r3, #31
 800780e:	223f      	movs	r2, #63	; 0x3f
 8007810:	409a      	lsls	r2, r3
 8007812:	6a3b      	ldr	r3, [r7, #32]
 8007814:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800782a:	2b00      	cmp	r3, #0
 800782c:	f000 834a 	beq.w	8007ec4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	4798      	blx	r3
          }
          return;
 8007838:	e344      	b.n	8007ec4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007844:	2b00      	cmp	r3, #0
 8007846:	d018      	beq.n	800787a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007852:	2b00      	cmp	r3, #0
 8007854:	d108      	bne.n	8007868 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800785a:	2b00      	cmp	r3, #0
 800785c:	d02c      	beq.n	80078b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	4798      	blx	r3
 8007866:	e027      	b.n	80078b8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800786c:	2b00      	cmp	r3, #0
 800786e:	d023      	beq.n	80078b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	4798      	blx	r3
 8007878:	e01e      	b.n	80078b8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007884:	2b00      	cmp	r3, #0
 8007886:	d10f      	bne.n	80078a8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f022 0210 	bic.w	r2, r2, #16
 8007896:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d003      	beq.n	80078b8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078bc:	2b00      	cmp	r3, #0
 80078be:	f000 8306 	beq.w	8007ece <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078c6:	f003 0301 	and.w	r3, r3, #1
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	f000 8088 	beq.w	80079e0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2204      	movs	r2, #4
 80078d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a7a      	ldr	r2, [pc, #488]	; (8007ac8 <HAL_DMA_IRQHandler+0xa08>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d04a      	beq.n	8007978 <HAL_DMA_IRQHandler+0x8b8>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a79      	ldr	r2, [pc, #484]	; (8007acc <HAL_DMA_IRQHandler+0xa0c>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d045      	beq.n	8007978 <HAL_DMA_IRQHandler+0x8b8>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a77      	ldr	r2, [pc, #476]	; (8007ad0 <HAL_DMA_IRQHandler+0xa10>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d040      	beq.n	8007978 <HAL_DMA_IRQHandler+0x8b8>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a76      	ldr	r2, [pc, #472]	; (8007ad4 <HAL_DMA_IRQHandler+0xa14>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d03b      	beq.n	8007978 <HAL_DMA_IRQHandler+0x8b8>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a74      	ldr	r2, [pc, #464]	; (8007ad8 <HAL_DMA_IRQHandler+0xa18>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d036      	beq.n	8007978 <HAL_DMA_IRQHandler+0x8b8>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a73      	ldr	r2, [pc, #460]	; (8007adc <HAL_DMA_IRQHandler+0xa1c>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d031      	beq.n	8007978 <HAL_DMA_IRQHandler+0x8b8>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a71      	ldr	r2, [pc, #452]	; (8007ae0 <HAL_DMA_IRQHandler+0xa20>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d02c      	beq.n	8007978 <HAL_DMA_IRQHandler+0x8b8>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a70      	ldr	r2, [pc, #448]	; (8007ae4 <HAL_DMA_IRQHandler+0xa24>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d027      	beq.n	8007978 <HAL_DMA_IRQHandler+0x8b8>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a6e      	ldr	r2, [pc, #440]	; (8007ae8 <HAL_DMA_IRQHandler+0xa28>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d022      	beq.n	8007978 <HAL_DMA_IRQHandler+0x8b8>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a6d      	ldr	r2, [pc, #436]	; (8007aec <HAL_DMA_IRQHandler+0xa2c>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d01d      	beq.n	8007978 <HAL_DMA_IRQHandler+0x8b8>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a6b      	ldr	r2, [pc, #428]	; (8007af0 <HAL_DMA_IRQHandler+0xa30>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d018      	beq.n	8007978 <HAL_DMA_IRQHandler+0x8b8>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a6a      	ldr	r2, [pc, #424]	; (8007af4 <HAL_DMA_IRQHandler+0xa34>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d013      	beq.n	8007978 <HAL_DMA_IRQHandler+0x8b8>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a68      	ldr	r2, [pc, #416]	; (8007af8 <HAL_DMA_IRQHandler+0xa38>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d00e      	beq.n	8007978 <HAL_DMA_IRQHandler+0x8b8>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a67      	ldr	r2, [pc, #412]	; (8007afc <HAL_DMA_IRQHandler+0xa3c>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d009      	beq.n	8007978 <HAL_DMA_IRQHandler+0x8b8>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a65      	ldr	r2, [pc, #404]	; (8007b00 <HAL_DMA_IRQHandler+0xa40>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d004      	beq.n	8007978 <HAL_DMA_IRQHandler+0x8b8>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a64      	ldr	r2, [pc, #400]	; (8007b04 <HAL_DMA_IRQHandler+0xa44>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d108      	bne.n	800798a <HAL_DMA_IRQHandler+0x8ca>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f022 0201 	bic.w	r2, r2, #1
 8007986:	601a      	str	r2, [r3, #0]
 8007988:	e007      	b.n	800799a <HAL_DMA_IRQHandler+0x8da>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f022 0201 	bic.w	r2, r2, #1
 8007998:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	3301      	adds	r3, #1
 800799e:	60fb      	str	r3, [r7, #12]
 80079a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d307      	bcc.n	80079b6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 0301 	and.w	r3, r3, #1
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d1f2      	bne.n	800799a <HAL_DMA_IRQHandler+0x8da>
 80079b4:	e000      	b.n	80079b8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80079b6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f003 0301 	and.w	r3, r3, #1
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d004      	beq.n	80079d0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2203      	movs	r2, #3
 80079ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80079ce:	e003      	b.n	80079d8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f000 8272 	beq.w	8007ece <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	4798      	blx	r3
 80079f2:	e26c      	b.n	8007ece <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a43      	ldr	r2, [pc, #268]	; (8007b08 <HAL_DMA_IRQHandler+0xa48>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d022      	beq.n	8007a44 <HAL_DMA_IRQHandler+0x984>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a42      	ldr	r2, [pc, #264]	; (8007b0c <HAL_DMA_IRQHandler+0xa4c>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d01d      	beq.n	8007a44 <HAL_DMA_IRQHandler+0x984>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a40      	ldr	r2, [pc, #256]	; (8007b10 <HAL_DMA_IRQHandler+0xa50>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d018      	beq.n	8007a44 <HAL_DMA_IRQHandler+0x984>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a3f      	ldr	r2, [pc, #252]	; (8007b14 <HAL_DMA_IRQHandler+0xa54>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d013      	beq.n	8007a44 <HAL_DMA_IRQHandler+0x984>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a3d      	ldr	r2, [pc, #244]	; (8007b18 <HAL_DMA_IRQHandler+0xa58>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d00e      	beq.n	8007a44 <HAL_DMA_IRQHandler+0x984>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a3c      	ldr	r2, [pc, #240]	; (8007b1c <HAL_DMA_IRQHandler+0xa5c>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d009      	beq.n	8007a44 <HAL_DMA_IRQHandler+0x984>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a3a      	ldr	r2, [pc, #232]	; (8007b20 <HAL_DMA_IRQHandler+0xa60>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d004      	beq.n	8007a44 <HAL_DMA_IRQHandler+0x984>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a39      	ldr	r2, [pc, #228]	; (8007b24 <HAL_DMA_IRQHandler+0xa64>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d101      	bne.n	8007a48 <HAL_DMA_IRQHandler+0x988>
 8007a44:	2301      	movs	r3, #1
 8007a46:	e000      	b.n	8007a4a <HAL_DMA_IRQHandler+0x98a>
 8007a48:	2300      	movs	r3, #0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	f000 823f 	beq.w	8007ece <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a5c:	f003 031f 	and.w	r3, r3, #31
 8007a60:	2204      	movs	r2, #4
 8007a62:	409a      	lsls	r2, r3
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	4013      	ands	r3, r2
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f000 80cd 	beq.w	8007c08 <HAL_DMA_IRQHandler+0xb48>
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	f003 0304 	and.w	r3, r3, #4
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f000 80c7 	beq.w	8007c08 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a7e:	f003 031f 	and.w	r3, r3, #31
 8007a82:	2204      	movs	r2, #4
 8007a84:	409a      	lsls	r2, r3
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d049      	beq.n	8007b28 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d109      	bne.n	8007ab2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	f000 8210 	beq.w	8007ec8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ab0:	e20a      	b.n	8007ec8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	f000 8206 	beq.w	8007ec8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ac4:	e200      	b.n	8007ec8 <HAL_DMA_IRQHandler+0xe08>
 8007ac6:	bf00      	nop
 8007ac8:	40020010 	.word	0x40020010
 8007acc:	40020028 	.word	0x40020028
 8007ad0:	40020040 	.word	0x40020040
 8007ad4:	40020058 	.word	0x40020058
 8007ad8:	40020070 	.word	0x40020070
 8007adc:	40020088 	.word	0x40020088
 8007ae0:	400200a0 	.word	0x400200a0
 8007ae4:	400200b8 	.word	0x400200b8
 8007ae8:	40020410 	.word	0x40020410
 8007aec:	40020428 	.word	0x40020428
 8007af0:	40020440 	.word	0x40020440
 8007af4:	40020458 	.word	0x40020458
 8007af8:	40020470 	.word	0x40020470
 8007afc:	40020488 	.word	0x40020488
 8007b00:	400204a0 	.word	0x400204a0
 8007b04:	400204b8 	.word	0x400204b8
 8007b08:	58025408 	.word	0x58025408
 8007b0c:	5802541c 	.word	0x5802541c
 8007b10:	58025430 	.word	0x58025430
 8007b14:	58025444 	.word	0x58025444
 8007b18:	58025458 	.word	0x58025458
 8007b1c:	5802546c 	.word	0x5802546c
 8007b20:	58025480 	.word	0x58025480
 8007b24:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	f003 0320 	and.w	r3, r3, #32
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d160      	bne.n	8007bf4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a7f      	ldr	r2, [pc, #508]	; (8007d34 <HAL_DMA_IRQHandler+0xc74>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d04a      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0xb12>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a7d      	ldr	r2, [pc, #500]	; (8007d38 <HAL_DMA_IRQHandler+0xc78>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d045      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0xb12>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a7c      	ldr	r2, [pc, #496]	; (8007d3c <HAL_DMA_IRQHandler+0xc7c>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d040      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0xb12>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a7a      	ldr	r2, [pc, #488]	; (8007d40 <HAL_DMA_IRQHandler+0xc80>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d03b      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0xb12>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a79      	ldr	r2, [pc, #484]	; (8007d44 <HAL_DMA_IRQHandler+0xc84>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d036      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0xb12>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a77      	ldr	r2, [pc, #476]	; (8007d48 <HAL_DMA_IRQHandler+0xc88>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d031      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0xb12>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a76      	ldr	r2, [pc, #472]	; (8007d4c <HAL_DMA_IRQHandler+0xc8c>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d02c      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0xb12>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a74      	ldr	r2, [pc, #464]	; (8007d50 <HAL_DMA_IRQHandler+0xc90>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d027      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0xb12>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a73      	ldr	r2, [pc, #460]	; (8007d54 <HAL_DMA_IRQHandler+0xc94>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d022      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0xb12>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a71      	ldr	r2, [pc, #452]	; (8007d58 <HAL_DMA_IRQHandler+0xc98>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d01d      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0xb12>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a70      	ldr	r2, [pc, #448]	; (8007d5c <HAL_DMA_IRQHandler+0xc9c>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d018      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0xb12>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a6e      	ldr	r2, [pc, #440]	; (8007d60 <HAL_DMA_IRQHandler+0xca0>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d013      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0xb12>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a6d      	ldr	r2, [pc, #436]	; (8007d64 <HAL_DMA_IRQHandler+0xca4>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d00e      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0xb12>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a6b      	ldr	r2, [pc, #428]	; (8007d68 <HAL_DMA_IRQHandler+0xca8>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d009      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0xb12>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a6a      	ldr	r2, [pc, #424]	; (8007d6c <HAL_DMA_IRQHandler+0xcac>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d004      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0xb12>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a68      	ldr	r2, [pc, #416]	; (8007d70 <HAL_DMA_IRQHandler+0xcb0>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d108      	bne.n	8007be4 <HAL_DMA_IRQHandler+0xb24>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f022 0208 	bic.w	r2, r2, #8
 8007be0:	601a      	str	r2, [r3, #0]
 8007be2:	e007      	b.n	8007bf4 <HAL_DMA_IRQHandler+0xb34>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f022 0204 	bic.w	r2, r2, #4
 8007bf2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	f000 8165 	beq.w	8007ec8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c06:	e15f      	b.n	8007ec8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c0c:	f003 031f 	and.w	r3, r3, #31
 8007c10:	2202      	movs	r2, #2
 8007c12:	409a      	lsls	r2, r3
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	4013      	ands	r3, r2
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	f000 80c5 	beq.w	8007da8 <HAL_DMA_IRQHandler+0xce8>
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	f003 0302 	and.w	r3, r3, #2
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f000 80bf 	beq.w	8007da8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c2e:	f003 031f 	and.w	r3, r3, #31
 8007c32:	2202      	movs	r2, #2
 8007c34:	409a      	lsls	r2, r3
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d018      	beq.n	8007c76 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d109      	bne.n	8007c62 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	f000 813a 	beq.w	8007ecc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c60:	e134      	b.n	8007ecc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	f000 8130 	beq.w	8007ecc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c74:	e12a      	b.n	8007ecc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	f003 0320 	and.w	r3, r3, #32
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f040 8089 	bne.w	8007d94 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a2b      	ldr	r2, [pc, #172]	; (8007d34 <HAL_DMA_IRQHandler+0xc74>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d04a      	beq.n	8007d22 <HAL_DMA_IRQHandler+0xc62>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a29      	ldr	r2, [pc, #164]	; (8007d38 <HAL_DMA_IRQHandler+0xc78>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d045      	beq.n	8007d22 <HAL_DMA_IRQHandler+0xc62>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a28      	ldr	r2, [pc, #160]	; (8007d3c <HAL_DMA_IRQHandler+0xc7c>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d040      	beq.n	8007d22 <HAL_DMA_IRQHandler+0xc62>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a26      	ldr	r2, [pc, #152]	; (8007d40 <HAL_DMA_IRQHandler+0xc80>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d03b      	beq.n	8007d22 <HAL_DMA_IRQHandler+0xc62>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a25      	ldr	r2, [pc, #148]	; (8007d44 <HAL_DMA_IRQHandler+0xc84>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d036      	beq.n	8007d22 <HAL_DMA_IRQHandler+0xc62>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a23      	ldr	r2, [pc, #140]	; (8007d48 <HAL_DMA_IRQHandler+0xc88>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d031      	beq.n	8007d22 <HAL_DMA_IRQHandler+0xc62>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a22      	ldr	r2, [pc, #136]	; (8007d4c <HAL_DMA_IRQHandler+0xc8c>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d02c      	beq.n	8007d22 <HAL_DMA_IRQHandler+0xc62>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a20      	ldr	r2, [pc, #128]	; (8007d50 <HAL_DMA_IRQHandler+0xc90>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d027      	beq.n	8007d22 <HAL_DMA_IRQHandler+0xc62>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a1f      	ldr	r2, [pc, #124]	; (8007d54 <HAL_DMA_IRQHandler+0xc94>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d022      	beq.n	8007d22 <HAL_DMA_IRQHandler+0xc62>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a1d      	ldr	r2, [pc, #116]	; (8007d58 <HAL_DMA_IRQHandler+0xc98>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d01d      	beq.n	8007d22 <HAL_DMA_IRQHandler+0xc62>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a1c      	ldr	r2, [pc, #112]	; (8007d5c <HAL_DMA_IRQHandler+0xc9c>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d018      	beq.n	8007d22 <HAL_DMA_IRQHandler+0xc62>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a1a      	ldr	r2, [pc, #104]	; (8007d60 <HAL_DMA_IRQHandler+0xca0>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d013      	beq.n	8007d22 <HAL_DMA_IRQHandler+0xc62>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a19      	ldr	r2, [pc, #100]	; (8007d64 <HAL_DMA_IRQHandler+0xca4>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d00e      	beq.n	8007d22 <HAL_DMA_IRQHandler+0xc62>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a17      	ldr	r2, [pc, #92]	; (8007d68 <HAL_DMA_IRQHandler+0xca8>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d009      	beq.n	8007d22 <HAL_DMA_IRQHandler+0xc62>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a16      	ldr	r2, [pc, #88]	; (8007d6c <HAL_DMA_IRQHandler+0xcac>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d004      	beq.n	8007d22 <HAL_DMA_IRQHandler+0xc62>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a14      	ldr	r2, [pc, #80]	; (8007d70 <HAL_DMA_IRQHandler+0xcb0>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d128      	bne.n	8007d74 <HAL_DMA_IRQHandler+0xcb4>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f022 0214 	bic.w	r2, r2, #20
 8007d30:	601a      	str	r2, [r3, #0]
 8007d32:	e027      	b.n	8007d84 <HAL_DMA_IRQHandler+0xcc4>
 8007d34:	40020010 	.word	0x40020010
 8007d38:	40020028 	.word	0x40020028
 8007d3c:	40020040 	.word	0x40020040
 8007d40:	40020058 	.word	0x40020058
 8007d44:	40020070 	.word	0x40020070
 8007d48:	40020088 	.word	0x40020088
 8007d4c:	400200a0 	.word	0x400200a0
 8007d50:	400200b8 	.word	0x400200b8
 8007d54:	40020410 	.word	0x40020410
 8007d58:	40020428 	.word	0x40020428
 8007d5c:	40020440 	.word	0x40020440
 8007d60:	40020458 	.word	0x40020458
 8007d64:	40020470 	.word	0x40020470
 8007d68:	40020488 	.word	0x40020488
 8007d6c:	400204a0 	.word	0x400204a0
 8007d70:	400204b8 	.word	0x400204b8
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f022 020a 	bic.w	r2, r2, #10
 8007d82:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f000 8097 	beq.w	8007ecc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007da6:	e091      	b.n	8007ecc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dac:	f003 031f 	and.w	r3, r3, #31
 8007db0:	2208      	movs	r2, #8
 8007db2:	409a      	lsls	r2, r3
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	4013      	ands	r3, r2
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	f000 8088 	beq.w	8007ece <HAL_DMA_IRQHandler+0xe0e>
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	f003 0308 	and.w	r3, r3, #8
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f000 8082 	beq.w	8007ece <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a41      	ldr	r2, [pc, #260]	; (8007ed4 <HAL_DMA_IRQHandler+0xe14>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d04a      	beq.n	8007e6a <HAL_DMA_IRQHandler+0xdaa>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a3f      	ldr	r2, [pc, #252]	; (8007ed8 <HAL_DMA_IRQHandler+0xe18>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d045      	beq.n	8007e6a <HAL_DMA_IRQHandler+0xdaa>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a3e      	ldr	r2, [pc, #248]	; (8007edc <HAL_DMA_IRQHandler+0xe1c>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d040      	beq.n	8007e6a <HAL_DMA_IRQHandler+0xdaa>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a3c      	ldr	r2, [pc, #240]	; (8007ee0 <HAL_DMA_IRQHandler+0xe20>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d03b      	beq.n	8007e6a <HAL_DMA_IRQHandler+0xdaa>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a3b      	ldr	r2, [pc, #236]	; (8007ee4 <HAL_DMA_IRQHandler+0xe24>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d036      	beq.n	8007e6a <HAL_DMA_IRQHandler+0xdaa>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a39      	ldr	r2, [pc, #228]	; (8007ee8 <HAL_DMA_IRQHandler+0xe28>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d031      	beq.n	8007e6a <HAL_DMA_IRQHandler+0xdaa>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a38      	ldr	r2, [pc, #224]	; (8007eec <HAL_DMA_IRQHandler+0xe2c>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d02c      	beq.n	8007e6a <HAL_DMA_IRQHandler+0xdaa>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a36      	ldr	r2, [pc, #216]	; (8007ef0 <HAL_DMA_IRQHandler+0xe30>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d027      	beq.n	8007e6a <HAL_DMA_IRQHandler+0xdaa>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a35      	ldr	r2, [pc, #212]	; (8007ef4 <HAL_DMA_IRQHandler+0xe34>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d022      	beq.n	8007e6a <HAL_DMA_IRQHandler+0xdaa>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a33      	ldr	r2, [pc, #204]	; (8007ef8 <HAL_DMA_IRQHandler+0xe38>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d01d      	beq.n	8007e6a <HAL_DMA_IRQHandler+0xdaa>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a32      	ldr	r2, [pc, #200]	; (8007efc <HAL_DMA_IRQHandler+0xe3c>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d018      	beq.n	8007e6a <HAL_DMA_IRQHandler+0xdaa>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a30      	ldr	r2, [pc, #192]	; (8007f00 <HAL_DMA_IRQHandler+0xe40>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d013      	beq.n	8007e6a <HAL_DMA_IRQHandler+0xdaa>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a2f      	ldr	r2, [pc, #188]	; (8007f04 <HAL_DMA_IRQHandler+0xe44>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d00e      	beq.n	8007e6a <HAL_DMA_IRQHandler+0xdaa>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a2d      	ldr	r2, [pc, #180]	; (8007f08 <HAL_DMA_IRQHandler+0xe48>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d009      	beq.n	8007e6a <HAL_DMA_IRQHandler+0xdaa>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a2c      	ldr	r2, [pc, #176]	; (8007f0c <HAL_DMA_IRQHandler+0xe4c>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d004      	beq.n	8007e6a <HAL_DMA_IRQHandler+0xdaa>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a2a      	ldr	r2, [pc, #168]	; (8007f10 <HAL_DMA_IRQHandler+0xe50>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d108      	bne.n	8007e7c <HAL_DMA_IRQHandler+0xdbc>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f022 021c 	bic.w	r2, r2, #28
 8007e78:	601a      	str	r2, [r3, #0]
 8007e7a:	e007      	b.n	8007e8c <HAL_DMA_IRQHandler+0xdcc>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f022 020e 	bic.w	r2, r2, #14
 8007e8a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e90:	f003 031f 	and.w	r3, r3, #31
 8007e94:	2201      	movs	r2, #1
 8007e96:	409a      	lsls	r2, r3
 8007e98:	69fb      	ldr	r3, [r7, #28]
 8007e9a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d009      	beq.n	8007ece <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	4798      	blx	r3
 8007ec2:	e004      	b.n	8007ece <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007ec4:	bf00      	nop
 8007ec6:	e002      	b.n	8007ece <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ec8:	bf00      	nop
 8007eca:	e000      	b.n	8007ece <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ecc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007ece:	3728      	adds	r7, #40	; 0x28
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	40020010 	.word	0x40020010
 8007ed8:	40020028 	.word	0x40020028
 8007edc:	40020040 	.word	0x40020040
 8007ee0:	40020058 	.word	0x40020058
 8007ee4:	40020070 	.word	0x40020070
 8007ee8:	40020088 	.word	0x40020088
 8007eec:	400200a0 	.word	0x400200a0
 8007ef0:	400200b8 	.word	0x400200b8
 8007ef4:	40020410 	.word	0x40020410
 8007ef8:	40020428 	.word	0x40020428
 8007efc:	40020440 	.word	0x40020440
 8007f00:	40020458 	.word	0x40020458
 8007f04:	40020470 	.word	0x40020470
 8007f08:	40020488 	.word	0x40020488
 8007f0c:	400204a0 	.word	0x400204a0
 8007f10:	400204b8 	.word	0x400204b8

08007f14 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b087      	sub	sp, #28
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	607a      	str	r2, [r7, #4]
 8007f20:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f26:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f2c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a7f      	ldr	r2, [pc, #508]	; (8008130 <DMA_SetConfig+0x21c>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d072      	beq.n	800801e <DMA_SetConfig+0x10a>
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a7d      	ldr	r2, [pc, #500]	; (8008134 <DMA_SetConfig+0x220>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d06d      	beq.n	800801e <DMA_SetConfig+0x10a>
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a7c      	ldr	r2, [pc, #496]	; (8008138 <DMA_SetConfig+0x224>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d068      	beq.n	800801e <DMA_SetConfig+0x10a>
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a7a      	ldr	r2, [pc, #488]	; (800813c <DMA_SetConfig+0x228>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d063      	beq.n	800801e <DMA_SetConfig+0x10a>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a79      	ldr	r2, [pc, #484]	; (8008140 <DMA_SetConfig+0x22c>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d05e      	beq.n	800801e <DMA_SetConfig+0x10a>
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a77      	ldr	r2, [pc, #476]	; (8008144 <DMA_SetConfig+0x230>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d059      	beq.n	800801e <DMA_SetConfig+0x10a>
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a76      	ldr	r2, [pc, #472]	; (8008148 <DMA_SetConfig+0x234>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d054      	beq.n	800801e <DMA_SetConfig+0x10a>
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a74      	ldr	r2, [pc, #464]	; (800814c <DMA_SetConfig+0x238>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d04f      	beq.n	800801e <DMA_SetConfig+0x10a>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a73      	ldr	r2, [pc, #460]	; (8008150 <DMA_SetConfig+0x23c>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d04a      	beq.n	800801e <DMA_SetConfig+0x10a>
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a71      	ldr	r2, [pc, #452]	; (8008154 <DMA_SetConfig+0x240>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d045      	beq.n	800801e <DMA_SetConfig+0x10a>
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a70      	ldr	r2, [pc, #448]	; (8008158 <DMA_SetConfig+0x244>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d040      	beq.n	800801e <DMA_SetConfig+0x10a>
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a6e      	ldr	r2, [pc, #440]	; (800815c <DMA_SetConfig+0x248>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d03b      	beq.n	800801e <DMA_SetConfig+0x10a>
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a6d      	ldr	r2, [pc, #436]	; (8008160 <DMA_SetConfig+0x24c>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d036      	beq.n	800801e <DMA_SetConfig+0x10a>
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a6b      	ldr	r2, [pc, #428]	; (8008164 <DMA_SetConfig+0x250>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d031      	beq.n	800801e <DMA_SetConfig+0x10a>
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a6a      	ldr	r2, [pc, #424]	; (8008168 <DMA_SetConfig+0x254>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d02c      	beq.n	800801e <DMA_SetConfig+0x10a>
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a68      	ldr	r2, [pc, #416]	; (800816c <DMA_SetConfig+0x258>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d027      	beq.n	800801e <DMA_SetConfig+0x10a>
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a67      	ldr	r2, [pc, #412]	; (8008170 <DMA_SetConfig+0x25c>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d022      	beq.n	800801e <DMA_SetConfig+0x10a>
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a65      	ldr	r2, [pc, #404]	; (8008174 <DMA_SetConfig+0x260>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d01d      	beq.n	800801e <DMA_SetConfig+0x10a>
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a64      	ldr	r2, [pc, #400]	; (8008178 <DMA_SetConfig+0x264>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d018      	beq.n	800801e <DMA_SetConfig+0x10a>
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a62      	ldr	r2, [pc, #392]	; (800817c <DMA_SetConfig+0x268>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d013      	beq.n	800801e <DMA_SetConfig+0x10a>
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a61      	ldr	r2, [pc, #388]	; (8008180 <DMA_SetConfig+0x26c>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d00e      	beq.n	800801e <DMA_SetConfig+0x10a>
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a5f      	ldr	r2, [pc, #380]	; (8008184 <DMA_SetConfig+0x270>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d009      	beq.n	800801e <DMA_SetConfig+0x10a>
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a5e      	ldr	r2, [pc, #376]	; (8008188 <DMA_SetConfig+0x274>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d004      	beq.n	800801e <DMA_SetConfig+0x10a>
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a5c      	ldr	r2, [pc, #368]	; (800818c <DMA_SetConfig+0x278>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d101      	bne.n	8008022 <DMA_SetConfig+0x10e>
 800801e:	2301      	movs	r3, #1
 8008020:	e000      	b.n	8008024 <DMA_SetConfig+0x110>
 8008022:	2300      	movs	r3, #0
 8008024:	2b00      	cmp	r3, #0
 8008026:	d00d      	beq.n	8008044 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800802c:	68fa      	ldr	r2, [r7, #12]
 800802e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008030:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008036:	2b00      	cmp	r3, #0
 8008038:	d004      	beq.n	8008044 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800803e:	68fa      	ldr	r2, [r7, #12]
 8008040:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008042:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a39      	ldr	r2, [pc, #228]	; (8008130 <DMA_SetConfig+0x21c>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d04a      	beq.n	80080e4 <DMA_SetConfig+0x1d0>
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a38      	ldr	r2, [pc, #224]	; (8008134 <DMA_SetConfig+0x220>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d045      	beq.n	80080e4 <DMA_SetConfig+0x1d0>
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a36      	ldr	r2, [pc, #216]	; (8008138 <DMA_SetConfig+0x224>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d040      	beq.n	80080e4 <DMA_SetConfig+0x1d0>
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a35      	ldr	r2, [pc, #212]	; (800813c <DMA_SetConfig+0x228>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d03b      	beq.n	80080e4 <DMA_SetConfig+0x1d0>
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a33      	ldr	r2, [pc, #204]	; (8008140 <DMA_SetConfig+0x22c>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d036      	beq.n	80080e4 <DMA_SetConfig+0x1d0>
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a32      	ldr	r2, [pc, #200]	; (8008144 <DMA_SetConfig+0x230>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d031      	beq.n	80080e4 <DMA_SetConfig+0x1d0>
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a30      	ldr	r2, [pc, #192]	; (8008148 <DMA_SetConfig+0x234>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d02c      	beq.n	80080e4 <DMA_SetConfig+0x1d0>
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a2f      	ldr	r2, [pc, #188]	; (800814c <DMA_SetConfig+0x238>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d027      	beq.n	80080e4 <DMA_SetConfig+0x1d0>
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a2d      	ldr	r2, [pc, #180]	; (8008150 <DMA_SetConfig+0x23c>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d022      	beq.n	80080e4 <DMA_SetConfig+0x1d0>
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a2c      	ldr	r2, [pc, #176]	; (8008154 <DMA_SetConfig+0x240>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d01d      	beq.n	80080e4 <DMA_SetConfig+0x1d0>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a2a      	ldr	r2, [pc, #168]	; (8008158 <DMA_SetConfig+0x244>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d018      	beq.n	80080e4 <DMA_SetConfig+0x1d0>
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a29      	ldr	r2, [pc, #164]	; (800815c <DMA_SetConfig+0x248>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d013      	beq.n	80080e4 <DMA_SetConfig+0x1d0>
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a27      	ldr	r2, [pc, #156]	; (8008160 <DMA_SetConfig+0x24c>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d00e      	beq.n	80080e4 <DMA_SetConfig+0x1d0>
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a26      	ldr	r2, [pc, #152]	; (8008164 <DMA_SetConfig+0x250>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d009      	beq.n	80080e4 <DMA_SetConfig+0x1d0>
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a24      	ldr	r2, [pc, #144]	; (8008168 <DMA_SetConfig+0x254>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d004      	beq.n	80080e4 <DMA_SetConfig+0x1d0>
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a23      	ldr	r2, [pc, #140]	; (800816c <DMA_SetConfig+0x258>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d101      	bne.n	80080e8 <DMA_SetConfig+0x1d4>
 80080e4:	2301      	movs	r3, #1
 80080e6:	e000      	b.n	80080ea <DMA_SetConfig+0x1d6>
 80080e8:	2300      	movs	r3, #0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d059      	beq.n	80081a2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080f2:	f003 031f 	and.w	r3, r3, #31
 80080f6:	223f      	movs	r2, #63	; 0x3f
 80080f8:	409a      	lsls	r2, r3
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800810c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	683a      	ldr	r2, [r7, #0]
 8008114:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	2b40      	cmp	r3, #64	; 0x40
 800811c:	d138      	bne.n	8008190 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	68ba      	ldr	r2, [r7, #8]
 800812c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800812e:	e086      	b.n	800823e <DMA_SetConfig+0x32a>
 8008130:	40020010 	.word	0x40020010
 8008134:	40020028 	.word	0x40020028
 8008138:	40020040 	.word	0x40020040
 800813c:	40020058 	.word	0x40020058
 8008140:	40020070 	.word	0x40020070
 8008144:	40020088 	.word	0x40020088
 8008148:	400200a0 	.word	0x400200a0
 800814c:	400200b8 	.word	0x400200b8
 8008150:	40020410 	.word	0x40020410
 8008154:	40020428 	.word	0x40020428
 8008158:	40020440 	.word	0x40020440
 800815c:	40020458 	.word	0x40020458
 8008160:	40020470 	.word	0x40020470
 8008164:	40020488 	.word	0x40020488
 8008168:	400204a0 	.word	0x400204a0
 800816c:	400204b8 	.word	0x400204b8
 8008170:	58025408 	.word	0x58025408
 8008174:	5802541c 	.word	0x5802541c
 8008178:	58025430 	.word	0x58025430
 800817c:	58025444 	.word	0x58025444
 8008180:	58025458 	.word	0x58025458
 8008184:	5802546c 	.word	0x5802546c
 8008188:	58025480 	.word	0x58025480
 800818c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	68ba      	ldr	r2, [r7, #8]
 8008196:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	60da      	str	r2, [r3, #12]
}
 80081a0:	e04d      	b.n	800823e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a29      	ldr	r2, [pc, #164]	; (800824c <DMA_SetConfig+0x338>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d022      	beq.n	80081f2 <DMA_SetConfig+0x2de>
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a27      	ldr	r2, [pc, #156]	; (8008250 <DMA_SetConfig+0x33c>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d01d      	beq.n	80081f2 <DMA_SetConfig+0x2de>
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a26      	ldr	r2, [pc, #152]	; (8008254 <DMA_SetConfig+0x340>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d018      	beq.n	80081f2 <DMA_SetConfig+0x2de>
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a24      	ldr	r2, [pc, #144]	; (8008258 <DMA_SetConfig+0x344>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d013      	beq.n	80081f2 <DMA_SetConfig+0x2de>
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a23      	ldr	r2, [pc, #140]	; (800825c <DMA_SetConfig+0x348>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d00e      	beq.n	80081f2 <DMA_SetConfig+0x2de>
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a21      	ldr	r2, [pc, #132]	; (8008260 <DMA_SetConfig+0x34c>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d009      	beq.n	80081f2 <DMA_SetConfig+0x2de>
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a20      	ldr	r2, [pc, #128]	; (8008264 <DMA_SetConfig+0x350>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d004      	beq.n	80081f2 <DMA_SetConfig+0x2de>
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a1e      	ldr	r2, [pc, #120]	; (8008268 <DMA_SetConfig+0x354>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d101      	bne.n	80081f6 <DMA_SetConfig+0x2e2>
 80081f2:	2301      	movs	r3, #1
 80081f4:	e000      	b.n	80081f8 <DMA_SetConfig+0x2e4>
 80081f6:	2300      	movs	r3, #0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d020      	beq.n	800823e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008200:	f003 031f 	and.w	r3, r3, #31
 8008204:	2201      	movs	r2, #1
 8008206:	409a      	lsls	r2, r3
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	683a      	ldr	r2, [r7, #0]
 8008212:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	2b40      	cmp	r3, #64	; 0x40
 800821a:	d108      	bne.n	800822e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	68ba      	ldr	r2, [r7, #8]
 800822a:	60da      	str	r2, [r3, #12]
}
 800822c:	e007      	b.n	800823e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	68ba      	ldr	r2, [r7, #8]
 8008234:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	60da      	str	r2, [r3, #12]
}
 800823e:	bf00      	nop
 8008240:	371c      	adds	r7, #28
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop
 800824c:	58025408 	.word	0x58025408
 8008250:	5802541c 	.word	0x5802541c
 8008254:	58025430 	.word	0x58025430
 8008258:	58025444 	.word	0x58025444
 800825c:	58025458 	.word	0x58025458
 8008260:	5802546c 	.word	0x5802546c
 8008264:	58025480 	.word	0x58025480
 8008268:	58025494 	.word	0x58025494

0800826c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800826c:	b480      	push	{r7}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a42      	ldr	r2, [pc, #264]	; (8008384 <DMA_CalcBaseAndBitshift+0x118>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d04a      	beq.n	8008314 <DMA_CalcBaseAndBitshift+0xa8>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a41      	ldr	r2, [pc, #260]	; (8008388 <DMA_CalcBaseAndBitshift+0x11c>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d045      	beq.n	8008314 <DMA_CalcBaseAndBitshift+0xa8>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a3f      	ldr	r2, [pc, #252]	; (800838c <DMA_CalcBaseAndBitshift+0x120>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d040      	beq.n	8008314 <DMA_CalcBaseAndBitshift+0xa8>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a3e      	ldr	r2, [pc, #248]	; (8008390 <DMA_CalcBaseAndBitshift+0x124>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d03b      	beq.n	8008314 <DMA_CalcBaseAndBitshift+0xa8>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a3c      	ldr	r2, [pc, #240]	; (8008394 <DMA_CalcBaseAndBitshift+0x128>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d036      	beq.n	8008314 <DMA_CalcBaseAndBitshift+0xa8>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a3b      	ldr	r2, [pc, #236]	; (8008398 <DMA_CalcBaseAndBitshift+0x12c>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d031      	beq.n	8008314 <DMA_CalcBaseAndBitshift+0xa8>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a39      	ldr	r2, [pc, #228]	; (800839c <DMA_CalcBaseAndBitshift+0x130>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d02c      	beq.n	8008314 <DMA_CalcBaseAndBitshift+0xa8>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a38      	ldr	r2, [pc, #224]	; (80083a0 <DMA_CalcBaseAndBitshift+0x134>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d027      	beq.n	8008314 <DMA_CalcBaseAndBitshift+0xa8>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a36      	ldr	r2, [pc, #216]	; (80083a4 <DMA_CalcBaseAndBitshift+0x138>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d022      	beq.n	8008314 <DMA_CalcBaseAndBitshift+0xa8>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a35      	ldr	r2, [pc, #212]	; (80083a8 <DMA_CalcBaseAndBitshift+0x13c>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d01d      	beq.n	8008314 <DMA_CalcBaseAndBitshift+0xa8>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a33      	ldr	r2, [pc, #204]	; (80083ac <DMA_CalcBaseAndBitshift+0x140>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d018      	beq.n	8008314 <DMA_CalcBaseAndBitshift+0xa8>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a32      	ldr	r2, [pc, #200]	; (80083b0 <DMA_CalcBaseAndBitshift+0x144>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d013      	beq.n	8008314 <DMA_CalcBaseAndBitshift+0xa8>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a30      	ldr	r2, [pc, #192]	; (80083b4 <DMA_CalcBaseAndBitshift+0x148>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d00e      	beq.n	8008314 <DMA_CalcBaseAndBitshift+0xa8>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a2f      	ldr	r2, [pc, #188]	; (80083b8 <DMA_CalcBaseAndBitshift+0x14c>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d009      	beq.n	8008314 <DMA_CalcBaseAndBitshift+0xa8>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a2d      	ldr	r2, [pc, #180]	; (80083bc <DMA_CalcBaseAndBitshift+0x150>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d004      	beq.n	8008314 <DMA_CalcBaseAndBitshift+0xa8>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a2c      	ldr	r2, [pc, #176]	; (80083c0 <DMA_CalcBaseAndBitshift+0x154>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d101      	bne.n	8008318 <DMA_CalcBaseAndBitshift+0xac>
 8008314:	2301      	movs	r3, #1
 8008316:	e000      	b.n	800831a <DMA_CalcBaseAndBitshift+0xae>
 8008318:	2300      	movs	r3, #0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d024      	beq.n	8008368 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	b2db      	uxtb	r3, r3
 8008324:	3b10      	subs	r3, #16
 8008326:	4a27      	ldr	r2, [pc, #156]	; (80083c4 <DMA_CalcBaseAndBitshift+0x158>)
 8008328:	fba2 2303 	umull	r2, r3, r2, r3
 800832c:	091b      	lsrs	r3, r3, #4
 800832e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f003 0307 	and.w	r3, r3, #7
 8008336:	4a24      	ldr	r2, [pc, #144]	; (80083c8 <DMA_CalcBaseAndBitshift+0x15c>)
 8008338:	5cd3      	ldrb	r3, [r2, r3]
 800833a:	461a      	mov	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2b03      	cmp	r3, #3
 8008344:	d908      	bls.n	8008358 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	461a      	mov	r2, r3
 800834c:	4b1f      	ldr	r3, [pc, #124]	; (80083cc <DMA_CalcBaseAndBitshift+0x160>)
 800834e:	4013      	ands	r3, r2
 8008350:	1d1a      	adds	r2, r3, #4
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	659a      	str	r2, [r3, #88]	; 0x58
 8008356:	e00d      	b.n	8008374 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	461a      	mov	r2, r3
 800835e:	4b1b      	ldr	r3, [pc, #108]	; (80083cc <DMA_CalcBaseAndBitshift+0x160>)
 8008360:	4013      	ands	r3, r2
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	6593      	str	r3, [r2, #88]	; 0x58
 8008366:	e005      	b.n	8008374 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008378:	4618      	mov	r0, r3
 800837a:	3714      	adds	r7, #20
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr
 8008384:	40020010 	.word	0x40020010
 8008388:	40020028 	.word	0x40020028
 800838c:	40020040 	.word	0x40020040
 8008390:	40020058 	.word	0x40020058
 8008394:	40020070 	.word	0x40020070
 8008398:	40020088 	.word	0x40020088
 800839c:	400200a0 	.word	0x400200a0
 80083a0:	400200b8 	.word	0x400200b8
 80083a4:	40020410 	.word	0x40020410
 80083a8:	40020428 	.word	0x40020428
 80083ac:	40020440 	.word	0x40020440
 80083b0:	40020458 	.word	0x40020458
 80083b4:	40020470 	.word	0x40020470
 80083b8:	40020488 	.word	0x40020488
 80083bc:	400204a0 	.word	0x400204a0
 80083c0:	400204b8 	.word	0x400204b8
 80083c4:	aaaaaaab 	.word	0xaaaaaaab
 80083c8:	08020504 	.word	0x08020504
 80083cc:	fffffc00 	.word	0xfffffc00

080083d0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b085      	sub	sp, #20
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083d8:	2300      	movs	r3, #0
 80083da:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	699b      	ldr	r3, [r3, #24]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d120      	bne.n	8008426 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e8:	2b03      	cmp	r3, #3
 80083ea:	d858      	bhi.n	800849e <DMA_CheckFifoParam+0xce>
 80083ec:	a201      	add	r2, pc, #4	; (adr r2, 80083f4 <DMA_CheckFifoParam+0x24>)
 80083ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f2:	bf00      	nop
 80083f4:	08008405 	.word	0x08008405
 80083f8:	08008417 	.word	0x08008417
 80083fc:	08008405 	.word	0x08008405
 8008400:	0800849f 	.word	0x0800849f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008408:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800840c:	2b00      	cmp	r3, #0
 800840e:	d048      	beq.n	80084a2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008414:	e045      	b.n	80084a2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800841e:	d142      	bne.n	80084a6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008424:	e03f      	b.n	80084a6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	699b      	ldr	r3, [r3, #24]
 800842a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800842e:	d123      	bne.n	8008478 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008434:	2b03      	cmp	r3, #3
 8008436:	d838      	bhi.n	80084aa <DMA_CheckFifoParam+0xda>
 8008438:	a201      	add	r2, pc, #4	; (adr r2, 8008440 <DMA_CheckFifoParam+0x70>)
 800843a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800843e:	bf00      	nop
 8008440:	08008451 	.word	0x08008451
 8008444:	08008457 	.word	0x08008457
 8008448:	08008451 	.word	0x08008451
 800844c:	08008469 	.word	0x08008469
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	73fb      	strb	r3, [r7, #15]
        break;
 8008454:	e030      	b.n	80084b8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800845a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800845e:	2b00      	cmp	r3, #0
 8008460:	d025      	beq.n	80084ae <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008466:	e022      	b.n	80084ae <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800846c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008470:	d11f      	bne.n	80084b2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008472:	2301      	movs	r3, #1
 8008474:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008476:	e01c      	b.n	80084b2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800847c:	2b02      	cmp	r3, #2
 800847e:	d902      	bls.n	8008486 <DMA_CheckFifoParam+0xb6>
 8008480:	2b03      	cmp	r3, #3
 8008482:	d003      	beq.n	800848c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008484:	e018      	b.n	80084b8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	73fb      	strb	r3, [r7, #15]
        break;
 800848a:	e015      	b.n	80084b8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008490:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008494:	2b00      	cmp	r3, #0
 8008496:	d00e      	beq.n	80084b6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	73fb      	strb	r3, [r7, #15]
    break;
 800849c:	e00b      	b.n	80084b6 <DMA_CheckFifoParam+0xe6>
        break;
 800849e:	bf00      	nop
 80084a0:	e00a      	b.n	80084b8 <DMA_CheckFifoParam+0xe8>
        break;
 80084a2:	bf00      	nop
 80084a4:	e008      	b.n	80084b8 <DMA_CheckFifoParam+0xe8>
        break;
 80084a6:	bf00      	nop
 80084a8:	e006      	b.n	80084b8 <DMA_CheckFifoParam+0xe8>
        break;
 80084aa:	bf00      	nop
 80084ac:	e004      	b.n	80084b8 <DMA_CheckFifoParam+0xe8>
        break;
 80084ae:	bf00      	nop
 80084b0:	e002      	b.n	80084b8 <DMA_CheckFifoParam+0xe8>
        break;
 80084b2:	bf00      	nop
 80084b4:	e000      	b.n	80084b8 <DMA_CheckFifoParam+0xe8>
    break;
 80084b6:	bf00      	nop
    }
  }

  return status;
 80084b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3714      	adds	r7, #20
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr
 80084c6:	bf00      	nop

080084c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b085      	sub	sp, #20
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a38      	ldr	r2, [pc, #224]	; (80085bc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d022      	beq.n	8008526 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a36      	ldr	r2, [pc, #216]	; (80085c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d01d      	beq.n	8008526 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a35      	ldr	r2, [pc, #212]	; (80085c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d018      	beq.n	8008526 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a33      	ldr	r2, [pc, #204]	; (80085c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d013      	beq.n	8008526 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a32      	ldr	r2, [pc, #200]	; (80085cc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d00e      	beq.n	8008526 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a30      	ldr	r2, [pc, #192]	; (80085d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d009      	beq.n	8008526 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a2f      	ldr	r2, [pc, #188]	; (80085d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d004      	beq.n	8008526 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a2d      	ldr	r2, [pc, #180]	; (80085d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d101      	bne.n	800852a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008526:	2301      	movs	r3, #1
 8008528:	e000      	b.n	800852c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800852a:	2300      	movs	r3, #0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d01a      	beq.n	8008566 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	b2db      	uxtb	r3, r3
 8008536:	3b08      	subs	r3, #8
 8008538:	4a28      	ldr	r2, [pc, #160]	; (80085dc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800853a:	fba2 2303 	umull	r2, r3, r2, r3
 800853e:	091b      	lsrs	r3, r3, #4
 8008540:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008542:	68fa      	ldr	r2, [r7, #12]
 8008544:	4b26      	ldr	r3, [pc, #152]	; (80085e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008546:	4413      	add	r3, r2
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	461a      	mov	r2, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a24      	ldr	r2, [pc, #144]	; (80085e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008554:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f003 031f 	and.w	r3, r3, #31
 800855c:	2201      	movs	r2, #1
 800855e:	409a      	lsls	r2, r3
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008564:	e024      	b.n	80085b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	b2db      	uxtb	r3, r3
 800856c:	3b10      	subs	r3, #16
 800856e:	4a1e      	ldr	r2, [pc, #120]	; (80085e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008570:	fba2 2303 	umull	r2, r3, r2, r3
 8008574:	091b      	lsrs	r3, r3, #4
 8008576:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	4a1c      	ldr	r2, [pc, #112]	; (80085ec <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d806      	bhi.n	800858e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	4a1b      	ldr	r2, [pc, #108]	; (80085f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d902      	bls.n	800858e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	3308      	adds	r3, #8
 800858c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	4b18      	ldr	r3, [pc, #96]	; (80085f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008592:	4413      	add	r3, r2
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	461a      	mov	r2, r3
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4a16      	ldr	r2, [pc, #88]	; (80085f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80085a0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f003 031f 	and.w	r3, r3, #31
 80085a8:	2201      	movs	r2, #1
 80085aa:	409a      	lsls	r2, r3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	669a      	str	r2, [r3, #104]	; 0x68
}
 80085b0:	bf00      	nop
 80085b2:	3714      	adds	r7, #20
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr
 80085bc:	58025408 	.word	0x58025408
 80085c0:	5802541c 	.word	0x5802541c
 80085c4:	58025430 	.word	0x58025430
 80085c8:	58025444 	.word	0x58025444
 80085cc:	58025458 	.word	0x58025458
 80085d0:	5802546c 	.word	0x5802546c
 80085d4:	58025480 	.word	0x58025480
 80085d8:	58025494 	.word	0x58025494
 80085dc:	cccccccd 	.word	0xcccccccd
 80085e0:	16009600 	.word	0x16009600
 80085e4:	58025880 	.word	0x58025880
 80085e8:	aaaaaaab 	.word	0xaaaaaaab
 80085ec:	400204b8 	.word	0x400204b8
 80085f0:	4002040f 	.word	0x4002040f
 80085f4:	10008200 	.word	0x10008200
 80085f8:	40020880 	.word	0x40020880

080085fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b085      	sub	sp, #20
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	b2db      	uxtb	r3, r3
 800860a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d04a      	beq.n	80086a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2b08      	cmp	r3, #8
 8008616:	d847      	bhi.n	80086a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a25      	ldr	r2, [pc, #148]	; (80086b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d022      	beq.n	8008668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a24      	ldr	r2, [pc, #144]	; (80086b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d01d      	beq.n	8008668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a22      	ldr	r2, [pc, #136]	; (80086bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d018      	beq.n	8008668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a21      	ldr	r2, [pc, #132]	; (80086c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d013      	beq.n	8008668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a1f      	ldr	r2, [pc, #124]	; (80086c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d00e      	beq.n	8008668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a1e      	ldr	r2, [pc, #120]	; (80086c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d009      	beq.n	8008668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a1c      	ldr	r2, [pc, #112]	; (80086cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d004      	beq.n	8008668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a1b      	ldr	r2, [pc, #108]	; (80086d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d101      	bne.n	800866c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008668:	2301      	movs	r3, #1
 800866a:	e000      	b.n	800866e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800866c:	2300      	movs	r3, #0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00a      	beq.n	8008688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	4b17      	ldr	r3, [pc, #92]	; (80086d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008676:	4413      	add	r3, r2
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	461a      	mov	r2, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	4a15      	ldr	r2, [pc, #84]	; (80086d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008684:	671a      	str	r2, [r3, #112]	; 0x70
 8008686:	e009      	b.n	800869c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008688:	68fa      	ldr	r2, [r7, #12]
 800868a:	4b14      	ldr	r3, [pc, #80]	; (80086dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800868c:	4413      	add	r3, r2
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	461a      	mov	r2, r3
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	4a11      	ldr	r2, [pc, #68]	; (80086e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800869a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	3b01      	subs	r3, #1
 80086a0:	2201      	movs	r2, #1
 80086a2:	409a      	lsls	r2, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80086a8:	bf00      	nop
 80086aa:	3714      	adds	r7, #20
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr
 80086b4:	58025408 	.word	0x58025408
 80086b8:	5802541c 	.word	0x5802541c
 80086bc:	58025430 	.word	0x58025430
 80086c0:	58025444 	.word	0x58025444
 80086c4:	58025458 	.word	0x58025458
 80086c8:	5802546c 	.word	0x5802546c
 80086cc:	58025480 	.word	0x58025480
 80086d0:	58025494 	.word	0x58025494
 80086d4:	1600963f 	.word	0x1600963f
 80086d8:	58025940 	.word	0x58025940
 80086dc:	1000823f 	.word	0x1000823f
 80086e0:	40020940 	.word	0x40020940

080086e4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b098      	sub	sp, #96	; 0x60
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80086ec:	4a84      	ldr	r2, [pc, #528]	; (8008900 <HAL_FDCAN_Init+0x21c>)
 80086ee:	f107 030c 	add.w	r3, r7, #12
 80086f2:	4611      	mov	r1, r2
 80086f4:	224c      	movs	r2, #76	; 0x4c
 80086f6:	4618      	mov	r0, r3
 80086f8:	f013 fe87 	bl	801c40a <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d101      	bne.n	8008706 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8008702:	2301      	movs	r3, #1
 8008704:	e1c6      	b.n	8008a94 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a7e      	ldr	r2, [pc, #504]	; (8008904 <HAL_FDCAN_Init+0x220>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d106      	bne.n	800871e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008718:	461a      	mov	r2, r3
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008724:	b2db      	uxtb	r3, r3
 8008726:	2b00      	cmp	r3, #0
 8008728:	d106      	bne.n	8008738 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2200      	movs	r2, #0
 800872e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f7fa fd76 	bl	8003224 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	699a      	ldr	r2, [r3, #24]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f022 0210 	bic.w	r2, r2, #16
 8008746:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008748:	f7fb fde6 	bl	8004318 <HAL_GetTick>
 800874c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800874e:	e014      	b.n	800877a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008750:	f7fb fde2 	bl	8004318 <HAL_GetTick>
 8008754:	4602      	mov	r2, r0
 8008756:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008758:	1ad3      	subs	r3, r2, r3
 800875a:	2b0a      	cmp	r3, #10
 800875c:	d90d      	bls.n	800877a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008764:	f043 0201 	orr.w	r2, r3, #1
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2203      	movs	r2, #3
 8008772:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	e18c      	b.n	8008a94 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	699b      	ldr	r3, [r3, #24]
 8008780:	f003 0308 	and.w	r3, r3, #8
 8008784:	2b08      	cmp	r3, #8
 8008786:	d0e3      	beq.n	8008750 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	699a      	ldr	r2, [r3, #24]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f042 0201 	orr.w	r2, r2, #1
 8008796:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008798:	f7fb fdbe 	bl	8004318 <HAL_GetTick>
 800879c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800879e:	e014      	b.n	80087ca <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80087a0:	f7fb fdba 	bl	8004318 <HAL_GetTick>
 80087a4:	4602      	mov	r2, r0
 80087a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087a8:	1ad3      	subs	r3, r2, r3
 80087aa:	2b0a      	cmp	r3, #10
 80087ac:	d90d      	bls.n	80087ca <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80087b4:	f043 0201 	orr.w	r2, r3, #1
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2203      	movs	r2, #3
 80087c2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	e164      	b.n	8008a94 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	699b      	ldr	r3, [r3, #24]
 80087d0:	f003 0301 	and.w	r3, r3, #1
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d0e3      	beq.n	80087a0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	699a      	ldr	r2, [r3, #24]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f042 0202 	orr.w	r2, r2, #2
 80087e6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	7c1b      	ldrb	r3, [r3, #16]
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d108      	bne.n	8008802 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	699a      	ldr	r2, [r3, #24]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087fe:	619a      	str	r2, [r3, #24]
 8008800:	e007      	b.n	8008812 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	699a      	ldr	r2, [r3, #24]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008810:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	7c5b      	ldrb	r3, [r3, #17]
 8008816:	2b01      	cmp	r3, #1
 8008818:	d108      	bne.n	800882c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	699a      	ldr	r2, [r3, #24]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008828:	619a      	str	r2, [r3, #24]
 800882a:	e007      	b.n	800883c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	699a      	ldr	r2, [r3, #24]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800883a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	7c9b      	ldrb	r3, [r3, #18]
 8008840:	2b01      	cmp	r3, #1
 8008842:	d108      	bne.n	8008856 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	699a      	ldr	r2, [r3, #24]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008852:	619a      	str	r2, [r3, #24]
 8008854:	e007      	b.n	8008866 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	699a      	ldr	r2, [r3, #24]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008864:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	699b      	ldr	r3, [r3, #24]
 800886c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	689a      	ldr	r2, [r3, #8]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	430a      	orrs	r2, r1
 800887a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	699a      	ldr	r2, [r3, #24]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800888a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	691a      	ldr	r2, [r3, #16]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f022 0210 	bic.w	r2, r2, #16
 800889a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d108      	bne.n	80088b6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	699a      	ldr	r2, [r3, #24]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f042 0204 	orr.w	r2, r2, #4
 80088b2:	619a      	str	r2, [r3, #24]
 80088b4:	e030      	b.n	8008918 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d02c      	beq.n	8008918 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	d020      	beq.n	8008908 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	699a      	ldr	r2, [r3, #24]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80088d4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	691a      	ldr	r2, [r3, #16]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f042 0210 	orr.w	r2, r2, #16
 80088e4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	2b03      	cmp	r3, #3
 80088ec:	d114      	bne.n	8008918 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	699a      	ldr	r2, [r3, #24]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f042 0220 	orr.w	r2, r2, #32
 80088fc:	619a      	str	r2, [r3, #24]
 80088fe:	e00b      	b.n	8008918 <HAL_FDCAN_Init+0x234>
 8008900:	080203a8 	.word	0x080203a8
 8008904:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	699a      	ldr	r2, [r3, #24]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f042 0220 	orr.w	r2, r2, #32
 8008916:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	699b      	ldr	r3, [r3, #24]
 800891c:	3b01      	subs	r3, #1
 800891e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	69db      	ldr	r3, [r3, #28]
 8008924:	3b01      	subs	r3, #1
 8008926:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008928:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a1b      	ldr	r3, [r3, #32]
 800892e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008930:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	695b      	ldr	r3, [r3, #20]
 8008938:	3b01      	subs	r3, #1
 800893a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008940:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008942:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800894c:	d115      	bne.n	800897a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008952:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008958:	3b01      	subs	r3, #1
 800895a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800895c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008962:	3b01      	subs	r3, #1
 8008964:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8008966:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896e:	3b01      	subs	r3, #1
 8008970:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8008976:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8008978:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800897e:	2b00      	cmp	r3, #0
 8008980:	d00a      	beq.n	8008998 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	430a      	orrs	r2, r1
 8008994:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089a0:	4413      	add	r3, r2
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d011      	beq.n	80089ca <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80089ae:	f023 0107 	bic.w	r1, r3, #7
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	3360      	adds	r3, #96	; 0x60
 80089ba:	443b      	add	r3, r7
 80089bc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	430a      	orrs	r2, r1
 80089c6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d011      	beq.n	80089f6 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80089da:	f023 0107 	bic.w	r1, r3, #7
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	3360      	adds	r3, #96	; 0x60
 80089e6:	443b      	add	r3, r7
 80089e8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	430a      	orrs	r2, r1
 80089f2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d012      	beq.n	8008a24 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008a06:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	3360      	adds	r3, #96	; 0x60
 8008a12:	443b      	add	r3, r7
 8008a14:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8008a18:	011a      	lsls	r2, r3, #4
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	430a      	orrs	r2, r1
 8008a20:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d012      	beq.n	8008a52 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008a34:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	3360      	adds	r3, #96	; 0x60
 8008a40:	443b      	add	r3, r7
 8008a42:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8008a46:	021a      	lsls	r2, r3, #8
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	430a      	orrs	r2, r1
 8008a4e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a11      	ldr	r2, [pc, #68]	; (8008a9c <HAL_FDCAN_Init+0x3b8>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d107      	bne.n	8008a6c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	689a      	ldr	r2, [r3, #8]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	f022 0203 	bic.w	r2, r2, #3
 8008a6a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 f80b 	bl	8008aa0 <FDCAN_CalcultateRamBlockAddresses>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8008a90:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3760      	adds	r7, #96	; 0x60
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	4000a000 	.word	0x4000a000

08008aa0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aac:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8008ab6:	4ba7      	ldr	r3, [pc, #668]	; (8008d54 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008ab8:	4013      	ands	r3, r2
 8008aba:	68ba      	ldr	r2, [r7, #8]
 8008abc:	0091      	lsls	r1, r2, #2
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	6812      	ldr	r2, [r2, #0]
 8008ac2:	430b      	orrs	r3, r1
 8008ac4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ad0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad8:	041a      	lsls	r2, r3, #16
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	430a      	orrs	r2, r1
 8008ae0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae8:	68ba      	ldr	r2, [r7, #8]
 8008aea:	4413      	add	r3, r2
 8008aec:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008af6:	4b97      	ldr	r3, [pc, #604]	; (8008d54 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008af8:	4013      	ands	r3, r2
 8008afa:	68ba      	ldr	r2, [r7, #8]
 8008afc:	0091      	lsls	r1, r2, #2
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	6812      	ldr	r2, [r2, #0]
 8008b02:	430b      	orrs	r3, r1
 8008b04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b10:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b18:	041a      	lsls	r2, r3, #16
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	430a      	orrs	r2, r1
 8008b20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b28:	005b      	lsls	r3, r3, #1
 8008b2a:	68ba      	ldr	r2, [r7, #8]
 8008b2c:	4413      	add	r3, r2
 8008b2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8008b38:	4b86      	ldr	r3, [pc, #536]	; (8008d54 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008b3a:	4013      	ands	r3, r2
 8008b3c:	68ba      	ldr	r2, [r7, #8]
 8008b3e:	0091      	lsls	r1, r2, #2
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	6812      	ldr	r2, [r2, #0]
 8008b44:	430b      	orrs	r3, r1
 8008b46:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008b52:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b5a:	041a      	lsls	r2, r3, #16
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	430a      	orrs	r2, r1
 8008b62:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008b6e:	fb02 f303 	mul.w	r3, r2, r3
 8008b72:	68ba      	ldr	r2, [r7, #8]
 8008b74:	4413      	add	r3, r2
 8008b76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008b80:	4b74      	ldr	r3, [pc, #464]	; (8008d54 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008b82:	4013      	ands	r3, r2
 8008b84:	68ba      	ldr	r2, [r7, #8]
 8008b86:	0091      	lsls	r1, r2, #2
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	6812      	ldr	r2, [r2, #0]
 8008b8c:	430b      	orrs	r3, r1
 8008b8e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b9a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ba2:	041a      	lsls	r2, r3, #16
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	430a      	orrs	r2, r1
 8008baa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008bb6:	fb02 f303 	mul.w	r3, r2, r3
 8008bba:	68ba      	ldr	r2, [r7, #8]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8008bc8:	4b62      	ldr	r3, [pc, #392]	; (8008d54 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008bca:	4013      	ands	r3, r2
 8008bcc:	68ba      	ldr	r2, [r7, #8]
 8008bce:	0091      	lsls	r1, r2, #2
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	6812      	ldr	r2, [r2, #0]
 8008bd4:	430b      	orrs	r3, r1
 8008bd6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008be2:	fb02 f303 	mul.w	r3, r2, r3
 8008be6:	68ba      	ldr	r2, [r7, #8]
 8008be8:	4413      	add	r3, r2
 8008bea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8008bf4:	4b57      	ldr	r3, [pc, #348]	; (8008d54 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008bf6:	4013      	ands	r3, r2
 8008bf8:	68ba      	ldr	r2, [r7, #8]
 8008bfa:	0091      	lsls	r1, r2, #2
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	6812      	ldr	r2, [r2, #0]
 8008c00:	430b      	orrs	r3, r1
 8008c02:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008c0e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c16:	041a      	lsls	r2, r3, #16
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	430a      	orrs	r2, r1
 8008c1e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c26:	005b      	lsls	r3, r3, #1
 8008c28:	68ba      	ldr	r2, [r7, #8]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8008c36:	4b47      	ldr	r3, [pc, #284]	; (8008d54 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008c38:	4013      	ands	r3, r2
 8008c3a:	68ba      	ldr	r2, [r7, #8]
 8008c3c:	0091      	lsls	r1, r2, #2
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	6812      	ldr	r2, [r2, #0]
 8008c42:	430b      	orrs	r3, r1
 8008c44:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008c50:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c58:	041a      	lsls	r2, r3, #16
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	430a      	orrs	r2, r1
 8008c60:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008c6c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c74:	061a      	lsls	r2, r3, #24
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	430a      	orrs	r2, r1
 8008c7c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c84:	4b34      	ldr	r3, [pc, #208]	; (8008d58 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8008c86:	4413      	add	r3, r2
 8008c88:	009a      	lsls	r2, r3, #2
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	441a      	add	r2, r3
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ca6:	00db      	lsls	r3, r3, #3
 8008ca8:	441a      	add	r2, r3
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb6:	6879      	ldr	r1, [r7, #4]
 8008cb8:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8008cba:	fb01 f303 	mul.w	r3, r1, r3
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	441a      	add	r2, r3
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cce:	6879      	ldr	r1, [r7, #4]
 8008cd0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8008cd2:	fb01 f303 	mul.w	r3, r1, r3
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	441a      	add	r2, r3
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ce6:	6879      	ldr	r1, [r7, #4]
 8008ce8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8008cea:	fb01 f303 	mul.w	r3, r1, r3
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	441a      	add	r2, r3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d02:	00db      	lsls	r3, r3, #3
 8008d04:	441a      	add	r2, r3
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d16:	6879      	ldr	r1, [r7, #4]
 8008d18:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8008d1a:	fb01 f303 	mul.w	r3, r1, r3
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	441a      	add	r2, r3
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d32:	6879      	ldr	r1, [r7, #4]
 8008d34:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8008d36:	fb01 f303 	mul.w	r3, r1, r3
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	441a      	add	r2, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d4a:	4a04      	ldr	r2, [pc, #16]	; (8008d5c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d915      	bls.n	8008d7c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8008d50:	e006      	b.n	8008d60 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8008d52:	bf00      	nop
 8008d54:	ffff0003 	.word	0xffff0003
 8008d58:	10002b00 	.word	0x10002b00
 8008d5c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008d66:	f043 0220 	orr.w	r2, r3, #32
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2203      	movs	r2, #3
 8008d74:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e010      	b.n	8008d9e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d80:	60fb      	str	r3, [r7, #12]
 8008d82:	e005      	b.n	8008d90 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2200      	movs	r2, #0
 8008d88:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	3304      	adds	r3, #4
 8008d8e:	60fb      	str	r3, [r7, #12]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d96:	68fa      	ldr	r2, [r7, #12]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d3f3      	bcc.n	8008d84 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008d9c:	2300      	movs	r3, #0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3714      	adds	r7, #20
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr
 8008daa:	bf00      	nop

08008dac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b089      	sub	sp, #36	; 0x24
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008db6:	2300      	movs	r3, #0
 8008db8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008dba:	4b86      	ldr	r3, [pc, #536]	; (8008fd4 <HAL_GPIO_Init+0x228>)
 8008dbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008dbe:	e18c      	b.n	80090da <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	2101      	movs	r1, #1
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8008dcc:	4013      	ands	r3, r2
 8008dce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	f000 817e 	beq.w	80090d4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	f003 0303 	and.w	r3, r3, #3
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d005      	beq.n	8008df0 <HAL_GPIO_Init+0x44>
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	f003 0303 	and.w	r3, r3, #3
 8008dec:	2b02      	cmp	r3, #2
 8008dee:	d130      	bne.n	8008e52 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	005b      	lsls	r3, r3, #1
 8008dfa:	2203      	movs	r2, #3
 8008dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8008e00:	43db      	mvns	r3, r3
 8008e02:	69ba      	ldr	r2, [r7, #24]
 8008e04:	4013      	ands	r3, r2
 8008e06:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	68da      	ldr	r2, [r3, #12]
 8008e0c:	69fb      	ldr	r3, [r7, #28]
 8008e0e:	005b      	lsls	r3, r3, #1
 8008e10:	fa02 f303 	lsl.w	r3, r2, r3
 8008e14:	69ba      	ldr	r2, [r7, #24]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	69ba      	ldr	r2, [r7, #24]
 8008e1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008e26:	2201      	movs	r2, #1
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e2e:	43db      	mvns	r3, r3
 8008e30:	69ba      	ldr	r2, [r7, #24]
 8008e32:	4013      	ands	r3, r2
 8008e34:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	091b      	lsrs	r3, r3, #4
 8008e3c:	f003 0201 	and.w	r2, r3, #1
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	fa02 f303 	lsl.w	r3, r2, r3
 8008e46:	69ba      	ldr	r2, [r7, #24]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	69ba      	ldr	r2, [r7, #24]
 8008e50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	f003 0303 	and.w	r3, r3, #3
 8008e5a:	2b03      	cmp	r3, #3
 8008e5c:	d017      	beq.n	8008e8e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	005b      	lsls	r3, r3, #1
 8008e68:	2203      	movs	r2, #3
 8008e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e6e:	43db      	mvns	r3, r3
 8008e70:	69ba      	ldr	r2, [r7, #24]
 8008e72:	4013      	ands	r3, r2
 8008e74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	689a      	ldr	r2, [r3, #8]
 8008e7a:	69fb      	ldr	r3, [r7, #28]
 8008e7c:	005b      	lsls	r3, r3, #1
 8008e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e82:	69ba      	ldr	r2, [r7, #24]
 8008e84:	4313      	orrs	r3, r2
 8008e86:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	69ba      	ldr	r2, [r7, #24]
 8008e8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	f003 0303 	and.w	r3, r3, #3
 8008e96:	2b02      	cmp	r3, #2
 8008e98:	d123      	bne.n	8008ee2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	08da      	lsrs	r2, r3, #3
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	3208      	adds	r2, #8
 8008ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008ea8:	69fb      	ldr	r3, [r7, #28]
 8008eaa:	f003 0307 	and.w	r3, r3, #7
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	220f      	movs	r2, #15
 8008eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8008eb6:	43db      	mvns	r3, r3
 8008eb8:	69ba      	ldr	r2, [r7, #24]
 8008eba:	4013      	ands	r3, r2
 8008ebc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	691a      	ldr	r2, [r3, #16]
 8008ec2:	69fb      	ldr	r3, [r7, #28]
 8008ec4:	f003 0307 	and.w	r3, r3, #7
 8008ec8:	009b      	lsls	r3, r3, #2
 8008eca:	fa02 f303 	lsl.w	r3, r2, r3
 8008ece:	69ba      	ldr	r2, [r7, #24]
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	08da      	lsrs	r2, r3, #3
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	3208      	adds	r2, #8
 8008edc:	69b9      	ldr	r1, [r7, #24]
 8008ede:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008ee8:	69fb      	ldr	r3, [r7, #28]
 8008eea:	005b      	lsls	r3, r3, #1
 8008eec:	2203      	movs	r2, #3
 8008eee:	fa02 f303 	lsl.w	r3, r2, r3
 8008ef2:	43db      	mvns	r3, r3
 8008ef4:	69ba      	ldr	r2, [r7, #24]
 8008ef6:	4013      	ands	r3, r2
 8008ef8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	f003 0203 	and.w	r2, r3, #3
 8008f02:	69fb      	ldr	r3, [r7, #28]
 8008f04:	005b      	lsls	r3, r3, #1
 8008f06:	fa02 f303 	lsl.w	r3, r2, r3
 8008f0a:	69ba      	ldr	r2, [r7, #24]
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	69ba      	ldr	r2, [r7, #24]
 8008f14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	f000 80d8 	beq.w	80090d4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008f24:	4b2c      	ldr	r3, [pc, #176]	; (8008fd8 <HAL_GPIO_Init+0x22c>)
 8008f26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008f2a:	4a2b      	ldr	r2, [pc, #172]	; (8008fd8 <HAL_GPIO_Init+0x22c>)
 8008f2c:	f043 0302 	orr.w	r3, r3, #2
 8008f30:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008f34:	4b28      	ldr	r3, [pc, #160]	; (8008fd8 <HAL_GPIO_Init+0x22c>)
 8008f36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008f3a:	f003 0302 	and.w	r3, r3, #2
 8008f3e:	60fb      	str	r3, [r7, #12]
 8008f40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008f42:	4a26      	ldr	r2, [pc, #152]	; (8008fdc <HAL_GPIO_Init+0x230>)
 8008f44:	69fb      	ldr	r3, [r7, #28]
 8008f46:	089b      	lsrs	r3, r3, #2
 8008f48:	3302      	adds	r3, #2
 8008f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008f50:	69fb      	ldr	r3, [r7, #28]
 8008f52:	f003 0303 	and.w	r3, r3, #3
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	220f      	movs	r2, #15
 8008f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f5e:	43db      	mvns	r3, r3
 8008f60:	69ba      	ldr	r2, [r7, #24]
 8008f62:	4013      	ands	r3, r2
 8008f64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	4a1d      	ldr	r2, [pc, #116]	; (8008fe0 <HAL_GPIO_Init+0x234>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d04a      	beq.n	8009004 <HAL_GPIO_Init+0x258>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	4a1c      	ldr	r2, [pc, #112]	; (8008fe4 <HAL_GPIO_Init+0x238>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d02b      	beq.n	8008fce <HAL_GPIO_Init+0x222>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	4a1b      	ldr	r2, [pc, #108]	; (8008fe8 <HAL_GPIO_Init+0x23c>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d025      	beq.n	8008fca <HAL_GPIO_Init+0x21e>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	4a1a      	ldr	r2, [pc, #104]	; (8008fec <HAL_GPIO_Init+0x240>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d01f      	beq.n	8008fc6 <HAL_GPIO_Init+0x21a>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	4a19      	ldr	r2, [pc, #100]	; (8008ff0 <HAL_GPIO_Init+0x244>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d019      	beq.n	8008fc2 <HAL_GPIO_Init+0x216>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	4a18      	ldr	r2, [pc, #96]	; (8008ff4 <HAL_GPIO_Init+0x248>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d013      	beq.n	8008fbe <HAL_GPIO_Init+0x212>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	4a17      	ldr	r2, [pc, #92]	; (8008ff8 <HAL_GPIO_Init+0x24c>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d00d      	beq.n	8008fba <HAL_GPIO_Init+0x20e>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	4a16      	ldr	r2, [pc, #88]	; (8008ffc <HAL_GPIO_Init+0x250>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d007      	beq.n	8008fb6 <HAL_GPIO_Init+0x20a>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	4a15      	ldr	r2, [pc, #84]	; (8009000 <HAL_GPIO_Init+0x254>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d101      	bne.n	8008fb2 <HAL_GPIO_Init+0x206>
 8008fae:	2309      	movs	r3, #9
 8008fb0:	e029      	b.n	8009006 <HAL_GPIO_Init+0x25a>
 8008fb2:	230a      	movs	r3, #10
 8008fb4:	e027      	b.n	8009006 <HAL_GPIO_Init+0x25a>
 8008fb6:	2307      	movs	r3, #7
 8008fb8:	e025      	b.n	8009006 <HAL_GPIO_Init+0x25a>
 8008fba:	2306      	movs	r3, #6
 8008fbc:	e023      	b.n	8009006 <HAL_GPIO_Init+0x25a>
 8008fbe:	2305      	movs	r3, #5
 8008fc0:	e021      	b.n	8009006 <HAL_GPIO_Init+0x25a>
 8008fc2:	2304      	movs	r3, #4
 8008fc4:	e01f      	b.n	8009006 <HAL_GPIO_Init+0x25a>
 8008fc6:	2303      	movs	r3, #3
 8008fc8:	e01d      	b.n	8009006 <HAL_GPIO_Init+0x25a>
 8008fca:	2302      	movs	r3, #2
 8008fcc:	e01b      	b.n	8009006 <HAL_GPIO_Init+0x25a>
 8008fce:	2301      	movs	r3, #1
 8008fd0:	e019      	b.n	8009006 <HAL_GPIO_Init+0x25a>
 8008fd2:	bf00      	nop
 8008fd4:	58000080 	.word	0x58000080
 8008fd8:	58024400 	.word	0x58024400
 8008fdc:	58000400 	.word	0x58000400
 8008fe0:	58020000 	.word	0x58020000
 8008fe4:	58020400 	.word	0x58020400
 8008fe8:	58020800 	.word	0x58020800
 8008fec:	58020c00 	.word	0x58020c00
 8008ff0:	58021000 	.word	0x58021000
 8008ff4:	58021400 	.word	0x58021400
 8008ff8:	58021800 	.word	0x58021800
 8008ffc:	58021c00 	.word	0x58021c00
 8009000:	58022400 	.word	0x58022400
 8009004:	2300      	movs	r3, #0
 8009006:	69fa      	ldr	r2, [r7, #28]
 8009008:	f002 0203 	and.w	r2, r2, #3
 800900c:	0092      	lsls	r2, r2, #2
 800900e:	4093      	lsls	r3, r2
 8009010:	69ba      	ldr	r2, [r7, #24]
 8009012:	4313      	orrs	r3, r2
 8009014:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009016:	4938      	ldr	r1, [pc, #224]	; (80090f8 <HAL_GPIO_Init+0x34c>)
 8009018:	69fb      	ldr	r3, [r7, #28]
 800901a:	089b      	lsrs	r3, r3, #2
 800901c:	3302      	adds	r3, #2
 800901e:	69ba      	ldr	r2, [r7, #24]
 8009020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	43db      	mvns	r3, r3
 8009030:	69ba      	ldr	r2, [r7, #24]
 8009032:	4013      	ands	r3, r2
 8009034:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800903e:	2b00      	cmp	r3, #0
 8009040:	d003      	beq.n	800904a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8009042:	69ba      	ldr	r2, [r7, #24]
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	4313      	orrs	r3, r2
 8009048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800904a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800904e:	69bb      	ldr	r3, [r7, #24]
 8009050:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	43db      	mvns	r3, r3
 800905e:	69ba      	ldr	r2, [r7, #24]
 8009060:	4013      	ands	r3, r2
 8009062:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800906c:	2b00      	cmp	r3, #0
 800906e:	d003      	beq.n	8009078 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8009070:	69ba      	ldr	r2, [r7, #24]
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	4313      	orrs	r3, r2
 8009076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009078:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	43db      	mvns	r3, r3
 800908a:	69ba      	ldr	r2, [r7, #24]
 800908c:	4013      	ands	r3, r2
 800908e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009098:	2b00      	cmp	r3, #0
 800909a:	d003      	beq.n	80090a4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800909c:	69ba      	ldr	r2, [r7, #24]
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	4313      	orrs	r3, r2
 80090a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	69ba      	ldr	r2, [r7, #24]
 80090a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	43db      	mvns	r3, r3
 80090b4:	69ba      	ldr	r2, [r7, #24]
 80090b6:	4013      	ands	r3, r2
 80090b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d003      	beq.n	80090ce <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80090c6:	69ba      	ldr	r2, [r7, #24]
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	4313      	orrs	r3, r2
 80090cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	69ba      	ldr	r2, [r7, #24]
 80090d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	3301      	adds	r3, #1
 80090d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	681a      	ldr	r2, [r3, #0]
 80090de:	69fb      	ldr	r3, [r7, #28]
 80090e0:	fa22 f303 	lsr.w	r3, r2, r3
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	f47f ae6b 	bne.w	8008dc0 <HAL_GPIO_Init+0x14>
  }
}
 80090ea:	bf00      	nop
 80090ec:	bf00      	nop
 80090ee:	3724      	adds	r7, #36	; 0x24
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr
 80090f8:	58000400 	.word	0x58000400

080090fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b085      	sub	sp, #20
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	460b      	mov	r3, r1
 8009106:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	691a      	ldr	r2, [r3, #16]
 800910c:	887b      	ldrh	r3, [r7, #2]
 800910e:	4013      	ands	r3, r2
 8009110:	2b00      	cmp	r3, #0
 8009112:	d002      	beq.n	800911a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009114:	2301      	movs	r3, #1
 8009116:	73fb      	strb	r3, [r7, #15]
 8009118:	e001      	b.n	800911e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800911a:	2300      	movs	r3, #0
 800911c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800911e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009120:	4618      	mov	r0, r3
 8009122:	3714      	adds	r7, #20
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	460b      	mov	r3, r1
 8009136:	807b      	strh	r3, [r7, #2]
 8009138:	4613      	mov	r3, r2
 800913a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800913c:	787b      	ldrb	r3, [r7, #1]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d003      	beq.n	800914a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009142:	887a      	ldrh	r2, [r7, #2]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009148:	e003      	b.n	8009152 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800914a:	887b      	ldrh	r3, [r7, #2]
 800914c:	041a      	lsls	r2, r3, #16
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	619a      	str	r2, [r3, #24]
}
 8009152:	bf00      	nop
 8009154:	370c      	adds	r7, #12
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr
	...

08009160 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b082      	sub	sp, #8
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d101      	bne.n	8009172 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	e07f      	b.n	8009272 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009178:	b2db      	uxtb	r3, r3
 800917a:	2b00      	cmp	r3, #0
 800917c:	d106      	bne.n	800918c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2200      	movs	r2, #0
 8009182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f7fa f8b4 	bl	80032f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2224      	movs	r2, #36	; 0x24
 8009190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f022 0201 	bic.w	r2, r2, #1
 80091a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	685a      	ldr	r2, [r3, #4]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80091b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	689a      	ldr	r2, [r3, #8]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80091c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	68db      	ldr	r3, [r3, #12]
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	d107      	bne.n	80091da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	689a      	ldr	r2, [r3, #8]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80091d6:	609a      	str	r2, [r3, #8]
 80091d8:	e006      	b.n	80091e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	689a      	ldr	r2, [r3, #8]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80091e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	68db      	ldr	r3, [r3, #12]
 80091ec:	2b02      	cmp	r3, #2
 80091ee:	d104      	bne.n	80091fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80091f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	6859      	ldr	r1, [r3, #4]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	4b1d      	ldr	r3, [pc, #116]	; (800927c <HAL_I2C_Init+0x11c>)
 8009206:	430b      	orrs	r3, r1
 8009208:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	68da      	ldr	r2, [r3, #12]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009218:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	691a      	ldr	r2, [r3, #16]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	695b      	ldr	r3, [r3, #20]
 8009222:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	699b      	ldr	r3, [r3, #24]
 800922a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	430a      	orrs	r2, r1
 8009232:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	69d9      	ldr	r1, [r3, #28]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6a1a      	ldr	r2, [r3, #32]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	430a      	orrs	r2, r1
 8009242:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	681a      	ldr	r2, [r3, #0]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f042 0201 	orr.w	r2, r2, #1
 8009252:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2220      	movs	r2, #32
 800925e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2200      	movs	r2, #0
 800926c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009270:	2300      	movs	r3, #0
}
 8009272:	4618      	mov	r0, r3
 8009274:	3708      	adds	r7, #8
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
 800927a:	bf00      	nop
 800927c:	02008000 	.word	0x02008000

08009280 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b084      	sub	sp, #16
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	699b      	ldr	r3, [r3, #24]
 800928e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800929c:	2b00      	cmp	r3, #0
 800929e:	d005      	beq.n	80092ac <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092a4:	68ba      	ldr	r2, [r7, #8]
 80092a6:	68f9      	ldr	r1, [r7, #12]
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	4798      	blx	r3
  }
}
 80092ac:	bf00      	nop
 80092ae:	3710      	adds	r7, #16
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b083      	sub	sp, #12
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	2b20      	cmp	r3, #32
 80092c8:	d138      	bne.n	800933c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d101      	bne.n	80092d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80092d4:	2302      	movs	r3, #2
 80092d6:	e032      	b.n	800933e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2201      	movs	r2, #1
 80092dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2224      	movs	r2, #36	; 0x24
 80092e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f022 0201 	bic.w	r2, r2, #1
 80092f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009306:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	6819      	ldr	r1, [r3, #0]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	683a      	ldr	r2, [r7, #0]
 8009314:	430a      	orrs	r2, r1
 8009316:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f042 0201 	orr.w	r2, r2, #1
 8009326:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2220      	movs	r2, #32
 800932c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009338:	2300      	movs	r3, #0
 800933a:	e000      	b.n	800933e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800933c:	2302      	movs	r3, #2
  }
}
 800933e:	4618      	mov	r0, r3
 8009340:	370c      	adds	r7, #12
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr

0800934a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800934a:	b480      	push	{r7}
 800934c:	b085      	sub	sp, #20
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
 8009352:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800935a:	b2db      	uxtb	r3, r3
 800935c:	2b20      	cmp	r3, #32
 800935e:	d139      	bne.n	80093d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009366:	2b01      	cmp	r3, #1
 8009368:	d101      	bne.n	800936e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800936a:	2302      	movs	r3, #2
 800936c:	e033      	b.n	80093d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2201      	movs	r2, #1
 8009372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2224      	movs	r2, #36	; 0x24
 800937a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f022 0201 	bic.w	r2, r2, #1
 800938c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800939c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	021b      	lsls	r3, r3, #8
 80093a2:	68fa      	ldr	r2, [r7, #12]
 80093a4:	4313      	orrs	r3, r2
 80093a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	68fa      	ldr	r2, [r7, #12]
 80093ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	681a      	ldr	r2, [r3, #0]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f042 0201 	orr.w	r2, r2, #1
 80093be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2220      	movs	r2, #32
 80093c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80093d0:	2300      	movs	r3, #0
 80093d2:	e000      	b.n	80093d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80093d4:	2302      	movs	r3, #2
  }
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3714      	adds	r7, #20
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr

080093e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80093e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093e4:	b08f      	sub	sp, #60	; 0x3c
 80093e6:	af0a      	add	r7, sp, #40	; 0x28
 80093e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d101      	bne.n	80093f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80093f0:	2301      	movs	r3, #1
 80093f2:	e116      	b.n	8009622 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8009400:	b2db      	uxtb	r3, r3
 8009402:	2b00      	cmp	r3, #0
 8009404:	d106      	bne.n	8009414 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f011 fcd4 	bl	801adbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2203      	movs	r2, #3
 8009418:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009424:	2b00      	cmp	r3, #0
 8009426:	d102      	bne.n	800942e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4618      	mov	r0, r3
 8009434:	f00a fea5 	bl	8014182 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	603b      	str	r3, [r7, #0]
 800943e:	687e      	ldr	r6, [r7, #4]
 8009440:	466d      	mov	r5, sp
 8009442:	f106 0410 	add.w	r4, r6, #16
 8009446:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009448:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800944a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800944c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800944e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009452:	e885 0003 	stmia.w	r5, {r0, r1}
 8009456:	1d33      	adds	r3, r6, #4
 8009458:	cb0e      	ldmia	r3, {r1, r2, r3}
 800945a:	6838      	ldr	r0, [r7, #0]
 800945c:	f00a fd70 	bl	8013f40 <USB_CoreInit>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d005      	beq.n	8009472 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2202      	movs	r2, #2
 800946a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800946e:	2301      	movs	r3, #1
 8009470:	e0d7      	b.n	8009622 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	2100      	movs	r1, #0
 8009478:	4618      	mov	r0, r3
 800947a:	f00a fe93 	bl	80141a4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800947e:	2300      	movs	r3, #0
 8009480:	73fb      	strb	r3, [r7, #15]
 8009482:	e04a      	b.n	800951a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009484:	7bfa      	ldrb	r2, [r7, #15]
 8009486:	6879      	ldr	r1, [r7, #4]
 8009488:	4613      	mov	r3, r2
 800948a:	00db      	lsls	r3, r3, #3
 800948c:	4413      	add	r3, r2
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	440b      	add	r3, r1
 8009492:	333d      	adds	r3, #61	; 0x3d
 8009494:	2201      	movs	r2, #1
 8009496:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009498:	7bfa      	ldrb	r2, [r7, #15]
 800949a:	6879      	ldr	r1, [r7, #4]
 800949c:	4613      	mov	r3, r2
 800949e:	00db      	lsls	r3, r3, #3
 80094a0:	4413      	add	r3, r2
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	440b      	add	r3, r1
 80094a6:	333c      	adds	r3, #60	; 0x3c
 80094a8:	7bfa      	ldrb	r2, [r7, #15]
 80094aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80094ac:	7bfa      	ldrb	r2, [r7, #15]
 80094ae:	7bfb      	ldrb	r3, [r7, #15]
 80094b0:	b298      	uxth	r0, r3
 80094b2:	6879      	ldr	r1, [r7, #4]
 80094b4:	4613      	mov	r3, r2
 80094b6:	00db      	lsls	r3, r3, #3
 80094b8:	4413      	add	r3, r2
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	440b      	add	r3, r1
 80094be:	3356      	adds	r3, #86	; 0x56
 80094c0:	4602      	mov	r2, r0
 80094c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80094c4:	7bfa      	ldrb	r2, [r7, #15]
 80094c6:	6879      	ldr	r1, [r7, #4]
 80094c8:	4613      	mov	r3, r2
 80094ca:	00db      	lsls	r3, r3, #3
 80094cc:	4413      	add	r3, r2
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	440b      	add	r3, r1
 80094d2:	3340      	adds	r3, #64	; 0x40
 80094d4:	2200      	movs	r2, #0
 80094d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80094d8:	7bfa      	ldrb	r2, [r7, #15]
 80094da:	6879      	ldr	r1, [r7, #4]
 80094dc:	4613      	mov	r3, r2
 80094de:	00db      	lsls	r3, r3, #3
 80094e0:	4413      	add	r3, r2
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	440b      	add	r3, r1
 80094e6:	3344      	adds	r3, #68	; 0x44
 80094e8:	2200      	movs	r2, #0
 80094ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80094ec:	7bfa      	ldrb	r2, [r7, #15]
 80094ee:	6879      	ldr	r1, [r7, #4]
 80094f0:	4613      	mov	r3, r2
 80094f2:	00db      	lsls	r3, r3, #3
 80094f4:	4413      	add	r3, r2
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	440b      	add	r3, r1
 80094fa:	3348      	adds	r3, #72	; 0x48
 80094fc:	2200      	movs	r2, #0
 80094fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009500:	7bfa      	ldrb	r2, [r7, #15]
 8009502:	6879      	ldr	r1, [r7, #4]
 8009504:	4613      	mov	r3, r2
 8009506:	00db      	lsls	r3, r3, #3
 8009508:	4413      	add	r3, r2
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	440b      	add	r3, r1
 800950e:	334c      	adds	r3, #76	; 0x4c
 8009510:	2200      	movs	r2, #0
 8009512:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009514:	7bfb      	ldrb	r3, [r7, #15]
 8009516:	3301      	adds	r3, #1
 8009518:	73fb      	strb	r3, [r7, #15]
 800951a:	7bfa      	ldrb	r2, [r7, #15]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	429a      	cmp	r2, r3
 8009522:	d3af      	bcc.n	8009484 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009524:	2300      	movs	r3, #0
 8009526:	73fb      	strb	r3, [r7, #15]
 8009528:	e044      	b.n	80095b4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800952a:	7bfa      	ldrb	r2, [r7, #15]
 800952c:	6879      	ldr	r1, [r7, #4]
 800952e:	4613      	mov	r3, r2
 8009530:	00db      	lsls	r3, r3, #3
 8009532:	4413      	add	r3, r2
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	440b      	add	r3, r1
 8009538:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800953c:	2200      	movs	r2, #0
 800953e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009540:	7bfa      	ldrb	r2, [r7, #15]
 8009542:	6879      	ldr	r1, [r7, #4]
 8009544:	4613      	mov	r3, r2
 8009546:	00db      	lsls	r3, r3, #3
 8009548:	4413      	add	r3, r2
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	440b      	add	r3, r1
 800954e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8009552:	7bfa      	ldrb	r2, [r7, #15]
 8009554:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009556:	7bfa      	ldrb	r2, [r7, #15]
 8009558:	6879      	ldr	r1, [r7, #4]
 800955a:	4613      	mov	r3, r2
 800955c:	00db      	lsls	r3, r3, #3
 800955e:	4413      	add	r3, r2
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	440b      	add	r3, r1
 8009564:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009568:	2200      	movs	r2, #0
 800956a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800956c:	7bfa      	ldrb	r2, [r7, #15]
 800956e:	6879      	ldr	r1, [r7, #4]
 8009570:	4613      	mov	r3, r2
 8009572:	00db      	lsls	r3, r3, #3
 8009574:	4413      	add	r3, r2
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	440b      	add	r3, r1
 800957a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800957e:	2200      	movs	r2, #0
 8009580:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009582:	7bfa      	ldrb	r2, [r7, #15]
 8009584:	6879      	ldr	r1, [r7, #4]
 8009586:	4613      	mov	r3, r2
 8009588:	00db      	lsls	r3, r3, #3
 800958a:	4413      	add	r3, r2
 800958c:	009b      	lsls	r3, r3, #2
 800958e:	440b      	add	r3, r1
 8009590:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8009594:	2200      	movs	r2, #0
 8009596:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009598:	7bfa      	ldrb	r2, [r7, #15]
 800959a:	6879      	ldr	r1, [r7, #4]
 800959c:	4613      	mov	r3, r2
 800959e:	00db      	lsls	r3, r3, #3
 80095a0:	4413      	add	r3, r2
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	440b      	add	r3, r1
 80095a6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80095aa:	2200      	movs	r2, #0
 80095ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80095ae:	7bfb      	ldrb	r3, [r7, #15]
 80095b0:	3301      	adds	r3, #1
 80095b2:	73fb      	strb	r3, [r7, #15]
 80095b4:	7bfa      	ldrb	r2, [r7, #15]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d3b5      	bcc.n	800952a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	603b      	str	r3, [r7, #0]
 80095c4:	687e      	ldr	r6, [r7, #4]
 80095c6:	466d      	mov	r5, sp
 80095c8:	f106 0410 	add.w	r4, r6, #16
 80095cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80095ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80095d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80095d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80095d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80095d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80095dc:	1d33      	adds	r3, r6, #4
 80095de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80095e0:	6838      	ldr	r0, [r7, #0]
 80095e2:	f00a fe2b 	bl	801423c <USB_DevInit>
 80095e6:	4603      	mov	r3, r0
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d005      	beq.n	80095f8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2202      	movs	r2, #2
 80095f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80095f4:	2301      	movs	r3, #1
 80095f6:	e014      	b.n	8009622 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2201      	movs	r2, #1
 8009604:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800960c:	2b01      	cmp	r3, #1
 800960e:	d102      	bne.n	8009616 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f001 f96f 	bl	800a8f4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4618      	mov	r0, r3
 800961c:	f00b fe6d 	bl	80152fa <USB_DevDisconnect>

  return HAL_OK;
 8009620:	2300      	movs	r3, #0
}
 8009622:	4618      	mov	r0, r3
 8009624:	3714      	adds	r7, #20
 8009626:	46bd      	mov	sp, r7
 8009628:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800962a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800962a:	b580      	push	{r7, lr}
 800962c:	b084      	sub	sp, #16
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800963e:	2b01      	cmp	r3, #1
 8009640:	d101      	bne.n	8009646 <HAL_PCD_Start+0x1c>
 8009642:	2302      	movs	r3, #2
 8009644:	e022      	b.n	800968c <HAL_PCD_Start+0x62>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2201      	movs	r2, #1
 800964a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009656:	2b00      	cmp	r3, #0
 8009658:	d109      	bne.n	800966e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800965e:	2b01      	cmp	r3, #1
 8009660:	d105      	bne.n	800966e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009666:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4618      	mov	r0, r3
 8009674:	f00a fd74 	bl	8014160 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4618      	mov	r0, r3
 800967e:	f00b fe1b 	bl	80152b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800968a:	2300      	movs	r3, #0
}
 800968c:	4618      	mov	r0, r3
 800968e:	3710      	adds	r7, #16
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009694:	b590      	push	{r4, r7, lr}
 8009696:	b08d      	sub	sp, #52	; 0x34
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096a2:	6a3b      	ldr	r3, [r7, #32]
 80096a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4618      	mov	r0, r3
 80096ac:	f00b fed9 	bl	8015462 <USB_GetMode>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	f040 84b7 	bne.w	800a026 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4618      	mov	r0, r3
 80096be:	f00b fe3d 	bl	801533c <USB_ReadInterrupts>
 80096c2:	4603      	mov	r3, r0
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	f000 84ad 	beq.w	800a024 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80096ca:	69fb      	ldr	r3, [r7, #28]
 80096cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	0a1b      	lsrs	r3, r3, #8
 80096d4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4618      	mov	r0, r3
 80096e4:	f00b fe2a 	bl	801533c <USB_ReadInterrupts>
 80096e8:	4603      	mov	r3, r0
 80096ea:	f003 0302 	and.w	r3, r3, #2
 80096ee:	2b02      	cmp	r3, #2
 80096f0:	d107      	bne.n	8009702 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	695a      	ldr	r2, [r3, #20]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f002 0202 	and.w	r2, r2, #2
 8009700:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4618      	mov	r0, r3
 8009708:	f00b fe18 	bl	801533c <USB_ReadInterrupts>
 800970c:	4603      	mov	r3, r0
 800970e:	f003 0310 	and.w	r3, r3, #16
 8009712:	2b10      	cmp	r3, #16
 8009714:	d161      	bne.n	80097da <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	699a      	ldr	r2, [r3, #24]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f022 0210 	bic.w	r2, r2, #16
 8009724:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8009726:	6a3b      	ldr	r3, [r7, #32]
 8009728:	6a1b      	ldr	r3, [r3, #32]
 800972a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800972c:	69bb      	ldr	r3, [r7, #24]
 800972e:	f003 020f 	and.w	r2, r3, #15
 8009732:	4613      	mov	r3, r2
 8009734:	00db      	lsls	r3, r3, #3
 8009736:	4413      	add	r3, r2
 8009738:	009b      	lsls	r3, r3, #2
 800973a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	4413      	add	r3, r2
 8009742:	3304      	adds	r3, #4
 8009744:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009746:	69bb      	ldr	r3, [r7, #24]
 8009748:	0c5b      	lsrs	r3, r3, #17
 800974a:	f003 030f 	and.w	r3, r3, #15
 800974e:	2b02      	cmp	r3, #2
 8009750:	d124      	bne.n	800979c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009752:	69ba      	ldr	r2, [r7, #24]
 8009754:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009758:	4013      	ands	r3, r2
 800975a:	2b00      	cmp	r3, #0
 800975c:	d035      	beq.n	80097ca <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009762:	69bb      	ldr	r3, [r7, #24]
 8009764:	091b      	lsrs	r3, r3, #4
 8009766:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009768:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800976c:	b29b      	uxth	r3, r3
 800976e:	461a      	mov	r2, r3
 8009770:	6a38      	ldr	r0, [r7, #32]
 8009772:	f00b fc4f 	bl	8015014 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	68da      	ldr	r2, [r3, #12]
 800977a:	69bb      	ldr	r3, [r7, #24]
 800977c:	091b      	lsrs	r3, r3, #4
 800977e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009782:	441a      	add	r2, r3
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	695a      	ldr	r2, [r3, #20]
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	091b      	lsrs	r3, r3, #4
 8009790:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009794:	441a      	add	r2, r3
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	615a      	str	r2, [r3, #20]
 800979a:	e016      	b.n	80097ca <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800979c:	69bb      	ldr	r3, [r7, #24]
 800979e:	0c5b      	lsrs	r3, r3, #17
 80097a0:	f003 030f 	and.w	r3, r3, #15
 80097a4:	2b06      	cmp	r3, #6
 80097a6:	d110      	bne.n	80097ca <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80097ae:	2208      	movs	r2, #8
 80097b0:	4619      	mov	r1, r3
 80097b2:	6a38      	ldr	r0, [r7, #32]
 80097b4:	f00b fc2e 	bl	8015014 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	695a      	ldr	r2, [r3, #20]
 80097bc:	69bb      	ldr	r3, [r7, #24]
 80097be:	091b      	lsrs	r3, r3, #4
 80097c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80097c4:	441a      	add	r2, r3
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	699a      	ldr	r2, [r3, #24]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f042 0210 	orr.w	r2, r2, #16
 80097d8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4618      	mov	r0, r3
 80097e0:	f00b fdac 	bl	801533c <USB_ReadInterrupts>
 80097e4:	4603      	mov	r3, r0
 80097e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80097ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80097ee:	f040 80a7 	bne.w	8009940 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80097f2:	2300      	movs	r3, #0
 80097f4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4618      	mov	r0, r3
 80097fc:	f00b fdb1 	bl	8015362 <USB_ReadDevAllOutEpInterrupt>
 8009800:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8009802:	e099      	b.n	8009938 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009806:	f003 0301 	and.w	r3, r3, #1
 800980a:	2b00      	cmp	r3, #0
 800980c:	f000 808e 	beq.w	800992c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009816:	b2d2      	uxtb	r2, r2
 8009818:	4611      	mov	r1, r2
 800981a:	4618      	mov	r0, r3
 800981c:	f00b fdd5 	bl	80153ca <USB_ReadDevOutEPInterrupt>
 8009820:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	f003 0301 	and.w	r3, r3, #1
 8009828:	2b00      	cmp	r3, #0
 800982a:	d00c      	beq.n	8009846 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800982c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982e:	015a      	lsls	r2, r3, #5
 8009830:	69fb      	ldr	r3, [r7, #28]
 8009832:	4413      	add	r3, r2
 8009834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009838:	461a      	mov	r2, r3
 800983a:	2301      	movs	r3, #1
 800983c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800983e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f000 fed1 	bl	800a5e8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	f003 0308 	and.w	r3, r3, #8
 800984c:	2b00      	cmp	r3, #0
 800984e:	d00c      	beq.n	800986a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009852:	015a      	lsls	r2, r3, #5
 8009854:	69fb      	ldr	r3, [r7, #28]
 8009856:	4413      	add	r3, r2
 8009858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800985c:	461a      	mov	r2, r3
 800985e:	2308      	movs	r3, #8
 8009860:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009862:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f000 ffa7 	bl	800a7b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	f003 0310 	and.w	r3, r3, #16
 8009870:	2b00      	cmp	r3, #0
 8009872:	d008      	beq.n	8009886 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009876:	015a      	lsls	r2, r3, #5
 8009878:	69fb      	ldr	r3, [r7, #28]
 800987a:	4413      	add	r3, r2
 800987c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009880:	461a      	mov	r2, r3
 8009882:	2310      	movs	r3, #16
 8009884:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	f003 0302 	and.w	r3, r3, #2
 800988c:	2b00      	cmp	r3, #0
 800988e:	d030      	beq.n	80098f2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8009890:	6a3b      	ldr	r3, [r7, #32]
 8009892:	695b      	ldr	r3, [r3, #20]
 8009894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009898:	2b80      	cmp	r3, #128	; 0x80
 800989a:	d109      	bne.n	80098b0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800989c:	69fb      	ldr	r3, [r7, #28]
 800989e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	69fa      	ldr	r2, [r7, #28]
 80098a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80098aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80098ae:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80098b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098b2:	4613      	mov	r3, r2
 80098b4:	00db      	lsls	r3, r3, #3
 80098b6:	4413      	add	r3, r2
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	4413      	add	r3, r2
 80098c2:	3304      	adds	r3, #4
 80098c4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	78db      	ldrb	r3, [r3, #3]
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d108      	bne.n	80098e0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	2200      	movs	r2, #0
 80098d2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80098d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	4619      	mov	r1, r3
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f011 fb66 	bl	801afac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80098e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e2:	015a      	lsls	r2, r3, #5
 80098e4:	69fb      	ldr	r3, [r7, #28]
 80098e6:	4413      	add	r3, r2
 80098e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ec:	461a      	mov	r2, r3
 80098ee:	2302      	movs	r3, #2
 80098f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	f003 0320 	and.w	r3, r3, #32
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d008      	beq.n	800990e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80098fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fe:	015a      	lsls	r2, r3, #5
 8009900:	69fb      	ldr	r3, [r7, #28]
 8009902:	4413      	add	r3, r2
 8009904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009908:	461a      	mov	r2, r3
 800990a:	2320      	movs	r3, #32
 800990c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009914:	2b00      	cmp	r3, #0
 8009916:	d009      	beq.n	800992c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991a:	015a      	lsls	r2, r3, #5
 800991c:	69fb      	ldr	r3, [r7, #28]
 800991e:	4413      	add	r3, r2
 8009920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009924:	461a      	mov	r2, r3
 8009926:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800992a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800992c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992e:	3301      	adds	r3, #1
 8009930:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009934:	085b      	lsrs	r3, r3, #1
 8009936:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993a:	2b00      	cmp	r3, #0
 800993c:	f47f af62 	bne.w	8009804 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4618      	mov	r0, r3
 8009946:	f00b fcf9 	bl	801533c <USB_ReadInterrupts>
 800994a:	4603      	mov	r3, r0
 800994c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009950:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009954:	f040 80db 	bne.w	8009b0e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4618      	mov	r0, r3
 800995e:	f00b fd1a 	bl	8015396 <USB_ReadDevAllInEpInterrupt>
 8009962:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009964:	2300      	movs	r3, #0
 8009966:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009968:	e0cd      	b.n	8009b06 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800996a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800996c:	f003 0301 	and.w	r3, r3, #1
 8009970:	2b00      	cmp	r3, #0
 8009972:	f000 80c2 	beq.w	8009afa <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800997c:	b2d2      	uxtb	r2, r2
 800997e:	4611      	mov	r1, r2
 8009980:	4618      	mov	r0, r3
 8009982:	f00b fd40 	bl	8015406 <USB_ReadDevInEPInterrupt>
 8009986:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	f003 0301 	and.w	r3, r3, #1
 800998e:	2b00      	cmp	r3, #0
 8009990:	d057      	beq.n	8009a42 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009994:	f003 030f 	and.w	r3, r3, #15
 8009998:	2201      	movs	r2, #1
 800999a:	fa02 f303 	lsl.w	r3, r2, r3
 800999e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80099a0:	69fb      	ldr	r3, [r7, #28]
 80099a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	43db      	mvns	r3, r3
 80099ac:	69f9      	ldr	r1, [r7, #28]
 80099ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80099b2:	4013      	ands	r3, r2
 80099b4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80099b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b8:	015a      	lsls	r2, r3, #5
 80099ba:	69fb      	ldr	r3, [r7, #28]
 80099bc:	4413      	add	r3, r2
 80099be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099c2:	461a      	mov	r2, r3
 80099c4:	2301      	movs	r3, #1
 80099c6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	68db      	ldr	r3, [r3, #12]
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d132      	bne.n	8009a36 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80099d0:	6879      	ldr	r1, [r7, #4]
 80099d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099d4:	4613      	mov	r3, r2
 80099d6:	00db      	lsls	r3, r3, #3
 80099d8:	4413      	add	r3, r2
 80099da:	009b      	lsls	r3, r3, #2
 80099dc:	440b      	add	r3, r1
 80099de:	3348      	adds	r3, #72	; 0x48
 80099e0:	6819      	ldr	r1, [r3, #0]
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099e6:	4613      	mov	r3, r2
 80099e8:	00db      	lsls	r3, r3, #3
 80099ea:	4413      	add	r3, r2
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	4403      	add	r3, r0
 80099f0:	3344      	adds	r3, #68	; 0x44
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4419      	add	r1, r3
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099fa:	4613      	mov	r3, r2
 80099fc:	00db      	lsls	r3, r3, #3
 80099fe:	4413      	add	r3, r2
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	4403      	add	r3, r0
 8009a04:	3348      	adds	r3, #72	; 0x48
 8009a06:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d113      	bne.n	8009a36 <HAL_PCD_IRQHandler+0x3a2>
 8009a0e:	6879      	ldr	r1, [r7, #4]
 8009a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a12:	4613      	mov	r3, r2
 8009a14:	00db      	lsls	r3, r3, #3
 8009a16:	4413      	add	r3, r2
 8009a18:	009b      	lsls	r3, r3, #2
 8009a1a:	440b      	add	r3, r1
 8009a1c:	334c      	adds	r3, #76	; 0x4c
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d108      	bne.n	8009a36 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6818      	ldr	r0, [r3, #0]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009a2e:	461a      	mov	r2, r3
 8009a30:	2101      	movs	r1, #1
 8009a32:	f00b fd49 	bl	80154c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f011 fa30 	bl	801aea2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	f003 0308 	and.w	r3, r3, #8
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d008      	beq.n	8009a5e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4e:	015a      	lsls	r2, r3, #5
 8009a50:	69fb      	ldr	r3, [r7, #28]
 8009a52:	4413      	add	r3, r2
 8009a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a58:	461a      	mov	r2, r3
 8009a5a:	2308      	movs	r3, #8
 8009a5c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	f003 0310 	and.w	r3, r3, #16
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d008      	beq.n	8009a7a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6a:	015a      	lsls	r2, r3, #5
 8009a6c:	69fb      	ldr	r3, [r7, #28]
 8009a6e:	4413      	add	r3, r2
 8009a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a74:	461a      	mov	r2, r3
 8009a76:	2310      	movs	r3, #16
 8009a78:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d008      	beq.n	8009a96 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a86:	015a      	lsls	r2, r3, #5
 8009a88:	69fb      	ldr	r3, [r7, #28]
 8009a8a:	4413      	add	r3, r2
 8009a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a90:	461a      	mov	r2, r3
 8009a92:	2340      	movs	r3, #64	; 0x40
 8009a94:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	f003 0302 	and.w	r3, r3, #2
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d023      	beq.n	8009ae8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8009aa0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009aa2:	6a38      	ldr	r0, [r7, #32]
 8009aa4:	f00a fd28 	bl	80144f8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8009aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009aaa:	4613      	mov	r3, r2
 8009aac:	00db      	lsls	r3, r3, #3
 8009aae:	4413      	add	r3, r2
 8009ab0:	009b      	lsls	r3, r3, #2
 8009ab2:	3338      	adds	r3, #56	; 0x38
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	4413      	add	r3, r2
 8009ab8:	3304      	adds	r3, #4
 8009aba:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	78db      	ldrb	r3, [r3, #3]
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d108      	bne.n	8009ad6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	4619      	mov	r1, r3
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f011 fa7d 	bl	801afd0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad8:	015a      	lsls	r2, r3, #5
 8009ada:	69fb      	ldr	r3, [r7, #28]
 8009adc:	4413      	add	r3, r2
 8009ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	2302      	movs	r3, #2
 8009ae6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d003      	beq.n	8009afa <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009af2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 fcea 	bl	800a4ce <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009afc:	3301      	adds	r3, #1
 8009afe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b02:	085b      	lsrs	r3, r3, #1
 8009b04:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	f47f af2e 	bne.w	800996a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4618      	mov	r0, r3
 8009b14:	f00b fc12 	bl	801533c <USB_ReadInterrupts>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b22:	d122      	bne.n	8009b6a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009b24:	69fb      	ldr	r3, [r7, #28]
 8009b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	69fa      	ldr	r2, [r7, #28]
 8009b2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b32:	f023 0301 	bic.w	r3, r3, #1
 8009b36:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d108      	bne.n	8009b54 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2200      	movs	r2, #0
 8009b46:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009b4a:	2100      	movs	r1, #0
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f000 fef5 	bl	800a93c <HAL_PCDEx_LPM_Callback>
 8009b52:	e002      	b.n	8009b5a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f011 fa1b 	bl	801af90 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	695a      	ldr	r2, [r3, #20]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009b68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f00b fbe4 	bl	801533c <USB_ReadInterrupts>
 8009b74:	4603      	mov	r3, r0
 8009b76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b7e:	d112      	bne.n	8009ba6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009b80:	69fb      	ldr	r3, [r7, #28]
 8009b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b86:	689b      	ldr	r3, [r3, #8]
 8009b88:	f003 0301 	and.w	r3, r3, #1
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d102      	bne.n	8009b96 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f011 f9d7 	bl	801af44 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	695a      	ldr	r2, [r3, #20]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009ba4:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4618      	mov	r0, r3
 8009bac:	f00b fbc6 	bl	801533c <USB_ReadInterrupts>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009bb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009bba:	d121      	bne.n	8009c00 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	695a      	ldr	r2, [r3, #20]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8009bca:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d111      	bne.n	8009bfa <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2201      	movs	r2, #1
 8009bda:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009be4:	089b      	lsrs	r3, r3, #2
 8009be6:	f003 020f 	and.w	r2, r3, #15
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009bf0:	2101      	movs	r1, #1
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 fea2 	bl	800a93c <HAL_PCDEx_LPM_Callback>
 8009bf8:	e002      	b.n	8009c00 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f011 f9a2 	bl	801af44 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4618      	mov	r0, r3
 8009c06:	f00b fb99 	bl	801533c <USB_ReadInterrupts>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009c10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c14:	f040 80b7 	bne.w	8009d86 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009c18:	69fb      	ldr	r3, [r7, #28]
 8009c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	69fa      	ldr	r2, [r7, #28]
 8009c22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c26:	f023 0301 	bic.w	r3, r3, #1
 8009c2a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	2110      	movs	r1, #16
 8009c32:	4618      	mov	r0, r3
 8009c34:	f00a fc60 	bl	80144f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009c38:	2300      	movs	r3, #0
 8009c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c3c:	e046      	b.n	8009ccc <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c40:	015a      	lsls	r2, r3, #5
 8009c42:	69fb      	ldr	r3, [r7, #28]
 8009c44:	4413      	add	r3, r2
 8009c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009c50:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c54:	015a      	lsls	r2, r3, #5
 8009c56:	69fb      	ldr	r3, [r7, #28]
 8009c58:	4413      	add	r3, r2
 8009c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c62:	0151      	lsls	r1, r2, #5
 8009c64:	69fa      	ldr	r2, [r7, #28]
 8009c66:	440a      	add	r2, r1
 8009c68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c6c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009c70:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c74:	015a      	lsls	r2, r3, #5
 8009c76:	69fb      	ldr	r3, [r7, #28]
 8009c78:	4413      	add	r3, r2
 8009c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c7e:	461a      	mov	r2, r3
 8009c80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009c84:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c88:	015a      	lsls	r2, r3, #5
 8009c8a:	69fb      	ldr	r3, [r7, #28]
 8009c8c:	4413      	add	r3, r2
 8009c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c96:	0151      	lsls	r1, r2, #5
 8009c98:	69fa      	ldr	r2, [r7, #28]
 8009c9a:	440a      	add	r2, r1
 8009c9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ca0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009ca4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ca8:	015a      	lsls	r2, r3, #5
 8009caa:	69fb      	ldr	r3, [r7, #28]
 8009cac:	4413      	add	r3, r2
 8009cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009cb6:	0151      	lsls	r1, r2, #5
 8009cb8:	69fa      	ldr	r2, [r7, #28]
 8009cba:	440a      	add	r2, r1
 8009cbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cc0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009cc4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cc8:	3301      	adds	r3, #1
 8009cca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	685b      	ldr	r3, [r3, #4]
 8009cd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d3b3      	bcc.n	8009c3e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009cd6:	69fb      	ldr	r3, [r7, #28]
 8009cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cdc:	69db      	ldr	r3, [r3, #28]
 8009cde:	69fa      	ldr	r2, [r7, #28]
 8009ce0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ce4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009ce8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d016      	beq.n	8009d20 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009cf2:	69fb      	ldr	r3, [r7, #28]
 8009cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009cfc:	69fa      	ldr	r2, [r7, #28]
 8009cfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d02:	f043 030b 	orr.w	r3, r3, #11
 8009d06:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009d0a:	69fb      	ldr	r3, [r7, #28]
 8009d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d12:	69fa      	ldr	r2, [r7, #28]
 8009d14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d18:	f043 030b 	orr.w	r3, r3, #11
 8009d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8009d1e:	e015      	b.n	8009d4c <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009d20:	69fb      	ldr	r3, [r7, #28]
 8009d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d26:	695a      	ldr	r2, [r3, #20]
 8009d28:	69fb      	ldr	r3, [r7, #28]
 8009d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d2e:	4619      	mov	r1, r3
 8009d30:	f242 032b 	movw	r3, #8235	; 0x202b
 8009d34:	4313      	orrs	r3, r2
 8009d36:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009d38:	69fb      	ldr	r3, [r7, #28]
 8009d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d3e:	691b      	ldr	r3, [r3, #16]
 8009d40:	69fa      	ldr	r2, [r7, #28]
 8009d42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d46:	f043 030b 	orr.w	r3, r3, #11
 8009d4a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	69fa      	ldr	r2, [r7, #28]
 8009d56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d5a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009d5e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6818      	ldr	r0, [r3, #0]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	68db      	ldr	r3, [r3, #12]
 8009d68:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009d70:	461a      	mov	r2, r3
 8009d72:	f00b fba9 	bl	80154c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	695a      	ldr	r2, [r3, #20]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009d84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f00b fad6 	bl	801533c <USB_ReadInterrupts>
 8009d90:	4603      	mov	r3, r0
 8009d92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d9a:	d124      	bne.n	8009de6 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4618      	mov	r0, r3
 8009da2:	f00b fb6d 	bl	8015480 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4618      	mov	r0, r3
 8009dac:	f00a fc21 	bl	80145f2 <USB_GetDevSpeed>
 8009db0:	4603      	mov	r3, r0
 8009db2:	461a      	mov	r2, r3
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681c      	ldr	r4, [r3, #0]
 8009dbc:	f001 fd88 	bl	800b8d0 <HAL_RCC_GetHCLKFreq>
 8009dc0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009dc6:	b2db      	uxtb	r3, r3
 8009dc8:	461a      	mov	r2, r3
 8009dca:	4620      	mov	r0, r4
 8009dcc:	f00a f926 	bl	801401c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f011 f88e 	bl	801aef2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	695a      	ldr	r2, [r3, #20]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009de4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4618      	mov	r0, r3
 8009dec:	f00b faa6 	bl	801533c <USB_ReadInterrupts>
 8009df0:	4603      	mov	r3, r0
 8009df2:	f003 0308 	and.w	r3, r3, #8
 8009df6:	2b08      	cmp	r3, #8
 8009df8:	d10a      	bne.n	8009e10 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f011 f86b 	bl	801aed6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	695a      	ldr	r2, [r3, #20]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f002 0208 	and.w	r2, r2, #8
 8009e0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4618      	mov	r0, r3
 8009e16:	f00b fa91 	bl	801533c <USB_ReadInterrupts>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e20:	2b80      	cmp	r3, #128	; 0x80
 8009e22:	d122      	bne.n	8009e6a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8009e24:	6a3b      	ldr	r3, [r7, #32]
 8009e26:	699b      	ldr	r3, [r3, #24]
 8009e28:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009e2c:	6a3b      	ldr	r3, [r7, #32]
 8009e2e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009e30:	2301      	movs	r3, #1
 8009e32:	627b      	str	r3, [r7, #36]	; 0x24
 8009e34:	e014      	b.n	8009e60 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009e36:	6879      	ldr	r1, [r7, #4]
 8009e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e3a:	4613      	mov	r3, r2
 8009e3c:	00db      	lsls	r3, r3, #3
 8009e3e:	4413      	add	r3, r2
 8009e40:	009b      	lsls	r3, r3, #2
 8009e42:	440b      	add	r3, r1
 8009e44:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009e48:	781b      	ldrb	r3, [r3, #0]
 8009e4a:	2b01      	cmp	r3, #1
 8009e4c:	d105      	bne.n	8009e5a <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e50:	b2db      	uxtb	r3, r3
 8009e52:	4619      	mov	r1, r3
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f000 fb09 	bl	800a46c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5c:	3301      	adds	r3, #1
 8009e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d3e5      	bcc.n	8009e36 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f00b fa64 	bl	801533c <USB_ReadInterrupts>
 8009e74:	4603      	mov	r3, r0
 8009e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e7e:	d13b      	bne.n	8009ef8 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009e80:	2301      	movs	r3, #1
 8009e82:	627b      	str	r3, [r7, #36]	; 0x24
 8009e84:	e02b      	b.n	8009ede <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e88:	015a      	lsls	r2, r3, #5
 8009e8a:	69fb      	ldr	r3, [r7, #28]
 8009e8c:	4413      	add	r3, r2
 8009e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009e96:	6879      	ldr	r1, [r7, #4]
 8009e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e9a:	4613      	mov	r3, r2
 8009e9c:	00db      	lsls	r3, r3, #3
 8009e9e:	4413      	add	r3, r2
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	440b      	add	r3, r1
 8009ea4:	3340      	adds	r3, #64	; 0x40
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d115      	bne.n	8009ed8 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8009eac:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	da12      	bge.n	8009ed8 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009eb2:	6879      	ldr	r1, [r7, #4]
 8009eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009eb6:	4613      	mov	r3, r2
 8009eb8:	00db      	lsls	r3, r3, #3
 8009eba:	4413      	add	r3, r2
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	440b      	add	r3, r1
 8009ec0:	333f      	adds	r3, #63	; 0x3f
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8009ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 faca 	bl	800a46c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eda:	3301      	adds	r3, #1
 8009edc:	627b      	str	r3, [r7, #36]	; 0x24
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d3ce      	bcc.n	8009e86 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	695a      	ldr	r2, [r3, #20]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8009ef6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4618      	mov	r0, r3
 8009efe:	f00b fa1d 	bl	801533c <USB_ReadInterrupts>
 8009f02:	4603      	mov	r3, r0
 8009f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009f08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f0c:	d155      	bne.n	8009fba <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009f0e:	2301      	movs	r3, #1
 8009f10:	627b      	str	r3, [r7, #36]	; 0x24
 8009f12:	e045      	b.n	8009fa0 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8009f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f16:	015a      	lsls	r2, r3, #5
 8009f18:	69fb      	ldr	r3, [r7, #28]
 8009f1a:	4413      	add	r3, r2
 8009f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009f24:	6879      	ldr	r1, [r7, #4]
 8009f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f28:	4613      	mov	r3, r2
 8009f2a:	00db      	lsls	r3, r3, #3
 8009f2c:	4413      	add	r3, r2
 8009f2e:	009b      	lsls	r3, r3, #2
 8009f30:	440b      	add	r3, r1
 8009f32:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	d12e      	bne.n	8009f9a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009f3c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	da2b      	bge.n	8009f9a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8009f42:	69bb      	ldr	r3, [r7, #24]
 8009f44:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8009f4e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d121      	bne.n	8009f9a <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8009f56:	6879      	ldr	r1, [r7, #4]
 8009f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f5a:	4613      	mov	r3, r2
 8009f5c:	00db      	lsls	r3, r3, #3
 8009f5e:	4413      	add	r3, r2
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	440b      	add	r3, r1
 8009f64:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009f68:	2201      	movs	r2, #1
 8009f6a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009f6c:	6a3b      	ldr	r3, [r7, #32]
 8009f6e:	699b      	ldr	r3, [r3, #24]
 8009f70:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009f74:	6a3b      	ldr	r3, [r7, #32]
 8009f76:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8009f78:	6a3b      	ldr	r3, [r7, #32]
 8009f7a:	695b      	ldr	r3, [r3, #20]
 8009f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d10a      	bne.n	8009f9a <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8009f84:	69fb      	ldr	r3, [r7, #28]
 8009f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	69fa      	ldr	r2, [r7, #28]
 8009f8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009f96:	6053      	str	r3, [r2, #4]
            break;
 8009f98:	e007      	b.n	8009faa <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d3b4      	bcc.n	8009f14 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	695a      	ldr	r2, [r3, #20]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8009fb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f00b f9bc 	bl	801533c <USB_ReadInterrupts>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fce:	d10a      	bne.n	8009fe6 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f011 f80f 	bl	801aff4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	695a      	ldr	r2, [r3, #20]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009fe4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4618      	mov	r0, r3
 8009fec:	f00b f9a6 	bl	801533c <USB_ReadInterrupts>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	f003 0304 	and.w	r3, r3, #4
 8009ff6:	2b04      	cmp	r3, #4
 8009ff8:	d115      	bne.n	800a026 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	685b      	ldr	r3, [r3, #4]
 800a000:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a002:	69bb      	ldr	r3, [r7, #24]
 800a004:	f003 0304 	and.w	r3, r3, #4
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d002      	beq.n	800a012 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f010 ffff 	bl	801b010 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	6859      	ldr	r1, [r3, #4]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	69ba      	ldr	r2, [r7, #24]
 800a01e:	430a      	orrs	r2, r1
 800a020:	605a      	str	r2, [r3, #4]
 800a022:	e000      	b.n	800a026 <HAL_PCD_IRQHandler+0x992>
      return;
 800a024:	bf00      	nop
    }
  }
}
 800a026:	3734      	adds	r7, #52	; 0x34
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd90      	pop	{r4, r7, pc}

0800a02c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	460b      	mov	r3, r1
 800a036:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a03e:	2b01      	cmp	r3, #1
 800a040:	d101      	bne.n	800a046 <HAL_PCD_SetAddress+0x1a>
 800a042:	2302      	movs	r3, #2
 800a044:	e013      	b.n	800a06e <HAL_PCD_SetAddress+0x42>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2201      	movs	r2, #1
 800a04a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	78fa      	ldrb	r2, [r7, #3]
 800a052:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	78fa      	ldrb	r2, [r7, #3]
 800a05c:	4611      	mov	r1, r2
 800a05e:	4618      	mov	r0, r3
 800a060:	f00b f904 	bl	801526c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a06c:	2300      	movs	r3, #0
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3708      	adds	r7, #8
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b084      	sub	sp, #16
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
 800a07e:	4608      	mov	r0, r1
 800a080:	4611      	mov	r1, r2
 800a082:	461a      	mov	r2, r3
 800a084:	4603      	mov	r3, r0
 800a086:	70fb      	strb	r3, [r7, #3]
 800a088:	460b      	mov	r3, r1
 800a08a:	803b      	strh	r3, [r7, #0]
 800a08c:	4613      	mov	r3, r2
 800a08e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a090:	2300      	movs	r3, #0
 800a092:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a094:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	da0f      	bge.n	800a0bc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a09c:	78fb      	ldrb	r3, [r7, #3]
 800a09e:	f003 020f 	and.w	r2, r3, #15
 800a0a2:	4613      	mov	r3, r2
 800a0a4:	00db      	lsls	r3, r3, #3
 800a0a6:	4413      	add	r3, r2
 800a0a8:	009b      	lsls	r3, r3, #2
 800a0aa:	3338      	adds	r3, #56	; 0x38
 800a0ac:	687a      	ldr	r2, [r7, #4]
 800a0ae:	4413      	add	r3, r2
 800a0b0:	3304      	adds	r3, #4
 800a0b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	705a      	strb	r2, [r3, #1]
 800a0ba:	e00f      	b.n	800a0dc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a0bc:	78fb      	ldrb	r3, [r7, #3]
 800a0be:	f003 020f 	and.w	r2, r3, #15
 800a0c2:	4613      	mov	r3, r2
 800a0c4:	00db      	lsls	r3, r3, #3
 800a0c6:	4413      	add	r3, r2
 800a0c8:	009b      	lsls	r3, r3, #2
 800a0ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a0ce:	687a      	ldr	r2, [r7, #4]
 800a0d0:	4413      	add	r3, r2
 800a0d2:	3304      	adds	r3, #4
 800a0d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a0dc:	78fb      	ldrb	r3, [r7, #3]
 800a0de:	f003 030f 	and.w	r3, r3, #15
 800a0e2:	b2da      	uxtb	r2, r3
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a0e8:	883a      	ldrh	r2, [r7, #0]
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	78ba      	ldrb	r2, [r7, #2]
 800a0f2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	785b      	ldrb	r3, [r3, #1]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d004      	beq.n	800a106 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	781b      	ldrb	r3, [r3, #0]
 800a100:	b29a      	uxth	r2, r3
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a106:	78bb      	ldrb	r3, [r7, #2]
 800a108:	2b02      	cmp	r3, #2
 800a10a:	d102      	bne.n	800a112 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2200      	movs	r2, #0
 800a110:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d101      	bne.n	800a120 <HAL_PCD_EP_Open+0xaa>
 800a11c:	2302      	movs	r3, #2
 800a11e:	e00e      	b.n	800a13e <HAL_PCD_EP_Open+0xc8>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2201      	movs	r2, #1
 800a124:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	68f9      	ldr	r1, [r7, #12]
 800a12e:	4618      	mov	r0, r3
 800a130:	f00a fa84 	bl	801463c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2200      	movs	r2, #0
 800a138:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800a13c:	7afb      	ldrb	r3, [r7, #11]
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3710      	adds	r7, #16
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}

0800a146 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a146:	b580      	push	{r7, lr}
 800a148:	b084      	sub	sp, #16
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
 800a14e:	460b      	mov	r3, r1
 800a150:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a152:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a156:	2b00      	cmp	r3, #0
 800a158:	da0f      	bge.n	800a17a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a15a:	78fb      	ldrb	r3, [r7, #3]
 800a15c:	f003 020f 	and.w	r2, r3, #15
 800a160:	4613      	mov	r3, r2
 800a162:	00db      	lsls	r3, r3, #3
 800a164:	4413      	add	r3, r2
 800a166:	009b      	lsls	r3, r3, #2
 800a168:	3338      	adds	r3, #56	; 0x38
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	4413      	add	r3, r2
 800a16e:	3304      	adds	r3, #4
 800a170:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2201      	movs	r2, #1
 800a176:	705a      	strb	r2, [r3, #1]
 800a178:	e00f      	b.n	800a19a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a17a:	78fb      	ldrb	r3, [r7, #3]
 800a17c:	f003 020f 	and.w	r2, r3, #15
 800a180:	4613      	mov	r3, r2
 800a182:	00db      	lsls	r3, r3, #3
 800a184:	4413      	add	r3, r2
 800a186:	009b      	lsls	r3, r3, #2
 800a188:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a18c:	687a      	ldr	r2, [r7, #4]
 800a18e:	4413      	add	r3, r2
 800a190:	3304      	adds	r3, #4
 800a192:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2200      	movs	r2, #0
 800a198:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800a19a:	78fb      	ldrb	r3, [r7, #3]
 800a19c:	f003 030f 	and.w	r3, r3, #15
 800a1a0:	b2da      	uxtb	r2, r3
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d101      	bne.n	800a1b4 <HAL_PCD_EP_Close+0x6e>
 800a1b0:	2302      	movs	r3, #2
 800a1b2:	e00e      	b.n	800a1d2 <HAL_PCD_EP_Close+0x8c>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	68f9      	ldr	r1, [r7, #12]
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f00a fac2 	bl	801474c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800a1d0:	2300      	movs	r3, #0
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3710      	adds	r7, #16
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}

0800a1da <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a1da:	b580      	push	{r7, lr}
 800a1dc:	b086      	sub	sp, #24
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	60f8      	str	r0, [r7, #12]
 800a1e2:	607a      	str	r2, [r7, #4]
 800a1e4:	603b      	str	r3, [r7, #0]
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a1ea:	7afb      	ldrb	r3, [r7, #11]
 800a1ec:	f003 020f 	and.w	r2, r3, #15
 800a1f0:	4613      	mov	r3, r2
 800a1f2:	00db      	lsls	r3, r3, #3
 800a1f4:	4413      	add	r3, r2
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a1fc:	68fa      	ldr	r2, [r7, #12]
 800a1fe:	4413      	add	r3, r2
 800a200:	3304      	adds	r3, #4
 800a202:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	687a      	ldr	r2, [r7, #4]
 800a208:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	683a      	ldr	r2, [r7, #0]
 800a20e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	2200      	movs	r2, #0
 800a214:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	2200      	movs	r2, #0
 800a21a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a21c:	7afb      	ldrb	r3, [r7, #11]
 800a21e:	f003 030f 	and.w	r3, r3, #15
 800a222:	b2da      	uxtb	r2, r3
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	68db      	ldr	r3, [r3, #12]
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d102      	bne.n	800a236 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a230:	687a      	ldr	r2, [r7, #4]
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	6818      	ldr	r0, [r3, #0]
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	68db      	ldr	r3, [r3, #12]
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	461a      	mov	r2, r3
 800a242:	6979      	ldr	r1, [r7, #20]
 800a244:	f00a fb5e 	bl	8014904 <USB_EPStartXfer>

  return HAL_OK;
 800a248:	2300      	movs	r3, #0
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3718      	adds	r7, #24
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}

0800a252 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a252:	b480      	push	{r7}
 800a254:	b083      	sub	sp, #12
 800a256:	af00      	add	r7, sp, #0
 800a258:	6078      	str	r0, [r7, #4]
 800a25a:	460b      	mov	r3, r1
 800a25c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a25e:	78fb      	ldrb	r3, [r7, #3]
 800a260:	f003 020f 	and.w	r2, r3, #15
 800a264:	6879      	ldr	r1, [r7, #4]
 800a266:	4613      	mov	r3, r2
 800a268:	00db      	lsls	r3, r3, #3
 800a26a:	4413      	add	r3, r2
 800a26c:	009b      	lsls	r3, r3, #2
 800a26e:	440b      	add	r3, r1
 800a270:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800a274:	681b      	ldr	r3, [r3, #0]
}
 800a276:	4618      	mov	r0, r3
 800a278:	370c      	adds	r7, #12
 800a27a:	46bd      	mov	sp, r7
 800a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a280:	4770      	bx	lr

0800a282 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a282:	b580      	push	{r7, lr}
 800a284:	b086      	sub	sp, #24
 800a286:	af00      	add	r7, sp, #0
 800a288:	60f8      	str	r0, [r7, #12]
 800a28a:	607a      	str	r2, [r7, #4]
 800a28c:	603b      	str	r3, [r7, #0]
 800a28e:	460b      	mov	r3, r1
 800a290:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a292:	7afb      	ldrb	r3, [r7, #11]
 800a294:	f003 020f 	and.w	r2, r3, #15
 800a298:	4613      	mov	r3, r2
 800a29a:	00db      	lsls	r3, r3, #3
 800a29c:	4413      	add	r3, r2
 800a29e:	009b      	lsls	r3, r3, #2
 800a2a0:	3338      	adds	r3, #56	; 0x38
 800a2a2:	68fa      	ldr	r2, [r7, #12]
 800a2a4:	4413      	add	r3, r2
 800a2a6:	3304      	adds	r3, #4
 800a2a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	687a      	ldr	r2, [r7, #4]
 800a2ae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	683a      	ldr	r2, [r7, #0]
 800a2b4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	2201      	movs	r2, #1
 800a2c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a2c2:	7afb      	ldrb	r3, [r7, #11]
 800a2c4:	f003 030f 	and.w	r3, r3, #15
 800a2c8:	b2da      	uxtb	r2, r3
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	68db      	ldr	r3, [r3, #12]
 800a2d2:	2b01      	cmp	r3, #1
 800a2d4:	d102      	bne.n	800a2dc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a2d6:	687a      	ldr	r2, [r7, #4]
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	6818      	ldr	r0, [r3, #0]
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	68db      	ldr	r3, [r3, #12]
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	6979      	ldr	r1, [r7, #20]
 800a2ea:	f00a fb0b 	bl	8014904 <USB_EPStartXfer>

  return HAL_OK;
 800a2ee:	2300      	movs	r3, #0
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3718      	adds	r7, #24
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	460b      	mov	r3, r1
 800a302:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a304:	78fb      	ldrb	r3, [r7, #3]
 800a306:	f003 020f 	and.w	r2, r3, #15
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	429a      	cmp	r2, r3
 800a310:	d901      	bls.n	800a316 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a312:	2301      	movs	r3, #1
 800a314:	e050      	b.n	800a3b8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a316:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	da0f      	bge.n	800a33e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a31e:	78fb      	ldrb	r3, [r7, #3]
 800a320:	f003 020f 	and.w	r2, r3, #15
 800a324:	4613      	mov	r3, r2
 800a326:	00db      	lsls	r3, r3, #3
 800a328:	4413      	add	r3, r2
 800a32a:	009b      	lsls	r3, r3, #2
 800a32c:	3338      	adds	r3, #56	; 0x38
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	4413      	add	r3, r2
 800a332:	3304      	adds	r3, #4
 800a334:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2201      	movs	r2, #1
 800a33a:	705a      	strb	r2, [r3, #1]
 800a33c:	e00d      	b.n	800a35a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a33e:	78fa      	ldrb	r2, [r7, #3]
 800a340:	4613      	mov	r3, r2
 800a342:	00db      	lsls	r3, r3, #3
 800a344:	4413      	add	r3, r2
 800a346:	009b      	lsls	r3, r3, #2
 800a348:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	4413      	add	r3, r2
 800a350:	3304      	adds	r3, #4
 800a352:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2200      	movs	r2, #0
 800a358:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2201      	movs	r2, #1
 800a35e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a360:	78fb      	ldrb	r3, [r7, #3]
 800a362:	f003 030f 	and.w	r3, r3, #15
 800a366:	b2da      	uxtb	r2, r3
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a372:	2b01      	cmp	r3, #1
 800a374:	d101      	bne.n	800a37a <HAL_PCD_EP_SetStall+0x82>
 800a376:	2302      	movs	r3, #2
 800a378:	e01e      	b.n	800a3b8 <HAL_PCD_EP_SetStall+0xc0>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2201      	movs	r2, #1
 800a37e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	68f9      	ldr	r1, [r7, #12]
 800a388:	4618      	mov	r0, r3
 800a38a:	f00a fe9b 	bl	80150c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a38e:	78fb      	ldrb	r3, [r7, #3]
 800a390:	f003 030f 	and.w	r3, r3, #15
 800a394:	2b00      	cmp	r3, #0
 800a396:	d10a      	bne.n	800a3ae <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6818      	ldr	r0, [r3, #0]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	68db      	ldr	r3, [r3, #12]
 800a3a0:	b2d9      	uxtb	r1, r3
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a3a8:	461a      	mov	r2, r3
 800a3aa:	f00b f88d 	bl	80154c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a3b6:	2300      	movs	r3, #0
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3710      	adds	r7, #16
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}

0800a3c0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b084      	sub	sp, #16
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	460b      	mov	r3, r1
 800a3ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a3cc:	78fb      	ldrb	r3, [r7, #3]
 800a3ce:	f003 020f 	and.w	r2, r3, #15
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d901      	bls.n	800a3de <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a3da:	2301      	movs	r3, #1
 800a3dc:	e042      	b.n	800a464 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a3de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	da0f      	bge.n	800a406 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a3e6:	78fb      	ldrb	r3, [r7, #3]
 800a3e8:	f003 020f 	and.w	r2, r3, #15
 800a3ec:	4613      	mov	r3, r2
 800a3ee:	00db      	lsls	r3, r3, #3
 800a3f0:	4413      	add	r3, r2
 800a3f2:	009b      	lsls	r3, r3, #2
 800a3f4:	3338      	adds	r3, #56	; 0x38
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	4413      	add	r3, r2
 800a3fa:	3304      	adds	r3, #4
 800a3fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2201      	movs	r2, #1
 800a402:	705a      	strb	r2, [r3, #1]
 800a404:	e00f      	b.n	800a426 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a406:	78fb      	ldrb	r3, [r7, #3]
 800a408:	f003 020f 	and.w	r2, r3, #15
 800a40c:	4613      	mov	r3, r2
 800a40e:	00db      	lsls	r3, r3, #3
 800a410:	4413      	add	r3, r2
 800a412:	009b      	lsls	r3, r3, #2
 800a414:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	4413      	add	r3, r2
 800a41c:	3304      	adds	r3, #4
 800a41e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2200      	movs	r2, #0
 800a424:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2200      	movs	r2, #0
 800a42a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a42c:	78fb      	ldrb	r3, [r7, #3]
 800a42e:	f003 030f 	and.w	r3, r3, #15
 800a432:	b2da      	uxtb	r2, r3
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a43e:	2b01      	cmp	r3, #1
 800a440:	d101      	bne.n	800a446 <HAL_PCD_EP_ClrStall+0x86>
 800a442:	2302      	movs	r3, #2
 800a444:	e00e      	b.n	800a464 <HAL_PCD_EP_ClrStall+0xa4>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2201      	movs	r2, #1
 800a44a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	68f9      	ldr	r1, [r7, #12]
 800a454:	4618      	mov	r0, r3
 800a456:	f00a fea3 	bl	80151a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2200      	movs	r2, #0
 800a45e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a462:	2300      	movs	r3, #0
}
 800a464:	4618      	mov	r0, r3
 800a466:	3710      	adds	r7, #16
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	460b      	mov	r3, r1
 800a476:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800a478:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	da0c      	bge.n	800a49a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a480:	78fb      	ldrb	r3, [r7, #3]
 800a482:	f003 020f 	and.w	r2, r3, #15
 800a486:	4613      	mov	r3, r2
 800a488:	00db      	lsls	r3, r3, #3
 800a48a:	4413      	add	r3, r2
 800a48c:	009b      	lsls	r3, r3, #2
 800a48e:	3338      	adds	r3, #56	; 0x38
 800a490:	687a      	ldr	r2, [r7, #4]
 800a492:	4413      	add	r3, r2
 800a494:	3304      	adds	r3, #4
 800a496:	60fb      	str	r3, [r7, #12]
 800a498:	e00c      	b.n	800a4b4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a49a:	78fb      	ldrb	r3, [r7, #3]
 800a49c:	f003 020f 	and.w	r2, r3, #15
 800a4a0:	4613      	mov	r3, r2
 800a4a2:	00db      	lsls	r3, r3, #3
 800a4a4:	4413      	add	r3, r2
 800a4a6:	009b      	lsls	r3, r3, #2
 800a4a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	4413      	add	r3, r2
 800a4b0:	3304      	adds	r3, #4
 800a4b2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	68f9      	ldr	r1, [r7, #12]
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f00a fcc2 	bl	8014e44 <USB_EPStopXfer>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	72fb      	strb	r3, [r7, #11]

  return ret;
 800a4c4:	7afb      	ldrb	r3, [r7, #11]
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3710      	adds	r7, #16
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}

0800a4ce <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a4ce:	b580      	push	{r7, lr}
 800a4d0:	b08a      	sub	sp, #40	; 0x28
 800a4d2:	af02      	add	r7, sp, #8
 800a4d4:	6078      	str	r0, [r7, #4]
 800a4d6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a4e2:	683a      	ldr	r2, [r7, #0]
 800a4e4:	4613      	mov	r3, r2
 800a4e6:	00db      	lsls	r3, r3, #3
 800a4e8:	4413      	add	r3, r2
 800a4ea:	009b      	lsls	r3, r3, #2
 800a4ec:	3338      	adds	r3, #56	; 0x38
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	3304      	adds	r3, #4
 800a4f4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	695a      	ldr	r2, [r3, #20]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	691b      	ldr	r3, [r3, #16]
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d901      	bls.n	800a506 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a502:	2301      	movs	r3, #1
 800a504:	e06c      	b.n	800a5e0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	691a      	ldr	r2, [r3, #16]
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	695b      	ldr	r3, [r3, #20]
 800a50e:	1ad3      	subs	r3, r2, r3
 800a510:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	689b      	ldr	r3, [r3, #8]
 800a516:	69fa      	ldr	r2, [r7, #28]
 800a518:	429a      	cmp	r2, r3
 800a51a:	d902      	bls.n	800a522 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	689b      	ldr	r3, [r3, #8]
 800a520:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a522:	69fb      	ldr	r3, [r7, #28]
 800a524:	3303      	adds	r3, #3
 800a526:	089b      	lsrs	r3, r3, #2
 800a528:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a52a:	e02b      	b.n	800a584 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	691a      	ldr	r2, [r3, #16]
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	695b      	ldr	r3, [r3, #20]
 800a534:	1ad3      	subs	r3, r2, r3
 800a536:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	689b      	ldr	r3, [r3, #8]
 800a53c:	69fa      	ldr	r2, [r7, #28]
 800a53e:	429a      	cmp	r2, r3
 800a540:	d902      	bls.n	800a548 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	689b      	ldr	r3, [r3, #8]
 800a546:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a548:	69fb      	ldr	r3, [r7, #28]
 800a54a:	3303      	adds	r3, #3
 800a54c:	089b      	lsrs	r3, r3, #2
 800a54e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	68d9      	ldr	r1, [r3, #12]
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	b2da      	uxtb	r2, r3
 800a558:	69fb      	ldr	r3, [r7, #28]
 800a55a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a560:	b2db      	uxtb	r3, r3
 800a562:	9300      	str	r3, [sp, #0]
 800a564:	4603      	mov	r3, r0
 800a566:	6978      	ldr	r0, [r7, #20]
 800a568:	f00a fd16 	bl	8014f98 <USB_WritePacket>

    ep->xfer_buff  += len;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	68da      	ldr	r2, [r3, #12]
 800a570:	69fb      	ldr	r3, [r7, #28]
 800a572:	441a      	add	r2, r3
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	695a      	ldr	r2, [r3, #20]
 800a57c:	69fb      	ldr	r3, [r7, #28]
 800a57e:	441a      	add	r2, r3
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	015a      	lsls	r2, r3, #5
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	4413      	add	r3, r2
 800a58c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a590:	699b      	ldr	r3, [r3, #24]
 800a592:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a594:	69ba      	ldr	r2, [r7, #24]
 800a596:	429a      	cmp	r2, r3
 800a598:	d809      	bhi.n	800a5ae <PCD_WriteEmptyTxFifo+0xe0>
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	695a      	ldr	r2, [r3, #20]
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d203      	bcs.n	800a5ae <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	691b      	ldr	r3, [r3, #16]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d1be      	bne.n	800a52c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	691a      	ldr	r2, [r3, #16]
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	695b      	ldr	r3, [r3, #20]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d811      	bhi.n	800a5de <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	f003 030f 	and.w	r3, r3, #15
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	fa02 f303 	lsl.w	r3, r2, r3
 800a5c6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	43db      	mvns	r3, r3
 800a5d4:	6939      	ldr	r1, [r7, #16]
 800a5d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a5da:	4013      	ands	r3, r2
 800a5dc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a5de:	2300      	movs	r3, #0
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3720      	adds	r7, #32
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b088      	sub	sp, #32
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
 800a5f0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5f8:	69fb      	ldr	r3, [r7, #28]
 800a5fa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a5fc:	69fb      	ldr	r3, [r7, #28]
 800a5fe:	333c      	adds	r3, #60	; 0x3c
 800a600:	3304      	adds	r3, #4
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	015a      	lsls	r2, r3, #5
 800a60a:	69bb      	ldr	r3, [r7, #24]
 800a60c:	4413      	add	r3, r2
 800a60e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a612:	689b      	ldr	r3, [r3, #8]
 800a614:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	68db      	ldr	r3, [r3, #12]
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d17b      	bne.n	800a716 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	f003 0308 	and.w	r3, r3, #8
 800a624:	2b00      	cmp	r3, #0
 800a626:	d015      	beq.n	800a654 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	4a61      	ldr	r2, [pc, #388]	; (800a7b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	f240 80b9 	bls.w	800a7a4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a638:	2b00      	cmp	r3, #0
 800a63a:	f000 80b3 	beq.w	800a7a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	015a      	lsls	r2, r3, #5
 800a642:	69bb      	ldr	r3, [r7, #24]
 800a644:	4413      	add	r3, r2
 800a646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a64a:	461a      	mov	r2, r3
 800a64c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a650:	6093      	str	r3, [r2, #8]
 800a652:	e0a7      	b.n	800a7a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	f003 0320 	and.w	r3, r3, #32
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d009      	beq.n	800a672 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	015a      	lsls	r2, r3, #5
 800a662:	69bb      	ldr	r3, [r7, #24]
 800a664:	4413      	add	r3, r2
 800a666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a66a:	461a      	mov	r2, r3
 800a66c:	2320      	movs	r3, #32
 800a66e:	6093      	str	r3, [r2, #8]
 800a670:	e098      	b.n	800a7a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a678:	2b00      	cmp	r3, #0
 800a67a:	f040 8093 	bne.w	800a7a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	4a4b      	ldr	r2, [pc, #300]	; (800a7b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d90f      	bls.n	800a6a6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d00a      	beq.n	800a6a6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	015a      	lsls	r2, r3, #5
 800a694:	69bb      	ldr	r3, [r7, #24]
 800a696:	4413      	add	r3, r2
 800a698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a69c:	461a      	mov	r2, r3
 800a69e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6a2:	6093      	str	r3, [r2, #8]
 800a6a4:	e07e      	b.n	800a7a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800a6a6:	683a      	ldr	r2, [r7, #0]
 800a6a8:	4613      	mov	r3, r2
 800a6aa:	00db      	lsls	r3, r3, #3
 800a6ac:	4413      	add	r3, r2
 800a6ae:	009b      	lsls	r3, r3, #2
 800a6b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a6b4:	687a      	ldr	r2, [r7, #4]
 800a6b6:	4413      	add	r3, r2
 800a6b8:	3304      	adds	r3, #4
 800a6ba:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	6a1a      	ldr	r2, [r3, #32]
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	0159      	lsls	r1, r3, #5
 800a6c4:	69bb      	ldr	r3, [r7, #24]
 800a6c6:	440b      	add	r3, r1
 800a6c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6cc:	691b      	ldr	r3, [r3, #16]
 800a6ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6d2:	1ad2      	subs	r2, r2, r3
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d114      	bne.n	800a708 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	691b      	ldr	r3, [r3, #16]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d109      	bne.n	800a6fa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6818      	ldr	r0, [r3, #0]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	2101      	movs	r1, #1
 800a6f4:	f00a fee8 	bl	80154c8 <USB_EP0_OutStart>
 800a6f8:	e006      	b.n	800a708 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	68da      	ldr	r2, [r3, #12]
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	695b      	ldr	r3, [r3, #20]
 800a702:	441a      	add	r2, r3
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	b2db      	uxtb	r3, r3
 800a70c:	4619      	mov	r1, r3
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f010 fbac 	bl	801ae6c <HAL_PCD_DataOutStageCallback>
 800a714:	e046      	b.n	800a7a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	4a26      	ldr	r2, [pc, #152]	; (800a7b4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d124      	bne.n	800a768 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a724:	2b00      	cmp	r3, #0
 800a726:	d00a      	beq.n	800a73e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	015a      	lsls	r2, r3, #5
 800a72c:	69bb      	ldr	r3, [r7, #24]
 800a72e:	4413      	add	r3, r2
 800a730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a734:	461a      	mov	r2, r3
 800a736:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a73a:	6093      	str	r3, [r2, #8]
 800a73c:	e032      	b.n	800a7a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	f003 0320 	and.w	r3, r3, #32
 800a744:	2b00      	cmp	r3, #0
 800a746:	d008      	beq.n	800a75a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	015a      	lsls	r2, r3, #5
 800a74c:	69bb      	ldr	r3, [r7, #24]
 800a74e:	4413      	add	r3, r2
 800a750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a754:	461a      	mov	r2, r3
 800a756:	2320      	movs	r3, #32
 800a758:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	b2db      	uxtb	r3, r3
 800a75e:	4619      	mov	r1, r3
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f010 fb83 	bl	801ae6c <HAL_PCD_DataOutStageCallback>
 800a766:	e01d      	b.n	800a7a4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d114      	bne.n	800a798 <PCD_EP_OutXfrComplete_int+0x1b0>
 800a76e:	6879      	ldr	r1, [r7, #4]
 800a770:	683a      	ldr	r2, [r7, #0]
 800a772:	4613      	mov	r3, r2
 800a774:	00db      	lsls	r3, r3, #3
 800a776:	4413      	add	r3, r2
 800a778:	009b      	lsls	r3, r3, #2
 800a77a:	440b      	add	r3, r1
 800a77c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d108      	bne.n	800a798 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6818      	ldr	r0, [r3, #0]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a790:	461a      	mov	r2, r3
 800a792:	2100      	movs	r1, #0
 800a794:	f00a fe98 	bl	80154c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	b2db      	uxtb	r3, r3
 800a79c:	4619      	mov	r1, r3
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f010 fb64 	bl	801ae6c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a7a4:	2300      	movs	r3, #0
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3720      	adds	r7, #32
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	4f54300a 	.word	0x4f54300a
 800a7b4:	4f54310a 	.word	0x4f54310a

0800a7b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b086      	sub	sp, #24
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	333c      	adds	r3, #60	; 0x3c
 800a7d0:	3304      	adds	r3, #4
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	015a      	lsls	r2, r3, #5
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	4413      	add	r3, r2
 800a7de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7e2:	689b      	ldr	r3, [r3, #8]
 800a7e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	4a15      	ldr	r2, [pc, #84]	; (800a840 <PCD_EP_OutSetupPacket_int+0x88>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d90e      	bls.n	800a80c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d009      	beq.n	800a80c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	015a      	lsls	r2, r3, #5
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	4413      	add	r3, r2
 800a800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a804:	461a      	mov	r2, r3
 800a806:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a80a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f010 fb1b 	bl	801ae48 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	4a0a      	ldr	r2, [pc, #40]	; (800a840 <PCD_EP_OutSetupPacket_int+0x88>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d90c      	bls.n	800a834 <PCD_EP_OutSetupPacket_int+0x7c>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	68db      	ldr	r3, [r3, #12]
 800a81e:	2b01      	cmp	r3, #1
 800a820:	d108      	bne.n	800a834 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6818      	ldr	r0, [r3, #0]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a82c:	461a      	mov	r2, r3
 800a82e:	2101      	movs	r1, #1
 800a830:	f00a fe4a 	bl	80154c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a834:	2300      	movs	r3, #0
}
 800a836:	4618      	mov	r0, r3
 800a838:	3718      	adds	r7, #24
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	bf00      	nop
 800a840:	4f54300a 	.word	0x4f54300a

0800a844 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a844:	b480      	push	{r7}
 800a846:	b085      	sub	sp, #20
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
 800a84c:	460b      	mov	r3, r1
 800a84e:	70fb      	strb	r3, [r7, #3]
 800a850:	4613      	mov	r3, r2
 800a852:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a85a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a85c:	78fb      	ldrb	r3, [r7, #3]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d107      	bne.n	800a872 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a862:	883b      	ldrh	r3, [r7, #0]
 800a864:	0419      	lsls	r1, r3, #16
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	68ba      	ldr	r2, [r7, #8]
 800a86c:	430a      	orrs	r2, r1
 800a86e:	629a      	str	r2, [r3, #40]	; 0x28
 800a870:	e028      	b.n	800a8c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a878:	0c1b      	lsrs	r3, r3, #16
 800a87a:	68ba      	ldr	r2, [r7, #8]
 800a87c:	4413      	add	r3, r2
 800a87e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a880:	2300      	movs	r3, #0
 800a882:	73fb      	strb	r3, [r7, #15]
 800a884:	e00d      	b.n	800a8a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681a      	ldr	r2, [r3, #0]
 800a88a:	7bfb      	ldrb	r3, [r7, #15]
 800a88c:	3340      	adds	r3, #64	; 0x40
 800a88e:	009b      	lsls	r3, r3, #2
 800a890:	4413      	add	r3, r2
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	0c1b      	lsrs	r3, r3, #16
 800a896:	68ba      	ldr	r2, [r7, #8]
 800a898:	4413      	add	r3, r2
 800a89a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a89c:	7bfb      	ldrb	r3, [r7, #15]
 800a89e:	3301      	adds	r3, #1
 800a8a0:	73fb      	strb	r3, [r7, #15]
 800a8a2:	7bfa      	ldrb	r2, [r7, #15]
 800a8a4:	78fb      	ldrb	r3, [r7, #3]
 800a8a6:	3b01      	subs	r3, #1
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	d3ec      	bcc.n	800a886 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a8ac:	883b      	ldrh	r3, [r7, #0]
 800a8ae:	0418      	lsls	r0, r3, #16
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6819      	ldr	r1, [r3, #0]
 800a8b4:	78fb      	ldrb	r3, [r7, #3]
 800a8b6:	3b01      	subs	r3, #1
 800a8b8:	68ba      	ldr	r2, [r7, #8]
 800a8ba:	4302      	orrs	r2, r0
 800a8bc:	3340      	adds	r3, #64	; 0x40
 800a8be:	009b      	lsls	r3, r3, #2
 800a8c0:	440b      	add	r3, r1
 800a8c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a8c4:	2300      	movs	r3, #0
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3714      	adds	r7, #20
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d0:	4770      	bx	lr

0800a8d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a8d2:	b480      	push	{r7}
 800a8d4:	b083      	sub	sp, #12
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
 800a8da:	460b      	mov	r3, r1
 800a8dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	887a      	ldrh	r2, [r7, #2]
 800a8e4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a8e6:	2300      	movs	r3, #0
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	370c      	adds	r7, #12
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr

0800a8f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b085      	sub	sp, #20
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2201      	movs	r2, #1
 800a906:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2200      	movs	r2, #0
 800a90e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	699b      	ldr	r3, [r3, #24]
 800a916:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a922:	4b05      	ldr	r3, [pc, #20]	; (800a938 <HAL_PCDEx_ActivateLPM+0x44>)
 800a924:	4313      	orrs	r3, r2
 800a926:	68fa      	ldr	r2, [r7, #12]
 800a928:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800a92a:	2300      	movs	r3, #0
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3714      	adds	r7, #20
 800a930:	46bd      	mov	sp, r7
 800a932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a936:	4770      	bx	lr
 800a938:	10000003 	.word	0x10000003

0800a93c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b083      	sub	sp, #12
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	460b      	mov	r3, r1
 800a946:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800a948:	bf00      	nop
 800a94a:	370c      	adds	r7, #12
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr

0800a954 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b084      	sub	sp, #16
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a95c:	4b19      	ldr	r3, [pc, #100]	; (800a9c4 <HAL_PWREx_ConfigSupply+0x70>)
 800a95e:	68db      	ldr	r3, [r3, #12]
 800a960:	f003 0304 	and.w	r3, r3, #4
 800a964:	2b04      	cmp	r3, #4
 800a966:	d00a      	beq.n	800a97e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a968:	4b16      	ldr	r3, [pc, #88]	; (800a9c4 <HAL_PWREx_ConfigSupply+0x70>)
 800a96a:	68db      	ldr	r3, [r3, #12]
 800a96c:	f003 0307 	and.w	r3, r3, #7
 800a970:	687a      	ldr	r2, [r7, #4]
 800a972:	429a      	cmp	r2, r3
 800a974:	d001      	beq.n	800a97a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a976:	2301      	movs	r3, #1
 800a978:	e01f      	b.n	800a9ba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a97a:	2300      	movs	r3, #0
 800a97c:	e01d      	b.n	800a9ba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a97e:	4b11      	ldr	r3, [pc, #68]	; (800a9c4 <HAL_PWREx_ConfigSupply+0x70>)
 800a980:	68db      	ldr	r3, [r3, #12]
 800a982:	f023 0207 	bic.w	r2, r3, #7
 800a986:	490f      	ldr	r1, [pc, #60]	; (800a9c4 <HAL_PWREx_ConfigSupply+0x70>)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	4313      	orrs	r3, r2
 800a98c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a98e:	f7f9 fcc3 	bl	8004318 <HAL_GetTick>
 800a992:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a994:	e009      	b.n	800a9aa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a996:	f7f9 fcbf 	bl	8004318 <HAL_GetTick>
 800a99a:	4602      	mov	r2, r0
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	1ad3      	subs	r3, r2, r3
 800a9a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a9a4:	d901      	bls.n	800a9aa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	e007      	b.n	800a9ba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a9aa:	4b06      	ldr	r3, [pc, #24]	; (800a9c4 <HAL_PWREx_ConfigSupply+0x70>)
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a9b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9b6:	d1ee      	bne.n	800a996 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a9b8:	2300      	movs	r3, #0
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3710      	adds	r7, #16
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}
 800a9c2:	bf00      	nop
 800a9c4:	58024800 	.word	0x58024800

0800a9c8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800a9cc:	4b05      	ldr	r3, [pc, #20]	; (800a9e4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a9ce:	68db      	ldr	r3, [r3, #12]
 800a9d0:	4a04      	ldr	r2, [pc, #16]	; (800a9e4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a9d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a9d6:	60d3      	str	r3, [r2, #12]
}
 800a9d8:	bf00      	nop
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop
 800a9e4:	58024800 	.word	0x58024800

0800a9e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b08c      	sub	sp, #48	; 0x30
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d101      	bne.n	800a9fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	e3c8      	b.n	800b18c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f003 0301 	and.w	r3, r3, #1
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	f000 8087 	beq.w	800ab16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aa08:	4b88      	ldr	r3, [pc, #544]	; (800ac2c <HAL_RCC_OscConfig+0x244>)
 800aa0a:	691b      	ldr	r3, [r3, #16]
 800aa0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aa10:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aa12:	4b86      	ldr	r3, [pc, #536]	; (800ac2c <HAL_RCC_OscConfig+0x244>)
 800aa14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa16:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800aa18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa1a:	2b10      	cmp	r3, #16
 800aa1c:	d007      	beq.n	800aa2e <HAL_RCC_OscConfig+0x46>
 800aa1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa20:	2b18      	cmp	r3, #24
 800aa22:	d110      	bne.n	800aa46 <HAL_RCC_OscConfig+0x5e>
 800aa24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa26:	f003 0303 	and.w	r3, r3, #3
 800aa2a:	2b02      	cmp	r3, #2
 800aa2c:	d10b      	bne.n	800aa46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aa2e:	4b7f      	ldr	r3, [pc, #508]	; (800ac2c <HAL_RCC_OscConfig+0x244>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d06c      	beq.n	800ab14 <HAL_RCC_OscConfig+0x12c>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d168      	bne.n	800ab14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800aa42:	2301      	movs	r3, #1
 800aa44:	e3a2      	b.n	800b18c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	685b      	ldr	r3, [r3, #4]
 800aa4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa4e:	d106      	bne.n	800aa5e <HAL_RCC_OscConfig+0x76>
 800aa50:	4b76      	ldr	r3, [pc, #472]	; (800ac2c <HAL_RCC_OscConfig+0x244>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4a75      	ldr	r2, [pc, #468]	; (800ac2c <HAL_RCC_OscConfig+0x244>)
 800aa56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa5a:	6013      	str	r3, [r2, #0]
 800aa5c:	e02e      	b.n	800aabc <HAL_RCC_OscConfig+0xd4>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	685b      	ldr	r3, [r3, #4]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d10c      	bne.n	800aa80 <HAL_RCC_OscConfig+0x98>
 800aa66:	4b71      	ldr	r3, [pc, #452]	; (800ac2c <HAL_RCC_OscConfig+0x244>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a70      	ldr	r2, [pc, #448]	; (800ac2c <HAL_RCC_OscConfig+0x244>)
 800aa6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa70:	6013      	str	r3, [r2, #0]
 800aa72:	4b6e      	ldr	r3, [pc, #440]	; (800ac2c <HAL_RCC_OscConfig+0x244>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	4a6d      	ldr	r2, [pc, #436]	; (800ac2c <HAL_RCC_OscConfig+0x244>)
 800aa78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aa7c:	6013      	str	r3, [r2, #0]
 800aa7e:	e01d      	b.n	800aabc <HAL_RCC_OscConfig+0xd4>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aa88:	d10c      	bne.n	800aaa4 <HAL_RCC_OscConfig+0xbc>
 800aa8a:	4b68      	ldr	r3, [pc, #416]	; (800ac2c <HAL_RCC_OscConfig+0x244>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	4a67      	ldr	r2, [pc, #412]	; (800ac2c <HAL_RCC_OscConfig+0x244>)
 800aa90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aa94:	6013      	str	r3, [r2, #0]
 800aa96:	4b65      	ldr	r3, [pc, #404]	; (800ac2c <HAL_RCC_OscConfig+0x244>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	4a64      	ldr	r2, [pc, #400]	; (800ac2c <HAL_RCC_OscConfig+0x244>)
 800aa9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aaa0:	6013      	str	r3, [r2, #0]
 800aaa2:	e00b      	b.n	800aabc <HAL_RCC_OscConfig+0xd4>
 800aaa4:	4b61      	ldr	r3, [pc, #388]	; (800ac2c <HAL_RCC_OscConfig+0x244>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a60      	ldr	r2, [pc, #384]	; (800ac2c <HAL_RCC_OscConfig+0x244>)
 800aaaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aaae:	6013      	str	r3, [r2, #0]
 800aab0:	4b5e      	ldr	r3, [pc, #376]	; (800ac2c <HAL_RCC_OscConfig+0x244>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a5d      	ldr	r2, [pc, #372]	; (800ac2c <HAL_RCC_OscConfig+0x244>)
 800aab6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aaba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d013      	beq.n	800aaec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aac4:	f7f9 fc28 	bl	8004318 <HAL_GetTick>
 800aac8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aaca:	e008      	b.n	800aade <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aacc:	f7f9 fc24 	bl	8004318 <HAL_GetTick>
 800aad0:	4602      	mov	r2, r0
 800aad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad4:	1ad3      	subs	r3, r2, r3
 800aad6:	2b64      	cmp	r3, #100	; 0x64
 800aad8:	d901      	bls.n	800aade <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800aada:	2303      	movs	r3, #3
 800aadc:	e356      	b.n	800b18c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aade:	4b53      	ldr	r3, [pc, #332]	; (800ac2c <HAL_RCC_OscConfig+0x244>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d0f0      	beq.n	800aacc <HAL_RCC_OscConfig+0xe4>
 800aaea:	e014      	b.n	800ab16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aaec:	f7f9 fc14 	bl	8004318 <HAL_GetTick>
 800aaf0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800aaf2:	e008      	b.n	800ab06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aaf4:	f7f9 fc10 	bl	8004318 <HAL_GetTick>
 800aaf8:	4602      	mov	r2, r0
 800aafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aafc:	1ad3      	subs	r3, r2, r3
 800aafe:	2b64      	cmp	r3, #100	; 0x64
 800ab00:	d901      	bls.n	800ab06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800ab02:	2303      	movs	r3, #3
 800ab04:	e342      	b.n	800b18c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ab06:	4b49      	ldr	r3, [pc, #292]	; (800ac2c <HAL_RCC_OscConfig+0x244>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d1f0      	bne.n	800aaf4 <HAL_RCC_OscConfig+0x10c>
 800ab12:	e000      	b.n	800ab16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ab14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f003 0302 	and.w	r3, r3, #2
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	f000 808c 	beq.w	800ac3c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ab24:	4b41      	ldr	r3, [pc, #260]	; (800ac2c <HAL_RCC_OscConfig+0x244>)
 800ab26:	691b      	ldr	r3, [r3, #16]
 800ab28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab2c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ab2e:	4b3f      	ldr	r3, [pc, #252]	; (800ac2c <HAL_RCC_OscConfig+0x244>)
 800ab30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab32:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800ab34:	6a3b      	ldr	r3, [r7, #32]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d007      	beq.n	800ab4a <HAL_RCC_OscConfig+0x162>
 800ab3a:	6a3b      	ldr	r3, [r7, #32]
 800ab3c:	2b18      	cmp	r3, #24
 800ab3e:	d137      	bne.n	800abb0 <HAL_RCC_OscConfig+0x1c8>
 800ab40:	69fb      	ldr	r3, [r7, #28]
 800ab42:	f003 0303 	and.w	r3, r3, #3
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d132      	bne.n	800abb0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ab4a:	4b38      	ldr	r3, [pc, #224]	; (800ac2c <HAL_RCC_OscConfig+0x244>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f003 0304 	and.w	r3, r3, #4
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d005      	beq.n	800ab62 <HAL_RCC_OscConfig+0x17a>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	68db      	ldr	r3, [r3, #12]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d101      	bne.n	800ab62 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	e314      	b.n	800b18c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ab62:	4b32      	ldr	r3, [pc, #200]	; (800ac2c <HAL_RCC_OscConfig+0x244>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f023 0219 	bic.w	r2, r3, #25
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	68db      	ldr	r3, [r3, #12]
 800ab6e:	492f      	ldr	r1, [pc, #188]	; (800ac2c <HAL_RCC_OscConfig+0x244>)
 800ab70:	4313      	orrs	r3, r2
 800ab72:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab74:	f7f9 fbd0 	bl	8004318 <HAL_GetTick>
 800ab78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ab7a:	e008      	b.n	800ab8e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ab7c:	f7f9 fbcc 	bl	8004318 <HAL_GetTick>
 800ab80:	4602      	mov	r2, r0
 800ab82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab84:	1ad3      	subs	r3, r2, r3
 800ab86:	2b02      	cmp	r3, #2
 800ab88:	d901      	bls.n	800ab8e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800ab8a:	2303      	movs	r3, #3
 800ab8c:	e2fe      	b.n	800b18c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ab8e:	4b27      	ldr	r3, [pc, #156]	; (800ac2c <HAL_RCC_OscConfig+0x244>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f003 0304 	and.w	r3, r3, #4
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d0f0      	beq.n	800ab7c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab9a:	4b24      	ldr	r3, [pc, #144]	; (800ac2c <HAL_RCC_OscConfig+0x244>)
 800ab9c:	685b      	ldr	r3, [r3, #4]
 800ab9e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	691b      	ldr	r3, [r3, #16]
 800aba6:	061b      	lsls	r3, r3, #24
 800aba8:	4920      	ldr	r1, [pc, #128]	; (800ac2c <HAL_RCC_OscConfig+0x244>)
 800abaa:	4313      	orrs	r3, r2
 800abac:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800abae:	e045      	b.n	800ac3c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	68db      	ldr	r3, [r3, #12]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d026      	beq.n	800ac06 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800abb8:	4b1c      	ldr	r3, [pc, #112]	; (800ac2c <HAL_RCC_OscConfig+0x244>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f023 0219 	bic.w	r2, r3, #25
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	68db      	ldr	r3, [r3, #12]
 800abc4:	4919      	ldr	r1, [pc, #100]	; (800ac2c <HAL_RCC_OscConfig+0x244>)
 800abc6:	4313      	orrs	r3, r2
 800abc8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abca:	f7f9 fba5 	bl	8004318 <HAL_GetTick>
 800abce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800abd0:	e008      	b.n	800abe4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800abd2:	f7f9 fba1 	bl	8004318 <HAL_GetTick>
 800abd6:	4602      	mov	r2, r0
 800abd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abda:	1ad3      	subs	r3, r2, r3
 800abdc:	2b02      	cmp	r3, #2
 800abde:	d901      	bls.n	800abe4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800abe0:	2303      	movs	r3, #3
 800abe2:	e2d3      	b.n	800b18c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800abe4:	4b11      	ldr	r3, [pc, #68]	; (800ac2c <HAL_RCC_OscConfig+0x244>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f003 0304 	and.w	r3, r3, #4
 800abec:	2b00      	cmp	r3, #0
 800abee:	d0f0      	beq.n	800abd2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800abf0:	4b0e      	ldr	r3, [pc, #56]	; (800ac2c <HAL_RCC_OscConfig+0x244>)
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	691b      	ldr	r3, [r3, #16]
 800abfc:	061b      	lsls	r3, r3, #24
 800abfe:	490b      	ldr	r1, [pc, #44]	; (800ac2c <HAL_RCC_OscConfig+0x244>)
 800ac00:	4313      	orrs	r3, r2
 800ac02:	604b      	str	r3, [r1, #4]
 800ac04:	e01a      	b.n	800ac3c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ac06:	4b09      	ldr	r3, [pc, #36]	; (800ac2c <HAL_RCC_OscConfig+0x244>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4a08      	ldr	r2, [pc, #32]	; (800ac2c <HAL_RCC_OscConfig+0x244>)
 800ac0c:	f023 0301 	bic.w	r3, r3, #1
 800ac10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac12:	f7f9 fb81 	bl	8004318 <HAL_GetTick>
 800ac16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ac18:	e00a      	b.n	800ac30 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ac1a:	f7f9 fb7d 	bl	8004318 <HAL_GetTick>
 800ac1e:	4602      	mov	r2, r0
 800ac20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac22:	1ad3      	subs	r3, r2, r3
 800ac24:	2b02      	cmp	r3, #2
 800ac26:	d903      	bls.n	800ac30 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800ac28:	2303      	movs	r3, #3
 800ac2a:	e2af      	b.n	800b18c <HAL_RCC_OscConfig+0x7a4>
 800ac2c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ac30:	4b96      	ldr	r3, [pc, #600]	; (800ae8c <HAL_RCC_OscConfig+0x4a4>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f003 0304 	and.w	r3, r3, #4
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d1ee      	bne.n	800ac1a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f003 0310 	and.w	r3, r3, #16
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d06a      	beq.n	800ad1e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ac48:	4b90      	ldr	r3, [pc, #576]	; (800ae8c <HAL_RCC_OscConfig+0x4a4>)
 800ac4a:	691b      	ldr	r3, [r3, #16]
 800ac4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ac50:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ac52:	4b8e      	ldr	r3, [pc, #568]	; (800ae8c <HAL_RCC_OscConfig+0x4a4>)
 800ac54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac56:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ac58:	69bb      	ldr	r3, [r7, #24]
 800ac5a:	2b08      	cmp	r3, #8
 800ac5c:	d007      	beq.n	800ac6e <HAL_RCC_OscConfig+0x286>
 800ac5e:	69bb      	ldr	r3, [r7, #24]
 800ac60:	2b18      	cmp	r3, #24
 800ac62:	d11b      	bne.n	800ac9c <HAL_RCC_OscConfig+0x2b4>
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	f003 0303 	and.w	r3, r3, #3
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	d116      	bne.n	800ac9c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ac6e:	4b87      	ldr	r3, [pc, #540]	; (800ae8c <HAL_RCC_OscConfig+0x4a4>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d005      	beq.n	800ac86 <HAL_RCC_OscConfig+0x29e>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	69db      	ldr	r3, [r3, #28]
 800ac7e:	2b80      	cmp	r3, #128	; 0x80
 800ac80:	d001      	beq.n	800ac86 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800ac82:	2301      	movs	r3, #1
 800ac84:	e282      	b.n	800b18c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ac86:	4b81      	ldr	r3, [pc, #516]	; (800ae8c <HAL_RCC_OscConfig+0x4a4>)
 800ac88:	68db      	ldr	r3, [r3, #12]
 800ac8a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6a1b      	ldr	r3, [r3, #32]
 800ac92:	061b      	lsls	r3, r3, #24
 800ac94:	497d      	ldr	r1, [pc, #500]	; (800ae8c <HAL_RCC_OscConfig+0x4a4>)
 800ac96:	4313      	orrs	r3, r2
 800ac98:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ac9a:	e040      	b.n	800ad1e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	69db      	ldr	r3, [r3, #28]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d023      	beq.n	800acec <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800aca4:	4b79      	ldr	r3, [pc, #484]	; (800ae8c <HAL_RCC_OscConfig+0x4a4>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4a78      	ldr	r2, [pc, #480]	; (800ae8c <HAL_RCC_OscConfig+0x4a4>)
 800acaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acb0:	f7f9 fb32 	bl	8004318 <HAL_GetTick>
 800acb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800acb6:	e008      	b.n	800acca <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800acb8:	f7f9 fb2e 	bl	8004318 <HAL_GetTick>
 800acbc:	4602      	mov	r2, r0
 800acbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc0:	1ad3      	subs	r3, r2, r3
 800acc2:	2b02      	cmp	r3, #2
 800acc4:	d901      	bls.n	800acca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800acc6:	2303      	movs	r3, #3
 800acc8:	e260      	b.n	800b18c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800acca:	4b70      	ldr	r3, [pc, #448]	; (800ae8c <HAL_RCC_OscConfig+0x4a4>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d0f0      	beq.n	800acb8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800acd6:	4b6d      	ldr	r3, [pc, #436]	; (800ae8c <HAL_RCC_OscConfig+0x4a4>)
 800acd8:	68db      	ldr	r3, [r3, #12]
 800acda:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6a1b      	ldr	r3, [r3, #32]
 800ace2:	061b      	lsls	r3, r3, #24
 800ace4:	4969      	ldr	r1, [pc, #420]	; (800ae8c <HAL_RCC_OscConfig+0x4a4>)
 800ace6:	4313      	orrs	r3, r2
 800ace8:	60cb      	str	r3, [r1, #12]
 800acea:	e018      	b.n	800ad1e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800acec:	4b67      	ldr	r3, [pc, #412]	; (800ae8c <HAL_RCC_OscConfig+0x4a4>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4a66      	ldr	r2, [pc, #408]	; (800ae8c <HAL_RCC_OscConfig+0x4a4>)
 800acf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800acf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acf8:	f7f9 fb0e 	bl	8004318 <HAL_GetTick>
 800acfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800acfe:	e008      	b.n	800ad12 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ad00:	f7f9 fb0a 	bl	8004318 <HAL_GetTick>
 800ad04:	4602      	mov	r2, r0
 800ad06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad08:	1ad3      	subs	r3, r2, r3
 800ad0a:	2b02      	cmp	r3, #2
 800ad0c:	d901      	bls.n	800ad12 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800ad0e:	2303      	movs	r3, #3
 800ad10:	e23c      	b.n	800b18c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ad12:	4b5e      	ldr	r3, [pc, #376]	; (800ae8c <HAL_RCC_OscConfig+0x4a4>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d1f0      	bne.n	800ad00 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f003 0308 	and.w	r3, r3, #8
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d036      	beq.n	800ad98 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	695b      	ldr	r3, [r3, #20]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d019      	beq.n	800ad66 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ad32:	4b56      	ldr	r3, [pc, #344]	; (800ae8c <HAL_RCC_OscConfig+0x4a4>)
 800ad34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad36:	4a55      	ldr	r2, [pc, #340]	; (800ae8c <HAL_RCC_OscConfig+0x4a4>)
 800ad38:	f043 0301 	orr.w	r3, r3, #1
 800ad3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad3e:	f7f9 faeb 	bl	8004318 <HAL_GetTick>
 800ad42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ad44:	e008      	b.n	800ad58 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ad46:	f7f9 fae7 	bl	8004318 <HAL_GetTick>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad4e:	1ad3      	subs	r3, r2, r3
 800ad50:	2b02      	cmp	r3, #2
 800ad52:	d901      	bls.n	800ad58 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800ad54:	2303      	movs	r3, #3
 800ad56:	e219      	b.n	800b18c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ad58:	4b4c      	ldr	r3, [pc, #304]	; (800ae8c <HAL_RCC_OscConfig+0x4a4>)
 800ad5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad5c:	f003 0302 	and.w	r3, r3, #2
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d0f0      	beq.n	800ad46 <HAL_RCC_OscConfig+0x35e>
 800ad64:	e018      	b.n	800ad98 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ad66:	4b49      	ldr	r3, [pc, #292]	; (800ae8c <HAL_RCC_OscConfig+0x4a4>)
 800ad68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad6a:	4a48      	ldr	r2, [pc, #288]	; (800ae8c <HAL_RCC_OscConfig+0x4a4>)
 800ad6c:	f023 0301 	bic.w	r3, r3, #1
 800ad70:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad72:	f7f9 fad1 	bl	8004318 <HAL_GetTick>
 800ad76:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ad78:	e008      	b.n	800ad8c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ad7a:	f7f9 facd 	bl	8004318 <HAL_GetTick>
 800ad7e:	4602      	mov	r2, r0
 800ad80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad82:	1ad3      	subs	r3, r2, r3
 800ad84:	2b02      	cmp	r3, #2
 800ad86:	d901      	bls.n	800ad8c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800ad88:	2303      	movs	r3, #3
 800ad8a:	e1ff      	b.n	800b18c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ad8c:	4b3f      	ldr	r3, [pc, #252]	; (800ae8c <HAL_RCC_OscConfig+0x4a4>)
 800ad8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad90:	f003 0302 	and.w	r3, r3, #2
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d1f0      	bne.n	800ad7a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f003 0320 	and.w	r3, r3, #32
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d036      	beq.n	800ae12 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	699b      	ldr	r3, [r3, #24]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d019      	beq.n	800ade0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800adac:	4b37      	ldr	r3, [pc, #220]	; (800ae8c <HAL_RCC_OscConfig+0x4a4>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4a36      	ldr	r2, [pc, #216]	; (800ae8c <HAL_RCC_OscConfig+0x4a4>)
 800adb2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800adb6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800adb8:	f7f9 faae 	bl	8004318 <HAL_GetTick>
 800adbc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800adbe:	e008      	b.n	800add2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800adc0:	f7f9 faaa 	bl	8004318 <HAL_GetTick>
 800adc4:	4602      	mov	r2, r0
 800adc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc8:	1ad3      	subs	r3, r2, r3
 800adca:	2b02      	cmp	r3, #2
 800adcc:	d901      	bls.n	800add2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800adce:	2303      	movs	r3, #3
 800add0:	e1dc      	b.n	800b18c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800add2:	4b2e      	ldr	r3, [pc, #184]	; (800ae8c <HAL_RCC_OscConfig+0x4a4>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800adda:	2b00      	cmp	r3, #0
 800addc:	d0f0      	beq.n	800adc0 <HAL_RCC_OscConfig+0x3d8>
 800adde:	e018      	b.n	800ae12 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ade0:	4b2a      	ldr	r3, [pc, #168]	; (800ae8c <HAL_RCC_OscConfig+0x4a4>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4a29      	ldr	r2, [pc, #164]	; (800ae8c <HAL_RCC_OscConfig+0x4a4>)
 800ade6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800adea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800adec:	f7f9 fa94 	bl	8004318 <HAL_GetTick>
 800adf0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800adf2:	e008      	b.n	800ae06 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800adf4:	f7f9 fa90 	bl	8004318 <HAL_GetTick>
 800adf8:	4602      	mov	r2, r0
 800adfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfc:	1ad3      	subs	r3, r2, r3
 800adfe:	2b02      	cmp	r3, #2
 800ae00:	d901      	bls.n	800ae06 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800ae02:	2303      	movs	r3, #3
 800ae04:	e1c2      	b.n	800b18c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ae06:	4b21      	ldr	r3, [pc, #132]	; (800ae8c <HAL_RCC_OscConfig+0x4a4>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d1f0      	bne.n	800adf4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f003 0304 	and.w	r3, r3, #4
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	f000 8086 	beq.w	800af2c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ae20:	4b1b      	ldr	r3, [pc, #108]	; (800ae90 <HAL_RCC_OscConfig+0x4a8>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4a1a      	ldr	r2, [pc, #104]	; (800ae90 <HAL_RCC_OscConfig+0x4a8>)
 800ae26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae2a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ae2c:	f7f9 fa74 	bl	8004318 <HAL_GetTick>
 800ae30:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ae32:	e008      	b.n	800ae46 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ae34:	f7f9 fa70 	bl	8004318 <HAL_GetTick>
 800ae38:	4602      	mov	r2, r0
 800ae3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae3c:	1ad3      	subs	r3, r2, r3
 800ae3e:	2b64      	cmp	r3, #100	; 0x64
 800ae40:	d901      	bls.n	800ae46 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800ae42:	2303      	movs	r3, #3
 800ae44:	e1a2      	b.n	800b18c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ae46:	4b12      	ldr	r3, [pc, #72]	; (800ae90 <HAL_RCC_OscConfig+0x4a8>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d0f0      	beq.n	800ae34 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	689b      	ldr	r3, [r3, #8]
 800ae56:	2b01      	cmp	r3, #1
 800ae58:	d106      	bne.n	800ae68 <HAL_RCC_OscConfig+0x480>
 800ae5a:	4b0c      	ldr	r3, [pc, #48]	; (800ae8c <HAL_RCC_OscConfig+0x4a4>)
 800ae5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae5e:	4a0b      	ldr	r2, [pc, #44]	; (800ae8c <HAL_RCC_OscConfig+0x4a4>)
 800ae60:	f043 0301 	orr.w	r3, r3, #1
 800ae64:	6713      	str	r3, [r2, #112]	; 0x70
 800ae66:	e032      	b.n	800aece <HAL_RCC_OscConfig+0x4e6>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	689b      	ldr	r3, [r3, #8]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d111      	bne.n	800ae94 <HAL_RCC_OscConfig+0x4ac>
 800ae70:	4b06      	ldr	r3, [pc, #24]	; (800ae8c <HAL_RCC_OscConfig+0x4a4>)
 800ae72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae74:	4a05      	ldr	r2, [pc, #20]	; (800ae8c <HAL_RCC_OscConfig+0x4a4>)
 800ae76:	f023 0301 	bic.w	r3, r3, #1
 800ae7a:	6713      	str	r3, [r2, #112]	; 0x70
 800ae7c:	4b03      	ldr	r3, [pc, #12]	; (800ae8c <HAL_RCC_OscConfig+0x4a4>)
 800ae7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae80:	4a02      	ldr	r2, [pc, #8]	; (800ae8c <HAL_RCC_OscConfig+0x4a4>)
 800ae82:	f023 0304 	bic.w	r3, r3, #4
 800ae86:	6713      	str	r3, [r2, #112]	; 0x70
 800ae88:	e021      	b.n	800aece <HAL_RCC_OscConfig+0x4e6>
 800ae8a:	bf00      	nop
 800ae8c:	58024400 	.word	0x58024400
 800ae90:	58024800 	.word	0x58024800
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	689b      	ldr	r3, [r3, #8]
 800ae98:	2b05      	cmp	r3, #5
 800ae9a:	d10c      	bne.n	800aeb6 <HAL_RCC_OscConfig+0x4ce>
 800ae9c:	4b83      	ldr	r3, [pc, #524]	; (800b0ac <HAL_RCC_OscConfig+0x6c4>)
 800ae9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aea0:	4a82      	ldr	r2, [pc, #520]	; (800b0ac <HAL_RCC_OscConfig+0x6c4>)
 800aea2:	f043 0304 	orr.w	r3, r3, #4
 800aea6:	6713      	str	r3, [r2, #112]	; 0x70
 800aea8:	4b80      	ldr	r3, [pc, #512]	; (800b0ac <HAL_RCC_OscConfig+0x6c4>)
 800aeaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aeac:	4a7f      	ldr	r2, [pc, #508]	; (800b0ac <HAL_RCC_OscConfig+0x6c4>)
 800aeae:	f043 0301 	orr.w	r3, r3, #1
 800aeb2:	6713      	str	r3, [r2, #112]	; 0x70
 800aeb4:	e00b      	b.n	800aece <HAL_RCC_OscConfig+0x4e6>
 800aeb6:	4b7d      	ldr	r3, [pc, #500]	; (800b0ac <HAL_RCC_OscConfig+0x6c4>)
 800aeb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aeba:	4a7c      	ldr	r2, [pc, #496]	; (800b0ac <HAL_RCC_OscConfig+0x6c4>)
 800aebc:	f023 0301 	bic.w	r3, r3, #1
 800aec0:	6713      	str	r3, [r2, #112]	; 0x70
 800aec2:	4b7a      	ldr	r3, [pc, #488]	; (800b0ac <HAL_RCC_OscConfig+0x6c4>)
 800aec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aec6:	4a79      	ldr	r2, [pc, #484]	; (800b0ac <HAL_RCC_OscConfig+0x6c4>)
 800aec8:	f023 0304 	bic.w	r3, r3, #4
 800aecc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	689b      	ldr	r3, [r3, #8]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d015      	beq.n	800af02 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aed6:	f7f9 fa1f 	bl	8004318 <HAL_GetTick>
 800aeda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aedc:	e00a      	b.n	800aef4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aede:	f7f9 fa1b 	bl	8004318 <HAL_GetTick>
 800aee2:	4602      	mov	r2, r0
 800aee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee6:	1ad3      	subs	r3, r2, r3
 800aee8:	f241 3288 	movw	r2, #5000	; 0x1388
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d901      	bls.n	800aef4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800aef0:	2303      	movs	r3, #3
 800aef2:	e14b      	b.n	800b18c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aef4:	4b6d      	ldr	r3, [pc, #436]	; (800b0ac <HAL_RCC_OscConfig+0x6c4>)
 800aef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aef8:	f003 0302 	and.w	r3, r3, #2
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d0ee      	beq.n	800aede <HAL_RCC_OscConfig+0x4f6>
 800af00:	e014      	b.n	800af2c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af02:	f7f9 fa09 	bl	8004318 <HAL_GetTick>
 800af06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800af08:	e00a      	b.n	800af20 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af0a:	f7f9 fa05 	bl	8004318 <HAL_GetTick>
 800af0e:	4602      	mov	r2, r0
 800af10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af12:	1ad3      	subs	r3, r2, r3
 800af14:	f241 3288 	movw	r2, #5000	; 0x1388
 800af18:	4293      	cmp	r3, r2
 800af1a:	d901      	bls.n	800af20 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800af1c:	2303      	movs	r3, #3
 800af1e:	e135      	b.n	800b18c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800af20:	4b62      	ldr	r3, [pc, #392]	; (800b0ac <HAL_RCC_OscConfig+0x6c4>)
 800af22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af24:	f003 0302 	and.w	r3, r3, #2
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d1ee      	bne.n	800af0a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af30:	2b00      	cmp	r3, #0
 800af32:	f000 812a 	beq.w	800b18a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800af36:	4b5d      	ldr	r3, [pc, #372]	; (800b0ac <HAL_RCC_OscConfig+0x6c4>)
 800af38:	691b      	ldr	r3, [r3, #16]
 800af3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800af3e:	2b18      	cmp	r3, #24
 800af40:	f000 80ba 	beq.w	800b0b8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af48:	2b02      	cmp	r3, #2
 800af4a:	f040 8095 	bne.w	800b078 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800af4e:	4b57      	ldr	r3, [pc, #348]	; (800b0ac <HAL_RCC_OscConfig+0x6c4>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	4a56      	ldr	r2, [pc, #344]	; (800b0ac <HAL_RCC_OscConfig+0x6c4>)
 800af54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800af58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af5a:	f7f9 f9dd 	bl	8004318 <HAL_GetTick>
 800af5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800af60:	e008      	b.n	800af74 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af62:	f7f9 f9d9 	bl	8004318 <HAL_GetTick>
 800af66:	4602      	mov	r2, r0
 800af68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6a:	1ad3      	subs	r3, r2, r3
 800af6c:	2b02      	cmp	r3, #2
 800af6e:	d901      	bls.n	800af74 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800af70:	2303      	movs	r3, #3
 800af72:	e10b      	b.n	800b18c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800af74:	4b4d      	ldr	r3, [pc, #308]	; (800b0ac <HAL_RCC_OscConfig+0x6c4>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d1f0      	bne.n	800af62 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800af80:	4b4a      	ldr	r3, [pc, #296]	; (800b0ac <HAL_RCC_OscConfig+0x6c4>)
 800af82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800af84:	4b4a      	ldr	r3, [pc, #296]	; (800b0b0 <HAL_RCC_OscConfig+0x6c8>)
 800af86:	4013      	ands	r3, r2
 800af88:	687a      	ldr	r2, [r7, #4]
 800af8a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800af8c:	687a      	ldr	r2, [r7, #4]
 800af8e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800af90:	0112      	lsls	r2, r2, #4
 800af92:	430a      	orrs	r2, r1
 800af94:	4945      	ldr	r1, [pc, #276]	; (800b0ac <HAL_RCC_OscConfig+0x6c4>)
 800af96:	4313      	orrs	r3, r2
 800af98:	628b      	str	r3, [r1, #40]	; 0x28
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af9e:	3b01      	subs	r3, #1
 800afa0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afa8:	3b01      	subs	r3, #1
 800afaa:	025b      	lsls	r3, r3, #9
 800afac:	b29b      	uxth	r3, r3
 800afae:	431a      	orrs	r2, r3
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afb4:	3b01      	subs	r3, #1
 800afb6:	041b      	lsls	r3, r3, #16
 800afb8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800afbc:	431a      	orrs	r2, r3
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afc2:	3b01      	subs	r3, #1
 800afc4:	061b      	lsls	r3, r3, #24
 800afc6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800afca:	4938      	ldr	r1, [pc, #224]	; (800b0ac <HAL_RCC_OscConfig+0x6c4>)
 800afcc:	4313      	orrs	r3, r2
 800afce:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800afd0:	4b36      	ldr	r3, [pc, #216]	; (800b0ac <HAL_RCC_OscConfig+0x6c4>)
 800afd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afd4:	4a35      	ldr	r2, [pc, #212]	; (800b0ac <HAL_RCC_OscConfig+0x6c4>)
 800afd6:	f023 0301 	bic.w	r3, r3, #1
 800afda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800afdc:	4b33      	ldr	r3, [pc, #204]	; (800b0ac <HAL_RCC_OscConfig+0x6c4>)
 800afde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800afe0:	4b34      	ldr	r3, [pc, #208]	; (800b0b4 <HAL_RCC_OscConfig+0x6cc>)
 800afe2:	4013      	ands	r3, r2
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800afe8:	00d2      	lsls	r2, r2, #3
 800afea:	4930      	ldr	r1, [pc, #192]	; (800b0ac <HAL_RCC_OscConfig+0x6c4>)
 800afec:	4313      	orrs	r3, r2
 800afee:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800aff0:	4b2e      	ldr	r3, [pc, #184]	; (800b0ac <HAL_RCC_OscConfig+0x6c4>)
 800aff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aff4:	f023 020c 	bic.w	r2, r3, #12
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800affc:	492b      	ldr	r1, [pc, #172]	; (800b0ac <HAL_RCC_OscConfig+0x6c4>)
 800affe:	4313      	orrs	r3, r2
 800b000:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b002:	4b2a      	ldr	r3, [pc, #168]	; (800b0ac <HAL_RCC_OscConfig+0x6c4>)
 800b004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b006:	f023 0202 	bic.w	r2, r3, #2
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b00e:	4927      	ldr	r1, [pc, #156]	; (800b0ac <HAL_RCC_OscConfig+0x6c4>)
 800b010:	4313      	orrs	r3, r2
 800b012:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b014:	4b25      	ldr	r3, [pc, #148]	; (800b0ac <HAL_RCC_OscConfig+0x6c4>)
 800b016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b018:	4a24      	ldr	r2, [pc, #144]	; (800b0ac <HAL_RCC_OscConfig+0x6c4>)
 800b01a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b01e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b020:	4b22      	ldr	r3, [pc, #136]	; (800b0ac <HAL_RCC_OscConfig+0x6c4>)
 800b022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b024:	4a21      	ldr	r2, [pc, #132]	; (800b0ac <HAL_RCC_OscConfig+0x6c4>)
 800b026:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b02a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b02c:	4b1f      	ldr	r3, [pc, #124]	; (800b0ac <HAL_RCC_OscConfig+0x6c4>)
 800b02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b030:	4a1e      	ldr	r2, [pc, #120]	; (800b0ac <HAL_RCC_OscConfig+0x6c4>)
 800b032:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b036:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800b038:	4b1c      	ldr	r3, [pc, #112]	; (800b0ac <HAL_RCC_OscConfig+0x6c4>)
 800b03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b03c:	4a1b      	ldr	r2, [pc, #108]	; (800b0ac <HAL_RCC_OscConfig+0x6c4>)
 800b03e:	f043 0301 	orr.w	r3, r3, #1
 800b042:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b044:	4b19      	ldr	r3, [pc, #100]	; (800b0ac <HAL_RCC_OscConfig+0x6c4>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4a18      	ldr	r2, [pc, #96]	; (800b0ac <HAL_RCC_OscConfig+0x6c4>)
 800b04a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b04e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b050:	f7f9 f962 	bl	8004318 <HAL_GetTick>
 800b054:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b056:	e008      	b.n	800b06a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b058:	f7f9 f95e 	bl	8004318 <HAL_GetTick>
 800b05c:	4602      	mov	r2, r0
 800b05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b060:	1ad3      	subs	r3, r2, r3
 800b062:	2b02      	cmp	r3, #2
 800b064:	d901      	bls.n	800b06a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800b066:	2303      	movs	r3, #3
 800b068:	e090      	b.n	800b18c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b06a:	4b10      	ldr	r3, [pc, #64]	; (800b0ac <HAL_RCC_OscConfig+0x6c4>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b072:	2b00      	cmp	r3, #0
 800b074:	d0f0      	beq.n	800b058 <HAL_RCC_OscConfig+0x670>
 800b076:	e088      	b.n	800b18a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b078:	4b0c      	ldr	r3, [pc, #48]	; (800b0ac <HAL_RCC_OscConfig+0x6c4>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	4a0b      	ldr	r2, [pc, #44]	; (800b0ac <HAL_RCC_OscConfig+0x6c4>)
 800b07e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b084:	f7f9 f948 	bl	8004318 <HAL_GetTick>
 800b088:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b08a:	e008      	b.n	800b09e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b08c:	f7f9 f944 	bl	8004318 <HAL_GetTick>
 800b090:	4602      	mov	r2, r0
 800b092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b094:	1ad3      	subs	r3, r2, r3
 800b096:	2b02      	cmp	r3, #2
 800b098:	d901      	bls.n	800b09e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800b09a:	2303      	movs	r3, #3
 800b09c:	e076      	b.n	800b18c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b09e:	4b03      	ldr	r3, [pc, #12]	; (800b0ac <HAL_RCC_OscConfig+0x6c4>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d1f0      	bne.n	800b08c <HAL_RCC_OscConfig+0x6a4>
 800b0aa:	e06e      	b.n	800b18a <HAL_RCC_OscConfig+0x7a2>
 800b0ac:	58024400 	.word	0x58024400
 800b0b0:	fffffc0c 	.word	0xfffffc0c
 800b0b4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b0b8:	4b36      	ldr	r3, [pc, #216]	; (800b194 <HAL_RCC_OscConfig+0x7ac>)
 800b0ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0bc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b0be:	4b35      	ldr	r3, [pc, #212]	; (800b194 <HAL_RCC_OscConfig+0x7ac>)
 800b0c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0c2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	d031      	beq.n	800b130 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	f003 0203 	and.w	r2, r3, #3
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b0d6:	429a      	cmp	r2, r3
 800b0d8:	d12a      	bne.n	800b130 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	091b      	lsrs	r3, r3, #4
 800b0de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d122      	bne.n	800b130 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d11a      	bne.n	800b130 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	0a5b      	lsrs	r3, r3, #9
 800b0fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b106:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b108:	429a      	cmp	r2, r3
 800b10a:	d111      	bne.n	800b130 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	0c1b      	lsrs	r3, r3, #16
 800b110:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b118:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d108      	bne.n	800b130 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	0e1b      	lsrs	r3, r3, #24
 800b122:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b12a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d001      	beq.n	800b134 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800b130:	2301      	movs	r3, #1
 800b132:	e02b      	b.n	800b18c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b134:	4b17      	ldr	r3, [pc, #92]	; (800b194 <HAL_RCC_OscConfig+0x7ac>)
 800b136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b138:	08db      	lsrs	r3, r3, #3
 800b13a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b13e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b144:	693a      	ldr	r2, [r7, #16]
 800b146:	429a      	cmp	r2, r3
 800b148:	d01f      	beq.n	800b18a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800b14a:	4b12      	ldr	r3, [pc, #72]	; (800b194 <HAL_RCC_OscConfig+0x7ac>)
 800b14c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b14e:	4a11      	ldr	r2, [pc, #68]	; (800b194 <HAL_RCC_OscConfig+0x7ac>)
 800b150:	f023 0301 	bic.w	r3, r3, #1
 800b154:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b156:	f7f9 f8df 	bl	8004318 <HAL_GetTick>
 800b15a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800b15c:	bf00      	nop
 800b15e:	f7f9 f8db 	bl	8004318 <HAL_GetTick>
 800b162:	4602      	mov	r2, r0
 800b164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b166:	4293      	cmp	r3, r2
 800b168:	d0f9      	beq.n	800b15e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b16a:	4b0a      	ldr	r3, [pc, #40]	; (800b194 <HAL_RCC_OscConfig+0x7ac>)
 800b16c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b16e:	4b0a      	ldr	r3, [pc, #40]	; (800b198 <HAL_RCC_OscConfig+0x7b0>)
 800b170:	4013      	ands	r3, r2
 800b172:	687a      	ldr	r2, [r7, #4]
 800b174:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b176:	00d2      	lsls	r2, r2, #3
 800b178:	4906      	ldr	r1, [pc, #24]	; (800b194 <HAL_RCC_OscConfig+0x7ac>)
 800b17a:	4313      	orrs	r3, r2
 800b17c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800b17e:	4b05      	ldr	r3, [pc, #20]	; (800b194 <HAL_RCC_OscConfig+0x7ac>)
 800b180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b182:	4a04      	ldr	r2, [pc, #16]	; (800b194 <HAL_RCC_OscConfig+0x7ac>)
 800b184:	f043 0301 	orr.w	r3, r3, #1
 800b188:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800b18a:	2300      	movs	r3, #0
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3730      	adds	r7, #48	; 0x30
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}
 800b194:	58024400 	.word	0x58024400
 800b198:	ffff0007 	.word	0xffff0007

0800b19c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b086      	sub	sp, #24
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d101      	bne.n	800b1b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	e19c      	b.n	800b4ea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b1b0:	4b8a      	ldr	r3, [pc, #552]	; (800b3dc <HAL_RCC_ClockConfig+0x240>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f003 030f 	and.w	r3, r3, #15
 800b1b8:	683a      	ldr	r2, [r7, #0]
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d910      	bls.n	800b1e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b1be:	4b87      	ldr	r3, [pc, #540]	; (800b3dc <HAL_RCC_ClockConfig+0x240>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f023 020f 	bic.w	r2, r3, #15
 800b1c6:	4985      	ldr	r1, [pc, #532]	; (800b3dc <HAL_RCC_ClockConfig+0x240>)
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b1ce:	4b83      	ldr	r3, [pc, #524]	; (800b3dc <HAL_RCC_ClockConfig+0x240>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f003 030f 	and.w	r3, r3, #15
 800b1d6:	683a      	ldr	r2, [r7, #0]
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d001      	beq.n	800b1e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	e184      	b.n	800b4ea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f003 0304 	and.w	r3, r3, #4
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d010      	beq.n	800b20e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	691a      	ldr	r2, [r3, #16]
 800b1f0:	4b7b      	ldr	r3, [pc, #492]	; (800b3e0 <HAL_RCC_ClockConfig+0x244>)
 800b1f2:	699b      	ldr	r3, [r3, #24]
 800b1f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	d908      	bls.n	800b20e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b1fc:	4b78      	ldr	r3, [pc, #480]	; (800b3e0 <HAL_RCC_ClockConfig+0x244>)
 800b1fe:	699b      	ldr	r3, [r3, #24]
 800b200:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	691b      	ldr	r3, [r3, #16]
 800b208:	4975      	ldr	r1, [pc, #468]	; (800b3e0 <HAL_RCC_ClockConfig+0x244>)
 800b20a:	4313      	orrs	r3, r2
 800b20c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f003 0308 	and.w	r3, r3, #8
 800b216:	2b00      	cmp	r3, #0
 800b218:	d010      	beq.n	800b23c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	695a      	ldr	r2, [r3, #20]
 800b21e:	4b70      	ldr	r3, [pc, #448]	; (800b3e0 <HAL_RCC_ClockConfig+0x244>)
 800b220:	69db      	ldr	r3, [r3, #28]
 800b222:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b226:	429a      	cmp	r2, r3
 800b228:	d908      	bls.n	800b23c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b22a:	4b6d      	ldr	r3, [pc, #436]	; (800b3e0 <HAL_RCC_ClockConfig+0x244>)
 800b22c:	69db      	ldr	r3, [r3, #28]
 800b22e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	695b      	ldr	r3, [r3, #20]
 800b236:	496a      	ldr	r1, [pc, #424]	; (800b3e0 <HAL_RCC_ClockConfig+0x244>)
 800b238:	4313      	orrs	r3, r2
 800b23a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f003 0310 	and.w	r3, r3, #16
 800b244:	2b00      	cmp	r3, #0
 800b246:	d010      	beq.n	800b26a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	699a      	ldr	r2, [r3, #24]
 800b24c:	4b64      	ldr	r3, [pc, #400]	; (800b3e0 <HAL_RCC_ClockConfig+0x244>)
 800b24e:	69db      	ldr	r3, [r3, #28]
 800b250:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b254:	429a      	cmp	r2, r3
 800b256:	d908      	bls.n	800b26a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b258:	4b61      	ldr	r3, [pc, #388]	; (800b3e0 <HAL_RCC_ClockConfig+0x244>)
 800b25a:	69db      	ldr	r3, [r3, #28]
 800b25c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	699b      	ldr	r3, [r3, #24]
 800b264:	495e      	ldr	r1, [pc, #376]	; (800b3e0 <HAL_RCC_ClockConfig+0x244>)
 800b266:	4313      	orrs	r3, r2
 800b268:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f003 0320 	and.w	r3, r3, #32
 800b272:	2b00      	cmp	r3, #0
 800b274:	d010      	beq.n	800b298 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	69da      	ldr	r2, [r3, #28]
 800b27a:	4b59      	ldr	r3, [pc, #356]	; (800b3e0 <HAL_RCC_ClockConfig+0x244>)
 800b27c:	6a1b      	ldr	r3, [r3, #32]
 800b27e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b282:	429a      	cmp	r2, r3
 800b284:	d908      	bls.n	800b298 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b286:	4b56      	ldr	r3, [pc, #344]	; (800b3e0 <HAL_RCC_ClockConfig+0x244>)
 800b288:	6a1b      	ldr	r3, [r3, #32]
 800b28a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	69db      	ldr	r3, [r3, #28]
 800b292:	4953      	ldr	r1, [pc, #332]	; (800b3e0 <HAL_RCC_ClockConfig+0x244>)
 800b294:	4313      	orrs	r3, r2
 800b296:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f003 0302 	and.w	r3, r3, #2
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d010      	beq.n	800b2c6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	68da      	ldr	r2, [r3, #12]
 800b2a8:	4b4d      	ldr	r3, [pc, #308]	; (800b3e0 <HAL_RCC_ClockConfig+0x244>)
 800b2aa:	699b      	ldr	r3, [r3, #24]
 800b2ac:	f003 030f 	and.w	r3, r3, #15
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d908      	bls.n	800b2c6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b2b4:	4b4a      	ldr	r3, [pc, #296]	; (800b3e0 <HAL_RCC_ClockConfig+0x244>)
 800b2b6:	699b      	ldr	r3, [r3, #24]
 800b2b8:	f023 020f 	bic.w	r2, r3, #15
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	68db      	ldr	r3, [r3, #12]
 800b2c0:	4947      	ldr	r1, [pc, #284]	; (800b3e0 <HAL_RCC_ClockConfig+0x244>)
 800b2c2:	4313      	orrs	r3, r2
 800b2c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f003 0301 	and.w	r3, r3, #1
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d055      	beq.n	800b37e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b2d2:	4b43      	ldr	r3, [pc, #268]	; (800b3e0 <HAL_RCC_ClockConfig+0x244>)
 800b2d4:	699b      	ldr	r3, [r3, #24]
 800b2d6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	689b      	ldr	r3, [r3, #8]
 800b2de:	4940      	ldr	r1, [pc, #256]	; (800b3e0 <HAL_RCC_ClockConfig+0x244>)
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	2b02      	cmp	r3, #2
 800b2ea:	d107      	bne.n	800b2fc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b2ec:	4b3c      	ldr	r3, [pc, #240]	; (800b3e0 <HAL_RCC_ClockConfig+0x244>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d121      	bne.n	800b33c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	e0f6      	b.n	800b4ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	2b03      	cmp	r3, #3
 800b302:	d107      	bne.n	800b314 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b304:	4b36      	ldr	r3, [pc, #216]	; (800b3e0 <HAL_RCC_ClockConfig+0x244>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d115      	bne.n	800b33c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b310:	2301      	movs	r3, #1
 800b312:	e0ea      	b.n	800b4ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	685b      	ldr	r3, [r3, #4]
 800b318:	2b01      	cmp	r3, #1
 800b31a:	d107      	bne.n	800b32c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b31c:	4b30      	ldr	r3, [pc, #192]	; (800b3e0 <HAL_RCC_ClockConfig+0x244>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b324:	2b00      	cmp	r3, #0
 800b326:	d109      	bne.n	800b33c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b328:	2301      	movs	r3, #1
 800b32a:	e0de      	b.n	800b4ea <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b32c:	4b2c      	ldr	r3, [pc, #176]	; (800b3e0 <HAL_RCC_ClockConfig+0x244>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f003 0304 	and.w	r3, r3, #4
 800b334:	2b00      	cmp	r3, #0
 800b336:	d101      	bne.n	800b33c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b338:	2301      	movs	r3, #1
 800b33a:	e0d6      	b.n	800b4ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b33c:	4b28      	ldr	r3, [pc, #160]	; (800b3e0 <HAL_RCC_ClockConfig+0x244>)
 800b33e:	691b      	ldr	r3, [r3, #16]
 800b340:	f023 0207 	bic.w	r2, r3, #7
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	685b      	ldr	r3, [r3, #4]
 800b348:	4925      	ldr	r1, [pc, #148]	; (800b3e0 <HAL_RCC_ClockConfig+0x244>)
 800b34a:	4313      	orrs	r3, r2
 800b34c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b34e:	f7f8 ffe3 	bl	8004318 <HAL_GetTick>
 800b352:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b354:	e00a      	b.n	800b36c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b356:	f7f8 ffdf 	bl	8004318 <HAL_GetTick>
 800b35a:	4602      	mov	r2, r0
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	1ad3      	subs	r3, r2, r3
 800b360:	f241 3288 	movw	r2, #5000	; 0x1388
 800b364:	4293      	cmp	r3, r2
 800b366:	d901      	bls.n	800b36c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b368:	2303      	movs	r3, #3
 800b36a:	e0be      	b.n	800b4ea <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b36c:	4b1c      	ldr	r3, [pc, #112]	; (800b3e0 <HAL_RCC_ClockConfig+0x244>)
 800b36e:	691b      	ldr	r3, [r3, #16]
 800b370:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	00db      	lsls	r3, r3, #3
 800b37a:	429a      	cmp	r2, r3
 800b37c:	d1eb      	bne.n	800b356 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f003 0302 	and.w	r3, r3, #2
 800b386:	2b00      	cmp	r3, #0
 800b388:	d010      	beq.n	800b3ac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	68da      	ldr	r2, [r3, #12]
 800b38e:	4b14      	ldr	r3, [pc, #80]	; (800b3e0 <HAL_RCC_ClockConfig+0x244>)
 800b390:	699b      	ldr	r3, [r3, #24]
 800b392:	f003 030f 	and.w	r3, r3, #15
 800b396:	429a      	cmp	r2, r3
 800b398:	d208      	bcs.n	800b3ac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b39a:	4b11      	ldr	r3, [pc, #68]	; (800b3e0 <HAL_RCC_ClockConfig+0x244>)
 800b39c:	699b      	ldr	r3, [r3, #24]
 800b39e:	f023 020f 	bic.w	r2, r3, #15
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	68db      	ldr	r3, [r3, #12]
 800b3a6:	490e      	ldr	r1, [pc, #56]	; (800b3e0 <HAL_RCC_ClockConfig+0x244>)
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b3ac:	4b0b      	ldr	r3, [pc, #44]	; (800b3dc <HAL_RCC_ClockConfig+0x240>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f003 030f 	and.w	r3, r3, #15
 800b3b4:	683a      	ldr	r2, [r7, #0]
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d214      	bcs.n	800b3e4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b3ba:	4b08      	ldr	r3, [pc, #32]	; (800b3dc <HAL_RCC_ClockConfig+0x240>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f023 020f 	bic.w	r2, r3, #15
 800b3c2:	4906      	ldr	r1, [pc, #24]	; (800b3dc <HAL_RCC_ClockConfig+0x240>)
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	4313      	orrs	r3, r2
 800b3c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b3ca:	4b04      	ldr	r3, [pc, #16]	; (800b3dc <HAL_RCC_ClockConfig+0x240>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f003 030f 	and.w	r3, r3, #15
 800b3d2:	683a      	ldr	r2, [r7, #0]
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d005      	beq.n	800b3e4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b3d8:	2301      	movs	r3, #1
 800b3da:	e086      	b.n	800b4ea <HAL_RCC_ClockConfig+0x34e>
 800b3dc:	52002000 	.word	0x52002000
 800b3e0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f003 0304 	and.w	r3, r3, #4
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d010      	beq.n	800b412 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	691a      	ldr	r2, [r3, #16]
 800b3f4:	4b3f      	ldr	r3, [pc, #252]	; (800b4f4 <HAL_RCC_ClockConfig+0x358>)
 800b3f6:	699b      	ldr	r3, [r3, #24]
 800b3f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	d208      	bcs.n	800b412 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b400:	4b3c      	ldr	r3, [pc, #240]	; (800b4f4 <HAL_RCC_ClockConfig+0x358>)
 800b402:	699b      	ldr	r3, [r3, #24]
 800b404:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	691b      	ldr	r3, [r3, #16]
 800b40c:	4939      	ldr	r1, [pc, #228]	; (800b4f4 <HAL_RCC_ClockConfig+0x358>)
 800b40e:	4313      	orrs	r3, r2
 800b410:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f003 0308 	and.w	r3, r3, #8
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d010      	beq.n	800b440 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	695a      	ldr	r2, [r3, #20]
 800b422:	4b34      	ldr	r3, [pc, #208]	; (800b4f4 <HAL_RCC_ClockConfig+0x358>)
 800b424:	69db      	ldr	r3, [r3, #28]
 800b426:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b42a:	429a      	cmp	r2, r3
 800b42c:	d208      	bcs.n	800b440 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b42e:	4b31      	ldr	r3, [pc, #196]	; (800b4f4 <HAL_RCC_ClockConfig+0x358>)
 800b430:	69db      	ldr	r3, [r3, #28]
 800b432:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	695b      	ldr	r3, [r3, #20]
 800b43a:	492e      	ldr	r1, [pc, #184]	; (800b4f4 <HAL_RCC_ClockConfig+0x358>)
 800b43c:	4313      	orrs	r3, r2
 800b43e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f003 0310 	and.w	r3, r3, #16
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d010      	beq.n	800b46e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	699a      	ldr	r2, [r3, #24]
 800b450:	4b28      	ldr	r3, [pc, #160]	; (800b4f4 <HAL_RCC_ClockConfig+0x358>)
 800b452:	69db      	ldr	r3, [r3, #28]
 800b454:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b458:	429a      	cmp	r2, r3
 800b45a:	d208      	bcs.n	800b46e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b45c:	4b25      	ldr	r3, [pc, #148]	; (800b4f4 <HAL_RCC_ClockConfig+0x358>)
 800b45e:	69db      	ldr	r3, [r3, #28]
 800b460:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	699b      	ldr	r3, [r3, #24]
 800b468:	4922      	ldr	r1, [pc, #136]	; (800b4f4 <HAL_RCC_ClockConfig+0x358>)
 800b46a:	4313      	orrs	r3, r2
 800b46c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f003 0320 	and.w	r3, r3, #32
 800b476:	2b00      	cmp	r3, #0
 800b478:	d010      	beq.n	800b49c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	69da      	ldr	r2, [r3, #28]
 800b47e:	4b1d      	ldr	r3, [pc, #116]	; (800b4f4 <HAL_RCC_ClockConfig+0x358>)
 800b480:	6a1b      	ldr	r3, [r3, #32]
 800b482:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b486:	429a      	cmp	r2, r3
 800b488:	d208      	bcs.n	800b49c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b48a:	4b1a      	ldr	r3, [pc, #104]	; (800b4f4 <HAL_RCC_ClockConfig+0x358>)
 800b48c:	6a1b      	ldr	r3, [r3, #32]
 800b48e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	69db      	ldr	r3, [r3, #28]
 800b496:	4917      	ldr	r1, [pc, #92]	; (800b4f4 <HAL_RCC_ClockConfig+0x358>)
 800b498:	4313      	orrs	r3, r2
 800b49a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b49c:	f000 f89e 	bl	800b5dc <HAL_RCC_GetSysClockFreq>
 800b4a0:	4602      	mov	r2, r0
 800b4a2:	4b14      	ldr	r3, [pc, #80]	; (800b4f4 <HAL_RCC_ClockConfig+0x358>)
 800b4a4:	699b      	ldr	r3, [r3, #24]
 800b4a6:	0a1b      	lsrs	r3, r3, #8
 800b4a8:	f003 030f 	and.w	r3, r3, #15
 800b4ac:	4912      	ldr	r1, [pc, #72]	; (800b4f8 <HAL_RCC_ClockConfig+0x35c>)
 800b4ae:	5ccb      	ldrb	r3, [r1, r3]
 800b4b0:	f003 031f 	and.w	r3, r3, #31
 800b4b4:	fa22 f303 	lsr.w	r3, r2, r3
 800b4b8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b4ba:	4b0e      	ldr	r3, [pc, #56]	; (800b4f4 <HAL_RCC_ClockConfig+0x358>)
 800b4bc:	699b      	ldr	r3, [r3, #24]
 800b4be:	f003 030f 	and.w	r3, r3, #15
 800b4c2:	4a0d      	ldr	r2, [pc, #52]	; (800b4f8 <HAL_RCC_ClockConfig+0x35c>)
 800b4c4:	5cd3      	ldrb	r3, [r2, r3]
 800b4c6:	f003 031f 	and.w	r3, r3, #31
 800b4ca:	693a      	ldr	r2, [r7, #16]
 800b4cc:	fa22 f303 	lsr.w	r3, r2, r3
 800b4d0:	4a0a      	ldr	r2, [pc, #40]	; (800b4fc <HAL_RCC_ClockConfig+0x360>)
 800b4d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b4d4:	4a0a      	ldr	r2, [pc, #40]	; (800b500 <HAL_RCC_ClockConfig+0x364>)
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b4da:	4b0a      	ldr	r3, [pc, #40]	; (800b504 <HAL_RCC_ClockConfig+0x368>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f7f8 fed0 	bl	8004284 <HAL_InitTick>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b4e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3718      	adds	r7, #24
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}
 800b4f2:	bf00      	nop
 800b4f4:	58024400 	.word	0x58024400
 800b4f8:	080204f4 	.word	0x080204f4
 800b4fc:	24000004 	.word	0x24000004
 800b500:	24000000 	.word	0x24000000
 800b504:	24000008 	.word	0x24000008

0800b508 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b08c      	sub	sp, #48	; 0x30
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	60f8      	str	r0, [r7, #12]
 800b510:	60b9      	str	r1, [r7, #8]
 800b512:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d12a      	bne.n	800b570 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800b51a:	4b2d      	ldr	r3, [pc, #180]	; (800b5d0 <HAL_RCC_MCOConfig+0xc8>)
 800b51c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b520:	4a2b      	ldr	r2, [pc, #172]	; (800b5d0 <HAL_RCC_MCOConfig+0xc8>)
 800b522:	f043 0301 	orr.w	r3, r3, #1
 800b526:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b52a:	4b29      	ldr	r3, [pc, #164]	; (800b5d0 <HAL_RCC_MCOConfig+0xc8>)
 800b52c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b530:	f003 0301 	and.w	r3, r3, #1
 800b534:	61bb      	str	r3, [r7, #24]
 800b536:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800b538:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b53c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b53e:	2302      	movs	r3, #2
 800b540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b542:	2303      	movs	r3, #3
 800b544:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b546:	2300      	movs	r3, #0
 800b548:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b54a:	2300      	movs	r3, #0
 800b54c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b54e:	f107 031c 	add.w	r3, r7, #28
 800b552:	4619      	mov	r1, r3
 800b554:	481f      	ldr	r0, [pc, #124]	; (800b5d4 <HAL_RCC_MCOConfig+0xcc>)
 800b556:	f7fd fc29 	bl	8008dac <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800b55a:	4b1d      	ldr	r3, [pc, #116]	; (800b5d0 <HAL_RCC_MCOConfig+0xc8>)
 800b55c:	691b      	ldr	r3, [r3, #16]
 800b55e:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800b562:	68b9      	ldr	r1, [r7, #8]
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	430b      	orrs	r3, r1
 800b568:	4919      	ldr	r1, [pc, #100]	; (800b5d0 <HAL_RCC_MCOConfig+0xc8>)
 800b56a:	4313      	orrs	r3, r2
 800b56c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800b56e:	e02a      	b.n	800b5c6 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800b570:	4b17      	ldr	r3, [pc, #92]	; (800b5d0 <HAL_RCC_MCOConfig+0xc8>)
 800b572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b576:	4a16      	ldr	r2, [pc, #88]	; (800b5d0 <HAL_RCC_MCOConfig+0xc8>)
 800b578:	f043 0304 	orr.w	r3, r3, #4
 800b57c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b580:	4b13      	ldr	r3, [pc, #76]	; (800b5d0 <HAL_RCC_MCOConfig+0xc8>)
 800b582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b586:	f003 0304 	and.w	r3, r3, #4
 800b58a:	617b      	str	r3, [r7, #20]
 800b58c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b58e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b594:	2302      	movs	r3, #2
 800b596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b598:	2303      	movs	r3, #3
 800b59a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b59c:	2300      	movs	r3, #0
 800b59e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b5a4:	f107 031c 	add.w	r3, r7, #28
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	480b      	ldr	r0, [pc, #44]	; (800b5d8 <HAL_RCC_MCOConfig+0xd0>)
 800b5ac:	f7fd fbfe 	bl	8008dac <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800b5b0:	4b07      	ldr	r3, [pc, #28]	; (800b5d0 <HAL_RCC_MCOConfig+0xc8>)
 800b5b2:	691b      	ldr	r3, [r3, #16]
 800b5b4:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	01d9      	lsls	r1, r3, #7
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	430b      	orrs	r3, r1
 800b5c0:	4903      	ldr	r1, [pc, #12]	; (800b5d0 <HAL_RCC_MCOConfig+0xc8>)
 800b5c2:	4313      	orrs	r3, r2
 800b5c4:	610b      	str	r3, [r1, #16]
}
 800b5c6:	bf00      	nop
 800b5c8:	3730      	adds	r7, #48	; 0x30
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}
 800b5ce:	bf00      	nop
 800b5d0:	58024400 	.word	0x58024400
 800b5d4:	58020000 	.word	0x58020000
 800b5d8:	58020800 	.word	0x58020800

0800b5dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b089      	sub	sp, #36	; 0x24
 800b5e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b5e2:	4bb3      	ldr	r3, [pc, #716]	; (800b8b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5e4:	691b      	ldr	r3, [r3, #16]
 800b5e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b5ea:	2b18      	cmp	r3, #24
 800b5ec:	f200 8155 	bhi.w	800b89a <HAL_RCC_GetSysClockFreq+0x2be>
 800b5f0:	a201      	add	r2, pc, #4	; (adr r2, 800b5f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b5f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5f6:	bf00      	nop
 800b5f8:	0800b65d 	.word	0x0800b65d
 800b5fc:	0800b89b 	.word	0x0800b89b
 800b600:	0800b89b 	.word	0x0800b89b
 800b604:	0800b89b 	.word	0x0800b89b
 800b608:	0800b89b 	.word	0x0800b89b
 800b60c:	0800b89b 	.word	0x0800b89b
 800b610:	0800b89b 	.word	0x0800b89b
 800b614:	0800b89b 	.word	0x0800b89b
 800b618:	0800b683 	.word	0x0800b683
 800b61c:	0800b89b 	.word	0x0800b89b
 800b620:	0800b89b 	.word	0x0800b89b
 800b624:	0800b89b 	.word	0x0800b89b
 800b628:	0800b89b 	.word	0x0800b89b
 800b62c:	0800b89b 	.word	0x0800b89b
 800b630:	0800b89b 	.word	0x0800b89b
 800b634:	0800b89b 	.word	0x0800b89b
 800b638:	0800b689 	.word	0x0800b689
 800b63c:	0800b89b 	.word	0x0800b89b
 800b640:	0800b89b 	.word	0x0800b89b
 800b644:	0800b89b 	.word	0x0800b89b
 800b648:	0800b89b 	.word	0x0800b89b
 800b64c:	0800b89b 	.word	0x0800b89b
 800b650:	0800b89b 	.word	0x0800b89b
 800b654:	0800b89b 	.word	0x0800b89b
 800b658:	0800b68f 	.word	0x0800b68f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b65c:	4b94      	ldr	r3, [pc, #592]	; (800b8b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f003 0320 	and.w	r3, r3, #32
 800b664:	2b00      	cmp	r3, #0
 800b666:	d009      	beq.n	800b67c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b668:	4b91      	ldr	r3, [pc, #580]	; (800b8b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	08db      	lsrs	r3, r3, #3
 800b66e:	f003 0303 	and.w	r3, r3, #3
 800b672:	4a90      	ldr	r2, [pc, #576]	; (800b8b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b674:	fa22 f303 	lsr.w	r3, r2, r3
 800b678:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b67a:	e111      	b.n	800b8a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b67c:	4b8d      	ldr	r3, [pc, #564]	; (800b8b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b67e:	61bb      	str	r3, [r7, #24]
      break;
 800b680:	e10e      	b.n	800b8a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b682:	4b8d      	ldr	r3, [pc, #564]	; (800b8b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b684:	61bb      	str	r3, [r7, #24]
      break;
 800b686:	e10b      	b.n	800b8a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b688:	4b8c      	ldr	r3, [pc, #560]	; (800b8bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b68a:	61bb      	str	r3, [r7, #24]
      break;
 800b68c:	e108      	b.n	800b8a0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b68e:	4b88      	ldr	r3, [pc, #544]	; (800b8b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b692:	f003 0303 	and.w	r3, r3, #3
 800b696:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b698:	4b85      	ldr	r3, [pc, #532]	; (800b8b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b69a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b69c:	091b      	lsrs	r3, r3, #4
 800b69e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b6a2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b6a4:	4b82      	ldr	r3, [pc, #520]	; (800b8b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6a8:	f003 0301 	and.w	r3, r3, #1
 800b6ac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b6ae:	4b80      	ldr	r3, [pc, #512]	; (800b8b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6b2:	08db      	lsrs	r3, r3, #3
 800b6b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b6b8:	68fa      	ldr	r2, [r7, #12]
 800b6ba:	fb02 f303 	mul.w	r3, r2, r3
 800b6be:	ee07 3a90 	vmov	s15, r3
 800b6c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6c6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	f000 80e1 	beq.w	800b894 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	2b02      	cmp	r3, #2
 800b6d6:	f000 8083 	beq.w	800b7e0 <HAL_RCC_GetSysClockFreq+0x204>
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	2b02      	cmp	r3, #2
 800b6de:	f200 80a1 	bhi.w	800b824 <HAL_RCC_GetSysClockFreq+0x248>
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d003      	beq.n	800b6f0 <HAL_RCC_GetSysClockFreq+0x114>
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	2b01      	cmp	r3, #1
 800b6ec:	d056      	beq.n	800b79c <HAL_RCC_GetSysClockFreq+0x1c0>
 800b6ee:	e099      	b.n	800b824 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b6f0:	4b6f      	ldr	r3, [pc, #444]	; (800b8b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f003 0320 	and.w	r3, r3, #32
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d02d      	beq.n	800b758 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b6fc:	4b6c      	ldr	r3, [pc, #432]	; (800b8b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	08db      	lsrs	r3, r3, #3
 800b702:	f003 0303 	and.w	r3, r3, #3
 800b706:	4a6b      	ldr	r2, [pc, #428]	; (800b8b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b708:	fa22 f303 	lsr.w	r3, r2, r3
 800b70c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	ee07 3a90 	vmov	s15, r3
 800b714:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	ee07 3a90 	vmov	s15, r3
 800b71e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b726:	4b62      	ldr	r3, [pc, #392]	; (800b8b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b72a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b72e:	ee07 3a90 	vmov	s15, r3
 800b732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b736:	ed97 6a02 	vldr	s12, [r7, #8]
 800b73a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b8c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b73e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b742:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b746:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b74a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b74e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b752:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b756:	e087      	b.n	800b868 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	ee07 3a90 	vmov	s15, r3
 800b75e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b762:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b8c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b76a:	4b51      	ldr	r3, [pc, #324]	; (800b8b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b76c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b76e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b772:	ee07 3a90 	vmov	s15, r3
 800b776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b77a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b77e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b8c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b782:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b786:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b78a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b78e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b792:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b796:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b79a:	e065      	b.n	800b868 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	ee07 3a90 	vmov	s15, r3
 800b7a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7a6:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b8c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b7aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7ae:	4b40      	ldr	r3, [pc, #256]	; (800b8b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7b6:	ee07 3a90 	vmov	s15, r3
 800b7ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7be:	ed97 6a02 	vldr	s12, [r7, #8]
 800b7c2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b8c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b7c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b7de:	e043      	b.n	800b868 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	ee07 3a90 	vmov	s15, r3
 800b7e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7ea:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b8cc <HAL_RCC_GetSysClockFreq+0x2f0>
 800b7ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7f2:	4b2f      	ldr	r3, [pc, #188]	; (800b8b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7fa:	ee07 3a90 	vmov	s15, r3
 800b7fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b802:	ed97 6a02 	vldr	s12, [r7, #8]
 800b806:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b8c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b80a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b80e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b812:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b81a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b81e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b822:	e021      	b.n	800b868 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b824:	693b      	ldr	r3, [r7, #16]
 800b826:	ee07 3a90 	vmov	s15, r3
 800b82a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b82e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b8c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b836:	4b1e      	ldr	r3, [pc, #120]	; (800b8b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b83a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b83e:	ee07 3a90 	vmov	s15, r3
 800b842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b846:	ed97 6a02 	vldr	s12, [r7, #8]
 800b84a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b8c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b84e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b856:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b85a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b85e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b862:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b866:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b868:	4b11      	ldr	r3, [pc, #68]	; (800b8b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b86a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b86c:	0a5b      	lsrs	r3, r3, #9
 800b86e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b872:	3301      	adds	r3, #1
 800b874:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	ee07 3a90 	vmov	s15, r3
 800b87c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b880:	edd7 6a07 	vldr	s13, [r7, #28]
 800b884:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b888:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b88c:	ee17 3a90 	vmov	r3, s15
 800b890:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b892:	e005      	b.n	800b8a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b894:	2300      	movs	r3, #0
 800b896:	61bb      	str	r3, [r7, #24]
      break;
 800b898:	e002      	b.n	800b8a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b89a:	4b07      	ldr	r3, [pc, #28]	; (800b8b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b89c:	61bb      	str	r3, [r7, #24]
      break;
 800b89e:	bf00      	nop
  }

  return sysclockfreq;
 800b8a0:	69bb      	ldr	r3, [r7, #24]
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3724      	adds	r7, #36	; 0x24
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ac:	4770      	bx	lr
 800b8ae:	bf00      	nop
 800b8b0:	58024400 	.word	0x58024400
 800b8b4:	03d09000 	.word	0x03d09000
 800b8b8:	003d0900 	.word	0x003d0900
 800b8bc:	02faf080 	.word	0x02faf080
 800b8c0:	46000000 	.word	0x46000000
 800b8c4:	4c742400 	.word	0x4c742400
 800b8c8:	4a742400 	.word	0x4a742400
 800b8cc:	4c3ebc20 	.word	0x4c3ebc20

0800b8d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b082      	sub	sp, #8
 800b8d4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b8d6:	f7ff fe81 	bl	800b5dc <HAL_RCC_GetSysClockFreq>
 800b8da:	4602      	mov	r2, r0
 800b8dc:	4b10      	ldr	r3, [pc, #64]	; (800b920 <HAL_RCC_GetHCLKFreq+0x50>)
 800b8de:	699b      	ldr	r3, [r3, #24]
 800b8e0:	0a1b      	lsrs	r3, r3, #8
 800b8e2:	f003 030f 	and.w	r3, r3, #15
 800b8e6:	490f      	ldr	r1, [pc, #60]	; (800b924 <HAL_RCC_GetHCLKFreq+0x54>)
 800b8e8:	5ccb      	ldrb	r3, [r1, r3]
 800b8ea:	f003 031f 	and.w	r3, r3, #31
 800b8ee:	fa22 f303 	lsr.w	r3, r2, r3
 800b8f2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b8f4:	4b0a      	ldr	r3, [pc, #40]	; (800b920 <HAL_RCC_GetHCLKFreq+0x50>)
 800b8f6:	699b      	ldr	r3, [r3, #24]
 800b8f8:	f003 030f 	and.w	r3, r3, #15
 800b8fc:	4a09      	ldr	r2, [pc, #36]	; (800b924 <HAL_RCC_GetHCLKFreq+0x54>)
 800b8fe:	5cd3      	ldrb	r3, [r2, r3]
 800b900:	f003 031f 	and.w	r3, r3, #31
 800b904:	687a      	ldr	r2, [r7, #4]
 800b906:	fa22 f303 	lsr.w	r3, r2, r3
 800b90a:	4a07      	ldr	r2, [pc, #28]	; (800b928 <HAL_RCC_GetHCLKFreq+0x58>)
 800b90c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b90e:	4a07      	ldr	r2, [pc, #28]	; (800b92c <HAL_RCC_GetHCLKFreq+0x5c>)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b914:	4b04      	ldr	r3, [pc, #16]	; (800b928 <HAL_RCC_GetHCLKFreq+0x58>)
 800b916:	681b      	ldr	r3, [r3, #0]
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3708      	adds	r7, #8
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}
 800b920:	58024400 	.word	0x58024400
 800b924:	080204f4 	.word	0x080204f4
 800b928:	24000004 	.word	0x24000004
 800b92c:	24000000 	.word	0x24000000

0800b930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b934:	f7ff ffcc 	bl	800b8d0 <HAL_RCC_GetHCLKFreq>
 800b938:	4602      	mov	r2, r0
 800b93a:	4b06      	ldr	r3, [pc, #24]	; (800b954 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b93c:	69db      	ldr	r3, [r3, #28]
 800b93e:	091b      	lsrs	r3, r3, #4
 800b940:	f003 0307 	and.w	r3, r3, #7
 800b944:	4904      	ldr	r1, [pc, #16]	; (800b958 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b946:	5ccb      	ldrb	r3, [r1, r3]
 800b948:	f003 031f 	and.w	r3, r3, #31
 800b94c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b950:	4618      	mov	r0, r3
 800b952:	bd80      	pop	{r7, pc}
 800b954:	58024400 	.word	0x58024400
 800b958:	080204f4 	.word	0x080204f4

0800b95c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b960:	f7ff ffb6 	bl	800b8d0 <HAL_RCC_GetHCLKFreq>
 800b964:	4602      	mov	r2, r0
 800b966:	4b06      	ldr	r3, [pc, #24]	; (800b980 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b968:	69db      	ldr	r3, [r3, #28]
 800b96a:	0a1b      	lsrs	r3, r3, #8
 800b96c:	f003 0307 	and.w	r3, r3, #7
 800b970:	4904      	ldr	r1, [pc, #16]	; (800b984 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b972:	5ccb      	ldrb	r3, [r1, r3]
 800b974:	f003 031f 	and.w	r3, r3, #31
 800b978:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	bd80      	pop	{r7, pc}
 800b980:	58024400 	.word	0x58024400
 800b984:	080204f4 	.word	0x080204f4

0800b988 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b98c:	b0c6      	sub	sp, #280	; 0x118
 800b98e:	af00      	add	r7, sp, #0
 800b990:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b994:	2300      	movs	r3, #0
 800b996:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b99a:	2300      	movs	r3, #0
 800b99c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b9a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b9ac:	2500      	movs	r5, #0
 800b9ae:	ea54 0305 	orrs.w	r3, r4, r5
 800b9b2:	d049      	beq.n	800ba48 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b9b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b9ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b9be:	d02f      	beq.n	800ba20 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b9c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b9c4:	d828      	bhi.n	800ba18 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b9c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b9ca:	d01a      	beq.n	800ba02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b9cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b9d0:	d822      	bhi.n	800ba18 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d003      	beq.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b9d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b9da:	d007      	beq.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b9dc:	e01c      	b.n	800ba18 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9de:	4bab      	ldr	r3, [pc, #684]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b9e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9e2:	4aaa      	ldr	r2, [pc, #680]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b9e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b9ea:	e01a      	b.n	800ba22 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b9ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9f0:	3308      	adds	r3, #8
 800b9f2:	2102      	movs	r1, #2
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f002 fa49 	bl	800de8c <RCCEx_PLL2_Config>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ba00:	e00f      	b.n	800ba22 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ba02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba06:	3328      	adds	r3, #40	; 0x28
 800ba08:	2102      	movs	r1, #2
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f002 faf0 	bl	800dff0 <RCCEx_PLL3_Config>
 800ba10:	4603      	mov	r3, r0
 800ba12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ba16:	e004      	b.n	800ba22 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba18:	2301      	movs	r3, #1
 800ba1a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ba1e:	e000      	b.n	800ba22 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ba20:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba22:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d10a      	bne.n	800ba40 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ba2a:	4b98      	ldr	r3, [pc, #608]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba2e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ba32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba38:	4a94      	ldr	r2, [pc, #592]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba3a:	430b      	orrs	r3, r1
 800ba3c:	6513      	str	r3, [r2, #80]	; 0x50
 800ba3e:	e003      	b.n	800ba48 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba44:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ba48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba50:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800ba54:	f04f 0900 	mov.w	r9, #0
 800ba58:	ea58 0309 	orrs.w	r3, r8, r9
 800ba5c:	d047      	beq.n	800baee <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ba5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba64:	2b04      	cmp	r3, #4
 800ba66:	d82a      	bhi.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ba68:	a201      	add	r2, pc, #4	; (adr r2, 800ba70 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ba6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba6e:	bf00      	nop
 800ba70:	0800ba85 	.word	0x0800ba85
 800ba74:	0800ba93 	.word	0x0800ba93
 800ba78:	0800baa9 	.word	0x0800baa9
 800ba7c:	0800bac7 	.word	0x0800bac7
 800ba80:	0800bac7 	.word	0x0800bac7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba84:	4b81      	ldr	r3, [pc, #516]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba88:	4a80      	ldr	r2, [pc, #512]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ba90:	e01a      	b.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba96:	3308      	adds	r3, #8
 800ba98:	2100      	movs	r1, #0
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f002 f9f6 	bl	800de8c <RCCEx_PLL2_Config>
 800baa0:	4603      	mov	r3, r0
 800baa2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800baa6:	e00f      	b.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800baa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baac:	3328      	adds	r3, #40	; 0x28
 800baae:	2100      	movs	r1, #0
 800bab0:	4618      	mov	r0, r3
 800bab2:	f002 fa9d 	bl	800dff0 <RCCEx_PLL3_Config>
 800bab6:	4603      	mov	r3, r0
 800bab8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800babc:	e004      	b.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800babe:	2301      	movs	r3, #1
 800bac0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bac4:	e000      	b.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800bac6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bac8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d10a      	bne.n	800bae6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bad0:	4b6e      	ldr	r3, [pc, #440]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bad4:	f023 0107 	bic.w	r1, r3, #7
 800bad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800badc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bade:	4a6b      	ldr	r2, [pc, #428]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bae0:	430b      	orrs	r3, r1
 800bae2:	6513      	str	r3, [r2, #80]	; 0x50
 800bae4:	e003      	b.n	800baee <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bae6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800baea:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800baee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf6:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800bafa:	f04f 0b00 	mov.w	fp, #0
 800bafe:	ea5a 030b 	orrs.w	r3, sl, fp
 800bb02:	d05b      	beq.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800bb04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bb0c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800bb10:	d03b      	beq.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800bb12:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800bb16:	d834      	bhi.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bb18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bb1c:	d037      	beq.n	800bb8e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800bb1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bb22:	d82e      	bhi.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bb24:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bb28:	d033      	beq.n	800bb92 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800bb2a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bb2e:	d828      	bhi.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bb30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bb34:	d01a      	beq.n	800bb6c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800bb36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bb3a:	d822      	bhi.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d003      	beq.n	800bb48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800bb40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bb44:	d007      	beq.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800bb46:	e01c      	b.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb48:	4b50      	ldr	r3, [pc, #320]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bb4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb4c:	4a4f      	ldr	r2, [pc, #316]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bb4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bb54:	e01e      	b.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb5a:	3308      	adds	r3, #8
 800bb5c:	2100      	movs	r1, #0
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f002 f994 	bl	800de8c <RCCEx_PLL2_Config>
 800bb64:	4603      	mov	r3, r0
 800bb66:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800bb6a:	e013      	b.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bb6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb70:	3328      	adds	r3, #40	; 0x28
 800bb72:	2100      	movs	r1, #0
 800bb74:	4618      	mov	r0, r3
 800bb76:	f002 fa3b 	bl	800dff0 <RCCEx_PLL3_Config>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bb80:	e008      	b.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800bb82:	2301      	movs	r3, #1
 800bb84:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bb88:	e004      	b.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800bb8a:	bf00      	nop
 800bb8c:	e002      	b.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800bb8e:	bf00      	nop
 800bb90:	e000      	b.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800bb92:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d10b      	bne.n	800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800bb9c:	4b3b      	ldr	r3, [pc, #236]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bb9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bba0:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800bba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bba8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bbac:	4a37      	ldr	r2, [pc, #220]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bbae:	430b      	orrs	r3, r1
 800bbb0:	6593      	str	r3, [r2, #88]	; 0x58
 800bbb2:	e003      	b.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbb4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbb8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800bbbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc4:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800bbc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bbcc:	2300      	movs	r3, #0
 800bbce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bbd2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800bbd6:	460b      	mov	r3, r1
 800bbd8:	4313      	orrs	r3, r2
 800bbda:	d05d      	beq.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800bbdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbe0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bbe4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800bbe8:	d03b      	beq.n	800bc62 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800bbea:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800bbee:	d834      	bhi.n	800bc5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bbf0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bbf4:	d037      	beq.n	800bc66 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800bbf6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bbfa:	d82e      	bhi.n	800bc5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bbfc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bc00:	d033      	beq.n	800bc6a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800bc02:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bc06:	d828      	bhi.n	800bc5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bc08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc0c:	d01a      	beq.n	800bc44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800bc0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc12:	d822      	bhi.n	800bc5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d003      	beq.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800bc18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bc1c:	d007      	beq.n	800bc2e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800bc1e:	e01c      	b.n	800bc5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc20:	4b1a      	ldr	r3, [pc, #104]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bc22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc24:	4a19      	ldr	r2, [pc, #100]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bc26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bc2c:	e01e      	b.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc32:	3308      	adds	r3, #8
 800bc34:	2100      	movs	r1, #0
 800bc36:	4618      	mov	r0, r3
 800bc38:	f002 f928 	bl	800de8c <RCCEx_PLL2_Config>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800bc42:	e013      	b.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bc44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc48:	3328      	adds	r3, #40	; 0x28
 800bc4a:	2100      	movs	r1, #0
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f002 f9cf 	bl	800dff0 <RCCEx_PLL3_Config>
 800bc52:	4603      	mov	r3, r0
 800bc54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bc58:	e008      	b.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bc60:	e004      	b.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800bc62:	bf00      	nop
 800bc64:	e002      	b.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800bc66:	bf00      	nop
 800bc68:	e000      	b.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800bc6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d10d      	bne.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800bc74:	4b05      	ldr	r3, [pc, #20]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bc76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc78:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800bc7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc80:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bc84:	4a01      	ldr	r2, [pc, #4]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bc86:	430b      	orrs	r3, r1
 800bc88:	6593      	str	r3, [r2, #88]	; 0x58
 800bc8a:	e005      	b.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800bc8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc94:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800bc98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800bca4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bca8:	2300      	movs	r3, #0
 800bcaa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bcae:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800bcb2:	460b      	mov	r3, r1
 800bcb4:	4313      	orrs	r3, r2
 800bcb6:	d03a      	beq.n	800bd2e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800bcb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcbe:	2b30      	cmp	r3, #48	; 0x30
 800bcc0:	d01f      	beq.n	800bd02 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800bcc2:	2b30      	cmp	r3, #48	; 0x30
 800bcc4:	d819      	bhi.n	800bcfa <HAL_RCCEx_PeriphCLKConfig+0x372>
 800bcc6:	2b20      	cmp	r3, #32
 800bcc8:	d00c      	beq.n	800bce4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800bcca:	2b20      	cmp	r3, #32
 800bccc:	d815      	bhi.n	800bcfa <HAL_RCCEx_PeriphCLKConfig+0x372>
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d019      	beq.n	800bd06 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800bcd2:	2b10      	cmp	r3, #16
 800bcd4:	d111      	bne.n	800bcfa <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bcd6:	4baa      	ldr	r3, [pc, #680]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bcd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcda:	4aa9      	ldr	r2, [pc, #676]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bcdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bce0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800bce2:	e011      	b.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bce8:	3308      	adds	r3, #8
 800bcea:	2102      	movs	r1, #2
 800bcec:	4618      	mov	r0, r3
 800bcee:	f002 f8cd 	bl	800de8c <RCCEx_PLL2_Config>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800bcf8:	e006      	b.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bd00:	e002      	b.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800bd02:	bf00      	nop
 800bd04:	e000      	b.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800bd06:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d10a      	bne.n	800bd26 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800bd10:	4b9b      	ldr	r3, [pc, #620]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd14:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800bd18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd1e:	4a98      	ldr	r2, [pc, #608]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd20:	430b      	orrs	r3, r1
 800bd22:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bd24:	e003      	b.n	800bd2e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd26:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd2a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bd2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd36:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800bd3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bd3e:	2300      	movs	r3, #0
 800bd40:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bd44:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800bd48:	460b      	mov	r3, r1
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	d051      	beq.n	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800bd4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bd58:	d035      	beq.n	800bdc6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800bd5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bd5e:	d82e      	bhi.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bd60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bd64:	d031      	beq.n	800bdca <HAL_RCCEx_PeriphCLKConfig+0x442>
 800bd66:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bd6a:	d828      	bhi.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bd6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd70:	d01a      	beq.n	800bda8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800bd72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd76:	d822      	bhi.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d003      	beq.n	800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800bd7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd80:	d007      	beq.n	800bd92 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800bd82:	e01c      	b.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd84:	4b7e      	ldr	r3, [pc, #504]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd88:	4a7d      	ldr	r2, [pc, #500]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bd90:	e01c      	b.n	800bdcc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd96:	3308      	adds	r3, #8
 800bd98:	2100      	movs	r1, #0
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f002 f876 	bl	800de8c <RCCEx_PLL2_Config>
 800bda0:	4603      	mov	r3, r0
 800bda2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bda6:	e011      	b.n	800bdcc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bda8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdac:	3328      	adds	r3, #40	; 0x28
 800bdae:	2100      	movs	r1, #0
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f002 f91d 	bl	800dff0 <RCCEx_PLL3_Config>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bdbc:	e006      	b.n	800bdcc <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bdc4:	e002      	b.n	800bdcc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800bdc6:	bf00      	nop
 800bdc8:	e000      	b.n	800bdcc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800bdca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bdcc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d10a      	bne.n	800bdea <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bdd4:	4b6a      	ldr	r3, [pc, #424]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bdd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdd8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800bddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bde0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bde2:	4a67      	ldr	r2, [pc, #412]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bde4:	430b      	orrs	r3, r1
 800bde6:	6513      	str	r3, [r2, #80]	; 0x50
 800bde8:	e003      	b.n	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bdee:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bdf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdfa:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800bdfe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800be02:	2300      	movs	r3, #0
 800be04:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800be08:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800be0c:	460b      	mov	r3, r1
 800be0e:	4313      	orrs	r3, r2
 800be10:	d053      	beq.n	800beba <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800be12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800be1c:	d033      	beq.n	800be86 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800be1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800be22:	d82c      	bhi.n	800be7e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800be24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800be28:	d02f      	beq.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0x502>
 800be2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800be2e:	d826      	bhi.n	800be7e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800be30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800be34:	d02b      	beq.n	800be8e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800be36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800be3a:	d820      	bhi.n	800be7e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800be3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be40:	d012      	beq.n	800be68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800be42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be46:	d81a      	bhi.n	800be7e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d022      	beq.n	800be92 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800be4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be50:	d115      	bne.n	800be7e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800be52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be56:	3308      	adds	r3, #8
 800be58:	2101      	movs	r1, #1
 800be5a:	4618      	mov	r0, r3
 800be5c:	f002 f816 	bl	800de8c <RCCEx_PLL2_Config>
 800be60:	4603      	mov	r3, r0
 800be62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800be66:	e015      	b.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800be68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be6c:	3328      	adds	r3, #40	; 0x28
 800be6e:	2101      	movs	r1, #1
 800be70:	4618      	mov	r0, r3
 800be72:	f002 f8bd 	bl	800dff0 <RCCEx_PLL3_Config>
 800be76:	4603      	mov	r3, r0
 800be78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800be7c:	e00a      	b.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be7e:	2301      	movs	r3, #1
 800be80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800be84:	e006      	b.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800be86:	bf00      	nop
 800be88:	e004      	b.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800be8a:	bf00      	nop
 800be8c:	e002      	b.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800be8e:	bf00      	nop
 800be90:	e000      	b.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800be92:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d10a      	bne.n	800beb2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800be9c:	4b38      	ldr	r3, [pc, #224]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800be9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bea0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800bea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800beaa:	4a35      	ldr	r2, [pc, #212]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800beac:	430b      	orrs	r3, r1
 800beae:	6513      	str	r3, [r2, #80]	; 0x50
 800beb0:	e003      	b.n	800beba <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800beb2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800beb6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800beba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800bec6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800beca:	2300      	movs	r3, #0
 800becc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bed0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bed4:	460b      	mov	r3, r1
 800bed6:	4313      	orrs	r3, r2
 800bed8:	d058      	beq.n	800bf8c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800beda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bede:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bee2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bee6:	d033      	beq.n	800bf50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800bee8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800beec:	d82c      	bhi.n	800bf48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800beee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bef2:	d02f      	beq.n	800bf54 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800bef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bef8:	d826      	bhi.n	800bf48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800befa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800befe:	d02b      	beq.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800bf00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bf04:	d820      	bhi.n	800bf48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bf06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf0a:	d012      	beq.n	800bf32 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800bf0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf10:	d81a      	bhi.n	800bf48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d022      	beq.n	800bf5c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800bf16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf1a:	d115      	bne.n	800bf48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bf1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf20:	3308      	adds	r3, #8
 800bf22:	2101      	movs	r1, #1
 800bf24:	4618      	mov	r0, r3
 800bf26:	f001 ffb1 	bl	800de8c <RCCEx_PLL2_Config>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bf30:	e015      	b.n	800bf5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bf32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf36:	3328      	adds	r3, #40	; 0x28
 800bf38:	2101      	movs	r1, #1
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f002 f858 	bl	800dff0 <RCCEx_PLL3_Config>
 800bf40:	4603      	mov	r3, r0
 800bf42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bf46:	e00a      	b.n	800bf5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800bf48:	2301      	movs	r3, #1
 800bf4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bf4e:	e006      	b.n	800bf5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bf50:	bf00      	nop
 800bf52:	e004      	b.n	800bf5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bf54:	bf00      	nop
 800bf56:	e002      	b.n	800bf5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bf58:	bf00      	nop
 800bf5a:	e000      	b.n	800bf5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bf5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf5e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d10e      	bne.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bf66:	4b06      	ldr	r3, [pc, #24]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bf68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf6a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bf6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf72:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bf76:	4a02      	ldr	r2, [pc, #8]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bf78:	430b      	orrs	r3, r1
 800bf7a:	6593      	str	r3, [r2, #88]	; 0x58
 800bf7c:	e006      	b.n	800bf8c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800bf7e:	bf00      	nop
 800bf80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf88:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bf8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf94:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800bf98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bfa2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800bfa6:	460b      	mov	r3, r1
 800bfa8:	4313      	orrs	r3, r2
 800bfaa:	d037      	beq.n	800c01c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800bfac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfb6:	d00e      	beq.n	800bfd6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800bfb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfbc:	d816      	bhi.n	800bfec <HAL_RCCEx_PeriphCLKConfig+0x664>
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d018      	beq.n	800bff4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800bfc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bfc6:	d111      	bne.n	800bfec <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bfc8:	4bc4      	ldr	r3, [pc, #784]	; (800c2dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfcc:	4ac3      	ldr	r2, [pc, #780]	; (800c2dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bfd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bfd4:	e00f      	b.n	800bff6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bfd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfda:	3308      	adds	r3, #8
 800bfdc:	2101      	movs	r1, #1
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f001 ff54 	bl	800de8c <RCCEx_PLL2_Config>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bfea:	e004      	b.n	800bff6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bfec:	2301      	movs	r3, #1
 800bfee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bff2:	e000      	b.n	800bff6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800bff4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bff6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d10a      	bne.n	800c014 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bffe:	4bb7      	ldr	r3, [pc, #732]	; (800c2dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c002:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c006:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c00a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c00c:	4ab3      	ldr	r2, [pc, #716]	; (800c2dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c00e:	430b      	orrs	r3, r1
 800c010:	6513      	str	r3, [r2, #80]	; 0x50
 800c012:	e003      	b.n	800c01c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c014:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c018:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c01c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c024:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800c028:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c02c:	2300      	movs	r3, #0
 800c02e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c032:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800c036:	460b      	mov	r3, r1
 800c038:	4313      	orrs	r3, r2
 800c03a:	d039      	beq.n	800c0b0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800c03c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c042:	2b03      	cmp	r3, #3
 800c044:	d81c      	bhi.n	800c080 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800c046:	a201      	add	r2, pc, #4	; (adr r2, 800c04c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800c048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c04c:	0800c089 	.word	0x0800c089
 800c050:	0800c05d 	.word	0x0800c05d
 800c054:	0800c06b 	.word	0x0800c06b
 800c058:	0800c089 	.word	0x0800c089
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c05c:	4b9f      	ldr	r3, [pc, #636]	; (800c2dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c060:	4a9e      	ldr	r2, [pc, #632]	; (800c2dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c062:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c066:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c068:	e00f      	b.n	800c08a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c06a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c06e:	3308      	adds	r3, #8
 800c070:	2102      	movs	r1, #2
 800c072:	4618      	mov	r0, r3
 800c074:	f001 ff0a 	bl	800de8c <RCCEx_PLL2_Config>
 800c078:	4603      	mov	r3, r0
 800c07a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c07e:	e004      	b.n	800c08a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c080:	2301      	movs	r3, #1
 800c082:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c086:	e000      	b.n	800c08a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800c088:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c08a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d10a      	bne.n	800c0a8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c092:	4b92      	ldr	r3, [pc, #584]	; (800c2dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c096:	f023 0103 	bic.w	r1, r3, #3
 800c09a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c09e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c0a0:	4a8e      	ldr	r2, [pc, #568]	; (800c2dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0a2:	430b      	orrs	r3, r1
 800c0a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c0a6:	e003      	b.n	800c0b0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c0ac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c0b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800c0bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c0c6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c0ca:	460b      	mov	r3, r1
 800c0cc:	4313      	orrs	r3, r2
 800c0ce:	f000 8099 	beq.w	800c204 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c0d2:	4b83      	ldr	r3, [pc, #524]	; (800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	4a82      	ldr	r2, [pc, #520]	; (800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c0d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c0dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c0de:	f7f8 f91b 	bl	8004318 <HAL_GetTick>
 800c0e2:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c0e6:	e00b      	b.n	800c100 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c0e8:	f7f8 f916 	bl	8004318 <HAL_GetTick>
 800c0ec:	4602      	mov	r2, r0
 800c0ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c0f2:	1ad3      	subs	r3, r2, r3
 800c0f4:	2b64      	cmp	r3, #100	; 0x64
 800c0f6:	d903      	bls.n	800c100 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800c0f8:	2303      	movs	r3, #3
 800c0fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c0fe:	e005      	b.n	800c10c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c100:	4b77      	ldr	r3, [pc, #476]	; (800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d0ed      	beq.n	800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800c10c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c110:	2b00      	cmp	r3, #0
 800c112:	d173      	bne.n	800c1fc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c114:	4b71      	ldr	r3, [pc, #452]	; (800c2dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c116:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c118:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c11c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c120:	4053      	eors	r3, r2
 800c122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c126:	2b00      	cmp	r3, #0
 800c128:	d015      	beq.n	800c156 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c12a:	4b6c      	ldr	r3, [pc, #432]	; (800c2dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c12c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c12e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c132:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c136:	4b69      	ldr	r3, [pc, #420]	; (800c2dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c13a:	4a68      	ldr	r2, [pc, #416]	; (800c2dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c13c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c140:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c142:	4b66      	ldr	r3, [pc, #408]	; (800c2dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c146:	4a65      	ldr	r2, [pc, #404]	; (800c2dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c148:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c14c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c14e:	4a63      	ldr	r2, [pc, #396]	; (800c2dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c150:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c154:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c156:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c15a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c15e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c162:	d118      	bne.n	800c196 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c164:	f7f8 f8d8 	bl	8004318 <HAL_GetTick>
 800c168:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c16c:	e00d      	b.n	800c18a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c16e:	f7f8 f8d3 	bl	8004318 <HAL_GetTick>
 800c172:	4602      	mov	r2, r0
 800c174:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c178:	1ad2      	subs	r2, r2, r3
 800c17a:	f241 3388 	movw	r3, #5000	; 0x1388
 800c17e:	429a      	cmp	r2, r3
 800c180:	d903      	bls.n	800c18a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800c182:	2303      	movs	r3, #3
 800c184:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800c188:	e005      	b.n	800c196 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c18a:	4b54      	ldr	r3, [pc, #336]	; (800c2dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c18c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c18e:	f003 0302 	and.w	r3, r3, #2
 800c192:	2b00      	cmp	r3, #0
 800c194:	d0eb      	beq.n	800c16e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800c196:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d129      	bne.n	800c1f2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c19e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c1a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c1aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c1ae:	d10e      	bne.n	800c1ce <HAL_RCCEx_PeriphCLKConfig+0x846>
 800c1b0:	4b4a      	ldr	r3, [pc, #296]	; (800c2dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c1b2:	691b      	ldr	r3, [r3, #16]
 800c1b4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800c1b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c1c0:	091a      	lsrs	r2, r3, #4
 800c1c2:	4b48      	ldr	r3, [pc, #288]	; (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800c1c4:	4013      	ands	r3, r2
 800c1c6:	4a45      	ldr	r2, [pc, #276]	; (800c2dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c1c8:	430b      	orrs	r3, r1
 800c1ca:	6113      	str	r3, [r2, #16]
 800c1cc:	e005      	b.n	800c1da <HAL_RCCEx_PeriphCLKConfig+0x852>
 800c1ce:	4b43      	ldr	r3, [pc, #268]	; (800c2dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c1d0:	691b      	ldr	r3, [r3, #16]
 800c1d2:	4a42      	ldr	r2, [pc, #264]	; (800c2dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c1d4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c1d8:	6113      	str	r3, [r2, #16]
 800c1da:	4b40      	ldr	r3, [pc, #256]	; (800c2dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c1dc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800c1de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c1e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c1ea:	4a3c      	ldr	r2, [pc, #240]	; (800c2dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c1ec:	430b      	orrs	r3, r1
 800c1ee:	6713      	str	r3, [r2, #112]	; 0x70
 800c1f0:	e008      	b.n	800c204 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c1f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c1f6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800c1fa:	e003      	b.n	800c204 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c200:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20c:	f002 0301 	and.w	r3, r2, #1
 800c210:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c214:	2300      	movs	r3, #0
 800c216:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c21a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800c21e:	460b      	mov	r3, r1
 800c220:	4313      	orrs	r3, r2
 800c222:	f000 808f 	beq.w	800c344 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800c226:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c22a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c22c:	2b28      	cmp	r3, #40	; 0x28
 800c22e:	d871      	bhi.n	800c314 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800c230:	a201      	add	r2, pc, #4	; (adr r2, 800c238 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800c232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c236:	bf00      	nop
 800c238:	0800c31d 	.word	0x0800c31d
 800c23c:	0800c315 	.word	0x0800c315
 800c240:	0800c315 	.word	0x0800c315
 800c244:	0800c315 	.word	0x0800c315
 800c248:	0800c315 	.word	0x0800c315
 800c24c:	0800c315 	.word	0x0800c315
 800c250:	0800c315 	.word	0x0800c315
 800c254:	0800c315 	.word	0x0800c315
 800c258:	0800c2e9 	.word	0x0800c2e9
 800c25c:	0800c315 	.word	0x0800c315
 800c260:	0800c315 	.word	0x0800c315
 800c264:	0800c315 	.word	0x0800c315
 800c268:	0800c315 	.word	0x0800c315
 800c26c:	0800c315 	.word	0x0800c315
 800c270:	0800c315 	.word	0x0800c315
 800c274:	0800c315 	.word	0x0800c315
 800c278:	0800c2ff 	.word	0x0800c2ff
 800c27c:	0800c315 	.word	0x0800c315
 800c280:	0800c315 	.word	0x0800c315
 800c284:	0800c315 	.word	0x0800c315
 800c288:	0800c315 	.word	0x0800c315
 800c28c:	0800c315 	.word	0x0800c315
 800c290:	0800c315 	.word	0x0800c315
 800c294:	0800c315 	.word	0x0800c315
 800c298:	0800c31d 	.word	0x0800c31d
 800c29c:	0800c315 	.word	0x0800c315
 800c2a0:	0800c315 	.word	0x0800c315
 800c2a4:	0800c315 	.word	0x0800c315
 800c2a8:	0800c315 	.word	0x0800c315
 800c2ac:	0800c315 	.word	0x0800c315
 800c2b0:	0800c315 	.word	0x0800c315
 800c2b4:	0800c315 	.word	0x0800c315
 800c2b8:	0800c31d 	.word	0x0800c31d
 800c2bc:	0800c315 	.word	0x0800c315
 800c2c0:	0800c315 	.word	0x0800c315
 800c2c4:	0800c315 	.word	0x0800c315
 800c2c8:	0800c315 	.word	0x0800c315
 800c2cc:	0800c315 	.word	0x0800c315
 800c2d0:	0800c315 	.word	0x0800c315
 800c2d4:	0800c315 	.word	0x0800c315
 800c2d8:	0800c31d 	.word	0x0800c31d
 800c2dc:	58024400 	.word	0x58024400
 800c2e0:	58024800 	.word	0x58024800
 800c2e4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c2e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2ec:	3308      	adds	r3, #8
 800c2ee:	2101      	movs	r1, #1
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f001 fdcb 	bl	800de8c <RCCEx_PLL2_Config>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c2fc:	e00f      	b.n	800c31e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c2fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c302:	3328      	adds	r3, #40	; 0x28
 800c304:	2101      	movs	r1, #1
 800c306:	4618      	mov	r0, r3
 800c308:	f001 fe72 	bl	800dff0 <RCCEx_PLL3_Config>
 800c30c:	4603      	mov	r3, r0
 800c30e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c312:	e004      	b.n	800c31e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c314:	2301      	movs	r3, #1
 800c316:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c31a:	e000      	b.n	800c31e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800c31c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c31e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c322:	2b00      	cmp	r3, #0
 800c324:	d10a      	bne.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c326:	4bbf      	ldr	r3, [pc, #764]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c32a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800c32e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c332:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c334:	4abb      	ldr	r2, [pc, #748]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c336:	430b      	orrs	r3, r1
 800c338:	6553      	str	r3, [r2, #84]	; 0x54
 800c33a:	e003      	b.n	800c344 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c33c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c340:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c344:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c34c:	f002 0302 	and.w	r3, r2, #2
 800c350:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c354:	2300      	movs	r3, #0
 800c356:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c35a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800c35e:	460b      	mov	r3, r1
 800c360:	4313      	orrs	r3, r2
 800c362:	d041      	beq.n	800c3e8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c364:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c36a:	2b05      	cmp	r3, #5
 800c36c:	d824      	bhi.n	800c3b8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800c36e:	a201      	add	r2, pc, #4	; (adr r2, 800c374 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800c370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c374:	0800c3c1 	.word	0x0800c3c1
 800c378:	0800c38d 	.word	0x0800c38d
 800c37c:	0800c3a3 	.word	0x0800c3a3
 800c380:	0800c3c1 	.word	0x0800c3c1
 800c384:	0800c3c1 	.word	0x0800c3c1
 800c388:	0800c3c1 	.word	0x0800c3c1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c38c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c390:	3308      	adds	r3, #8
 800c392:	2101      	movs	r1, #1
 800c394:	4618      	mov	r0, r3
 800c396:	f001 fd79 	bl	800de8c <RCCEx_PLL2_Config>
 800c39a:	4603      	mov	r3, r0
 800c39c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c3a0:	e00f      	b.n	800c3c2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c3a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3a6:	3328      	adds	r3, #40	; 0x28
 800c3a8:	2101      	movs	r1, #1
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f001 fe20 	bl	800dff0 <RCCEx_PLL3_Config>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c3b6:	e004      	b.n	800c3c2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c3be:	e000      	b.n	800c3c2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800c3c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c3c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d10a      	bne.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c3ca:	4b96      	ldr	r3, [pc, #600]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c3cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3ce:	f023 0107 	bic.w	r1, r3, #7
 800c3d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3d8:	4a92      	ldr	r2, [pc, #584]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c3da:	430b      	orrs	r3, r1
 800c3dc:	6553      	str	r3, [r2, #84]	; 0x54
 800c3de:	e003      	b.n	800c3e8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c3e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c3e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f0:	f002 0304 	and.w	r3, r2, #4
 800c3f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c3fe:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c402:	460b      	mov	r3, r1
 800c404:	4313      	orrs	r3, r2
 800c406:	d044      	beq.n	800c492 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c40c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c410:	2b05      	cmp	r3, #5
 800c412:	d825      	bhi.n	800c460 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800c414:	a201      	add	r2, pc, #4	; (adr r2, 800c41c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800c416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c41a:	bf00      	nop
 800c41c:	0800c469 	.word	0x0800c469
 800c420:	0800c435 	.word	0x0800c435
 800c424:	0800c44b 	.word	0x0800c44b
 800c428:	0800c469 	.word	0x0800c469
 800c42c:	0800c469 	.word	0x0800c469
 800c430:	0800c469 	.word	0x0800c469
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c434:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c438:	3308      	adds	r3, #8
 800c43a:	2101      	movs	r1, #1
 800c43c:	4618      	mov	r0, r3
 800c43e:	f001 fd25 	bl	800de8c <RCCEx_PLL2_Config>
 800c442:	4603      	mov	r3, r0
 800c444:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c448:	e00f      	b.n	800c46a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c44a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c44e:	3328      	adds	r3, #40	; 0x28
 800c450:	2101      	movs	r1, #1
 800c452:	4618      	mov	r0, r3
 800c454:	f001 fdcc 	bl	800dff0 <RCCEx_PLL3_Config>
 800c458:	4603      	mov	r3, r0
 800c45a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c45e:	e004      	b.n	800c46a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c460:	2301      	movs	r3, #1
 800c462:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c466:	e000      	b.n	800c46a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800c468:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c46a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d10b      	bne.n	800c48a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c472:	4b6c      	ldr	r3, [pc, #432]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c476:	f023 0107 	bic.w	r1, r3, #7
 800c47a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c47e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c482:	4a68      	ldr	r2, [pc, #416]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c484:	430b      	orrs	r3, r1
 800c486:	6593      	str	r3, [r2, #88]	; 0x58
 800c488:	e003      	b.n	800c492 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c48a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c48e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c492:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c49a:	f002 0320 	and.w	r3, r2, #32
 800c49e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c4a8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800c4ac:	460b      	mov	r3, r1
 800c4ae:	4313      	orrs	r3, r2
 800c4b0:	d055      	beq.n	800c55e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c4b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c4be:	d033      	beq.n	800c528 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800c4c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c4c4:	d82c      	bhi.n	800c520 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c4c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4ca:	d02f      	beq.n	800c52c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c4cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4d0:	d826      	bhi.n	800c520 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c4d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c4d6:	d02b      	beq.n	800c530 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c4d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c4dc:	d820      	bhi.n	800c520 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c4de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4e2:	d012      	beq.n	800c50a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800c4e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4e8:	d81a      	bhi.n	800c520 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d022      	beq.n	800c534 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c4ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c4f2:	d115      	bne.n	800c520 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c4f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4f8:	3308      	adds	r3, #8
 800c4fa:	2100      	movs	r1, #0
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f001 fcc5 	bl	800de8c <RCCEx_PLL2_Config>
 800c502:	4603      	mov	r3, r0
 800c504:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c508:	e015      	b.n	800c536 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c50a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c50e:	3328      	adds	r3, #40	; 0x28
 800c510:	2102      	movs	r1, #2
 800c512:	4618      	mov	r0, r3
 800c514:	f001 fd6c 	bl	800dff0 <RCCEx_PLL3_Config>
 800c518:	4603      	mov	r3, r0
 800c51a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c51e:	e00a      	b.n	800c536 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c520:	2301      	movs	r3, #1
 800c522:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c526:	e006      	b.n	800c536 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c528:	bf00      	nop
 800c52a:	e004      	b.n	800c536 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c52c:	bf00      	nop
 800c52e:	e002      	b.n	800c536 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c530:	bf00      	nop
 800c532:	e000      	b.n	800c536 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c534:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c536:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d10b      	bne.n	800c556 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c53e:	4b39      	ldr	r3, [pc, #228]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c542:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800c546:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c54a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c54e:	4a35      	ldr	r2, [pc, #212]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c550:	430b      	orrs	r3, r1
 800c552:	6553      	str	r3, [r2, #84]	; 0x54
 800c554:	e003      	b.n	800c55e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c556:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c55a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c55e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c566:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800c56a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c56e:	2300      	movs	r3, #0
 800c570:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c574:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800c578:	460b      	mov	r3, r1
 800c57a:	4313      	orrs	r3, r2
 800c57c:	d058      	beq.n	800c630 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c57e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c582:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c586:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c58a:	d033      	beq.n	800c5f4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800c58c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c590:	d82c      	bhi.n	800c5ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c596:	d02f      	beq.n	800c5f8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c59c:	d826      	bhi.n	800c5ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c59e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c5a2:	d02b      	beq.n	800c5fc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c5a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c5a8:	d820      	bhi.n	800c5ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c5aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c5ae:	d012      	beq.n	800c5d6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800c5b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c5b4:	d81a      	bhi.n	800c5ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d022      	beq.n	800c600 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c5ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c5be:	d115      	bne.n	800c5ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c5c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5c4:	3308      	adds	r3, #8
 800c5c6:	2100      	movs	r1, #0
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f001 fc5f 	bl	800de8c <RCCEx_PLL2_Config>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c5d4:	e015      	b.n	800c602 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c5d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5da:	3328      	adds	r3, #40	; 0x28
 800c5dc:	2102      	movs	r1, #2
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f001 fd06 	bl	800dff0 <RCCEx_PLL3_Config>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c5ea:	e00a      	b.n	800c602 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c5f2:	e006      	b.n	800c602 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c5f4:	bf00      	nop
 800c5f6:	e004      	b.n	800c602 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c5f8:	bf00      	nop
 800c5fa:	e002      	b.n	800c602 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c5fc:	bf00      	nop
 800c5fe:	e000      	b.n	800c602 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c600:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c602:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c606:	2b00      	cmp	r3, #0
 800c608:	d10e      	bne.n	800c628 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c60a:	4b06      	ldr	r3, [pc, #24]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c60c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c60e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800c612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c616:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c61a:	4a02      	ldr	r2, [pc, #8]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c61c:	430b      	orrs	r3, r1
 800c61e:	6593      	str	r3, [r2, #88]	; 0x58
 800c620:	e006      	b.n	800c630 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800c622:	bf00      	nop
 800c624:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c628:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c62c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c630:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c638:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800c63c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c640:	2300      	movs	r3, #0
 800c642:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c646:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c64a:	460b      	mov	r3, r1
 800c64c:	4313      	orrs	r3, r2
 800c64e:	d055      	beq.n	800c6fc <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c650:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c654:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c658:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c65c:	d033      	beq.n	800c6c6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800c65e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c662:	d82c      	bhi.n	800c6be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c668:	d02f      	beq.n	800c6ca <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c66a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c66e:	d826      	bhi.n	800c6be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c670:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c674:	d02b      	beq.n	800c6ce <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c676:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c67a:	d820      	bhi.n	800c6be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c67c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c680:	d012      	beq.n	800c6a8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800c682:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c686:	d81a      	bhi.n	800c6be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d022      	beq.n	800c6d2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c68c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c690:	d115      	bne.n	800c6be <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c692:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c696:	3308      	adds	r3, #8
 800c698:	2100      	movs	r1, #0
 800c69a:	4618      	mov	r0, r3
 800c69c:	f001 fbf6 	bl	800de8c <RCCEx_PLL2_Config>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c6a6:	e015      	b.n	800c6d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c6a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6ac:	3328      	adds	r3, #40	; 0x28
 800c6ae:	2102      	movs	r1, #2
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f001 fc9d 	bl	800dff0 <RCCEx_PLL3_Config>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c6bc:	e00a      	b.n	800c6d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c6be:	2301      	movs	r3, #1
 800c6c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c6c4:	e006      	b.n	800c6d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c6c6:	bf00      	nop
 800c6c8:	e004      	b.n	800c6d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c6ca:	bf00      	nop
 800c6cc:	e002      	b.n	800c6d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c6ce:	bf00      	nop
 800c6d0:	e000      	b.n	800c6d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c6d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c6d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d10b      	bne.n	800c6f4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c6dc:	4ba0      	ldr	r3, [pc, #640]	; (800c960 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c6de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6e0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800c6e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c6ec:	4a9c      	ldr	r2, [pc, #624]	; (800c960 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c6ee:	430b      	orrs	r3, r1
 800c6f0:	6593      	str	r3, [r2, #88]	; 0x58
 800c6f2:	e003      	b.n	800c6fc <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c6f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800c6fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c704:	f002 0308 	and.w	r3, r2, #8
 800c708:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c70c:	2300      	movs	r3, #0
 800c70e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c712:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c716:	460b      	mov	r3, r1
 800c718:	4313      	orrs	r3, r2
 800c71a:	d01e      	beq.n	800c75a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800c71c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c720:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c728:	d10c      	bne.n	800c744 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c72a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c72e:	3328      	adds	r3, #40	; 0x28
 800c730:	2102      	movs	r1, #2
 800c732:	4618      	mov	r0, r3
 800c734:	f001 fc5c 	bl	800dff0 <RCCEx_PLL3_Config>
 800c738:	4603      	mov	r3, r0
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d002      	beq.n	800c744 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800c73e:	2301      	movs	r3, #1
 800c740:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800c744:	4b86      	ldr	r3, [pc, #536]	; (800c960 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c748:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c74c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c750:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c754:	4a82      	ldr	r2, [pc, #520]	; (800c960 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c756:	430b      	orrs	r3, r1
 800c758:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c75a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c762:	f002 0310 	and.w	r3, r2, #16
 800c766:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c76a:	2300      	movs	r3, #0
 800c76c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c770:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c774:	460b      	mov	r3, r1
 800c776:	4313      	orrs	r3, r2
 800c778:	d01e      	beq.n	800c7b8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c77a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c77e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c786:	d10c      	bne.n	800c7a2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c788:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c78c:	3328      	adds	r3, #40	; 0x28
 800c78e:	2102      	movs	r1, #2
 800c790:	4618      	mov	r0, r3
 800c792:	f001 fc2d 	bl	800dff0 <RCCEx_PLL3_Config>
 800c796:	4603      	mov	r3, r0
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d002      	beq.n	800c7a2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800c79c:	2301      	movs	r3, #1
 800c79e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c7a2:	4b6f      	ldr	r3, [pc, #444]	; (800c960 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c7a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c7aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c7b2:	4a6b      	ldr	r2, [pc, #428]	; (800c960 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c7b4:	430b      	orrs	r3, r1
 800c7b6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c7b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c7c4:	67bb      	str	r3, [r7, #120]	; 0x78
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c7ca:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c7ce:	460b      	mov	r3, r1
 800c7d0:	4313      	orrs	r3, r2
 800c7d2:	d03e      	beq.n	800c852 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c7d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c7dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c7e0:	d022      	beq.n	800c828 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c7e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c7e6:	d81b      	bhi.n	800c820 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d003      	beq.n	800c7f4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800c7ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7f0:	d00b      	beq.n	800c80a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800c7f2:	e015      	b.n	800c820 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c7f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7f8:	3308      	adds	r3, #8
 800c7fa:	2100      	movs	r1, #0
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f001 fb45 	bl	800de8c <RCCEx_PLL2_Config>
 800c802:	4603      	mov	r3, r0
 800c804:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c808:	e00f      	b.n	800c82a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c80a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c80e:	3328      	adds	r3, #40	; 0x28
 800c810:	2102      	movs	r1, #2
 800c812:	4618      	mov	r0, r3
 800c814:	f001 fbec 	bl	800dff0 <RCCEx_PLL3_Config>
 800c818:	4603      	mov	r3, r0
 800c81a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c81e:	e004      	b.n	800c82a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c820:	2301      	movs	r3, #1
 800c822:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c826:	e000      	b.n	800c82a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800c828:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c82a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d10b      	bne.n	800c84a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c832:	4b4b      	ldr	r3, [pc, #300]	; (800c960 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c836:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c83a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c83e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c842:	4a47      	ldr	r2, [pc, #284]	; (800c960 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c844:	430b      	orrs	r3, r1
 800c846:	6593      	str	r3, [r2, #88]	; 0x58
 800c848:	e003      	b.n	800c852 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c84a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c84e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c852:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c85a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c85e:	673b      	str	r3, [r7, #112]	; 0x70
 800c860:	2300      	movs	r3, #0
 800c862:	677b      	str	r3, [r7, #116]	; 0x74
 800c864:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c868:	460b      	mov	r3, r1
 800c86a:	4313      	orrs	r3, r2
 800c86c:	d03b      	beq.n	800c8e6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c86e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c872:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c876:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c87a:	d01f      	beq.n	800c8bc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c87c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c880:	d818      	bhi.n	800c8b4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800c882:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c886:	d003      	beq.n	800c890 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800c888:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c88c:	d007      	beq.n	800c89e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800c88e:	e011      	b.n	800c8b4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c890:	4b33      	ldr	r3, [pc, #204]	; (800c960 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c894:	4a32      	ldr	r2, [pc, #200]	; (800c960 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c896:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c89a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c89c:	e00f      	b.n	800c8be <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c89e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8a2:	3328      	adds	r3, #40	; 0x28
 800c8a4:	2101      	movs	r1, #1
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f001 fba2 	bl	800dff0 <RCCEx_PLL3_Config>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800c8b2:	e004      	b.n	800c8be <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c8b4:	2301      	movs	r3, #1
 800c8b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c8ba:	e000      	b.n	800c8be <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800c8bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c8be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d10b      	bne.n	800c8de <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c8c6:	4b26      	ldr	r3, [pc, #152]	; (800c960 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c8c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8ca:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c8ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c8d6:	4a22      	ldr	r2, [pc, #136]	; (800c960 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c8d8:	430b      	orrs	r3, r1
 800c8da:	6553      	str	r3, [r2, #84]	; 0x54
 800c8dc:	e003      	b.n	800c8e6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c8e2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c8e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ee:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c8f2:	66bb      	str	r3, [r7, #104]	; 0x68
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c8f8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c8fc:	460b      	mov	r3, r1
 800c8fe:	4313      	orrs	r3, r2
 800c900:	d034      	beq.n	800c96c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c902:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d003      	beq.n	800c914 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800c90c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c910:	d007      	beq.n	800c922 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800c912:	e011      	b.n	800c938 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c914:	4b12      	ldr	r3, [pc, #72]	; (800c960 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c918:	4a11      	ldr	r2, [pc, #68]	; (800c960 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c91a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c91e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c920:	e00e      	b.n	800c940 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c922:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c926:	3308      	adds	r3, #8
 800c928:	2102      	movs	r1, #2
 800c92a:	4618      	mov	r0, r3
 800c92c:	f001 faae 	bl	800de8c <RCCEx_PLL2_Config>
 800c930:	4603      	mov	r3, r0
 800c932:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c936:	e003      	b.n	800c940 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800c938:	2301      	movs	r3, #1
 800c93a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c93e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c940:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c944:	2b00      	cmp	r3, #0
 800c946:	d10d      	bne.n	800c964 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c948:	4b05      	ldr	r3, [pc, #20]	; (800c960 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c94a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c94c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c950:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c956:	4a02      	ldr	r2, [pc, #8]	; (800c960 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c958:	430b      	orrs	r3, r1
 800c95a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c95c:	e006      	b.n	800c96c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800c95e:	bf00      	nop
 800c960:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c964:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c968:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c96c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c974:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c978:	663b      	str	r3, [r7, #96]	; 0x60
 800c97a:	2300      	movs	r3, #0
 800c97c:	667b      	str	r3, [r7, #100]	; 0x64
 800c97e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c982:	460b      	mov	r3, r1
 800c984:	4313      	orrs	r3, r2
 800c986:	d00c      	beq.n	800c9a2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c988:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c98c:	3328      	adds	r3, #40	; 0x28
 800c98e:	2102      	movs	r1, #2
 800c990:	4618      	mov	r0, r3
 800c992:	f001 fb2d 	bl	800dff0 <RCCEx_PLL3_Config>
 800c996:	4603      	mov	r3, r0
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d002      	beq.n	800c9a2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800c99c:	2301      	movs	r3, #1
 800c99e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c9a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9aa:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c9ae:	65bb      	str	r3, [r7, #88]	; 0x58
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c9b4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c9b8:	460b      	mov	r3, r1
 800c9ba:	4313      	orrs	r3, r2
 800c9bc:	d036      	beq.n	800ca2c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c9be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c9c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c9c8:	d018      	beq.n	800c9fc <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800c9ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c9ce:	d811      	bhi.n	800c9f4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c9d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9d4:	d014      	beq.n	800ca00 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800c9d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9da:	d80b      	bhi.n	800c9f4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d011      	beq.n	800ca04 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800c9e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9e4:	d106      	bne.n	800c9f4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c9e6:	4bb7      	ldr	r3, [pc, #732]	; (800ccc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c9e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ea:	4ab6      	ldr	r2, [pc, #728]	; (800ccc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c9ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c9f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c9f2:	e008      	b.n	800ca06 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c9f4:	2301      	movs	r3, #1
 800c9f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c9fa:	e004      	b.n	800ca06 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c9fc:	bf00      	nop
 800c9fe:	e002      	b.n	800ca06 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ca00:	bf00      	nop
 800ca02:	e000      	b.n	800ca06 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ca04:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ca06:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d10a      	bne.n	800ca24 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ca0e:	4bad      	ldr	r3, [pc, #692]	; (800ccc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ca16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca1c:	4aa9      	ldr	r2, [pc, #676]	; (800ccc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca1e:	430b      	orrs	r3, r1
 800ca20:	6553      	str	r3, [r2, #84]	; 0x54
 800ca22:	e003      	b.n	800ca2c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca24:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ca28:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ca2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca34:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800ca38:	653b      	str	r3, [r7, #80]	; 0x50
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	657b      	str	r3, [r7, #84]	; 0x54
 800ca3e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800ca42:	460b      	mov	r3, r1
 800ca44:	4313      	orrs	r3, r2
 800ca46:	d009      	beq.n	800ca5c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ca48:	4b9e      	ldr	r3, [pc, #632]	; (800ccc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca4c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ca50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca56:	4a9b      	ldr	r2, [pc, #620]	; (800ccc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca58:	430b      	orrs	r3, r1
 800ca5a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ca5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca64:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800ca68:	64bb      	str	r3, [r7, #72]	; 0x48
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ca6e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800ca72:	460b      	mov	r3, r1
 800ca74:	4313      	orrs	r3, r2
 800ca76:	d009      	beq.n	800ca8c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ca78:	4b92      	ldr	r3, [pc, #584]	; (800ccc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca7c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800ca80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca86:	4a8f      	ldr	r2, [pc, #572]	; (800ccc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca88:	430b      	orrs	r3, r1
 800ca8a:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ca8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca94:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800ca98:	643b      	str	r3, [r7, #64]	; 0x40
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	647b      	str	r3, [r7, #68]	; 0x44
 800ca9e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800caa2:	460b      	mov	r3, r1
 800caa4:	4313      	orrs	r3, r2
 800caa6:	d00e      	beq.n	800cac6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800caa8:	4b86      	ldr	r3, [pc, #536]	; (800ccc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800caaa:	691b      	ldr	r3, [r3, #16]
 800caac:	4a85      	ldr	r2, [pc, #532]	; (800ccc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800caae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cab2:	6113      	str	r3, [r2, #16]
 800cab4:	4b83      	ldr	r3, [pc, #524]	; (800ccc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cab6:	6919      	ldr	r1, [r3, #16]
 800cab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cabc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cac0:	4a80      	ldr	r2, [pc, #512]	; (800ccc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cac2:	430b      	orrs	r3, r1
 800cac4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800cac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800caca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cace:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800cad2:	63bb      	str	r3, [r7, #56]	; 0x38
 800cad4:	2300      	movs	r3, #0
 800cad6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cad8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800cadc:	460b      	mov	r3, r1
 800cade:	4313      	orrs	r3, r2
 800cae0:	d009      	beq.n	800caf6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800cae2:	4b78      	ldr	r3, [pc, #480]	; (800ccc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cae6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800caea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800caee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800caf0:	4a74      	ldr	r2, [pc, #464]	; (800ccc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800caf2:	430b      	orrs	r3, r1
 800caf4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800caf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cafe:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800cb02:	633b      	str	r3, [r7, #48]	; 0x30
 800cb04:	2300      	movs	r3, #0
 800cb06:	637b      	str	r3, [r7, #52]	; 0x34
 800cb08:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800cb0c:	460b      	mov	r3, r1
 800cb0e:	4313      	orrs	r3, r2
 800cb10:	d00a      	beq.n	800cb28 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800cb12:	4b6c      	ldr	r3, [pc, #432]	; (800ccc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cb14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb16:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800cb1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb22:	4a68      	ldr	r2, [pc, #416]	; (800ccc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cb24:	430b      	orrs	r3, r1
 800cb26:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800cb28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb30:	2100      	movs	r1, #0
 800cb32:	62b9      	str	r1, [r7, #40]	; 0x28
 800cb34:	f003 0301 	and.w	r3, r3, #1
 800cb38:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb3a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800cb3e:	460b      	mov	r3, r1
 800cb40:	4313      	orrs	r3, r2
 800cb42:	d011      	beq.n	800cb68 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cb44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb48:	3308      	adds	r3, #8
 800cb4a:	2100      	movs	r1, #0
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f001 f99d 	bl	800de8c <RCCEx_PLL2_Config>
 800cb52:	4603      	mov	r3, r0
 800cb54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800cb58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d003      	beq.n	800cb68 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cb64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800cb68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb70:	2100      	movs	r1, #0
 800cb72:	6239      	str	r1, [r7, #32]
 800cb74:	f003 0302 	and.w	r3, r3, #2
 800cb78:	627b      	str	r3, [r7, #36]	; 0x24
 800cb7a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800cb7e:	460b      	mov	r3, r1
 800cb80:	4313      	orrs	r3, r2
 800cb82:	d011      	beq.n	800cba8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cb84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb88:	3308      	adds	r3, #8
 800cb8a:	2101      	movs	r1, #1
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f001 f97d 	bl	800de8c <RCCEx_PLL2_Config>
 800cb92:	4603      	mov	r3, r0
 800cb94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800cb98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d003      	beq.n	800cba8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cba0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cba4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800cba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb0:	2100      	movs	r1, #0
 800cbb2:	61b9      	str	r1, [r7, #24]
 800cbb4:	f003 0304 	and.w	r3, r3, #4
 800cbb8:	61fb      	str	r3, [r7, #28]
 800cbba:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800cbbe:	460b      	mov	r3, r1
 800cbc0:	4313      	orrs	r3, r2
 800cbc2:	d011      	beq.n	800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cbc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cbc8:	3308      	adds	r3, #8
 800cbca:	2102      	movs	r1, #2
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f001 f95d 	bl	800de8c <RCCEx_PLL2_Config>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800cbd8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d003      	beq.n	800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cbe0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cbe4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800cbe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cbec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf0:	2100      	movs	r1, #0
 800cbf2:	6139      	str	r1, [r7, #16]
 800cbf4:	f003 0308 	and.w	r3, r3, #8
 800cbf8:	617b      	str	r3, [r7, #20]
 800cbfa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800cbfe:	460b      	mov	r3, r1
 800cc00:	4313      	orrs	r3, r2
 800cc02:	d011      	beq.n	800cc28 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cc04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc08:	3328      	adds	r3, #40	; 0x28
 800cc0a:	2100      	movs	r1, #0
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f001 f9ef 	bl	800dff0 <RCCEx_PLL3_Config>
 800cc12:	4603      	mov	r3, r0
 800cc14:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800cc18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d003      	beq.n	800cc28 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cc24:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800cc28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc30:	2100      	movs	r1, #0
 800cc32:	60b9      	str	r1, [r7, #8]
 800cc34:	f003 0310 	and.w	r3, r3, #16
 800cc38:	60fb      	str	r3, [r7, #12]
 800cc3a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800cc3e:	460b      	mov	r3, r1
 800cc40:	4313      	orrs	r3, r2
 800cc42:	d011      	beq.n	800cc68 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cc44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc48:	3328      	adds	r3, #40	; 0x28
 800cc4a:	2101      	movs	r1, #1
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f001 f9cf 	bl	800dff0 <RCCEx_PLL3_Config>
 800cc52:	4603      	mov	r3, r0
 800cc54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800cc58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d003      	beq.n	800cc68 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cc64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800cc68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc70:	2100      	movs	r1, #0
 800cc72:	6039      	str	r1, [r7, #0]
 800cc74:	f003 0320 	and.w	r3, r3, #32
 800cc78:	607b      	str	r3, [r7, #4]
 800cc7a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800cc7e:	460b      	mov	r3, r1
 800cc80:	4313      	orrs	r3, r2
 800cc82:	d011      	beq.n	800cca8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cc84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc88:	3328      	adds	r3, #40	; 0x28
 800cc8a:	2102      	movs	r1, #2
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f001 f9af 	bl	800dff0 <RCCEx_PLL3_Config>
 800cc92:	4603      	mov	r3, r0
 800cc94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800cc98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d003      	beq.n	800cca8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cca0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cca4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800cca8:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d101      	bne.n	800ccb4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	e000      	b.n	800ccb6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800ccb4:	2301      	movs	r3, #1
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ccc2:	bf00      	nop
 800ccc4:	58024400 	.word	0x58024400

0800ccc8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b090      	sub	sp, #64	; 0x40
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ccd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ccd6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800ccda:	430b      	orrs	r3, r1
 800ccdc:	f040 8094 	bne.w	800ce08 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800cce0:	4b9b      	ldr	r3, [pc, #620]	; (800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cce4:	f003 0307 	and.w	r3, r3, #7
 800cce8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ccea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccec:	2b04      	cmp	r3, #4
 800ccee:	f200 8087 	bhi.w	800ce00 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ccf2:	a201      	add	r2, pc, #4	; (adr r2, 800ccf8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ccf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccf8:	0800cd0d 	.word	0x0800cd0d
 800ccfc:	0800cd35 	.word	0x0800cd35
 800cd00:	0800cd5d 	.word	0x0800cd5d
 800cd04:	0800cdf9 	.word	0x0800cdf9
 800cd08:	0800cd85 	.word	0x0800cd85
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cd0c:	4b90      	ldr	r3, [pc, #576]	; (800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cd18:	d108      	bne.n	800cd2c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cd1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f000 ff62 	bl	800dbe8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd28:	f000 bc93 	b.w	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd30:	f000 bc8f 	b.w	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cd34:	4b86      	ldr	r3, [pc, #536]	; (800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cd40:	d108      	bne.n	800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd42:	f107 0318 	add.w	r3, r7, #24
 800cd46:	4618      	mov	r0, r3
 800cd48:	f000 fca6 	bl	800d698 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cd4c:	69bb      	ldr	r3, [r7, #24]
 800cd4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd50:	f000 bc7f 	b.w	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cd54:	2300      	movs	r3, #0
 800cd56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd58:	f000 bc7b 	b.w	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cd5c:	4b7c      	ldr	r3, [pc, #496]	; (800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cd64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd68:	d108      	bne.n	800cd7c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd6a:	f107 030c 	add.w	r3, r7, #12
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f000 fde6 	bl	800d940 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd78:	f000 bc6b 	b.w	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd80:	f000 bc67 	b.w	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cd84:	4b72      	ldr	r3, [pc, #456]	; (800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cd8c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cd8e:	4b70      	ldr	r3, [pc, #448]	; (800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	f003 0304 	and.w	r3, r3, #4
 800cd96:	2b04      	cmp	r3, #4
 800cd98:	d10c      	bne.n	800cdb4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800cd9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d109      	bne.n	800cdb4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cda0:	4b6b      	ldr	r3, [pc, #428]	; (800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	08db      	lsrs	r3, r3, #3
 800cda6:	f003 0303 	and.w	r3, r3, #3
 800cdaa:	4a6a      	ldr	r2, [pc, #424]	; (800cf54 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800cdac:	fa22 f303 	lsr.w	r3, r2, r3
 800cdb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cdb2:	e01f      	b.n	800cdf4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cdb4:	4b66      	ldr	r3, [pc, #408]	; (800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cdc0:	d106      	bne.n	800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800cdc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cdc8:	d102      	bne.n	800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cdca:	4b63      	ldr	r3, [pc, #396]	; (800cf58 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800cdcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cdce:	e011      	b.n	800cdf4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cdd0:	4b5f      	ldr	r3, [pc, #380]	; (800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cdd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cddc:	d106      	bne.n	800cdec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800cdde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cde0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cde4:	d102      	bne.n	800cdec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cde6:	4b5d      	ldr	r3, [pc, #372]	; (800cf5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cde8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cdea:	e003      	b.n	800cdf4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cdec:	2300      	movs	r3, #0
 800cdee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cdf0:	f000 bc2f 	b.w	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cdf4:	f000 bc2d 	b.w	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cdf8:	4b59      	ldr	r3, [pc, #356]	; (800cf60 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800cdfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdfc:	f000 bc29 	b.w	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ce00:	2300      	movs	r3, #0
 800ce02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce04:	f000 bc25 	b.w	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ce08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce0c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800ce10:	430b      	orrs	r3, r1
 800ce12:	f040 80a7 	bne.w	800cf64 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800ce16:	4b4e      	ldr	r3, [pc, #312]	; (800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ce18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce1a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800ce1e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ce20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ce26:	d054      	beq.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800ce28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ce2e:	f200 808b 	bhi.w	800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ce32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce34:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ce38:	f000 8083 	beq.w	800cf42 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800ce3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce3e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ce42:	f200 8081 	bhi.w	800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ce46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ce4c:	d02f      	beq.n	800ceae <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800ce4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ce54:	d878      	bhi.n	800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ce56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d004      	beq.n	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800ce5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ce62:	d012      	beq.n	800ce8a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800ce64:	e070      	b.n	800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ce66:	4b3a      	ldr	r3, [pc, #232]	; (800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ce72:	d107      	bne.n	800ce84 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ce74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f000 feb5 	bl	800dbe8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ce7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce82:	e3e6      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce84:	2300      	movs	r3, #0
 800ce86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce88:	e3e3      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce8a:	4b31      	ldr	r3, [pc, #196]	; (800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ce96:	d107      	bne.n	800cea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce98:	f107 0318 	add.w	r3, r7, #24
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f000 fbfb 	bl	800d698 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cea2:	69bb      	ldr	r3, [r7, #24]
 800cea4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cea6:	e3d4      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ceac:	e3d1      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ceae:	4b28      	ldr	r3, [pc, #160]	; (800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ceb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ceba:	d107      	bne.n	800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cebc:	f107 030c 	add.w	r3, r7, #12
 800cec0:	4618      	mov	r0, r3
 800cec2:	f000 fd3d 	bl	800d940 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ceca:	e3c2      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cecc:	2300      	movs	r3, #0
 800cece:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ced0:	e3bf      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ced2:	4b1f      	ldr	r3, [pc, #124]	; (800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ced4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ced6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ceda:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cedc:	4b1c      	ldr	r3, [pc, #112]	; (800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f003 0304 	and.w	r3, r3, #4
 800cee4:	2b04      	cmp	r3, #4
 800cee6:	d10c      	bne.n	800cf02 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800cee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d109      	bne.n	800cf02 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ceee:	4b18      	ldr	r3, [pc, #96]	; (800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	08db      	lsrs	r3, r3, #3
 800cef4:	f003 0303 	and.w	r3, r3, #3
 800cef8:	4a16      	ldr	r2, [pc, #88]	; (800cf54 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800cefa:	fa22 f303 	lsr.w	r3, r2, r3
 800cefe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf00:	e01e      	b.n	800cf40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cf02:	4b13      	ldr	r3, [pc, #76]	; (800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf0e:	d106      	bne.n	800cf1e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800cf10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cf16:	d102      	bne.n	800cf1e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cf18:	4b0f      	ldr	r3, [pc, #60]	; (800cf58 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800cf1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf1c:	e010      	b.n	800cf40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cf1e:	4b0c      	ldr	r3, [pc, #48]	; (800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf2a:	d106      	bne.n	800cf3a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800cf2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf32:	d102      	bne.n	800cf3a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cf34:	4b09      	ldr	r3, [pc, #36]	; (800cf5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cf36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf38:	e002      	b.n	800cf40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cf3e:	e388      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cf40:	e387      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cf42:	4b07      	ldr	r3, [pc, #28]	; (800cf60 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800cf44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf46:	e384      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf4c:	e381      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cf4e:	bf00      	nop
 800cf50:	58024400 	.word	0x58024400
 800cf54:	03d09000 	.word	0x03d09000
 800cf58:	003d0900 	.word	0x003d0900
 800cf5c:	02faf080 	.word	0x02faf080
 800cf60:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800cf64:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf68:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800cf6c:	430b      	orrs	r3, r1
 800cf6e:	f040 809c 	bne.w	800d0aa <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800cf72:	4b9e      	ldr	r3, [pc, #632]	; (800d1ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf76:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800cf7a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800cf7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cf82:	d054      	beq.n	800d02e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800cf84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cf8a:	f200 808b 	bhi.w	800d0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cf8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf90:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cf94:	f000 8083 	beq.w	800d09e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800cf98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf9a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cf9e:	f200 8081 	bhi.w	800d0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cfa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfa4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cfa8:	d02f      	beq.n	800d00a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800cfaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cfb0:	d878      	bhi.n	800d0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cfb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d004      	beq.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800cfb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cfbe:	d012      	beq.n	800cfe6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800cfc0:	e070      	b.n	800d0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cfc2:	4b8a      	ldr	r3, [pc, #552]	; (800d1ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cfca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cfce:	d107      	bne.n	800cfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cfd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	f000 fe07 	bl	800dbe8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cfda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfde:	e338      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfe4:	e335      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cfe6:	4b81      	ldr	r3, [pc, #516]	; (800d1ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cfee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cff2:	d107      	bne.n	800d004 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cff4:	f107 0318 	add.w	r3, r7, #24
 800cff8:	4618      	mov	r0, r3
 800cffa:	f000 fb4d 	bl	800d698 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cffe:	69bb      	ldr	r3, [r7, #24]
 800d000:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d002:	e326      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d004:	2300      	movs	r3, #0
 800d006:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d008:	e323      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d00a:	4b78      	ldr	r3, [pc, #480]	; (800d1ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d012:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d016:	d107      	bne.n	800d028 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d018:	f107 030c 	add.w	r3, r7, #12
 800d01c:	4618      	mov	r0, r3
 800d01e:	f000 fc8f 	bl	800d940 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d026:	e314      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d028:	2300      	movs	r3, #0
 800d02a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d02c:	e311      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d02e:	4b6f      	ldr	r3, [pc, #444]	; (800d1ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d032:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d036:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d038:	4b6c      	ldr	r3, [pc, #432]	; (800d1ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f003 0304 	and.w	r3, r3, #4
 800d040:	2b04      	cmp	r3, #4
 800d042:	d10c      	bne.n	800d05e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800d044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d046:	2b00      	cmp	r3, #0
 800d048:	d109      	bne.n	800d05e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d04a:	4b68      	ldr	r3, [pc, #416]	; (800d1ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	08db      	lsrs	r3, r3, #3
 800d050:	f003 0303 	and.w	r3, r3, #3
 800d054:	4a66      	ldr	r2, [pc, #408]	; (800d1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800d056:	fa22 f303 	lsr.w	r3, r2, r3
 800d05a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d05c:	e01e      	b.n	800d09c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d05e:	4b63      	ldr	r3, [pc, #396]	; (800d1ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d06a:	d106      	bne.n	800d07a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800d06c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d06e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d072:	d102      	bne.n	800d07a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d074:	4b5f      	ldr	r3, [pc, #380]	; (800d1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800d076:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d078:	e010      	b.n	800d09c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d07a:	4b5c      	ldr	r3, [pc, #368]	; (800d1ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d082:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d086:	d106      	bne.n	800d096 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800d088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d08a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d08e:	d102      	bne.n	800d096 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d090:	4b59      	ldr	r3, [pc, #356]	; (800d1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d092:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d094:	e002      	b.n	800d09c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d096:	2300      	movs	r3, #0
 800d098:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800d09a:	e2da      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d09c:	e2d9      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d09e:	4b57      	ldr	r3, [pc, #348]	; (800d1fc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800d0a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0a2:	e2d6      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0a8:	e2d3      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800d0aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0ae:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800d0b2:	430b      	orrs	r3, r1
 800d0b4:	f040 80a7 	bne.w	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800d0b8:	4b4c      	ldr	r3, [pc, #304]	; (800d1ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d0ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0bc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800d0c0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d0c8:	d055      	beq.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800d0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d0d0:	f200 8096 	bhi.w	800d200 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d0da:	f000 8084 	beq.w	800d1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800d0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d0e4:	f200 808c 	bhi.w	800d200 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d0ee:	d030      	beq.n	800d152 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800d0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d0f6:	f200 8083 	bhi.w	800d200 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d004      	beq.n	800d10a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800d100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d106:	d012      	beq.n	800d12e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800d108:	e07a      	b.n	800d200 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d10a:	4b38      	ldr	r3, [pc, #224]	; (800d1ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d112:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d116:	d107      	bne.n	800d128 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d11c:	4618      	mov	r0, r3
 800d11e:	f000 fd63 	bl	800dbe8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d124:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d126:	e294      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d128:	2300      	movs	r3, #0
 800d12a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d12c:	e291      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d12e:	4b2f      	ldr	r3, [pc, #188]	; (800d1ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d136:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d13a:	d107      	bne.n	800d14c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d13c:	f107 0318 	add.w	r3, r7, #24
 800d140:	4618      	mov	r0, r3
 800d142:	f000 faa9 	bl	800d698 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d146:	69bb      	ldr	r3, [r7, #24]
 800d148:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d14a:	e282      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d14c:	2300      	movs	r3, #0
 800d14e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d150:	e27f      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d152:	4b26      	ldr	r3, [pc, #152]	; (800d1ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d15a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d15e:	d107      	bne.n	800d170 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d160:	f107 030c 	add.w	r3, r7, #12
 800d164:	4618      	mov	r0, r3
 800d166:	f000 fbeb 	bl	800d940 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d16e:	e270      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d170:	2300      	movs	r3, #0
 800d172:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d174:	e26d      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d176:	4b1d      	ldr	r3, [pc, #116]	; (800d1ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d17a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d17e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d180:	4b1a      	ldr	r3, [pc, #104]	; (800d1ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	f003 0304 	and.w	r3, r3, #4
 800d188:	2b04      	cmp	r3, #4
 800d18a:	d10c      	bne.n	800d1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800d18c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d109      	bne.n	800d1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d192:	4b16      	ldr	r3, [pc, #88]	; (800d1ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	08db      	lsrs	r3, r3, #3
 800d198:	f003 0303 	and.w	r3, r3, #3
 800d19c:	4a14      	ldr	r2, [pc, #80]	; (800d1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800d19e:	fa22 f303 	lsr.w	r3, r2, r3
 800d1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d1a4:	e01e      	b.n	800d1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d1a6:	4b11      	ldr	r3, [pc, #68]	; (800d1ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d1b2:	d106      	bne.n	800d1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800d1b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d1ba:	d102      	bne.n	800d1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d1bc:	4b0d      	ldr	r3, [pc, #52]	; (800d1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800d1be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d1c0:	e010      	b.n	800d1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d1c2:	4b0a      	ldr	r3, [pc, #40]	; (800d1ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d1ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d1ce:	d106      	bne.n	800d1de <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800d1d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d1d6:	d102      	bne.n	800d1de <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d1d8:	4b07      	ldr	r3, [pc, #28]	; (800d1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d1da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d1dc:	e002      	b.n	800d1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800d1e2:	e236      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d1e4:	e235      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d1e6:	4b05      	ldr	r3, [pc, #20]	; (800d1fc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800d1e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1ea:	e232      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d1ec:	58024400 	.word	0x58024400
 800d1f0:	03d09000 	.word	0x03d09000
 800d1f4:	003d0900 	.word	0x003d0900
 800d1f8:	02faf080 	.word	0x02faf080
 800d1fc:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800d200:	2300      	movs	r3, #0
 800d202:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d204:	e225      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800d206:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d20a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800d20e:	430b      	orrs	r3, r1
 800d210:	f040 8085 	bne.w	800d31e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800d214:	4b9c      	ldr	r3, [pc, #624]	; (800d488 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d218:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800d21c:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800d21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d224:	d06b      	beq.n	800d2fe <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800d226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d228:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d22c:	d874      	bhi.n	800d318 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d230:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d234:	d056      	beq.n	800d2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800d236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d238:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d23c:	d86c      	bhi.n	800d318 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d240:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d244:	d03b      	beq.n	800d2be <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800d246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d248:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d24c:	d864      	bhi.n	800d318 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d250:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d254:	d021      	beq.n	800d29a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800d256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d258:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d25c:	d85c      	bhi.n	800d318 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d260:	2b00      	cmp	r3, #0
 800d262:	d004      	beq.n	800d26e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800d264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d26a:	d004      	beq.n	800d276 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800d26c:	e054      	b.n	800d318 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800d26e:	f7fe fb5f 	bl	800b930 <HAL_RCC_GetPCLK1Freq>
 800d272:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d274:	e1ed      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d276:	4b84      	ldr	r3, [pc, #528]	; (800d488 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d27e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d282:	d107      	bne.n	800d294 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d284:	f107 0318 	add.w	r3, r7, #24
 800d288:	4618      	mov	r0, r3
 800d28a:	f000 fa05 	bl	800d698 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d28e:	69fb      	ldr	r3, [r7, #28]
 800d290:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d292:	e1de      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d294:	2300      	movs	r3, #0
 800d296:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d298:	e1db      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d29a:	4b7b      	ldr	r3, [pc, #492]	; (800d488 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d2a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d2a6:	d107      	bne.n	800d2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d2a8:	f107 030c 	add.w	r3, r7, #12
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f000 fb47 	bl	800d940 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d2b2:	693b      	ldr	r3, [r7, #16]
 800d2b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2b6:	e1cc      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2bc:	e1c9      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d2be:	4b72      	ldr	r3, [pc, #456]	; (800d488 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	f003 0304 	and.w	r3, r3, #4
 800d2c6:	2b04      	cmp	r3, #4
 800d2c8:	d109      	bne.n	800d2de <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d2ca:	4b6f      	ldr	r3, [pc, #444]	; (800d488 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	08db      	lsrs	r3, r3, #3
 800d2d0:	f003 0303 	and.w	r3, r3, #3
 800d2d4:	4a6d      	ldr	r2, [pc, #436]	; (800d48c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d2d6:	fa22 f303 	lsr.w	r3, r2, r3
 800d2da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2dc:	e1b9      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2e2:	e1b6      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d2e4:	4b68      	ldr	r3, [pc, #416]	; (800d488 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d2f0:	d102      	bne.n	800d2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800d2f2:	4b67      	ldr	r3, [pc, #412]	; (800d490 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d2f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2f6:	e1ac      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2fc:	e1a9      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d2fe:	4b62      	ldr	r3, [pc, #392]	; (800d488 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d306:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d30a:	d102      	bne.n	800d312 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800d30c:	4b61      	ldr	r3, [pc, #388]	; (800d494 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d30e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d310:	e19f      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d312:	2300      	movs	r3, #0
 800d314:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d316:	e19c      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d318:	2300      	movs	r3, #0
 800d31a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d31c:	e199      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800d31e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d322:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800d326:	430b      	orrs	r3, r1
 800d328:	d173      	bne.n	800d412 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800d32a:	4b57      	ldr	r3, [pc, #348]	; (800d488 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d32c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d32e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d332:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d336:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d33a:	d02f      	beq.n	800d39c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800d33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d33e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d342:	d863      	bhi.n	800d40c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800d344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d346:	2b00      	cmp	r3, #0
 800d348:	d004      	beq.n	800d354 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800d34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d34c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d350:	d012      	beq.n	800d378 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800d352:	e05b      	b.n	800d40c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d354:	4b4c      	ldr	r3, [pc, #304]	; (800d488 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d35c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d360:	d107      	bne.n	800d372 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d362:	f107 0318 	add.w	r3, r7, #24
 800d366:	4618      	mov	r0, r3
 800d368:	f000 f996 	bl	800d698 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d36c:	69bb      	ldr	r3, [r7, #24]
 800d36e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d370:	e16f      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d372:	2300      	movs	r3, #0
 800d374:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d376:	e16c      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d378:	4b43      	ldr	r3, [pc, #268]	; (800d488 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d380:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d384:	d107      	bne.n	800d396 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d386:	f107 030c 	add.w	r3, r7, #12
 800d38a:	4618      	mov	r0, r3
 800d38c:	f000 fad8 	bl	800d940 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800d390:	697b      	ldr	r3, [r7, #20]
 800d392:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d394:	e15d      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d396:	2300      	movs	r3, #0
 800d398:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d39a:	e15a      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d39c:	4b3a      	ldr	r3, [pc, #232]	; (800d488 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d39e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d3a4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d3a6:	4b38      	ldr	r3, [pc, #224]	; (800d488 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	f003 0304 	and.w	r3, r3, #4
 800d3ae:	2b04      	cmp	r3, #4
 800d3b0:	d10c      	bne.n	800d3cc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800d3b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d109      	bne.n	800d3cc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d3b8:	4b33      	ldr	r3, [pc, #204]	; (800d488 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	08db      	lsrs	r3, r3, #3
 800d3be:	f003 0303 	and.w	r3, r3, #3
 800d3c2:	4a32      	ldr	r2, [pc, #200]	; (800d48c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d3c4:	fa22 f303 	lsr.w	r3, r2, r3
 800d3c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d3ca:	e01e      	b.n	800d40a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d3cc:	4b2e      	ldr	r3, [pc, #184]	; (800d488 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d3d8:	d106      	bne.n	800d3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800d3da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d3e0:	d102      	bne.n	800d3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d3e2:	4b2b      	ldr	r3, [pc, #172]	; (800d490 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d3e6:	e010      	b.n	800d40a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d3e8:	4b27      	ldr	r3, [pc, #156]	; (800d488 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d3f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d3f4:	d106      	bne.n	800d404 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800d3f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d3fc:	d102      	bne.n	800d404 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d3fe:	4b25      	ldr	r3, [pc, #148]	; (800d494 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d400:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d402:	e002      	b.n	800d40a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d404:	2300      	movs	r3, #0
 800d406:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800d408:	e123      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d40a:	e122      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d40c:	2300      	movs	r3, #0
 800d40e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d410:	e11f      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d412:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d416:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800d41a:	430b      	orrs	r3, r1
 800d41c:	d13c      	bne.n	800d498 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d41e:	4b1a      	ldr	r3, [pc, #104]	; (800d488 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d426:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d004      	beq.n	800d438 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800d42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d434:	d012      	beq.n	800d45c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800d436:	e023      	b.n	800d480 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d438:	4b13      	ldr	r3, [pc, #76]	; (800d488 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d440:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d444:	d107      	bne.n	800d456 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d44a:	4618      	mov	r0, r3
 800d44c:	f000 fbcc 	bl	800dbe8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d452:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d454:	e0fd      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d456:	2300      	movs	r3, #0
 800d458:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d45a:	e0fa      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d45c:	4b0a      	ldr	r3, [pc, #40]	; (800d488 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d464:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d468:	d107      	bne.n	800d47a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d46a:	f107 0318 	add.w	r3, r7, #24
 800d46e:	4618      	mov	r0, r3
 800d470:	f000 f912 	bl	800d698 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d474:	6a3b      	ldr	r3, [r7, #32]
 800d476:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d478:	e0eb      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d47a:	2300      	movs	r3, #0
 800d47c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d47e:	e0e8      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d480:	2300      	movs	r3, #0
 800d482:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d484:	e0e5      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d486:	bf00      	nop
 800d488:	58024400 	.word	0x58024400
 800d48c:	03d09000 	.word	0x03d09000
 800d490:	003d0900 	.word	0x003d0900
 800d494:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d498:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d49c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800d4a0:	430b      	orrs	r3, r1
 800d4a2:	f040 8085 	bne.w	800d5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d4a6:	4b6d      	ldr	r3, [pc, #436]	; (800d65c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d4a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d4aa:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800d4ae:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d4b6:	d06b      	beq.n	800d590 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800d4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d4be:	d874      	bhi.n	800d5aa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d4c6:	d056      	beq.n	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800d4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d4ce:	d86c      	bhi.n	800d5aa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d4d6:	d03b      	beq.n	800d550 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800d4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d4de:	d864      	bhi.n	800d5aa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d4e6:	d021      	beq.n	800d52c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800d4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d4ee:	d85c      	bhi.n	800d5aa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d004      	beq.n	800d500 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800d4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d4fc:	d004      	beq.n	800d508 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800d4fe:	e054      	b.n	800d5aa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d500:	f000 f8b4 	bl	800d66c <HAL_RCCEx_GetD3PCLK1Freq>
 800d504:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d506:	e0a4      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d508:	4b54      	ldr	r3, [pc, #336]	; (800d65c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d510:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d514:	d107      	bne.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d516:	f107 0318 	add.w	r3, r7, #24
 800d51a:	4618      	mov	r0, r3
 800d51c:	f000 f8bc 	bl	800d698 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d520:	69fb      	ldr	r3, [r7, #28]
 800d522:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d524:	e095      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d526:	2300      	movs	r3, #0
 800d528:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d52a:	e092      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d52c:	4b4b      	ldr	r3, [pc, #300]	; (800d65c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d534:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d538:	d107      	bne.n	800d54a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d53a:	f107 030c 	add.w	r3, r7, #12
 800d53e:	4618      	mov	r0, r3
 800d540:	f000 f9fe 	bl	800d940 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d544:	693b      	ldr	r3, [r7, #16]
 800d546:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d548:	e083      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d54a:	2300      	movs	r3, #0
 800d54c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d54e:	e080      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d550:	4b42      	ldr	r3, [pc, #264]	; (800d65c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	f003 0304 	and.w	r3, r3, #4
 800d558:	2b04      	cmp	r3, #4
 800d55a:	d109      	bne.n	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d55c:	4b3f      	ldr	r3, [pc, #252]	; (800d65c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	08db      	lsrs	r3, r3, #3
 800d562:	f003 0303 	and.w	r3, r3, #3
 800d566:	4a3e      	ldr	r2, [pc, #248]	; (800d660 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800d568:	fa22 f303 	lsr.w	r3, r2, r3
 800d56c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d56e:	e070      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d570:	2300      	movs	r3, #0
 800d572:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d574:	e06d      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d576:	4b39      	ldr	r3, [pc, #228]	; (800d65c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d57e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d582:	d102      	bne.n	800d58a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800d584:	4b37      	ldr	r3, [pc, #220]	; (800d664 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d586:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d588:	e063      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d58a:	2300      	movs	r3, #0
 800d58c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d58e:	e060      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d590:	4b32      	ldr	r3, [pc, #200]	; (800d65c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d598:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d59c:	d102      	bne.n	800d5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800d59e:	4b32      	ldr	r3, [pc, #200]	; (800d668 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d5a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d5a2:	e056      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d5a8:	e053      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d5ae:	e050      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d5b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d5b4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800d5b8:	430b      	orrs	r3, r1
 800d5ba:	d148      	bne.n	800d64e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d5bc:	4b27      	ldr	r3, [pc, #156]	; (800d65c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d5be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d5c4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d5cc:	d02a      	beq.n	800d624 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800d5ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d5d4:	d838      	bhi.n	800d648 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800d5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d004      	beq.n	800d5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800d5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d5e2:	d00d      	beq.n	800d600 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800d5e4:	e030      	b.n	800d648 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d5e6:	4b1d      	ldr	r3, [pc, #116]	; (800d65c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d5ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d5f2:	d102      	bne.n	800d5fa <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800d5f4:	4b1c      	ldr	r3, [pc, #112]	; (800d668 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d5f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d5f8:	e02b      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d5fe:	e028      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d600:	4b16      	ldr	r3, [pc, #88]	; (800d65c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d608:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d60c:	d107      	bne.n	800d61e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d60e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d612:	4618      	mov	r0, r3
 800d614:	f000 fae8 	bl	800dbe8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d61a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d61c:	e019      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d61e:	2300      	movs	r3, #0
 800d620:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d622:	e016      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d624:	4b0d      	ldr	r3, [pc, #52]	; (800d65c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d62c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d630:	d107      	bne.n	800d642 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d632:	f107 0318 	add.w	r3, r7, #24
 800d636:	4618      	mov	r0, r3
 800d638:	f000 f82e 	bl	800d698 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d63c:	69fb      	ldr	r3, [r7, #28]
 800d63e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d640:	e007      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d642:	2300      	movs	r3, #0
 800d644:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d646:	e004      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d648:	2300      	movs	r3, #0
 800d64a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d64c:	e001      	b.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800d64e:	2300      	movs	r3, #0
 800d650:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800d652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d654:	4618      	mov	r0, r3
 800d656:	3740      	adds	r7, #64	; 0x40
 800d658:	46bd      	mov	sp, r7
 800d65a:	bd80      	pop	{r7, pc}
 800d65c:	58024400 	.word	0x58024400
 800d660:	03d09000 	.word	0x03d09000
 800d664:	003d0900 	.word	0x003d0900
 800d668:	02faf080 	.word	0x02faf080

0800d66c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d670:	f7fe f92e 	bl	800b8d0 <HAL_RCC_GetHCLKFreq>
 800d674:	4602      	mov	r2, r0
 800d676:	4b06      	ldr	r3, [pc, #24]	; (800d690 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d678:	6a1b      	ldr	r3, [r3, #32]
 800d67a:	091b      	lsrs	r3, r3, #4
 800d67c:	f003 0307 	and.w	r3, r3, #7
 800d680:	4904      	ldr	r1, [pc, #16]	; (800d694 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d682:	5ccb      	ldrb	r3, [r1, r3]
 800d684:	f003 031f 	and.w	r3, r3, #31
 800d688:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d68c:	4618      	mov	r0, r3
 800d68e:	bd80      	pop	{r7, pc}
 800d690:	58024400 	.word	0x58024400
 800d694:	080204f4 	.word	0x080204f4

0800d698 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d698:	b480      	push	{r7}
 800d69a:	b089      	sub	sp, #36	; 0x24
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d6a0:	4ba1      	ldr	r3, [pc, #644]	; (800d928 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d6a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6a4:	f003 0303 	and.w	r3, r3, #3
 800d6a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d6aa:	4b9f      	ldr	r3, [pc, #636]	; (800d928 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d6ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6ae:	0b1b      	lsrs	r3, r3, #12
 800d6b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d6b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d6b6:	4b9c      	ldr	r3, [pc, #624]	; (800d928 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d6b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6ba:	091b      	lsrs	r3, r3, #4
 800d6bc:	f003 0301 	and.w	r3, r3, #1
 800d6c0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d6c2:	4b99      	ldr	r3, [pc, #612]	; (800d928 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d6c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6c6:	08db      	lsrs	r3, r3, #3
 800d6c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d6cc:	693a      	ldr	r2, [r7, #16]
 800d6ce:	fb02 f303 	mul.w	r3, r2, r3
 800d6d2:	ee07 3a90 	vmov	s15, r3
 800d6d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d6de:	697b      	ldr	r3, [r7, #20]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	f000 8111 	beq.w	800d908 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d6e6:	69bb      	ldr	r3, [r7, #24]
 800d6e8:	2b02      	cmp	r3, #2
 800d6ea:	f000 8083 	beq.w	800d7f4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d6ee:	69bb      	ldr	r3, [r7, #24]
 800d6f0:	2b02      	cmp	r3, #2
 800d6f2:	f200 80a1 	bhi.w	800d838 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d6f6:	69bb      	ldr	r3, [r7, #24]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d003      	beq.n	800d704 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d6fc:	69bb      	ldr	r3, [r7, #24]
 800d6fe:	2b01      	cmp	r3, #1
 800d700:	d056      	beq.n	800d7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d702:	e099      	b.n	800d838 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d704:	4b88      	ldr	r3, [pc, #544]	; (800d928 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	f003 0320 	and.w	r3, r3, #32
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d02d      	beq.n	800d76c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d710:	4b85      	ldr	r3, [pc, #532]	; (800d928 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	08db      	lsrs	r3, r3, #3
 800d716:	f003 0303 	and.w	r3, r3, #3
 800d71a:	4a84      	ldr	r2, [pc, #528]	; (800d92c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d71c:	fa22 f303 	lsr.w	r3, r2, r3
 800d720:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	ee07 3a90 	vmov	s15, r3
 800d728:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d72c:	697b      	ldr	r3, [r7, #20]
 800d72e:	ee07 3a90 	vmov	s15, r3
 800d732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d73a:	4b7b      	ldr	r3, [pc, #492]	; (800d928 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d73c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d73e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d742:	ee07 3a90 	vmov	s15, r3
 800d746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d74a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d74e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d930 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d752:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d75a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d75e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d762:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d766:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d76a:	e087      	b.n	800d87c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d76c:	697b      	ldr	r3, [r7, #20]
 800d76e:	ee07 3a90 	vmov	s15, r3
 800d772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d776:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d934 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d77a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d77e:	4b6a      	ldr	r3, [pc, #424]	; (800d928 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d786:	ee07 3a90 	vmov	s15, r3
 800d78a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d78e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d792:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d930 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d79a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d79e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d7a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d7ae:	e065      	b.n	800d87c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d7b0:	697b      	ldr	r3, [r7, #20]
 800d7b2:	ee07 3a90 	vmov	s15, r3
 800d7b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d938 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d7be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d7c2:	4b59      	ldr	r3, [pc, #356]	; (800d928 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d7c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7ca:	ee07 3a90 	vmov	s15, r3
 800d7ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d7d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d930 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d7da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d7de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d7e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d7f2:	e043      	b.n	800d87c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d7f4:	697b      	ldr	r3, [r7, #20]
 800d7f6:	ee07 3a90 	vmov	s15, r3
 800d7fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d93c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d806:	4b48      	ldr	r3, [pc, #288]	; (800d928 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d80a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d80e:	ee07 3a90 	vmov	s15, r3
 800d812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d816:	ed97 6a03 	vldr	s12, [r7, #12]
 800d81a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d930 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d81e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d826:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d82a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d82e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d832:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d836:	e021      	b.n	800d87c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d838:	697b      	ldr	r3, [r7, #20]
 800d83a:	ee07 3a90 	vmov	s15, r3
 800d83e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d842:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d938 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d84a:	4b37      	ldr	r3, [pc, #220]	; (800d928 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d84c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d84e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d852:	ee07 3a90 	vmov	s15, r3
 800d856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d85a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d85e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d930 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d86a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d86e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d872:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d876:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d87a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d87c:	4b2a      	ldr	r3, [pc, #168]	; (800d928 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d87e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d880:	0a5b      	lsrs	r3, r3, #9
 800d882:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d886:	ee07 3a90 	vmov	s15, r3
 800d88a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d88e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d892:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d896:	edd7 6a07 	vldr	s13, [r7, #28]
 800d89a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d89e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8a2:	ee17 2a90 	vmov	r2, s15
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d8aa:	4b1f      	ldr	r3, [pc, #124]	; (800d928 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d8ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8ae:	0c1b      	lsrs	r3, r3, #16
 800d8b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8b4:	ee07 3a90 	vmov	s15, r3
 800d8b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d8c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d8c4:	edd7 6a07 	vldr	s13, [r7, #28]
 800d8c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d8cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8d0:	ee17 2a90 	vmov	r2, s15
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d8d8:	4b13      	ldr	r3, [pc, #76]	; (800d928 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d8da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8dc:	0e1b      	lsrs	r3, r3, #24
 800d8de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8e2:	ee07 3a90 	vmov	s15, r3
 800d8e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d8ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d8f2:	edd7 6a07 	vldr	s13, [r7, #28]
 800d8f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d8fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8fe:	ee17 2a90 	vmov	r2, s15
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d906:	e008      	b.n	800d91a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2200      	movs	r2, #0
 800d90c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	2200      	movs	r2, #0
 800d912:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2200      	movs	r2, #0
 800d918:	609a      	str	r2, [r3, #8]
}
 800d91a:	bf00      	nop
 800d91c:	3724      	adds	r7, #36	; 0x24
 800d91e:	46bd      	mov	sp, r7
 800d920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d924:	4770      	bx	lr
 800d926:	bf00      	nop
 800d928:	58024400 	.word	0x58024400
 800d92c:	03d09000 	.word	0x03d09000
 800d930:	46000000 	.word	0x46000000
 800d934:	4c742400 	.word	0x4c742400
 800d938:	4a742400 	.word	0x4a742400
 800d93c:	4c3ebc20 	.word	0x4c3ebc20

0800d940 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d940:	b480      	push	{r7}
 800d942:	b089      	sub	sp, #36	; 0x24
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d948:	4ba1      	ldr	r3, [pc, #644]	; (800dbd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d94a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d94c:	f003 0303 	and.w	r3, r3, #3
 800d950:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d952:	4b9f      	ldr	r3, [pc, #636]	; (800dbd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d956:	0d1b      	lsrs	r3, r3, #20
 800d958:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d95c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d95e:	4b9c      	ldr	r3, [pc, #624]	; (800dbd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d962:	0a1b      	lsrs	r3, r3, #8
 800d964:	f003 0301 	and.w	r3, r3, #1
 800d968:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d96a:	4b99      	ldr	r3, [pc, #612]	; (800dbd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d96c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d96e:	08db      	lsrs	r3, r3, #3
 800d970:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d974:	693a      	ldr	r2, [r7, #16]
 800d976:	fb02 f303 	mul.w	r3, r2, r3
 800d97a:	ee07 3a90 	vmov	s15, r3
 800d97e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d982:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d986:	697b      	ldr	r3, [r7, #20]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	f000 8111 	beq.w	800dbb0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d98e:	69bb      	ldr	r3, [r7, #24]
 800d990:	2b02      	cmp	r3, #2
 800d992:	f000 8083 	beq.w	800da9c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d996:	69bb      	ldr	r3, [r7, #24]
 800d998:	2b02      	cmp	r3, #2
 800d99a:	f200 80a1 	bhi.w	800dae0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d99e:	69bb      	ldr	r3, [r7, #24]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d003      	beq.n	800d9ac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d9a4:	69bb      	ldr	r3, [r7, #24]
 800d9a6:	2b01      	cmp	r3, #1
 800d9a8:	d056      	beq.n	800da58 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d9aa:	e099      	b.n	800dae0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d9ac:	4b88      	ldr	r3, [pc, #544]	; (800dbd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	f003 0320 	and.w	r3, r3, #32
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d02d      	beq.n	800da14 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d9b8:	4b85      	ldr	r3, [pc, #532]	; (800dbd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	08db      	lsrs	r3, r3, #3
 800d9be:	f003 0303 	and.w	r3, r3, #3
 800d9c2:	4a84      	ldr	r2, [pc, #528]	; (800dbd4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d9c4:	fa22 f303 	lsr.w	r3, r2, r3
 800d9c8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	ee07 3a90 	vmov	s15, r3
 800d9d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9d4:	697b      	ldr	r3, [r7, #20]
 800d9d6:	ee07 3a90 	vmov	s15, r3
 800d9da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9e2:	4b7b      	ldr	r3, [pc, #492]	; (800dbd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d9e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9ea:	ee07 3a90 	vmov	s15, r3
 800d9ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d9f6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800dbd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d9fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800da12:	e087      	b.n	800db24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800da14:	697b      	ldr	r3, [r7, #20]
 800da16:	ee07 3a90 	vmov	s15, r3
 800da1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da1e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800dbdc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800da22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da26:	4b6a      	ldr	r3, [pc, #424]	; (800dbd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800da28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da2e:	ee07 3a90 	vmov	s15, r3
 800da32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da36:	ed97 6a03 	vldr	s12, [r7, #12]
 800da3a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800dbd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800da3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da56:	e065      	b.n	800db24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800da58:	697b      	ldr	r3, [r7, #20]
 800da5a:	ee07 3a90 	vmov	s15, r3
 800da5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da62:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800dbe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800da66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da6a:	4b59      	ldr	r3, [pc, #356]	; (800dbd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800da6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da72:	ee07 3a90 	vmov	s15, r3
 800da76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da7a:	ed97 6a03 	vldr	s12, [r7, #12]
 800da7e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800dbd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800da82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da9a:	e043      	b.n	800db24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800da9c:	697b      	ldr	r3, [r7, #20]
 800da9e:	ee07 3a90 	vmov	s15, r3
 800daa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800daa6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800dbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800daaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800daae:	4b48      	ldr	r3, [pc, #288]	; (800dbd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dab6:	ee07 3a90 	vmov	s15, r3
 800daba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dabe:	ed97 6a03 	vldr	s12, [r7, #12]
 800dac2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800dbd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800daca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dace:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dada:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dade:	e021      	b.n	800db24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	ee07 3a90 	vmov	s15, r3
 800dae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800daea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800dbe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800daee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800daf2:	4b37      	ldr	r3, [pc, #220]	; (800dbd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800daf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dafa:	ee07 3a90 	vmov	s15, r3
 800dafe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db02:	ed97 6a03 	vldr	s12, [r7, #12]
 800db06:	eddf 5a34 	vldr	s11, [pc, #208]	; 800dbd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800db0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800db16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800db22:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800db24:	4b2a      	ldr	r3, [pc, #168]	; (800dbd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800db26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db28:	0a5b      	lsrs	r3, r3, #9
 800db2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db2e:	ee07 3a90 	vmov	s15, r3
 800db32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800db3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800db3e:	edd7 6a07 	vldr	s13, [r7, #28]
 800db42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db4a:	ee17 2a90 	vmov	r2, s15
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800db52:	4b1f      	ldr	r3, [pc, #124]	; (800dbd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800db54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db56:	0c1b      	lsrs	r3, r3, #16
 800db58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db5c:	ee07 3a90 	vmov	s15, r3
 800db60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800db68:	ee37 7a87 	vadd.f32	s14, s15, s14
 800db6c:	edd7 6a07 	vldr	s13, [r7, #28]
 800db70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db78:	ee17 2a90 	vmov	r2, s15
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800db80:	4b13      	ldr	r3, [pc, #76]	; (800dbd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800db82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db84:	0e1b      	lsrs	r3, r3, #24
 800db86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db8a:	ee07 3a90 	vmov	s15, r3
 800db8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800db96:	ee37 7a87 	vadd.f32	s14, s15, s14
 800db9a:	edd7 6a07 	vldr	s13, [r7, #28]
 800db9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dba2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dba6:	ee17 2a90 	vmov	r2, s15
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800dbae:	e008      	b.n	800dbc2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	2200      	movs	r2, #0
 800dbba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	609a      	str	r2, [r3, #8]
}
 800dbc2:	bf00      	nop
 800dbc4:	3724      	adds	r7, #36	; 0x24
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbcc:	4770      	bx	lr
 800dbce:	bf00      	nop
 800dbd0:	58024400 	.word	0x58024400
 800dbd4:	03d09000 	.word	0x03d09000
 800dbd8:	46000000 	.word	0x46000000
 800dbdc:	4c742400 	.word	0x4c742400
 800dbe0:	4a742400 	.word	0x4a742400
 800dbe4:	4c3ebc20 	.word	0x4c3ebc20

0800dbe8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800dbe8:	b480      	push	{r7}
 800dbea:	b089      	sub	sp, #36	; 0x24
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800dbf0:	4ba0      	ldr	r3, [pc, #640]	; (800de74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dbf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbf4:	f003 0303 	and.w	r3, r3, #3
 800dbf8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800dbfa:	4b9e      	ldr	r3, [pc, #632]	; (800de74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dbfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbfe:	091b      	lsrs	r3, r3, #4
 800dc00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dc04:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800dc06:	4b9b      	ldr	r3, [pc, #620]	; (800de74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dc08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc0a:	f003 0301 	and.w	r3, r3, #1
 800dc0e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800dc10:	4b98      	ldr	r3, [pc, #608]	; (800de74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dc12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc14:	08db      	lsrs	r3, r3, #3
 800dc16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dc1a:	693a      	ldr	r2, [r7, #16]
 800dc1c:	fb02 f303 	mul.w	r3, r2, r3
 800dc20:	ee07 3a90 	vmov	s15, r3
 800dc24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc28:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800dc2c:	697b      	ldr	r3, [r7, #20]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	f000 8111 	beq.w	800de56 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800dc34:	69bb      	ldr	r3, [r7, #24]
 800dc36:	2b02      	cmp	r3, #2
 800dc38:	f000 8083 	beq.w	800dd42 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800dc3c:	69bb      	ldr	r3, [r7, #24]
 800dc3e:	2b02      	cmp	r3, #2
 800dc40:	f200 80a1 	bhi.w	800dd86 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800dc44:	69bb      	ldr	r3, [r7, #24]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d003      	beq.n	800dc52 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800dc4a:	69bb      	ldr	r3, [r7, #24]
 800dc4c:	2b01      	cmp	r3, #1
 800dc4e:	d056      	beq.n	800dcfe <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800dc50:	e099      	b.n	800dd86 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dc52:	4b88      	ldr	r3, [pc, #544]	; (800de74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	f003 0320 	and.w	r3, r3, #32
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d02d      	beq.n	800dcba <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dc5e:	4b85      	ldr	r3, [pc, #532]	; (800de74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	08db      	lsrs	r3, r3, #3
 800dc64:	f003 0303 	and.w	r3, r3, #3
 800dc68:	4a83      	ldr	r2, [pc, #524]	; (800de78 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800dc6a:	fa22 f303 	lsr.w	r3, r2, r3
 800dc6e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	ee07 3a90 	vmov	s15, r3
 800dc76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc7a:	697b      	ldr	r3, [r7, #20]
 800dc7c:	ee07 3a90 	vmov	s15, r3
 800dc80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc88:	4b7a      	ldr	r3, [pc, #488]	; (800de74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dc8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc90:	ee07 3a90 	vmov	s15, r3
 800dc94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc98:	ed97 6a03 	vldr	s12, [r7, #12]
 800dc9c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800de7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dca0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dca4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dca8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dcac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dcb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dcb4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800dcb8:	e087      	b.n	800ddca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dcba:	697b      	ldr	r3, [r7, #20]
 800dcbc:	ee07 3a90 	vmov	s15, r3
 800dcc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcc4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800de80 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800dcc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dccc:	4b69      	ldr	r3, [pc, #420]	; (800de74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dcce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcd4:	ee07 3a90 	vmov	s15, r3
 800dcd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dcdc:	ed97 6a03 	vldr	s12, [r7, #12]
 800dce0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800de7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dce4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dce8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dcec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dcf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dcf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dcf8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dcfc:	e065      	b.n	800ddca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dcfe:	697b      	ldr	r3, [r7, #20]
 800dd00:	ee07 3a90 	vmov	s15, r3
 800dd04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd08:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800de84 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800dd0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd10:	4b58      	ldr	r3, [pc, #352]	; (800de74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dd12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd18:	ee07 3a90 	vmov	s15, r3
 800dd1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd20:	ed97 6a03 	vldr	s12, [r7, #12]
 800dd24:	eddf 5a55 	vldr	s11, [pc, #340]	; 800de7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dd28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dd34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd38:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd3c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dd40:	e043      	b.n	800ddca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dd42:	697b      	ldr	r3, [r7, #20]
 800dd44:	ee07 3a90 	vmov	s15, r3
 800dd48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd4c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800de88 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800dd50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd54:	4b47      	ldr	r3, [pc, #284]	; (800de74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dd56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd5c:	ee07 3a90 	vmov	s15, r3
 800dd60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd64:	ed97 6a03 	vldr	s12, [r7, #12]
 800dd68:	eddf 5a44 	vldr	s11, [pc, #272]	; 800de7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dd6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dd78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd80:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dd84:	e021      	b.n	800ddca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dd86:	697b      	ldr	r3, [r7, #20]
 800dd88:	ee07 3a90 	vmov	s15, r3
 800dd8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd90:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800de80 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800dd94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd98:	4b36      	ldr	r3, [pc, #216]	; (800de74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dd9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dda0:	ee07 3a90 	vmov	s15, r3
 800dda4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dda8:	ed97 6a03 	vldr	s12, [r7, #12]
 800ddac:	eddf 5a33 	vldr	s11, [pc, #204]	; 800de7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ddb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ddb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ddb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ddbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ddc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ddc4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ddc8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800ddca:	4b2a      	ldr	r3, [pc, #168]	; (800de74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ddcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddce:	0a5b      	lsrs	r3, r3, #9
 800ddd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddd4:	ee07 3a90 	vmov	s15, r3
 800ddd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dddc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dde0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dde4:	edd7 6a07 	vldr	s13, [r7, #28]
 800dde8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ddec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ddf0:	ee17 2a90 	vmov	r2, s15
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800ddf8:	4b1e      	ldr	r3, [pc, #120]	; (800de74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ddfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddfc:	0c1b      	lsrs	r3, r3, #16
 800ddfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de02:	ee07 3a90 	vmov	s15, r3
 800de06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800de0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800de12:	edd7 6a07 	vldr	s13, [r7, #28]
 800de16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800de1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800de1e:	ee17 2a90 	vmov	r2, s15
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800de26:	4b13      	ldr	r3, [pc, #76]	; (800de74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800de28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de2a:	0e1b      	lsrs	r3, r3, #24
 800de2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de30:	ee07 3a90 	vmov	s15, r3
 800de34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800de3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800de40:	edd7 6a07 	vldr	s13, [r7, #28]
 800de44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800de48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800de4c:	ee17 2a90 	vmov	r2, s15
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800de54:	e008      	b.n	800de68 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2200      	movs	r2, #0
 800de5a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2200      	movs	r2, #0
 800de60:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	2200      	movs	r2, #0
 800de66:	609a      	str	r2, [r3, #8]
}
 800de68:	bf00      	nop
 800de6a:	3724      	adds	r7, #36	; 0x24
 800de6c:	46bd      	mov	sp, r7
 800de6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de72:	4770      	bx	lr
 800de74:	58024400 	.word	0x58024400
 800de78:	03d09000 	.word	0x03d09000
 800de7c:	46000000 	.word	0x46000000
 800de80:	4c742400 	.word	0x4c742400
 800de84:	4a742400 	.word	0x4a742400
 800de88:	4c3ebc20 	.word	0x4c3ebc20

0800de8c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b084      	sub	sp, #16
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
 800de94:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800de96:	2300      	movs	r3, #0
 800de98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800de9a:	4b53      	ldr	r3, [pc, #332]	; (800dfe8 <RCCEx_PLL2_Config+0x15c>)
 800de9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de9e:	f003 0303 	and.w	r3, r3, #3
 800dea2:	2b03      	cmp	r3, #3
 800dea4:	d101      	bne.n	800deaa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800dea6:	2301      	movs	r3, #1
 800dea8:	e099      	b.n	800dfde <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800deaa:	4b4f      	ldr	r3, [pc, #316]	; (800dfe8 <RCCEx_PLL2_Config+0x15c>)
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	4a4e      	ldr	r2, [pc, #312]	; (800dfe8 <RCCEx_PLL2_Config+0x15c>)
 800deb0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800deb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800deb6:	f7f6 fa2f 	bl	8004318 <HAL_GetTick>
 800deba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800debc:	e008      	b.n	800ded0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800debe:	f7f6 fa2b 	bl	8004318 <HAL_GetTick>
 800dec2:	4602      	mov	r2, r0
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	1ad3      	subs	r3, r2, r3
 800dec8:	2b02      	cmp	r3, #2
 800deca:	d901      	bls.n	800ded0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800decc:	2303      	movs	r3, #3
 800dece:	e086      	b.n	800dfde <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ded0:	4b45      	ldr	r3, [pc, #276]	; (800dfe8 <RCCEx_PLL2_Config+0x15c>)
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d1f0      	bne.n	800debe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800dedc:	4b42      	ldr	r3, [pc, #264]	; (800dfe8 <RCCEx_PLL2_Config+0x15c>)
 800dede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dee0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	031b      	lsls	r3, r3, #12
 800deea:	493f      	ldr	r1, [pc, #252]	; (800dfe8 <RCCEx_PLL2_Config+0x15c>)
 800deec:	4313      	orrs	r3, r2
 800deee:	628b      	str	r3, [r1, #40]	; 0x28
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	685b      	ldr	r3, [r3, #4]
 800def4:	3b01      	subs	r3, #1
 800def6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	689b      	ldr	r3, [r3, #8]
 800defe:	3b01      	subs	r3, #1
 800df00:	025b      	lsls	r3, r3, #9
 800df02:	b29b      	uxth	r3, r3
 800df04:	431a      	orrs	r2, r3
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	68db      	ldr	r3, [r3, #12]
 800df0a:	3b01      	subs	r3, #1
 800df0c:	041b      	lsls	r3, r3, #16
 800df0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800df12:	431a      	orrs	r2, r3
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	691b      	ldr	r3, [r3, #16]
 800df18:	3b01      	subs	r3, #1
 800df1a:	061b      	lsls	r3, r3, #24
 800df1c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800df20:	4931      	ldr	r1, [pc, #196]	; (800dfe8 <RCCEx_PLL2_Config+0x15c>)
 800df22:	4313      	orrs	r3, r2
 800df24:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800df26:	4b30      	ldr	r3, [pc, #192]	; (800dfe8 <RCCEx_PLL2_Config+0x15c>)
 800df28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	695b      	ldr	r3, [r3, #20]
 800df32:	492d      	ldr	r1, [pc, #180]	; (800dfe8 <RCCEx_PLL2_Config+0x15c>)
 800df34:	4313      	orrs	r3, r2
 800df36:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800df38:	4b2b      	ldr	r3, [pc, #172]	; (800dfe8 <RCCEx_PLL2_Config+0x15c>)
 800df3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df3c:	f023 0220 	bic.w	r2, r3, #32
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	699b      	ldr	r3, [r3, #24]
 800df44:	4928      	ldr	r1, [pc, #160]	; (800dfe8 <RCCEx_PLL2_Config+0x15c>)
 800df46:	4313      	orrs	r3, r2
 800df48:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800df4a:	4b27      	ldr	r3, [pc, #156]	; (800dfe8 <RCCEx_PLL2_Config+0x15c>)
 800df4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df4e:	4a26      	ldr	r2, [pc, #152]	; (800dfe8 <RCCEx_PLL2_Config+0x15c>)
 800df50:	f023 0310 	bic.w	r3, r3, #16
 800df54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800df56:	4b24      	ldr	r3, [pc, #144]	; (800dfe8 <RCCEx_PLL2_Config+0x15c>)
 800df58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800df5a:	4b24      	ldr	r3, [pc, #144]	; (800dfec <RCCEx_PLL2_Config+0x160>)
 800df5c:	4013      	ands	r3, r2
 800df5e:	687a      	ldr	r2, [r7, #4]
 800df60:	69d2      	ldr	r2, [r2, #28]
 800df62:	00d2      	lsls	r2, r2, #3
 800df64:	4920      	ldr	r1, [pc, #128]	; (800dfe8 <RCCEx_PLL2_Config+0x15c>)
 800df66:	4313      	orrs	r3, r2
 800df68:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800df6a:	4b1f      	ldr	r3, [pc, #124]	; (800dfe8 <RCCEx_PLL2_Config+0x15c>)
 800df6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df6e:	4a1e      	ldr	r2, [pc, #120]	; (800dfe8 <RCCEx_PLL2_Config+0x15c>)
 800df70:	f043 0310 	orr.w	r3, r3, #16
 800df74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d106      	bne.n	800df8a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800df7c:	4b1a      	ldr	r3, [pc, #104]	; (800dfe8 <RCCEx_PLL2_Config+0x15c>)
 800df7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df80:	4a19      	ldr	r2, [pc, #100]	; (800dfe8 <RCCEx_PLL2_Config+0x15c>)
 800df82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800df86:	62d3      	str	r3, [r2, #44]	; 0x2c
 800df88:	e00f      	b.n	800dfaa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	2b01      	cmp	r3, #1
 800df8e:	d106      	bne.n	800df9e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800df90:	4b15      	ldr	r3, [pc, #84]	; (800dfe8 <RCCEx_PLL2_Config+0x15c>)
 800df92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df94:	4a14      	ldr	r2, [pc, #80]	; (800dfe8 <RCCEx_PLL2_Config+0x15c>)
 800df96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800df9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800df9c:	e005      	b.n	800dfaa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800df9e:	4b12      	ldr	r3, [pc, #72]	; (800dfe8 <RCCEx_PLL2_Config+0x15c>)
 800dfa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfa2:	4a11      	ldr	r2, [pc, #68]	; (800dfe8 <RCCEx_PLL2_Config+0x15c>)
 800dfa4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dfa8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800dfaa:	4b0f      	ldr	r3, [pc, #60]	; (800dfe8 <RCCEx_PLL2_Config+0x15c>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	4a0e      	ldr	r2, [pc, #56]	; (800dfe8 <RCCEx_PLL2_Config+0x15c>)
 800dfb0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dfb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dfb6:	f7f6 f9af 	bl	8004318 <HAL_GetTick>
 800dfba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dfbc:	e008      	b.n	800dfd0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dfbe:	f7f6 f9ab 	bl	8004318 <HAL_GetTick>
 800dfc2:	4602      	mov	r2, r0
 800dfc4:	68bb      	ldr	r3, [r7, #8]
 800dfc6:	1ad3      	subs	r3, r2, r3
 800dfc8:	2b02      	cmp	r3, #2
 800dfca:	d901      	bls.n	800dfd0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dfcc:	2303      	movs	r3, #3
 800dfce:	e006      	b.n	800dfde <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dfd0:	4b05      	ldr	r3, [pc, #20]	; (800dfe8 <RCCEx_PLL2_Config+0x15c>)
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d0f0      	beq.n	800dfbe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800dfdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfde:	4618      	mov	r0, r3
 800dfe0:	3710      	adds	r7, #16
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bd80      	pop	{r7, pc}
 800dfe6:	bf00      	nop
 800dfe8:	58024400 	.word	0x58024400
 800dfec:	ffff0007 	.word	0xffff0007

0800dff0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b084      	sub	sp, #16
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
 800dff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dffa:	2300      	movs	r3, #0
 800dffc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dffe:	4b53      	ldr	r3, [pc, #332]	; (800e14c <RCCEx_PLL3_Config+0x15c>)
 800e000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e002:	f003 0303 	and.w	r3, r3, #3
 800e006:	2b03      	cmp	r3, #3
 800e008:	d101      	bne.n	800e00e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800e00a:	2301      	movs	r3, #1
 800e00c:	e099      	b.n	800e142 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800e00e:	4b4f      	ldr	r3, [pc, #316]	; (800e14c <RCCEx_PLL3_Config+0x15c>)
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	4a4e      	ldr	r2, [pc, #312]	; (800e14c <RCCEx_PLL3_Config+0x15c>)
 800e014:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e018:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e01a:	f7f6 f97d 	bl	8004318 <HAL_GetTick>
 800e01e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e020:	e008      	b.n	800e034 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e022:	f7f6 f979 	bl	8004318 <HAL_GetTick>
 800e026:	4602      	mov	r2, r0
 800e028:	68bb      	ldr	r3, [r7, #8]
 800e02a:	1ad3      	subs	r3, r2, r3
 800e02c:	2b02      	cmp	r3, #2
 800e02e:	d901      	bls.n	800e034 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e030:	2303      	movs	r3, #3
 800e032:	e086      	b.n	800e142 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e034:	4b45      	ldr	r3, [pc, #276]	; (800e14c <RCCEx_PLL3_Config+0x15c>)
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d1f0      	bne.n	800e022 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800e040:	4b42      	ldr	r3, [pc, #264]	; (800e14c <RCCEx_PLL3_Config+0x15c>)
 800e042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e044:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	051b      	lsls	r3, r3, #20
 800e04e:	493f      	ldr	r1, [pc, #252]	; (800e14c <RCCEx_PLL3_Config+0x15c>)
 800e050:	4313      	orrs	r3, r2
 800e052:	628b      	str	r3, [r1, #40]	; 0x28
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	685b      	ldr	r3, [r3, #4]
 800e058:	3b01      	subs	r3, #1
 800e05a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	689b      	ldr	r3, [r3, #8]
 800e062:	3b01      	subs	r3, #1
 800e064:	025b      	lsls	r3, r3, #9
 800e066:	b29b      	uxth	r3, r3
 800e068:	431a      	orrs	r2, r3
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	68db      	ldr	r3, [r3, #12]
 800e06e:	3b01      	subs	r3, #1
 800e070:	041b      	lsls	r3, r3, #16
 800e072:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800e076:	431a      	orrs	r2, r3
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	691b      	ldr	r3, [r3, #16]
 800e07c:	3b01      	subs	r3, #1
 800e07e:	061b      	lsls	r3, r3, #24
 800e080:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800e084:	4931      	ldr	r1, [pc, #196]	; (800e14c <RCCEx_PLL3_Config+0x15c>)
 800e086:	4313      	orrs	r3, r2
 800e088:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800e08a:	4b30      	ldr	r3, [pc, #192]	; (800e14c <RCCEx_PLL3_Config+0x15c>)
 800e08c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e08e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	695b      	ldr	r3, [r3, #20]
 800e096:	492d      	ldr	r1, [pc, #180]	; (800e14c <RCCEx_PLL3_Config+0x15c>)
 800e098:	4313      	orrs	r3, r2
 800e09a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800e09c:	4b2b      	ldr	r3, [pc, #172]	; (800e14c <RCCEx_PLL3_Config+0x15c>)
 800e09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0a0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	699b      	ldr	r3, [r3, #24]
 800e0a8:	4928      	ldr	r1, [pc, #160]	; (800e14c <RCCEx_PLL3_Config+0x15c>)
 800e0aa:	4313      	orrs	r3, r2
 800e0ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800e0ae:	4b27      	ldr	r3, [pc, #156]	; (800e14c <RCCEx_PLL3_Config+0x15c>)
 800e0b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0b2:	4a26      	ldr	r2, [pc, #152]	; (800e14c <RCCEx_PLL3_Config+0x15c>)
 800e0b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e0b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e0ba:	4b24      	ldr	r3, [pc, #144]	; (800e14c <RCCEx_PLL3_Config+0x15c>)
 800e0bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e0be:	4b24      	ldr	r3, [pc, #144]	; (800e150 <RCCEx_PLL3_Config+0x160>)
 800e0c0:	4013      	ands	r3, r2
 800e0c2:	687a      	ldr	r2, [r7, #4]
 800e0c4:	69d2      	ldr	r2, [r2, #28]
 800e0c6:	00d2      	lsls	r2, r2, #3
 800e0c8:	4920      	ldr	r1, [pc, #128]	; (800e14c <RCCEx_PLL3_Config+0x15c>)
 800e0ca:	4313      	orrs	r3, r2
 800e0cc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800e0ce:	4b1f      	ldr	r3, [pc, #124]	; (800e14c <RCCEx_PLL3_Config+0x15c>)
 800e0d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0d2:	4a1e      	ldr	r2, [pc, #120]	; (800e14c <RCCEx_PLL3_Config+0x15c>)
 800e0d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e0d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d106      	bne.n	800e0ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e0e0:	4b1a      	ldr	r3, [pc, #104]	; (800e14c <RCCEx_PLL3_Config+0x15c>)
 800e0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0e4:	4a19      	ldr	r2, [pc, #100]	; (800e14c <RCCEx_PLL3_Config+0x15c>)
 800e0e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800e0ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e0ec:	e00f      	b.n	800e10e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e0ee:	683b      	ldr	r3, [r7, #0]
 800e0f0:	2b01      	cmp	r3, #1
 800e0f2:	d106      	bne.n	800e102 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800e0f4:	4b15      	ldr	r3, [pc, #84]	; (800e14c <RCCEx_PLL3_Config+0x15c>)
 800e0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0f8:	4a14      	ldr	r2, [pc, #80]	; (800e14c <RCCEx_PLL3_Config+0x15c>)
 800e0fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e0fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e100:	e005      	b.n	800e10e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800e102:	4b12      	ldr	r3, [pc, #72]	; (800e14c <RCCEx_PLL3_Config+0x15c>)
 800e104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e106:	4a11      	ldr	r2, [pc, #68]	; (800e14c <RCCEx_PLL3_Config+0x15c>)
 800e108:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e10c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800e10e:	4b0f      	ldr	r3, [pc, #60]	; (800e14c <RCCEx_PLL3_Config+0x15c>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	4a0e      	ldr	r2, [pc, #56]	; (800e14c <RCCEx_PLL3_Config+0x15c>)
 800e114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e118:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e11a:	f7f6 f8fd 	bl	8004318 <HAL_GetTick>
 800e11e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e120:	e008      	b.n	800e134 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e122:	f7f6 f8f9 	bl	8004318 <HAL_GetTick>
 800e126:	4602      	mov	r2, r0
 800e128:	68bb      	ldr	r3, [r7, #8]
 800e12a:	1ad3      	subs	r3, r2, r3
 800e12c:	2b02      	cmp	r3, #2
 800e12e:	d901      	bls.n	800e134 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e130:	2303      	movs	r3, #3
 800e132:	e006      	b.n	800e142 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e134:	4b05      	ldr	r3, [pc, #20]	; (800e14c <RCCEx_PLL3_Config+0x15c>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d0f0      	beq.n	800e122 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800e140:	7bfb      	ldrb	r3, [r7, #15]
}
 800e142:	4618      	mov	r0, r3
 800e144:	3710      	adds	r7, #16
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}
 800e14a:	bf00      	nop
 800e14c:	58024400 	.word	0x58024400
 800e150:	ffff0007 	.word	0xffff0007

0800e154 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b084      	sub	sp, #16
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d101      	bne.n	800e166 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800e162:	2301      	movs	r3, #1
 800e164:	e092      	b.n	800e28c <HAL_RNG_Init+0x138>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	7a5b      	ldrb	r3, [r3, #9]
 800e16a:	b2db      	uxtb	r3, r3
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d105      	bne.n	800e17c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2200      	movs	r2, #0
 800e174:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800e176:	6878      	ldr	r0, [r7, #4]
 800e178:	f7f5 f92c 	bl	80033d4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2202      	movs	r2, #2
 800e180:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	681a      	ldr	r2, [r3, #0]
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	f022 0204 	bic.w	r2, r2, #4
 800e190:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	681a      	ldr	r2, [r3, #0]
 800e198:	4b3e      	ldr	r3, [pc, #248]	; (800e294 <HAL_RNG_Init+0x140>)
 800e19a:	4013      	ands	r3, r2
 800e19c:	687a      	ldr	r2, [r7, #4]
 800e19e:	6852      	ldr	r2, [r2, #4]
 800e1a0:	431a      	orrs	r2, r3
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800e1aa:	601a      	str	r2, [r3, #0]

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	4a39      	ldr	r2, [pc, #228]	; (800e298 <HAL_RNG_Init+0x144>)
 800e1b2:	611a      	str	r2, [r3, #16]
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	f247 2274 	movw	r2, #29300	; 0x7274
 800e1bc:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	681a      	ldr	r2, [r3, #0]
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800e1cc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800e1ce:	f7f6 f8a3 	bl	8004318 <HAL_GetTick>
 800e1d2:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800e1d4:	e016      	b.n	800e204 <HAL_RNG_Init+0xb0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800e1d6:	f7f6 f89f 	bl	8004318 <HAL_GetTick>
 800e1da:	4602      	mov	r2, r0
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	1ad3      	subs	r3, r2, r3
 800e1e0:	2b02      	cmp	r3, #2
 800e1e2:	d90f      	bls.n	800e204 <HAL_RNG_Init+0xb0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e1ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e1f2:	d107      	bne.n	800e204 <HAL_RNG_Init+0xb0>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2201      	movs	r2, #1
 800e1f8:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2202      	movs	r2, #2
 800e1fe:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800e200:	2301      	movs	r3, #1
 800e202:	e043      	b.n	800e28c <HAL_RNG_Init+0x138>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e20e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e212:	d0e0      	beq.n	800e1d6 <HAL_RNG_Init+0x82>
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	681a      	ldr	r2, [r3, #0]
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	f042 0204 	orr.w	r2, r2, #4
 800e222:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	685b      	ldr	r3, [r3, #4]
 800e22a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e22e:	2b40      	cmp	r3, #64	; 0x40
 800e230:	d104      	bne.n	800e23c <HAL_RNG_Init+0xe8>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	2204      	movs	r2, #4
 800e236:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800e238:	2301      	movs	r3, #1
 800e23a:	e027      	b.n	800e28c <HAL_RNG_Init+0x138>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800e23c:	f7f6 f86c 	bl	8004318 <HAL_GetTick>
 800e240:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800e242:	e015      	b.n	800e270 <HAL_RNG_Init+0x11c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800e244:	f7f6 f868 	bl	8004318 <HAL_GetTick>
 800e248:	4602      	mov	r2, r0
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	1ad3      	subs	r3, r2, r3
 800e24e:	2b02      	cmp	r3, #2
 800e250:	d90e      	bls.n	800e270 <HAL_RNG_Init+0x11c>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	685b      	ldr	r3, [r3, #4]
 800e258:	f003 0304 	and.w	r3, r3, #4
 800e25c:	2b04      	cmp	r3, #4
 800e25e:	d107      	bne.n	800e270 <HAL_RNG_Init+0x11c>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2204      	movs	r2, #4
 800e264:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2202      	movs	r2, #2
 800e26a:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800e26c:	2301      	movs	r3, #1
 800e26e:	e00d      	b.n	800e28c <HAL_RNG_Init+0x138>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	685b      	ldr	r3, [r3, #4]
 800e276:	f003 0304 	and.w	r3, r3, #4
 800e27a:	2b04      	cmp	r3, #4
 800e27c:	d0e2      	beq.n	800e244 <HAL_RNG_Init+0xf0>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	2201      	movs	r2, #1
 800e282:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2200      	movs	r2, #0
 800e288:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800e28a:	2300      	movs	r3, #0
}
 800e28c:	4618      	mov	r0, r3
 800e28e:	3710      	adds	r7, #16
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}
 800e294:	bfffffdf 	.word	0xbfffffdf
 800e298:	17590abc 	.word	0x17590abc

0800e29c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b084      	sub	sp, #16
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
 800e2a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	7a1b      	ldrb	r3, [r3, #8]
 800e2ae:	2b01      	cmp	r3, #1
 800e2b0:	d101      	bne.n	800e2b6 <HAL_RNG_GenerateRandomNumber+0x1a>
 800e2b2:	2302      	movs	r3, #2
 800e2b4:	e06d      	b.n	800e392 <HAL_RNG_GenerateRandomNumber+0xf6>
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2201      	movs	r2, #1
 800e2ba:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	7a5b      	ldrb	r3, [r3, #9]
 800e2c0:	b2db      	uxtb	r3, r3
 800e2c2:	2b01      	cmp	r3, #1
 800e2c4:	d15c      	bne.n	800e380 <HAL_RNG_GenerateRandomNumber+0xe4>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	2202      	movs	r2, #2
 800e2ca:	725a      	strb	r2, [r3, #9]
#if defined(RNG_CR_CONDRST)
    /* Check if there is a seed error */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	685b      	ldr	r3, [r3, #4]
 800e2d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2d6:	2b40      	cmp	r3, #64	; 0x40
 800e2d8:	d10c      	bne.n	800e2f4 <HAL_RNG_GenerateRandomNumber+0x58>
    {
      /* Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2208      	movs	r2, #8
 800e2de:	60da      	str	r2, [r3, #12]
      /* Reset from seed error */
      status = RNG_RecoverSeedError(hrng);
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	f000 f864 	bl	800e3ae <RNG_RecoverSeedError>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_ERROR)
 800e2ea:	7bfb      	ldrb	r3, [r7, #15]
 800e2ec:	2b01      	cmp	r3, #1
 800e2ee:	d101      	bne.n	800e2f4 <HAL_RNG_GenerateRandomNumber+0x58>
      {
        return status;
 800e2f0:	7bfb      	ldrb	r3, [r7, #15]
 800e2f2:	e04e      	b.n	800e392 <HAL_RNG_GenerateRandomNumber+0xf6>
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 800e2f4:	f7f6 f810 	bl	8004318 <HAL_GetTick>
 800e2f8:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800e2fa:	e018      	b.n	800e32e <HAL_RNG_GenerateRandomNumber+0x92>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800e2fc:	f7f6 f80c 	bl	8004318 <HAL_GetTick>
 800e300:	4602      	mov	r2, r0
 800e302:	68bb      	ldr	r3, [r7, #8]
 800e304:	1ad3      	subs	r3, r2, r3
 800e306:	2b02      	cmp	r3, #2
 800e308:	d911      	bls.n	800e32e <HAL_RNG_GenerateRandomNumber+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	685b      	ldr	r3, [r3, #4]
 800e310:	f003 0301 	and.w	r3, r3, #1
 800e314:	2b01      	cmp	r3, #1
 800e316:	d00a      	beq.n	800e32e <HAL_RNG_GenerateRandomNumber+0x92>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2201      	movs	r2, #1
 800e31c:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	2202      	movs	r2, #2
 800e322:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	2200      	movs	r2, #0
 800e328:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 800e32a:	2301      	movs	r3, #1
 800e32c:	e031      	b.n	800e392 <HAL_RNG_GenerateRandomNumber+0xf6>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	685b      	ldr	r3, [r3, #4]
 800e334:	f003 0301 	and.w	r3, r3, #1
 800e338:	2b01      	cmp	r3, #1
 800e33a:	d1df      	bne.n	800e2fc <HAL_RNG_GenerateRandomNumber+0x60>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	689a      	ldr	r2, [r3, #8]
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	611a      	str	r2, [r3, #16]
#if defined(RNG_CR_CONDRST)
    /* In case of seed error, the value available in the RNG_DR register must not
       be used as it may not have enough entropy */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	685b      	ldr	r3, [r3, #4]
 800e34c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e350:	2b40      	cmp	r3, #64	; 0x40
 800e352:	d10d      	bne.n	800e370 <HAL_RNG_GenerateRandomNumber+0xd4>
    {
      /* Update the error code and status */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2208      	movs	r2, #8
 800e358:	60da      	str	r2, [r3, #12]
      status = HAL_ERROR;
 800e35a:	2301      	movs	r3, #1
 800e35c:	73fb      	strb	r3, [r7, #15]
      /* Clear bit DRDY */
      CLEAR_BIT(hrng->Instance->SR, RNG_FLAG_DRDY);
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	685a      	ldr	r2, [r3, #4]
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	f022 0201 	bic.w	r2, r2, #1
 800e36c:	605a      	str	r2, [r3, #4]
 800e36e:	e003      	b.n	800e378 <HAL_RNG_GenerateRandomNumber+0xdc>
    }
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	691a      	ldr	r2, [r3, #16]
 800e374:	683b      	ldr	r3, [r7, #0]
 800e376:	601a      	str	r2, [r3, #0]
    }
#else
    *random32bit = hrng->RandomNumber;

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2201      	movs	r2, #1
 800e37c:	725a      	strb	r2, [r3, #9]
 800e37e:	e004      	b.n	800e38a <HAL_RNG_GenerateRandomNumber+0xee>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	2204      	movs	r2, #4
 800e384:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800e386:	2301      	movs	r3, #1
 800e388:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	2200      	movs	r2, #0
 800e38e:	721a      	strb	r2, [r3, #8]

  return status;
 800e390:	7bfb      	ldrb	r3, [r7, #15]
}
 800e392:	4618      	mov	r0, r3
 800e394:	3710      	adds	r7, #16
 800e396:	46bd      	mov	sp, r7
 800e398:	bd80      	pop	{r7, pc}

0800e39a <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 800e39a:	b480      	push	{r7}
 800e39c:	b083      	sub	sp, #12
 800e39e:	af00      	add	r7, sp, #0
 800e3a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 800e3a2:	bf00      	nop
 800e3a4:	370c      	adds	r7, #12
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ac:	4770      	bx	lr

0800e3ae <RNG_RecoverSeedError>:
  * @brief  RNG sequence to recover from a seed error
  * @param  hrng pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef RNG_RecoverSeedError(RNG_HandleTypeDef *hrng)
{
 800e3ae:	b580      	push	{r7, lr}
 800e3b0:	b084      	sub	sp, #16
 800e3b2:	af00      	add	r7, sp, #0
 800e3b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	60fb      	str	r3, [r7, #12]

  /*Check if seed error current status (SECS)is set */
  if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	685b      	ldr	r3, [r3, #4]
 800e3c0:	f003 0304 	and.w	r3, r3, #4
 800e3c4:	2b04      	cmp	r3, #4
 800e3c6:	d008      	beq.n	800e3da <RNG_RecoverSeedError+0x2c>
  {
    /* RNG performed the reset automatically (auto-reset) */
    /* Clear bit SEIS */
    CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	685a      	ldr	r2, [r3, #4]
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e3d6:	605a      	str	r2, [r3, #4]
 800e3d8:	e05f      	b.n	800e49a <RNG_RecoverSeedError+0xec>
  }
  else  /* Sequence to fully recover from a seed error*/
  {
    /* Writing bit CONDRST=1*/
    SET_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	681a      	ldr	r2, [r3, #0]
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800e3e8:	601a      	str	r2, [r3, #0]
    /* Writing bit CONDRST=0*/
    CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	681a      	ldr	r2, [r3, #0]
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800e3f8:	601a      	str	r2, [r3, #0]

    /* Wait for conditioning reset process to be completed */
    count = RNG_TIMEOUT_VALUE;
 800e3fa:	2302      	movs	r3, #2
 800e3fc:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	3b01      	subs	r3, #1
 800e402:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d110      	bne.n	800e42c <RNG_RecoverSeedError+0x7e>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	2201      	movs	r2, #1
 800e40e:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	68db      	ldr	r3, [r3, #12]
 800e414:	f043 0202 	orr.w	r2, r3, #2
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2200      	movs	r2, #0
 800e420:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 800e422:	6878      	ldr	r0, [r7, #4]
 800e424:	f7ff ffb9 	bl	800e39a <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800e428:	2301      	movs	r3, #1
 800e42a:	e03d      	b.n	800e4a8 <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST));
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e43a:	d0e0      	beq.n	800e3fe <RNG_RecoverSeedError+0x50>

    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	685b      	ldr	r3, [r3, #4]
 800e442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e446:	2b40      	cmp	r3, #64	; 0x40
 800e448:	d107      	bne.n	800e45a <RNG_RecoverSeedError+0xac>
    {
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	685a      	ldr	r2, [r3, #4]
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e458:	605a      	str	r2, [r3, #4]
    }

    /* Wait for SECS to be cleared */
    count = RNG_TIMEOUT_VALUE;
 800e45a:	2302      	movs	r3, #2
 800e45c:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	3b01      	subs	r3, #1
 800e462:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d110      	bne.n	800e48c <RNG_RecoverSeedError+0xde>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	2201      	movs	r2, #1
 800e46e:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	68db      	ldr	r3, [r3, #12]
 800e474:	f043 0202 	orr.w	r2, r3, #2
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	2200      	movs	r2, #0
 800e480:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 800e482:	6878      	ldr	r0, [r7, #4]
 800e484:	f7ff ff89 	bl	800e39a <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800e488:	2301      	movs	r3, #1
 800e48a:	e00d      	b.n	800e4a8 <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	685b      	ldr	r3, [r3, #4]
 800e492:	f003 0304 	and.w	r3, r3, #4
 800e496:	2b04      	cmp	r3, #4
 800e498:	d0e1      	beq.n	800e45e <RNG_RecoverSeedError+0xb0>
  }
  /* Update the error code */
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	68db      	ldr	r3, [r3, #12]
 800e49e:	f023 0208 	bic.w	r2, r3, #8
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 800e4a6:	2300      	movs	r3, #0
}
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	3710      	adds	r7, #16
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd80      	pop	{r7, pc}

0800e4b0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b08a      	sub	sp, #40	; 0x28
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d101      	bne.n	800e4c2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800e4be:	2301      	movs	r3, #1
 800e4c0:	e075      	b.n	800e5ae <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e4c8:	b2db      	uxtb	r3, r3
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d105      	bne.n	800e4da <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800e4d4:	6878      	ldr	r0, [r7, #4]
 800e4d6:	f7f4 ffb7 	bl	8003448 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	2204      	movs	r2, #4
 800e4de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800e4e2:	6878      	ldr	r0, [r7, #4]
 800e4e4:	f000 f868 	bl	800e5b8 <HAL_SD_InitCard>
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d001      	beq.n	800e4f2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800e4ee:	2301      	movs	r3, #1
 800e4f0:	e05d      	b.n	800e5ae <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800e4f2:	f107 0308 	add.w	r3, r7, #8
 800e4f6:	4619      	mov	r1, r3
 800e4f8:	6878      	ldr	r0, [r7, #4]
 800e4fa:	f000 fdaf 	bl	800f05c <HAL_SD_GetCardStatus>
 800e4fe:	4603      	mov	r3, r0
 800e500:	2b00      	cmp	r3, #0
 800e502:	d001      	beq.n	800e508 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800e504:	2301      	movs	r3, #1
 800e506:	e052      	b.n	800e5ae <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800e508:	7e3b      	ldrb	r3, [r7, #24]
 800e50a:	b2db      	uxtb	r3, r3
 800e50c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800e50e:	7e7b      	ldrb	r3, [r7, #25]
 800e510:	b2db      	uxtb	r3, r3
 800e512:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e518:	2b01      	cmp	r3, #1
 800e51a:	d10a      	bne.n	800e532 <HAL_SD_Init+0x82>
 800e51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d102      	bne.n	800e528 <HAL_SD_Init+0x78>
 800e522:	6a3b      	ldr	r3, [r7, #32]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d004      	beq.n	800e532 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e52e:	659a      	str	r2, [r3, #88]	; 0x58
 800e530:	e00b      	b.n	800e54a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e536:	2b01      	cmp	r3, #1
 800e538:	d104      	bne.n	800e544 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e540:	659a      	str	r2, [r3, #88]	; 0x58
 800e542:	e002      	b.n	800e54a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2200      	movs	r2, #0
 800e548:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	68db      	ldr	r3, [r3, #12]
 800e54e:	4619      	mov	r1, r3
 800e550:	6878      	ldr	r0, [r7, #4]
 800e552:	f000 fe6d 	bl	800f230 <HAL_SD_ConfigWideBusOperation>
 800e556:	4603      	mov	r3, r0
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d001      	beq.n	800e560 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800e55c:	2301      	movs	r3, #1
 800e55e:	e026      	b.n	800e5ae <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800e560:	f7f5 feda 	bl	8004318 <HAL_GetTick>
 800e564:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800e566:	e011      	b.n	800e58c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e568:	f7f5 fed6 	bl	8004318 <HAL_GetTick>
 800e56c:	4602      	mov	r2, r0
 800e56e:	69fb      	ldr	r3, [r7, #28]
 800e570:	1ad3      	subs	r3, r2, r3
 800e572:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e576:	d109      	bne.n	800e58c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e57e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	2201      	movs	r2, #1
 800e584:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800e588:	2303      	movs	r3, #3
 800e58a:	e010      	b.n	800e5ae <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f000 ff61 	bl	800f454 <HAL_SD_GetCardState>
 800e592:	4603      	mov	r3, r0
 800e594:	2b04      	cmp	r3, #4
 800e596:	d1e7      	bne.n	800e568 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2200      	movs	r2, #0
 800e59c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2201      	movs	r2, #1
 800e5a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800e5ac:	2300      	movs	r3, #0
}
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	3728      	adds	r7, #40	; 0x28
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	bd80      	pop	{r7, pc}
	...

0800e5b8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e5b8:	b590      	push	{r4, r7, lr}
 800e5ba:	b08d      	sub	sp, #52	; 0x34
 800e5bc:	af02      	add	r7, sp, #8
 800e5be:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800e5d0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800e5d4:	f04f 0100 	mov.w	r1, #0
 800e5d8:	f7fe fb76 	bl	800ccc8 <HAL_RCCEx_GetPeriphCLKFreq>
 800e5dc:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800e5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d109      	bne.n	800e5f8 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2201      	movs	r2, #1
 800e5e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e5f2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	e070      	b.n	800e6da <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800e5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5fa:	0a1b      	lsrs	r3, r3, #8
 800e5fc:	4a39      	ldr	r2, [pc, #228]	; (800e6e4 <HAL_SD_InitCard+0x12c>)
 800e5fe:	fba2 2303 	umull	r2, r3, r2, r3
 800e602:	091b      	lsrs	r3, r3, #4
 800e604:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681c      	ldr	r4, [r3, #0]
 800e60a:	466a      	mov	r2, sp
 800e60c:	f107 0318 	add.w	r3, r7, #24
 800e610:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e614:	e882 0003 	stmia.w	r2, {r0, r1}
 800e618:	f107 030c 	add.w	r3, r7, #12
 800e61c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e61e:	4620      	mov	r0, r4
 800e620:	f004 fec4 	bl	80133ac <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	4618      	mov	r0, r3
 800e62a:	f004 ff07 	bl	801343c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800e62e:	69fb      	ldr	r3, [r7, #28]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d005      	beq.n	800e640 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800e634:	69fb      	ldr	r3, [r7, #28]
 800e636:	005b      	lsls	r3, r3, #1
 800e638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e63a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e63e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800e640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e642:	2b00      	cmp	r3, #0
 800e644:	d007      	beq.n	800e656 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800e646:	4a28      	ldr	r2, [pc, #160]	; (800e6e8 <HAL_SD_InitCard+0x130>)
 800e648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e64a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e64e:	3301      	adds	r3, #1
 800e650:	4618      	mov	r0, r3
 800e652:	f7f5 fe6d 	bl	8004330 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	f000 ffea 	bl	800f630 <SD_PowerON>
 800e65c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e65e:	6a3b      	ldr	r3, [r7, #32]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d00b      	beq.n	800e67c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	2201      	movs	r2, #1
 800e668:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e670:	6a3b      	ldr	r3, [r7, #32]
 800e672:	431a      	orrs	r2, r3
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e678:	2301      	movs	r3, #1
 800e67a:	e02e      	b.n	800e6da <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	f000 ff09 	bl	800f494 <SD_InitCard>
 800e682:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e684:	6a3b      	ldr	r3, [r7, #32]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d00b      	beq.n	800e6a2 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	2201      	movs	r2, #1
 800e68e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e696:	6a3b      	ldr	r3, [r7, #32]
 800e698:	431a      	orrs	r2, r3
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e69e:	2301      	movs	r3, #1
 800e6a0:	e01b      	b.n	800e6da <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f004 ff5c 	bl	8013568 <SDMMC_CmdBlockLength>
 800e6b0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e6b2:	6a3b      	ldr	r3, [r7, #32]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d00f      	beq.n	800e6d8 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	4a0b      	ldr	r2, [pc, #44]	; (800e6ec <HAL_SD_InitCard+0x134>)
 800e6be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e6c4:	6a3b      	ldr	r3, [r7, #32]
 800e6c6:	431a      	orrs	r2, r3
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2201      	movs	r2, #1
 800e6d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	e000      	b.n	800e6da <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800e6d8:	2300      	movs	r3, #0
}
 800e6da:	4618      	mov	r0, r3
 800e6dc:	372c      	adds	r7, #44	; 0x2c
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	bd90      	pop	{r4, r7, pc}
 800e6e2:	bf00      	nop
 800e6e4:	014f8b59 	.word	0x014f8b59
 800e6e8:	00012110 	.word	0x00012110
 800e6ec:	1fe00fff 	.word	0x1fe00fff

0800e6f0 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b08c      	sub	sp, #48	; 0x30
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	60f8      	str	r0, [r7, #12]
 800e6f8:	60b9      	str	r1, [r7, #8]
 800e6fa:	607a      	str	r2, [r7, #4]
 800e6fc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800e702:	68bb      	ldr	r3, [r7, #8]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d107      	bne.n	800e718 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e70c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e714:	2301      	movs	r3, #1
 800e716:	e08d      	b.n	800e834 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e71e:	b2db      	uxtb	r3, r3
 800e720:	2b01      	cmp	r3, #1
 800e722:	f040 8086 	bne.w	800e832 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	2200      	movs	r2, #0
 800e72a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e72c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	441a      	add	r2, r3
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e736:	429a      	cmp	r2, r3
 800e738:	d907      	bls.n	800e74a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e73e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e746:	2301      	movs	r3, #1
 800e748:	e074      	b.n	800e834 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	2203      	movs	r2, #3
 800e74e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	2200      	movs	r2, #0
 800e758:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	68ba      	ldr	r2, [r7, #8]
 800e75e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	025a      	lsls	r2, r3, #9
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e76c:	2b01      	cmp	r3, #1
 800e76e:	d002      	beq.n	800e776 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800e770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e772:	025b      	lsls	r3, r3, #9
 800e774:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e776:	f04f 33ff 	mov.w	r3, #4294967295
 800e77a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	025b      	lsls	r3, r3, #9
 800e780:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e782:	2390      	movs	r3, #144	; 0x90
 800e784:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e786:	2302      	movs	r3, #2
 800e788:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e78a:	2300      	movs	r3, #0
 800e78c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800e78e:	2300      	movs	r3, #0
 800e790:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	f107 0210 	add.w	r2, r7, #16
 800e79a:	4611      	mov	r1, r2
 800e79c:	4618      	mov	r0, r3
 800e79e:	f004 feb7 	bl	8013510 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	68da      	ldr	r2, [r3, #12]
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e7b0:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	68ba      	ldr	r2, [r7, #8]
 800e7b8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	2201      	movs	r2, #1
 800e7c0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	2b01      	cmp	r3, #1
 800e7c6:	d90a      	bls.n	800e7de <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	2282      	movs	r2, #130	; 0x82
 800e7cc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	f004 ff0d 	bl	80135f4 <SDMMC_CmdReadMultiBlock>
 800e7da:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e7dc:	e009      	b.n	800e7f2 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	2281      	movs	r2, #129	; 0x81
 800e7e2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	f004 fedf 	bl	80135ae <SDMMC_CmdReadSingleBlock>
 800e7f0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800e7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d012      	beq.n	800e81e <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	4a0f      	ldr	r2, [pc, #60]	; (800e83c <HAL_SD_ReadBlocks_DMA+0x14c>)
 800e7fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e806:	431a      	orrs	r2, r3
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	2201      	movs	r2, #1
 800e810:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	2200      	movs	r2, #0
 800e818:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800e81a:	2301      	movs	r3, #1
 800e81c:	e00a      	b.n	800e834 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800e82c:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800e82e:	2300      	movs	r3, #0
 800e830:	e000      	b.n	800e834 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800e832:	2302      	movs	r3, #2
  }
}
 800e834:	4618      	mov	r0, r3
 800e836:	3730      	adds	r7, #48	; 0x30
 800e838:	46bd      	mov	sp, r7
 800e83a:	bd80      	pop	{r7, pc}
 800e83c:	1fe00fff 	.word	0x1fe00fff

0800e840 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b08c      	sub	sp, #48	; 0x30
 800e844:	af00      	add	r7, sp, #0
 800e846:	60f8      	str	r0, [r7, #12]
 800e848:	60b9      	str	r1, [r7, #8]
 800e84a:	607a      	str	r2, [r7, #4]
 800e84c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800e852:	68bb      	ldr	r3, [r7, #8]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d107      	bne.n	800e868 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e85c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e864:	2301      	movs	r3, #1
 800e866:	e08d      	b.n	800e984 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e86e:	b2db      	uxtb	r3, r3
 800e870:	2b01      	cmp	r3, #1
 800e872:	f040 8086 	bne.w	800e982 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	2200      	movs	r2, #0
 800e87a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e87c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	441a      	add	r2, r3
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e886:	429a      	cmp	r2, r3
 800e888:	d907      	bls.n	800e89a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e88e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e896:	2301      	movs	r3, #1
 800e898:	e074      	b.n	800e984 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	2203      	movs	r2, #3
 800e89e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	68ba      	ldr	r2, [r7, #8]
 800e8ae:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	025a      	lsls	r2, r3, #9
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8bc:	2b01      	cmp	r3, #1
 800e8be:	d002      	beq.n	800e8c6 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800e8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c2:	025b      	lsls	r3, r3, #9
 800e8c4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e8c6:	f04f 33ff 	mov.w	r3, #4294967295
 800e8ca:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e8cc:	683b      	ldr	r3, [r7, #0]
 800e8ce:	025b      	lsls	r3, r3, #9
 800e8d0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e8d2:	2390      	movs	r3, #144	; 0x90
 800e8d4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e8da:	2300      	movs	r3, #0
 800e8dc:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800e8de:	2300      	movs	r3, #0
 800e8e0:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	f107 0210 	add.w	r2, r7, #16
 800e8ea:	4611      	mov	r1, r2
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f004 fe0f 	bl	8013510 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	68da      	ldr	r2, [r3, #12]
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e900:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	68ba      	ldr	r2, [r7, #8]
 800e908:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	2201      	movs	r2, #1
 800e910:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800e912:	683b      	ldr	r3, [r7, #0]
 800e914:	2b01      	cmp	r3, #1
 800e916:	d90a      	bls.n	800e92e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	22a0      	movs	r2, #160	; 0xa0
 800e91c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e924:	4618      	mov	r0, r3
 800e926:	f004 feab 	bl	8013680 <SDMMC_CmdWriteMultiBlock>
 800e92a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e92c:	e009      	b.n	800e942 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	2290      	movs	r2, #144	; 0x90
 800e932:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e93a:	4618      	mov	r0, r3
 800e93c:	f004 fe7d 	bl	801363a <SDMMC_CmdWriteSingleBlock>
 800e940:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800e942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e944:	2b00      	cmp	r3, #0
 800e946:	d012      	beq.n	800e96e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	4a0f      	ldr	r2, [pc, #60]	; (800e98c <HAL_SD_WriteBlocks_DMA+0x14c>)
 800e94e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e956:	431a      	orrs	r2, r3
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	2201      	movs	r2, #1
 800e960:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	2200      	movs	r2, #0
 800e968:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800e96a:	2301      	movs	r3, #1
 800e96c:	e00a      	b.n	800e984 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800e97c:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800e97e:	2300      	movs	r3, #0
 800e980:	e000      	b.n	800e984 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800e982:	2302      	movs	r3, #2
  }
}
 800e984:	4618      	mov	r0, r3
 800e986:	3730      	adds	r7, #48	; 0x30
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd80      	pop	{r7, pc}
 800e98c:	1fe00fff 	.word	0x1fe00fff

0800e990 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b084      	sub	sp, #16
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e99c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d008      	beq.n	800e9be <HAL_SD_IRQHandler+0x2e>
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	f003 0308 	and.w	r3, r3, #8
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d003      	beq.n	800e9be <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800e9b6:	6878      	ldr	r0, [r7, #4]
 800e9b8:	f001 f926 	bl	800fc08 <SD_Read_IT>
 800e9bc:	e19a      	b.n	800ecf4 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	f000 80ac 	beq.w	800eb26 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e9d6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681a      	ldr	r2, [r3, #0]
 800e9e2:	4b59      	ldr	r3, [pc, #356]	; (800eb48 <HAL_SD_IRQHandler+0x1b8>)
 800e9e4:	400b      	ands	r3, r1
 800e9e6:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e9f6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	68da      	ldr	r2, [r3, #12]
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ea06:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	f003 0308 	and.w	r3, r3, #8
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d038      	beq.n	800ea84 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	f003 0302 	and.w	r3, r3, #2
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d104      	bne.n	800ea26 <HAL_SD_IRQHandler+0x96>
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	f003 0320 	and.w	r3, r3, #32
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d011      	beq.n	800ea4a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f004 fe4c 	bl	80136c8 <SDMMC_CmdStopTransfer>
 800ea30:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800ea32:	68bb      	ldr	r3, [r7, #8]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d008      	beq.n	800ea4a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea3c:	68bb      	ldr	r3, [r7, #8]
 800ea3e:	431a      	orrs	r2, r3
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800ea44:	6878      	ldr	r0, [r7, #4]
 800ea46:	f000 f95b 	bl	800ed00 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	4a3f      	ldr	r2, [pc, #252]	; (800eb4c <HAL_SD_IRQHandler+0x1bc>)
 800ea50:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	2201      	movs	r2, #1
 800ea56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	f003 0301 	and.w	r3, r3, #1
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d104      	bne.n	800ea74 <HAL_SD_IRQHandler+0xe4>
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	f003 0302 	and.w	r3, r3, #2
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d003      	beq.n	800ea7c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f006 fe55 	bl	8015724 <HAL_SD_RxCpltCallback>
 800ea7a:	e13b      	b.n	800ecf4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f006 fe47 	bl	8015710 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ea82:	e137      	b.n	800ecf4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	f000 8132 	beq.w	800ecf4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	2200      	movs	r2, #0
 800ea96:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	f003 0302 	and.w	r3, r3, #2
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d104      	bne.n	800eabc <HAL_SD_IRQHandler+0x12c>
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	f003 0320 	and.w	r3, r3, #32
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d011      	beq.n	800eae0 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	4618      	mov	r0, r3
 800eac2:	f004 fe01 	bl	80136c8 <SDMMC_CmdStopTransfer>
 800eac6:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800eac8:	68bb      	ldr	r3, [r7, #8]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d008      	beq.n	800eae0 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	431a      	orrs	r2, r3
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800eada:	6878      	ldr	r0, [r7, #4]
 800eadc:	f000 f910 	bl	800ed00 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2201      	movs	r2, #1
 800eae4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2200      	movs	r2, #0
 800eaec:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	f003 0310 	and.w	r3, r3, #16
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d104      	bne.n	800eb02 <HAL_SD_IRQHandler+0x172>
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	f003 0320 	and.w	r3, r3, #32
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d002      	beq.n	800eb08 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f006 fe04 	bl	8015710 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	f003 0301 	and.w	r3, r3, #1
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d105      	bne.n	800eb1e <HAL_SD_IRQHandler+0x18e>
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	f003 0302 	and.w	r3, r3, #2
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	f000 80eb 	beq.w	800ecf4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	f006 fe00 	bl	8015724 <HAL_SD_RxCpltCallback>
}
 800eb24:	e0e6      	b.n	800ecf4 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d00d      	beq.n	800eb50 <HAL_SD_IRQHandler+0x1c0>
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	f003 0308 	and.w	r3, r3, #8
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d008      	beq.n	800eb50 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800eb3e:	6878      	ldr	r0, [r7, #4]
 800eb40:	f001 f8a8 	bl	800fc94 <SD_Write_IT>
 800eb44:	e0d6      	b.n	800ecf4 <HAL_SD_IRQHandler+0x364>
 800eb46:	bf00      	nop
 800eb48:	ffff3ec5 	.word	0xffff3ec5
 800eb4c:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb56:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	f000 809d 	beq.w	800ec9a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb66:	f003 0302 	and.w	r3, r3, #2
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d005      	beq.n	800eb7a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb72:	f043 0202 	orr.w	r2, r3, #2
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb80:	f003 0308 	and.w	r3, r3, #8
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d005      	beq.n	800eb94 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb8c:	f043 0208 	orr.w	r2, r3, #8
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb9a:	f003 0320 	and.w	r3, r3, #32
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d005      	beq.n	800ebae <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eba6:	f043 0220 	orr.w	r2, r3, #32
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebb4:	f003 0310 	and.w	r3, r3, #16
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d005      	beq.n	800ebc8 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebc0:	f043 0210 	orr.w	r2, r3, #16
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	4a4b      	ldr	r2, [pc, #300]	; (800ecfc <HAL_SD_IRQHandler+0x36c>)
 800ebce:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800ebde:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	68da      	ldr	r2, [r3, #12]
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ebee:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ebfe:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	68da      	ldr	r2, [r3, #12]
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ec0e:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	4618      	mov	r0, r3
 800ec16:	f004 fd57 	bl	80136c8 <SDMMC_CmdStopTransfer>
 800ec1a:	4602      	mov	r2, r0
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec20:	431a      	orrs	r2, r3
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	68da      	ldr	r2, [r3, #12]
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ec34:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ec3e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	f003 0308 	and.w	r3, r3, #8
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d00a      	beq.n	800ec60 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2201      	movs	r2, #1
 800ec4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	2200      	movs	r2, #0
 800ec56:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800ec58:	6878      	ldr	r0, [r7, #4]
 800ec5a:	f000 f851 	bl	800ed00 <HAL_SD_ErrorCallback>
}
 800ec5e:	e049      	b.n	800ecf4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d044      	beq.n	800ecf4 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d040      	beq.n	800ecf4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800ec80:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	2200      	movs	r2, #0
 800ec88:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	2201      	movs	r2, #1
 800ec8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800ec92:	6878      	ldr	r0, [r7, #4]
 800ec94:	f000 f834 	bl	800ed00 <HAL_SD_ErrorCallback>
}
 800ec98:	e02c      	b.n	800ecf4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d025      	beq.n	800ecf4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecb0:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ecb8:	f003 0304 	and.w	r3, r3, #4
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d10c      	bne.n	800ecda <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	f003 0320 	and.w	r3, r3, #32
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d003      	beq.n	800ecd2 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800ecca:	6878      	ldr	r0, [r7, #4]
 800eccc:	f001 f84a 	bl	800fd64 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800ecd0:	e010      	b.n	800ecf4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800ecd2:	6878      	ldr	r0, [r7, #4]
 800ecd4:	f001 f832 	bl	800fd3c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800ecd8:	e00c      	b.n	800ecf4 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	f003 0320 	and.w	r3, r3, #32
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d003      	beq.n	800ecec <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800ece4:	6878      	ldr	r0, [r7, #4]
 800ece6:	f001 f833 	bl	800fd50 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800ecea:	e003      	b.n	800ecf4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800ecec:	6878      	ldr	r0, [r7, #4]
 800ecee:	f001 f81b 	bl	800fd28 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800ecf2:	e7ff      	b.n	800ecf4 <HAL_SD_IRQHandler+0x364>
 800ecf4:	bf00      	nop
 800ecf6:	3710      	adds	r7, #16
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd80      	pop	{r7, pc}
 800ecfc:	18000f3a 	.word	0x18000f3a

0800ed00 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800ed00:	b480      	push	{r7}
 800ed02:	b083      	sub	sp, #12
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800ed08:	bf00      	nop
 800ed0a:	370c      	adds	r7, #12
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed12:	4770      	bx	lr

0800ed14 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800ed14:	b480      	push	{r7}
 800ed16:	b083      	sub	sp, #12
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
 800ed1c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed22:	0f9b      	lsrs	r3, r3, #30
 800ed24:	b2da      	uxtb	r2, r3
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed2e:	0e9b      	lsrs	r3, r3, #26
 800ed30:	b2db      	uxtb	r3, r3
 800ed32:	f003 030f 	and.w	r3, r3, #15
 800ed36:	b2da      	uxtb	r2, r3
 800ed38:	683b      	ldr	r3, [r7, #0]
 800ed3a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed40:	0e1b      	lsrs	r3, r3, #24
 800ed42:	b2db      	uxtb	r3, r3
 800ed44:	f003 0303 	and.w	r3, r3, #3
 800ed48:	b2da      	uxtb	r2, r3
 800ed4a:	683b      	ldr	r3, [r7, #0]
 800ed4c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed52:	0c1b      	lsrs	r3, r3, #16
 800ed54:	b2da      	uxtb	r2, r3
 800ed56:	683b      	ldr	r3, [r7, #0]
 800ed58:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed5e:	0a1b      	lsrs	r3, r3, #8
 800ed60:	b2da      	uxtb	r2, r3
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed6a:	b2da      	uxtb	r2, r3
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ed74:	0d1b      	lsrs	r3, r3, #20
 800ed76:	b29a      	uxth	r2, r3
 800ed78:	683b      	ldr	r3, [r7, #0]
 800ed7a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ed80:	0c1b      	lsrs	r3, r3, #16
 800ed82:	b2db      	uxtb	r3, r3
 800ed84:	f003 030f 	and.w	r3, r3, #15
 800ed88:	b2da      	uxtb	r2, r3
 800ed8a:	683b      	ldr	r3, [r7, #0]
 800ed8c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ed92:	0bdb      	lsrs	r3, r3, #15
 800ed94:	b2db      	uxtb	r3, r3
 800ed96:	f003 0301 	and.w	r3, r3, #1
 800ed9a:	b2da      	uxtb	r2, r3
 800ed9c:	683b      	ldr	r3, [r7, #0]
 800ed9e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eda4:	0b9b      	lsrs	r3, r3, #14
 800eda6:	b2db      	uxtb	r3, r3
 800eda8:	f003 0301 	and.w	r3, r3, #1
 800edac:	b2da      	uxtb	r2, r3
 800edae:	683b      	ldr	r3, [r7, #0]
 800edb0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800edb6:	0b5b      	lsrs	r3, r3, #13
 800edb8:	b2db      	uxtb	r3, r3
 800edba:	f003 0301 	and.w	r3, r3, #1
 800edbe:	b2da      	uxtb	r2, r3
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800edc8:	0b1b      	lsrs	r3, r3, #12
 800edca:	b2db      	uxtb	r3, r3
 800edcc:	f003 0301 	and.w	r3, r3, #1
 800edd0:	b2da      	uxtb	r2, r3
 800edd2:	683b      	ldr	r3, [r7, #0]
 800edd4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	2200      	movs	r2, #0
 800edda:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d163      	bne.n	800eeac <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ede8:	009a      	lsls	r2, r3, #2
 800edea:	f640 73fc 	movw	r3, #4092	; 0xffc
 800edee:	4013      	ands	r3, r2
 800edf0:	687a      	ldr	r2, [r7, #4]
 800edf2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800edf4:	0f92      	lsrs	r2, r2, #30
 800edf6:	431a      	orrs	r2, r3
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee00:	0edb      	lsrs	r3, r3, #27
 800ee02:	b2db      	uxtb	r3, r3
 800ee04:	f003 0307 	and.w	r3, r3, #7
 800ee08:	b2da      	uxtb	r2, r3
 800ee0a:	683b      	ldr	r3, [r7, #0]
 800ee0c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee12:	0e1b      	lsrs	r3, r3, #24
 800ee14:	b2db      	uxtb	r3, r3
 800ee16:	f003 0307 	and.w	r3, r3, #7
 800ee1a:	b2da      	uxtb	r2, r3
 800ee1c:	683b      	ldr	r3, [r7, #0]
 800ee1e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee24:	0d5b      	lsrs	r3, r3, #21
 800ee26:	b2db      	uxtb	r3, r3
 800ee28:	f003 0307 	and.w	r3, r3, #7
 800ee2c:	b2da      	uxtb	r2, r3
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee36:	0c9b      	lsrs	r3, r3, #18
 800ee38:	b2db      	uxtb	r3, r3
 800ee3a:	f003 0307 	and.w	r3, r3, #7
 800ee3e:	b2da      	uxtb	r2, r3
 800ee40:	683b      	ldr	r3, [r7, #0]
 800ee42:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee48:	0bdb      	lsrs	r3, r3, #15
 800ee4a:	b2db      	uxtb	r3, r3
 800ee4c:	f003 0307 	and.w	r3, r3, #7
 800ee50:	b2da      	uxtb	r2, r3
 800ee52:	683b      	ldr	r3, [r7, #0]
 800ee54:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ee56:	683b      	ldr	r3, [r7, #0]
 800ee58:	691b      	ldr	r3, [r3, #16]
 800ee5a:	1c5a      	adds	r2, r3, #1
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ee60:	683b      	ldr	r3, [r7, #0]
 800ee62:	7e1b      	ldrb	r3, [r3, #24]
 800ee64:	b2db      	uxtb	r3, r3
 800ee66:	f003 0307 	and.w	r3, r3, #7
 800ee6a:	3302      	adds	r3, #2
 800ee6c:	2201      	movs	r2, #1
 800ee6e:	fa02 f303 	lsl.w	r3, r2, r3
 800ee72:	687a      	ldr	r2, [r7, #4]
 800ee74:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ee76:	fb03 f202 	mul.w	r2, r3, r2
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	7a1b      	ldrb	r3, [r3, #8]
 800ee82:	b2db      	uxtb	r3, r3
 800ee84:	f003 030f 	and.w	r3, r3, #15
 800ee88:	2201      	movs	r2, #1
 800ee8a:	409a      	lsls	r2, r3
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ee94:	687a      	ldr	r2, [r7, #4]
 800ee96:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800ee98:	0a52      	lsrs	r2, r2, #9
 800ee9a:	fb03 f202 	mul.w	r2, r3, r2
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eea8:	655a      	str	r2, [r3, #84]	; 0x54
 800eeaa:	e031      	b.n	800ef10 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eeb0:	2b01      	cmp	r3, #1
 800eeb2:	d11d      	bne.n	800eef0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eeb8:	041b      	lsls	r3, r3, #16
 800eeba:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eec2:	0c1b      	lsrs	r3, r3, #16
 800eec4:	431a      	orrs	r2, r3
 800eec6:	683b      	ldr	r3, [r7, #0]
 800eec8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800eeca:	683b      	ldr	r3, [r7, #0]
 800eecc:	691b      	ldr	r3, [r3, #16]
 800eece:	3301      	adds	r3, #1
 800eed0:	029a      	lsls	r2, r3, #10
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eee4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	655a      	str	r2, [r3, #84]	; 0x54
 800eeee:	e00f      	b.n	800ef10 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	4a58      	ldr	r2, [pc, #352]	; (800f058 <HAL_SD_GetCardCSD+0x344>)
 800eef6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eefc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	2201      	movs	r2, #1
 800ef08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800ef0c:	2301      	movs	r3, #1
 800ef0e:	e09d      	b.n	800f04c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef14:	0b9b      	lsrs	r3, r3, #14
 800ef16:	b2db      	uxtb	r3, r3
 800ef18:	f003 0301 	and.w	r3, r3, #1
 800ef1c:	b2da      	uxtb	r2, r3
 800ef1e:	683b      	ldr	r3, [r7, #0]
 800ef20:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef26:	09db      	lsrs	r3, r3, #7
 800ef28:	b2db      	uxtb	r3, r3
 800ef2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef2e:	b2da      	uxtb	r2, r3
 800ef30:	683b      	ldr	r3, [r7, #0]
 800ef32:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef38:	b2db      	uxtb	r3, r3
 800ef3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef3e:	b2da      	uxtb	r2, r3
 800ef40:	683b      	ldr	r3, [r7, #0]
 800ef42:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef48:	0fdb      	lsrs	r3, r3, #31
 800ef4a:	b2da      	uxtb	r2, r3
 800ef4c:	683b      	ldr	r3, [r7, #0]
 800ef4e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef54:	0f5b      	lsrs	r3, r3, #29
 800ef56:	b2db      	uxtb	r3, r3
 800ef58:	f003 0303 	and.w	r3, r3, #3
 800ef5c:	b2da      	uxtb	r2, r3
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef66:	0e9b      	lsrs	r3, r3, #26
 800ef68:	b2db      	uxtb	r3, r3
 800ef6a:	f003 0307 	and.w	r3, r3, #7
 800ef6e:	b2da      	uxtb	r2, r3
 800ef70:	683b      	ldr	r3, [r7, #0]
 800ef72:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef78:	0d9b      	lsrs	r3, r3, #22
 800ef7a:	b2db      	uxtb	r3, r3
 800ef7c:	f003 030f 	and.w	r3, r3, #15
 800ef80:	b2da      	uxtb	r2, r3
 800ef82:	683b      	ldr	r3, [r7, #0]
 800ef84:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef8a:	0d5b      	lsrs	r3, r3, #21
 800ef8c:	b2db      	uxtb	r3, r3
 800ef8e:	f003 0301 	and.w	r3, r3, #1
 800ef92:	b2da      	uxtb	r2, r3
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ef9a:	683b      	ldr	r3, [r7, #0]
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800efa6:	0c1b      	lsrs	r3, r3, #16
 800efa8:	b2db      	uxtb	r3, r3
 800efaa:	f003 0301 	and.w	r3, r3, #1
 800efae:	b2da      	uxtb	r2, r3
 800efb0:	683b      	ldr	r3, [r7, #0]
 800efb2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800efba:	0bdb      	lsrs	r3, r3, #15
 800efbc:	b2db      	uxtb	r3, r3
 800efbe:	f003 0301 	and.w	r3, r3, #1
 800efc2:	b2da      	uxtb	r2, r3
 800efc4:	683b      	ldr	r3, [r7, #0]
 800efc6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800efce:	0b9b      	lsrs	r3, r3, #14
 800efd0:	b2db      	uxtb	r3, r3
 800efd2:	f003 0301 	and.w	r3, r3, #1
 800efd6:	b2da      	uxtb	r2, r3
 800efd8:	683b      	ldr	r3, [r7, #0]
 800efda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800efe2:	0b5b      	lsrs	r3, r3, #13
 800efe4:	b2db      	uxtb	r3, r3
 800efe6:	f003 0301 	and.w	r3, r3, #1
 800efea:	b2da      	uxtb	r2, r3
 800efec:	683b      	ldr	r3, [r7, #0]
 800efee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eff6:	0b1b      	lsrs	r3, r3, #12
 800eff8:	b2db      	uxtb	r3, r3
 800effa:	f003 0301 	and.w	r3, r3, #1
 800effe:	b2da      	uxtb	r2, r3
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f00a:	0a9b      	lsrs	r3, r3, #10
 800f00c:	b2db      	uxtb	r3, r3
 800f00e:	f003 0303 	and.w	r3, r3, #3
 800f012:	b2da      	uxtb	r2, r3
 800f014:	683b      	ldr	r3, [r7, #0]
 800f016:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f01e:	0a1b      	lsrs	r3, r3, #8
 800f020:	b2db      	uxtb	r3, r3
 800f022:	f003 0303 	and.w	r3, r3, #3
 800f026:	b2da      	uxtb	r2, r3
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f032:	085b      	lsrs	r3, r3, #1
 800f034:	b2db      	uxtb	r3, r3
 800f036:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f03a:	b2da      	uxtb	r2, r3
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	2201      	movs	r2, #1
 800f046:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800f04a:	2300      	movs	r3, #0
}
 800f04c:	4618      	mov	r0, r3
 800f04e:	370c      	adds	r7, #12
 800f050:	46bd      	mov	sp, r7
 800f052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f056:	4770      	bx	lr
 800f058:	1fe00fff 	.word	0x1fe00fff

0800f05c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b094      	sub	sp, #80	; 0x50
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
 800f064:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800f066:	2300      	movs	r3, #0
 800f068:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f072:	b2db      	uxtb	r3, r3
 800f074:	2b03      	cmp	r3, #3
 800f076:	d101      	bne.n	800f07c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800f078:	2301      	movs	r3, #1
 800f07a:	e0a7      	b.n	800f1cc <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800f07c:	f107 0308 	add.w	r3, r7, #8
 800f080:	4619      	mov	r1, r3
 800f082:	6878      	ldr	r0, [r7, #4]
 800f084:	f000 fb62 	bl	800f74c <SD_SendSDStatus>
 800f088:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800f08a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d011      	beq.n	800f0b4 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	4a4f      	ldr	r2, [pc, #316]	; (800f1d4 <HAL_SD_GetCardStatus+0x178>)
 800f096:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f09c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f09e:	431a      	orrs	r2, r3
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2201      	movs	r2, #1
 800f0a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800f0ac:	2301      	movs	r3, #1
 800f0ae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800f0b2:	e070      	b.n	800f196 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800f0b4:	68bb      	ldr	r3, [r7, #8]
 800f0b6:	099b      	lsrs	r3, r3, #6
 800f0b8:	b2db      	uxtb	r3, r3
 800f0ba:	f003 0303 	and.w	r3, r3, #3
 800f0be:	b2da      	uxtb	r2, r3
 800f0c0:	683b      	ldr	r3, [r7, #0]
 800f0c2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800f0c4:	68bb      	ldr	r3, [r7, #8]
 800f0c6:	095b      	lsrs	r3, r3, #5
 800f0c8:	b2db      	uxtb	r3, r3
 800f0ca:	f003 0301 	and.w	r3, r3, #1
 800f0ce:	b2da      	uxtb	r2, r3
 800f0d0:	683b      	ldr	r3, [r7, #0]
 800f0d2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800f0d4:	68bb      	ldr	r3, [r7, #8]
 800f0d6:	0a1b      	lsrs	r3, r3, #8
 800f0d8:	b29b      	uxth	r3, r3
 800f0da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f0de:	b29a      	uxth	r2, r3
 800f0e0:	68bb      	ldr	r3, [r7, #8]
 800f0e2:	0e1b      	lsrs	r3, r3, #24
 800f0e4:	b29b      	uxth	r3, r3
 800f0e6:	4313      	orrs	r3, r2
 800f0e8:	b29a      	uxth	r2, r3
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	061a      	lsls	r2, r3, #24
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	021b      	lsls	r3, r3, #8
 800f0f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f0fa:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	0a1b      	lsrs	r3, r3, #8
 800f100:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800f104:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	0e1b      	lsrs	r3, r3, #24
 800f10a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800f110:	693b      	ldr	r3, [r7, #16]
 800f112:	b2da      	uxtb	r2, r3
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800f118:	693b      	ldr	r3, [r7, #16]
 800f11a:	0a1b      	lsrs	r3, r3, #8
 800f11c:	b2da      	uxtb	r2, r3
 800f11e:	683b      	ldr	r3, [r7, #0]
 800f120:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800f122:	693b      	ldr	r3, [r7, #16]
 800f124:	0d1b      	lsrs	r3, r3, #20
 800f126:	b2db      	uxtb	r3, r3
 800f128:	f003 030f 	and.w	r3, r3, #15
 800f12c:	b2da      	uxtb	r2, r3
 800f12e:	683b      	ldr	r3, [r7, #0]
 800f130:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800f132:	693b      	ldr	r3, [r7, #16]
 800f134:	0c1b      	lsrs	r3, r3, #16
 800f136:	b29b      	uxth	r3, r3
 800f138:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f13c:	b29a      	uxth	r2, r3
 800f13e:	697b      	ldr	r3, [r7, #20]
 800f140:	b29b      	uxth	r3, r3
 800f142:	b2db      	uxtb	r3, r3
 800f144:	b29b      	uxth	r3, r3
 800f146:	4313      	orrs	r3, r2
 800f148:	b29a      	uxth	r2, r3
 800f14a:	683b      	ldr	r3, [r7, #0]
 800f14c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800f14e:	697b      	ldr	r3, [r7, #20]
 800f150:	0a9b      	lsrs	r3, r3, #10
 800f152:	b2db      	uxtb	r3, r3
 800f154:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f158:	b2da      	uxtb	r2, r3
 800f15a:	683b      	ldr	r3, [r7, #0]
 800f15c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800f15e:	697b      	ldr	r3, [r7, #20]
 800f160:	0a1b      	lsrs	r3, r3, #8
 800f162:	b2db      	uxtb	r3, r3
 800f164:	f003 0303 	and.w	r3, r3, #3
 800f168:	b2da      	uxtb	r2, r3
 800f16a:	683b      	ldr	r3, [r7, #0]
 800f16c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800f16e:	697b      	ldr	r3, [r7, #20]
 800f170:	091b      	lsrs	r3, r3, #4
 800f172:	b2db      	uxtb	r3, r3
 800f174:	f003 030f 	and.w	r3, r3, #15
 800f178:	b2da      	uxtb	r2, r3
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800f17e:	697b      	ldr	r3, [r7, #20]
 800f180:	b2db      	uxtb	r3, r3
 800f182:	f003 030f 	and.w	r3, r3, #15
 800f186:	b2da      	uxtb	r2, r3
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800f18c:	69bb      	ldr	r3, [r7, #24]
 800f18e:	0e1b      	lsrs	r3, r3, #24
 800f190:	b2da      	uxtb	r2, r3
 800f192:	683b      	ldr	r3, [r7, #0]
 800f194:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f19e:	4618      	mov	r0, r3
 800f1a0:	f004 f9e2 	bl	8013568 <SDMMC_CmdBlockLength>
 800f1a4:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800f1a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d00d      	beq.n	800f1c8 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	4a08      	ldr	r2, [pc, #32]	; (800f1d4 <HAL_SD_GetCardStatus+0x178>)
 800f1b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f1b8:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	2201      	movs	r2, #1
 800f1be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800f1c2:	2301      	movs	r3, #1
 800f1c4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800f1c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	3750      	adds	r7, #80	; 0x50
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	bd80      	pop	{r7, pc}
 800f1d4:	1fe00fff 	.word	0x1fe00fff

0800f1d8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800f1d8:	b480      	push	{r7}
 800f1da:	b083      	sub	sp, #12
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
 800f1e0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f1e6:	683b      	ldr	r3, [r7, #0]
 800f1e8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f1f6:	683b      	ldr	r3, [r7, #0]
 800f1f8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f216:	683b      	ldr	r3, [r7, #0]
 800f218:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800f222:	2300      	movs	r3, #0
}
 800f224:	4618      	mov	r0, r3
 800f226:	370c      	adds	r7, #12
 800f228:	46bd      	mov	sp, r7
 800f22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22e:	4770      	bx	lr

0800f230 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800f230:	b590      	push	{r4, r7, lr}
 800f232:	b08d      	sub	sp, #52	; 0x34
 800f234:	af02      	add	r7, sp, #8
 800f236:	6078      	str	r0, [r7, #4]
 800f238:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800f23a:	2300      	movs	r3, #0
 800f23c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	2203      	movs	r2, #3
 800f244:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f24c:	2b03      	cmp	r3, #3
 800f24e:	d02e      	beq.n	800f2ae <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f256:	d106      	bne.n	800f266 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f25c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	635a      	str	r2, [r3, #52]	; 0x34
 800f264:	e029      	b.n	800f2ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800f266:	683b      	ldr	r3, [r7, #0]
 800f268:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f26c:	d10a      	bne.n	800f284 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	f000 fb64 	bl	800f93c <SD_WideBus_Enable>
 800f274:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f27a:	6a3b      	ldr	r3, [r7, #32]
 800f27c:	431a      	orrs	r2, r3
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	635a      	str	r2, [r3, #52]	; 0x34
 800f282:	e01a      	b.n	800f2ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800f284:	683b      	ldr	r3, [r7, #0]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d10a      	bne.n	800f2a0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800f28a:	6878      	ldr	r0, [r7, #4]
 800f28c:	f000 fba1 	bl	800f9d2 <SD_WideBus_Disable>
 800f290:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f296:	6a3b      	ldr	r3, [r7, #32]
 800f298:	431a      	orrs	r2, r3
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	635a      	str	r2, [r3, #52]	; 0x34
 800f29e:	e00c      	b.n	800f2ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2a4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	635a      	str	r2, [r3, #52]	; 0x34
 800f2ac:	e005      	b.n	800f2ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2b2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d007      	beq.n	800f2d2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	4a5f      	ldr	r2, [pc, #380]	; (800f444 <HAL_SD_ConfigWideBusOperation+0x214>)
 800f2c8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f2d0:	e096      	b.n	800f400 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800f2d2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800f2d6:	f04f 0100 	mov.w	r1, #0
 800f2da:	f7fd fcf5 	bl	800ccc8 <HAL_RCCEx_GetPeriphCLKFreq>
 800f2de:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800f2e0:	69fb      	ldr	r3, [r7, #28]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	f000 8083 	beq.w	800f3ee <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	685b      	ldr	r3, [r3, #4]
 800f2ec:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	689b      	ldr	r3, [r3, #8]
 800f2f2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	691b      	ldr	r3, [r3, #16]
 800f2fc:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	695a      	ldr	r2, [r3, #20]
 800f302:	69fb      	ldr	r3, [r7, #28]
 800f304:	4950      	ldr	r1, [pc, #320]	; (800f448 <HAL_SD_ConfigWideBusOperation+0x218>)
 800f306:	fba1 1303 	umull	r1, r3, r1, r3
 800f30a:	0e1b      	lsrs	r3, r3, #24
 800f30c:	429a      	cmp	r2, r3
 800f30e:	d303      	bcc.n	800f318 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	695b      	ldr	r3, [r3, #20]
 800f314:	61bb      	str	r3, [r7, #24]
 800f316:	e05a      	b.n	800f3ce <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f31c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f320:	d103      	bne.n	800f32a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	695b      	ldr	r3, [r3, #20]
 800f326:	61bb      	str	r3, [r7, #24]
 800f328:	e051      	b.n	800f3ce <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f32e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f332:	d126      	bne.n	800f382 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	695b      	ldr	r3, [r3, #20]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d10e      	bne.n	800f35a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800f33c:	69fb      	ldr	r3, [r7, #28]
 800f33e:	4a43      	ldr	r2, [pc, #268]	; (800f44c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800f340:	4293      	cmp	r3, r2
 800f342:	d906      	bls.n	800f352 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800f344:	69fb      	ldr	r3, [r7, #28]
 800f346:	4a40      	ldr	r2, [pc, #256]	; (800f448 <HAL_SD_ConfigWideBusOperation+0x218>)
 800f348:	fba2 2303 	umull	r2, r3, r2, r3
 800f34c:	0e5b      	lsrs	r3, r3, #25
 800f34e:	61bb      	str	r3, [r7, #24]
 800f350:	e03d      	b.n	800f3ce <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	695b      	ldr	r3, [r3, #20]
 800f356:	61bb      	str	r3, [r7, #24]
 800f358:	e039      	b.n	800f3ce <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	695b      	ldr	r3, [r3, #20]
 800f35e:	005b      	lsls	r3, r3, #1
 800f360:	69fa      	ldr	r2, [r7, #28]
 800f362:	fbb2 f3f3 	udiv	r3, r2, r3
 800f366:	4a39      	ldr	r2, [pc, #228]	; (800f44c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800f368:	4293      	cmp	r3, r2
 800f36a:	d906      	bls.n	800f37a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800f36c:	69fb      	ldr	r3, [r7, #28]
 800f36e:	4a36      	ldr	r2, [pc, #216]	; (800f448 <HAL_SD_ConfigWideBusOperation+0x218>)
 800f370:	fba2 2303 	umull	r2, r3, r2, r3
 800f374:	0e5b      	lsrs	r3, r3, #25
 800f376:	61bb      	str	r3, [r7, #24]
 800f378:	e029      	b.n	800f3ce <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	695b      	ldr	r3, [r3, #20]
 800f37e:	61bb      	str	r3, [r7, #24]
 800f380:	e025      	b.n	800f3ce <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	695b      	ldr	r3, [r3, #20]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d10e      	bne.n	800f3a8 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800f38a:	69fb      	ldr	r3, [r7, #28]
 800f38c:	4a30      	ldr	r2, [pc, #192]	; (800f450 <HAL_SD_ConfigWideBusOperation+0x220>)
 800f38e:	4293      	cmp	r3, r2
 800f390:	d906      	bls.n	800f3a0 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800f392:	69fb      	ldr	r3, [r7, #28]
 800f394:	4a2c      	ldr	r2, [pc, #176]	; (800f448 <HAL_SD_ConfigWideBusOperation+0x218>)
 800f396:	fba2 2303 	umull	r2, r3, r2, r3
 800f39a:	0e1b      	lsrs	r3, r3, #24
 800f39c:	61bb      	str	r3, [r7, #24]
 800f39e:	e016      	b.n	800f3ce <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	695b      	ldr	r3, [r3, #20]
 800f3a4:	61bb      	str	r3, [r7, #24]
 800f3a6:	e012      	b.n	800f3ce <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	695b      	ldr	r3, [r3, #20]
 800f3ac:	005b      	lsls	r3, r3, #1
 800f3ae:	69fa      	ldr	r2, [r7, #28]
 800f3b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800f3b4:	4a26      	ldr	r2, [pc, #152]	; (800f450 <HAL_SD_ConfigWideBusOperation+0x220>)
 800f3b6:	4293      	cmp	r3, r2
 800f3b8:	d906      	bls.n	800f3c8 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800f3ba:	69fb      	ldr	r3, [r7, #28]
 800f3bc:	4a22      	ldr	r2, [pc, #136]	; (800f448 <HAL_SD_ConfigWideBusOperation+0x218>)
 800f3be:	fba2 2303 	umull	r2, r3, r2, r3
 800f3c2:	0e1b      	lsrs	r3, r3, #24
 800f3c4:	61bb      	str	r3, [r7, #24]
 800f3c6:	e002      	b.n	800f3ce <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	695b      	ldr	r3, [r3, #20]
 800f3cc:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	681c      	ldr	r4, [r3, #0]
 800f3d2:	466a      	mov	r2, sp
 800f3d4:	f107 0314 	add.w	r3, r7, #20
 800f3d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f3dc:	e882 0003 	stmia.w	r2, {r0, r1}
 800f3e0:	f107 0308 	add.w	r3, r7, #8
 800f3e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f3e6:	4620      	mov	r0, r4
 800f3e8:	f003 ffe0 	bl	80133ac <SDMMC_Init>
 800f3ec:	e008      	b.n	800f400 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800f3fa:	2301      	movs	r3, #1
 800f3fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f408:	4618      	mov	r0, r3
 800f40a:	f004 f8ad 	bl	8013568 <SDMMC_CmdBlockLength>
 800f40e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f410:	6a3b      	ldr	r3, [r7, #32]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d00c      	beq.n	800f430 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	4a0a      	ldr	r2, [pc, #40]	; (800f444 <HAL_SD_ConfigWideBusOperation+0x214>)
 800f41c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f422:	6a3b      	ldr	r3, [r7, #32]
 800f424:	431a      	orrs	r2, r3
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800f42a:	2301      	movs	r3, #1
 800f42c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	2201      	movs	r2, #1
 800f434:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800f438:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800f43c:	4618      	mov	r0, r3
 800f43e:	372c      	adds	r7, #44	; 0x2c
 800f440:	46bd      	mov	sp, r7
 800f442:	bd90      	pop	{r4, r7, pc}
 800f444:	1fe00fff 	.word	0x1fe00fff
 800f448:	55e63b89 	.word	0x55e63b89
 800f44c:	02faf080 	.word	0x02faf080
 800f450:	017d7840 	.word	0x017d7840

0800f454 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b086      	sub	sp, #24
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800f45c:	2300      	movs	r3, #0
 800f45e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800f460:	f107 030c 	add.w	r3, r7, #12
 800f464:	4619      	mov	r1, r3
 800f466:	6878      	ldr	r0, [r7, #4]
 800f468:	f000 fa40 	bl	800f8ec <SD_SendStatus>
 800f46c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f46e:	697b      	ldr	r3, [r7, #20]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d005      	beq.n	800f480 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f478:	697b      	ldr	r3, [r7, #20]
 800f47a:	431a      	orrs	r2, r3
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	0a5b      	lsrs	r3, r3, #9
 800f484:	f003 030f 	and.w	r3, r3, #15
 800f488:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800f48a:	693b      	ldr	r3, [r7, #16]
}
 800f48c:	4618      	mov	r0, r3
 800f48e:	3718      	adds	r7, #24
 800f490:	46bd      	mov	sp, r7
 800f492:	bd80      	pop	{r7, pc}

0800f494 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b090      	sub	sp, #64	; 0x40
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800f49c:	2300      	movs	r3, #0
 800f49e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800f4a0:	f7f4 ff3a 	bl	8004318 <HAL_GetTick>
 800f4a4:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	f003 ffd7 	bl	801345e <SDMMC_GetPowerState>
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d102      	bne.n	800f4bc <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f4b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800f4ba:	e0b5      	b.n	800f628 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4c0:	2b03      	cmp	r3, #3
 800f4c2:	d02e      	beq.n	800f522 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	f004 fa22 	bl	8013912 <SDMMC_CmdSendCID>
 800f4ce:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800f4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d001      	beq.n	800f4da <SD_InitCard+0x46>
    {
      return errorstate;
 800f4d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4d8:	e0a6      	b.n	800f628 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	2100      	movs	r1, #0
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	f004 f802 	bl	80134ea <SDMMC_GetResponse>
 800f4e6:	4602      	mov	r2, r0
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	2104      	movs	r1, #4
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	f003 fff9 	bl	80134ea <SDMMC_GetResponse>
 800f4f8:	4602      	mov	r2, r0
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	2108      	movs	r1, #8
 800f504:	4618      	mov	r0, r3
 800f506:	f003 fff0 	bl	80134ea <SDMMC_GetResponse>
 800f50a:	4602      	mov	r2, r0
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	210c      	movs	r1, #12
 800f516:	4618      	mov	r0, r3
 800f518:	f003 ffe7 	bl	80134ea <SDMMC_GetResponse>
 800f51c:	4602      	mov	r2, r0
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f526:	2b03      	cmp	r3, #3
 800f528:	d01d      	beq.n	800f566 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800f52a:	e019      	b.n	800f560 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	f107 020a 	add.w	r2, r7, #10
 800f534:	4611      	mov	r1, r2
 800f536:	4618      	mov	r0, r3
 800f538:	f004 fa2a 	bl	8013990 <SDMMC_CmdSetRelAdd>
 800f53c:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800f53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f540:	2b00      	cmp	r3, #0
 800f542:	d001      	beq.n	800f548 <SD_InitCard+0xb4>
      {
        return errorstate;
 800f544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f546:	e06f      	b.n	800f628 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800f548:	f7f4 fee6 	bl	8004318 <HAL_GetTick>
 800f54c:	4602      	mov	r2, r0
 800f54e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f550:	1ad3      	subs	r3, r2, r3
 800f552:	f241 3287 	movw	r2, #4999	; 0x1387
 800f556:	4293      	cmp	r3, r2
 800f558:	d902      	bls.n	800f560 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800f55a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f55e:	e063      	b.n	800f628 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800f560:	897b      	ldrh	r3, [r7, #10]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d0e2      	beq.n	800f52c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f56a:	2b03      	cmp	r3, #3
 800f56c:	d036      	beq.n	800f5dc <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800f56e:	897b      	ldrh	r3, [r7, #10]
 800f570:	461a      	mov	r2, r3
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	681a      	ldr	r2, [r3, #0]
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f57e:	041b      	lsls	r3, r3, #16
 800f580:	4619      	mov	r1, r3
 800f582:	4610      	mov	r0, r2
 800f584:	f004 f9e4 	bl	8013950 <SDMMC_CmdSendCSD>
 800f588:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800f58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d001      	beq.n	800f594 <SD_InitCard+0x100>
    {
      return errorstate;
 800f590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f592:	e049      	b.n	800f628 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	2100      	movs	r1, #0
 800f59a:	4618      	mov	r0, r3
 800f59c:	f003 ffa5 	bl	80134ea <SDMMC_GetResponse>
 800f5a0:	4602      	mov	r2, r0
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	2104      	movs	r1, #4
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	f003 ff9c 	bl	80134ea <SDMMC_GetResponse>
 800f5b2:	4602      	mov	r2, r0
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	2108      	movs	r1, #8
 800f5be:	4618      	mov	r0, r3
 800f5c0:	f003 ff93 	bl	80134ea <SDMMC_GetResponse>
 800f5c4:	4602      	mov	r2, r0
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	210c      	movs	r1, #12
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f003 ff8a 	bl	80134ea <SDMMC_GetResponse>
 800f5d6:	4602      	mov	r2, r0
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	2104      	movs	r1, #4
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f003 ff81 	bl	80134ea <SDMMC_GetResponse>
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	0d1a      	lsrs	r2, r3, #20
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800f5f0:	f107 030c 	add.w	r3, r7, #12
 800f5f4:	4619      	mov	r1, r3
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	f7ff fb8c 	bl	800ed14 <HAL_SD_GetCardCSD>
 800f5fc:	4603      	mov	r3, r0
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d002      	beq.n	800f608 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f602:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f606:	e00f      	b.n	800f628 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681a      	ldr	r2, [r3, #0]
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f610:	041b      	lsls	r3, r3, #16
 800f612:	4619      	mov	r1, r3
 800f614:	4610      	mov	r0, r2
 800f616:	f004 f893 	bl	8013740 <SDMMC_CmdSelDesel>
 800f61a:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800f61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d001      	beq.n	800f626 <SD_InitCard+0x192>
  {
    return errorstate;
 800f622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f624:	e000      	b.n	800f628 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800f626:	2300      	movs	r3, #0
}
 800f628:	4618      	mov	r0, r3
 800f62a:	3740      	adds	r7, #64	; 0x40
 800f62c:	46bd      	mov	sp, r7
 800f62e:	bd80      	pop	{r7, pc}

0800f630 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800f630:	b580      	push	{r7, lr}
 800f632:	b086      	sub	sp, #24
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f638:	2300      	movs	r3, #0
 800f63a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800f63c:	2300      	movs	r3, #0
 800f63e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800f640:	2300      	movs	r3, #0
 800f642:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	4618      	mov	r0, r3
 800f64a:	f004 f89c 	bl	8013786 <SDMMC_CmdGoIdleState>
 800f64e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d001      	beq.n	800f65a <SD_PowerON+0x2a>
  {
    return errorstate;
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	e072      	b.n	800f740 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	4618      	mov	r0, r3
 800f660:	f004 f8af 	bl	80137c2 <SDMMC_CmdOperCond>
 800f664:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f66c:	d10d      	bne.n	800f68a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	2200      	movs	r2, #0
 800f672:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	4618      	mov	r0, r3
 800f67a:	f004 f884 	bl	8013786 <SDMMC_CmdGoIdleState>
 800f67e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d004      	beq.n	800f690 <SD_PowerON+0x60>
    {
      return errorstate;
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	e05a      	b.n	800f740 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	2201      	movs	r2, #1
 800f68e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f694:	2b01      	cmp	r3, #1
 800f696:	d137      	bne.n	800f708 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	2100      	movs	r1, #0
 800f69e:	4618      	mov	r0, r3
 800f6a0:	f004 f8af 	bl	8013802 <SDMMC_CmdAppCommand>
 800f6a4:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d02d      	beq.n	800f708 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f6ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f6b0:	e046      	b.n	800f740 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	2100      	movs	r1, #0
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	f004 f8a2 	bl	8013802 <SDMMC_CmdAppCommand>
 800f6be:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d001      	beq.n	800f6ca <SD_PowerON+0x9a>
    {
      return errorstate;
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	e03a      	b.n	800f740 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	491e      	ldr	r1, [pc, #120]	; (800f748 <SD_PowerON+0x118>)
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	f004 f8b9 	bl	8013848 <SDMMC_CmdAppOperCommand>
 800f6d6:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d002      	beq.n	800f6e4 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f6de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f6e2:	e02d      	b.n	800f740 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	2100      	movs	r1, #0
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	f003 fefd 	bl	80134ea <SDMMC_GetResponse>
 800f6f0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800f6f2:	697b      	ldr	r3, [r7, #20]
 800f6f4:	0fdb      	lsrs	r3, r3, #31
 800f6f6:	2b01      	cmp	r3, #1
 800f6f8:	d101      	bne.n	800f6fe <SD_PowerON+0xce>
 800f6fa:	2301      	movs	r3, #1
 800f6fc:	e000      	b.n	800f700 <SD_PowerON+0xd0>
 800f6fe:	2300      	movs	r3, #0
 800f700:	613b      	str	r3, [r7, #16]

    count++;
 800f702:	68bb      	ldr	r3, [r7, #8]
 800f704:	3301      	adds	r3, #1
 800f706:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800f708:	68bb      	ldr	r3, [r7, #8]
 800f70a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f70e:	4293      	cmp	r3, r2
 800f710:	d802      	bhi.n	800f718 <SD_PowerON+0xe8>
 800f712:	693b      	ldr	r3, [r7, #16]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d0cc      	beq.n	800f6b2 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800f718:	68bb      	ldr	r3, [r7, #8]
 800f71a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f71e:	4293      	cmp	r3, r2
 800f720:	d902      	bls.n	800f728 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800f722:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f726:	e00b      	b.n	800f740 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	2200      	movs	r2, #0
 800f72c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800f72e:	697b      	ldr	r3, [r7, #20]
 800f730:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f734:	2b00      	cmp	r3, #0
 800f736:	d002      	beq.n	800f73e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	2201      	movs	r2, #1
 800f73c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800f73e:	2300      	movs	r3, #0
}
 800f740:	4618      	mov	r0, r3
 800f742:	3718      	adds	r7, #24
 800f744:	46bd      	mov	sp, r7
 800f746:	bd80      	pop	{r7, pc}
 800f748:	c1100000 	.word	0xc1100000

0800f74c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b08c      	sub	sp, #48	; 0x30
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
 800f754:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f756:	f7f4 fddf 	bl	8004318 <HAL_GetTick>
 800f75a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800f75c:	683b      	ldr	r3, [r7, #0]
 800f75e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	2100      	movs	r1, #0
 800f766:	4618      	mov	r0, r3
 800f768:	f003 febf 	bl	80134ea <SDMMC_GetResponse>
 800f76c:	4603      	mov	r3, r0
 800f76e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f772:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f776:	d102      	bne.n	800f77e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f778:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f77c:	e0b0      	b.n	800f8e0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	2140      	movs	r1, #64	; 0x40
 800f784:	4618      	mov	r0, r3
 800f786:	f003 feef 	bl	8013568 <SDMMC_CmdBlockLength>
 800f78a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f78c:	6a3b      	ldr	r3, [r7, #32]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d005      	beq.n	800f79e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800f79a:	6a3b      	ldr	r3, [r7, #32]
 800f79c:	e0a0      	b.n	800f8e0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681a      	ldr	r2, [r3, #0]
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7a6:	041b      	lsls	r3, r3, #16
 800f7a8:	4619      	mov	r1, r3
 800f7aa:	4610      	mov	r0, r2
 800f7ac:	f004 f829 	bl	8013802 <SDMMC_CmdAppCommand>
 800f7b0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f7b2:	6a3b      	ldr	r3, [r7, #32]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d005      	beq.n	800f7c4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800f7c0:	6a3b      	ldr	r3, [r7, #32]
 800f7c2:	e08d      	b.n	800f8e0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f7c4:	f04f 33ff 	mov.w	r3, #4294967295
 800f7c8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800f7ca:	2340      	movs	r3, #64	; 0x40
 800f7cc:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800f7ce:	2360      	movs	r3, #96	; 0x60
 800f7d0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f7d2:	2302      	movs	r3, #2
 800f7d4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f7da:	2301      	movs	r3, #1
 800f7dc:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	f107 0208 	add.w	r2, r7, #8
 800f7e6:	4611      	mov	r1, r2
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	f003 fe91 	bl	8013510 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	f004 f911 	bl	8013a1a <SDMMC_CmdStatusRegister>
 800f7f8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f7fa:	6a3b      	ldr	r3, [r7, #32]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d02b      	beq.n	800f858 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800f808:	6a3b      	ldr	r3, [r7, #32]
 800f80a:	e069      	b.n	800f8e0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f812:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f816:	2b00      	cmp	r3, #0
 800f818:	d013      	beq.n	800f842 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800f81a:	2300      	movs	r3, #0
 800f81c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f81e:	e00d      	b.n	800f83c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	4618      	mov	r0, r3
 800f826:	f003 fdeb 	bl	8013400 <SDMMC_ReadFIFO>
 800f82a:	4602      	mov	r2, r0
 800f82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f82e:	601a      	str	r2, [r3, #0]
        pData++;
 800f830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f832:	3304      	adds	r3, #4
 800f834:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800f836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f838:	3301      	adds	r3, #1
 800f83a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f83e:	2b07      	cmp	r3, #7
 800f840:	d9ee      	bls.n	800f820 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f842:	f7f4 fd69 	bl	8004318 <HAL_GetTick>
 800f846:	4602      	mov	r2, r0
 800f848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f84a:	1ad3      	subs	r3, r2, r3
 800f84c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f850:	d102      	bne.n	800f858 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f852:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f856:	e043      	b.n	800f8e0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f85e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800f862:	2b00      	cmp	r3, #0
 800f864:	d0d2      	beq.n	800f80c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f86c:	f003 0308 	and.w	r3, r3, #8
 800f870:	2b00      	cmp	r3, #0
 800f872:	d001      	beq.n	800f878 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f874:	2308      	movs	r3, #8
 800f876:	e033      	b.n	800f8e0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f87e:	f003 0302 	and.w	r3, r3, #2
 800f882:	2b00      	cmp	r3, #0
 800f884:	d001      	beq.n	800f88a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f886:	2302      	movs	r3, #2
 800f888:	e02a      	b.n	800f8e0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f890:	f003 0320 	and.w	r3, r3, #32
 800f894:	2b00      	cmp	r3, #0
 800f896:	d017      	beq.n	800f8c8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800f898:	2320      	movs	r3, #32
 800f89a:	e021      	b.n	800f8e0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	f003 fdad 	bl	8013400 <SDMMC_ReadFIFO>
 800f8a6:	4602      	mov	r2, r0
 800f8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8aa:	601a      	str	r2, [r3, #0]
    pData++;
 800f8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8ae:	3304      	adds	r3, #4
 800f8b0:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f8b2:	f7f4 fd31 	bl	8004318 <HAL_GetTick>
 800f8b6:	4602      	mov	r2, r0
 800f8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ba:	1ad3      	subs	r3, r2, r3
 800f8bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8c0:	d102      	bne.n	800f8c8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f8c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f8c6:	e00b      	b.n	800f8e0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d1e2      	bne.n	800f89c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	4a03      	ldr	r2, [pc, #12]	; (800f8e8 <SD_SendSDStatus+0x19c>)
 800f8dc:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800f8de:	2300      	movs	r3, #0
}
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	3730      	adds	r7, #48	; 0x30
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	bd80      	pop	{r7, pc}
 800f8e8:	18000f3a 	.word	0x18000f3a

0800f8ec <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b084      	sub	sp, #16
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
 800f8f4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800f8f6:	683b      	ldr	r3, [r7, #0]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d102      	bne.n	800f902 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800f8fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f900:	e018      	b.n	800f934 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	681a      	ldr	r2, [r3, #0]
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f90a:	041b      	lsls	r3, r3, #16
 800f90c:	4619      	mov	r1, r3
 800f90e:	4610      	mov	r0, r2
 800f910:	f004 f860 	bl	80139d4 <SDMMC_CmdSendStatus>
 800f914:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d001      	beq.n	800f920 <SD_SendStatus+0x34>
  {
    return errorstate;
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	e009      	b.n	800f934 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	2100      	movs	r1, #0
 800f926:	4618      	mov	r0, r3
 800f928:	f003 fddf 	bl	80134ea <SDMMC_GetResponse>
 800f92c:	4602      	mov	r2, r0
 800f92e:	683b      	ldr	r3, [r7, #0]
 800f930:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800f932:	2300      	movs	r3, #0
}
 800f934:	4618      	mov	r0, r3
 800f936:	3710      	adds	r7, #16
 800f938:	46bd      	mov	sp, r7
 800f93a:	bd80      	pop	{r7, pc}

0800f93c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800f93c:	b580      	push	{r7, lr}
 800f93e:	b086      	sub	sp, #24
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800f944:	2300      	movs	r3, #0
 800f946:	60fb      	str	r3, [r7, #12]
 800f948:	2300      	movs	r3, #0
 800f94a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	2100      	movs	r1, #0
 800f952:	4618      	mov	r0, r3
 800f954:	f003 fdc9 	bl	80134ea <SDMMC_GetResponse>
 800f958:	4603      	mov	r3, r0
 800f95a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f95e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f962:	d102      	bne.n	800f96a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f964:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f968:	e02f      	b.n	800f9ca <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f96a:	f107 030c 	add.w	r3, r7, #12
 800f96e:	4619      	mov	r1, r3
 800f970:	6878      	ldr	r0, [r7, #4]
 800f972:	f000 f879 	bl	800fa68 <SD_FindSCR>
 800f976:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f978:	697b      	ldr	r3, [r7, #20]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d001      	beq.n	800f982 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800f97e:	697b      	ldr	r3, [r7, #20]
 800f980:	e023      	b.n	800f9ca <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f982:	693b      	ldr	r3, [r7, #16]
 800f984:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d01c      	beq.n	800f9c6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	681a      	ldr	r2, [r3, #0]
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f994:	041b      	lsls	r3, r3, #16
 800f996:	4619      	mov	r1, r3
 800f998:	4610      	mov	r0, r2
 800f99a:	f003 ff32 	bl	8013802 <SDMMC_CmdAppCommand>
 800f99e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f9a0:	697b      	ldr	r3, [r7, #20]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d001      	beq.n	800f9aa <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800f9a6:	697b      	ldr	r3, [r7, #20]
 800f9a8:	e00f      	b.n	800f9ca <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	2102      	movs	r1, #2
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	f003 ff69 	bl	8013888 <SDMMC_CmdBusWidth>
 800f9b6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f9b8:	697b      	ldr	r3, [r7, #20]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d001      	beq.n	800f9c2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800f9be:	697b      	ldr	r3, [r7, #20]
 800f9c0:	e003      	b.n	800f9ca <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	e001      	b.n	800f9ca <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f9c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	3718      	adds	r7, #24
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bd80      	pop	{r7, pc}

0800f9d2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800f9d2:	b580      	push	{r7, lr}
 800f9d4:	b086      	sub	sp, #24
 800f9d6:	af00      	add	r7, sp, #0
 800f9d8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800f9da:	2300      	movs	r3, #0
 800f9dc:	60fb      	str	r3, [r7, #12]
 800f9de:	2300      	movs	r3, #0
 800f9e0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	2100      	movs	r1, #0
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	f003 fd7e 	bl	80134ea <SDMMC_GetResponse>
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f9f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f9f8:	d102      	bne.n	800fa00 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f9fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f9fe:	e02f      	b.n	800fa60 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800fa00:	f107 030c 	add.w	r3, r7, #12
 800fa04:	4619      	mov	r1, r3
 800fa06:	6878      	ldr	r0, [r7, #4]
 800fa08:	f000 f82e 	bl	800fa68 <SD_FindSCR>
 800fa0c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800fa0e:	697b      	ldr	r3, [r7, #20]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d001      	beq.n	800fa18 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800fa14:	697b      	ldr	r3, [r7, #20]
 800fa16:	e023      	b.n	800fa60 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800fa18:	693b      	ldr	r3, [r7, #16]
 800fa1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d01c      	beq.n	800fa5c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	681a      	ldr	r2, [r3, #0]
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa2a:	041b      	lsls	r3, r3, #16
 800fa2c:	4619      	mov	r1, r3
 800fa2e:	4610      	mov	r0, r2
 800fa30:	f003 fee7 	bl	8013802 <SDMMC_CmdAppCommand>
 800fa34:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800fa36:	697b      	ldr	r3, [r7, #20]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d001      	beq.n	800fa40 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800fa3c:	697b      	ldr	r3, [r7, #20]
 800fa3e:	e00f      	b.n	800fa60 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	2100      	movs	r1, #0
 800fa46:	4618      	mov	r0, r3
 800fa48:	f003 ff1e 	bl	8013888 <SDMMC_CmdBusWidth>
 800fa4c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800fa4e:	697b      	ldr	r3, [r7, #20]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d001      	beq.n	800fa58 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800fa54:	697b      	ldr	r3, [r7, #20]
 800fa56:	e003      	b.n	800fa60 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800fa58:	2300      	movs	r3, #0
 800fa5a:	e001      	b.n	800fa60 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800fa5c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800fa60:	4618      	mov	r0, r3
 800fa62:	3718      	adds	r7, #24
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}

0800fa68 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b08e      	sub	sp, #56	; 0x38
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
 800fa70:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800fa72:	f7f4 fc51 	bl	8004318 <HAL_GetTick>
 800fa76:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800fa78:	2300      	movs	r3, #0
 800fa7a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800fa7c:	2300      	movs	r3, #0
 800fa7e:	60bb      	str	r3, [r7, #8]
 800fa80:	2300      	movs	r3, #0
 800fa82:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800fa84:	683b      	ldr	r3, [r7, #0]
 800fa86:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	2108      	movs	r1, #8
 800fa8e:	4618      	mov	r0, r3
 800fa90:	f003 fd6a 	bl	8013568 <SDMMC_CmdBlockLength>
 800fa94:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800fa96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d001      	beq.n	800faa0 <SD_FindSCR+0x38>
  {
    return errorstate;
 800fa9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa9e:	e0ad      	b.n	800fbfc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	681a      	ldr	r2, [r3, #0]
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800faa8:	041b      	lsls	r3, r3, #16
 800faaa:	4619      	mov	r1, r3
 800faac:	4610      	mov	r0, r2
 800faae:	f003 fea8 	bl	8013802 <SDMMC_CmdAppCommand>
 800fab2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800fab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d001      	beq.n	800fabe <SD_FindSCR+0x56>
  {
    return errorstate;
 800faba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fabc:	e09e      	b.n	800fbfc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800fabe:	f04f 33ff 	mov.w	r3, #4294967295
 800fac2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800fac4:	2308      	movs	r3, #8
 800fac6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800fac8:	2330      	movs	r3, #48	; 0x30
 800faca:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800facc:	2302      	movs	r3, #2
 800face:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800fad0:	2300      	movs	r3, #0
 800fad2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800fad4:	2301      	movs	r3, #1
 800fad6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	f107 0210 	add.w	r2, r7, #16
 800fae0:	4611      	mov	r1, r2
 800fae2:	4618      	mov	r0, r3
 800fae4:	f003 fd14 	bl	8013510 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	4618      	mov	r0, r3
 800faee:	f003 feee 	bl	80138ce <SDMMC_CmdSendSCR>
 800faf2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800faf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d027      	beq.n	800fb4a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800fafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fafc:	e07e      	b.n	800fbfc <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d113      	bne.n	800fb34 <SD_FindSCR+0xcc>
 800fb0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d110      	bne.n	800fb34 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	4618      	mov	r0, r3
 800fb18:	f003 fc72 	bl	8013400 <SDMMC_ReadFIFO>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	4618      	mov	r0, r3
 800fb26:	f003 fc6b 	bl	8013400 <SDMMC_ReadFIFO>
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	60fb      	str	r3, [r7, #12]
      index++;
 800fb2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb30:	3301      	adds	r3, #1
 800fb32:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800fb34:	f7f4 fbf0 	bl	8004318 <HAL_GetTick>
 800fb38:	4602      	mov	r2, r0
 800fb3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb3c:	1ad3      	subs	r3, r2, r3
 800fb3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb42:	d102      	bne.n	800fb4a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800fb44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fb48:	e058      	b.n	800fbfc <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fb50:	f240 532a 	movw	r3, #1322	; 0x52a
 800fb54:	4013      	ands	r3, r2
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d0d1      	beq.n	800fafe <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb60:	f003 0308 	and.w	r3, r3, #8
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d005      	beq.n	800fb74 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	2208      	movs	r2, #8
 800fb6e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800fb70:	2308      	movs	r3, #8
 800fb72:	e043      	b.n	800fbfc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb7a:	f003 0302 	and.w	r3, r3, #2
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d005      	beq.n	800fb8e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	2202      	movs	r2, #2
 800fb88:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800fb8a:	2302      	movs	r3, #2
 800fb8c:	e036      	b.n	800fbfc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb94:	f003 0320 	and.w	r3, r3, #32
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d005      	beq.n	800fba8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	2220      	movs	r2, #32
 800fba2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800fba4:	2320      	movs	r3, #32
 800fba6:	e029      	b.n	800fbfc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	4a15      	ldr	r2, [pc, #84]	; (800fc04 <SD_FindSCR+0x19c>)
 800fbae:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	061a      	lsls	r2, r3, #24
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	021b      	lsls	r3, r3, #8
 800fbb8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fbbc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	0a1b      	lsrs	r3, r3, #8
 800fbc2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800fbc6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	0e1b      	lsrs	r3, r3, #24
 800fbcc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800fbce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbd0:	601a      	str	r2, [r3, #0]
    scr++;
 800fbd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbd4:	3304      	adds	r3, #4
 800fbd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800fbd8:	68bb      	ldr	r3, [r7, #8]
 800fbda:	061a      	lsls	r2, r3, #24
 800fbdc:	68bb      	ldr	r3, [r7, #8]
 800fbde:	021b      	lsls	r3, r3, #8
 800fbe0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fbe4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800fbe6:	68bb      	ldr	r3, [r7, #8]
 800fbe8:	0a1b      	lsrs	r3, r3, #8
 800fbea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800fbee:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800fbf0:	68bb      	ldr	r3, [r7, #8]
 800fbf2:	0e1b      	lsrs	r3, r3, #24
 800fbf4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800fbf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbf8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800fbfa:	2300      	movs	r3, #0
}
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	3738      	adds	r7, #56	; 0x38
 800fc00:	46bd      	mov	sp, r7
 800fc02:	bd80      	pop	{r7, pc}
 800fc04:	18000f3a 	.word	0x18000f3a

0800fc08 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b086      	sub	sp, #24
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc14:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc1a:	2b1f      	cmp	r3, #31
 800fc1c:	d936      	bls.n	800fc8c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800fc1e:	2300      	movs	r3, #0
 800fc20:	617b      	str	r3, [r7, #20]
 800fc22:	e027      	b.n	800fc74 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	4618      	mov	r0, r3
 800fc2a:	f003 fbe9 	bl	8013400 <SDMMC_ReadFIFO>
 800fc2e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	b2da      	uxtb	r2, r3
 800fc34:	693b      	ldr	r3, [r7, #16]
 800fc36:	701a      	strb	r2, [r3, #0]
      tmp++;
 800fc38:	693b      	ldr	r3, [r7, #16]
 800fc3a:	3301      	adds	r3, #1
 800fc3c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	0a1b      	lsrs	r3, r3, #8
 800fc42:	b2da      	uxtb	r2, r3
 800fc44:	693b      	ldr	r3, [r7, #16]
 800fc46:	701a      	strb	r2, [r3, #0]
      tmp++;
 800fc48:	693b      	ldr	r3, [r7, #16]
 800fc4a:	3301      	adds	r3, #1
 800fc4c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	0c1b      	lsrs	r3, r3, #16
 800fc52:	b2da      	uxtb	r2, r3
 800fc54:	693b      	ldr	r3, [r7, #16]
 800fc56:	701a      	strb	r2, [r3, #0]
      tmp++;
 800fc58:	693b      	ldr	r3, [r7, #16]
 800fc5a:	3301      	adds	r3, #1
 800fc5c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	0e1b      	lsrs	r3, r3, #24
 800fc62:	b2da      	uxtb	r2, r3
 800fc64:	693b      	ldr	r3, [r7, #16]
 800fc66:	701a      	strb	r2, [r3, #0]
      tmp++;
 800fc68:	693b      	ldr	r3, [r7, #16]
 800fc6a:	3301      	adds	r3, #1
 800fc6c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800fc6e:	697b      	ldr	r3, [r7, #20]
 800fc70:	3301      	adds	r3, #1
 800fc72:	617b      	str	r3, [r7, #20]
 800fc74:	697b      	ldr	r3, [r7, #20]
 800fc76:	2b07      	cmp	r3, #7
 800fc78:	d9d4      	bls.n	800fc24 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	693a      	ldr	r2, [r7, #16]
 800fc7e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc84:	f1a3 0220 	sub.w	r2, r3, #32
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800fc8c:	bf00      	nop
 800fc8e:	3718      	adds	r7, #24
 800fc90:	46bd      	mov	sp, r7
 800fc92:	bd80      	pop	{r7, pc}

0800fc94 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b086      	sub	sp, #24
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	69db      	ldr	r3, [r3, #28]
 800fca0:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	6a1b      	ldr	r3, [r3, #32]
 800fca6:	2b1f      	cmp	r3, #31
 800fca8:	d93a      	bls.n	800fd20 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800fcaa:	2300      	movs	r3, #0
 800fcac:	617b      	str	r3, [r7, #20]
 800fcae:	e02b      	b.n	800fd08 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800fcb0:	693b      	ldr	r3, [r7, #16]
 800fcb2:	781b      	ldrb	r3, [r3, #0]
 800fcb4:	60fb      	str	r3, [r7, #12]
      tmp++;
 800fcb6:	693b      	ldr	r3, [r7, #16]
 800fcb8:	3301      	adds	r3, #1
 800fcba:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800fcbc:	693b      	ldr	r3, [r7, #16]
 800fcbe:	781b      	ldrb	r3, [r3, #0]
 800fcc0:	021a      	lsls	r2, r3, #8
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	4313      	orrs	r3, r2
 800fcc6:	60fb      	str	r3, [r7, #12]
      tmp++;
 800fcc8:	693b      	ldr	r3, [r7, #16]
 800fcca:	3301      	adds	r3, #1
 800fccc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800fcce:	693b      	ldr	r3, [r7, #16]
 800fcd0:	781b      	ldrb	r3, [r3, #0]
 800fcd2:	041a      	lsls	r2, r3, #16
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	4313      	orrs	r3, r2
 800fcd8:	60fb      	str	r3, [r7, #12]
      tmp++;
 800fcda:	693b      	ldr	r3, [r7, #16]
 800fcdc:	3301      	adds	r3, #1
 800fcde:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800fce0:	693b      	ldr	r3, [r7, #16]
 800fce2:	781b      	ldrb	r3, [r3, #0]
 800fce4:	061a      	lsls	r2, r3, #24
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	4313      	orrs	r3, r2
 800fcea:	60fb      	str	r3, [r7, #12]
      tmp++;
 800fcec:	693b      	ldr	r3, [r7, #16]
 800fcee:	3301      	adds	r3, #1
 800fcf0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	f107 020c 	add.w	r2, r7, #12
 800fcfa:	4611      	mov	r1, r2
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f003 fb8c 	bl	801341a <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800fd02:	697b      	ldr	r3, [r7, #20]
 800fd04:	3301      	adds	r3, #1
 800fd06:	617b      	str	r3, [r7, #20]
 800fd08:	697b      	ldr	r3, [r7, #20]
 800fd0a:	2b07      	cmp	r3, #7
 800fd0c:	d9d0      	bls.n	800fcb0 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	693a      	ldr	r2, [r7, #16]
 800fd12:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	6a1b      	ldr	r3, [r3, #32]
 800fd18:	f1a3 0220 	sub.w	r2, r3, #32
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	621a      	str	r2, [r3, #32]
  }
}
 800fd20:	bf00      	nop
 800fd22:	3718      	adds	r7, #24
 800fd24:	46bd      	mov	sp, r7
 800fd26:	bd80      	pop	{r7, pc}

0800fd28 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800fd28:	b480      	push	{r7}
 800fd2a:	b083      	sub	sp, #12
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800fd30:	bf00      	nop
 800fd32:	370c      	adds	r7, #12
 800fd34:	46bd      	mov	sp, r7
 800fd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3a:	4770      	bx	lr

0800fd3c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800fd3c:	b480      	push	{r7}
 800fd3e:	b083      	sub	sp, #12
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800fd44:	bf00      	nop
 800fd46:	370c      	adds	r7, #12
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4e:	4770      	bx	lr

0800fd50 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800fd50:	b480      	push	{r7}
 800fd52:	b083      	sub	sp, #12
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800fd58:	bf00      	nop
 800fd5a:	370c      	adds	r7, #12
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd62:	4770      	bx	lr

0800fd64 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800fd64:	b480      	push	{r7}
 800fd66:	b083      	sub	sp, #12
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800fd6c:	bf00      	nop
 800fd6e:	370c      	adds	r7, #12
 800fd70:	46bd      	mov	sp, r7
 800fd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd76:	4770      	bx	lr

0800fd78 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b084      	sub	sp, #16
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d101      	bne.n	800fd8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800fd86:	2301      	movs	r3, #1
 800fd88:	e10f      	b.n	800ffaa <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	4a87      	ldr	r2, [pc, #540]	; (800ffb4 <HAL_SPI_Init+0x23c>)
 800fd96:	4293      	cmp	r3, r2
 800fd98:	d00f      	beq.n	800fdba <HAL_SPI_Init+0x42>
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	4a86      	ldr	r2, [pc, #536]	; (800ffb8 <HAL_SPI_Init+0x240>)
 800fda0:	4293      	cmp	r3, r2
 800fda2:	d00a      	beq.n	800fdba <HAL_SPI_Init+0x42>
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	4a84      	ldr	r2, [pc, #528]	; (800ffbc <HAL_SPI_Init+0x244>)
 800fdaa:	4293      	cmp	r3, r2
 800fdac:	d005      	beq.n	800fdba <HAL_SPI_Init+0x42>
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	68db      	ldr	r3, [r3, #12]
 800fdb2:	2b0f      	cmp	r3, #15
 800fdb4:	d901      	bls.n	800fdba <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800fdb6:	2301      	movs	r3, #1
 800fdb8:	e0f7      	b.n	800ffaa <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	f000 fd5a 	bl	8010874 <SPI_GetPacketSize>
 800fdc0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	4a7b      	ldr	r2, [pc, #492]	; (800ffb4 <HAL_SPI_Init+0x23c>)
 800fdc8:	4293      	cmp	r3, r2
 800fdca:	d00c      	beq.n	800fde6 <HAL_SPI_Init+0x6e>
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	4a79      	ldr	r2, [pc, #484]	; (800ffb8 <HAL_SPI_Init+0x240>)
 800fdd2:	4293      	cmp	r3, r2
 800fdd4:	d007      	beq.n	800fde6 <HAL_SPI_Init+0x6e>
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	4a78      	ldr	r2, [pc, #480]	; (800ffbc <HAL_SPI_Init+0x244>)
 800fddc:	4293      	cmp	r3, r2
 800fdde:	d002      	beq.n	800fde6 <HAL_SPI_Init+0x6e>
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	2b08      	cmp	r3, #8
 800fde4:	d811      	bhi.n	800fe0a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800fdea:	4a72      	ldr	r2, [pc, #456]	; (800ffb4 <HAL_SPI_Init+0x23c>)
 800fdec:	4293      	cmp	r3, r2
 800fdee:	d009      	beq.n	800fe04 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	4a70      	ldr	r2, [pc, #448]	; (800ffb8 <HAL_SPI_Init+0x240>)
 800fdf6:	4293      	cmp	r3, r2
 800fdf8:	d004      	beq.n	800fe04 <HAL_SPI_Init+0x8c>
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	4a6f      	ldr	r2, [pc, #444]	; (800ffbc <HAL_SPI_Init+0x244>)
 800fe00:	4293      	cmp	r3, r2
 800fe02:	d104      	bne.n	800fe0e <HAL_SPI_Init+0x96>
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	2b10      	cmp	r3, #16
 800fe08:	d901      	bls.n	800fe0e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800fe0a:	2301      	movs	r3, #1
 800fe0c:	e0cd      	b.n	800ffaa <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800fe14:	b2db      	uxtb	r3, r3
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d106      	bne.n	800fe28 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800fe22:	6878      	ldr	r0, [r7, #4]
 800fe24:	f7f3 fbe8 	bl	80035f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	2202      	movs	r2, #2
 800fe2c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	681a      	ldr	r2, [r3, #0]
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	f022 0201 	bic.w	r2, r2, #1
 800fe3e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	689b      	ldr	r3, [r3, #8]
 800fe46:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800fe4a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	699b      	ldr	r3, [r3, #24]
 800fe50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800fe54:	d119      	bne.n	800fe8a <HAL_SPI_Init+0x112>
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	685b      	ldr	r3, [r3, #4]
 800fe5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fe5e:	d103      	bne.n	800fe68 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d008      	beq.n	800fe7a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d10c      	bne.n	800fe8a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800fe74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fe78:	d107      	bne.n	800fe8a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	681a      	ldr	r2, [r3, #0]
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fe88:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	685b      	ldr	r3, [r3, #4]
 800fe8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d00f      	beq.n	800feb6 <HAL_SPI_Init+0x13e>
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	68db      	ldr	r3, [r3, #12]
 800fe9a:	2b06      	cmp	r3, #6
 800fe9c:	d90b      	bls.n	800feb6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	430a      	orrs	r2, r1
 800feb2:	601a      	str	r2, [r3, #0]
 800feb4:	e007      	b.n	800fec6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	681a      	ldr	r2, [r3, #0]
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fec4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	69da      	ldr	r2, [r3, #28]
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fece:	431a      	orrs	r2, r3
 800fed0:	68bb      	ldr	r3, [r7, #8]
 800fed2:	431a      	orrs	r2, r3
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fed8:	ea42 0103 	orr.w	r1, r2, r3
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	68da      	ldr	r2, [r3, #12]
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	430a      	orrs	r2, r1
 800fee6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fef0:	431a      	orrs	r2, r3
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fef6:	431a      	orrs	r2, r3
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	699b      	ldr	r3, [r3, #24]
 800fefc:	431a      	orrs	r2, r3
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	691b      	ldr	r3, [r3, #16]
 800ff02:	431a      	orrs	r2, r3
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	695b      	ldr	r3, [r3, #20]
 800ff08:	431a      	orrs	r2, r3
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	6a1b      	ldr	r3, [r3, #32]
 800ff0e:	431a      	orrs	r2, r3
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	685b      	ldr	r3, [r3, #4]
 800ff14:	431a      	orrs	r2, r3
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ff1a:	431a      	orrs	r2, r3
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	689b      	ldr	r3, [r3, #8]
 800ff20:	431a      	orrs	r2, r3
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ff26:	ea42 0103 	orr.w	r1, r2, r3
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	430a      	orrs	r2, r1
 800ff34:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	685b      	ldr	r3, [r3, #4]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d113      	bne.n	800ff66 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	689b      	ldr	r3, [r3, #8]
 800ff44:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ff50:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	689b      	ldr	r3, [r3, #8]
 800ff58:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ff64:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	f022 0201 	bic.w	r2, r2, #1
 800ff74:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	685b      	ldr	r3, [r3, #4]
 800ff7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d00a      	beq.n	800ff98 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	68db      	ldr	r3, [r3, #12]
 800ff88:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	430a      	orrs	r2, r1
 800ff96:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	2201      	movs	r2, #1
 800ffa4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800ffa8:	2300      	movs	r3, #0
}
 800ffaa:	4618      	mov	r0, r3
 800ffac:	3710      	adds	r7, #16
 800ffae:	46bd      	mov	sp, r7
 800ffb0:	bd80      	pop	{r7, pc}
 800ffb2:	bf00      	nop
 800ffb4:	40013000 	.word	0x40013000
 800ffb8:	40003800 	.word	0x40003800
 800ffbc:	40003c00 	.word	0x40003c00

0800ffc0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b08a      	sub	sp, #40	; 0x28
 800ffc4:	af02      	add	r7, sp, #8
 800ffc6:	60f8      	str	r0, [r7, #12]
 800ffc8:	60b9      	str	r1, [r7, #8]
 800ffca:	603b      	str	r3, [r7, #0]
 800ffcc:	4613      	mov	r3, r2
 800ffce:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	3320      	adds	r3, #32
 800ffd6:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ffd8:	2300      	movs	r3, #0
 800ffda:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ffe2:	2b01      	cmp	r3, #1
 800ffe4:	d101      	bne.n	800ffea <HAL_SPI_Transmit+0x2a>
 800ffe6:	2302      	movs	r3, #2
 800ffe8:	e1e1      	b.n	80103ae <HAL_SPI_Transmit+0x3ee>
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	2201      	movs	r2, #1
 800ffee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fff2:	f7f4 f991 	bl	8004318 <HAL_GetTick>
 800fff6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800fffe:	b2db      	uxtb	r3, r3
 8010000:	2b01      	cmp	r3, #1
 8010002:	d007      	beq.n	8010014 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8010004:	2302      	movs	r3, #2
 8010006:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	2200      	movs	r2, #0
 801000c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8010010:	7efb      	ldrb	r3, [r7, #27]
 8010012:	e1cc      	b.n	80103ae <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 8010014:	68bb      	ldr	r3, [r7, #8]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d002      	beq.n	8010020 <HAL_SPI_Transmit+0x60>
 801001a:	88fb      	ldrh	r3, [r7, #6]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d107      	bne.n	8010030 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8010020:	2301      	movs	r3, #1
 8010022:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	2200      	movs	r2, #0
 8010028:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 801002c:	7efb      	ldrb	r3, [r7, #27]
 801002e:	e1be      	b.n	80103ae <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	2203      	movs	r2, #3
 8010034:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	2200      	movs	r2, #0
 801003c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	68ba      	ldr	r2, [r7, #8]
 8010044:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	88fa      	ldrh	r2, [r7, #6]
 801004a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	88fa      	ldrh	r2, [r7, #6]
 8010052:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	2200      	movs	r2, #0
 801005a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	2200      	movs	r2, #0
 8010060:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	2200      	movs	r2, #0
 8010068:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	2200      	movs	r2, #0
 8010070:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	2200      	movs	r2, #0
 8010076:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	689b      	ldr	r3, [r3, #8]
 801007c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8010080:	d108      	bne.n	8010094 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	681a      	ldr	r2, [r3, #0]
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010090:	601a      	str	r2, [r3, #0]
 8010092:	e009      	b.n	80100a8 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	68db      	ldr	r3, [r3, #12]
 801009a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80100a6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	685a      	ldr	r2, [r3, #4]
 80100ae:	4b96      	ldr	r3, [pc, #600]	; (8010308 <HAL_SPI_Transmit+0x348>)
 80100b0:	4013      	ands	r3, r2
 80100b2:	88f9      	ldrh	r1, [r7, #6]
 80100b4:	68fa      	ldr	r2, [r7, #12]
 80100b6:	6812      	ldr	r2, [r2, #0]
 80100b8:	430b      	orrs	r3, r1
 80100ba:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	681a      	ldr	r2, [r3, #0]
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	f042 0201 	orr.w	r2, r2, #1
 80100ca:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	685b      	ldr	r3, [r3, #4]
 80100d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80100d4:	d107      	bne.n	80100e6 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	681a      	ldr	r2, [r3, #0]
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80100e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	68db      	ldr	r3, [r3, #12]
 80100ea:	2b0f      	cmp	r3, #15
 80100ec:	d947      	bls.n	801017e <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80100ee:	e03f      	b.n	8010170 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	695b      	ldr	r3, [r3, #20]
 80100f6:	f003 0302 	and.w	r3, r3, #2
 80100fa:	2b02      	cmp	r3, #2
 80100fc:	d114      	bne.n	8010128 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	6812      	ldr	r2, [r2, #0]
 8010108:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801010e:	1d1a      	adds	r2, r3, #4
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801011a:	b29b      	uxth	r3, r3
 801011c:	3b01      	subs	r3, #1
 801011e:	b29a      	uxth	r2, r3
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8010126:	e023      	b.n	8010170 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010128:	f7f4 f8f6 	bl	8004318 <HAL_GetTick>
 801012c:	4602      	mov	r2, r0
 801012e:	697b      	ldr	r3, [r7, #20]
 8010130:	1ad3      	subs	r3, r2, r3
 8010132:	683a      	ldr	r2, [r7, #0]
 8010134:	429a      	cmp	r2, r3
 8010136:	d803      	bhi.n	8010140 <HAL_SPI_Transmit+0x180>
 8010138:	683b      	ldr	r3, [r7, #0]
 801013a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801013e:	d102      	bne.n	8010146 <HAL_SPI_Transmit+0x186>
 8010140:	683b      	ldr	r3, [r7, #0]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d114      	bne.n	8010170 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010146:	68f8      	ldr	r0, [r7, #12]
 8010148:	f000 fac6 	bl	80106d8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	2200      	movs	r2, #0
 8010150:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801015a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	2201      	movs	r2, #1
 8010168:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 801016c:	2303      	movs	r3, #3
 801016e:	e11e      	b.n	80103ae <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010176:	b29b      	uxth	r3, r3
 8010178:	2b00      	cmp	r3, #0
 801017a:	d1b9      	bne.n	80100f0 <HAL_SPI_Transmit+0x130>
 801017c:	e0f1      	b.n	8010362 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	68db      	ldr	r3, [r3, #12]
 8010182:	2b07      	cmp	r3, #7
 8010184:	f240 80e6 	bls.w	8010354 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8010188:	e05d      	b.n	8010246 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	695b      	ldr	r3, [r3, #20]
 8010190:	f003 0302 	and.w	r3, r3, #2
 8010194:	2b02      	cmp	r3, #2
 8010196:	d132      	bne.n	80101fe <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801019e:	b29b      	uxth	r3, r3
 80101a0:	2b01      	cmp	r3, #1
 80101a2:	d918      	bls.n	80101d6 <HAL_SPI_Transmit+0x216>
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d014      	beq.n	80101d6 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	6812      	ldr	r2, [r2, #0]
 80101b6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80101bc:	1d1a      	adds	r2, r3, #4
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80101c8:	b29b      	uxth	r3, r3
 80101ca:	3b02      	subs	r3, #2
 80101cc:	b29a      	uxth	r2, r3
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80101d4:	e037      	b.n	8010246 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80101da:	881a      	ldrh	r2, [r3, #0]
 80101dc:	69fb      	ldr	r3, [r7, #28]
 80101de:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80101e4:	1c9a      	adds	r2, r3, #2
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80101f0:	b29b      	uxth	r3, r3
 80101f2:	3b01      	subs	r3, #1
 80101f4:	b29a      	uxth	r2, r3
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80101fc:	e023      	b.n	8010246 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80101fe:	f7f4 f88b 	bl	8004318 <HAL_GetTick>
 8010202:	4602      	mov	r2, r0
 8010204:	697b      	ldr	r3, [r7, #20]
 8010206:	1ad3      	subs	r3, r2, r3
 8010208:	683a      	ldr	r2, [r7, #0]
 801020a:	429a      	cmp	r2, r3
 801020c:	d803      	bhi.n	8010216 <HAL_SPI_Transmit+0x256>
 801020e:	683b      	ldr	r3, [r7, #0]
 8010210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010214:	d102      	bne.n	801021c <HAL_SPI_Transmit+0x25c>
 8010216:	683b      	ldr	r3, [r7, #0]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d114      	bne.n	8010246 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801021c:	68f8      	ldr	r0, [r7, #12]
 801021e:	f000 fa5b 	bl	80106d8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	2200      	movs	r2, #0
 8010226:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010230:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	2201      	movs	r2, #1
 801023e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010242:	2303      	movs	r3, #3
 8010244:	e0b3      	b.n	80103ae <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801024c:	b29b      	uxth	r3, r3
 801024e:	2b00      	cmp	r3, #0
 8010250:	d19b      	bne.n	801018a <HAL_SPI_Transmit+0x1ca>
 8010252:	e086      	b.n	8010362 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	695b      	ldr	r3, [r3, #20]
 801025a:	f003 0302 	and.w	r3, r3, #2
 801025e:	2b02      	cmp	r3, #2
 8010260:	d154      	bne.n	801030c <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010268:	b29b      	uxth	r3, r3
 801026a:	2b03      	cmp	r3, #3
 801026c:	d918      	bls.n	80102a0 <HAL_SPI_Transmit+0x2e0>
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010272:	2b40      	cmp	r3, #64	; 0x40
 8010274:	d914      	bls.n	80102a0 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	6812      	ldr	r2, [r2, #0]
 8010280:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010286:	1d1a      	adds	r2, r3, #4
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010292:	b29b      	uxth	r3, r3
 8010294:	3b04      	subs	r3, #4
 8010296:	b29a      	uxth	r2, r3
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 801029e:	e059      	b.n	8010354 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80102a6:	b29b      	uxth	r3, r3
 80102a8:	2b01      	cmp	r3, #1
 80102aa:	d917      	bls.n	80102dc <HAL_SPI_Transmit+0x31c>
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d013      	beq.n	80102dc <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80102b8:	881a      	ldrh	r2, [r3, #0]
 80102ba:	69fb      	ldr	r3, [r7, #28]
 80102bc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80102c2:	1c9a      	adds	r2, r3, #2
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80102ce:	b29b      	uxth	r3, r3
 80102d0:	3b02      	subs	r3, #2
 80102d2:	b29a      	uxth	r2, r3
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80102da:	e03b      	b.n	8010354 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	3320      	adds	r3, #32
 80102e6:	7812      	ldrb	r2, [r2, #0]
 80102e8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80102ee:	1c5a      	adds	r2, r3, #1
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80102fa:	b29b      	uxth	r3, r3
 80102fc:	3b01      	subs	r3, #1
 80102fe:	b29a      	uxth	r2, r3
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8010306:	e025      	b.n	8010354 <HAL_SPI_Transmit+0x394>
 8010308:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801030c:	f7f4 f804 	bl	8004318 <HAL_GetTick>
 8010310:	4602      	mov	r2, r0
 8010312:	697b      	ldr	r3, [r7, #20]
 8010314:	1ad3      	subs	r3, r2, r3
 8010316:	683a      	ldr	r2, [r7, #0]
 8010318:	429a      	cmp	r2, r3
 801031a:	d803      	bhi.n	8010324 <HAL_SPI_Transmit+0x364>
 801031c:	683b      	ldr	r3, [r7, #0]
 801031e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010322:	d102      	bne.n	801032a <HAL_SPI_Transmit+0x36a>
 8010324:	683b      	ldr	r3, [r7, #0]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d114      	bne.n	8010354 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801032a:	68f8      	ldr	r0, [r7, #12]
 801032c:	f000 f9d4 	bl	80106d8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	2200      	movs	r2, #0
 8010334:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801033e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	2201      	movs	r2, #1
 801034c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010350:	2303      	movs	r3, #3
 8010352:	e02c      	b.n	80103ae <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801035a:	b29b      	uxth	r3, r3
 801035c:	2b00      	cmp	r3, #0
 801035e:	f47f af79 	bne.w	8010254 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8010362:	697b      	ldr	r3, [r7, #20]
 8010364:	9300      	str	r3, [sp, #0]
 8010366:	683b      	ldr	r3, [r7, #0]
 8010368:	2200      	movs	r2, #0
 801036a:	2108      	movs	r1, #8
 801036c:	68f8      	ldr	r0, [r7, #12]
 801036e:	f000 fa53 	bl	8010818 <SPI_WaitOnFlagUntilTimeout>
 8010372:	4603      	mov	r3, r0
 8010374:	2b00      	cmp	r3, #0
 8010376:	d007      	beq.n	8010388 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801037e:	f043 0220 	orr.w	r2, r3, #32
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010388:	68f8      	ldr	r0, [r7, #12]
 801038a:	f000 f9a5 	bl	80106d8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	2200      	movs	r2, #0
 8010392:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	2201      	movs	r2, #1
 801039a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d001      	beq.n	80103ac <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 80103a8:	2301      	movs	r3, #1
 80103aa:	e000      	b.n	80103ae <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 80103ac:	7efb      	ldrb	r3, [r7, #27]
}
 80103ae:	4618      	mov	r0, r3
 80103b0:	3720      	adds	r7, #32
 80103b2:	46bd      	mov	sp, r7
 80103b4:	bd80      	pop	{r7, pc}
 80103b6:	bf00      	nop

080103b8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b088      	sub	sp, #32
 80103bc:	af00      	add	r7, sp, #0
 80103be:	60f8      	str	r0, [r7, #12]
 80103c0:	60b9      	str	r1, [r7, #8]
 80103c2:	603b      	str	r3, [r7, #0]
 80103c4:	4613      	mov	r3, r2
 80103c6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80103c8:	2300      	movs	r3, #0
 80103ca:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	3330      	adds	r3, #48	; 0x30
 80103d2:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80103da:	2b01      	cmp	r3, #1
 80103dc:	d101      	bne.n	80103e2 <HAL_SPI_Receive+0x2a>
 80103de:	2302      	movs	r3, #2
 80103e0:	e173      	b.n	80106ca <HAL_SPI_Receive+0x312>
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	2201      	movs	r2, #1
 80103e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80103ea:	f7f3 ff95 	bl	8004318 <HAL_GetTick>
 80103ee:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80103f6:	b2db      	uxtb	r3, r3
 80103f8:	2b01      	cmp	r3, #1
 80103fa:	d007      	beq.n	801040c <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 80103fc:	2302      	movs	r3, #2
 80103fe:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	2200      	movs	r2, #0
 8010404:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8010408:	7ffb      	ldrb	r3, [r7, #31]
 801040a:	e15e      	b.n	80106ca <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 801040c:	68bb      	ldr	r3, [r7, #8]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d002      	beq.n	8010418 <HAL_SPI_Receive+0x60>
 8010412:	88fb      	ldrh	r3, [r7, #6]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d107      	bne.n	8010428 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 8010418:	2301      	movs	r3, #1
 801041a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	2200      	movs	r2, #0
 8010420:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8010424:	7ffb      	ldrb	r3, [r7, #31]
 8010426:	e150      	b.n	80106ca <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	2204      	movs	r2, #4
 801042c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	2200      	movs	r2, #0
 8010434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	68ba      	ldr	r2, [r7, #8]
 801043c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	88fa      	ldrh	r2, [r7, #6]
 8010442:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	88fa      	ldrh	r2, [r7, #6]
 801044a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	2200      	movs	r2, #0
 8010452:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	2200      	movs	r2, #0
 8010458:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	2200      	movs	r2, #0
 8010460:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	2200      	movs	r2, #0
 8010468:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	2200      	movs	r2, #0
 801046e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	689b      	ldr	r3, [r3, #8]
 8010474:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8010478:	d108      	bne.n	801048c <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	681a      	ldr	r2, [r3, #0]
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010488:	601a      	str	r2, [r3, #0]
 801048a:	e009      	b.n	80104a0 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	68db      	ldr	r3, [r3, #12]
 8010492:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 801049e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	685a      	ldr	r2, [r3, #4]
 80104a6:	4b8b      	ldr	r3, [pc, #556]	; (80106d4 <HAL_SPI_Receive+0x31c>)
 80104a8:	4013      	ands	r3, r2
 80104aa:	88f9      	ldrh	r1, [r7, #6]
 80104ac:	68fa      	ldr	r2, [r7, #12]
 80104ae:	6812      	ldr	r2, [r2, #0]
 80104b0:	430b      	orrs	r3, r1
 80104b2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	681a      	ldr	r2, [r3, #0]
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	f042 0201 	orr.w	r2, r2, #1
 80104c2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	685b      	ldr	r3, [r3, #4]
 80104c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80104cc:	d107      	bne.n	80104de <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	681a      	ldr	r2, [r3, #0]
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80104dc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	68db      	ldr	r3, [r3, #12]
 80104e2:	2b0f      	cmp	r3, #15
 80104e4:	d948      	bls.n	8010578 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80104e6:	e040      	b.n	801056a <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	695a      	ldr	r2, [r3, #20]
 80104ee:	f248 0308 	movw	r3, #32776	; 0x8008
 80104f2:	4013      	ands	r3, r2
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d014      	beq.n	8010522 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	681a      	ldr	r2, [r3, #0]
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010500:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8010502:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010508:	1d1a      	adds	r2, r3, #4
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010514:	b29b      	uxth	r3, r3
 8010516:	3b01      	subs	r3, #1
 8010518:	b29a      	uxth	r2, r3
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010520:	e023      	b.n	801056a <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010522:	f7f3 fef9 	bl	8004318 <HAL_GetTick>
 8010526:	4602      	mov	r2, r0
 8010528:	697b      	ldr	r3, [r7, #20]
 801052a:	1ad3      	subs	r3, r2, r3
 801052c:	683a      	ldr	r2, [r7, #0]
 801052e:	429a      	cmp	r2, r3
 8010530:	d803      	bhi.n	801053a <HAL_SPI_Receive+0x182>
 8010532:	683b      	ldr	r3, [r7, #0]
 8010534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010538:	d102      	bne.n	8010540 <HAL_SPI_Receive+0x188>
 801053a:	683b      	ldr	r3, [r7, #0]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d114      	bne.n	801056a <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010540:	68f8      	ldr	r0, [r7, #12]
 8010542:	f000 f8c9 	bl	80106d8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	2200      	movs	r2, #0
 801054a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010554:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	2201      	movs	r2, #1
 8010562:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010566:	2303      	movs	r3, #3
 8010568:	e0af      	b.n	80106ca <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010570:	b29b      	uxth	r3, r3
 8010572:	2b00      	cmp	r3, #0
 8010574:	d1b8      	bne.n	80104e8 <HAL_SPI_Receive+0x130>
 8010576:	e095      	b.n	80106a4 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	68db      	ldr	r3, [r3, #12]
 801057c:	2b07      	cmp	r3, #7
 801057e:	f240 808b 	bls.w	8010698 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8010582:	e03f      	b.n	8010604 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	695b      	ldr	r3, [r3, #20]
 801058a:	f003 0301 	and.w	r3, r3, #1
 801058e:	2b01      	cmp	r3, #1
 8010590:	d114      	bne.n	80105bc <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010596:	69ba      	ldr	r2, [r7, #24]
 8010598:	8812      	ldrh	r2, [r2, #0]
 801059a:	b292      	uxth	r2, r2
 801059c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80105a2:	1c9a      	adds	r2, r3, #2
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80105ae:	b29b      	uxth	r3, r3
 80105b0:	3b01      	subs	r3, #1
 80105b2:	b29a      	uxth	r2, r3
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80105ba:	e023      	b.n	8010604 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80105bc:	f7f3 feac 	bl	8004318 <HAL_GetTick>
 80105c0:	4602      	mov	r2, r0
 80105c2:	697b      	ldr	r3, [r7, #20]
 80105c4:	1ad3      	subs	r3, r2, r3
 80105c6:	683a      	ldr	r2, [r7, #0]
 80105c8:	429a      	cmp	r2, r3
 80105ca:	d803      	bhi.n	80105d4 <HAL_SPI_Receive+0x21c>
 80105cc:	683b      	ldr	r3, [r7, #0]
 80105ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105d2:	d102      	bne.n	80105da <HAL_SPI_Receive+0x222>
 80105d4:	683b      	ldr	r3, [r7, #0]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d114      	bne.n	8010604 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80105da:	68f8      	ldr	r0, [r7, #12]
 80105dc:	f000 f87c 	bl	80106d8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	2200      	movs	r2, #0
 80105e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80105ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	2201      	movs	r2, #1
 80105fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010600:	2303      	movs	r3, #3
 8010602:	e062      	b.n	80106ca <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801060a:	b29b      	uxth	r3, r3
 801060c:	2b00      	cmp	r3, #0
 801060e:	d1b9      	bne.n	8010584 <HAL_SPI_Receive+0x1cc>
 8010610:	e048      	b.n	80106a4 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	695b      	ldr	r3, [r3, #20]
 8010618:	f003 0301 	and.w	r3, r3, #1
 801061c:	2b01      	cmp	r3, #1
 801061e:	d117      	bne.n	8010650 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801062c:	7812      	ldrb	r2, [r2, #0]
 801062e:	b2d2      	uxtb	r2, r2
 8010630:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010636:	1c5a      	adds	r2, r3, #1
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010642:	b29b      	uxth	r3, r3
 8010644:	3b01      	subs	r3, #1
 8010646:	b29a      	uxth	r2, r3
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801064e:	e023      	b.n	8010698 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010650:	f7f3 fe62 	bl	8004318 <HAL_GetTick>
 8010654:	4602      	mov	r2, r0
 8010656:	697b      	ldr	r3, [r7, #20]
 8010658:	1ad3      	subs	r3, r2, r3
 801065a:	683a      	ldr	r2, [r7, #0]
 801065c:	429a      	cmp	r2, r3
 801065e:	d803      	bhi.n	8010668 <HAL_SPI_Receive+0x2b0>
 8010660:	683b      	ldr	r3, [r7, #0]
 8010662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010666:	d102      	bne.n	801066e <HAL_SPI_Receive+0x2b6>
 8010668:	683b      	ldr	r3, [r7, #0]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d114      	bne.n	8010698 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801066e:	68f8      	ldr	r0, [r7, #12]
 8010670:	f000 f832 	bl	80106d8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	2200      	movs	r2, #0
 8010678:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010682:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	2201      	movs	r2, #1
 8010690:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010694:	2303      	movs	r3, #3
 8010696:	e018      	b.n	80106ca <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801069e:	b29b      	uxth	r3, r3
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d1b6      	bne.n	8010612 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80106a4:	68f8      	ldr	r0, [r7, #12]
 80106a6:	f000 f817 	bl	80106d8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	2200      	movs	r2, #0
 80106ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	2201      	movs	r2, #1
 80106b6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d001      	beq.n	80106c8 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 80106c4:	2301      	movs	r3, #1
 80106c6:	e000      	b.n	80106ca <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 80106c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80106ca:	4618      	mov	r0, r3
 80106cc:	3720      	adds	r7, #32
 80106ce:	46bd      	mov	sp, r7
 80106d0:	bd80      	pop	{r7, pc}
 80106d2:	bf00      	nop
 80106d4:	ffff0000 	.word	0xffff0000

080106d8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80106d8:	b480      	push	{r7}
 80106da:	b085      	sub	sp, #20
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	695b      	ldr	r3, [r3, #20]
 80106e6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	699a      	ldr	r2, [r3, #24]
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	f042 0208 	orr.w	r2, r2, #8
 80106f6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	699a      	ldr	r2, [r3, #24]
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	f042 0210 	orr.w	r2, r2, #16
 8010706:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	681a      	ldr	r2, [r3, #0]
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	f022 0201 	bic.w	r2, r2, #1
 8010716:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	6919      	ldr	r1, [r3, #16]
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	681a      	ldr	r2, [r3, #0]
 8010722:	4b3c      	ldr	r3, [pc, #240]	; (8010814 <SPI_CloseTransfer+0x13c>)
 8010724:	400b      	ands	r3, r1
 8010726:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	689a      	ldr	r2, [r3, #8]
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8010736:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801073e:	b2db      	uxtb	r3, r3
 8010740:	2b04      	cmp	r3, #4
 8010742:	d014      	beq.n	801076e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	f003 0320 	and.w	r3, r3, #32
 801074a:	2b00      	cmp	r3, #0
 801074c:	d00f      	beq.n	801076e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010754:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	699a      	ldr	r2, [r3, #24]
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	f042 0220 	orr.w	r2, r2, #32
 801076c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010774:	b2db      	uxtb	r3, r3
 8010776:	2b03      	cmp	r3, #3
 8010778:	d014      	beq.n	80107a4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010780:	2b00      	cmp	r3, #0
 8010782:	d00f      	beq.n	80107a4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801078a:	f043 0204 	orr.w	r2, r3, #4
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	699a      	ldr	r2, [r3, #24]
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80107a2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d00f      	beq.n	80107ce <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80107b4:	f043 0201 	orr.w	r2, r3, #1
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	699a      	ldr	r2, [r3, #24]
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80107cc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d00f      	beq.n	80107f8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80107de:	f043 0208 	orr.w	r2, r3, #8
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	699a      	ldr	r2, [r3, #24]
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80107f6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	2200      	movs	r2, #0
 80107fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	2200      	movs	r2, #0
 8010804:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8010808:	bf00      	nop
 801080a:	3714      	adds	r7, #20
 801080c:	46bd      	mov	sp, r7
 801080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010812:	4770      	bx	lr
 8010814:	fffffc90 	.word	0xfffffc90

08010818 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8010818:	b580      	push	{r7, lr}
 801081a:	b084      	sub	sp, #16
 801081c:	af00      	add	r7, sp, #0
 801081e:	60f8      	str	r0, [r7, #12]
 8010820:	60b9      	str	r1, [r7, #8]
 8010822:	603b      	str	r3, [r7, #0]
 8010824:	4613      	mov	r3, r2
 8010826:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010828:	e010      	b.n	801084c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801082a:	f7f3 fd75 	bl	8004318 <HAL_GetTick>
 801082e:	4602      	mov	r2, r0
 8010830:	69bb      	ldr	r3, [r7, #24]
 8010832:	1ad3      	subs	r3, r2, r3
 8010834:	683a      	ldr	r2, [r7, #0]
 8010836:	429a      	cmp	r2, r3
 8010838:	d803      	bhi.n	8010842 <SPI_WaitOnFlagUntilTimeout+0x2a>
 801083a:	683b      	ldr	r3, [r7, #0]
 801083c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010840:	d102      	bne.n	8010848 <SPI_WaitOnFlagUntilTimeout+0x30>
 8010842:	683b      	ldr	r3, [r7, #0]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d101      	bne.n	801084c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8010848:	2303      	movs	r3, #3
 801084a:	e00f      	b.n	801086c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	695a      	ldr	r2, [r3, #20]
 8010852:	68bb      	ldr	r3, [r7, #8]
 8010854:	4013      	ands	r3, r2
 8010856:	68ba      	ldr	r2, [r7, #8]
 8010858:	429a      	cmp	r2, r3
 801085a:	bf0c      	ite	eq
 801085c:	2301      	moveq	r3, #1
 801085e:	2300      	movne	r3, #0
 8010860:	b2db      	uxtb	r3, r3
 8010862:	461a      	mov	r2, r3
 8010864:	79fb      	ldrb	r3, [r7, #7]
 8010866:	429a      	cmp	r2, r3
 8010868:	d0df      	beq.n	801082a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 801086a:	2300      	movs	r3, #0
}
 801086c:	4618      	mov	r0, r3
 801086e:	3710      	adds	r7, #16
 8010870:	46bd      	mov	sp, r7
 8010872:	bd80      	pop	{r7, pc}

08010874 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8010874:	b480      	push	{r7}
 8010876:	b085      	sub	sp, #20
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010880:	095b      	lsrs	r3, r3, #5
 8010882:	3301      	adds	r3, #1
 8010884:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	68db      	ldr	r3, [r3, #12]
 801088a:	3301      	adds	r3, #1
 801088c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801088e:	68bb      	ldr	r3, [r7, #8]
 8010890:	3307      	adds	r3, #7
 8010892:	08db      	lsrs	r3, r3, #3
 8010894:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8010896:	68bb      	ldr	r3, [r7, #8]
 8010898:	68fa      	ldr	r2, [r7, #12]
 801089a:	fb02 f303 	mul.w	r3, r2, r3
}
 801089e:	4618      	mov	r0, r3
 80108a0:	3714      	adds	r7, #20
 80108a2:	46bd      	mov	sp, r7
 80108a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a8:	4770      	bx	lr

080108aa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80108aa:	b580      	push	{r7, lr}
 80108ac:	b082      	sub	sp, #8
 80108ae:	af00      	add	r7, sp, #0
 80108b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d101      	bne.n	80108bc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80108b8:	2301      	movs	r3, #1
 80108ba:	e049      	b.n	8010950 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80108c2:	b2db      	uxtb	r3, r3
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d106      	bne.n	80108d6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	2200      	movs	r2, #0
 80108cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80108d0:	6878      	ldr	r0, [r7, #4]
 80108d2:	f7f3 f8e3 	bl	8003a9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	2202      	movs	r2, #2
 80108da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	681a      	ldr	r2, [r3, #0]
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	3304      	adds	r3, #4
 80108e6:	4619      	mov	r1, r3
 80108e8:	4610      	mov	r0, r2
 80108ea:	f000 ff29 	bl	8011740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	2201      	movs	r2, #1
 80108f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	2201      	movs	r2, #1
 80108fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	2201      	movs	r2, #1
 8010902:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	2201      	movs	r2, #1
 801090a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	2201      	movs	r2, #1
 8010912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	2201      	movs	r2, #1
 801091a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	2201      	movs	r2, #1
 8010922:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	2201      	movs	r2, #1
 801092a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	2201      	movs	r2, #1
 8010932:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	2201      	movs	r2, #1
 801093a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	2201      	movs	r2, #1
 8010942:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	2201      	movs	r2, #1
 801094a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801094e:	2300      	movs	r3, #0
}
 8010950:	4618      	mov	r0, r3
 8010952:	3708      	adds	r7, #8
 8010954:	46bd      	mov	sp, r7
 8010956:	bd80      	pop	{r7, pc}

08010958 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010958:	b580      	push	{r7, lr}
 801095a:	b082      	sub	sp, #8
 801095c:	af00      	add	r7, sp, #0
 801095e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d101      	bne.n	801096a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010966:	2301      	movs	r3, #1
 8010968:	e049      	b.n	80109fe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010970:	b2db      	uxtb	r3, r3
 8010972:	2b00      	cmp	r3, #0
 8010974:	d106      	bne.n	8010984 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	2200      	movs	r2, #0
 801097a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801097e:	6878      	ldr	r0, [r7, #4]
 8010980:	f7f2 fef6 	bl	8003770 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	2202      	movs	r2, #2
 8010988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	681a      	ldr	r2, [r3, #0]
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	3304      	adds	r3, #4
 8010994:	4619      	mov	r1, r3
 8010996:	4610      	mov	r0, r2
 8010998:	f000 fed2 	bl	8011740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	2201      	movs	r2, #1
 80109a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	2201      	movs	r2, #1
 80109a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	2201      	movs	r2, #1
 80109b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	2201      	movs	r2, #1
 80109b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	2201      	movs	r2, #1
 80109c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	2201      	movs	r2, #1
 80109c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	2201      	movs	r2, #1
 80109d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	2201      	movs	r2, #1
 80109d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	2201      	movs	r2, #1
 80109e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	2201      	movs	r2, #1
 80109e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	2201      	movs	r2, #1
 80109f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	2201      	movs	r2, #1
 80109f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80109fc:	2300      	movs	r3, #0
}
 80109fe:	4618      	mov	r0, r3
 8010a00:	3708      	adds	r7, #8
 8010a02:	46bd      	mov	sp, r7
 8010a04:	bd80      	pop	{r7, pc}
	...

08010a08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010a08:	b580      	push	{r7, lr}
 8010a0a:	b084      	sub	sp, #16
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	6078      	str	r0, [r7, #4]
 8010a10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8010a12:	683b      	ldr	r3, [r7, #0]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d109      	bne.n	8010a2c <HAL_TIM_PWM_Start+0x24>
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010a1e:	b2db      	uxtb	r3, r3
 8010a20:	2b01      	cmp	r3, #1
 8010a22:	bf14      	ite	ne
 8010a24:	2301      	movne	r3, #1
 8010a26:	2300      	moveq	r3, #0
 8010a28:	b2db      	uxtb	r3, r3
 8010a2a:	e03c      	b.n	8010aa6 <HAL_TIM_PWM_Start+0x9e>
 8010a2c:	683b      	ldr	r3, [r7, #0]
 8010a2e:	2b04      	cmp	r3, #4
 8010a30:	d109      	bne.n	8010a46 <HAL_TIM_PWM_Start+0x3e>
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010a38:	b2db      	uxtb	r3, r3
 8010a3a:	2b01      	cmp	r3, #1
 8010a3c:	bf14      	ite	ne
 8010a3e:	2301      	movne	r3, #1
 8010a40:	2300      	moveq	r3, #0
 8010a42:	b2db      	uxtb	r3, r3
 8010a44:	e02f      	b.n	8010aa6 <HAL_TIM_PWM_Start+0x9e>
 8010a46:	683b      	ldr	r3, [r7, #0]
 8010a48:	2b08      	cmp	r3, #8
 8010a4a:	d109      	bne.n	8010a60 <HAL_TIM_PWM_Start+0x58>
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a52:	b2db      	uxtb	r3, r3
 8010a54:	2b01      	cmp	r3, #1
 8010a56:	bf14      	ite	ne
 8010a58:	2301      	movne	r3, #1
 8010a5a:	2300      	moveq	r3, #0
 8010a5c:	b2db      	uxtb	r3, r3
 8010a5e:	e022      	b.n	8010aa6 <HAL_TIM_PWM_Start+0x9e>
 8010a60:	683b      	ldr	r3, [r7, #0]
 8010a62:	2b0c      	cmp	r3, #12
 8010a64:	d109      	bne.n	8010a7a <HAL_TIM_PWM_Start+0x72>
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010a6c:	b2db      	uxtb	r3, r3
 8010a6e:	2b01      	cmp	r3, #1
 8010a70:	bf14      	ite	ne
 8010a72:	2301      	movne	r3, #1
 8010a74:	2300      	moveq	r3, #0
 8010a76:	b2db      	uxtb	r3, r3
 8010a78:	e015      	b.n	8010aa6 <HAL_TIM_PWM_Start+0x9e>
 8010a7a:	683b      	ldr	r3, [r7, #0]
 8010a7c:	2b10      	cmp	r3, #16
 8010a7e:	d109      	bne.n	8010a94 <HAL_TIM_PWM_Start+0x8c>
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010a86:	b2db      	uxtb	r3, r3
 8010a88:	2b01      	cmp	r3, #1
 8010a8a:	bf14      	ite	ne
 8010a8c:	2301      	movne	r3, #1
 8010a8e:	2300      	moveq	r3, #0
 8010a90:	b2db      	uxtb	r3, r3
 8010a92:	e008      	b.n	8010aa6 <HAL_TIM_PWM_Start+0x9e>
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010a9a:	b2db      	uxtb	r3, r3
 8010a9c:	2b01      	cmp	r3, #1
 8010a9e:	bf14      	ite	ne
 8010aa0:	2301      	movne	r3, #1
 8010aa2:	2300      	moveq	r3, #0
 8010aa4:	b2db      	uxtb	r3, r3
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d001      	beq.n	8010aae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8010aaa:	2301      	movs	r3, #1
 8010aac:	e0ab      	b.n	8010c06 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010aae:	683b      	ldr	r3, [r7, #0]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d104      	bne.n	8010abe <HAL_TIM_PWM_Start+0xb6>
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	2202      	movs	r2, #2
 8010ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010abc:	e023      	b.n	8010b06 <HAL_TIM_PWM_Start+0xfe>
 8010abe:	683b      	ldr	r3, [r7, #0]
 8010ac0:	2b04      	cmp	r3, #4
 8010ac2:	d104      	bne.n	8010ace <HAL_TIM_PWM_Start+0xc6>
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	2202      	movs	r2, #2
 8010ac8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010acc:	e01b      	b.n	8010b06 <HAL_TIM_PWM_Start+0xfe>
 8010ace:	683b      	ldr	r3, [r7, #0]
 8010ad0:	2b08      	cmp	r3, #8
 8010ad2:	d104      	bne.n	8010ade <HAL_TIM_PWM_Start+0xd6>
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	2202      	movs	r2, #2
 8010ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010adc:	e013      	b.n	8010b06 <HAL_TIM_PWM_Start+0xfe>
 8010ade:	683b      	ldr	r3, [r7, #0]
 8010ae0:	2b0c      	cmp	r3, #12
 8010ae2:	d104      	bne.n	8010aee <HAL_TIM_PWM_Start+0xe6>
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	2202      	movs	r2, #2
 8010ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010aec:	e00b      	b.n	8010b06 <HAL_TIM_PWM_Start+0xfe>
 8010aee:	683b      	ldr	r3, [r7, #0]
 8010af0:	2b10      	cmp	r3, #16
 8010af2:	d104      	bne.n	8010afe <HAL_TIM_PWM_Start+0xf6>
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	2202      	movs	r2, #2
 8010af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010afc:	e003      	b.n	8010b06 <HAL_TIM_PWM_Start+0xfe>
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	2202      	movs	r2, #2
 8010b02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	2201      	movs	r2, #1
 8010b0c:	6839      	ldr	r1, [r7, #0]
 8010b0e:	4618      	mov	r0, r3
 8010b10:	f001 f992 	bl	8011e38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	4a3d      	ldr	r2, [pc, #244]	; (8010c10 <HAL_TIM_PWM_Start+0x208>)
 8010b1a:	4293      	cmp	r3, r2
 8010b1c:	d013      	beq.n	8010b46 <HAL_TIM_PWM_Start+0x13e>
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	4a3c      	ldr	r2, [pc, #240]	; (8010c14 <HAL_TIM_PWM_Start+0x20c>)
 8010b24:	4293      	cmp	r3, r2
 8010b26:	d00e      	beq.n	8010b46 <HAL_TIM_PWM_Start+0x13e>
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	4a3a      	ldr	r2, [pc, #232]	; (8010c18 <HAL_TIM_PWM_Start+0x210>)
 8010b2e:	4293      	cmp	r3, r2
 8010b30:	d009      	beq.n	8010b46 <HAL_TIM_PWM_Start+0x13e>
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	4a39      	ldr	r2, [pc, #228]	; (8010c1c <HAL_TIM_PWM_Start+0x214>)
 8010b38:	4293      	cmp	r3, r2
 8010b3a:	d004      	beq.n	8010b46 <HAL_TIM_PWM_Start+0x13e>
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	4a37      	ldr	r2, [pc, #220]	; (8010c20 <HAL_TIM_PWM_Start+0x218>)
 8010b42:	4293      	cmp	r3, r2
 8010b44:	d101      	bne.n	8010b4a <HAL_TIM_PWM_Start+0x142>
 8010b46:	2301      	movs	r3, #1
 8010b48:	e000      	b.n	8010b4c <HAL_TIM_PWM_Start+0x144>
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d007      	beq.n	8010b60 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010b5e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	4a2a      	ldr	r2, [pc, #168]	; (8010c10 <HAL_TIM_PWM_Start+0x208>)
 8010b66:	4293      	cmp	r3, r2
 8010b68:	d02c      	beq.n	8010bc4 <HAL_TIM_PWM_Start+0x1bc>
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010b72:	d027      	beq.n	8010bc4 <HAL_TIM_PWM_Start+0x1bc>
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	4a2a      	ldr	r2, [pc, #168]	; (8010c24 <HAL_TIM_PWM_Start+0x21c>)
 8010b7a:	4293      	cmp	r3, r2
 8010b7c:	d022      	beq.n	8010bc4 <HAL_TIM_PWM_Start+0x1bc>
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	4a29      	ldr	r2, [pc, #164]	; (8010c28 <HAL_TIM_PWM_Start+0x220>)
 8010b84:	4293      	cmp	r3, r2
 8010b86:	d01d      	beq.n	8010bc4 <HAL_TIM_PWM_Start+0x1bc>
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	4a27      	ldr	r2, [pc, #156]	; (8010c2c <HAL_TIM_PWM_Start+0x224>)
 8010b8e:	4293      	cmp	r3, r2
 8010b90:	d018      	beq.n	8010bc4 <HAL_TIM_PWM_Start+0x1bc>
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	4a1f      	ldr	r2, [pc, #124]	; (8010c14 <HAL_TIM_PWM_Start+0x20c>)
 8010b98:	4293      	cmp	r3, r2
 8010b9a:	d013      	beq.n	8010bc4 <HAL_TIM_PWM_Start+0x1bc>
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	4a23      	ldr	r2, [pc, #140]	; (8010c30 <HAL_TIM_PWM_Start+0x228>)
 8010ba2:	4293      	cmp	r3, r2
 8010ba4:	d00e      	beq.n	8010bc4 <HAL_TIM_PWM_Start+0x1bc>
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	4a1b      	ldr	r2, [pc, #108]	; (8010c18 <HAL_TIM_PWM_Start+0x210>)
 8010bac:	4293      	cmp	r3, r2
 8010bae:	d009      	beq.n	8010bc4 <HAL_TIM_PWM_Start+0x1bc>
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	4a1f      	ldr	r2, [pc, #124]	; (8010c34 <HAL_TIM_PWM_Start+0x22c>)
 8010bb6:	4293      	cmp	r3, r2
 8010bb8:	d004      	beq.n	8010bc4 <HAL_TIM_PWM_Start+0x1bc>
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	4a1e      	ldr	r2, [pc, #120]	; (8010c38 <HAL_TIM_PWM_Start+0x230>)
 8010bc0:	4293      	cmp	r3, r2
 8010bc2:	d115      	bne.n	8010bf0 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	689a      	ldr	r2, [r3, #8]
 8010bca:	4b1c      	ldr	r3, [pc, #112]	; (8010c3c <HAL_TIM_PWM_Start+0x234>)
 8010bcc:	4013      	ands	r3, r2
 8010bce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	2b06      	cmp	r3, #6
 8010bd4:	d015      	beq.n	8010c02 <HAL_TIM_PWM_Start+0x1fa>
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010bdc:	d011      	beq.n	8010c02 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	681a      	ldr	r2, [r3, #0]
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	f042 0201 	orr.w	r2, r2, #1
 8010bec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010bee:	e008      	b.n	8010c02 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	681a      	ldr	r2, [r3, #0]
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	f042 0201 	orr.w	r2, r2, #1
 8010bfe:	601a      	str	r2, [r3, #0]
 8010c00:	e000      	b.n	8010c04 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010c02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010c04:	2300      	movs	r3, #0
}
 8010c06:	4618      	mov	r0, r3
 8010c08:	3710      	adds	r7, #16
 8010c0a:	46bd      	mov	sp, r7
 8010c0c:	bd80      	pop	{r7, pc}
 8010c0e:	bf00      	nop
 8010c10:	40010000 	.word	0x40010000
 8010c14:	40010400 	.word	0x40010400
 8010c18:	40014000 	.word	0x40014000
 8010c1c:	40014400 	.word	0x40014400
 8010c20:	40014800 	.word	0x40014800
 8010c24:	40000400 	.word	0x40000400
 8010c28:	40000800 	.word	0x40000800
 8010c2c:	40000c00 	.word	0x40000c00
 8010c30:	40001800 	.word	0x40001800
 8010c34:	4000e000 	.word	0x4000e000
 8010c38:	4000e400 	.word	0x4000e400
 8010c3c:	00010007 	.word	0x00010007

08010c40 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b086      	sub	sp, #24
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	60f8      	str	r0, [r7, #12]
 8010c48:	60b9      	str	r1, [r7, #8]
 8010c4a:	607a      	str	r2, [r7, #4]
 8010c4c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8010c4e:	2300      	movs	r3, #0
 8010c50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8010c52:	68bb      	ldr	r3, [r7, #8]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d109      	bne.n	8010c6c <HAL_TIM_PWM_Start_DMA+0x2c>
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010c5e:	b2db      	uxtb	r3, r3
 8010c60:	2b02      	cmp	r3, #2
 8010c62:	bf0c      	ite	eq
 8010c64:	2301      	moveq	r3, #1
 8010c66:	2300      	movne	r3, #0
 8010c68:	b2db      	uxtb	r3, r3
 8010c6a:	e03c      	b.n	8010ce6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8010c6c:	68bb      	ldr	r3, [r7, #8]
 8010c6e:	2b04      	cmp	r3, #4
 8010c70:	d109      	bne.n	8010c86 <HAL_TIM_PWM_Start_DMA+0x46>
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010c78:	b2db      	uxtb	r3, r3
 8010c7a:	2b02      	cmp	r3, #2
 8010c7c:	bf0c      	ite	eq
 8010c7e:	2301      	moveq	r3, #1
 8010c80:	2300      	movne	r3, #0
 8010c82:	b2db      	uxtb	r3, r3
 8010c84:	e02f      	b.n	8010ce6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8010c86:	68bb      	ldr	r3, [r7, #8]
 8010c88:	2b08      	cmp	r3, #8
 8010c8a:	d109      	bne.n	8010ca0 <HAL_TIM_PWM_Start_DMA+0x60>
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010c92:	b2db      	uxtb	r3, r3
 8010c94:	2b02      	cmp	r3, #2
 8010c96:	bf0c      	ite	eq
 8010c98:	2301      	moveq	r3, #1
 8010c9a:	2300      	movne	r3, #0
 8010c9c:	b2db      	uxtb	r3, r3
 8010c9e:	e022      	b.n	8010ce6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8010ca0:	68bb      	ldr	r3, [r7, #8]
 8010ca2:	2b0c      	cmp	r3, #12
 8010ca4:	d109      	bne.n	8010cba <HAL_TIM_PWM_Start_DMA+0x7a>
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010cac:	b2db      	uxtb	r3, r3
 8010cae:	2b02      	cmp	r3, #2
 8010cb0:	bf0c      	ite	eq
 8010cb2:	2301      	moveq	r3, #1
 8010cb4:	2300      	movne	r3, #0
 8010cb6:	b2db      	uxtb	r3, r3
 8010cb8:	e015      	b.n	8010ce6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8010cba:	68bb      	ldr	r3, [r7, #8]
 8010cbc:	2b10      	cmp	r3, #16
 8010cbe:	d109      	bne.n	8010cd4 <HAL_TIM_PWM_Start_DMA+0x94>
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010cc6:	b2db      	uxtb	r3, r3
 8010cc8:	2b02      	cmp	r3, #2
 8010cca:	bf0c      	ite	eq
 8010ccc:	2301      	moveq	r3, #1
 8010cce:	2300      	movne	r3, #0
 8010cd0:	b2db      	uxtb	r3, r3
 8010cd2:	e008      	b.n	8010ce6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010cda:	b2db      	uxtb	r3, r3
 8010cdc:	2b02      	cmp	r3, #2
 8010cde:	bf0c      	ite	eq
 8010ce0:	2301      	moveq	r3, #1
 8010ce2:	2300      	movne	r3, #0
 8010ce4:	b2db      	uxtb	r3, r3
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d001      	beq.n	8010cee <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8010cea:	2302      	movs	r3, #2
 8010cec:	e1ba      	b.n	8011064 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8010cee:	68bb      	ldr	r3, [r7, #8]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d109      	bne.n	8010d08 <HAL_TIM_PWM_Start_DMA+0xc8>
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010cfa:	b2db      	uxtb	r3, r3
 8010cfc:	2b01      	cmp	r3, #1
 8010cfe:	bf0c      	ite	eq
 8010d00:	2301      	moveq	r3, #1
 8010d02:	2300      	movne	r3, #0
 8010d04:	b2db      	uxtb	r3, r3
 8010d06:	e03c      	b.n	8010d82 <HAL_TIM_PWM_Start_DMA+0x142>
 8010d08:	68bb      	ldr	r3, [r7, #8]
 8010d0a:	2b04      	cmp	r3, #4
 8010d0c:	d109      	bne.n	8010d22 <HAL_TIM_PWM_Start_DMA+0xe2>
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010d14:	b2db      	uxtb	r3, r3
 8010d16:	2b01      	cmp	r3, #1
 8010d18:	bf0c      	ite	eq
 8010d1a:	2301      	moveq	r3, #1
 8010d1c:	2300      	movne	r3, #0
 8010d1e:	b2db      	uxtb	r3, r3
 8010d20:	e02f      	b.n	8010d82 <HAL_TIM_PWM_Start_DMA+0x142>
 8010d22:	68bb      	ldr	r3, [r7, #8]
 8010d24:	2b08      	cmp	r3, #8
 8010d26:	d109      	bne.n	8010d3c <HAL_TIM_PWM_Start_DMA+0xfc>
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010d2e:	b2db      	uxtb	r3, r3
 8010d30:	2b01      	cmp	r3, #1
 8010d32:	bf0c      	ite	eq
 8010d34:	2301      	moveq	r3, #1
 8010d36:	2300      	movne	r3, #0
 8010d38:	b2db      	uxtb	r3, r3
 8010d3a:	e022      	b.n	8010d82 <HAL_TIM_PWM_Start_DMA+0x142>
 8010d3c:	68bb      	ldr	r3, [r7, #8]
 8010d3e:	2b0c      	cmp	r3, #12
 8010d40:	d109      	bne.n	8010d56 <HAL_TIM_PWM_Start_DMA+0x116>
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010d48:	b2db      	uxtb	r3, r3
 8010d4a:	2b01      	cmp	r3, #1
 8010d4c:	bf0c      	ite	eq
 8010d4e:	2301      	moveq	r3, #1
 8010d50:	2300      	movne	r3, #0
 8010d52:	b2db      	uxtb	r3, r3
 8010d54:	e015      	b.n	8010d82 <HAL_TIM_PWM_Start_DMA+0x142>
 8010d56:	68bb      	ldr	r3, [r7, #8]
 8010d58:	2b10      	cmp	r3, #16
 8010d5a:	d109      	bne.n	8010d70 <HAL_TIM_PWM_Start_DMA+0x130>
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010d62:	b2db      	uxtb	r3, r3
 8010d64:	2b01      	cmp	r3, #1
 8010d66:	bf0c      	ite	eq
 8010d68:	2301      	moveq	r3, #1
 8010d6a:	2300      	movne	r3, #0
 8010d6c:	b2db      	uxtb	r3, r3
 8010d6e:	e008      	b.n	8010d82 <HAL_TIM_PWM_Start_DMA+0x142>
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010d76:	b2db      	uxtb	r3, r3
 8010d78:	2b01      	cmp	r3, #1
 8010d7a:	bf0c      	ite	eq
 8010d7c:	2301      	moveq	r3, #1
 8010d7e:	2300      	movne	r3, #0
 8010d80:	b2db      	uxtb	r3, r3
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d034      	beq.n	8010df0 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d002      	beq.n	8010d92 <HAL_TIM_PWM_Start_DMA+0x152>
 8010d8c:	887b      	ldrh	r3, [r7, #2]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d101      	bne.n	8010d96 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8010d92:	2301      	movs	r3, #1
 8010d94:	e166      	b.n	8011064 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010d96:	68bb      	ldr	r3, [r7, #8]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d104      	bne.n	8010da6 <HAL_TIM_PWM_Start_DMA+0x166>
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	2202      	movs	r2, #2
 8010da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010da4:	e026      	b.n	8010df4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010da6:	68bb      	ldr	r3, [r7, #8]
 8010da8:	2b04      	cmp	r3, #4
 8010daa:	d104      	bne.n	8010db6 <HAL_TIM_PWM_Start_DMA+0x176>
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	2202      	movs	r2, #2
 8010db0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010db4:	e01e      	b.n	8010df4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010db6:	68bb      	ldr	r3, [r7, #8]
 8010db8:	2b08      	cmp	r3, #8
 8010dba:	d104      	bne.n	8010dc6 <HAL_TIM_PWM_Start_DMA+0x186>
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	2202      	movs	r2, #2
 8010dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010dc4:	e016      	b.n	8010df4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010dc6:	68bb      	ldr	r3, [r7, #8]
 8010dc8:	2b0c      	cmp	r3, #12
 8010dca:	d104      	bne.n	8010dd6 <HAL_TIM_PWM_Start_DMA+0x196>
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	2202      	movs	r2, #2
 8010dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010dd4:	e00e      	b.n	8010df4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010dd6:	68bb      	ldr	r3, [r7, #8]
 8010dd8:	2b10      	cmp	r3, #16
 8010dda:	d104      	bne.n	8010de6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	2202      	movs	r2, #2
 8010de0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010de4:	e006      	b.n	8010df4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	2202      	movs	r2, #2
 8010dea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010dee:	e001      	b.n	8010df4 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8010df0:	2301      	movs	r3, #1
 8010df2:	e137      	b.n	8011064 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 8010df4:	68bb      	ldr	r3, [r7, #8]
 8010df6:	2b0c      	cmp	r3, #12
 8010df8:	f200 80ae 	bhi.w	8010f58 <HAL_TIM_PWM_Start_DMA+0x318>
 8010dfc:	a201      	add	r2, pc, #4	; (adr r2, 8010e04 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8010dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e02:	bf00      	nop
 8010e04:	08010e39 	.word	0x08010e39
 8010e08:	08010f59 	.word	0x08010f59
 8010e0c:	08010f59 	.word	0x08010f59
 8010e10:	08010f59 	.word	0x08010f59
 8010e14:	08010e81 	.word	0x08010e81
 8010e18:	08010f59 	.word	0x08010f59
 8010e1c:	08010f59 	.word	0x08010f59
 8010e20:	08010f59 	.word	0x08010f59
 8010e24:	08010ec9 	.word	0x08010ec9
 8010e28:	08010f59 	.word	0x08010f59
 8010e2c:	08010f59 	.word	0x08010f59
 8010e30:	08010f59 	.word	0x08010f59
 8010e34:	08010f11 	.word	0x08010f11
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e3c:	4a8b      	ldr	r2, [pc, #556]	; (801106c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8010e3e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e44:	4a8a      	ldr	r2, [pc, #552]	; (8011070 <HAL_TIM_PWM_Start_DMA+0x430>)
 8010e46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e4c:	4a89      	ldr	r2, [pc, #548]	; (8011074 <HAL_TIM_PWM_Start_DMA+0x434>)
 8010e4e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8010e54:	6879      	ldr	r1, [r7, #4]
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	3334      	adds	r3, #52	; 0x34
 8010e5c:	461a      	mov	r2, r3
 8010e5e:	887b      	ldrh	r3, [r7, #2]
 8010e60:	f7f5 fec4 	bl	8006bec <HAL_DMA_Start_IT>
 8010e64:	4603      	mov	r3, r0
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d001      	beq.n	8010e6e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8010e6a:	2301      	movs	r3, #1
 8010e6c:	e0fa      	b.n	8011064 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	68da      	ldr	r2, [r3, #12]
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010e7c:	60da      	str	r2, [r3, #12]
      break;
 8010e7e:	e06e      	b.n	8010f5e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e84:	4a79      	ldr	r2, [pc, #484]	; (801106c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8010e86:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e8c:	4a78      	ldr	r2, [pc, #480]	; (8011070 <HAL_TIM_PWM_Start_DMA+0x430>)
 8010e8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e94:	4a77      	ldr	r2, [pc, #476]	; (8011074 <HAL_TIM_PWM_Start_DMA+0x434>)
 8010e96:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8010e9c:	6879      	ldr	r1, [r7, #4]
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	3338      	adds	r3, #56	; 0x38
 8010ea4:	461a      	mov	r2, r3
 8010ea6:	887b      	ldrh	r3, [r7, #2]
 8010ea8:	f7f5 fea0 	bl	8006bec <HAL_DMA_Start_IT>
 8010eac:	4603      	mov	r3, r0
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d001      	beq.n	8010eb6 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8010eb2:	2301      	movs	r3, #1
 8010eb4:	e0d6      	b.n	8011064 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	68da      	ldr	r2, [r3, #12]
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010ec4:	60da      	str	r2, [r3, #12]
      break;
 8010ec6:	e04a      	b.n	8010f5e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ecc:	4a67      	ldr	r2, [pc, #412]	; (801106c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8010ece:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ed4:	4a66      	ldr	r2, [pc, #408]	; (8011070 <HAL_TIM_PWM_Start_DMA+0x430>)
 8010ed6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010edc:	4a65      	ldr	r2, [pc, #404]	; (8011074 <HAL_TIM_PWM_Start_DMA+0x434>)
 8010ede:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8010ee4:	6879      	ldr	r1, [r7, #4]
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	333c      	adds	r3, #60	; 0x3c
 8010eec:	461a      	mov	r2, r3
 8010eee:	887b      	ldrh	r3, [r7, #2]
 8010ef0:	f7f5 fe7c 	bl	8006bec <HAL_DMA_Start_IT>
 8010ef4:	4603      	mov	r3, r0
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d001      	beq.n	8010efe <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8010efa:	2301      	movs	r3, #1
 8010efc:	e0b2      	b.n	8011064 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	68da      	ldr	r2, [r3, #12]
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010f0c:	60da      	str	r2, [r3, #12]
      break;
 8010f0e:	e026      	b.n	8010f5e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f14:	4a55      	ldr	r2, [pc, #340]	; (801106c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8010f16:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f1c:	4a54      	ldr	r2, [pc, #336]	; (8011070 <HAL_TIM_PWM_Start_DMA+0x430>)
 8010f1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f24:	4a53      	ldr	r2, [pc, #332]	; (8011074 <HAL_TIM_PWM_Start_DMA+0x434>)
 8010f26:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010f2c:	6879      	ldr	r1, [r7, #4]
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	3340      	adds	r3, #64	; 0x40
 8010f34:	461a      	mov	r2, r3
 8010f36:	887b      	ldrh	r3, [r7, #2]
 8010f38:	f7f5 fe58 	bl	8006bec <HAL_DMA_Start_IT>
 8010f3c:	4603      	mov	r3, r0
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d001      	beq.n	8010f46 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8010f42:	2301      	movs	r3, #1
 8010f44:	e08e      	b.n	8011064 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	68da      	ldr	r2, [r3, #12]
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8010f54:	60da      	str	r2, [r3, #12]
      break;
 8010f56:	e002      	b.n	8010f5e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8010f58:	2301      	movs	r3, #1
 8010f5a:	75fb      	strb	r3, [r7, #23]
      break;
 8010f5c:	bf00      	nop
  }

  if (status == HAL_OK)
 8010f5e:	7dfb      	ldrb	r3, [r7, #23]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d17e      	bne.n	8011062 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	2201      	movs	r2, #1
 8010f6a:	68b9      	ldr	r1, [r7, #8]
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	f000 ff63 	bl	8011e38 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	4a40      	ldr	r2, [pc, #256]	; (8011078 <HAL_TIM_PWM_Start_DMA+0x438>)
 8010f78:	4293      	cmp	r3, r2
 8010f7a:	d013      	beq.n	8010fa4 <HAL_TIM_PWM_Start_DMA+0x364>
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	4a3e      	ldr	r2, [pc, #248]	; (801107c <HAL_TIM_PWM_Start_DMA+0x43c>)
 8010f82:	4293      	cmp	r3, r2
 8010f84:	d00e      	beq.n	8010fa4 <HAL_TIM_PWM_Start_DMA+0x364>
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	4a3d      	ldr	r2, [pc, #244]	; (8011080 <HAL_TIM_PWM_Start_DMA+0x440>)
 8010f8c:	4293      	cmp	r3, r2
 8010f8e:	d009      	beq.n	8010fa4 <HAL_TIM_PWM_Start_DMA+0x364>
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	4a3b      	ldr	r2, [pc, #236]	; (8011084 <HAL_TIM_PWM_Start_DMA+0x444>)
 8010f96:	4293      	cmp	r3, r2
 8010f98:	d004      	beq.n	8010fa4 <HAL_TIM_PWM_Start_DMA+0x364>
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	4a3a      	ldr	r2, [pc, #232]	; (8011088 <HAL_TIM_PWM_Start_DMA+0x448>)
 8010fa0:	4293      	cmp	r3, r2
 8010fa2:	d101      	bne.n	8010fa8 <HAL_TIM_PWM_Start_DMA+0x368>
 8010fa4:	2301      	movs	r3, #1
 8010fa6:	e000      	b.n	8010faa <HAL_TIM_PWM_Start_DMA+0x36a>
 8010fa8:	2300      	movs	r3, #0
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d007      	beq.n	8010fbe <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010fbc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	4a2d      	ldr	r2, [pc, #180]	; (8011078 <HAL_TIM_PWM_Start_DMA+0x438>)
 8010fc4:	4293      	cmp	r3, r2
 8010fc6:	d02c      	beq.n	8011022 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010fd0:	d027      	beq.n	8011022 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	4a2d      	ldr	r2, [pc, #180]	; (801108c <HAL_TIM_PWM_Start_DMA+0x44c>)
 8010fd8:	4293      	cmp	r3, r2
 8010fda:	d022      	beq.n	8011022 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	4a2b      	ldr	r2, [pc, #172]	; (8011090 <HAL_TIM_PWM_Start_DMA+0x450>)
 8010fe2:	4293      	cmp	r3, r2
 8010fe4:	d01d      	beq.n	8011022 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	4a2a      	ldr	r2, [pc, #168]	; (8011094 <HAL_TIM_PWM_Start_DMA+0x454>)
 8010fec:	4293      	cmp	r3, r2
 8010fee:	d018      	beq.n	8011022 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	4a21      	ldr	r2, [pc, #132]	; (801107c <HAL_TIM_PWM_Start_DMA+0x43c>)
 8010ff6:	4293      	cmp	r3, r2
 8010ff8:	d013      	beq.n	8011022 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	4a26      	ldr	r2, [pc, #152]	; (8011098 <HAL_TIM_PWM_Start_DMA+0x458>)
 8011000:	4293      	cmp	r3, r2
 8011002:	d00e      	beq.n	8011022 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	4a1d      	ldr	r2, [pc, #116]	; (8011080 <HAL_TIM_PWM_Start_DMA+0x440>)
 801100a:	4293      	cmp	r3, r2
 801100c:	d009      	beq.n	8011022 <HAL_TIM_PWM_Start_DMA+0x3e2>
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	4a22      	ldr	r2, [pc, #136]	; (801109c <HAL_TIM_PWM_Start_DMA+0x45c>)
 8011014:	4293      	cmp	r3, r2
 8011016:	d004      	beq.n	8011022 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	4a20      	ldr	r2, [pc, #128]	; (80110a0 <HAL_TIM_PWM_Start_DMA+0x460>)
 801101e:	4293      	cmp	r3, r2
 8011020:	d115      	bne.n	801104e <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	689a      	ldr	r2, [r3, #8]
 8011028:	4b1e      	ldr	r3, [pc, #120]	; (80110a4 <HAL_TIM_PWM_Start_DMA+0x464>)
 801102a:	4013      	ands	r3, r2
 801102c:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801102e:	693b      	ldr	r3, [r7, #16]
 8011030:	2b06      	cmp	r3, #6
 8011032:	d015      	beq.n	8011060 <HAL_TIM_PWM_Start_DMA+0x420>
 8011034:	693b      	ldr	r3, [r7, #16]
 8011036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801103a:	d011      	beq.n	8011060 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	681a      	ldr	r2, [r3, #0]
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	f042 0201 	orr.w	r2, r2, #1
 801104a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801104c:	e008      	b.n	8011060 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	681a      	ldr	r2, [r3, #0]
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	f042 0201 	orr.w	r2, r2, #1
 801105c:	601a      	str	r2, [r3, #0]
 801105e:	e000      	b.n	8011062 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011060:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8011062:	7dfb      	ldrb	r3, [r7, #23]
}
 8011064:	4618      	mov	r0, r3
 8011066:	3718      	adds	r7, #24
 8011068:	46bd      	mov	sp, r7
 801106a:	bd80      	pop	{r7, pc}
 801106c:	0801162f 	.word	0x0801162f
 8011070:	080116d7 	.word	0x080116d7
 8011074:	0801159d 	.word	0x0801159d
 8011078:	40010000 	.word	0x40010000
 801107c:	40010400 	.word	0x40010400
 8011080:	40014000 	.word	0x40014000
 8011084:	40014400 	.word	0x40014400
 8011088:	40014800 	.word	0x40014800
 801108c:	40000400 	.word	0x40000400
 8011090:	40000800 	.word	0x40000800
 8011094:	40000c00 	.word	0x40000c00
 8011098:	40001800 	.word	0x40001800
 801109c:	4000e000 	.word	0x4000e000
 80110a0:	4000e400 	.word	0x4000e400
 80110a4:	00010007 	.word	0x00010007

080110a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b082      	sub	sp, #8
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	691b      	ldr	r3, [r3, #16]
 80110b6:	f003 0302 	and.w	r3, r3, #2
 80110ba:	2b02      	cmp	r3, #2
 80110bc:	d122      	bne.n	8011104 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	68db      	ldr	r3, [r3, #12]
 80110c4:	f003 0302 	and.w	r3, r3, #2
 80110c8:	2b02      	cmp	r3, #2
 80110ca:	d11b      	bne.n	8011104 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	f06f 0202 	mvn.w	r2, #2
 80110d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	2201      	movs	r2, #1
 80110da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	699b      	ldr	r3, [r3, #24]
 80110e2:	f003 0303 	and.w	r3, r3, #3
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d003      	beq.n	80110f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80110ea:	6878      	ldr	r0, [r7, #4]
 80110ec:	f000 fa24 	bl	8011538 <HAL_TIM_IC_CaptureCallback>
 80110f0:	e005      	b.n	80110fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80110f2:	6878      	ldr	r0, [r7, #4]
 80110f4:	f000 fa16 	bl	8011524 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80110f8:	6878      	ldr	r0, [r7, #4]
 80110fa:	f000 fa27 	bl	801154c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	2200      	movs	r2, #0
 8011102:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	691b      	ldr	r3, [r3, #16]
 801110a:	f003 0304 	and.w	r3, r3, #4
 801110e:	2b04      	cmp	r3, #4
 8011110:	d122      	bne.n	8011158 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	68db      	ldr	r3, [r3, #12]
 8011118:	f003 0304 	and.w	r3, r3, #4
 801111c:	2b04      	cmp	r3, #4
 801111e:	d11b      	bne.n	8011158 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	f06f 0204 	mvn.w	r2, #4
 8011128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	2202      	movs	r2, #2
 801112e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	699b      	ldr	r3, [r3, #24]
 8011136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801113a:	2b00      	cmp	r3, #0
 801113c:	d003      	beq.n	8011146 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801113e:	6878      	ldr	r0, [r7, #4]
 8011140:	f000 f9fa 	bl	8011538 <HAL_TIM_IC_CaptureCallback>
 8011144:	e005      	b.n	8011152 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011146:	6878      	ldr	r0, [r7, #4]
 8011148:	f000 f9ec 	bl	8011524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801114c:	6878      	ldr	r0, [r7, #4]
 801114e:	f000 f9fd 	bl	801154c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	2200      	movs	r2, #0
 8011156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	691b      	ldr	r3, [r3, #16]
 801115e:	f003 0308 	and.w	r3, r3, #8
 8011162:	2b08      	cmp	r3, #8
 8011164:	d122      	bne.n	80111ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	68db      	ldr	r3, [r3, #12]
 801116c:	f003 0308 	and.w	r3, r3, #8
 8011170:	2b08      	cmp	r3, #8
 8011172:	d11b      	bne.n	80111ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	f06f 0208 	mvn.w	r2, #8
 801117c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	2204      	movs	r2, #4
 8011182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	69db      	ldr	r3, [r3, #28]
 801118a:	f003 0303 	and.w	r3, r3, #3
 801118e:	2b00      	cmp	r3, #0
 8011190:	d003      	beq.n	801119a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011192:	6878      	ldr	r0, [r7, #4]
 8011194:	f000 f9d0 	bl	8011538 <HAL_TIM_IC_CaptureCallback>
 8011198:	e005      	b.n	80111a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801119a:	6878      	ldr	r0, [r7, #4]
 801119c:	f000 f9c2 	bl	8011524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80111a0:	6878      	ldr	r0, [r7, #4]
 80111a2:	f000 f9d3 	bl	801154c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	2200      	movs	r2, #0
 80111aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	691b      	ldr	r3, [r3, #16]
 80111b2:	f003 0310 	and.w	r3, r3, #16
 80111b6:	2b10      	cmp	r3, #16
 80111b8:	d122      	bne.n	8011200 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	68db      	ldr	r3, [r3, #12]
 80111c0:	f003 0310 	and.w	r3, r3, #16
 80111c4:	2b10      	cmp	r3, #16
 80111c6:	d11b      	bne.n	8011200 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	f06f 0210 	mvn.w	r2, #16
 80111d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	2208      	movs	r2, #8
 80111d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	69db      	ldr	r3, [r3, #28]
 80111de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d003      	beq.n	80111ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80111e6:	6878      	ldr	r0, [r7, #4]
 80111e8:	f000 f9a6 	bl	8011538 <HAL_TIM_IC_CaptureCallback>
 80111ec:	e005      	b.n	80111fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80111ee:	6878      	ldr	r0, [r7, #4]
 80111f0:	f000 f998 	bl	8011524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80111f4:	6878      	ldr	r0, [r7, #4]
 80111f6:	f000 f9a9 	bl	801154c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	2200      	movs	r2, #0
 80111fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	691b      	ldr	r3, [r3, #16]
 8011206:	f003 0301 	and.w	r3, r3, #1
 801120a:	2b01      	cmp	r3, #1
 801120c:	d10e      	bne.n	801122c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	68db      	ldr	r3, [r3, #12]
 8011214:	f003 0301 	and.w	r3, r3, #1
 8011218:	2b01      	cmp	r3, #1
 801121a:	d107      	bne.n	801122c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	f06f 0201 	mvn.w	r2, #1
 8011224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8011226:	6878      	ldr	r0, [r7, #4]
 8011228:	f000 f972 	bl	8011510 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	691b      	ldr	r3, [r3, #16]
 8011232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011236:	2b80      	cmp	r3, #128	; 0x80
 8011238:	d10e      	bne.n	8011258 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	68db      	ldr	r3, [r3, #12]
 8011240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011244:	2b80      	cmp	r3, #128	; 0x80
 8011246:	d107      	bne.n	8011258 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8011250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8011252:	6878      	ldr	r0, [r7, #4]
 8011254:	f000 febc 	bl	8011fd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	691b      	ldr	r3, [r3, #16]
 801125e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011266:	d10e      	bne.n	8011286 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	68db      	ldr	r3, [r3, #12]
 801126e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011272:	2b80      	cmp	r3, #128	; 0x80
 8011274:	d107      	bne.n	8011286 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801127e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8011280:	6878      	ldr	r0, [r7, #4]
 8011282:	f000 feaf 	bl	8011fe4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	691b      	ldr	r3, [r3, #16]
 801128c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011290:	2b40      	cmp	r3, #64	; 0x40
 8011292:	d10e      	bne.n	80112b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	68db      	ldr	r3, [r3, #12]
 801129a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801129e:	2b40      	cmp	r3, #64	; 0x40
 80112a0:	d107      	bne.n	80112b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80112aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80112ac:	6878      	ldr	r0, [r7, #4]
 80112ae:	f000 f961 	bl	8011574 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	691b      	ldr	r3, [r3, #16]
 80112b8:	f003 0320 	and.w	r3, r3, #32
 80112bc:	2b20      	cmp	r3, #32
 80112be:	d10e      	bne.n	80112de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	68db      	ldr	r3, [r3, #12]
 80112c6:	f003 0320 	and.w	r3, r3, #32
 80112ca:	2b20      	cmp	r3, #32
 80112cc:	d107      	bne.n	80112de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	f06f 0220 	mvn.w	r2, #32
 80112d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80112d8:	6878      	ldr	r0, [r7, #4]
 80112da:	f000 fe6f 	bl	8011fbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80112de:	bf00      	nop
 80112e0:	3708      	adds	r7, #8
 80112e2:	46bd      	mov	sp, r7
 80112e4:	bd80      	pop	{r7, pc}
	...

080112e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80112e8:	b580      	push	{r7, lr}
 80112ea:	b086      	sub	sp, #24
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	60f8      	str	r0, [r7, #12]
 80112f0:	60b9      	str	r1, [r7, #8]
 80112f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80112f4:	2300      	movs	r3, #0
 80112f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80112fe:	2b01      	cmp	r3, #1
 8011300:	d101      	bne.n	8011306 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8011302:	2302      	movs	r3, #2
 8011304:	e0ff      	b.n	8011506 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	2201      	movs	r2, #1
 801130a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	2b14      	cmp	r3, #20
 8011312:	f200 80f0 	bhi.w	80114f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8011316:	a201      	add	r2, pc, #4	; (adr r2, 801131c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8011318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801131c:	08011371 	.word	0x08011371
 8011320:	080114f7 	.word	0x080114f7
 8011324:	080114f7 	.word	0x080114f7
 8011328:	080114f7 	.word	0x080114f7
 801132c:	080113b1 	.word	0x080113b1
 8011330:	080114f7 	.word	0x080114f7
 8011334:	080114f7 	.word	0x080114f7
 8011338:	080114f7 	.word	0x080114f7
 801133c:	080113f3 	.word	0x080113f3
 8011340:	080114f7 	.word	0x080114f7
 8011344:	080114f7 	.word	0x080114f7
 8011348:	080114f7 	.word	0x080114f7
 801134c:	08011433 	.word	0x08011433
 8011350:	080114f7 	.word	0x080114f7
 8011354:	080114f7 	.word	0x080114f7
 8011358:	080114f7 	.word	0x080114f7
 801135c:	08011475 	.word	0x08011475
 8011360:	080114f7 	.word	0x080114f7
 8011364:	080114f7 	.word	0x080114f7
 8011368:	080114f7 	.word	0x080114f7
 801136c:	080114b5 	.word	0x080114b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	68b9      	ldr	r1, [r7, #8]
 8011376:	4618      	mov	r0, r3
 8011378:	f000 fa88 	bl	801188c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	699a      	ldr	r2, [r3, #24]
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	f042 0208 	orr.w	r2, r2, #8
 801138a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	699a      	ldr	r2, [r3, #24]
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	f022 0204 	bic.w	r2, r2, #4
 801139a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	6999      	ldr	r1, [r3, #24]
 80113a2:	68bb      	ldr	r3, [r7, #8]
 80113a4:	691a      	ldr	r2, [r3, #16]
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	430a      	orrs	r2, r1
 80113ac:	619a      	str	r2, [r3, #24]
      break;
 80113ae:	e0a5      	b.n	80114fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	68b9      	ldr	r1, [r7, #8]
 80113b6:	4618      	mov	r0, r3
 80113b8:	f000 faf8 	bl	80119ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	699a      	ldr	r2, [r3, #24]
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80113ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	699a      	ldr	r2, [r3, #24]
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80113da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	6999      	ldr	r1, [r3, #24]
 80113e2:	68bb      	ldr	r3, [r7, #8]
 80113e4:	691b      	ldr	r3, [r3, #16]
 80113e6:	021a      	lsls	r2, r3, #8
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	430a      	orrs	r2, r1
 80113ee:	619a      	str	r2, [r3, #24]
      break;
 80113f0:	e084      	b.n	80114fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	68b9      	ldr	r1, [r7, #8]
 80113f8:	4618      	mov	r0, r3
 80113fa:	f000 fb61 	bl	8011ac0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	69da      	ldr	r2, [r3, #28]
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	f042 0208 	orr.w	r2, r2, #8
 801140c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	69da      	ldr	r2, [r3, #28]
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	f022 0204 	bic.w	r2, r2, #4
 801141c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	69d9      	ldr	r1, [r3, #28]
 8011424:	68bb      	ldr	r3, [r7, #8]
 8011426:	691a      	ldr	r2, [r3, #16]
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	430a      	orrs	r2, r1
 801142e:	61da      	str	r2, [r3, #28]
      break;
 8011430:	e064      	b.n	80114fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	68b9      	ldr	r1, [r7, #8]
 8011438:	4618      	mov	r0, r3
 801143a:	f000 fbc9 	bl	8011bd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	69da      	ldr	r2, [r3, #28]
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801144c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	69da      	ldr	r2, [r3, #28]
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801145c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	69d9      	ldr	r1, [r3, #28]
 8011464:	68bb      	ldr	r3, [r7, #8]
 8011466:	691b      	ldr	r3, [r3, #16]
 8011468:	021a      	lsls	r2, r3, #8
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	430a      	orrs	r2, r1
 8011470:	61da      	str	r2, [r3, #28]
      break;
 8011472:	e043      	b.n	80114fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	68b9      	ldr	r1, [r7, #8]
 801147a:	4618      	mov	r0, r3
 801147c:	f000 fc12 	bl	8011ca4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	f042 0208 	orr.w	r2, r2, #8
 801148e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	f022 0204 	bic.w	r2, r2, #4
 801149e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80114a6:	68bb      	ldr	r3, [r7, #8]
 80114a8:	691a      	ldr	r2, [r3, #16]
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	430a      	orrs	r2, r1
 80114b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80114b2:	e023      	b.n	80114fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	68b9      	ldr	r1, [r7, #8]
 80114ba:	4618      	mov	r0, r3
 80114bc:	f000 fc56 	bl	8011d6c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80114ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80114de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80114e6:	68bb      	ldr	r3, [r7, #8]
 80114e8:	691b      	ldr	r3, [r3, #16]
 80114ea:	021a      	lsls	r2, r3, #8
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	430a      	orrs	r2, r1
 80114f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80114f4:	e002      	b.n	80114fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80114f6:	2301      	movs	r3, #1
 80114f8:	75fb      	strb	r3, [r7, #23]
      break;
 80114fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	2200      	movs	r2, #0
 8011500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011504:	7dfb      	ldrb	r3, [r7, #23]
}
 8011506:	4618      	mov	r0, r3
 8011508:	3718      	adds	r7, #24
 801150a:	46bd      	mov	sp, r7
 801150c:	bd80      	pop	{r7, pc}
 801150e:	bf00      	nop

08011510 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011510:	b480      	push	{r7}
 8011512:	b083      	sub	sp, #12
 8011514:	af00      	add	r7, sp, #0
 8011516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8011518:	bf00      	nop
 801151a:	370c      	adds	r7, #12
 801151c:	46bd      	mov	sp, r7
 801151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011522:	4770      	bx	lr

08011524 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011524:	b480      	push	{r7}
 8011526:	b083      	sub	sp, #12
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801152c:	bf00      	nop
 801152e:	370c      	adds	r7, #12
 8011530:	46bd      	mov	sp, r7
 8011532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011536:	4770      	bx	lr

08011538 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8011538:	b480      	push	{r7}
 801153a:	b083      	sub	sp, #12
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8011540:	bf00      	nop
 8011542:	370c      	adds	r7, #12
 8011544:	46bd      	mov	sp, r7
 8011546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154a:	4770      	bx	lr

0801154c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801154c:	b480      	push	{r7}
 801154e:	b083      	sub	sp, #12
 8011550:	af00      	add	r7, sp, #0
 8011552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8011554:	bf00      	nop
 8011556:	370c      	adds	r7, #12
 8011558:	46bd      	mov	sp, r7
 801155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801155e:	4770      	bx	lr

08011560 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8011560:	b480      	push	{r7}
 8011562:	b083      	sub	sp, #12
 8011564:	af00      	add	r7, sp, #0
 8011566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8011568:	bf00      	nop
 801156a:	370c      	adds	r7, #12
 801156c:	46bd      	mov	sp, r7
 801156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011572:	4770      	bx	lr

08011574 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8011574:	b480      	push	{r7}
 8011576:	b083      	sub	sp, #12
 8011578:	af00      	add	r7, sp, #0
 801157a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801157c:	bf00      	nop
 801157e:	370c      	adds	r7, #12
 8011580:	46bd      	mov	sp, r7
 8011582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011586:	4770      	bx	lr

08011588 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8011588:	b480      	push	{r7}
 801158a:	b083      	sub	sp, #12
 801158c:	af00      	add	r7, sp, #0
 801158e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8011590:	bf00      	nop
 8011592:	370c      	adds	r7, #12
 8011594:	46bd      	mov	sp, r7
 8011596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159a:	4770      	bx	lr

0801159c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 801159c:	b580      	push	{r7, lr}
 801159e:	b084      	sub	sp, #16
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115a8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115ae:	687a      	ldr	r2, [r7, #4]
 80115b0:	429a      	cmp	r2, r3
 80115b2:	d107      	bne.n	80115c4 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	2201      	movs	r2, #1
 80115b8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	2201      	movs	r2, #1
 80115be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80115c2:	e02a      	b.n	801161a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115c8:	687a      	ldr	r2, [r7, #4]
 80115ca:	429a      	cmp	r2, r3
 80115cc:	d107      	bne.n	80115de <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	2202      	movs	r2, #2
 80115d2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	2201      	movs	r2, #1
 80115d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80115dc:	e01d      	b.n	801161a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115e2:	687a      	ldr	r2, [r7, #4]
 80115e4:	429a      	cmp	r2, r3
 80115e6:	d107      	bne.n	80115f8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	2204      	movs	r2, #4
 80115ec:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	2201      	movs	r2, #1
 80115f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80115f6:	e010      	b.n	801161a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115fc:	687a      	ldr	r2, [r7, #4]
 80115fe:	429a      	cmp	r2, r3
 8011600:	d107      	bne.n	8011612 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	2208      	movs	r2, #8
 8011606:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	2201      	movs	r2, #1
 801160c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011610:	e003      	b.n	801161a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	2201      	movs	r2, #1
 8011616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 801161a:	68f8      	ldr	r0, [r7, #12]
 801161c:	f7ff ffb4 	bl	8011588 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	2200      	movs	r2, #0
 8011624:	771a      	strb	r2, [r3, #28]
}
 8011626:	bf00      	nop
 8011628:	3710      	adds	r7, #16
 801162a:	46bd      	mov	sp, r7
 801162c:	bd80      	pop	{r7, pc}

0801162e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 801162e:	b580      	push	{r7, lr}
 8011630:	b084      	sub	sp, #16
 8011632:	af00      	add	r7, sp, #0
 8011634:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801163a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011640:	687a      	ldr	r2, [r7, #4]
 8011642:	429a      	cmp	r2, r3
 8011644:	d10b      	bne.n	801165e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	2201      	movs	r2, #1
 801164a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	69db      	ldr	r3, [r3, #28]
 8011650:	2b00      	cmp	r3, #0
 8011652:	d136      	bne.n	80116c2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	2201      	movs	r2, #1
 8011658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801165c:	e031      	b.n	80116c2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011662:	687a      	ldr	r2, [r7, #4]
 8011664:	429a      	cmp	r2, r3
 8011666:	d10b      	bne.n	8011680 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	2202      	movs	r2, #2
 801166c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	69db      	ldr	r3, [r3, #28]
 8011672:	2b00      	cmp	r3, #0
 8011674:	d125      	bne.n	80116c2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	2201      	movs	r2, #1
 801167a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801167e:	e020      	b.n	80116c2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011684:	687a      	ldr	r2, [r7, #4]
 8011686:	429a      	cmp	r2, r3
 8011688:	d10b      	bne.n	80116a2 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	2204      	movs	r2, #4
 801168e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	69db      	ldr	r3, [r3, #28]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d114      	bne.n	80116c2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	2201      	movs	r2, #1
 801169c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80116a0:	e00f      	b.n	80116c2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116a6:	687a      	ldr	r2, [r7, #4]
 80116a8:	429a      	cmp	r2, r3
 80116aa:	d10a      	bne.n	80116c2 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	2208      	movs	r2, #8
 80116b0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	69db      	ldr	r3, [r3, #28]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d103      	bne.n	80116c2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	2201      	movs	r2, #1
 80116be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80116c2:	68f8      	ldr	r0, [r7, #12]
 80116c4:	f7ff ff42 	bl	801154c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	2200      	movs	r2, #0
 80116cc:	771a      	strb	r2, [r3, #28]
}
 80116ce:	bf00      	nop
 80116d0:	3710      	adds	r7, #16
 80116d2:	46bd      	mov	sp, r7
 80116d4:	bd80      	pop	{r7, pc}

080116d6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80116d6:	b580      	push	{r7, lr}
 80116d8:	b084      	sub	sp, #16
 80116da:	af00      	add	r7, sp, #0
 80116dc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116e2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116e8:	687a      	ldr	r2, [r7, #4]
 80116ea:	429a      	cmp	r2, r3
 80116ec:	d103      	bne.n	80116f6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	2201      	movs	r2, #1
 80116f2:	771a      	strb	r2, [r3, #28]
 80116f4:	e019      	b.n	801172a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80116fa:	687a      	ldr	r2, [r7, #4]
 80116fc:	429a      	cmp	r2, r3
 80116fe:	d103      	bne.n	8011708 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	2202      	movs	r2, #2
 8011704:	771a      	strb	r2, [r3, #28]
 8011706:	e010      	b.n	801172a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801170c:	687a      	ldr	r2, [r7, #4]
 801170e:	429a      	cmp	r2, r3
 8011710:	d103      	bne.n	801171a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	2204      	movs	r2, #4
 8011716:	771a      	strb	r2, [r3, #28]
 8011718:	e007      	b.n	801172a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801171e:	687a      	ldr	r2, [r7, #4]
 8011720:	429a      	cmp	r2, r3
 8011722:	d102      	bne.n	801172a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	2208      	movs	r2, #8
 8011728:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 801172a:	68f8      	ldr	r0, [r7, #12]
 801172c:	f7ff ff18 	bl	8011560 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	2200      	movs	r2, #0
 8011734:	771a      	strb	r2, [r3, #28]
}
 8011736:	bf00      	nop
 8011738:	3710      	adds	r7, #16
 801173a:	46bd      	mov	sp, r7
 801173c:	bd80      	pop	{r7, pc}
	...

08011740 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8011740:	b480      	push	{r7}
 8011742:	b085      	sub	sp, #20
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]
 8011748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	4a44      	ldr	r2, [pc, #272]	; (8011864 <TIM_Base_SetConfig+0x124>)
 8011754:	4293      	cmp	r3, r2
 8011756:	d013      	beq.n	8011780 <TIM_Base_SetConfig+0x40>
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801175e:	d00f      	beq.n	8011780 <TIM_Base_SetConfig+0x40>
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	4a41      	ldr	r2, [pc, #260]	; (8011868 <TIM_Base_SetConfig+0x128>)
 8011764:	4293      	cmp	r3, r2
 8011766:	d00b      	beq.n	8011780 <TIM_Base_SetConfig+0x40>
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	4a40      	ldr	r2, [pc, #256]	; (801186c <TIM_Base_SetConfig+0x12c>)
 801176c:	4293      	cmp	r3, r2
 801176e:	d007      	beq.n	8011780 <TIM_Base_SetConfig+0x40>
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	4a3f      	ldr	r2, [pc, #252]	; (8011870 <TIM_Base_SetConfig+0x130>)
 8011774:	4293      	cmp	r3, r2
 8011776:	d003      	beq.n	8011780 <TIM_Base_SetConfig+0x40>
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	4a3e      	ldr	r2, [pc, #248]	; (8011874 <TIM_Base_SetConfig+0x134>)
 801177c:	4293      	cmp	r3, r2
 801177e:	d108      	bne.n	8011792 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011786:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011788:	683b      	ldr	r3, [r7, #0]
 801178a:	685b      	ldr	r3, [r3, #4]
 801178c:	68fa      	ldr	r2, [r7, #12]
 801178e:	4313      	orrs	r3, r2
 8011790:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	4a33      	ldr	r2, [pc, #204]	; (8011864 <TIM_Base_SetConfig+0x124>)
 8011796:	4293      	cmp	r3, r2
 8011798:	d027      	beq.n	80117ea <TIM_Base_SetConfig+0xaa>
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80117a0:	d023      	beq.n	80117ea <TIM_Base_SetConfig+0xaa>
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	4a30      	ldr	r2, [pc, #192]	; (8011868 <TIM_Base_SetConfig+0x128>)
 80117a6:	4293      	cmp	r3, r2
 80117a8:	d01f      	beq.n	80117ea <TIM_Base_SetConfig+0xaa>
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	4a2f      	ldr	r2, [pc, #188]	; (801186c <TIM_Base_SetConfig+0x12c>)
 80117ae:	4293      	cmp	r3, r2
 80117b0:	d01b      	beq.n	80117ea <TIM_Base_SetConfig+0xaa>
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	4a2e      	ldr	r2, [pc, #184]	; (8011870 <TIM_Base_SetConfig+0x130>)
 80117b6:	4293      	cmp	r3, r2
 80117b8:	d017      	beq.n	80117ea <TIM_Base_SetConfig+0xaa>
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	4a2d      	ldr	r2, [pc, #180]	; (8011874 <TIM_Base_SetConfig+0x134>)
 80117be:	4293      	cmp	r3, r2
 80117c0:	d013      	beq.n	80117ea <TIM_Base_SetConfig+0xaa>
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	4a2c      	ldr	r2, [pc, #176]	; (8011878 <TIM_Base_SetConfig+0x138>)
 80117c6:	4293      	cmp	r3, r2
 80117c8:	d00f      	beq.n	80117ea <TIM_Base_SetConfig+0xaa>
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	4a2b      	ldr	r2, [pc, #172]	; (801187c <TIM_Base_SetConfig+0x13c>)
 80117ce:	4293      	cmp	r3, r2
 80117d0:	d00b      	beq.n	80117ea <TIM_Base_SetConfig+0xaa>
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	4a2a      	ldr	r2, [pc, #168]	; (8011880 <TIM_Base_SetConfig+0x140>)
 80117d6:	4293      	cmp	r3, r2
 80117d8:	d007      	beq.n	80117ea <TIM_Base_SetConfig+0xaa>
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	4a29      	ldr	r2, [pc, #164]	; (8011884 <TIM_Base_SetConfig+0x144>)
 80117de:	4293      	cmp	r3, r2
 80117e0:	d003      	beq.n	80117ea <TIM_Base_SetConfig+0xaa>
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	4a28      	ldr	r2, [pc, #160]	; (8011888 <TIM_Base_SetConfig+0x148>)
 80117e6:	4293      	cmp	r3, r2
 80117e8:	d108      	bne.n	80117fc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80117f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80117f2:	683b      	ldr	r3, [r7, #0]
 80117f4:	68db      	ldr	r3, [r3, #12]
 80117f6:	68fa      	ldr	r2, [r7, #12]
 80117f8:	4313      	orrs	r3, r2
 80117fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011802:	683b      	ldr	r3, [r7, #0]
 8011804:	695b      	ldr	r3, [r3, #20]
 8011806:	4313      	orrs	r3, r2
 8011808:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	68fa      	ldr	r2, [r7, #12]
 801180e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011810:	683b      	ldr	r3, [r7, #0]
 8011812:	689a      	ldr	r2, [r3, #8]
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011818:	683b      	ldr	r3, [r7, #0]
 801181a:	681a      	ldr	r2, [r3, #0]
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	4a10      	ldr	r2, [pc, #64]	; (8011864 <TIM_Base_SetConfig+0x124>)
 8011824:	4293      	cmp	r3, r2
 8011826:	d00f      	beq.n	8011848 <TIM_Base_SetConfig+0x108>
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	4a12      	ldr	r2, [pc, #72]	; (8011874 <TIM_Base_SetConfig+0x134>)
 801182c:	4293      	cmp	r3, r2
 801182e:	d00b      	beq.n	8011848 <TIM_Base_SetConfig+0x108>
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	4a11      	ldr	r2, [pc, #68]	; (8011878 <TIM_Base_SetConfig+0x138>)
 8011834:	4293      	cmp	r3, r2
 8011836:	d007      	beq.n	8011848 <TIM_Base_SetConfig+0x108>
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	4a10      	ldr	r2, [pc, #64]	; (801187c <TIM_Base_SetConfig+0x13c>)
 801183c:	4293      	cmp	r3, r2
 801183e:	d003      	beq.n	8011848 <TIM_Base_SetConfig+0x108>
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	4a0f      	ldr	r2, [pc, #60]	; (8011880 <TIM_Base_SetConfig+0x140>)
 8011844:	4293      	cmp	r3, r2
 8011846:	d103      	bne.n	8011850 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011848:	683b      	ldr	r3, [r7, #0]
 801184a:	691a      	ldr	r2, [r3, #16]
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	2201      	movs	r2, #1
 8011854:	615a      	str	r2, [r3, #20]
}
 8011856:	bf00      	nop
 8011858:	3714      	adds	r7, #20
 801185a:	46bd      	mov	sp, r7
 801185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011860:	4770      	bx	lr
 8011862:	bf00      	nop
 8011864:	40010000 	.word	0x40010000
 8011868:	40000400 	.word	0x40000400
 801186c:	40000800 	.word	0x40000800
 8011870:	40000c00 	.word	0x40000c00
 8011874:	40010400 	.word	0x40010400
 8011878:	40014000 	.word	0x40014000
 801187c:	40014400 	.word	0x40014400
 8011880:	40014800 	.word	0x40014800
 8011884:	4000e000 	.word	0x4000e000
 8011888:	4000e400 	.word	0x4000e400

0801188c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801188c:	b480      	push	{r7}
 801188e:	b087      	sub	sp, #28
 8011890:	af00      	add	r7, sp, #0
 8011892:	6078      	str	r0, [r7, #4]
 8011894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	6a1b      	ldr	r3, [r3, #32]
 801189a:	f023 0201 	bic.w	r2, r3, #1
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	6a1b      	ldr	r3, [r3, #32]
 80118a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	685b      	ldr	r3, [r3, #4]
 80118ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	699b      	ldr	r3, [r3, #24]
 80118b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80118b4:	68fa      	ldr	r2, [r7, #12]
 80118b6:	4b37      	ldr	r3, [pc, #220]	; (8011994 <TIM_OC1_SetConfig+0x108>)
 80118b8:	4013      	ands	r3, r2
 80118ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	f023 0303 	bic.w	r3, r3, #3
 80118c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80118c4:	683b      	ldr	r3, [r7, #0]
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	68fa      	ldr	r2, [r7, #12]
 80118ca:	4313      	orrs	r3, r2
 80118cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80118ce:	697b      	ldr	r3, [r7, #20]
 80118d0:	f023 0302 	bic.w	r3, r3, #2
 80118d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80118d6:	683b      	ldr	r3, [r7, #0]
 80118d8:	689b      	ldr	r3, [r3, #8]
 80118da:	697a      	ldr	r2, [r7, #20]
 80118dc:	4313      	orrs	r3, r2
 80118de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	4a2d      	ldr	r2, [pc, #180]	; (8011998 <TIM_OC1_SetConfig+0x10c>)
 80118e4:	4293      	cmp	r3, r2
 80118e6:	d00f      	beq.n	8011908 <TIM_OC1_SetConfig+0x7c>
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	4a2c      	ldr	r2, [pc, #176]	; (801199c <TIM_OC1_SetConfig+0x110>)
 80118ec:	4293      	cmp	r3, r2
 80118ee:	d00b      	beq.n	8011908 <TIM_OC1_SetConfig+0x7c>
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	4a2b      	ldr	r2, [pc, #172]	; (80119a0 <TIM_OC1_SetConfig+0x114>)
 80118f4:	4293      	cmp	r3, r2
 80118f6:	d007      	beq.n	8011908 <TIM_OC1_SetConfig+0x7c>
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	4a2a      	ldr	r2, [pc, #168]	; (80119a4 <TIM_OC1_SetConfig+0x118>)
 80118fc:	4293      	cmp	r3, r2
 80118fe:	d003      	beq.n	8011908 <TIM_OC1_SetConfig+0x7c>
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	4a29      	ldr	r2, [pc, #164]	; (80119a8 <TIM_OC1_SetConfig+0x11c>)
 8011904:	4293      	cmp	r3, r2
 8011906:	d10c      	bne.n	8011922 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011908:	697b      	ldr	r3, [r7, #20]
 801190a:	f023 0308 	bic.w	r3, r3, #8
 801190e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8011910:	683b      	ldr	r3, [r7, #0]
 8011912:	68db      	ldr	r3, [r3, #12]
 8011914:	697a      	ldr	r2, [r7, #20]
 8011916:	4313      	orrs	r3, r2
 8011918:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801191a:	697b      	ldr	r3, [r7, #20]
 801191c:	f023 0304 	bic.w	r3, r3, #4
 8011920:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	4a1c      	ldr	r2, [pc, #112]	; (8011998 <TIM_OC1_SetConfig+0x10c>)
 8011926:	4293      	cmp	r3, r2
 8011928:	d00f      	beq.n	801194a <TIM_OC1_SetConfig+0xbe>
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	4a1b      	ldr	r2, [pc, #108]	; (801199c <TIM_OC1_SetConfig+0x110>)
 801192e:	4293      	cmp	r3, r2
 8011930:	d00b      	beq.n	801194a <TIM_OC1_SetConfig+0xbe>
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	4a1a      	ldr	r2, [pc, #104]	; (80119a0 <TIM_OC1_SetConfig+0x114>)
 8011936:	4293      	cmp	r3, r2
 8011938:	d007      	beq.n	801194a <TIM_OC1_SetConfig+0xbe>
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	4a19      	ldr	r2, [pc, #100]	; (80119a4 <TIM_OC1_SetConfig+0x118>)
 801193e:	4293      	cmp	r3, r2
 8011940:	d003      	beq.n	801194a <TIM_OC1_SetConfig+0xbe>
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	4a18      	ldr	r2, [pc, #96]	; (80119a8 <TIM_OC1_SetConfig+0x11c>)
 8011946:	4293      	cmp	r3, r2
 8011948:	d111      	bne.n	801196e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801194a:	693b      	ldr	r3, [r7, #16]
 801194c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011950:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8011952:	693b      	ldr	r3, [r7, #16]
 8011954:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011958:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801195a:	683b      	ldr	r3, [r7, #0]
 801195c:	695b      	ldr	r3, [r3, #20]
 801195e:	693a      	ldr	r2, [r7, #16]
 8011960:	4313      	orrs	r3, r2
 8011962:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8011964:	683b      	ldr	r3, [r7, #0]
 8011966:	699b      	ldr	r3, [r3, #24]
 8011968:	693a      	ldr	r2, [r7, #16]
 801196a:	4313      	orrs	r3, r2
 801196c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	693a      	ldr	r2, [r7, #16]
 8011972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	68fa      	ldr	r2, [r7, #12]
 8011978:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801197a:	683b      	ldr	r3, [r7, #0]
 801197c:	685a      	ldr	r2, [r3, #4]
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	697a      	ldr	r2, [r7, #20]
 8011986:	621a      	str	r2, [r3, #32]
}
 8011988:	bf00      	nop
 801198a:	371c      	adds	r7, #28
 801198c:	46bd      	mov	sp, r7
 801198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011992:	4770      	bx	lr
 8011994:	fffeff8f 	.word	0xfffeff8f
 8011998:	40010000 	.word	0x40010000
 801199c:	40010400 	.word	0x40010400
 80119a0:	40014000 	.word	0x40014000
 80119a4:	40014400 	.word	0x40014400
 80119a8:	40014800 	.word	0x40014800

080119ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80119ac:	b480      	push	{r7}
 80119ae:	b087      	sub	sp, #28
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	6078      	str	r0, [r7, #4]
 80119b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	6a1b      	ldr	r3, [r3, #32]
 80119ba:	f023 0210 	bic.w	r2, r3, #16
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	6a1b      	ldr	r3, [r3, #32]
 80119c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	685b      	ldr	r3, [r3, #4]
 80119cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	699b      	ldr	r3, [r3, #24]
 80119d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80119d4:	68fa      	ldr	r2, [r7, #12]
 80119d6:	4b34      	ldr	r3, [pc, #208]	; (8011aa8 <TIM_OC2_SetConfig+0xfc>)
 80119d8:	4013      	ands	r3, r2
 80119da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80119e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80119e4:	683b      	ldr	r3, [r7, #0]
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	021b      	lsls	r3, r3, #8
 80119ea:	68fa      	ldr	r2, [r7, #12]
 80119ec:	4313      	orrs	r3, r2
 80119ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80119f0:	697b      	ldr	r3, [r7, #20]
 80119f2:	f023 0320 	bic.w	r3, r3, #32
 80119f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80119f8:	683b      	ldr	r3, [r7, #0]
 80119fa:	689b      	ldr	r3, [r3, #8]
 80119fc:	011b      	lsls	r3, r3, #4
 80119fe:	697a      	ldr	r2, [r7, #20]
 8011a00:	4313      	orrs	r3, r2
 8011a02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	4a29      	ldr	r2, [pc, #164]	; (8011aac <TIM_OC2_SetConfig+0x100>)
 8011a08:	4293      	cmp	r3, r2
 8011a0a:	d003      	beq.n	8011a14 <TIM_OC2_SetConfig+0x68>
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	4a28      	ldr	r2, [pc, #160]	; (8011ab0 <TIM_OC2_SetConfig+0x104>)
 8011a10:	4293      	cmp	r3, r2
 8011a12:	d10d      	bne.n	8011a30 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8011a14:	697b      	ldr	r3, [r7, #20]
 8011a16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011a1c:	683b      	ldr	r3, [r7, #0]
 8011a1e:	68db      	ldr	r3, [r3, #12]
 8011a20:	011b      	lsls	r3, r3, #4
 8011a22:	697a      	ldr	r2, [r7, #20]
 8011a24:	4313      	orrs	r3, r2
 8011a26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011a28:	697b      	ldr	r3, [r7, #20]
 8011a2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011a2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	4a1e      	ldr	r2, [pc, #120]	; (8011aac <TIM_OC2_SetConfig+0x100>)
 8011a34:	4293      	cmp	r3, r2
 8011a36:	d00f      	beq.n	8011a58 <TIM_OC2_SetConfig+0xac>
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	4a1d      	ldr	r2, [pc, #116]	; (8011ab0 <TIM_OC2_SetConfig+0x104>)
 8011a3c:	4293      	cmp	r3, r2
 8011a3e:	d00b      	beq.n	8011a58 <TIM_OC2_SetConfig+0xac>
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	4a1c      	ldr	r2, [pc, #112]	; (8011ab4 <TIM_OC2_SetConfig+0x108>)
 8011a44:	4293      	cmp	r3, r2
 8011a46:	d007      	beq.n	8011a58 <TIM_OC2_SetConfig+0xac>
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	4a1b      	ldr	r2, [pc, #108]	; (8011ab8 <TIM_OC2_SetConfig+0x10c>)
 8011a4c:	4293      	cmp	r3, r2
 8011a4e:	d003      	beq.n	8011a58 <TIM_OC2_SetConfig+0xac>
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	4a1a      	ldr	r2, [pc, #104]	; (8011abc <TIM_OC2_SetConfig+0x110>)
 8011a54:	4293      	cmp	r3, r2
 8011a56:	d113      	bne.n	8011a80 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011a58:	693b      	ldr	r3, [r7, #16]
 8011a5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011a5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011a60:	693b      	ldr	r3, [r7, #16]
 8011a62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011a66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011a68:	683b      	ldr	r3, [r7, #0]
 8011a6a:	695b      	ldr	r3, [r3, #20]
 8011a6c:	009b      	lsls	r3, r3, #2
 8011a6e:	693a      	ldr	r2, [r7, #16]
 8011a70:	4313      	orrs	r3, r2
 8011a72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011a74:	683b      	ldr	r3, [r7, #0]
 8011a76:	699b      	ldr	r3, [r3, #24]
 8011a78:	009b      	lsls	r3, r3, #2
 8011a7a:	693a      	ldr	r2, [r7, #16]
 8011a7c:	4313      	orrs	r3, r2
 8011a7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	693a      	ldr	r2, [r7, #16]
 8011a84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	68fa      	ldr	r2, [r7, #12]
 8011a8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011a8c:	683b      	ldr	r3, [r7, #0]
 8011a8e:	685a      	ldr	r2, [r3, #4]
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	697a      	ldr	r2, [r7, #20]
 8011a98:	621a      	str	r2, [r3, #32]
}
 8011a9a:	bf00      	nop
 8011a9c:	371c      	adds	r7, #28
 8011a9e:	46bd      	mov	sp, r7
 8011aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa4:	4770      	bx	lr
 8011aa6:	bf00      	nop
 8011aa8:	feff8fff 	.word	0xfeff8fff
 8011aac:	40010000 	.word	0x40010000
 8011ab0:	40010400 	.word	0x40010400
 8011ab4:	40014000 	.word	0x40014000
 8011ab8:	40014400 	.word	0x40014400
 8011abc:	40014800 	.word	0x40014800

08011ac0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011ac0:	b480      	push	{r7}
 8011ac2:	b087      	sub	sp, #28
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	6078      	str	r0, [r7, #4]
 8011ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	6a1b      	ldr	r3, [r3, #32]
 8011ace:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	6a1b      	ldr	r3, [r3, #32]
 8011ada:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	685b      	ldr	r3, [r3, #4]
 8011ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	69db      	ldr	r3, [r3, #28]
 8011ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011ae8:	68fa      	ldr	r2, [r7, #12]
 8011aea:	4b33      	ldr	r3, [pc, #204]	; (8011bb8 <TIM_OC3_SetConfig+0xf8>)
 8011aec:	4013      	ands	r3, r2
 8011aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	f023 0303 	bic.w	r3, r3, #3
 8011af6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011af8:	683b      	ldr	r3, [r7, #0]
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	68fa      	ldr	r2, [r7, #12]
 8011afe:	4313      	orrs	r3, r2
 8011b00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8011b02:	697b      	ldr	r3, [r7, #20]
 8011b04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011b08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011b0a:	683b      	ldr	r3, [r7, #0]
 8011b0c:	689b      	ldr	r3, [r3, #8]
 8011b0e:	021b      	lsls	r3, r3, #8
 8011b10:	697a      	ldr	r2, [r7, #20]
 8011b12:	4313      	orrs	r3, r2
 8011b14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	4a28      	ldr	r2, [pc, #160]	; (8011bbc <TIM_OC3_SetConfig+0xfc>)
 8011b1a:	4293      	cmp	r3, r2
 8011b1c:	d003      	beq.n	8011b26 <TIM_OC3_SetConfig+0x66>
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	4a27      	ldr	r2, [pc, #156]	; (8011bc0 <TIM_OC3_SetConfig+0x100>)
 8011b22:	4293      	cmp	r3, r2
 8011b24:	d10d      	bne.n	8011b42 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8011b26:	697b      	ldr	r3, [r7, #20]
 8011b28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011b2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8011b2e:	683b      	ldr	r3, [r7, #0]
 8011b30:	68db      	ldr	r3, [r3, #12]
 8011b32:	021b      	lsls	r3, r3, #8
 8011b34:	697a      	ldr	r2, [r7, #20]
 8011b36:	4313      	orrs	r3, r2
 8011b38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011b3a:	697b      	ldr	r3, [r7, #20]
 8011b3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011b40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	4a1d      	ldr	r2, [pc, #116]	; (8011bbc <TIM_OC3_SetConfig+0xfc>)
 8011b46:	4293      	cmp	r3, r2
 8011b48:	d00f      	beq.n	8011b6a <TIM_OC3_SetConfig+0xaa>
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	4a1c      	ldr	r2, [pc, #112]	; (8011bc0 <TIM_OC3_SetConfig+0x100>)
 8011b4e:	4293      	cmp	r3, r2
 8011b50:	d00b      	beq.n	8011b6a <TIM_OC3_SetConfig+0xaa>
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	4a1b      	ldr	r2, [pc, #108]	; (8011bc4 <TIM_OC3_SetConfig+0x104>)
 8011b56:	4293      	cmp	r3, r2
 8011b58:	d007      	beq.n	8011b6a <TIM_OC3_SetConfig+0xaa>
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	4a1a      	ldr	r2, [pc, #104]	; (8011bc8 <TIM_OC3_SetConfig+0x108>)
 8011b5e:	4293      	cmp	r3, r2
 8011b60:	d003      	beq.n	8011b6a <TIM_OC3_SetConfig+0xaa>
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	4a19      	ldr	r2, [pc, #100]	; (8011bcc <TIM_OC3_SetConfig+0x10c>)
 8011b66:	4293      	cmp	r3, r2
 8011b68:	d113      	bne.n	8011b92 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011b6a:	693b      	ldr	r3, [r7, #16]
 8011b6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011b70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8011b72:	693b      	ldr	r3, [r7, #16]
 8011b74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011b78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011b7a:	683b      	ldr	r3, [r7, #0]
 8011b7c:	695b      	ldr	r3, [r3, #20]
 8011b7e:	011b      	lsls	r3, r3, #4
 8011b80:	693a      	ldr	r2, [r7, #16]
 8011b82:	4313      	orrs	r3, r2
 8011b84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011b86:	683b      	ldr	r3, [r7, #0]
 8011b88:	699b      	ldr	r3, [r3, #24]
 8011b8a:	011b      	lsls	r3, r3, #4
 8011b8c:	693a      	ldr	r2, [r7, #16]
 8011b8e:	4313      	orrs	r3, r2
 8011b90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	693a      	ldr	r2, [r7, #16]
 8011b96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	68fa      	ldr	r2, [r7, #12]
 8011b9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011b9e:	683b      	ldr	r3, [r7, #0]
 8011ba0:	685a      	ldr	r2, [r3, #4]
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	697a      	ldr	r2, [r7, #20]
 8011baa:	621a      	str	r2, [r3, #32]
}
 8011bac:	bf00      	nop
 8011bae:	371c      	adds	r7, #28
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb6:	4770      	bx	lr
 8011bb8:	fffeff8f 	.word	0xfffeff8f
 8011bbc:	40010000 	.word	0x40010000
 8011bc0:	40010400 	.word	0x40010400
 8011bc4:	40014000 	.word	0x40014000
 8011bc8:	40014400 	.word	0x40014400
 8011bcc:	40014800 	.word	0x40014800

08011bd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011bd0:	b480      	push	{r7}
 8011bd2:	b087      	sub	sp, #28
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	6078      	str	r0, [r7, #4]
 8011bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	6a1b      	ldr	r3, [r3, #32]
 8011bde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	6a1b      	ldr	r3, [r3, #32]
 8011bea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	685b      	ldr	r3, [r3, #4]
 8011bf0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	69db      	ldr	r3, [r3, #28]
 8011bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011bf8:	68fa      	ldr	r2, [r7, #12]
 8011bfa:	4b24      	ldr	r3, [pc, #144]	; (8011c8c <TIM_OC4_SetConfig+0xbc>)
 8011bfc:	4013      	ands	r3, r2
 8011bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011c06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011c08:	683b      	ldr	r3, [r7, #0]
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	021b      	lsls	r3, r3, #8
 8011c0e:	68fa      	ldr	r2, [r7, #12]
 8011c10:	4313      	orrs	r3, r2
 8011c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011c14:	693b      	ldr	r3, [r7, #16]
 8011c16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011c1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011c1c:	683b      	ldr	r3, [r7, #0]
 8011c1e:	689b      	ldr	r3, [r3, #8]
 8011c20:	031b      	lsls	r3, r3, #12
 8011c22:	693a      	ldr	r2, [r7, #16]
 8011c24:	4313      	orrs	r3, r2
 8011c26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	4a19      	ldr	r2, [pc, #100]	; (8011c90 <TIM_OC4_SetConfig+0xc0>)
 8011c2c:	4293      	cmp	r3, r2
 8011c2e:	d00f      	beq.n	8011c50 <TIM_OC4_SetConfig+0x80>
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	4a18      	ldr	r2, [pc, #96]	; (8011c94 <TIM_OC4_SetConfig+0xc4>)
 8011c34:	4293      	cmp	r3, r2
 8011c36:	d00b      	beq.n	8011c50 <TIM_OC4_SetConfig+0x80>
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	4a17      	ldr	r2, [pc, #92]	; (8011c98 <TIM_OC4_SetConfig+0xc8>)
 8011c3c:	4293      	cmp	r3, r2
 8011c3e:	d007      	beq.n	8011c50 <TIM_OC4_SetConfig+0x80>
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	4a16      	ldr	r2, [pc, #88]	; (8011c9c <TIM_OC4_SetConfig+0xcc>)
 8011c44:	4293      	cmp	r3, r2
 8011c46:	d003      	beq.n	8011c50 <TIM_OC4_SetConfig+0x80>
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	4a15      	ldr	r2, [pc, #84]	; (8011ca0 <TIM_OC4_SetConfig+0xd0>)
 8011c4c:	4293      	cmp	r3, r2
 8011c4e:	d109      	bne.n	8011c64 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011c50:	697b      	ldr	r3, [r7, #20]
 8011c52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011c56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011c58:	683b      	ldr	r3, [r7, #0]
 8011c5a:	695b      	ldr	r3, [r3, #20]
 8011c5c:	019b      	lsls	r3, r3, #6
 8011c5e:	697a      	ldr	r2, [r7, #20]
 8011c60:	4313      	orrs	r3, r2
 8011c62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	697a      	ldr	r2, [r7, #20]
 8011c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	68fa      	ldr	r2, [r7, #12]
 8011c6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011c70:	683b      	ldr	r3, [r7, #0]
 8011c72:	685a      	ldr	r2, [r3, #4]
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	693a      	ldr	r2, [r7, #16]
 8011c7c:	621a      	str	r2, [r3, #32]
}
 8011c7e:	bf00      	nop
 8011c80:	371c      	adds	r7, #28
 8011c82:	46bd      	mov	sp, r7
 8011c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c88:	4770      	bx	lr
 8011c8a:	bf00      	nop
 8011c8c:	feff8fff 	.word	0xfeff8fff
 8011c90:	40010000 	.word	0x40010000
 8011c94:	40010400 	.word	0x40010400
 8011c98:	40014000 	.word	0x40014000
 8011c9c:	40014400 	.word	0x40014400
 8011ca0:	40014800 	.word	0x40014800

08011ca4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011ca4:	b480      	push	{r7}
 8011ca6:	b087      	sub	sp, #28
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	6078      	str	r0, [r7, #4]
 8011cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	6a1b      	ldr	r3, [r3, #32]
 8011cb2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	6a1b      	ldr	r3, [r3, #32]
 8011cbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	685b      	ldr	r3, [r3, #4]
 8011cc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011ccc:	68fa      	ldr	r2, [r7, #12]
 8011cce:	4b21      	ldr	r3, [pc, #132]	; (8011d54 <TIM_OC5_SetConfig+0xb0>)
 8011cd0:	4013      	ands	r3, r2
 8011cd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011cd4:	683b      	ldr	r3, [r7, #0]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	68fa      	ldr	r2, [r7, #12]
 8011cda:	4313      	orrs	r3, r2
 8011cdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8011cde:	693b      	ldr	r3, [r7, #16]
 8011ce0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8011ce4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8011ce6:	683b      	ldr	r3, [r7, #0]
 8011ce8:	689b      	ldr	r3, [r3, #8]
 8011cea:	041b      	lsls	r3, r3, #16
 8011cec:	693a      	ldr	r2, [r7, #16]
 8011cee:	4313      	orrs	r3, r2
 8011cf0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	4a18      	ldr	r2, [pc, #96]	; (8011d58 <TIM_OC5_SetConfig+0xb4>)
 8011cf6:	4293      	cmp	r3, r2
 8011cf8:	d00f      	beq.n	8011d1a <TIM_OC5_SetConfig+0x76>
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	4a17      	ldr	r2, [pc, #92]	; (8011d5c <TIM_OC5_SetConfig+0xb8>)
 8011cfe:	4293      	cmp	r3, r2
 8011d00:	d00b      	beq.n	8011d1a <TIM_OC5_SetConfig+0x76>
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	4a16      	ldr	r2, [pc, #88]	; (8011d60 <TIM_OC5_SetConfig+0xbc>)
 8011d06:	4293      	cmp	r3, r2
 8011d08:	d007      	beq.n	8011d1a <TIM_OC5_SetConfig+0x76>
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	4a15      	ldr	r2, [pc, #84]	; (8011d64 <TIM_OC5_SetConfig+0xc0>)
 8011d0e:	4293      	cmp	r3, r2
 8011d10:	d003      	beq.n	8011d1a <TIM_OC5_SetConfig+0x76>
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	4a14      	ldr	r2, [pc, #80]	; (8011d68 <TIM_OC5_SetConfig+0xc4>)
 8011d16:	4293      	cmp	r3, r2
 8011d18:	d109      	bne.n	8011d2e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8011d1a:	697b      	ldr	r3, [r7, #20]
 8011d1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011d20:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8011d22:	683b      	ldr	r3, [r7, #0]
 8011d24:	695b      	ldr	r3, [r3, #20]
 8011d26:	021b      	lsls	r3, r3, #8
 8011d28:	697a      	ldr	r2, [r7, #20]
 8011d2a:	4313      	orrs	r3, r2
 8011d2c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	697a      	ldr	r2, [r7, #20]
 8011d32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	68fa      	ldr	r2, [r7, #12]
 8011d38:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011d3a:	683b      	ldr	r3, [r7, #0]
 8011d3c:	685a      	ldr	r2, [r3, #4]
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	693a      	ldr	r2, [r7, #16]
 8011d46:	621a      	str	r2, [r3, #32]
}
 8011d48:	bf00      	nop
 8011d4a:	371c      	adds	r7, #28
 8011d4c:	46bd      	mov	sp, r7
 8011d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d52:	4770      	bx	lr
 8011d54:	fffeff8f 	.word	0xfffeff8f
 8011d58:	40010000 	.word	0x40010000
 8011d5c:	40010400 	.word	0x40010400
 8011d60:	40014000 	.word	0x40014000
 8011d64:	40014400 	.word	0x40014400
 8011d68:	40014800 	.word	0x40014800

08011d6c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011d6c:	b480      	push	{r7}
 8011d6e:	b087      	sub	sp, #28
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	6078      	str	r0, [r7, #4]
 8011d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	6a1b      	ldr	r3, [r3, #32]
 8011d7a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	6a1b      	ldr	r3, [r3, #32]
 8011d86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	685b      	ldr	r3, [r3, #4]
 8011d8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011d94:	68fa      	ldr	r2, [r7, #12]
 8011d96:	4b22      	ldr	r3, [pc, #136]	; (8011e20 <TIM_OC6_SetConfig+0xb4>)
 8011d98:	4013      	ands	r3, r2
 8011d9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011d9c:	683b      	ldr	r3, [r7, #0]
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	021b      	lsls	r3, r3, #8
 8011da2:	68fa      	ldr	r2, [r7, #12]
 8011da4:	4313      	orrs	r3, r2
 8011da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011da8:	693b      	ldr	r3, [r7, #16]
 8011daa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011dae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8011db0:	683b      	ldr	r3, [r7, #0]
 8011db2:	689b      	ldr	r3, [r3, #8]
 8011db4:	051b      	lsls	r3, r3, #20
 8011db6:	693a      	ldr	r2, [r7, #16]
 8011db8:	4313      	orrs	r3, r2
 8011dba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	4a19      	ldr	r2, [pc, #100]	; (8011e24 <TIM_OC6_SetConfig+0xb8>)
 8011dc0:	4293      	cmp	r3, r2
 8011dc2:	d00f      	beq.n	8011de4 <TIM_OC6_SetConfig+0x78>
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	4a18      	ldr	r2, [pc, #96]	; (8011e28 <TIM_OC6_SetConfig+0xbc>)
 8011dc8:	4293      	cmp	r3, r2
 8011dca:	d00b      	beq.n	8011de4 <TIM_OC6_SetConfig+0x78>
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	4a17      	ldr	r2, [pc, #92]	; (8011e2c <TIM_OC6_SetConfig+0xc0>)
 8011dd0:	4293      	cmp	r3, r2
 8011dd2:	d007      	beq.n	8011de4 <TIM_OC6_SetConfig+0x78>
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	4a16      	ldr	r2, [pc, #88]	; (8011e30 <TIM_OC6_SetConfig+0xc4>)
 8011dd8:	4293      	cmp	r3, r2
 8011dda:	d003      	beq.n	8011de4 <TIM_OC6_SetConfig+0x78>
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	4a15      	ldr	r2, [pc, #84]	; (8011e34 <TIM_OC6_SetConfig+0xc8>)
 8011de0:	4293      	cmp	r3, r2
 8011de2:	d109      	bne.n	8011df8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8011de4:	697b      	ldr	r3, [r7, #20]
 8011de6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011dea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011dec:	683b      	ldr	r3, [r7, #0]
 8011dee:	695b      	ldr	r3, [r3, #20]
 8011df0:	029b      	lsls	r3, r3, #10
 8011df2:	697a      	ldr	r2, [r7, #20]
 8011df4:	4313      	orrs	r3, r2
 8011df6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	697a      	ldr	r2, [r7, #20]
 8011dfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	68fa      	ldr	r2, [r7, #12]
 8011e02:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8011e04:	683b      	ldr	r3, [r7, #0]
 8011e06:	685a      	ldr	r2, [r3, #4]
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	693a      	ldr	r2, [r7, #16]
 8011e10:	621a      	str	r2, [r3, #32]
}
 8011e12:	bf00      	nop
 8011e14:	371c      	adds	r7, #28
 8011e16:	46bd      	mov	sp, r7
 8011e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e1c:	4770      	bx	lr
 8011e1e:	bf00      	nop
 8011e20:	feff8fff 	.word	0xfeff8fff
 8011e24:	40010000 	.word	0x40010000
 8011e28:	40010400 	.word	0x40010400
 8011e2c:	40014000 	.word	0x40014000
 8011e30:	40014400 	.word	0x40014400
 8011e34:	40014800 	.word	0x40014800

08011e38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011e38:	b480      	push	{r7}
 8011e3a:	b087      	sub	sp, #28
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	60f8      	str	r0, [r7, #12]
 8011e40:	60b9      	str	r1, [r7, #8]
 8011e42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011e44:	68bb      	ldr	r3, [r7, #8]
 8011e46:	f003 031f 	and.w	r3, r3, #31
 8011e4a:	2201      	movs	r2, #1
 8011e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8011e50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	6a1a      	ldr	r2, [r3, #32]
 8011e56:	697b      	ldr	r3, [r7, #20]
 8011e58:	43db      	mvns	r3, r3
 8011e5a:	401a      	ands	r2, r3
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	6a1a      	ldr	r2, [r3, #32]
 8011e64:	68bb      	ldr	r3, [r7, #8]
 8011e66:	f003 031f 	and.w	r3, r3, #31
 8011e6a:	6879      	ldr	r1, [r7, #4]
 8011e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8011e70:	431a      	orrs	r2, r3
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	621a      	str	r2, [r3, #32]
}
 8011e76:	bf00      	nop
 8011e78:	371c      	adds	r7, #28
 8011e7a:	46bd      	mov	sp, r7
 8011e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e80:	4770      	bx	lr
	...

08011e84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011e84:	b480      	push	{r7}
 8011e86:	b085      	sub	sp, #20
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	6078      	str	r0, [r7, #4]
 8011e8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011e94:	2b01      	cmp	r3, #1
 8011e96:	d101      	bne.n	8011e9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011e98:	2302      	movs	r3, #2
 8011e9a:	e077      	b.n	8011f8c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	2201      	movs	r2, #1
 8011ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	2202      	movs	r2, #2
 8011ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	685b      	ldr	r3, [r3, #4]
 8011eb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	689b      	ldr	r3, [r3, #8]
 8011eba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	4a35      	ldr	r2, [pc, #212]	; (8011f98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8011ec2:	4293      	cmp	r3, r2
 8011ec4:	d004      	beq.n	8011ed0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	4a34      	ldr	r2, [pc, #208]	; (8011f9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011ecc:	4293      	cmp	r3, r2
 8011ece:	d108      	bne.n	8011ee2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8011ed6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011ed8:	683b      	ldr	r3, [r7, #0]
 8011eda:	685b      	ldr	r3, [r3, #4]
 8011edc:	68fa      	ldr	r2, [r7, #12]
 8011ede:	4313      	orrs	r3, r2
 8011ee0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011ee8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011eea:	683b      	ldr	r3, [r7, #0]
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	68fa      	ldr	r2, [r7, #12]
 8011ef0:	4313      	orrs	r3, r2
 8011ef2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	68fa      	ldr	r2, [r7, #12]
 8011efa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	4a25      	ldr	r2, [pc, #148]	; (8011f98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8011f02:	4293      	cmp	r3, r2
 8011f04:	d02c      	beq.n	8011f60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011f0e:	d027      	beq.n	8011f60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	4a22      	ldr	r2, [pc, #136]	; (8011fa0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8011f16:	4293      	cmp	r3, r2
 8011f18:	d022      	beq.n	8011f60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	4a21      	ldr	r2, [pc, #132]	; (8011fa4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8011f20:	4293      	cmp	r3, r2
 8011f22:	d01d      	beq.n	8011f60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	4a1f      	ldr	r2, [pc, #124]	; (8011fa8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8011f2a:	4293      	cmp	r3, r2
 8011f2c:	d018      	beq.n	8011f60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	4a1a      	ldr	r2, [pc, #104]	; (8011f9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011f34:	4293      	cmp	r3, r2
 8011f36:	d013      	beq.n	8011f60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	4a1b      	ldr	r2, [pc, #108]	; (8011fac <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8011f3e:	4293      	cmp	r3, r2
 8011f40:	d00e      	beq.n	8011f60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	4a1a      	ldr	r2, [pc, #104]	; (8011fb0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8011f48:	4293      	cmp	r3, r2
 8011f4a:	d009      	beq.n	8011f60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	4a18      	ldr	r2, [pc, #96]	; (8011fb4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8011f52:	4293      	cmp	r3, r2
 8011f54:	d004      	beq.n	8011f60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	4a17      	ldr	r2, [pc, #92]	; (8011fb8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8011f5c:	4293      	cmp	r3, r2
 8011f5e:	d10c      	bne.n	8011f7a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011f60:	68bb      	ldr	r3, [r7, #8]
 8011f62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011f66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011f68:	683b      	ldr	r3, [r7, #0]
 8011f6a:	689b      	ldr	r3, [r3, #8]
 8011f6c:	68ba      	ldr	r2, [r7, #8]
 8011f6e:	4313      	orrs	r3, r2
 8011f70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	68ba      	ldr	r2, [r7, #8]
 8011f78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	2201      	movs	r2, #1
 8011f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	2200      	movs	r2, #0
 8011f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011f8a:	2300      	movs	r3, #0
}
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	3714      	adds	r7, #20
 8011f90:	46bd      	mov	sp, r7
 8011f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f96:	4770      	bx	lr
 8011f98:	40010000 	.word	0x40010000
 8011f9c:	40010400 	.word	0x40010400
 8011fa0:	40000400 	.word	0x40000400
 8011fa4:	40000800 	.word	0x40000800
 8011fa8:	40000c00 	.word	0x40000c00
 8011fac:	40001800 	.word	0x40001800
 8011fb0:	40014000 	.word	0x40014000
 8011fb4:	4000e000 	.word	0x4000e000
 8011fb8:	4000e400 	.word	0x4000e400

08011fbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011fbc:	b480      	push	{r7}
 8011fbe:	b083      	sub	sp, #12
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011fc4:	bf00      	nop
 8011fc6:	370c      	adds	r7, #12
 8011fc8:	46bd      	mov	sp, r7
 8011fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fce:	4770      	bx	lr

08011fd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011fd0:	b480      	push	{r7}
 8011fd2:	b083      	sub	sp, #12
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011fd8:	bf00      	nop
 8011fda:	370c      	adds	r7, #12
 8011fdc:	46bd      	mov	sp, r7
 8011fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe2:	4770      	bx	lr

08011fe4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011fe4:	b480      	push	{r7}
 8011fe6:	b083      	sub	sp, #12
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011fec:	bf00      	nop
 8011fee:	370c      	adds	r7, #12
 8011ff0:	46bd      	mov	sp, r7
 8011ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff6:	4770      	bx	lr

08011ff8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011ff8:	b580      	push	{r7, lr}
 8011ffa:	b082      	sub	sp, #8
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	2b00      	cmp	r3, #0
 8012004:	d101      	bne.n	801200a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012006:	2301      	movs	r3, #1
 8012008:	e042      	b.n	8012090 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012010:	2b00      	cmp	r3, #0
 8012012:	d106      	bne.n	8012022 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	2200      	movs	r2, #0
 8012018:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801201c:	6878      	ldr	r0, [r7, #4]
 801201e:	f7f1 fe3b 	bl	8003c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	2224      	movs	r2, #36	; 0x24
 8012026:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	681a      	ldr	r2, [r3, #0]
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	f022 0201 	bic.w	r2, r2, #1
 8012038:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801203a:	6878      	ldr	r0, [r7, #4]
 801203c:	f000 f82c 	bl	8012098 <UART_SetConfig>
 8012040:	4603      	mov	r3, r0
 8012042:	2b01      	cmp	r3, #1
 8012044:	d101      	bne.n	801204a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8012046:	2301      	movs	r3, #1
 8012048:	e022      	b.n	8012090 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801204e:	2b00      	cmp	r3, #0
 8012050:	d002      	beq.n	8012058 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8012052:	6878      	ldr	r0, [r7, #4]
 8012054:	f000 fe8c 	bl	8012d70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	685a      	ldr	r2, [r3, #4]
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012066:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	689a      	ldr	r2, [r3, #8]
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012076:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	681a      	ldr	r2, [r3, #0]
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	f042 0201 	orr.w	r2, r2, #1
 8012086:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012088:	6878      	ldr	r0, [r7, #4]
 801208a:	f000 ff13 	bl	8012eb4 <UART_CheckIdleState>
 801208e:	4603      	mov	r3, r0
}
 8012090:	4618      	mov	r0, r3
 8012092:	3708      	adds	r7, #8
 8012094:	46bd      	mov	sp, r7
 8012096:	bd80      	pop	{r7, pc}

08012098 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801209c:	b092      	sub	sp, #72	; 0x48
 801209e:	af00      	add	r7, sp, #0
 80120a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80120a2:	2300      	movs	r3, #0
 80120a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80120a8:	697b      	ldr	r3, [r7, #20]
 80120aa:	689a      	ldr	r2, [r3, #8]
 80120ac:	697b      	ldr	r3, [r7, #20]
 80120ae:	691b      	ldr	r3, [r3, #16]
 80120b0:	431a      	orrs	r2, r3
 80120b2:	697b      	ldr	r3, [r7, #20]
 80120b4:	695b      	ldr	r3, [r3, #20]
 80120b6:	431a      	orrs	r2, r3
 80120b8:	697b      	ldr	r3, [r7, #20]
 80120ba:	69db      	ldr	r3, [r3, #28]
 80120bc:	4313      	orrs	r3, r2
 80120be:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80120c0:	697b      	ldr	r3, [r7, #20]
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	681a      	ldr	r2, [r3, #0]
 80120c6:	4bbe      	ldr	r3, [pc, #760]	; (80123c0 <UART_SetConfig+0x328>)
 80120c8:	4013      	ands	r3, r2
 80120ca:	697a      	ldr	r2, [r7, #20]
 80120cc:	6812      	ldr	r2, [r2, #0]
 80120ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80120d0:	430b      	orrs	r3, r1
 80120d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80120d4:	697b      	ldr	r3, [r7, #20]
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	685b      	ldr	r3, [r3, #4]
 80120da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80120de:	697b      	ldr	r3, [r7, #20]
 80120e0:	68da      	ldr	r2, [r3, #12]
 80120e2:	697b      	ldr	r3, [r7, #20]
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	430a      	orrs	r2, r1
 80120e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80120ea:	697b      	ldr	r3, [r7, #20]
 80120ec:	699b      	ldr	r3, [r3, #24]
 80120ee:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80120f0:	697b      	ldr	r3, [r7, #20]
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	4ab3      	ldr	r2, [pc, #716]	; (80123c4 <UART_SetConfig+0x32c>)
 80120f6:	4293      	cmp	r3, r2
 80120f8:	d004      	beq.n	8012104 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80120fa:	697b      	ldr	r3, [r7, #20]
 80120fc:	6a1b      	ldr	r3, [r3, #32]
 80120fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012100:	4313      	orrs	r3, r2
 8012102:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012104:	697b      	ldr	r3, [r7, #20]
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	689a      	ldr	r2, [r3, #8]
 801210a:	4baf      	ldr	r3, [pc, #700]	; (80123c8 <UART_SetConfig+0x330>)
 801210c:	4013      	ands	r3, r2
 801210e:	697a      	ldr	r2, [r7, #20]
 8012110:	6812      	ldr	r2, [r2, #0]
 8012112:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012114:	430b      	orrs	r3, r1
 8012116:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012118:	697b      	ldr	r3, [r7, #20]
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801211e:	f023 010f 	bic.w	r1, r3, #15
 8012122:	697b      	ldr	r3, [r7, #20]
 8012124:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012126:	697b      	ldr	r3, [r7, #20]
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	430a      	orrs	r2, r1
 801212c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801212e:	697b      	ldr	r3, [r7, #20]
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	4aa6      	ldr	r2, [pc, #664]	; (80123cc <UART_SetConfig+0x334>)
 8012134:	4293      	cmp	r3, r2
 8012136:	d177      	bne.n	8012228 <UART_SetConfig+0x190>
 8012138:	4ba5      	ldr	r3, [pc, #660]	; (80123d0 <UART_SetConfig+0x338>)
 801213a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801213c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012140:	2b28      	cmp	r3, #40	; 0x28
 8012142:	d86d      	bhi.n	8012220 <UART_SetConfig+0x188>
 8012144:	a201      	add	r2, pc, #4	; (adr r2, 801214c <UART_SetConfig+0xb4>)
 8012146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801214a:	bf00      	nop
 801214c:	080121f1 	.word	0x080121f1
 8012150:	08012221 	.word	0x08012221
 8012154:	08012221 	.word	0x08012221
 8012158:	08012221 	.word	0x08012221
 801215c:	08012221 	.word	0x08012221
 8012160:	08012221 	.word	0x08012221
 8012164:	08012221 	.word	0x08012221
 8012168:	08012221 	.word	0x08012221
 801216c:	080121f9 	.word	0x080121f9
 8012170:	08012221 	.word	0x08012221
 8012174:	08012221 	.word	0x08012221
 8012178:	08012221 	.word	0x08012221
 801217c:	08012221 	.word	0x08012221
 8012180:	08012221 	.word	0x08012221
 8012184:	08012221 	.word	0x08012221
 8012188:	08012221 	.word	0x08012221
 801218c:	08012201 	.word	0x08012201
 8012190:	08012221 	.word	0x08012221
 8012194:	08012221 	.word	0x08012221
 8012198:	08012221 	.word	0x08012221
 801219c:	08012221 	.word	0x08012221
 80121a0:	08012221 	.word	0x08012221
 80121a4:	08012221 	.word	0x08012221
 80121a8:	08012221 	.word	0x08012221
 80121ac:	08012209 	.word	0x08012209
 80121b0:	08012221 	.word	0x08012221
 80121b4:	08012221 	.word	0x08012221
 80121b8:	08012221 	.word	0x08012221
 80121bc:	08012221 	.word	0x08012221
 80121c0:	08012221 	.word	0x08012221
 80121c4:	08012221 	.word	0x08012221
 80121c8:	08012221 	.word	0x08012221
 80121cc:	08012211 	.word	0x08012211
 80121d0:	08012221 	.word	0x08012221
 80121d4:	08012221 	.word	0x08012221
 80121d8:	08012221 	.word	0x08012221
 80121dc:	08012221 	.word	0x08012221
 80121e0:	08012221 	.word	0x08012221
 80121e4:	08012221 	.word	0x08012221
 80121e8:	08012221 	.word	0x08012221
 80121ec:	08012219 	.word	0x08012219
 80121f0:	2301      	movs	r3, #1
 80121f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80121f6:	e326      	b.n	8012846 <UART_SetConfig+0x7ae>
 80121f8:	2304      	movs	r3, #4
 80121fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80121fe:	e322      	b.n	8012846 <UART_SetConfig+0x7ae>
 8012200:	2308      	movs	r3, #8
 8012202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012206:	e31e      	b.n	8012846 <UART_SetConfig+0x7ae>
 8012208:	2310      	movs	r3, #16
 801220a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801220e:	e31a      	b.n	8012846 <UART_SetConfig+0x7ae>
 8012210:	2320      	movs	r3, #32
 8012212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012216:	e316      	b.n	8012846 <UART_SetConfig+0x7ae>
 8012218:	2340      	movs	r3, #64	; 0x40
 801221a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801221e:	e312      	b.n	8012846 <UART_SetConfig+0x7ae>
 8012220:	2380      	movs	r3, #128	; 0x80
 8012222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012226:	e30e      	b.n	8012846 <UART_SetConfig+0x7ae>
 8012228:	697b      	ldr	r3, [r7, #20]
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	4a69      	ldr	r2, [pc, #420]	; (80123d4 <UART_SetConfig+0x33c>)
 801222e:	4293      	cmp	r3, r2
 8012230:	d130      	bne.n	8012294 <UART_SetConfig+0x1fc>
 8012232:	4b67      	ldr	r3, [pc, #412]	; (80123d0 <UART_SetConfig+0x338>)
 8012234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012236:	f003 0307 	and.w	r3, r3, #7
 801223a:	2b05      	cmp	r3, #5
 801223c:	d826      	bhi.n	801228c <UART_SetConfig+0x1f4>
 801223e:	a201      	add	r2, pc, #4	; (adr r2, 8012244 <UART_SetConfig+0x1ac>)
 8012240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012244:	0801225d 	.word	0x0801225d
 8012248:	08012265 	.word	0x08012265
 801224c:	0801226d 	.word	0x0801226d
 8012250:	08012275 	.word	0x08012275
 8012254:	0801227d 	.word	0x0801227d
 8012258:	08012285 	.word	0x08012285
 801225c:	2300      	movs	r3, #0
 801225e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012262:	e2f0      	b.n	8012846 <UART_SetConfig+0x7ae>
 8012264:	2304      	movs	r3, #4
 8012266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801226a:	e2ec      	b.n	8012846 <UART_SetConfig+0x7ae>
 801226c:	2308      	movs	r3, #8
 801226e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012272:	e2e8      	b.n	8012846 <UART_SetConfig+0x7ae>
 8012274:	2310      	movs	r3, #16
 8012276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801227a:	e2e4      	b.n	8012846 <UART_SetConfig+0x7ae>
 801227c:	2320      	movs	r3, #32
 801227e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012282:	e2e0      	b.n	8012846 <UART_SetConfig+0x7ae>
 8012284:	2340      	movs	r3, #64	; 0x40
 8012286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801228a:	e2dc      	b.n	8012846 <UART_SetConfig+0x7ae>
 801228c:	2380      	movs	r3, #128	; 0x80
 801228e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012292:	e2d8      	b.n	8012846 <UART_SetConfig+0x7ae>
 8012294:	697b      	ldr	r3, [r7, #20]
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	4a4f      	ldr	r2, [pc, #316]	; (80123d8 <UART_SetConfig+0x340>)
 801229a:	4293      	cmp	r3, r2
 801229c:	d130      	bne.n	8012300 <UART_SetConfig+0x268>
 801229e:	4b4c      	ldr	r3, [pc, #304]	; (80123d0 <UART_SetConfig+0x338>)
 80122a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80122a2:	f003 0307 	and.w	r3, r3, #7
 80122a6:	2b05      	cmp	r3, #5
 80122a8:	d826      	bhi.n	80122f8 <UART_SetConfig+0x260>
 80122aa:	a201      	add	r2, pc, #4	; (adr r2, 80122b0 <UART_SetConfig+0x218>)
 80122ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122b0:	080122c9 	.word	0x080122c9
 80122b4:	080122d1 	.word	0x080122d1
 80122b8:	080122d9 	.word	0x080122d9
 80122bc:	080122e1 	.word	0x080122e1
 80122c0:	080122e9 	.word	0x080122e9
 80122c4:	080122f1 	.word	0x080122f1
 80122c8:	2300      	movs	r3, #0
 80122ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122ce:	e2ba      	b.n	8012846 <UART_SetConfig+0x7ae>
 80122d0:	2304      	movs	r3, #4
 80122d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122d6:	e2b6      	b.n	8012846 <UART_SetConfig+0x7ae>
 80122d8:	2308      	movs	r3, #8
 80122da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122de:	e2b2      	b.n	8012846 <UART_SetConfig+0x7ae>
 80122e0:	2310      	movs	r3, #16
 80122e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122e6:	e2ae      	b.n	8012846 <UART_SetConfig+0x7ae>
 80122e8:	2320      	movs	r3, #32
 80122ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122ee:	e2aa      	b.n	8012846 <UART_SetConfig+0x7ae>
 80122f0:	2340      	movs	r3, #64	; 0x40
 80122f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122f6:	e2a6      	b.n	8012846 <UART_SetConfig+0x7ae>
 80122f8:	2380      	movs	r3, #128	; 0x80
 80122fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122fe:	e2a2      	b.n	8012846 <UART_SetConfig+0x7ae>
 8012300:	697b      	ldr	r3, [r7, #20]
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	4a35      	ldr	r2, [pc, #212]	; (80123dc <UART_SetConfig+0x344>)
 8012306:	4293      	cmp	r3, r2
 8012308:	d130      	bne.n	801236c <UART_SetConfig+0x2d4>
 801230a:	4b31      	ldr	r3, [pc, #196]	; (80123d0 <UART_SetConfig+0x338>)
 801230c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801230e:	f003 0307 	and.w	r3, r3, #7
 8012312:	2b05      	cmp	r3, #5
 8012314:	d826      	bhi.n	8012364 <UART_SetConfig+0x2cc>
 8012316:	a201      	add	r2, pc, #4	; (adr r2, 801231c <UART_SetConfig+0x284>)
 8012318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801231c:	08012335 	.word	0x08012335
 8012320:	0801233d 	.word	0x0801233d
 8012324:	08012345 	.word	0x08012345
 8012328:	0801234d 	.word	0x0801234d
 801232c:	08012355 	.word	0x08012355
 8012330:	0801235d 	.word	0x0801235d
 8012334:	2300      	movs	r3, #0
 8012336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801233a:	e284      	b.n	8012846 <UART_SetConfig+0x7ae>
 801233c:	2304      	movs	r3, #4
 801233e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012342:	e280      	b.n	8012846 <UART_SetConfig+0x7ae>
 8012344:	2308      	movs	r3, #8
 8012346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801234a:	e27c      	b.n	8012846 <UART_SetConfig+0x7ae>
 801234c:	2310      	movs	r3, #16
 801234e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012352:	e278      	b.n	8012846 <UART_SetConfig+0x7ae>
 8012354:	2320      	movs	r3, #32
 8012356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801235a:	e274      	b.n	8012846 <UART_SetConfig+0x7ae>
 801235c:	2340      	movs	r3, #64	; 0x40
 801235e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012362:	e270      	b.n	8012846 <UART_SetConfig+0x7ae>
 8012364:	2380      	movs	r3, #128	; 0x80
 8012366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801236a:	e26c      	b.n	8012846 <UART_SetConfig+0x7ae>
 801236c:	697b      	ldr	r3, [r7, #20]
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	4a1b      	ldr	r2, [pc, #108]	; (80123e0 <UART_SetConfig+0x348>)
 8012372:	4293      	cmp	r3, r2
 8012374:	d142      	bne.n	80123fc <UART_SetConfig+0x364>
 8012376:	4b16      	ldr	r3, [pc, #88]	; (80123d0 <UART_SetConfig+0x338>)
 8012378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801237a:	f003 0307 	and.w	r3, r3, #7
 801237e:	2b05      	cmp	r3, #5
 8012380:	d838      	bhi.n	80123f4 <UART_SetConfig+0x35c>
 8012382:	a201      	add	r2, pc, #4	; (adr r2, 8012388 <UART_SetConfig+0x2f0>)
 8012384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012388:	080123a1 	.word	0x080123a1
 801238c:	080123a9 	.word	0x080123a9
 8012390:	080123b1 	.word	0x080123b1
 8012394:	080123b9 	.word	0x080123b9
 8012398:	080123e5 	.word	0x080123e5
 801239c:	080123ed 	.word	0x080123ed
 80123a0:	2300      	movs	r3, #0
 80123a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80123a6:	e24e      	b.n	8012846 <UART_SetConfig+0x7ae>
 80123a8:	2304      	movs	r3, #4
 80123aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80123ae:	e24a      	b.n	8012846 <UART_SetConfig+0x7ae>
 80123b0:	2308      	movs	r3, #8
 80123b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80123b6:	e246      	b.n	8012846 <UART_SetConfig+0x7ae>
 80123b8:	2310      	movs	r3, #16
 80123ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80123be:	e242      	b.n	8012846 <UART_SetConfig+0x7ae>
 80123c0:	cfff69f3 	.word	0xcfff69f3
 80123c4:	58000c00 	.word	0x58000c00
 80123c8:	11fff4ff 	.word	0x11fff4ff
 80123cc:	40011000 	.word	0x40011000
 80123d0:	58024400 	.word	0x58024400
 80123d4:	40004400 	.word	0x40004400
 80123d8:	40004800 	.word	0x40004800
 80123dc:	40004c00 	.word	0x40004c00
 80123e0:	40005000 	.word	0x40005000
 80123e4:	2320      	movs	r3, #32
 80123e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80123ea:	e22c      	b.n	8012846 <UART_SetConfig+0x7ae>
 80123ec:	2340      	movs	r3, #64	; 0x40
 80123ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80123f2:	e228      	b.n	8012846 <UART_SetConfig+0x7ae>
 80123f4:	2380      	movs	r3, #128	; 0x80
 80123f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80123fa:	e224      	b.n	8012846 <UART_SetConfig+0x7ae>
 80123fc:	697b      	ldr	r3, [r7, #20]
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	4ab1      	ldr	r2, [pc, #708]	; (80126c8 <UART_SetConfig+0x630>)
 8012402:	4293      	cmp	r3, r2
 8012404:	d176      	bne.n	80124f4 <UART_SetConfig+0x45c>
 8012406:	4bb1      	ldr	r3, [pc, #708]	; (80126cc <UART_SetConfig+0x634>)
 8012408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801240a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801240e:	2b28      	cmp	r3, #40	; 0x28
 8012410:	d86c      	bhi.n	80124ec <UART_SetConfig+0x454>
 8012412:	a201      	add	r2, pc, #4	; (adr r2, 8012418 <UART_SetConfig+0x380>)
 8012414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012418:	080124bd 	.word	0x080124bd
 801241c:	080124ed 	.word	0x080124ed
 8012420:	080124ed 	.word	0x080124ed
 8012424:	080124ed 	.word	0x080124ed
 8012428:	080124ed 	.word	0x080124ed
 801242c:	080124ed 	.word	0x080124ed
 8012430:	080124ed 	.word	0x080124ed
 8012434:	080124ed 	.word	0x080124ed
 8012438:	080124c5 	.word	0x080124c5
 801243c:	080124ed 	.word	0x080124ed
 8012440:	080124ed 	.word	0x080124ed
 8012444:	080124ed 	.word	0x080124ed
 8012448:	080124ed 	.word	0x080124ed
 801244c:	080124ed 	.word	0x080124ed
 8012450:	080124ed 	.word	0x080124ed
 8012454:	080124ed 	.word	0x080124ed
 8012458:	080124cd 	.word	0x080124cd
 801245c:	080124ed 	.word	0x080124ed
 8012460:	080124ed 	.word	0x080124ed
 8012464:	080124ed 	.word	0x080124ed
 8012468:	080124ed 	.word	0x080124ed
 801246c:	080124ed 	.word	0x080124ed
 8012470:	080124ed 	.word	0x080124ed
 8012474:	080124ed 	.word	0x080124ed
 8012478:	080124d5 	.word	0x080124d5
 801247c:	080124ed 	.word	0x080124ed
 8012480:	080124ed 	.word	0x080124ed
 8012484:	080124ed 	.word	0x080124ed
 8012488:	080124ed 	.word	0x080124ed
 801248c:	080124ed 	.word	0x080124ed
 8012490:	080124ed 	.word	0x080124ed
 8012494:	080124ed 	.word	0x080124ed
 8012498:	080124dd 	.word	0x080124dd
 801249c:	080124ed 	.word	0x080124ed
 80124a0:	080124ed 	.word	0x080124ed
 80124a4:	080124ed 	.word	0x080124ed
 80124a8:	080124ed 	.word	0x080124ed
 80124ac:	080124ed 	.word	0x080124ed
 80124b0:	080124ed 	.word	0x080124ed
 80124b4:	080124ed 	.word	0x080124ed
 80124b8:	080124e5 	.word	0x080124e5
 80124bc:	2301      	movs	r3, #1
 80124be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80124c2:	e1c0      	b.n	8012846 <UART_SetConfig+0x7ae>
 80124c4:	2304      	movs	r3, #4
 80124c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80124ca:	e1bc      	b.n	8012846 <UART_SetConfig+0x7ae>
 80124cc:	2308      	movs	r3, #8
 80124ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80124d2:	e1b8      	b.n	8012846 <UART_SetConfig+0x7ae>
 80124d4:	2310      	movs	r3, #16
 80124d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80124da:	e1b4      	b.n	8012846 <UART_SetConfig+0x7ae>
 80124dc:	2320      	movs	r3, #32
 80124de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80124e2:	e1b0      	b.n	8012846 <UART_SetConfig+0x7ae>
 80124e4:	2340      	movs	r3, #64	; 0x40
 80124e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80124ea:	e1ac      	b.n	8012846 <UART_SetConfig+0x7ae>
 80124ec:	2380      	movs	r3, #128	; 0x80
 80124ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80124f2:	e1a8      	b.n	8012846 <UART_SetConfig+0x7ae>
 80124f4:	697b      	ldr	r3, [r7, #20]
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	4a75      	ldr	r2, [pc, #468]	; (80126d0 <UART_SetConfig+0x638>)
 80124fa:	4293      	cmp	r3, r2
 80124fc:	d130      	bne.n	8012560 <UART_SetConfig+0x4c8>
 80124fe:	4b73      	ldr	r3, [pc, #460]	; (80126cc <UART_SetConfig+0x634>)
 8012500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012502:	f003 0307 	and.w	r3, r3, #7
 8012506:	2b05      	cmp	r3, #5
 8012508:	d826      	bhi.n	8012558 <UART_SetConfig+0x4c0>
 801250a:	a201      	add	r2, pc, #4	; (adr r2, 8012510 <UART_SetConfig+0x478>)
 801250c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012510:	08012529 	.word	0x08012529
 8012514:	08012531 	.word	0x08012531
 8012518:	08012539 	.word	0x08012539
 801251c:	08012541 	.word	0x08012541
 8012520:	08012549 	.word	0x08012549
 8012524:	08012551 	.word	0x08012551
 8012528:	2300      	movs	r3, #0
 801252a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801252e:	e18a      	b.n	8012846 <UART_SetConfig+0x7ae>
 8012530:	2304      	movs	r3, #4
 8012532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012536:	e186      	b.n	8012846 <UART_SetConfig+0x7ae>
 8012538:	2308      	movs	r3, #8
 801253a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801253e:	e182      	b.n	8012846 <UART_SetConfig+0x7ae>
 8012540:	2310      	movs	r3, #16
 8012542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012546:	e17e      	b.n	8012846 <UART_SetConfig+0x7ae>
 8012548:	2320      	movs	r3, #32
 801254a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801254e:	e17a      	b.n	8012846 <UART_SetConfig+0x7ae>
 8012550:	2340      	movs	r3, #64	; 0x40
 8012552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012556:	e176      	b.n	8012846 <UART_SetConfig+0x7ae>
 8012558:	2380      	movs	r3, #128	; 0x80
 801255a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801255e:	e172      	b.n	8012846 <UART_SetConfig+0x7ae>
 8012560:	697b      	ldr	r3, [r7, #20]
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	4a5b      	ldr	r2, [pc, #364]	; (80126d4 <UART_SetConfig+0x63c>)
 8012566:	4293      	cmp	r3, r2
 8012568:	d130      	bne.n	80125cc <UART_SetConfig+0x534>
 801256a:	4b58      	ldr	r3, [pc, #352]	; (80126cc <UART_SetConfig+0x634>)
 801256c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801256e:	f003 0307 	and.w	r3, r3, #7
 8012572:	2b05      	cmp	r3, #5
 8012574:	d826      	bhi.n	80125c4 <UART_SetConfig+0x52c>
 8012576:	a201      	add	r2, pc, #4	; (adr r2, 801257c <UART_SetConfig+0x4e4>)
 8012578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801257c:	08012595 	.word	0x08012595
 8012580:	0801259d 	.word	0x0801259d
 8012584:	080125a5 	.word	0x080125a5
 8012588:	080125ad 	.word	0x080125ad
 801258c:	080125b5 	.word	0x080125b5
 8012590:	080125bd 	.word	0x080125bd
 8012594:	2300      	movs	r3, #0
 8012596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801259a:	e154      	b.n	8012846 <UART_SetConfig+0x7ae>
 801259c:	2304      	movs	r3, #4
 801259e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80125a2:	e150      	b.n	8012846 <UART_SetConfig+0x7ae>
 80125a4:	2308      	movs	r3, #8
 80125a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80125aa:	e14c      	b.n	8012846 <UART_SetConfig+0x7ae>
 80125ac:	2310      	movs	r3, #16
 80125ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80125b2:	e148      	b.n	8012846 <UART_SetConfig+0x7ae>
 80125b4:	2320      	movs	r3, #32
 80125b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80125ba:	e144      	b.n	8012846 <UART_SetConfig+0x7ae>
 80125bc:	2340      	movs	r3, #64	; 0x40
 80125be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80125c2:	e140      	b.n	8012846 <UART_SetConfig+0x7ae>
 80125c4:	2380      	movs	r3, #128	; 0x80
 80125c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80125ca:	e13c      	b.n	8012846 <UART_SetConfig+0x7ae>
 80125cc:	697b      	ldr	r3, [r7, #20]
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	4a41      	ldr	r2, [pc, #260]	; (80126d8 <UART_SetConfig+0x640>)
 80125d2:	4293      	cmp	r3, r2
 80125d4:	f040 8082 	bne.w	80126dc <UART_SetConfig+0x644>
 80125d8:	4b3c      	ldr	r3, [pc, #240]	; (80126cc <UART_SetConfig+0x634>)
 80125da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80125dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80125e0:	2b28      	cmp	r3, #40	; 0x28
 80125e2:	d86d      	bhi.n	80126c0 <UART_SetConfig+0x628>
 80125e4:	a201      	add	r2, pc, #4	; (adr r2, 80125ec <UART_SetConfig+0x554>)
 80125e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125ea:	bf00      	nop
 80125ec:	08012691 	.word	0x08012691
 80125f0:	080126c1 	.word	0x080126c1
 80125f4:	080126c1 	.word	0x080126c1
 80125f8:	080126c1 	.word	0x080126c1
 80125fc:	080126c1 	.word	0x080126c1
 8012600:	080126c1 	.word	0x080126c1
 8012604:	080126c1 	.word	0x080126c1
 8012608:	080126c1 	.word	0x080126c1
 801260c:	08012699 	.word	0x08012699
 8012610:	080126c1 	.word	0x080126c1
 8012614:	080126c1 	.word	0x080126c1
 8012618:	080126c1 	.word	0x080126c1
 801261c:	080126c1 	.word	0x080126c1
 8012620:	080126c1 	.word	0x080126c1
 8012624:	080126c1 	.word	0x080126c1
 8012628:	080126c1 	.word	0x080126c1
 801262c:	080126a1 	.word	0x080126a1
 8012630:	080126c1 	.word	0x080126c1
 8012634:	080126c1 	.word	0x080126c1
 8012638:	080126c1 	.word	0x080126c1
 801263c:	080126c1 	.word	0x080126c1
 8012640:	080126c1 	.word	0x080126c1
 8012644:	080126c1 	.word	0x080126c1
 8012648:	080126c1 	.word	0x080126c1
 801264c:	080126a9 	.word	0x080126a9
 8012650:	080126c1 	.word	0x080126c1
 8012654:	080126c1 	.word	0x080126c1
 8012658:	080126c1 	.word	0x080126c1
 801265c:	080126c1 	.word	0x080126c1
 8012660:	080126c1 	.word	0x080126c1
 8012664:	080126c1 	.word	0x080126c1
 8012668:	080126c1 	.word	0x080126c1
 801266c:	080126b1 	.word	0x080126b1
 8012670:	080126c1 	.word	0x080126c1
 8012674:	080126c1 	.word	0x080126c1
 8012678:	080126c1 	.word	0x080126c1
 801267c:	080126c1 	.word	0x080126c1
 8012680:	080126c1 	.word	0x080126c1
 8012684:	080126c1 	.word	0x080126c1
 8012688:	080126c1 	.word	0x080126c1
 801268c:	080126b9 	.word	0x080126b9
 8012690:	2301      	movs	r3, #1
 8012692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012696:	e0d6      	b.n	8012846 <UART_SetConfig+0x7ae>
 8012698:	2304      	movs	r3, #4
 801269a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801269e:	e0d2      	b.n	8012846 <UART_SetConfig+0x7ae>
 80126a0:	2308      	movs	r3, #8
 80126a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80126a6:	e0ce      	b.n	8012846 <UART_SetConfig+0x7ae>
 80126a8:	2310      	movs	r3, #16
 80126aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80126ae:	e0ca      	b.n	8012846 <UART_SetConfig+0x7ae>
 80126b0:	2320      	movs	r3, #32
 80126b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80126b6:	e0c6      	b.n	8012846 <UART_SetConfig+0x7ae>
 80126b8:	2340      	movs	r3, #64	; 0x40
 80126ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80126be:	e0c2      	b.n	8012846 <UART_SetConfig+0x7ae>
 80126c0:	2380      	movs	r3, #128	; 0x80
 80126c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80126c6:	e0be      	b.n	8012846 <UART_SetConfig+0x7ae>
 80126c8:	40011400 	.word	0x40011400
 80126cc:	58024400 	.word	0x58024400
 80126d0:	40007800 	.word	0x40007800
 80126d4:	40007c00 	.word	0x40007c00
 80126d8:	40011800 	.word	0x40011800
 80126dc:	697b      	ldr	r3, [r7, #20]
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	4aad      	ldr	r2, [pc, #692]	; (8012998 <UART_SetConfig+0x900>)
 80126e2:	4293      	cmp	r3, r2
 80126e4:	d176      	bne.n	80127d4 <UART_SetConfig+0x73c>
 80126e6:	4bad      	ldr	r3, [pc, #692]	; (801299c <UART_SetConfig+0x904>)
 80126e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80126ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80126ee:	2b28      	cmp	r3, #40	; 0x28
 80126f0:	d86c      	bhi.n	80127cc <UART_SetConfig+0x734>
 80126f2:	a201      	add	r2, pc, #4	; (adr r2, 80126f8 <UART_SetConfig+0x660>)
 80126f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126f8:	0801279d 	.word	0x0801279d
 80126fc:	080127cd 	.word	0x080127cd
 8012700:	080127cd 	.word	0x080127cd
 8012704:	080127cd 	.word	0x080127cd
 8012708:	080127cd 	.word	0x080127cd
 801270c:	080127cd 	.word	0x080127cd
 8012710:	080127cd 	.word	0x080127cd
 8012714:	080127cd 	.word	0x080127cd
 8012718:	080127a5 	.word	0x080127a5
 801271c:	080127cd 	.word	0x080127cd
 8012720:	080127cd 	.word	0x080127cd
 8012724:	080127cd 	.word	0x080127cd
 8012728:	080127cd 	.word	0x080127cd
 801272c:	080127cd 	.word	0x080127cd
 8012730:	080127cd 	.word	0x080127cd
 8012734:	080127cd 	.word	0x080127cd
 8012738:	080127ad 	.word	0x080127ad
 801273c:	080127cd 	.word	0x080127cd
 8012740:	080127cd 	.word	0x080127cd
 8012744:	080127cd 	.word	0x080127cd
 8012748:	080127cd 	.word	0x080127cd
 801274c:	080127cd 	.word	0x080127cd
 8012750:	080127cd 	.word	0x080127cd
 8012754:	080127cd 	.word	0x080127cd
 8012758:	080127b5 	.word	0x080127b5
 801275c:	080127cd 	.word	0x080127cd
 8012760:	080127cd 	.word	0x080127cd
 8012764:	080127cd 	.word	0x080127cd
 8012768:	080127cd 	.word	0x080127cd
 801276c:	080127cd 	.word	0x080127cd
 8012770:	080127cd 	.word	0x080127cd
 8012774:	080127cd 	.word	0x080127cd
 8012778:	080127bd 	.word	0x080127bd
 801277c:	080127cd 	.word	0x080127cd
 8012780:	080127cd 	.word	0x080127cd
 8012784:	080127cd 	.word	0x080127cd
 8012788:	080127cd 	.word	0x080127cd
 801278c:	080127cd 	.word	0x080127cd
 8012790:	080127cd 	.word	0x080127cd
 8012794:	080127cd 	.word	0x080127cd
 8012798:	080127c5 	.word	0x080127c5
 801279c:	2301      	movs	r3, #1
 801279e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80127a2:	e050      	b.n	8012846 <UART_SetConfig+0x7ae>
 80127a4:	2304      	movs	r3, #4
 80127a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80127aa:	e04c      	b.n	8012846 <UART_SetConfig+0x7ae>
 80127ac:	2308      	movs	r3, #8
 80127ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80127b2:	e048      	b.n	8012846 <UART_SetConfig+0x7ae>
 80127b4:	2310      	movs	r3, #16
 80127b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80127ba:	e044      	b.n	8012846 <UART_SetConfig+0x7ae>
 80127bc:	2320      	movs	r3, #32
 80127be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80127c2:	e040      	b.n	8012846 <UART_SetConfig+0x7ae>
 80127c4:	2340      	movs	r3, #64	; 0x40
 80127c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80127ca:	e03c      	b.n	8012846 <UART_SetConfig+0x7ae>
 80127cc:	2380      	movs	r3, #128	; 0x80
 80127ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80127d2:	e038      	b.n	8012846 <UART_SetConfig+0x7ae>
 80127d4:	697b      	ldr	r3, [r7, #20]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	4a71      	ldr	r2, [pc, #452]	; (80129a0 <UART_SetConfig+0x908>)
 80127da:	4293      	cmp	r3, r2
 80127dc:	d130      	bne.n	8012840 <UART_SetConfig+0x7a8>
 80127de:	4b6f      	ldr	r3, [pc, #444]	; (801299c <UART_SetConfig+0x904>)
 80127e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80127e2:	f003 0307 	and.w	r3, r3, #7
 80127e6:	2b05      	cmp	r3, #5
 80127e8:	d826      	bhi.n	8012838 <UART_SetConfig+0x7a0>
 80127ea:	a201      	add	r2, pc, #4	; (adr r2, 80127f0 <UART_SetConfig+0x758>)
 80127ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80127f0:	08012809 	.word	0x08012809
 80127f4:	08012811 	.word	0x08012811
 80127f8:	08012819 	.word	0x08012819
 80127fc:	08012821 	.word	0x08012821
 8012800:	08012829 	.word	0x08012829
 8012804:	08012831 	.word	0x08012831
 8012808:	2302      	movs	r3, #2
 801280a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801280e:	e01a      	b.n	8012846 <UART_SetConfig+0x7ae>
 8012810:	2304      	movs	r3, #4
 8012812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012816:	e016      	b.n	8012846 <UART_SetConfig+0x7ae>
 8012818:	2308      	movs	r3, #8
 801281a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801281e:	e012      	b.n	8012846 <UART_SetConfig+0x7ae>
 8012820:	2310      	movs	r3, #16
 8012822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012826:	e00e      	b.n	8012846 <UART_SetConfig+0x7ae>
 8012828:	2320      	movs	r3, #32
 801282a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801282e:	e00a      	b.n	8012846 <UART_SetConfig+0x7ae>
 8012830:	2340      	movs	r3, #64	; 0x40
 8012832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012836:	e006      	b.n	8012846 <UART_SetConfig+0x7ae>
 8012838:	2380      	movs	r3, #128	; 0x80
 801283a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801283e:	e002      	b.n	8012846 <UART_SetConfig+0x7ae>
 8012840:	2380      	movs	r3, #128	; 0x80
 8012842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8012846:	697b      	ldr	r3, [r7, #20]
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	4a55      	ldr	r2, [pc, #340]	; (80129a0 <UART_SetConfig+0x908>)
 801284c:	4293      	cmp	r3, r2
 801284e:	f040 80f8 	bne.w	8012a42 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8012852:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012856:	2b20      	cmp	r3, #32
 8012858:	dc46      	bgt.n	80128e8 <UART_SetConfig+0x850>
 801285a:	2b02      	cmp	r3, #2
 801285c:	db75      	blt.n	801294a <UART_SetConfig+0x8b2>
 801285e:	3b02      	subs	r3, #2
 8012860:	2b1e      	cmp	r3, #30
 8012862:	d872      	bhi.n	801294a <UART_SetConfig+0x8b2>
 8012864:	a201      	add	r2, pc, #4	; (adr r2, 801286c <UART_SetConfig+0x7d4>)
 8012866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801286a:	bf00      	nop
 801286c:	080128ef 	.word	0x080128ef
 8012870:	0801294b 	.word	0x0801294b
 8012874:	080128f7 	.word	0x080128f7
 8012878:	0801294b 	.word	0x0801294b
 801287c:	0801294b 	.word	0x0801294b
 8012880:	0801294b 	.word	0x0801294b
 8012884:	08012907 	.word	0x08012907
 8012888:	0801294b 	.word	0x0801294b
 801288c:	0801294b 	.word	0x0801294b
 8012890:	0801294b 	.word	0x0801294b
 8012894:	0801294b 	.word	0x0801294b
 8012898:	0801294b 	.word	0x0801294b
 801289c:	0801294b 	.word	0x0801294b
 80128a0:	0801294b 	.word	0x0801294b
 80128a4:	08012917 	.word	0x08012917
 80128a8:	0801294b 	.word	0x0801294b
 80128ac:	0801294b 	.word	0x0801294b
 80128b0:	0801294b 	.word	0x0801294b
 80128b4:	0801294b 	.word	0x0801294b
 80128b8:	0801294b 	.word	0x0801294b
 80128bc:	0801294b 	.word	0x0801294b
 80128c0:	0801294b 	.word	0x0801294b
 80128c4:	0801294b 	.word	0x0801294b
 80128c8:	0801294b 	.word	0x0801294b
 80128cc:	0801294b 	.word	0x0801294b
 80128d0:	0801294b 	.word	0x0801294b
 80128d4:	0801294b 	.word	0x0801294b
 80128d8:	0801294b 	.word	0x0801294b
 80128dc:	0801294b 	.word	0x0801294b
 80128e0:	0801294b 	.word	0x0801294b
 80128e4:	0801293d 	.word	0x0801293d
 80128e8:	2b40      	cmp	r3, #64	; 0x40
 80128ea:	d02a      	beq.n	8012942 <UART_SetConfig+0x8aa>
 80128ec:	e02d      	b.n	801294a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80128ee:	f7fa febd 	bl	800d66c <HAL_RCCEx_GetD3PCLK1Freq>
 80128f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80128f4:	e02f      	b.n	8012956 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80128f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80128fa:	4618      	mov	r0, r3
 80128fc:	f7fa fecc 	bl	800d698 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012902:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012904:	e027      	b.n	8012956 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012906:	f107 0318 	add.w	r3, r7, #24
 801290a:	4618      	mov	r0, r3
 801290c:	f7fb f818 	bl	800d940 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012910:	69fb      	ldr	r3, [r7, #28]
 8012912:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012914:	e01f      	b.n	8012956 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012916:	4b21      	ldr	r3, [pc, #132]	; (801299c <UART_SetConfig+0x904>)
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	f003 0320 	and.w	r3, r3, #32
 801291e:	2b00      	cmp	r3, #0
 8012920:	d009      	beq.n	8012936 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012922:	4b1e      	ldr	r3, [pc, #120]	; (801299c <UART_SetConfig+0x904>)
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	08db      	lsrs	r3, r3, #3
 8012928:	f003 0303 	and.w	r3, r3, #3
 801292c:	4a1d      	ldr	r2, [pc, #116]	; (80129a4 <UART_SetConfig+0x90c>)
 801292e:	fa22 f303 	lsr.w	r3, r2, r3
 8012932:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012934:	e00f      	b.n	8012956 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8012936:	4b1b      	ldr	r3, [pc, #108]	; (80129a4 <UART_SetConfig+0x90c>)
 8012938:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801293a:	e00c      	b.n	8012956 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801293c:	4b1a      	ldr	r3, [pc, #104]	; (80129a8 <UART_SetConfig+0x910>)
 801293e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012940:	e009      	b.n	8012956 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012942:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012946:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012948:	e005      	b.n	8012956 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801294a:	2300      	movs	r3, #0
 801294c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801294e:	2301      	movs	r3, #1
 8012950:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8012954:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8012956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012958:	2b00      	cmp	r3, #0
 801295a:	f000 81ee 	beq.w	8012d3a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801295e:	697b      	ldr	r3, [r7, #20]
 8012960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012962:	4a12      	ldr	r2, [pc, #72]	; (80129ac <UART_SetConfig+0x914>)
 8012964:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012968:	461a      	mov	r2, r3
 801296a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801296c:	fbb3 f3f2 	udiv	r3, r3, r2
 8012970:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012972:	697b      	ldr	r3, [r7, #20]
 8012974:	685a      	ldr	r2, [r3, #4]
 8012976:	4613      	mov	r3, r2
 8012978:	005b      	lsls	r3, r3, #1
 801297a:	4413      	add	r3, r2
 801297c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801297e:	429a      	cmp	r2, r3
 8012980:	d305      	bcc.n	801298e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8012982:	697b      	ldr	r3, [r7, #20]
 8012984:	685b      	ldr	r3, [r3, #4]
 8012986:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801298a:	429a      	cmp	r2, r3
 801298c:	d910      	bls.n	80129b0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 801298e:	2301      	movs	r3, #1
 8012990:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8012994:	e1d1      	b.n	8012d3a <UART_SetConfig+0xca2>
 8012996:	bf00      	nop
 8012998:	40011c00 	.word	0x40011c00
 801299c:	58024400 	.word	0x58024400
 80129a0:	58000c00 	.word	0x58000c00
 80129a4:	03d09000 	.word	0x03d09000
 80129a8:	003d0900 	.word	0x003d0900
 80129ac:	0802050c 	.word	0x0802050c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80129b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129b2:	2200      	movs	r2, #0
 80129b4:	60bb      	str	r3, [r7, #8]
 80129b6:	60fa      	str	r2, [r7, #12]
 80129b8:	697b      	ldr	r3, [r7, #20]
 80129ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129bc:	4ac0      	ldr	r2, [pc, #768]	; (8012cc0 <UART_SetConfig+0xc28>)
 80129be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80129c2:	b29b      	uxth	r3, r3
 80129c4:	2200      	movs	r2, #0
 80129c6:	603b      	str	r3, [r7, #0]
 80129c8:	607a      	str	r2, [r7, #4]
 80129ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80129ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80129d2:	f7ed fec1 	bl	8000758 <__aeabi_uldivmod>
 80129d6:	4602      	mov	r2, r0
 80129d8:	460b      	mov	r3, r1
 80129da:	4610      	mov	r0, r2
 80129dc:	4619      	mov	r1, r3
 80129de:	f04f 0200 	mov.w	r2, #0
 80129e2:	f04f 0300 	mov.w	r3, #0
 80129e6:	020b      	lsls	r3, r1, #8
 80129e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80129ec:	0202      	lsls	r2, r0, #8
 80129ee:	6979      	ldr	r1, [r7, #20]
 80129f0:	6849      	ldr	r1, [r1, #4]
 80129f2:	0849      	lsrs	r1, r1, #1
 80129f4:	2000      	movs	r0, #0
 80129f6:	460c      	mov	r4, r1
 80129f8:	4605      	mov	r5, r0
 80129fa:	eb12 0804 	adds.w	r8, r2, r4
 80129fe:	eb43 0905 	adc.w	r9, r3, r5
 8012a02:	697b      	ldr	r3, [r7, #20]
 8012a04:	685b      	ldr	r3, [r3, #4]
 8012a06:	2200      	movs	r2, #0
 8012a08:	469a      	mov	sl, r3
 8012a0a:	4693      	mov	fp, r2
 8012a0c:	4652      	mov	r2, sl
 8012a0e:	465b      	mov	r3, fp
 8012a10:	4640      	mov	r0, r8
 8012a12:	4649      	mov	r1, r9
 8012a14:	f7ed fea0 	bl	8000758 <__aeabi_uldivmod>
 8012a18:	4602      	mov	r2, r0
 8012a1a:	460b      	mov	r3, r1
 8012a1c:	4613      	mov	r3, r2
 8012a1e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8012a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012a26:	d308      	bcc.n	8012a3a <UART_SetConfig+0x9a2>
 8012a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012a2e:	d204      	bcs.n	8012a3a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8012a30:	697b      	ldr	r3, [r7, #20]
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012a36:	60da      	str	r2, [r3, #12]
 8012a38:	e17f      	b.n	8012d3a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8012a3a:	2301      	movs	r3, #1
 8012a3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8012a40:	e17b      	b.n	8012d3a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012a42:	697b      	ldr	r3, [r7, #20]
 8012a44:	69db      	ldr	r3, [r3, #28]
 8012a46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012a4a:	f040 80bd 	bne.w	8012bc8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8012a4e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012a52:	2b20      	cmp	r3, #32
 8012a54:	dc48      	bgt.n	8012ae8 <UART_SetConfig+0xa50>
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	db7b      	blt.n	8012b52 <UART_SetConfig+0xaba>
 8012a5a:	2b20      	cmp	r3, #32
 8012a5c:	d879      	bhi.n	8012b52 <UART_SetConfig+0xaba>
 8012a5e:	a201      	add	r2, pc, #4	; (adr r2, 8012a64 <UART_SetConfig+0x9cc>)
 8012a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a64:	08012aef 	.word	0x08012aef
 8012a68:	08012af7 	.word	0x08012af7
 8012a6c:	08012b53 	.word	0x08012b53
 8012a70:	08012b53 	.word	0x08012b53
 8012a74:	08012aff 	.word	0x08012aff
 8012a78:	08012b53 	.word	0x08012b53
 8012a7c:	08012b53 	.word	0x08012b53
 8012a80:	08012b53 	.word	0x08012b53
 8012a84:	08012b0f 	.word	0x08012b0f
 8012a88:	08012b53 	.word	0x08012b53
 8012a8c:	08012b53 	.word	0x08012b53
 8012a90:	08012b53 	.word	0x08012b53
 8012a94:	08012b53 	.word	0x08012b53
 8012a98:	08012b53 	.word	0x08012b53
 8012a9c:	08012b53 	.word	0x08012b53
 8012aa0:	08012b53 	.word	0x08012b53
 8012aa4:	08012b1f 	.word	0x08012b1f
 8012aa8:	08012b53 	.word	0x08012b53
 8012aac:	08012b53 	.word	0x08012b53
 8012ab0:	08012b53 	.word	0x08012b53
 8012ab4:	08012b53 	.word	0x08012b53
 8012ab8:	08012b53 	.word	0x08012b53
 8012abc:	08012b53 	.word	0x08012b53
 8012ac0:	08012b53 	.word	0x08012b53
 8012ac4:	08012b53 	.word	0x08012b53
 8012ac8:	08012b53 	.word	0x08012b53
 8012acc:	08012b53 	.word	0x08012b53
 8012ad0:	08012b53 	.word	0x08012b53
 8012ad4:	08012b53 	.word	0x08012b53
 8012ad8:	08012b53 	.word	0x08012b53
 8012adc:	08012b53 	.word	0x08012b53
 8012ae0:	08012b53 	.word	0x08012b53
 8012ae4:	08012b45 	.word	0x08012b45
 8012ae8:	2b40      	cmp	r3, #64	; 0x40
 8012aea:	d02e      	beq.n	8012b4a <UART_SetConfig+0xab2>
 8012aec:	e031      	b.n	8012b52 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012aee:	f7f8 ff1f 	bl	800b930 <HAL_RCC_GetPCLK1Freq>
 8012af2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012af4:	e033      	b.n	8012b5e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012af6:	f7f8 ff31 	bl	800b95c <HAL_RCC_GetPCLK2Freq>
 8012afa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012afc:	e02f      	b.n	8012b5e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012b02:	4618      	mov	r0, r3
 8012b04:	f7fa fdc8 	bl	800d698 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012b0c:	e027      	b.n	8012b5e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012b0e:	f107 0318 	add.w	r3, r7, #24
 8012b12:	4618      	mov	r0, r3
 8012b14:	f7fa ff14 	bl	800d940 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012b18:	69fb      	ldr	r3, [r7, #28]
 8012b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012b1c:	e01f      	b.n	8012b5e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012b1e:	4b69      	ldr	r3, [pc, #420]	; (8012cc4 <UART_SetConfig+0xc2c>)
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	f003 0320 	and.w	r3, r3, #32
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d009      	beq.n	8012b3e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012b2a:	4b66      	ldr	r3, [pc, #408]	; (8012cc4 <UART_SetConfig+0xc2c>)
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	08db      	lsrs	r3, r3, #3
 8012b30:	f003 0303 	and.w	r3, r3, #3
 8012b34:	4a64      	ldr	r2, [pc, #400]	; (8012cc8 <UART_SetConfig+0xc30>)
 8012b36:	fa22 f303 	lsr.w	r3, r2, r3
 8012b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012b3c:	e00f      	b.n	8012b5e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8012b3e:	4b62      	ldr	r3, [pc, #392]	; (8012cc8 <UART_SetConfig+0xc30>)
 8012b40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012b42:	e00c      	b.n	8012b5e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012b44:	4b61      	ldr	r3, [pc, #388]	; (8012ccc <UART_SetConfig+0xc34>)
 8012b46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012b48:	e009      	b.n	8012b5e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012b4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012b50:	e005      	b.n	8012b5e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8012b52:	2300      	movs	r3, #0
 8012b54:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8012b56:	2301      	movs	r3, #1
 8012b58:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8012b5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8012b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	f000 80ea 	beq.w	8012d3a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012b66:	697b      	ldr	r3, [r7, #20]
 8012b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b6a:	4a55      	ldr	r2, [pc, #340]	; (8012cc0 <UART_SetConfig+0xc28>)
 8012b6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012b70:	461a      	mov	r2, r3
 8012b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b74:	fbb3 f3f2 	udiv	r3, r3, r2
 8012b78:	005a      	lsls	r2, r3, #1
 8012b7a:	697b      	ldr	r3, [r7, #20]
 8012b7c:	685b      	ldr	r3, [r3, #4]
 8012b7e:	085b      	lsrs	r3, r3, #1
 8012b80:	441a      	add	r2, r3
 8012b82:	697b      	ldr	r3, [r7, #20]
 8012b84:	685b      	ldr	r3, [r3, #4]
 8012b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8012b8a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b8e:	2b0f      	cmp	r3, #15
 8012b90:	d916      	bls.n	8012bc0 <UART_SetConfig+0xb28>
 8012b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012b98:	d212      	bcs.n	8012bc0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b9c:	b29b      	uxth	r3, r3
 8012b9e:	f023 030f 	bic.w	r3, r3, #15
 8012ba2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ba6:	085b      	lsrs	r3, r3, #1
 8012ba8:	b29b      	uxth	r3, r3
 8012baa:	f003 0307 	and.w	r3, r3, #7
 8012bae:	b29a      	uxth	r2, r3
 8012bb0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012bb2:	4313      	orrs	r3, r2
 8012bb4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8012bb6:	697b      	ldr	r3, [r7, #20]
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8012bbc:	60da      	str	r2, [r3, #12]
 8012bbe:	e0bc      	b.n	8012d3a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8012bc0:	2301      	movs	r3, #1
 8012bc2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8012bc6:	e0b8      	b.n	8012d3a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8012bc8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012bcc:	2b20      	cmp	r3, #32
 8012bce:	dc4b      	bgt.n	8012c68 <UART_SetConfig+0xbd0>
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	f2c0 8087 	blt.w	8012ce4 <UART_SetConfig+0xc4c>
 8012bd6:	2b20      	cmp	r3, #32
 8012bd8:	f200 8084 	bhi.w	8012ce4 <UART_SetConfig+0xc4c>
 8012bdc:	a201      	add	r2, pc, #4	; (adr r2, 8012be4 <UART_SetConfig+0xb4c>)
 8012bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012be2:	bf00      	nop
 8012be4:	08012c6f 	.word	0x08012c6f
 8012be8:	08012c77 	.word	0x08012c77
 8012bec:	08012ce5 	.word	0x08012ce5
 8012bf0:	08012ce5 	.word	0x08012ce5
 8012bf4:	08012c7f 	.word	0x08012c7f
 8012bf8:	08012ce5 	.word	0x08012ce5
 8012bfc:	08012ce5 	.word	0x08012ce5
 8012c00:	08012ce5 	.word	0x08012ce5
 8012c04:	08012c8f 	.word	0x08012c8f
 8012c08:	08012ce5 	.word	0x08012ce5
 8012c0c:	08012ce5 	.word	0x08012ce5
 8012c10:	08012ce5 	.word	0x08012ce5
 8012c14:	08012ce5 	.word	0x08012ce5
 8012c18:	08012ce5 	.word	0x08012ce5
 8012c1c:	08012ce5 	.word	0x08012ce5
 8012c20:	08012ce5 	.word	0x08012ce5
 8012c24:	08012c9f 	.word	0x08012c9f
 8012c28:	08012ce5 	.word	0x08012ce5
 8012c2c:	08012ce5 	.word	0x08012ce5
 8012c30:	08012ce5 	.word	0x08012ce5
 8012c34:	08012ce5 	.word	0x08012ce5
 8012c38:	08012ce5 	.word	0x08012ce5
 8012c3c:	08012ce5 	.word	0x08012ce5
 8012c40:	08012ce5 	.word	0x08012ce5
 8012c44:	08012ce5 	.word	0x08012ce5
 8012c48:	08012ce5 	.word	0x08012ce5
 8012c4c:	08012ce5 	.word	0x08012ce5
 8012c50:	08012ce5 	.word	0x08012ce5
 8012c54:	08012ce5 	.word	0x08012ce5
 8012c58:	08012ce5 	.word	0x08012ce5
 8012c5c:	08012ce5 	.word	0x08012ce5
 8012c60:	08012ce5 	.word	0x08012ce5
 8012c64:	08012cd7 	.word	0x08012cd7
 8012c68:	2b40      	cmp	r3, #64	; 0x40
 8012c6a:	d037      	beq.n	8012cdc <UART_SetConfig+0xc44>
 8012c6c:	e03a      	b.n	8012ce4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012c6e:	f7f8 fe5f 	bl	800b930 <HAL_RCC_GetPCLK1Freq>
 8012c72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012c74:	e03c      	b.n	8012cf0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012c76:	f7f8 fe71 	bl	800b95c <HAL_RCC_GetPCLK2Freq>
 8012c7a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012c7c:	e038      	b.n	8012cf0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012c82:	4618      	mov	r0, r3
 8012c84:	f7fa fd08 	bl	800d698 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012c8c:	e030      	b.n	8012cf0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012c8e:	f107 0318 	add.w	r3, r7, #24
 8012c92:	4618      	mov	r0, r3
 8012c94:	f7fa fe54 	bl	800d940 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012c98:	69fb      	ldr	r3, [r7, #28]
 8012c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012c9c:	e028      	b.n	8012cf0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012c9e:	4b09      	ldr	r3, [pc, #36]	; (8012cc4 <UART_SetConfig+0xc2c>)
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	f003 0320 	and.w	r3, r3, #32
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d012      	beq.n	8012cd0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012caa:	4b06      	ldr	r3, [pc, #24]	; (8012cc4 <UART_SetConfig+0xc2c>)
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	08db      	lsrs	r3, r3, #3
 8012cb0:	f003 0303 	and.w	r3, r3, #3
 8012cb4:	4a04      	ldr	r2, [pc, #16]	; (8012cc8 <UART_SetConfig+0xc30>)
 8012cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8012cba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012cbc:	e018      	b.n	8012cf0 <UART_SetConfig+0xc58>
 8012cbe:	bf00      	nop
 8012cc0:	0802050c 	.word	0x0802050c
 8012cc4:	58024400 	.word	0x58024400
 8012cc8:	03d09000 	.word	0x03d09000
 8012ccc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8012cd0:	4b24      	ldr	r3, [pc, #144]	; (8012d64 <UART_SetConfig+0xccc>)
 8012cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012cd4:	e00c      	b.n	8012cf0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012cd6:	4b24      	ldr	r3, [pc, #144]	; (8012d68 <UART_SetConfig+0xcd0>)
 8012cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012cda:	e009      	b.n	8012cf0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012cdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012ce2:	e005      	b.n	8012cf0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8012ce8:	2301      	movs	r3, #1
 8012cea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8012cee:	bf00      	nop
    }

    if (pclk != 0U)
 8012cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d021      	beq.n	8012d3a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012cf6:	697b      	ldr	r3, [r7, #20]
 8012cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cfa:	4a1c      	ldr	r2, [pc, #112]	; (8012d6c <UART_SetConfig+0xcd4>)
 8012cfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012d00:	461a      	mov	r2, r3
 8012d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d04:	fbb3 f2f2 	udiv	r2, r3, r2
 8012d08:	697b      	ldr	r3, [r7, #20]
 8012d0a:	685b      	ldr	r3, [r3, #4]
 8012d0c:	085b      	lsrs	r3, r3, #1
 8012d0e:	441a      	add	r2, r3
 8012d10:	697b      	ldr	r3, [r7, #20]
 8012d12:	685b      	ldr	r3, [r3, #4]
 8012d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8012d18:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d1c:	2b0f      	cmp	r3, #15
 8012d1e:	d909      	bls.n	8012d34 <UART_SetConfig+0xc9c>
 8012d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012d26:	d205      	bcs.n	8012d34 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d2a:	b29a      	uxth	r2, r3
 8012d2c:	697b      	ldr	r3, [r7, #20]
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	60da      	str	r2, [r3, #12]
 8012d32:	e002      	b.n	8012d3a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8012d34:	2301      	movs	r3, #1
 8012d36:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8012d3a:	697b      	ldr	r3, [r7, #20]
 8012d3c:	2201      	movs	r2, #1
 8012d3e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8012d42:	697b      	ldr	r3, [r7, #20]
 8012d44:	2201      	movs	r2, #1
 8012d46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012d4a:	697b      	ldr	r3, [r7, #20]
 8012d4c:	2200      	movs	r2, #0
 8012d4e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8012d50:	697b      	ldr	r3, [r7, #20]
 8012d52:	2200      	movs	r2, #0
 8012d54:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8012d56:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	3748      	adds	r7, #72	; 0x48
 8012d5e:	46bd      	mov	sp, r7
 8012d60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012d64:	03d09000 	.word	0x03d09000
 8012d68:	003d0900 	.word	0x003d0900
 8012d6c:	0802050c 	.word	0x0802050c

08012d70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012d70:	b480      	push	{r7}
 8012d72:	b083      	sub	sp, #12
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d7c:	f003 0301 	and.w	r3, r3, #1
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d00a      	beq.n	8012d9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	685b      	ldr	r3, [r3, #4]
 8012d8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	430a      	orrs	r2, r1
 8012d98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d9e:	f003 0302 	and.w	r3, r3, #2
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d00a      	beq.n	8012dbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	685b      	ldr	r3, [r3, #4]
 8012dac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	430a      	orrs	r2, r1
 8012dba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012dc0:	f003 0304 	and.w	r3, r3, #4
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d00a      	beq.n	8012dde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	685b      	ldr	r3, [r3, #4]
 8012dce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	430a      	orrs	r2, r1
 8012ddc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012de2:	f003 0308 	and.w	r3, r3, #8
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d00a      	beq.n	8012e00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	685b      	ldr	r3, [r3, #4]
 8012df0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	430a      	orrs	r2, r1
 8012dfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e04:	f003 0310 	and.w	r3, r3, #16
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d00a      	beq.n	8012e22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	689b      	ldr	r3, [r3, #8]
 8012e12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	430a      	orrs	r2, r1
 8012e20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e26:	f003 0320 	and.w	r3, r3, #32
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d00a      	beq.n	8012e44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	689b      	ldr	r3, [r3, #8]
 8012e34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	430a      	orrs	r2, r1
 8012e42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d01a      	beq.n	8012e86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	685b      	ldr	r3, [r3, #4]
 8012e56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	430a      	orrs	r2, r1
 8012e64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012e6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012e6e:	d10a      	bne.n	8012e86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	681b      	ldr	r3, [r3, #0]
 8012e74:	685b      	ldr	r3, [r3, #4]
 8012e76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	430a      	orrs	r2, r1
 8012e84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d00a      	beq.n	8012ea8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	685b      	ldr	r3, [r3, #4]
 8012e98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	430a      	orrs	r2, r1
 8012ea6:	605a      	str	r2, [r3, #4]
  }
}
 8012ea8:	bf00      	nop
 8012eaa:	370c      	adds	r7, #12
 8012eac:	46bd      	mov	sp, r7
 8012eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb2:	4770      	bx	lr

08012eb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b098      	sub	sp, #96	; 0x60
 8012eb8:	af02      	add	r7, sp, #8
 8012eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	2200      	movs	r2, #0
 8012ec0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012ec4:	f7f1 fa28 	bl	8004318 <HAL_GetTick>
 8012ec8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	f003 0308 	and.w	r3, r3, #8
 8012ed4:	2b08      	cmp	r3, #8
 8012ed6:	d12f      	bne.n	8012f38 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012ed8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012edc:	9300      	str	r3, [sp, #0]
 8012ede:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ee0:	2200      	movs	r2, #0
 8012ee2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012ee6:	6878      	ldr	r0, [r7, #4]
 8012ee8:	f000 f88e 	bl	8013008 <UART_WaitOnFlagUntilTimeout>
 8012eec:	4603      	mov	r3, r0
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d022      	beq.n	8012f38 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012efa:	e853 3f00 	ldrex	r3, [r3]
 8012efe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012f06:	653b      	str	r3, [r7, #80]	; 0x50
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	461a      	mov	r2, r3
 8012f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f10:	647b      	str	r3, [r7, #68]	; 0x44
 8012f12:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f14:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012f16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012f18:	e841 2300 	strex	r3, r2, [r1]
 8012f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d1e6      	bne.n	8012ef2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	2220      	movs	r2, #32
 8012f28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	2200      	movs	r2, #0
 8012f30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012f34:	2303      	movs	r3, #3
 8012f36:	e063      	b.n	8013000 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	f003 0304 	and.w	r3, r3, #4
 8012f42:	2b04      	cmp	r3, #4
 8012f44:	d149      	bne.n	8012fda <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012f46:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012f4a:	9300      	str	r3, [sp, #0]
 8012f4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012f4e:	2200      	movs	r2, #0
 8012f50:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8012f54:	6878      	ldr	r0, [r7, #4]
 8012f56:	f000 f857 	bl	8013008 <UART_WaitOnFlagUntilTimeout>
 8012f5a:	4603      	mov	r3, r0
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d03c      	beq.n	8012fda <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f68:	e853 3f00 	ldrex	r3, [r3]
 8012f6c:	623b      	str	r3, [r7, #32]
   return(result);
 8012f6e:	6a3b      	ldr	r3, [r7, #32]
 8012f70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012f74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	461a      	mov	r2, r3
 8012f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f7e:	633b      	str	r3, [r7, #48]	; 0x30
 8012f80:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f86:	e841 2300 	strex	r3, r2, [r1]
 8012f8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d1e6      	bne.n	8012f60 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	3308      	adds	r3, #8
 8012f98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f9a:	693b      	ldr	r3, [r7, #16]
 8012f9c:	e853 3f00 	ldrex	r3, [r3]
 8012fa0:	60fb      	str	r3, [r7, #12]
   return(result);
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	f023 0301 	bic.w	r3, r3, #1
 8012fa8:	64bb      	str	r3, [r7, #72]	; 0x48
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	3308      	adds	r3, #8
 8012fb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012fb2:	61fa      	str	r2, [r7, #28]
 8012fb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012fb6:	69b9      	ldr	r1, [r7, #24]
 8012fb8:	69fa      	ldr	r2, [r7, #28]
 8012fba:	e841 2300 	strex	r3, r2, [r1]
 8012fbe:	617b      	str	r3, [r7, #20]
   return(result);
 8012fc0:	697b      	ldr	r3, [r7, #20]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d1e5      	bne.n	8012f92 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	2220      	movs	r2, #32
 8012fca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	2200      	movs	r2, #0
 8012fd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012fd6:	2303      	movs	r3, #3
 8012fd8:	e012      	b.n	8013000 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	2220      	movs	r2, #32
 8012fde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	2220      	movs	r2, #32
 8012fe6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	2200      	movs	r2, #0
 8012fee:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	2200      	movs	r2, #0
 8012ff4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	2200      	movs	r2, #0
 8012ffa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012ffe:	2300      	movs	r3, #0
}
 8013000:	4618      	mov	r0, r3
 8013002:	3758      	adds	r7, #88	; 0x58
 8013004:	46bd      	mov	sp, r7
 8013006:	bd80      	pop	{r7, pc}

08013008 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013008:	b580      	push	{r7, lr}
 801300a:	b084      	sub	sp, #16
 801300c:	af00      	add	r7, sp, #0
 801300e:	60f8      	str	r0, [r7, #12]
 8013010:	60b9      	str	r1, [r7, #8]
 8013012:	603b      	str	r3, [r7, #0]
 8013014:	4613      	mov	r3, r2
 8013016:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013018:	e049      	b.n	80130ae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801301a:	69bb      	ldr	r3, [r7, #24]
 801301c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013020:	d045      	beq.n	80130ae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013022:	f7f1 f979 	bl	8004318 <HAL_GetTick>
 8013026:	4602      	mov	r2, r0
 8013028:	683b      	ldr	r3, [r7, #0]
 801302a:	1ad3      	subs	r3, r2, r3
 801302c:	69ba      	ldr	r2, [r7, #24]
 801302e:	429a      	cmp	r2, r3
 8013030:	d302      	bcc.n	8013038 <UART_WaitOnFlagUntilTimeout+0x30>
 8013032:	69bb      	ldr	r3, [r7, #24]
 8013034:	2b00      	cmp	r3, #0
 8013036:	d101      	bne.n	801303c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8013038:	2303      	movs	r3, #3
 801303a:	e048      	b.n	80130ce <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	681b      	ldr	r3, [r3, #0]
 8013042:	f003 0304 	and.w	r3, r3, #4
 8013046:	2b00      	cmp	r3, #0
 8013048:	d031      	beq.n	80130ae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	69db      	ldr	r3, [r3, #28]
 8013050:	f003 0308 	and.w	r3, r3, #8
 8013054:	2b08      	cmp	r3, #8
 8013056:	d110      	bne.n	801307a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	2208      	movs	r2, #8
 801305e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8013060:	68f8      	ldr	r0, [r7, #12]
 8013062:	f000 f839 	bl	80130d8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	2208      	movs	r2, #8
 801306a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	2200      	movs	r2, #0
 8013072:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8013076:	2301      	movs	r3, #1
 8013078:	e029      	b.n	80130ce <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	69db      	ldr	r3, [r3, #28]
 8013080:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013084:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013088:	d111      	bne.n	80130ae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013092:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013094:	68f8      	ldr	r0, [r7, #12]
 8013096:	f000 f81f 	bl	80130d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	2220      	movs	r2, #32
 801309e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	2200      	movs	r2, #0
 80130a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80130aa:	2303      	movs	r3, #3
 80130ac:	e00f      	b.n	80130ce <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	69da      	ldr	r2, [r3, #28]
 80130b4:	68bb      	ldr	r3, [r7, #8]
 80130b6:	4013      	ands	r3, r2
 80130b8:	68ba      	ldr	r2, [r7, #8]
 80130ba:	429a      	cmp	r2, r3
 80130bc:	bf0c      	ite	eq
 80130be:	2301      	moveq	r3, #1
 80130c0:	2300      	movne	r3, #0
 80130c2:	b2db      	uxtb	r3, r3
 80130c4:	461a      	mov	r2, r3
 80130c6:	79fb      	ldrb	r3, [r7, #7]
 80130c8:	429a      	cmp	r2, r3
 80130ca:	d0a6      	beq.n	801301a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80130cc:	2300      	movs	r3, #0
}
 80130ce:	4618      	mov	r0, r3
 80130d0:	3710      	adds	r7, #16
 80130d2:	46bd      	mov	sp, r7
 80130d4:	bd80      	pop	{r7, pc}
	...

080130d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80130d8:	b480      	push	{r7}
 80130da:	b095      	sub	sp, #84	; 0x54
 80130dc:	af00      	add	r7, sp, #0
 80130de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80130e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130e8:	e853 3f00 	ldrex	r3, [r3]
 80130ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80130ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80130f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	461a      	mov	r2, r3
 80130fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80130fe:	643b      	str	r3, [r7, #64]	; 0x40
 8013100:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013102:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013104:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013106:	e841 2300 	strex	r3, r2, [r1]
 801310a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801310c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801310e:	2b00      	cmp	r3, #0
 8013110:	d1e6      	bne.n	80130e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	3308      	adds	r3, #8
 8013118:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801311a:	6a3b      	ldr	r3, [r7, #32]
 801311c:	e853 3f00 	ldrex	r3, [r3]
 8013120:	61fb      	str	r3, [r7, #28]
   return(result);
 8013122:	69fa      	ldr	r2, [r7, #28]
 8013124:	4b1e      	ldr	r3, [pc, #120]	; (80131a0 <UART_EndRxTransfer+0xc8>)
 8013126:	4013      	ands	r3, r2
 8013128:	64bb      	str	r3, [r7, #72]	; 0x48
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	3308      	adds	r3, #8
 8013130:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013132:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013134:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013136:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013138:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801313a:	e841 2300 	strex	r3, r2, [r1]
 801313e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013142:	2b00      	cmp	r3, #0
 8013144:	d1e5      	bne.n	8013112 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801314a:	2b01      	cmp	r3, #1
 801314c:	d118      	bne.n	8013180 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	e853 3f00 	ldrex	r3, [r3]
 801315a:	60bb      	str	r3, [r7, #8]
   return(result);
 801315c:	68bb      	ldr	r3, [r7, #8]
 801315e:	f023 0310 	bic.w	r3, r3, #16
 8013162:	647b      	str	r3, [r7, #68]	; 0x44
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	461a      	mov	r2, r3
 801316a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801316c:	61bb      	str	r3, [r7, #24]
 801316e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013170:	6979      	ldr	r1, [r7, #20]
 8013172:	69ba      	ldr	r2, [r7, #24]
 8013174:	e841 2300 	strex	r3, r2, [r1]
 8013178:	613b      	str	r3, [r7, #16]
   return(result);
 801317a:	693b      	ldr	r3, [r7, #16]
 801317c:	2b00      	cmp	r3, #0
 801317e:	d1e6      	bne.n	801314e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	2220      	movs	r2, #32
 8013184:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	2200      	movs	r2, #0
 801318c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	2200      	movs	r2, #0
 8013192:	675a      	str	r2, [r3, #116]	; 0x74
}
 8013194:	bf00      	nop
 8013196:	3754      	adds	r7, #84	; 0x54
 8013198:	46bd      	mov	sp, r7
 801319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801319e:	4770      	bx	lr
 80131a0:	effffffe 	.word	0xeffffffe

080131a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80131a4:	b480      	push	{r7}
 80131a6:	b085      	sub	sp, #20
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80131b2:	2b01      	cmp	r3, #1
 80131b4:	d101      	bne.n	80131ba <HAL_UARTEx_DisableFifoMode+0x16>
 80131b6:	2302      	movs	r3, #2
 80131b8:	e027      	b.n	801320a <HAL_UARTEx_DisableFifoMode+0x66>
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	2201      	movs	r2, #1
 80131be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	2224      	movs	r2, #36	; 0x24
 80131c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	681a      	ldr	r2, [r3, #0]
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	f022 0201 	bic.w	r2, r2, #1
 80131e0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80131e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	2200      	movs	r2, #0
 80131ee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	68fa      	ldr	r2, [r7, #12]
 80131f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	2220      	movs	r2, #32
 80131fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	2200      	movs	r2, #0
 8013204:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013208:	2300      	movs	r3, #0
}
 801320a:	4618      	mov	r0, r3
 801320c:	3714      	adds	r7, #20
 801320e:	46bd      	mov	sp, r7
 8013210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013214:	4770      	bx	lr

08013216 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013216:	b580      	push	{r7, lr}
 8013218:	b084      	sub	sp, #16
 801321a:	af00      	add	r7, sp, #0
 801321c:	6078      	str	r0, [r7, #4]
 801321e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8013226:	2b01      	cmp	r3, #1
 8013228:	d101      	bne.n	801322e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801322a:	2302      	movs	r3, #2
 801322c:	e02d      	b.n	801328a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	2201      	movs	r2, #1
 8013232:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	2224      	movs	r2, #36	; 0x24
 801323a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	681b      	ldr	r3, [r3, #0]
 8013244:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	681a      	ldr	r2, [r3, #0]
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	f022 0201 	bic.w	r2, r2, #1
 8013254:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	689b      	ldr	r3, [r3, #8]
 801325c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	683a      	ldr	r2, [r7, #0]
 8013266:	430a      	orrs	r2, r1
 8013268:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801326a:	6878      	ldr	r0, [r7, #4]
 801326c:	f000 f850 	bl	8013310 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	68fa      	ldr	r2, [r7, #12]
 8013276:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	2220      	movs	r2, #32
 801327c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	2200      	movs	r2, #0
 8013284:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013288:	2300      	movs	r3, #0
}
 801328a:	4618      	mov	r0, r3
 801328c:	3710      	adds	r7, #16
 801328e:	46bd      	mov	sp, r7
 8013290:	bd80      	pop	{r7, pc}

08013292 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013292:	b580      	push	{r7, lr}
 8013294:	b084      	sub	sp, #16
 8013296:	af00      	add	r7, sp, #0
 8013298:	6078      	str	r0, [r7, #4]
 801329a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80132a2:	2b01      	cmp	r3, #1
 80132a4:	d101      	bne.n	80132aa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80132a6:	2302      	movs	r3, #2
 80132a8:	e02d      	b.n	8013306 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	2201      	movs	r2, #1
 80132ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	2224      	movs	r2, #36	; 0x24
 80132b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	681a      	ldr	r2, [r3, #0]
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	f022 0201 	bic.w	r2, r2, #1
 80132d0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	689b      	ldr	r3, [r3, #8]
 80132d8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	683a      	ldr	r2, [r7, #0]
 80132e2:	430a      	orrs	r2, r1
 80132e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80132e6:	6878      	ldr	r0, [r7, #4]
 80132e8:	f000 f812 	bl	8013310 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	68fa      	ldr	r2, [r7, #12]
 80132f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	2220      	movs	r2, #32
 80132f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	2200      	movs	r2, #0
 8013300:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013304:	2300      	movs	r3, #0
}
 8013306:	4618      	mov	r0, r3
 8013308:	3710      	adds	r7, #16
 801330a:	46bd      	mov	sp, r7
 801330c:	bd80      	pop	{r7, pc}
	...

08013310 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8013310:	b480      	push	{r7}
 8013312:	b085      	sub	sp, #20
 8013314:	af00      	add	r7, sp, #0
 8013316:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801331c:	2b00      	cmp	r3, #0
 801331e:	d108      	bne.n	8013332 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	2201      	movs	r2, #1
 8013324:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	2201      	movs	r2, #1
 801332c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8013330:	e031      	b.n	8013396 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8013332:	2310      	movs	r3, #16
 8013334:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8013336:	2310      	movs	r3, #16
 8013338:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	689b      	ldr	r3, [r3, #8]
 8013340:	0e5b      	lsrs	r3, r3, #25
 8013342:	b2db      	uxtb	r3, r3
 8013344:	f003 0307 	and.w	r3, r3, #7
 8013348:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	689b      	ldr	r3, [r3, #8]
 8013350:	0f5b      	lsrs	r3, r3, #29
 8013352:	b2db      	uxtb	r3, r3
 8013354:	f003 0307 	and.w	r3, r3, #7
 8013358:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801335a:	7bbb      	ldrb	r3, [r7, #14]
 801335c:	7b3a      	ldrb	r2, [r7, #12]
 801335e:	4911      	ldr	r1, [pc, #68]	; (80133a4 <UARTEx_SetNbDataToProcess+0x94>)
 8013360:	5c8a      	ldrb	r2, [r1, r2]
 8013362:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8013366:	7b3a      	ldrb	r2, [r7, #12]
 8013368:	490f      	ldr	r1, [pc, #60]	; (80133a8 <UARTEx_SetNbDataToProcess+0x98>)
 801336a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801336c:	fb93 f3f2 	sdiv	r3, r3, r2
 8013370:	b29a      	uxth	r2, r3
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013378:	7bfb      	ldrb	r3, [r7, #15]
 801337a:	7b7a      	ldrb	r2, [r7, #13]
 801337c:	4909      	ldr	r1, [pc, #36]	; (80133a4 <UARTEx_SetNbDataToProcess+0x94>)
 801337e:	5c8a      	ldrb	r2, [r1, r2]
 8013380:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8013384:	7b7a      	ldrb	r2, [r7, #13]
 8013386:	4908      	ldr	r1, [pc, #32]	; (80133a8 <UARTEx_SetNbDataToProcess+0x98>)
 8013388:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801338a:	fb93 f3f2 	sdiv	r3, r3, r2
 801338e:	b29a      	uxth	r2, r3
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8013396:	bf00      	nop
 8013398:	3714      	adds	r7, #20
 801339a:	46bd      	mov	sp, r7
 801339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a0:	4770      	bx	lr
 80133a2:	bf00      	nop
 80133a4:	08020524 	.word	0x08020524
 80133a8:	0802052c 	.word	0x0802052c

080133ac <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80133ac:	b084      	sub	sp, #16
 80133ae:	b480      	push	{r7}
 80133b0:	b085      	sub	sp, #20
 80133b2:	af00      	add	r7, sp, #0
 80133b4:	6078      	str	r0, [r7, #4]
 80133b6:	f107 001c 	add.w	r0, r7, #28
 80133ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80133be:	2300      	movs	r3, #0
 80133c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 80133c2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 80133c4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 80133c6:	431a      	orrs	r2, r3
             Init.BusWide             | \
 80133c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 80133ca:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 80133cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 80133ce:	431a      	orrs	r2, r3
             Init.ClockDiv
 80133d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 80133d2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80133d4:	68fa      	ldr	r2, [r7, #12]
 80133d6:	4313      	orrs	r3, r2
 80133d8:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	685a      	ldr	r2, [r3, #4]
 80133de:	4b07      	ldr	r3, [pc, #28]	; (80133fc <SDMMC_Init+0x50>)
 80133e0:	4013      	ands	r3, r2
 80133e2:	68fa      	ldr	r2, [r7, #12]
 80133e4:	431a      	orrs	r2, r3
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80133ea:	2300      	movs	r3, #0
}
 80133ec:	4618      	mov	r0, r3
 80133ee:	3714      	adds	r7, #20
 80133f0:	46bd      	mov	sp, r7
 80133f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133f6:	b004      	add	sp, #16
 80133f8:	4770      	bx	lr
 80133fa:	bf00      	nop
 80133fc:	ffc02c00 	.word	0xffc02c00

08013400 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8013400:	b480      	push	{r7}
 8013402:	b083      	sub	sp, #12
 8013404:	af00      	add	r7, sp, #0
 8013406:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 801340e:	4618      	mov	r0, r3
 8013410:	370c      	adds	r7, #12
 8013412:	46bd      	mov	sp, r7
 8013414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013418:	4770      	bx	lr

0801341a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 801341a:	b480      	push	{r7}
 801341c:	b083      	sub	sp, #12
 801341e:	af00      	add	r7, sp, #0
 8013420:	6078      	str	r0, [r7, #4]
 8013422:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8013424:	683b      	ldr	r3, [r7, #0]
 8013426:	681a      	ldr	r2, [r3, #0]
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801342e:	2300      	movs	r3, #0
}
 8013430:	4618      	mov	r0, r3
 8013432:	370c      	adds	r7, #12
 8013434:	46bd      	mov	sp, r7
 8013436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801343a:	4770      	bx	lr

0801343c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 801343c:	b480      	push	{r7}
 801343e:	b083      	sub	sp, #12
 8013440:	af00      	add	r7, sp, #0
 8013442:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	f043 0203 	orr.w	r2, r3, #3
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8013450:	2300      	movs	r3, #0
}
 8013452:	4618      	mov	r0, r3
 8013454:	370c      	adds	r7, #12
 8013456:	46bd      	mov	sp, r7
 8013458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801345c:	4770      	bx	lr

0801345e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 801345e:	b480      	push	{r7}
 8013460:	b083      	sub	sp, #12
 8013462:	af00      	add	r7, sp, #0
 8013464:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	f003 0303 	and.w	r3, r3, #3
}
 801346e:	4618      	mov	r0, r3
 8013470:	370c      	adds	r7, #12
 8013472:	46bd      	mov	sp, r7
 8013474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013478:	4770      	bx	lr
	...

0801347c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 801347c:	b480      	push	{r7}
 801347e:	b085      	sub	sp, #20
 8013480:	af00      	add	r7, sp, #0
 8013482:	6078      	str	r0, [r7, #4]
 8013484:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8013486:	2300      	movs	r3, #0
 8013488:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801348a:	683b      	ldr	r3, [r7, #0]
 801348c:	681a      	ldr	r2, [r3, #0]
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8013492:	683b      	ldr	r3, [r7, #0]
 8013494:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8013496:	683b      	ldr	r3, [r7, #0]
 8013498:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801349a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 801349c:	683b      	ldr	r3, [r7, #0]
 801349e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80134a0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80134a2:	683b      	ldr	r3, [r7, #0]
 80134a4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 80134a6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80134a8:	68fa      	ldr	r2, [r7, #12]
 80134aa:	4313      	orrs	r3, r2
 80134ac:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	68da      	ldr	r2, [r3, #12]
 80134b2:	4b06      	ldr	r3, [pc, #24]	; (80134cc <SDMMC_SendCommand+0x50>)
 80134b4:	4013      	ands	r3, r2
 80134b6:	68fa      	ldr	r2, [r7, #12]
 80134b8:	431a      	orrs	r2, r3
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80134be:	2300      	movs	r3, #0
}
 80134c0:	4618      	mov	r0, r3
 80134c2:	3714      	adds	r7, #20
 80134c4:	46bd      	mov	sp, r7
 80134c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ca:	4770      	bx	lr
 80134cc:	fffee0c0 	.word	0xfffee0c0

080134d0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80134d0:	b480      	push	{r7}
 80134d2:	b083      	sub	sp, #12
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	691b      	ldr	r3, [r3, #16]
 80134dc:	b2db      	uxtb	r3, r3
}
 80134de:	4618      	mov	r0, r3
 80134e0:	370c      	adds	r7, #12
 80134e2:	46bd      	mov	sp, r7
 80134e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e8:	4770      	bx	lr

080134ea <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80134ea:	b480      	push	{r7}
 80134ec:	b085      	sub	sp, #20
 80134ee:	af00      	add	r7, sp, #0
 80134f0:	6078      	str	r0, [r7, #4]
 80134f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	3314      	adds	r3, #20
 80134f8:	461a      	mov	r2, r3
 80134fa:	683b      	ldr	r3, [r7, #0]
 80134fc:	4413      	add	r3, r2
 80134fe:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	681b      	ldr	r3, [r3, #0]
}
 8013504:	4618      	mov	r0, r3
 8013506:	3714      	adds	r7, #20
 8013508:	46bd      	mov	sp, r7
 801350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801350e:	4770      	bx	lr

08013510 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8013510:	b480      	push	{r7}
 8013512:	b085      	sub	sp, #20
 8013514:	af00      	add	r7, sp, #0
 8013516:	6078      	str	r0, [r7, #4]
 8013518:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801351a:	2300      	movs	r3, #0
 801351c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 801351e:	683b      	ldr	r3, [r7, #0]
 8013520:	681a      	ldr	r2, [r3, #0]
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8013526:	683b      	ldr	r3, [r7, #0]
 8013528:	685a      	ldr	r2, [r3, #4]
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801352e:	683b      	ldr	r3, [r7, #0]
 8013530:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8013532:	683b      	ldr	r3, [r7, #0]
 8013534:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8013536:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8013538:	683b      	ldr	r3, [r7, #0]
 801353a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 801353c:	431a      	orrs	r2, r3
                       Data->DPSM);
 801353e:	683b      	ldr	r3, [r7, #0]
 8013540:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8013542:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8013544:	68fa      	ldr	r2, [r7, #12]
 8013546:	4313      	orrs	r3, r2
 8013548:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801354e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	431a      	orrs	r2, r3
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801355a:	2300      	movs	r3, #0

}
 801355c:	4618      	mov	r0, r3
 801355e:	3714      	adds	r7, #20
 8013560:	46bd      	mov	sp, r7
 8013562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013566:	4770      	bx	lr

08013568 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8013568:	b580      	push	{r7, lr}
 801356a:	b088      	sub	sp, #32
 801356c:	af00      	add	r7, sp, #0
 801356e:	6078      	str	r0, [r7, #4]
 8013570:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8013572:	683b      	ldr	r3, [r7, #0]
 8013574:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8013576:	2310      	movs	r3, #16
 8013578:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801357a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801357e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013580:	2300      	movs	r3, #0
 8013582:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013584:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013588:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801358a:	f107 0308 	add.w	r3, r7, #8
 801358e:	4619      	mov	r1, r3
 8013590:	6878      	ldr	r0, [r7, #4]
 8013592:	f7ff ff73 	bl	801347c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8013596:	f241 3288 	movw	r2, #5000	; 0x1388
 801359a:	2110      	movs	r1, #16
 801359c:	6878      	ldr	r0, [r7, #4]
 801359e:	f000 fa5f 	bl	8013a60 <SDMMC_GetCmdResp1>
 80135a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80135a4:	69fb      	ldr	r3, [r7, #28]
}
 80135a6:	4618      	mov	r0, r3
 80135a8:	3720      	adds	r7, #32
 80135aa:	46bd      	mov	sp, r7
 80135ac:	bd80      	pop	{r7, pc}

080135ae <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80135ae:	b580      	push	{r7, lr}
 80135b0:	b088      	sub	sp, #32
 80135b2:	af00      	add	r7, sp, #0
 80135b4:	6078      	str	r0, [r7, #4]
 80135b6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80135b8:	683b      	ldr	r3, [r7, #0]
 80135ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80135bc:	2311      	movs	r3, #17
 80135be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80135c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80135c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80135c6:	2300      	movs	r3, #0
 80135c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80135ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80135ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80135d0:	f107 0308 	add.w	r3, r7, #8
 80135d4:	4619      	mov	r1, r3
 80135d6:	6878      	ldr	r0, [r7, #4]
 80135d8:	f7ff ff50 	bl	801347c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80135dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80135e0:	2111      	movs	r1, #17
 80135e2:	6878      	ldr	r0, [r7, #4]
 80135e4:	f000 fa3c 	bl	8013a60 <SDMMC_GetCmdResp1>
 80135e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80135ea:	69fb      	ldr	r3, [r7, #28]
}
 80135ec:	4618      	mov	r0, r3
 80135ee:	3720      	adds	r7, #32
 80135f0:	46bd      	mov	sp, r7
 80135f2:	bd80      	pop	{r7, pc}

080135f4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80135f4:	b580      	push	{r7, lr}
 80135f6:	b088      	sub	sp, #32
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	6078      	str	r0, [r7, #4]
 80135fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80135fe:	683b      	ldr	r3, [r7, #0]
 8013600:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8013602:	2312      	movs	r3, #18
 8013604:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013606:	f44f 7380 	mov.w	r3, #256	; 0x100
 801360a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801360c:	2300      	movs	r3, #0
 801360e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013614:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013616:	f107 0308 	add.w	r3, r7, #8
 801361a:	4619      	mov	r1, r3
 801361c:	6878      	ldr	r0, [r7, #4]
 801361e:	f7ff ff2d 	bl	801347c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8013622:	f241 3288 	movw	r2, #5000	; 0x1388
 8013626:	2112      	movs	r1, #18
 8013628:	6878      	ldr	r0, [r7, #4]
 801362a:	f000 fa19 	bl	8013a60 <SDMMC_GetCmdResp1>
 801362e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013630:	69fb      	ldr	r3, [r7, #28]
}
 8013632:	4618      	mov	r0, r3
 8013634:	3720      	adds	r7, #32
 8013636:	46bd      	mov	sp, r7
 8013638:	bd80      	pop	{r7, pc}

0801363a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801363a:	b580      	push	{r7, lr}
 801363c:	b088      	sub	sp, #32
 801363e:	af00      	add	r7, sp, #0
 8013640:	6078      	str	r0, [r7, #4]
 8013642:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8013644:	683b      	ldr	r3, [r7, #0]
 8013646:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8013648:	2318      	movs	r3, #24
 801364a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801364c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013650:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013652:	2300      	movs	r3, #0
 8013654:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013656:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801365a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801365c:	f107 0308 	add.w	r3, r7, #8
 8013660:	4619      	mov	r1, r3
 8013662:	6878      	ldr	r0, [r7, #4]
 8013664:	f7ff ff0a 	bl	801347c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8013668:	f241 3288 	movw	r2, #5000	; 0x1388
 801366c:	2118      	movs	r1, #24
 801366e:	6878      	ldr	r0, [r7, #4]
 8013670:	f000 f9f6 	bl	8013a60 <SDMMC_GetCmdResp1>
 8013674:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013676:	69fb      	ldr	r3, [r7, #28]
}
 8013678:	4618      	mov	r0, r3
 801367a:	3720      	adds	r7, #32
 801367c:	46bd      	mov	sp, r7
 801367e:	bd80      	pop	{r7, pc}

08013680 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8013680:	b580      	push	{r7, lr}
 8013682:	b088      	sub	sp, #32
 8013684:	af00      	add	r7, sp, #0
 8013686:	6078      	str	r0, [r7, #4]
 8013688:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801368a:	683b      	ldr	r3, [r7, #0]
 801368c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801368e:	2319      	movs	r3, #25
 8013690:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013692:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013696:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013698:	2300      	movs	r3, #0
 801369a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801369c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80136a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80136a2:	f107 0308 	add.w	r3, r7, #8
 80136a6:	4619      	mov	r1, r3
 80136a8:	6878      	ldr	r0, [r7, #4]
 80136aa:	f7ff fee7 	bl	801347c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80136ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80136b2:	2119      	movs	r1, #25
 80136b4:	6878      	ldr	r0, [r7, #4]
 80136b6:	f000 f9d3 	bl	8013a60 <SDMMC_GetCmdResp1>
 80136ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80136bc:	69fb      	ldr	r3, [r7, #28]
}
 80136be:	4618      	mov	r0, r3
 80136c0:	3720      	adds	r7, #32
 80136c2:	46bd      	mov	sp, r7
 80136c4:	bd80      	pop	{r7, pc}
	...

080136c8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80136c8:	b580      	push	{r7, lr}
 80136ca:	b088      	sub	sp, #32
 80136cc:	af00      	add	r7, sp, #0
 80136ce:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80136d0:	2300      	movs	r3, #0
 80136d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80136d4:	230c      	movs	r3, #12
 80136d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80136d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80136dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80136de:	2300      	movs	r3, #0
 80136e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80136e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80136e6:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	68db      	ldr	r3, [r3, #12]
 80136ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	68db      	ldr	r3, [r3, #12]
 80136f8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013700:	f107 0308 	add.w	r3, r7, #8
 8013704:	4619      	mov	r1, r3
 8013706:	6878      	ldr	r0, [r7, #4]
 8013708:	f7ff feb8 	bl	801347c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 801370c:	4a0b      	ldr	r2, [pc, #44]	; (801373c <SDMMC_CmdStopTransfer+0x74>)
 801370e:	210c      	movs	r1, #12
 8013710:	6878      	ldr	r0, [r7, #4]
 8013712:	f000 f9a5 	bl	8013a60 <SDMMC_GetCmdResp1>
 8013716:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	68db      	ldr	r3, [r3, #12]
 801371c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8013724:	69fb      	ldr	r3, [r7, #28]
 8013726:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801372a:	d101      	bne.n	8013730 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 801372c:	2300      	movs	r3, #0
 801372e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8013730:	69fb      	ldr	r3, [r7, #28]
}
 8013732:	4618      	mov	r0, r3
 8013734:	3720      	adds	r7, #32
 8013736:	46bd      	mov	sp, r7
 8013738:	bd80      	pop	{r7, pc}
 801373a:	bf00      	nop
 801373c:	05f5e100 	.word	0x05f5e100

08013740 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8013740:	b580      	push	{r7, lr}
 8013742:	b088      	sub	sp, #32
 8013744:	af00      	add	r7, sp, #0
 8013746:	6078      	str	r0, [r7, #4]
 8013748:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801374a:	683b      	ldr	r3, [r7, #0]
 801374c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 801374e:	2307      	movs	r3, #7
 8013750:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013752:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013756:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013758:	2300      	movs	r3, #0
 801375a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801375c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013760:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013762:	f107 0308 	add.w	r3, r7, #8
 8013766:	4619      	mov	r1, r3
 8013768:	6878      	ldr	r0, [r7, #4]
 801376a:	f7ff fe87 	bl	801347c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 801376e:	f241 3288 	movw	r2, #5000	; 0x1388
 8013772:	2107      	movs	r1, #7
 8013774:	6878      	ldr	r0, [r7, #4]
 8013776:	f000 f973 	bl	8013a60 <SDMMC_GetCmdResp1>
 801377a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801377c:	69fb      	ldr	r3, [r7, #28]
}
 801377e:	4618      	mov	r0, r3
 8013780:	3720      	adds	r7, #32
 8013782:	46bd      	mov	sp, r7
 8013784:	bd80      	pop	{r7, pc}

08013786 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8013786:	b580      	push	{r7, lr}
 8013788:	b088      	sub	sp, #32
 801378a:	af00      	add	r7, sp, #0
 801378c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801378e:	2300      	movs	r3, #0
 8013790:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8013792:	2300      	movs	r3, #0
 8013794:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8013796:	2300      	movs	r3, #0
 8013798:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801379a:	2300      	movs	r3, #0
 801379c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801379e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80137a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80137a4:	f107 0308 	add.w	r3, r7, #8
 80137a8:	4619      	mov	r1, r3
 80137aa:	6878      	ldr	r0, [r7, #4]
 80137ac:	f7ff fe66 	bl	801347c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80137b0:	6878      	ldr	r0, [r7, #4]
 80137b2:	f000 fb97 	bl	8013ee4 <SDMMC_GetCmdError>
 80137b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80137b8:	69fb      	ldr	r3, [r7, #28]
}
 80137ba:	4618      	mov	r0, r3
 80137bc:	3720      	adds	r7, #32
 80137be:	46bd      	mov	sp, r7
 80137c0:	bd80      	pop	{r7, pc}

080137c2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80137c2:	b580      	push	{r7, lr}
 80137c4:	b088      	sub	sp, #32
 80137c6:	af00      	add	r7, sp, #0
 80137c8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80137ca:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80137ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80137d0:	2308      	movs	r3, #8
 80137d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80137d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80137d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80137da:	2300      	movs	r3, #0
 80137dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80137de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80137e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80137e4:	f107 0308 	add.w	r3, r7, #8
 80137e8:	4619      	mov	r1, r3
 80137ea:	6878      	ldr	r0, [r7, #4]
 80137ec:	f7ff fe46 	bl	801347c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80137f0:	6878      	ldr	r0, [r7, #4]
 80137f2:	f000 fb29 	bl	8013e48 <SDMMC_GetCmdResp7>
 80137f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80137f8:	69fb      	ldr	r3, [r7, #28]
}
 80137fa:	4618      	mov	r0, r3
 80137fc:	3720      	adds	r7, #32
 80137fe:	46bd      	mov	sp, r7
 8013800:	bd80      	pop	{r7, pc}

08013802 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013802:	b580      	push	{r7, lr}
 8013804:	b088      	sub	sp, #32
 8013806:	af00      	add	r7, sp, #0
 8013808:	6078      	str	r0, [r7, #4]
 801380a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801380c:	683b      	ldr	r3, [r7, #0]
 801380e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8013810:	2337      	movs	r3, #55	; 0x37
 8013812:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013814:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013818:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801381a:	2300      	movs	r3, #0
 801381c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801381e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013822:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013824:	f107 0308 	add.w	r3, r7, #8
 8013828:	4619      	mov	r1, r3
 801382a:	6878      	ldr	r0, [r7, #4]
 801382c:	f7ff fe26 	bl	801347c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8013830:	f241 3288 	movw	r2, #5000	; 0x1388
 8013834:	2137      	movs	r1, #55	; 0x37
 8013836:	6878      	ldr	r0, [r7, #4]
 8013838:	f000 f912 	bl	8013a60 <SDMMC_GetCmdResp1>
 801383c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801383e:	69fb      	ldr	r3, [r7, #28]
}
 8013840:	4618      	mov	r0, r3
 8013842:	3720      	adds	r7, #32
 8013844:	46bd      	mov	sp, r7
 8013846:	bd80      	pop	{r7, pc}

08013848 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013848:	b580      	push	{r7, lr}
 801384a:	b088      	sub	sp, #32
 801384c:	af00      	add	r7, sp, #0
 801384e:	6078      	str	r0, [r7, #4]
 8013850:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8013852:	683b      	ldr	r3, [r7, #0]
 8013854:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8013856:	2329      	movs	r3, #41	; 0x29
 8013858:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801385a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801385e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013860:	2300      	movs	r3, #0
 8013862:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013868:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801386a:	f107 0308 	add.w	r3, r7, #8
 801386e:	4619      	mov	r1, r3
 8013870:	6878      	ldr	r0, [r7, #4]
 8013872:	f7ff fe03 	bl	801347c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8013876:	6878      	ldr	r0, [r7, #4]
 8013878:	f000 fa2e 	bl	8013cd8 <SDMMC_GetCmdResp3>
 801387c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801387e:	69fb      	ldr	r3, [r7, #28]
}
 8013880:	4618      	mov	r0, r3
 8013882:	3720      	adds	r7, #32
 8013884:	46bd      	mov	sp, r7
 8013886:	bd80      	pop	{r7, pc}

08013888 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8013888:	b580      	push	{r7, lr}
 801388a:	b088      	sub	sp, #32
 801388c:	af00      	add	r7, sp, #0
 801388e:	6078      	str	r0, [r7, #4]
 8013890:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8013892:	683b      	ldr	r3, [r7, #0]
 8013894:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8013896:	2306      	movs	r3, #6
 8013898:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801389a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801389e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80138a0:	2300      	movs	r3, #0
 80138a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80138a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80138a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80138aa:	f107 0308 	add.w	r3, r7, #8
 80138ae:	4619      	mov	r1, r3
 80138b0:	6878      	ldr	r0, [r7, #4]
 80138b2:	f7ff fde3 	bl	801347c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80138b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80138ba:	2106      	movs	r1, #6
 80138bc:	6878      	ldr	r0, [r7, #4]
 80138be:	f000 f8cf 	bl	8013a60 <SDMMC_GetCmdResp1>
 80138c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80138c4:	69fb      	ldr	r3, [r7, #28]
}
 80138c6:	4618      	mov	r0, r3
 80138c8:	3720      	adds	r7, #32
 80138ca:	46bd      	mov	sp, r7
 80138cc:	bd80      	pop	{r7, pc}

080138ce <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80138ce:	b580      	push	{r7, lr}
 80138d0:	b088      	sub	sp, #32
 80138d2:	af00      	add	r7, sp, #0
 80138d4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80138d6:	2300      	movs	r3, #0
 80138d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80138da:	2333      	movs	r3, #51	; 0x33
 80138dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80138de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80138e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80138e4:	2300      	movs	r3, #0
 80138e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80138e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80138ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80138ee:	f107 0308 	add.w	r3, r7, #8
 80138f2:	4619      	mov	r1, r3
 80138f4:	6878      	ldr	r0, [r7, #4]
 80138f6:	f7ff fdc1 	bl	801347c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80138fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80138fe:	2133      	movs	r1, #51	; 0x33
 8013900:	6878      	ldr	r0, [r7, #4]
 8013902:	f000 f8ad 	bl	8013a60 <SDMMC_GetCmdResp1>
 8013906:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013908:	69fb      	ldr	r3, [r7, #28]
}
 801390a:	4618      	mov	r0, r3
 801390c:	3720      	adds	r7, #32
 801390e:	46bd      	mov	sp, r7
 8013910:	bd80      	pop	{r7, pc}

08013912 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8013912:	b580      	push	{r7, lr}
 8013914:	b088      	sub	sp, #32
 8013916:	af00      	add	r7, sp, #0
 8013918:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801391a:	2300      	movs	r3, #0
 801391c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801391e:	2302      	movs	r3, #2
 8013920:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8013922:	f44f 7340 	mov.w	r3, #768	; 0x300
 8013926:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013928:	2300      	movs	r3, #0
 801392a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801392c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013930:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013932:	f107 0308 	add.w	r3, r7, #8
 8013936:	4619      	mov	r1, r3
 8013938:	6878      	ldr	r0, [r7, #4]
 801393a:	f7ff fd9f 	bl	801347c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801393e:	6878      	ldr	r0, [r7, #4]
 8013940:	f000 f980 	bl	8013c44 <SDMMC_GetCmdResp2>
 8013944:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013946:	69fb      	ldr	r3, [r7, #28]
}
 8013948:	4618      	mov	r0, r3
 801394a:	3720      	adds	r7, #32
 801394c:	46bd      	mov	sp, r7
 801394e:	bd80      	pop	{r7, pc}

08013950 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013950:	b580      	push	{r7, lr}
 8013952:	b088      	sub	sp, #32
 8013954:	af00      	add	r7, sp, #0
 8013956:	6078      	str	r0, [r7, #4]
 8013958:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801395a:	683b      	ldr	r3, [r7, #0]
 801395c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801395e:	2309      	movs	r3, #9
 8013960:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8013962:	f44f 7340 	mov.w	r3, #768	; 0x300
 8013966:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013968:	2300      	movs	r3, #0
 801396a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801396c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013970:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013972:	f107 0308 	add.w	r3, r7, #8
 8013976:	4619      	mov	r1, r3
 8013978:	6878      	ldr	r0, [r7, #4]
 801397a:	f7ff fd7f 	bl	801347c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801397e:	6878      	ldr	r0, [r7, #4]
 8013980:	f000 f960 	bl	8013c44 <SDMMC_GetCmdResp2>
 8013984:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013986:	69fb      	ldr	r3, [r7, #28]
}
 8013988:	4618      	mov	r0, r3
 801398a:	3720      	adds	r7, #32
 801398c:	46bd      	mov	sp, r7
 801398e:	bd80      	pop	{r7, pc}

08013990 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8013990:	b580      	push	{r7, lr}
 8013992:	b088      	sub	sp, #32
 8013994:	af00      	add	r7, sp, #0
 8013996:	6078      	str	r0, [r7, #4]
 8013998:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801399a:	2300      	movs	r3, #0
 801399c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801399e:	2303      	movs	r3, #3
 80139a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80139a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80139a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80139a8:	2300      	movs	r3, #0
 80139aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80139ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80139b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80139b2:	f107 0308 	add.w	r3, r7, #8
 80139b6:	4619      	mov	r1, r3
 80139b8:	6878      	ldr	r0, [r7, #4]
 80139ba:	f7ff fd5f 	bl	801347c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80139be:	683a      	ldr	r2, [r7, #0]
 80139c0:	2103      	movs	r1, #3
 80139c2:	6878      	ldr	r0, [r7, #4]
 80139c4:	f000 f9c8 	bl	8013d58 <SDMMC_GetCmdResp6>
 80139c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80139ca:	69fb      	ldr	r3, [r7, #28]
}
 80139cc:	4618      	mov	r0, r3
 80139ce:	3720      	adds	r7, #32
 80139d0:	46bd      	mov	sp, r7
 80139d2:	bd80      	pop	{r7, pc}

080139d4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80139d4:	b580      	push	{r7, lr}
 80139d6:	b088      	sub	sp, #32
 80139d8:	af00      	add	r7, sp, #0
 80139da:	6078      	str	r0, [r7, #4]
 80139dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80139de:	683b      	ldr	r3, [r7, #0]
 80139e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80139e2:	230d      	movs	r3, #13
 80139e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80139e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80139ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80139ec:	2300      	movs	r3, #0
 80139ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80139f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80139f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80139f6:	f107 0308 	add.w	r3, r7, #8
 80139fa:	4619      	mov	r1, r3
 80139fc:	6878      	ldr	r0, [r7, #4]
 80139fe:	f7ff fd3d 	bl	801347c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8013a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8013a06:	210d      	movs	r1, #13
 8013a08:	6878      	ldr	r0, [r7, #4]
 8013a0a:	f000 f829 	bl	8013a60 <SDMMC_GetCmdResp1>
 8013a0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013a10:	69fb      	ldr	r3, [r7, #28]
}
 8013a12:	4618      	mov	r0, r3
 8013a14:	3720      	adds	r7, #32
 8013a16:	46bd      	mov	sp, r7
 8013a18:	bd80      	pop	{r7, pc}

08013a1a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8013a1a:	b580      	push	{r7, lr}
 8013a1c:	b088      	sub	sp, #32
 8013a1e:	af00      	add	r7, sp, #0
 8013a20:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8013a22:	2300      	movs	r3, #0
 8013a24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8013a26:	230d      	movs	r3, #13
 8013a28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013a2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013a2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013a30:	2300      	movs	r3, #0
 8013a32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013a38:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013a3a:	f107 0308 	add.w	r3, r7, #8
 8013a3e:	4619      	mov	r1, r3
 8013a40:	6878      	ldr	r0, [r7, #4]
 8013a42:	f7ff fd1b 	bl	801347c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8013a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8013a4a:	210d      	movs	r1, #13
 8013a4c:	6878      	ldr	r0, [r7, #4]
 8013a4e:	f000 f807 	bl	8013a60 <SDMMC_GetCmdResp1>
 8013a52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013a54:	69fb      	ldr	r3, [r7, #28]
}
 8013a56:	4618      	mov	r0, r3
 8013a58:	3720      	adds	r7, #32
 8013a5a:	46bd      	mov	sp, r7
 8013a5c:	bd80      	pop	{r7, pc}
	...

08013a60 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8013a60:	b580      	push	{r7, lr}
 8013a62:	b088      	sub	sp, #32
 8013a64:	af00      	add	r7, sp, #0
 8013a66:	60f8      	str	r0, [r7, #12]
 8013a68:	460b      	mov	r3, r1
 8013a6a:	607a      	str	r2, [r7, #4]
 8013a6c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8013a6e:	4b70      	ldr	r3, [pc, #448]	; (8013c30 <SDMMC_GetCmdResp1+0x1d0>)
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	4a70      	ldr	r2, [pc, #448]	; (8013c34 <SDMMC_GetCmdResp1+0x1d4>)
 8013a74:	fba2 2303 	umull	r2, r3, r2, r3
 8013a78:	0a5a      	lsrs	r2, r3, #9
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	fb02 f303 	mul.w	r3, r2, r3
 8013a80:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8013a82:	69fb      	ldr	r3, [r7, #28]
 8013a84:	1e5a      	subs	r2, r3, #1
 8013a86:	61fa      	str	r2, [r7, #28]
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d102      	bne.n	8013a92 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013a8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013a90:	e0c9      	b.n	8013c26 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a96:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8013a98:	69ba      	ldr	r2, [r7, #24]
 8013a9a:	4b67      	ldr	r3, [pc, #412]	; (8013c38 <SDMMC_GetCmdResp1+0x1d8>)
 8013a9c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d0ef      	beq.n	8013a82 <SDMMC_GetCmdResp1+0x22>
 8013aa2:	69bb      	ldr	r3, [r7, #24]
 8013aa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d1ea      	bne.n	8013a82 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ab0:	f003 0304 	and.w	r3, r3, #4
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d004      	beq.n	8013ac2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	2204      	movs	r2, #4
 8013abc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013abe:	2304      	movs	r3, #4
 8013ac0:	e0b1      	b.n	8013c26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ac6:	f003 0301 	and.w	r3, r3, #1
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d004      	beq.n	8013ad8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	2201      	movs	r2, #1
 8013ad2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013ad4:	2301      	movs	r3, #1
 8013ad6:	e0a6      	b.n	8013c26 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	4a58      	ldr	r2, [pc, #352]	; (8013c3c <SDMMC_GetCmdResp1+0x1dc>)
 8013adc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013ade:	68f8      	ldr	r0, [r7, #12]
 8013ae0:	f7ff fcf6 	bl	80134d0 <SDMMC_GetCommandResponse>
 8013ae4:	4603      	mov	r3, r0
 8013ae6:	461a      	mov	r2, r3
 8013ae8:	7afb      	ldrb	r3, [r7, #11]
 8013aea:	4293      	cmp	r3, r2
 8013aec:	d001      	beq.n	8013af2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013aee:	2301      	movs	r3, #1
 8013af0:	e099      	b.n	8013c26 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8013af2:	2100      	movs	r1, #0
 8013af4:	68f8      	ldr	r0, [r7, #12]
 8013af6:	f7ff fcf8 	bl	80134ea <SDMMC_GetResponse>
 8013afa:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8013afc:	697a      	ldr	r2, [r7, #20]
 8013afe:	4b50      	ldr	r3, [pc, #320]	; (8013c40 <SDMMC_GetCmdResp1+0x1e0>)
 8013b00:	4013      	ands	r3, r2
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d101      	bne.n	8013b0a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8013b06:	2300      	movs	r3, #0
 8013b08:	e08d      	b.n	8013c26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8013b0a:	697b      	ldr	r3, [r7, #20]
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	da02      	bge.n	8013b16 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8013b10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8013b14:	e087      	b.n	8013c26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8013b16:	697b      	ldr	r3, [r7, #20]
 8013b18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d001      	beq.n	8013b24 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8013b20:	2340      	movs	r3, #64	; 0x40
 8013b22:	e080      	b.n	8013c26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8013b24:	697b      	ldr	r3, [r7, #20]
 8013b26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d001      	beq.n	8013b32 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8013b2e:	2380      	movs	r3, #128	; 0x80
 8013b30:	e079      	b.n	8013c26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8013b32:	697b      	ldr	r3, [r7, #20]
 8013b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d002      	beq.n	8013b42 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8013b3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013b40:	e071      	b.n	8013c26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8013b42:	697b      	ldr	r3, [r7, #20]
 8013b44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d002      	beq.n	8013b52 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8013b4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013b50:	e069      	b.n	8013c26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8013b52:	697b      	ldr	r3, [r7, #20]
 8013b54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d002      	beq.n	8013b62 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8013b5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013b60:	e061      	b.n	8013c26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8013b62:	697b      	ldr	r3, [r7, #20]
 8013b64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d002      	beq.n	8013b72 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8013b6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013b70:	e059      	b.n	8013c26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8013b72:	697b      	ldr	r3, [r7, #20]
 8013b74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d002      	beq.n	8013b82 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013b7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013b80:	e051      	b.n	8013c26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8013b82:	697b      	ldr	r3, [r7, #20]
 8013b84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d002      	beq.n	8013b92 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013b8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013b90:	e049      	b.n	8013c26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8013b92:	697b      	ldr	r3, [r7, #20]
 8013b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d002      	beq.n	8013ba2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8013b9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8013ba0:	e041      	b.n	8013c26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8013ba2:	697b      	ldr	r3, [r7, #20]
 8013ba4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d002      	beq.n	8013bb2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8013bac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013bb0:	e039      	b.n	8013c26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8013bb2:	697b      	ldr	r3, [r7, #20]
 8013bb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d002      	beq.n	8013bc2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8013bbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013bc0:	e031      	b.n	8013c26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8013bc2:	697b      	ldr	r3, [r7, #20]
 8013bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d002      	beq.n	8013bd2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8013bcc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8013bd0:	e029      	b.n	8013c26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8013bd2:	697b      	ldr	r3, [r7, #20]
 8013bd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d002      	beq.n	8013be2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8013bdc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013be0:	e021      	b.n	8013c26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8013be2:	697b      	ldr	r3, [r7, #20]
 8013be4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d002      	beq.n	8013bf2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8013bec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8013bf0:	e019      	b.n	8013c26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8013bf2:	697b      	ldr	r3, [r7, #20]
 8013bf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d002      	beq.n	8013c02 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8013bfc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8013c00:	e011      	b.n	8013c26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8013c02:	697b      	ldr	r3, [r7, #20]
 8013c04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d002      	beq.n	8013c12 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8013c0c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013c10:	e009      	b.n	8013c26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8013c12:	697b      	ldr	r3, [r7, #20]
 8013c14:	f003 0308 	and.w	r3, r3, #8
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d002      	beq.n	8013c22 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8013c1c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8013c20:	e001      	b.n	8013c26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013c22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8013c26:	4618      	mov	r0, r3
 8013c28:	3720      	adds	r7, #32
 8013c2a:	46bd      	mov	sp, r7
 8013c2c:	bd80      	pop	{r7, pc}
 8013c2e:	bf00      	nop
 8013c30:	24000000 	.word	0x24000000
 8013c34:	10624dd3 	.word	0x10624dd3
 8013c38:	00200045 	.word	0x00200045
 8013c3c:	002000c5 	.word	0x002000c5
 8013c40:	fdffe008 	.word	0xfdffe008

08013c44 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8013c44:	b480      	push	{r7}
 8013c46:	b085      	sub	sp, #20
 8013c48:	af00      	add	r7, sp, #0
 8013c4a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013c4c:	4b1f      	ldr	r3, [pc, #124]	; (8013ccc <SDMMC_GetCmdResp2+0x88>)
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	4a1f      	ldr	r2, [pc, #124]	; (8013cd0 <SDMMC_GetCmdResp2+0x8c>)
 8013c52:	fba2 2303 	umull	r2, r3, r2, r3
 8013c56:	0a5b      	lsrs	r3, r3, #9
 8013c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8013c5c:	fb02 f303 	mul.w	r3, r2, r3
 8013c60:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	1e5a      	subs	r2, r3, #1
 8013c66:	60fa      	str	r2, [r7, #12]
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d102      	bne.n	8013c72 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013c6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013c70:	e026      	b.n	8013cc0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013c76:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013c78:	68bb      	ldr	r3, [r7, #8]
 8013c7a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d0ef      	beq.n	8013c62 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013c82:	68bb      	ldr	r3, [r7, #8]
 8013c84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d1ea      	bne.n	8013c62 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013c90:	f003 0304 	and.w	r3, r3, #4
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d004      	beq.n	8013ca2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	2204      	movs	r2, #4
 8013c9c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013c9e:	2304      	movs	r3, #4
 8013ca0:	e00e      	b.n	8013cc0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ca6:	f003 0301 	and.w	r3, r3, #1
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d004      	beq.n	8013cb8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	2201      	movs	r2, #1
 8013cb2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013cb4:	2301      	movs	r3, #1
 8013cb6:	e003      	b.n	8013cc0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	4a06      	ldr	r2, [pc, #24]	; (8013cd4 <SDMMC_GetCmdResp2+0x90>)
 8013cbc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8013cbe:	2300      	movs	r3, #0
}
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	3714      	adds	r7, #20
 8013cc4:	46bd      	mov	sp, r7
 8013cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cca:	4770      	bx	lr
 8013ccc:	24000000 	.word	0x24000000
 8013cd0:	10624dd3 	.word	0x10624dd3
 8013cd4:	002000c5 	.word	0x002000c5

08013cd8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8013cd8:	b480      	push	{r7}
 8013cda:	b085      	sub	sp, #20
 8013cdc:	af00      	add	r7, sp, #0
 8013cde:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013ce0:	4b1a      	ldr	r3, [pc, #104]	; (8013d4c <SDMMC_GetCmdResp3+0x74>)
 8013ce2:	681b      	ldr	r3, [r3, #0]
 8013ce4:	4a1a      	ldr	r2, [pc, #104]	; (8013d50 <SDMMC_GetCmdResp3+0x78>)
 8013ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8013cea:	0a5b      	lsrs	r3, r3, #9
 8013cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8013cf0:	fb02 f303 	mul.w	r3, r2, r3
 8013cf4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	1e5a      	subs	r2, r3, #1
 8013cfa:	60fa      	str	r2, [r7, #12]
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d102      	bne.n	8013d06 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013d00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013d04:	e01b      	b.n	8013d3e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d0a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013d0c:	68bb      	ldr	r3, [r7, #8]
 8013d0e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d0ef      	beq.n	8013cf6 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013d16:	68bb      	ldr	r3, [r7, #8]
 8013d18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d1ea      	bne.n	8013cf6 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d24:	f003 0304 	and.w	r3, r3, #4
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d004      	beq.n	8013d36 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	2204      	movs	r2, #4
 8013d30:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013d32:	2304      	movs	r3, #4
 8013d34:	e003      	b.n	8013d3e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	4a06      	ldr	r2, [pc, #24]	; (8013d54 <SDMMC_GetCmdResp3+0x7c>)
 8013d3a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8013d3c:	2300      	movs	r3, #0
}
 8013d3e:	4618      	mov	r0, r3
 8013d40:	3714      	adds	r7, #20
 8013d42:	46bd      	mov	sp, r7
 8013d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d48:	4770      	bx	lr
 8013d4a:	bf00      	nop
 8013d4c:	24000000 	.word	0x24000000
 8013d50:	10624dd3 	.word	0x10624dd3
 8013d54:	002000c5 	.word	0x002000c5

08013d58 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8013d58:	b580      	push	{r7, lr}
 8013d5a:	b088      	sub	sp, #32
 8013d5c:	af00      	add	r7, sp, #0
 8013d5e:	60f8      	str	r0, [r7, #12]
 8013d60:	460b      	mov	r3, r1
 8013d62:	607a      	str	r2, [r7, #4]
 8013d64:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013d66:	4b35      	ldr	r3, [pc, #212]	; (8013e3c <SDMMC_GetCmdResp6+0xe4>)
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	4a35      	ldr	r2, [pc, #212]	; (8013e40 <SDMMC_GetCmdResp6+0xe8>)
 8013d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8013d70:	0a5b      	lsrs	r3, r3, #9
 8013d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8013d76:	fb02 f303 	mul.w	r3, r2, r3
 8013d7a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8013d7c:	69fb      	ldr	r3, [r7, #28]
 8013d7e:	1e5a      	subs	r2, r3, #1
 8013d80:	61fa      	str	r2, [r7, #28]
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d102      	bne.n	8013d8c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013d86:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013d8a:	e052      	b.n	8013e32 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d90:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013d92:	69bb      	ldr	r3, [r7, #24]
 8013d94:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d0ef      	beq.n	8013d7c <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013d9c:	69bb      	ldr	r3, [r7, #24]
 8013d9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d1ea      	bne.n	8013d7c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013daa:	f003 0304 	and.w	r3, r3, #4
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d004      	beq.n	8013dbc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	2204      	movs	r2, #4
 8013db6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013db8:	2304      	movs	r3, #4
 8013dba:	e03a      	b.n	8013e32 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013dc0:	f003 0301 	and.w	r3, r3, #1
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d004      	beq.n	8013dd2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013dc8:	68fb      	ldr	r3, [r7, #12]
 8013dca:	2201      	movs	r2, #1
 8013dcc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013dce:	2301      	movs	r3, #1
 8013dd0:	e02f      	b.n	8013e32 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013dd2:	68f8      	ldr	r0, [r7, #12]
 8013dd4:	f7ff fb7c 	bl	80134d0 <SDMMC_GetCommandResponse>
 8013dd8:	4603      	mov	r3, r0
 8013dda:	461a      	mov	r2, r3
 8013ddc:	7afb      	ldrb	r3, [r7, #11]
 8013dde:	4293      	cmp	r3, r2
 8013de0:	d001      	beq.n	8013de6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013de2:	2301      	movs	r3, #1
 8013de4:	e025      	b.n	8013e32 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	4a16      	ldr	r2, [pc, #88]	; (8013e44 <SDMMC_GetCmdResp6+0xec>)
 8013dea:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8013dec:	2100      	movs	r1, #0
 8013dee:	68f8      	ldr	r0, [r7, #12]
 8013df0:	f7ff fb7b 	bl	80134ea <SDMMC_GetResponse>
 8013df4:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8013df6:	697b      	ldr	r3, [r7, #20]
 8013df8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d106      	bne.n	8013e0e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8013e00:	697b      	ldr	r3, [r7, #20]
 8013e02:	0c1b      	lsrs	r3, r3, #16
 8013e04:	b29a      	uxth	r2, r3
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8013e0a:	2300      	movs	r3, #0
 8013e0c:	e011      	b.n	8013e32 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8013e0e:	697b      	ldr	r3, [r7, #20]
 8013e10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d002      	beq.n	8013e1e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013e18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013e1c:	e009      	b.n	8013e32 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8013e1e:	697b      	ldr	r3, [r7, #20]
 8013e20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d002      	beq.n	8013e2e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013e28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013e2c:	e001      	b.n	8013e32 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013e2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8013e32:	4618      	mov	r0, r3
 8013e34:	3720      	adds	r7, #32
 8013e36:	46bd      	mov	sp, r7
 8013e38:	bd80      	pop	{r7, pc}
 8013e3a:	bf00      	nop
 8013e3c:	24000000 	.word	0x24000000
 8013e40:	10624dd3 	.word	0x10624dd3
 8013e44:	002000c5 	.word	0x002000c5

08013e48 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8013e48:	b480      	push	{r7}
 8013e4a:	b085      	sub	sp, #20
 8013e4c:	af00      	add	r7, sp, #0
 8013e4e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013e50:	4b22      	ldr	r3, [pc, #136]	; (8013edc <SDMMC_GetCmdResp7+0x94>)
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	4a22      	ldr	r2, [pc, #136]	; (8013ee0 <SDMMC_GetCmdResp7+0x98>)
 8013e56:	fba2 2303 	umull	r2, r3, r2, r3
 8013e5a:	0a5b      	lsrs	r3, r3, #9
 8013e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8013e60:	fb02 f303 	mul.w	r3, r2, r3
 8013e64:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	1e5a      	subs	r2, r3, #1
 8013e6a:	60fa      	str	r2, [r7, #12]
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d102      	bne.n	8013e76 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013e70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013e74:	e02c      	b.n	8013ed0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e7a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013e7c:	68bb      	ldr	r3, [r7, #8]
 8013e7e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d0ef      	beq.n	8013e66 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013e86:	68bb      	ldr	r3, [r7, #8]
 8013e88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d1ea      	bne.n	8013e66 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e94:	f003 0304 	and.w	r3, r3, #4
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d004      	beq.n	8013ea6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	2204      	movs	r2, #4
 8013ea0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013ea2:	2304      	movs	r3, #4
 8013ea4:	e014      	b.n	8013ed0 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013eaa:	f003 0301 	and.w	r3, r3, #1
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d004      	beq.n	8013ebc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	2201      	movs	r2, #1
 8013eb6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013eb8:	2301      	movs	r3, #1
 8013eba:	e009      	b.n	8013ed0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d002      	beq.n	8013ece <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	2240      	movs	r2, #64	; 0x40
 8013ecc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8013ece:	2300      	movs	r3, #0

}
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	3714      	adds	r7, #20
 8013ed4:	46bd      	mov	sp, r7
 8013ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eda:	4770      	bx	lr
 8013edc:	24000000 	.word	0x24000000
 8013ee0:	10624dd3 	.word	0x10624dd3

08013ee4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8013ee4:	b480      	push	{r7}
 8013ee6:	b085      	sub	sp, #20
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013eec:	4b11      	ldr	r3, [pc, #68]	; (8013f34 <SDMMC_GetCmdError+0x50>)
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	4a11      	ldr	r2, [pc, #68]	; (8013f38 <SDMMC_GetCmdError+0x54>)
 8013ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8013ef6:	0a5b      	lsrs	r3, r3, #9
 8013ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8013efc:	fb02 f303 	mul.w	r3, r2, r3
 8013f00:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	1e5a      	subs	r2, r3, #1
 8013f06:	60fa      	str	r2, [r7, #12]
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d102      	bne.n	8013f12 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013f0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013f10:	e009      	b.n	8013f26 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d0f1      	beq.n	8013f02 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	4a06      	ldr	r2, [pc, #24]	; (8013f3c <SDMMC_GetCmdError+0x58>)
 8013f22:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8013f24:	2300      	movs	r3, #0
}
 8013f26:	4618      	mov	r0, r3
 8013f28:	3714      	adds	r7, #20
 8013f2a:	46bd      	mov	sp, r7
 8013f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f30:	4770      	bx	lr
 8013f32:	bf00      	nop
 8013f34:	24000000 	.word	0x24000000
 8013f38:	10624dd3 	.word	0x10624dd3
 8013f3c:	002000c5 	.word	0x002000c5

08013f40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013f40:	b084      	sub	sp, #16
 8013f42:	b580      	push	{r7, lr}
 8013f44:	b084      	sub	sp, #16
 8013f46:	af00      	add	r7, sp, #0
 8013f48:	6078      	str	r0, [r7, #4]
 8013f4a:	f107 001c 	add.w	r0, r7, #28
 8013f4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f54:	2b01      	cmp	r3, #1
 8013f56:	d120      	bne.n	8013f9a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	68da      	ldr	r2, [r3, #12]
 8013f68:	4b2a      	ldr	r3, [pc, #168]	; (8014014 <USB_CoreInit+0xd4>)
 8013f6a:	4013      	ands	r3, r2
 8013f6c:	687a      	ldr	r2, [r7, #4]
 8013f6e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	68db      	ldr	r3, [r3, #12]
 8013f74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8013f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013f7e:	2b01      	cmp	r3, #1
 8013f80:	d105      	bne.n	8013f8e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	68db      	ldr	r3, [r3, #12]
 8013f86:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8013f8e:	6878      	ldr	r0, [r7, #4]
 8013f90:	f001 faf8 	bl	8015584 <USB_CoreReset>
 8013f94:	4603      	mov	r3, r0
 8013f96:	73fb      	strb	r3, [r7, #15]
 8013f98:	e01a      	b.n	8013fd0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	68db      	ldr	r3, [r3, #12]
 8013f9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8013fa6:	6878      	ldr	r0, [r7, #4]
 8013fa8:	f001 faec 	bl	8015584 <USB_CoreReset>
 8013fac:	4603      	mov	r3, r0
 8013fae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8013fb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d106      	bne.n	8013fc4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013fba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	639a      	str	r2, [r3, #56]	; 0x38
 8013fc2:	e005      	b.n	8013fd0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013fc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8013fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fd2:	2b01      	cmp	r3, #1
 8013fd4:	d116      	bne.n	8014004 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013fda:	b29a      	uxth	r2, r3
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013fe4:	4b0c      	ldr	r3, [pc, #48]	; (8014018 <USB_CoreInit+0xd8>)
 8013fe6:	4313      	orrs	r3, r2
 8013fe8:	687a      	ldr	r2, [r7, #4]
 8013fea:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	689b      	ldr	r3, [r3, #8]
 8013ff0:	f043 0206 	orr.w	r2, r3, #6
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	689b      	ldr	r3, [r3, #8]
 8013ffc:	f043 0220 	orr.w	r2, r3, #32
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8014004:	7bfb      	ldrb	r3, [r7, #15]
}
 8014006:	4618      	mov	r0, r3
 8014008:	3710      	adds	r7, #16
 801400a:	46bd      	mov	sp, r7
 801400c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014010:	b004      	add	sp, #16
 8014012:	4770      	bx	lr
 8014014:	ffbdffbf 	.word	0xffbdffbf
 8014018:	03ee0000 	.word	0x03ee0000

0801401c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801401c:	b480      	push	{r7}
 801401e:	b087      	sub	sp, #28
 8014020:	af00      	add	r7, sp, #0
 8014022:	60f8      	str	r0, [r7, #12]
 8014024:	60b9      	str	r1, [r7, #8]
 8014026:	4613      	mov	r3, r2
 8014028:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801402a:	79fb      	ldrb	r3, [r7, #7]
 801402c:	2b02      	cmp	r3, #2
 801402e:	d165      	bne.n	80140fc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8014030:	68bb      	ldr	r3, [r7, #8]
 8014032:	4a41      	ldr	r2, [pc, #260]	; (8014138 <USB_SetTurnaroundTime+0x11c>)
 8014034:	4293      	cmp	r3, r2
 8014036:	d906      	bls.n	8014046 <USB_SetTurnaroundTime+0x2a>
 8014038:	68bb      	ldr	r3, [r7, #8]
 801403a:	4a40      	ldr	r2, [pc, #256]	; (801413c <USB_SetTurnaroundTime+0x120>)
 801403c:	4293      	cmp	r3, r2
 801403e:	d202      	bcs.n	8014046 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8014040:	230f      	movs	r3, #15
 8014042:	617b      	str	r3, [r7, #20]
 8014044:	e062      	b.n	801410c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8014046:	68bb      	ldr	r3, [r7, #8]
 8014048:	4a3c      	ldr	r2, [pc, #240]	; (801413c <USB_SetTurnaroundTime+0x120>)
 801404a:	4293      	cmp	r3, r2
 801404c:	d306      	bcc.n	801405c <USB_SetTurnaroundTime+0x40>
 801404e:	68bb      	ldr	r3, [r7, #8]
 8014050:	4a3b      	ldr	r2, [pc, #236]	; (8014140 <USB_SetTurnaroundTime+0x124>)
 8014052:	4293      	cmp	r3, r2
 8014054:	d202      	bcs.n	801405c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8014056:	230e      	movs	r3, #14
 8014058:	617b      	str	r3, [r7, #20]
 801405a:	e057      	b.n	801410c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801405c:	68bb      	ldr	r3, [r7, #8]
 801405e:	4a38      	ldr	r2, [pc, #224]	; (8014140 <USB_SetTurnaroundTime+0x124>)
 8014060:	4293      	cmp	r3, r2
 8014062:	d306      	bcc.n	8014072 <USB_SetTurnaroundTime+0x56>
 8014064:	68bb      	ldr	r3, [r7, #8]
 8014066:	4a37      	ldr	r2, [pc, #220]	; (8014144 <USB_SetTurnaroundTime+0x128>)
 8014068:	4293      	cmp	r3, r2
 801406a:	d202      	bcs.n	8014072 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801406c:	230d      	movs	r3, #13
 801406e:	617b      	str	r3, [r7, #20]
 8014070:	e04c      	b.n	801410c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8014072:	68bb      	ldr	r3, [r7, #8]
 8014074:	4a33      	ldr	r2, [pc, #204]	; (8014144 <USB_SetTurnaroundTime+0x128>)
 8014076:	4293      	cmp	r3, r2
 8014078:	d306      	bcc.n	8014088 <USB_SetTurnaroundTime+0x6c>
 801407a:	68bb      	ldr	r3, [r7, #8]
 801407c:	4a32      	ldr	r2, [pc, #200]	; (8014148 <USB_SetTurnaroundTime+0x12c>)
 801407e:	4293      	cmp	r3, r2
 8014080:	d802      	bhi.n	8014088 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8014082:	230c      	movs	r3, #12
 8014084:	617b      	str	r3, [r7, #20]
 8014086:	e041      	b.n	801410c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8014088:	68bb      	ldr	r3, [r7, #8]
 801408a:	4a2f      	ldr	r2, [pc, #188]	; (8014148 <USB_SetTurnaroundTime+0x12c>)
 801408c:	4293      	cmp	r3, r2
 801408e:	d906      	bls.n	801409e <USB_SetTurnaroundTime+0x82>
 8014090:	68bb      	ldr	r3, [r7, #8]
 8014092:	4a2e      	ldr	r2, [pc, #184]	; (801414c <USB_SetTurnaroundTime+0x130>)
 8014094:	4293      	cmp	r3, r2
 8014096:	d802      	bhi.n	801409e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8014098:	230b      	movs	r3, #11
 801409a:	617b      	str	r3, [r7, #20]
 801409c:	e036      	b.n	801410c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801409e:	68bb      	ldr	r3, [r7, #8]
 80140a0:	4a2a      	ldr	r2, [pc, #168]	; (801414c <USB_SetTurnaroundTime+0x130>)
 80140a2:	4293      	cmp	r3, r2
 80140a4:	d906      	bls.n	80140b4 <USB_SetTurnaroundTime+0x98>
 80140a6:	68bb      	ldr	r3, [r7, #8]
 80140a8:	4a29      	ldr	r2, [pc, #164]	; (8014150 <USB_SetTurnaroundTime+0x134>)
 80140aa:	4293      	cmp	r3, r2
 80140ac:	d802      	bhi.n	80140b4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80140ae:	230a      	movs	r3, #10
 80140b0:	617b      	str	r3, [r7, #20]
 80140b2:	e02b      	b.n	801410c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80140b4:	68bb      	ldr	r3, [r7, #8]
 80140b6:	4a26      	ldr	r2, [pc, #152]	; (8014150 <USB_SetTurnaroundTime+0x134>)
 80140b8:	4293      	cmp	r3, r2
 80140ba:	d906      	bls.n	80140ca <USB_SetTurnaroundTime+0xae>
 80140bc:	68bb      	ldr	r3, [r7, #8]
 80140be:	4a25      	ldr	r2, [pc, #148]	; (8014154 <USB_SetTurnaroundTime+0x138>)
 80140c0:	4293      	cmp	r3, r2
 80140c2:	d202      	bcs.n	80140ca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80140c4:	2309      	movs	r3, #9
 80140c6:	617b      	str	r3, [r7, #20]
 80140c8:	e020      	b.n	801410c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80140ca:	68bb      	ldr	r3, [r7, #8]
 80140cc:	4a21      	ldr	r2, [pc, #132]	; (8014154 <USB_SetTurnaroundTime+0x138>)
 80140ce:	4293      	cmp	r3, r2
 80140d0:	d306      	bcc.n	80140e0 <USB_SetTurnaroundTime+0xc4>
 80140d2:	68bb      	ldr	r3, [r7, #8]
 80140d4:	4a20      	ldr	r2, [pc, #128]	; (8014158 <USB_SetTurnaroundTime+0x13c>)
 80140d6:	4293      	cmp	r3, r2
 80140d8:	d802      	bhi.n	80140e0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80140da:	2308      	movs	r3, #8
 80140dc:	617b      	str	r3, [r7, #20]
 80140de:	e015      	b.n	801410c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80140e0:	68bb      	ldr	r3, [r7, #8]
 80140e2:	4a1d      	ldr	r2, [pc, #116]	; (8014158 <USB_SetTurnaroundTime+0x13c>)
 80140e4:	4293      	cmp	r3, r2
 80140e6:	d906      	bls.n	80140f6 <USB_SetTurnaroundTime+0xda>
 80140e8:	68bb      	ldr	r3, [r7, #8]
 80140ea:	4a1c      	ldr	r2, [pc, #112]	; (801415c <USB_SetTurnaroundTime+0x140>)
 80140ec:	4293      	cmp	r3, r2
 80140ee:	d202      	bcs.n	80140f6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80140f0:	2307      	movs	r3, #7
 80140f2:	617b      	str	r3, [r7, #20]
 80140f4:	e00a      	b.n	801410c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80140f6:	2306      	movs	r3, #6
 80140f8:	617b      	str	r3, [r7, #20]
 80140fa:	e007      	b.n	801410c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80140fc:	79fb      	ldrb	r3, [r7, #7]
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d102      	bne.n	8014108 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8014102:	2309      	movs	r3, #9
 8014104:	617b      	str	r3, [r7, #20]
 8014106:	e001      	b.n	801410c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8014108:	2309      	movs	r3, #9
 801410a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	68db      	ldr	r3, [r3, #12]
 8014110:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8014114:	68fb      	ldr	r3, [r7, #12]
 8014116:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8014118:	68fb      	ldr	r3, [r7, #12]
 801411a:	68da      	ldr	r2, [r3, #12]
 801411c:	697b      	ldr	r3, [r7, #20]
 801411e:	029b      	lsls	r3, r3, #10
 8014120:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8014124:	431a      	orrs	r2, r3
 8014126:	68fb      	ldr	r3, [r7, #12]
 8014128:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801412a:	2300      	movs	r3, #0
}
 801412c:	4618      	mov	r0, r3
 801412e:	371c      	adds	r7, #28
 8014130:	46bd      	mov	sp, r7
 8014132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014136:	4770      	bx	lr
 8014138:	00d8acbf 	.word	0x00d8acbf
 801413c:	00e4e1c0 	.word	0x00e4e1c0
 8014140:	00f42400 	.word	0x00f42400
 8014144:	01067380 	.word	0x01067380
 8014148:	011a499f 	.word	0x011a499f
 801414c:	01312cff 	.word	0x01312cff
 8014150:	014ca43f 	.word	0x014ca43f
 8014154:	016e3600 	.word	0x016e3600
 8014158:	01a6ab1f 	.word	0x01a6ab1f
 801415c:	01e84800 	.word	0x01e84800

08014160 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014160:	b480      	push	{r7}
 8014162:	b083      	sub	sp, #12
 8014164:	af00      	add	r7, sp, #0
 8014166:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	689b      	ldr	r3, [r3, #8]
 801416c:	f043 0201 	orr.w	r2, r3, #1
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014174:	2300      	movs	r3, #0
}
 8014176:	4618      	mov	r0, r3
 8014178:	370c      	adds	r7, #12
 801417a:	46bd      	mov	sp, r7
 801417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014180:	4770      	bx	lr

08014182 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014182:	b480      	push	{r7}
 8014184:	b083      	sub	sp, #12
 8014186:	af00      	add	r7, sp, #0
 8014188:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	689b      	ldr	r3, [r3, #8]
 801418e:	f023 0201 	bic.w	r2, r3, #1
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014196:	2300      	movs	r3, #0
}
 8014198:	4618      	mov	r0, r3
 801419a:	370c      	adds	r7, #12
 801419c:	46bd      	mov	sp, r7
 801419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141a2:	4770      	bx	lr

080141a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80141a4:	b580      	push	{r7, lr}
 80141a6:	b084      	sub	sp, #16
 80141a8:	af00      	add	r7, sp, #0
 80141aa:	6078      	str	r0, [r7, #4]
 80141ac:	460b      	mov	r3, r1
 80141ae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80141b0:	2300      	movs	r3, #0
 80141b2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	68db      	ldr	r3, [r3, #12]
 80141b8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80141c0:	78fb      	ldrb	r3, [r7, #3]
 80141c2:	2b01      	cmp	r3, #1
 80141c4:	d115      	bne.n	80141f2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	68db      	ldr	r3, [r3, #12]
 80141ca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80141d2:	2001      	movs	r0, #1
 80141d4:	f7f0 f8ac 	bl	8004330 <HAL_Delay>
      ms++;
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	3301      	adds	r3, #1
 80141dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80141de:	6878      	ldr	r0, [r7, #4]
 80141e0:	f001 f93f 	bl	8015462 <USB_GetMode>
 80141e4:	4603      	mov	r3, r0
 80141e6:	2b01      	cmp	r3, #1
 80141e8:	d01e      	beq.n	8014228 <USB_SetCurrentMode+0x84>
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	2b31      	cmp	r3, #49	; 0x31
 80141ee:	d9f0      	bls.n	80141d2 <USB_SetCurrentMode+0x2e>
 80141f0:	e01a      	b.n	8014228 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80141f2:	78fb      	ldrb	r3, [r7, #3]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d115      	bne.n	8014224 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	68db      	ldr	r3, [r3, #12]
 80141fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8014204:	2001      	movs	r0, #1
 8014206:	f7f0 f893 	bl	8004330 <HAL_Delay>
      ms++;
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	3301      	adds	r3, #1
 801420e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8014210:	6878      	ldr	r0, [r7, #4]
 8014212:	f001 f926 	bl	8015462 <USB_GetMode>
 8014216:	4603      	mov	r3, r0
 8014218:	2b00      	cmp	r3, #0
 801421a:	d005      	beq.n	8014228 <USB_SetCurrentMode+0x84>
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	2b31      	cmp	r3, #49	; 0x31
 8014220:	d9f0      	bls.n	8014204 <USB_SetCurrentMode+0x60>
 8014222:	e001      	b.n	8014228 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8014224:	2301      	movs	r3, #1
 8014226:	e005      	b.n	8014234 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8014228:	68fb      	ldr	r3, [r7, #12]
 801422a:	2b32      	cmp	r3, #50	; 0x32
 801422c:	d101      	bne.n	8014232 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801422e:	2301      	movs	r3, #1
 8014230:	e000      	b.n	8014234 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8014232:	2300      	movs	r3, #0
}
 8014234:	4618      	mov	r0, r3
 8014236:	3710      	adds	r7, #16
 8014238:	46bd      	mov	sp, r7
 801423a:	bd80      	pop	{r7, pc}

0801423c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801423c:	b084      	sub	sp, #16
 801423e:	b580      	push	{r7, lr}
 8014240:	b086      	sub	sp, #24
 8014242:	af00      	add	r7, sp, #0
 8014244:	6078      	str	r0, [r7, #4]
 8014246:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801424a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801424e:	2300      	movs	r3, #0
 8014250:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8014256:	2300      	movs	r3, #0
 8014258:	613b      	str	r3, [r7, #16]
 801425a:	e009      	b.n	8014270 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801425c:	687a      	ldr	r2, [r7, #4]
 801425e:	693b      	ldr	r3, [r7, #16]
 8014260:	3340      	adds	r3, #64	; 0x40
 8014262:	009b      	lsls	r3, r3, #2
 8014264:	4413      	add	r3, r2
 8014266:	2200      	movs	r2, #0
 8014268:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801426a:	693b      	ldr	r3, [r7, #16]
 801426c:	3301      	adds	r3, #1
 801426e:	613b      	str	r3, [r7, #16]
 8014270:	693b      	ldr	r3, [r7, #16]
 8014272:	2b0e      	cmp	r3, #14
 8014274:	d9f2      	bls.n	801425c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8014276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014278:	2b00      	cmp	r3, #0
 801427a:	d11c      	bne.n	80142b6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014282:	685b      	ldr	r3, [r3, #4]
 8014284:	68fa      	ldr	r2, [r7, #12]
 8014286:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801428a:	f043 0302 	orr.w	r3, r3, #2
 801428e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014294:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	601a      	str	r2, [r3, #0]
 80142b4:	e005      	b.n	80142c2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80142ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80142c8:	461a      	mov	r2, r3
 80142ca:	2300      	movs	r3, #0
 80142cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80142ce:	68fb      	ldr	r3, [r7, #12]
 80142d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80142d4:	4619      	mov	r1, r3
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80142dc:	461a      	mov	r2, r3
 80142de:	680b      	ldr	r3, [r1, #0]
 80142e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80142e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142e4:	2b01      	cmp	r3, #1
 80142e6:	d10c      	bne.n	8014302 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80142e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d104      	bne.n	80142f8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80142ee:	2100      	movs	r1, #0
 80142f0:	6878      	ldr	r0, [r7, #4]
 80142f2:	f000 f965 	bl	80145c0 <USB_SetDevSpeed>
 80142f6:	e008      	b.n	801430a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80142f8:	2101      	movs	r1, #1
 80142fa:	6878      	ldr	r0, [r7, #4]
 80142fc:	f000 f960 	bl	80145c0 <USB_SetDevSpeed>
 8014300:	e003      	b.n	801430a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8014302:	2103      	movs	r1, #3
 8014304:	6878      	ldr	r0, [r7, #4]
 8014306:	f000 f95b 	bl	80145c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801430a:	2110      	movs	r1, #16
 801430c:	6878      	ldr	r0, [r7, #4]
 801430e:	f000 f8f3 	bl	80144f8 <USB_FlushTxFifo>
 8014312:	4603      	mov	r3, r0
 8014314:	2b00      	cmp	r3, #0
 8014316:	d001      	beq.n	801431c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8014318:	2301      	movs	r3, #1
 801431a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801431c:	6878      	ldr	r0, [r7, #4]
 801431e:	f000 f91f 	bl	8014560 <USB_FlushRxFifo>
 8014322:	4603      	mov	r3, r0
 8014324:	2b00      	cmp	r3, #0
 8014326:	d001      	beq.n	801432c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8014328:	2301      	movs	r3, #1
 801432a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014332:	461a      	mov	r2, r3
 8014334:	2300      	movs	r3, #0
 8014336:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8014338:	68fb      	ldr	r3, [r7, #12]
 801433a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801433e:	461a      	mov	r2, r3
 8014340:	2300      	movs	r3, #0
 8014342:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8014344:	68fb      	ldr	r3, [r7, #12]
 8014346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801434a:	461a      	mov	r2, r3
 801434c:	2300      	movs	r3, #0
 801434e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014350:	2300      	movs	r3, #0
 8014352:	613b      	str	r3, [r7, #16]
 8014354:	e043      	b.n	80143de <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014356:	693b      	ldr	r3, [r7, #16]
 8014358:	015a      	lsls	r2, r3, #5
 801435a:	68fb      	ldr	r3, [r7, #12]
 801435c:	4413      	add	r3, r2
 801435e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014368:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801436c:	d118      	bne.n	80143a0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 801436e:	693b      	ldr	r3, [r7, #16]
 8014370:	2b00      	cmp	r3, #0
 8014372:	d10a      	bne.n	801438a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8014374:	693b      	ldr	r3, [r7, #16]
 8014376:	015a      	lsls	r2, r3, #5
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	4413      	add	r3, r2
 801437c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014380:	461a      	mov	r2, r3
 8014382:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8014386:	6013      	str	r3, [r2, #0]
 8014388:	e013      	b.n	80143b2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801438a:	693b      	ldr	r3, [r7, #16]
 801438c:	015a      	lsls	r2, r3, #5
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	4413      	add	r3, r2
 8014392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014396:	461a      	mov	r2, r3
 8014398:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801439c:	6013      	str	r3, [r2, #0]
 801439e:	e008      	b.n	80143b2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80143a0:	693b      	ldr	r3, [r7, #16]
 80143a2:	015a      	lsls	r2, r3, #5
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	4413      	add	r3, r2
 80143a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143ac:	461a      	mov	r2, r3
 80143ae:	2300      	movs	r3, #0
 80143b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80143b2:	693b      	ldr	r3, [r7, #16]
 80143b4:	015a      	lsls	r2, r3, #5
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	4413      	add	r3, r2
 80143ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143be:	461a      	mov	r2, r3
 80143c0:	2300      	movs	r3, #0
 80143c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80143c4:	693b      	ldr	r3, [r7, #16]
 80143c6:	015a      	lsls	r2, r3, #5
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	4413      	add	r3, r2
 80143cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143d0:	461a      	mov	r2, r3
 80143d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80143d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80143d8:	693b      	ldr	r3, [r7, #16]
 80143da:	3301      	adds	r3, #1
 80143dc:	613b      	str	r3, [r7, #16]
 80143de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143e0:	693a      	ldr	r2, [r7, #16]
 80143e2:	429a      	cmp	r2, r3
 80143e4:	d3b7      	bcc.n	8014356 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80143e6:	2300      	movs	r3, #0
 80143e8:	613b      	str	r3, [r7, #16]
 80143ea:	e043      	b.n	8014474 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80143ec:	693b      	ldr	r3, [r7, #16]
 80143ee:	015a      	lsls	r2, r3, #5
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	4413      	add	r3, r2
 80143f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80143f8:	681b      	ldr	r3, [r3, #0]
 80143fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80143fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014402:	d118      	bne.n	8014436 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8014404:	693b      	ldr	r3, [r7, #16]
 8014406:	2b00      	cmp	r3, #0
 8014408:	d10a      	bne.n	8014420 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801440a:	693b      	ldr	r3, [r7, #16]
 801440c:	015a      	lsls	r2, r3, #5
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	4413      	add	r3, r2
 8014412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014416:	461a      	mov	r2, r3
 8014418:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801441c:	6013      	str	r3, [r2, #0]
 801441e:	e013      	b.n	8014448 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8014420:	693b      	ldr	r3, [r7, #16]
 8014422:	015a      	lsls	r2, r3, #5
 8014424:	68fb      	ldr	r3, [r7, #12]
 8014426:	4413      	add	r3, r2
 8014428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801442c:	461a      	mov	r2, r3
 801442e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8014432:	6013      	str	r3, [r2, #0]
 8014434:	e008      	b.n	8014448 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8014436:	693b      	ldr	r3, [r7, #16]
 8014438:	015a      	lsls	r2, r3, #5
 801443a:	68fb      	ldr	r3, [r7, #12]
 801443c:	4413      	add	r3, r2
 801443e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014442:	461a      	mov	r2, r3
 8014444:	2300      	movs	r3, #0
 8014446:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8014448:	693b      	ldr	r3, [r7, #16]
 801444a:	015a      	lsls	r2, r3, #5
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	4413      	add	r3, r2
 8014450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014454:	461a      	mov	r2, r3
 8014456:	2300      	movs	r3, #0
 8014458:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801445a:	693b      	ldr	r3, [r7, #16]
 801445c:	015a      	lsls	r2, r3, #5
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	4413      	add	r3, r2
 8014462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014466:	461a      	mov	r2, r3
 8014468:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801446c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801446e:	693b      	ldr	r3, [r7, #16]
 8014470:	3301      	adds	r3, #1
 8014472:	613b      	str	r3, [r7, #16]
 8014474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014476:	693a      	ldr	r2, [r7, #16]
 8014478:	429a      	cmp	r2, r3
 801447a:	d3b7      	bcc.n	80143ec <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014482:	691b      	ldr	r3, [r3, #16]
 8014484:	68fa      	ldr	r2, [r7, #12]
 8014486:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801448a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801448e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	2200      	movs	r2, #0
 8014494:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801449c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801449e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d105      	bne.n	80144b0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	699b      	ldr	r3, [r3, #24]
 80144a8:	f043 0210 	orr.w	r2, r3, #16
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	699a      	ldr	r2, [r3, #24]
 80144b4:	4b0e      	ldr	r3, [pc, #56]	; (80144f0 <USB_DevInit+0x2b4>)
 80144b6:	4313      	orrs	r3, r2
 80144b8:	687a      	ldr	r2, [r7, #4]
 80144ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80144bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d005      	beq.n	80144ce <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	699b      	ldr	r3, [r3, #24]
 80144c6:	f043 0208 	orr.w	r2, r3, #8
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80144ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80144d0:	2b01      	cmp	r3, #1
 80144d2:	d105      	bne.n	80144e0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	699a      	ldr	r2, [r3, #24]
 80144d8:	4b06      	ldr	r3, [pc, #24]	; (80144f4 <USB_DevInit+0x2b8>)
 80144da:	4313      	orrs	r3, r2
 80144dc:	687a      	ldr	r2, [r7, #4]
 80144de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80144e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80144e2:	4618      	mov	r0, r3
 80144e4:	3718      	adds	r7, #24
 80144e6:	46bd      	mov	sp, r7
 80144e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80144ec:	b004      	add	sp, #16
 80144ee:	4770      	bx	lr
 80144f0:	803c3800 	.word	0x803c3800
 80144f4:	40000004 	.word	0x40000004

080144f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80144f8:	b480      	push	{r7}
 80144fa:	b085      	sub	sp, #20
 80144fc:	af00      	add	r7, sp, #0
 80144fe:	6078      	str	r0, [r7, #4]
 8014500:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8014502:	2300      	movs	r3, #0
 8014504:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	3301      	adds	r3, #1
 801450a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801450c:	68fb      	ldr	r3, [r7, #12]
 801450e:	4a13      	ldr	r2, [pc, #76]	; (801455c <USB_FlushTxFifo+0x64>)
 8014510:	4293      	cmp	r3, r2
 8014512:	d901      	bls.n	8014518 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8014514:	2303      	movs	r3, #3
 8014516:	e01b      	b.n	8014550 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	691b      	ldr	r3, [r3, #16]
 801451c:	2b00      	cmp	r3, #0
 801451e:	daf2      	bge.n	8014506 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8014520:	2300      	movs	r3, #0
 8014522:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8014524:	683b      	ldr	r3, [r7, #0]
 8014526:	019b      	lsls	r3, r3, #6
 8014528:	f043 0220 	orr.w	r2, r3, #32
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	3301      	adds	r3, #1
 8014534:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	4a08      	ldr	r2, [pc, #32]	; (801455c <USB_FlushTxFifo+0x64>)
 801453a:	4293      	cmp	r3, r2
 801453c:	d901      	bls.n	8014542 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801453e:	2303      	movs	r3, #3
 8014540:	e006      	b.n	8014550 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	691b      	ldr	r3, [r3, #16]
 8014546:	f003 0320 	and.w	r3, r3, #32
 801454a:	2b20      	cmp	r3, #32
 801454c:	d0f0      	beq.n	8014530 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801454e:	2300      	movs	r3, #0
}
 8014550:	4618      	mov	r0, r3
 8014552:	3714      	adds	r7, #20
 8014554:	46bd      	mov	sp, r7
 8014556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801455a:	4770      	bx	lr
 801455c:	00030d40 	.word	0x00030d40

08014560 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8014560:	b480      	push	{r7}
 8014562:	b085      	sub	sp, #20
 8014564:	af00      	add	r7, sp, #0
 8014566:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014568:	2300      	movs	r3, #0
 801456a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	3301      	adds	r3, #1
 8014570:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	4a11      	ldr	r2, [pc, #68]	; (80145bc <USB_FlushRxFifo+0x5c>)
 8014576:	4293      	cmp	r3, r2
 8014578:	d901      	bls.n	801457e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801457a:	2303      	movs	r3, #3
 801457c:	e018      	b.n	80145b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	691b      	ldr	r3, [r3, #16]
 8014582:	2b00      	cmp	r3, #0
 8014584:	daf2      	bge.n	801456c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8014586:	2300      	movs	r3, #0
 8014588:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	2210      	movs	r2, #16
 801458e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014590:	68fb      	ldr	r3, [r7, #12]
 8014592:	3301      	adds	r3, #1
 8014594:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014596:	68fb      	ldr	r3, [r7, #12]
 8014598:	4a08      	ldr	r2, [pc, #32]	; (80145bc <USB_FlushRxFifo+0x5c>)
 801459a:	4293      	cmp	r3, r2
 801459c:	d901      	bls.n	80145a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801459e:	2303      	movs	r3, #3
 80145a0:	e006      	b.n	80145b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	691b      	ldr	r3, [r3, #16]
 80145a6:	f003 0310 	and.w	r3, r3, #16
 80145aa:	2b10      	cmp	r3, #16
 80145ac:	d0f0      	beq.n	8014590 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80145ae:	2300      	movs	r3, #0
}
 80145b0:	4618      	mov	r0, r3
 80145b2:	3714      	adds	r7, #20
 80145b4:	46bd      	mov	sp, r7
 80145b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ba:	4770      	bx	lr
 80145bc:	00030d40 	.word	0x00030d40

080145c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80145c0:	b480      	push	{r7}
 80145c2:	b085      	sub	sp, #20
 80145c4:	af00      	add	r7, sp, #0
 80145c6:	6078      	str	r0, [r7, #4]
 80145c8:	460b      	mov	r3, r1
 80145ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80145d0:	68fb      	ldr	r3, [r7, #12]
 80145d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80145d6:	681a      	ldr	r2, [r3, #0]
 80145d8:	78fb      	ldrb	r3, [r7, #3]
 80145da:	68f9      	ldr	r1, [r7, #12]
 80145dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80145e0:	4313      	orrs	r3, r2
 80145e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80145e4:	2300      	movs	r3, #0
}
 80145e6:	4618      	mov	r0, r3
 80145e8:	3714      	adds	r7, #20
 80145ea:	46bd      	mov	sp, r7
 80145ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145f0:	4770      	bx	lr

080145f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80145f2:	b480      	push	{r7}
 80145f4:	b087      	sub	sp, #28
 80145f6:	af00      	add	r7, sp, #0
 80145f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80145fe:	693b      	ldr	r3, [r7, #16]
 8014600:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014604:	689b      	ldr	r3, [r3, #8]
 8014606:	f003 0306 	and.w	r3, r3, #6
 801460a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	2b00      	cmp	r3, #0
 8014610:	d102      	bne.n	8014618 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8014612:	2300      	movs	r3, #0
 8014614:	75fb      	strb	r3, [r7, #23]
 8014616:	e00a      	b.n	801462e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	2b02      	cmp	r3, #2
 801461c:	d002      	beq.n	8014624 <USB_GetDevSpeed+0x32>
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	2b06      	cmp	r3, #6
 8014622:	d102      	bne.n	801462a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8014624:	2302      	movs	r3, #2
 8014626:	75fb      	strb	r3, [r7, #23]
 8014628:	e001      	b.n	801462e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801462a:	230f      	movs	r3, #15
 801462c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801462e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014630:	4618      	mov	r0, r3
 8014632:	371c      	adds	r7, #28
 8014634:	46bd      	mov	sp, r7
 8014636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801463a:	4770      	bx	lr

0801463c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801463c:	b480      	push	{r7}
 801463e:	b085      	sub	sp, #20
 8014640:	af00      	add	r7, sp, #0
 8014642:	6078      	str	r0, [r7, #4]
 8014644:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801464a:	683b      	ldr	r3, [r7, #0]
 801464c:	781b      	ldrb	r3, [r3, #0]
 801464e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014650:	683b      	ldr	r3, [r7, #0]
 8014652:	785b      	ldrb	r3, [r3, #1]
 8014654:	2b01      	cmp	r3, #1
 8014656:	d139      	bne.n	80146cc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801465e:	69da      	ldr	r2, [r3, #28]
 8014660:	683b      	ldr	r3, [r7, #0]
 8014662:	781b      	ldrb	r3, [r3, #0]
 8014664:	f003 030f 	and.w	r3, r3, #15
 8014668:	2101      	movs	r1, #1
 801466a:	fa01 f303 	lsl.w	r3, r1, r3
 801466e:	b29b      	uxth	r3, r3
 8014670:	68f9      	ldr	r1, [r7, #12]
 8014672:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014676:	4313      	orrs	r3, r2
 8014678:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801467a:	68bb      	ldr	r3, [r7, #8]
 801467c:	015a      	lsls	r2, r3, #5
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	4413      	add	r3, r2
 8014682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801468c:	2b00      	cmp	r3, #0
 801468e:	d153      	bne.n	8014738 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014690:	68bb      	ldr	r3, [r7, #8]
 8014692:	015a      	lsls	r2, r3, #5
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	4413      	add	r3, r2
 8014698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801469c:	681a      	ldr	r2, [r3, #0]
 801469e:	683b      	ldr	r3, [r7, #0]
 80146a0:	689b      	ldr	r3, [r3, #8]
 80146a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80146a6:	683b      	ldr	r3, [r7, #0]
 80146a8:	791b      	ldrb	r3, [r3, #4]
 80146aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80146ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80146ae:	68bb      	ldr	r3, [r7, #8]
 80146b0:	059b      	lsls	r3, r3, #22
 80146b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80146b4:	431a      	orrs	r2, r3
 80146b6:	68bb      	ldr	r3, [r7, #8]
 80146b8:	0159      	lsls	r1, r3, #5
 80146ba:	68fb      	ldr	r3, [r7, #12]
 80146bc:	440b      	add	r3, r1
 80146be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80146c2:	4619      	mov	r1, r3
 80146c4:	4b20      	ldr	r3, [pc, #128]	; (8014748 <USB_ActivateEndpoint+0x10c>)
 80146c6:	4313      	orrs	r3, r2
 80146c8:	600b      	str	r3, [r1, #0]
 80146ca:	e035      	b.n	8014738 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80146d2:	69da      	ldr	r2, [r3, #28]
 80146d4:	683b      	ldr	r3, [r7, #0]
 80146d6:	781b      	ldrb	r3, [r3, #0]
 80146d8:	f003 030f 	and.w	r3, r3, #15
 80146dc:	2101      	movs	r1, #1
 80146de:	fa01 f303 	lsl.w	r3, r1, r3
 80146e2:	041b      	lsls	r3, r3, #16
 80146e4:	68f9      	ldr	r1, [r7, #12]
 80146e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80146ea:	4313      	orrs	r3, r2
 80146ec:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80146ee:	68bb      	ldr	r3, [r7, #8]
 80146f0:	015a      	lsls	r2, r3, #5
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	4413      	add	r3, r2
 80146f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80146fa:	681b      	ldr	r3, [r3, #0]
 80146fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014700:	2b00      	cmp	r3, #0
 8014702:	d119      	bne.n	8014738 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8014704:	68bb      	ldr	r3, [r7, #8]
 8014706:	015a      	lsls	r2, r3, #5
 8014708:	68fb      	ldr	r3, [r7, #12]
 801470a:	4413      	add	r3, r2
 801470c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014710:	681a      	ldr	r2, [r3, #0]
 8014712:	683b      	ldr	r3, [r7, #0]
 8014714:	689b      	ldr	r3, [r3, #8]
 8014716:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801471a:	683b      	ldr	r3, [r7, #0]
 801471c:	791b      	ldrb	r3, [r3, #4]
 801471e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8014720:	430b      	orrs	r3, r1
 8014722:	431a      	orrs	r2, r3
 8014724:	68bb      	ldr	r3, [r7, #8]
 8014726:	0159      	lsls	r1, r3, #5
 8014728:	68fb      	ldr	r3, [r7, #12]
 801472a:	440b      	add	r3, r1
 801472c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014730:	4619      	mov	r1, r3
 8014732:	4b05      	ldr	r3, [pc, #20]	; (8014748 <USB_ActivateEndpoint+0x10c>)
 8014734:	4313      	orrs	r3, r2
 8014736:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8014738:	2300      	movs	r3, #0
}
 801473a:	4618      	mov	r0, r3
 801473c:	3714      	adds	r7, #20
 801473e:	46bd      	mov	sp, r7
 8014740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014744:	4770      	bx	lr
 8014746:	bf00      	nop
 8014748:	10008000 	.word	0x10008000

0801474c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801474c:	b480      	push	{r7}
 801474e:	b085      	sub	sp, #20
 8014750:	af00      	add	r7, sp, #0
 8014752:	6078      	str	r0, [r7, #4]
 8014754:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801475a:	683b      	ldr	r3, [r7, #0]
 801475c:	781b      	ldrb	r3, [r3, #0]
 801475e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8014760:	683b      	ldr	r3, [r7, #0]
 8014762:	785b      	ldrb	r3, [r3, #1]
 8014764:	2b01      	cmp	r3, #1
 8014766:	d161      	bne.n	801482c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014768:	68bb      	ldr	r3, [r7, #8]
 801476a:	015a      	lsls	r2, r3, #5
 801476c:	68fb      	ldr	r3, [r7, #12]
 801476e:	4413      	add	r3, r2
 8014770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801477a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801477e:	d11f      	bne.n	80147c0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8014780:	68bb      	ldr	r3, [r7, #8]
 8014782:	015a      	lsls	r2, r3, #5
 8014784:	68fb      	ldr	r3, [r7, #12]
 8014786:	4413      	add	r3, r2
 8014788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	68ba      	ldr	r2, [r7, #8]
 8014790:	0151      	lsls	r1, r2, #5
 8014792:	68fa      	ldr	r2, [r7, #12]
 8014794:	440a      	add	r2, r1
 8014796:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801479a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801479e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80147a0:	68bb      	ldr	r3, [r7, #8]
 80147a2:	015a      	lsls	r2, r3, #5
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	4413      	add	r3, r2
 80147a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	68ba      	ldr	r2, [r7, #8]
 80147b0:	0151      	lsls	r1, r2, #5
 80147b2:	68fa      	ldr	r2, [r7, #12]
 80147b4:	440a      	add	r2, r1
 80147b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80147ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80147be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80147c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80147c8:	683b      	ldr	r3, [r7, #0]
 80147ca:	781b      	ldrb	r3, [r3, #0]
 80147cc:	f003 030f 	and.w	r3, r3, #15
 80147d0:	2101      	movs	r1, #1
 80147d2:	fa01 f303 	lsl.w	r3, r1, r3
 80147d6:	b29b      	uxth	r3, r3
 80147d8:	43db      	mvns	r3, r3
 80147da:	68f9      	ldr	r1, [r7, #12]
 80147dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80147e0:	4013      	ands	r3, r2
 80147e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80147ea:	69da      	ldr	r2, [r3, #28]
 80147ec:	683b      	ldr	r3, [r7, #0]
 80147ee:	781b      	ldrb	r3, [r3, #0]
 80147f0:	f003 030f 	and.w	r3, r3, #15
 80147f4:	2101      	movs	r1, #1
 80147f6:	fa01 f303 	lsl.w	r3, r1, r3
 80147fa:	b29b      	uxth	r3, r3
 80147fc:	43db      	mvns	r3, r3
 80147fe:	68f9      	ldr	r1, [r7, #12]
 8014800:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014804:	4013      	ands	r3, r2
 8014806:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8014808:	68bb      	ldr	r3, [r7, #8]
 801480a:	015a      	lsls	r2, r3, #5
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	4413      	add	r3, r2
 8014810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014814:	681a      	ldr	r2, [r3, #0]
 8014816:	68bb      	ldr	r3, [r7, #8]
 8014818:	0159      	lsls	r1, r3, #5
 801481a:	68fb      	ldr	r3, [r7, #12]
 801481c:	440b      	add	r3, r1
 801481e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014822:	4619      	mov	r1, r3
 8014824:	4b35      	ldr	r3, [pc, #212]	; (80148fc <USB_DeactivateEndpoint+0x1b0>)
 8014826:	4013      	ands	r3, r2
 8014828:	600b      	str	r3, [r1, #0]
 801482a:	e060      	b.n	80148ee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801482c:	68bb      	ldr	r3, [r7, #8]
 801482e:	015a      	lsls	r2, r3, #5
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	4413      	add	r3, r2
 8014834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801483e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014842:	d11f      	bne.n	8014884 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8014844:	68bb      	ldr	r3, [r7, #8]
 8014846:	015a      	lsls	r2, r3, #5
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	4413      	add	r3, r2
 801484c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014850:	681b      	ldr	r3, [r3, #0]
 8014852:	68ba      	ldr	r2, [r7, #8]
 8014854:	0151      	lsls	r1, r2, #5
 8014856:	68fa      	ldr	r2, [r7, #12]
 8014858:	440a      	add	r2, r1
 801485a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801485e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014862:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8014864:	68bb      	ldr	r3, [r7, #8]
 8014866:	015a      	lsls	r2, r3, #5
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	4413      	add	r3, r2
 801486c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	68ba      	ldr	r2, [r7, #8]
 8014874:	0151      	lsls	r1, r2, #5
 8014876:	68fa      	ldr	r2, [r7, #12]
 8014878:	440a      	add	r2, r1
 801487a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801487e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014882:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801488a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801488c:	683b      	ldr	r3, [r7, #0]
 801488e:	781b      	ldrb	r3, [r3, #0]
 8014890:	f003 030f 	and.w	r3, r3, #15
 8014894:	2101      	movs	r1, #1
 8014896:	fa01 f303 	lsl.w	r3, r1, r3
 801489a:	041b      	lsls	r3, r3, #16
 801489c:	43db      	mvns	r3, r3
 801489e:	68f9      	ldr	r1, [r7, #12]
 80148a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80148a4:	4013      	ands	r3, r2
 80148a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80148ae:	69da      	ldr	r2, [r3, #28]
 80148b0:	683b      	ldr	r3, [r7, #0]
 80148b2:	781b      	ldrb	r3, [r3, #0]
 80148b4:	f003 030f 	and.w	r3, r3, #15
 80148b8:	2101      	movs	r1, #1
 80148ba:	fa01 f303 	lsl.w	r3, r1, r3
 80148be:	041b      	lsls	r3, r3, #16
 80148c0:	43db      	mvns	r3, r3
 80148c2:	68f9      	ldr	r1, [r7, #12]
 80148c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80148c8:	4013      	ands	r3, r2
 80148ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80148cc:	68bb      	ldr	r3, [r7, #8]
 80148ce:	015a      	lsls	r2, r3, #5
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	4413      	add	r3, r2
 80148d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80148d8:	681a      	ldr	r2, [r3, #0]
 80148da:	68bb      	ldr	r3, [r7, #8]
 80148dc:	0159      	lsls	r1, r3, #5
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	440b      	add	r3, r1
 80148e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80148e6:	4619      	mov	r1, r3
 80148e8:	4b05      	ldr	r3, [pc, #20]	; (8014900 <USB_DeactivateEndpoint+0x1b4>)
 80148ea:	4013      	ands	r3, r2
 80148ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80148ee:	2300      	movs	r3, #0
}
 80148f0:	4618      	mov	r0, r3
 80148f2:	3714      	adds	r7, #20
 80148f4:	46bd      	mov	sp, r7
 80148f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148fa:	4770      	bx	lr
 80148fc:	ec337800 	.word	0xec337800
 8014900:	eff37800 	.word	0xeff37800

08014904 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8014904:	b580      	push	{r7, lr}
 8014906:	b08a      	sub	sp, #40	; 0x28
 8014908:	af02      	add	r7, sp, #8
 801490a:	60f8      	str	r0, [r7, #12]
 801490c:	60b9      	str	r1, [r7, #8]
 801490e:	4613      	mov	r3, r2
 8014910:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8014916:	68bb      	ldr	r3, [r7, #8]
 8014918:	781b      	ldrb	r3, [r3, #0]
 801491a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801491c:	68bb      	ldr	r3, [r7, #8]
 801491e:	785b      	ldrb	r3, [r3, #1]
 8014920:	2b01      	cmp	r3, #1
 8014922:	f040 8181 	bne.w	8014c28 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8014926:	68bb      	ldr	r3, [r7, #8]
 8014928:	691b      	ldr	r3, [r3, #16]
 801492a:	2b00      	cmp	r3, #0
 801492c:	d132      	bne.n	8014994 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801492e:	69bb      	ldr	r3, [r7, #24]
 8014930:	015a      	lsls	r2, r3, #5
 8014932:	69fb      	ldr	r3, [r7, #28]
 8014934:	4413      	add	r3, r2
 8014936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801493a:	691a      	ldr	r2, [r3, #16]
 801493c:	69bb      	ldr	r3, [r7, #24]
 801493e:	0159      	lsls	r1, r3, #5
 8014940:	69fb      	ldr	r3, [r7, #28]
 8014942:	440b      	add	r3, r1
 8014944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014948:	4619      	mov	r1, r3
 801494a:	4ba5      	ldr	r3, [pc, #660]	; (8014be0 <USB_EPStartXfer+0x2dc>)
 801494c:	4013      	ands	r3, r2
 801494e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014950:	69bb      	ldr	r3, [r7, #24]
 8014952:	015a      	lsls	r2, r3, #5
 8014954:	69fb      	ldr	r3, [r7, #28]
 8014956:	4413      	add	r3, r2
 8014958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801495c:	691b      	ldr	r3, [r3, #16]
 801495e:	69ba      	ldr	r2, [r7, #24]
 8014960:	0151      	lsls	r1, r2, #5
 8014962:	69fa      	ldr	r2, [r7, #28]
 8014964:	440a      	add	r2, r1
 8014966:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801496a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801496e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014970:	69bb      	ldr	r3, [r7, #24]
 8014972:	015a      	lsls	r2, r3, #5
 8014974:	69fb      	ldr	r3, [r7, #28]
 8014976:	4413      	add	r3, r2
 8014978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801497c:	691a      	ldr	r2, [r3, #16]
 801497e:	69bb      	ldr	r3, [r7, #24]
 8014980:	0159      	lsls	r1, r3, #5
 8014982:	69fb      	ldr	r3, [r7, #28]
 8014984:	440b      	add	r3, r1
 8014986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801498a:	4619      	mov	r1, r3
 801498c:	4b95      	ldr	r3, [pc, #596]	; (8014be4 <USB_EPStartXfer+0x2e0>)
 801498e:	4013      	ands	r3, r2
 8014990:	610b      	str	r3, [r1, #16]
 8014992:	e092      	b.n	8014aba <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014994:	69bb      	ldr	r3, [r7, #24]
 8014996:	015a      	lsls	r2, r3, #5
 8014998:	69fb      	ldr	r3, [r7, #28]
 801499a:	4413      	add	r3, r2
 801499c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80149a0:	691a      	ldr	r2, [r3, #16]
 80149a2:	69bb      	ldr	r3, [r7, #24]
 80149a4:	0159      	lsls	r1, r3, #5
 80149a6:	69fb      	ldr	r3, [r7, #28]
 80149a8:	440b      	add	r3, r1
 80149aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80149ae:	4619      	mov	r1, r3
 80149b0:	4b8c      	ldr	r3, [pc, #560]	; (8014be4 <USB_EPStartXfer+0x2e0>)
 80149b2:	4013      	ands	r3, r2
 80149b4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80149b6:	69bb      	ldr	r3, [r7, #24]
 80149b8:	015a      	lsls	r2, r3, #5
 80149ba:	69fb      	ldr	r3, [r7, #28]
 80149bc:	4413      	add	r3, r2
 80149be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80149c2:	691a      	ldr	r2, [r3, #16]
 80149c4:	69bb      	ldr	r3, [r7, #24]
 80149c6:	0159      	lsls	r1, r3, #5
 80149c8:	69fb      	ldr	r3, [r7, #28]
 80149ca:	440b      	add	r3, r1
 80149cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80149d0:	4619      	mov	r1, r3
 80149d2:	4b83      	ldr	r3, [pc, #524]	; (8014be0 <USB_EPStartXfer+0x2dc>)
 80149d4:	4013      	ands	r3, r2
 80149d6:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80149d8:	69bb      	ldr	r3, [r7, #24]
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d11a      	bne.n	8014a14 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80149de:	68bb      	ldr	r3, [r7, #8]
 80149e0:	691a      	ldr	r2, [r3, #16]
 80149e2:	68bb      	ldr	r3, [r7, #8]
 80149e4:	689b      	ldr	r3, [r3, #8]
 80149e6:	429a      	cmp	r2, r3
 80149e8:	d903      	bls.n	80149f2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80149ea:	68bb      	ldr	r3, [r7, #8]
 80149ec:	689a      	ldr	r2, [r3, #8]
 80149ee:	68bb      	ldr	r3, [r7, #8]
 80149f0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80149f2:	69bb      	ldr	r3, [r7, #24]
 80149f4:	015a      	lsls	r2, r3, #5
 80149f6:	69fb      	ldr	r3, [r7, #28]
 80149f8:	4413      	add	r3, r2
 80149fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80149fe:	691b      	ldr	r3, [r3, #16]
 8014a00:	69ba      	ldr	r2, [r7, #24]
 8014a02:	0151      	lsls	r1, r2, #5
 8014a04:	69fa      	ldr	r2, [r7, #28]
 8014a06:	440a      	add	r2, r1
 8014a08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014a0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014a10:	6113      	str	r3, [r2, #16]
 8014a12:	e01b      	b.n	8014a4c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8014a14:	69bb      	ldr	r3, [r7, #24]
 8014a16:	015a      	lsls	r2, r3, #5
 8014a18:	69fb      	ldr	r3, [r7, #28]
 8014a1a:	4413      	add	r3, r2
 8014a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014a20:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8014a22:	68bb      	ldr	r3, [r7, #8]
 8014a24:	6919      	ldr	r1, [r3, #16]
 8014a26:	68bb      	ldr	r3, [r7, #8]
 8014a28:	689b      	ldr	r3, [r3, #8]
 8014a2a:	440b      	add	r3, r1
 8014a2c:	1e59      	subs	r1, r3, #1
 8014a2e:	68bb      	ldr	r3, [r7, #8]
 8014a30:	689b      	ldr	r3, [r3, #8]
 8014a32:	fbb1 f3f3 	udiv	r3, r1, r3
 8014a36:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8014a38:	4b6b      	ldr	r3, [pc, #428]	; (8014be8 <USB_EPStartXfer+0x2e4>)
 8014a3a:	400b      	ands	r3, r1
 8014a3c:	69b9      	ldr	r1, [r7, #24]
 8014a3e:	0148      	lsls	r0, r1, #5
 8014a40:	69f9      	ldr	r1, [r7, #28]
 8014a42:	4401      	add	r1, r0
 8014a44:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8014a48:	4313      	orrs	r3, r2
 8014a4a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014a4c:	69bb      	ldr	r3, [r7, #24]
 8014a4e:	015a      	lsls	r2, r3, #5
 8014a50:	69fb      	ldr	r3, [r7, #28]
 8014a52:	4413      	add	r3, r2
 8014a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014a58:	691a      	ldr	r2, [r3, #16]
 8014a5a:	68bb      	ldr	r3, [r7, #8]
 8014a5c:	691b      	ldr	r3, [r3, #16]
 8014a5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014a62:	69b9      	ldr	r1, [r7, #24]
 8014a64:	0148      	lsls	r0, r1, #5
 8014a66:	69f9      	ldr	r1, [r7, #28]
 8014a68:	4401      	add	r1, r0
 8014a6a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8014a6e:	4313      	orrs	r3, r2
 8014a70:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8014a72:	68bb      	ldr	r3, [r7, #8]
 8014a74:	791b      	ldrb	r3, [r3, #4]
 8014a76:	2b01      	cmp	r3, #1
 8014a78:	d11f      	bne.n	8014aba <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8014a7a:	69bb      	ldr	r3, [r7, #24]
 8014a7c:	015a      	lsls	r2, r3, #5
 8014a7e:	69fb      	ldr	r3, [r7, #28]
 8014a80:	4413      	add	r3, r2
 8014a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014a86:	691b      	ldr	r3, [r3, #16]
 8014a88:	69ba      	ldr	r2, [r7, #24]
 8014a8a:	0151      	lsls	r1, r2, #5
 8014a8c:	69fa      	ldr	r2, [r7, #28]
 8014a8e:	440a      	add	r2, r1
 8014a90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014a94:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8014a98:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8014a9a:	69bb      	ldr	r3, [r7, #24]
 8014a9c:	015a      	lsls	r2, r3, #5
 8014a9e:	69fb      	ldr	r3, [r7, #28]
 8014aa0:	4413      	add	r3, r2
 8014aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014aa6:	691b      	ldr	r3, [r3, #16]
 8014aa8:	69ba      	ldr	r2, [r7, #24]
 8014aaa:	0151      	lsls	r1, r2, #5
 8014aac:	69fa      	ldr	r2, [r7, #28]
 8014aae:	440a      	add	r2, r1
 8014ab0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014ab4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014ab8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8014aba:	79fb      	ldrb	r3, [r7, #7]
 8014abc:	2b01      	cmp	r3, #1
 8014abe:	d14b      	bne.n	8014b58 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8014ac0:	68bb      	ldr	r3, [r7, #8]
 8014ac2:	69db      	ldr	r3, [r3, #28]
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d009      	beq.n	8014adc <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8014ac8:	69bb      	ldr	r3, [r7, #24]
 8014aca:	015a      	lsls	r2, r3, #5
 8014acc:	69fb      	ldr	r3, [r7, #28]
 8014ace:	4413      	add	r3, r2
 8014ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014ad4:	461a      	mov	r2, r3
 8014ad6:	68bb      	ldr	r3, [r7, #8]
 8014ad8:	69db      	ldr	r3, [r3, #28]
 8014ada:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8014adc:	68bb      	ldr	r3, [r7, #8]
 8014ade:	791b      	ldrb	r3, [r3, #4]
 8014ae0:	2b01      	cmp	r3, #1
 8014ae2:	d128      	bne.n	8014b36 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014ae4:	69fb      	ldr	r3, [r7, #28]
 8014ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014aea:	689b      	ldr	r3, [r3, #8]
 8014aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	d110      	bne.n	8014b16 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014af4:	69bb      	ldr	r3, [r7, #24]
 8014af6:	015a      	lsls	r2, r3, #5
 8014af8:	69fb      	ldr	r3, [r7, #28]
 8014afa:	4413      	add	r3, r2
 8014afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	69ba      	ldr	r2, [r7, #24]
 8014b04:	0151      	lsls	r1, r2, #5
 8014b06:	69fa      	ldr	r2, [r7, #28]
 8014b08:	440a      	add	r2, r1
 8014b0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014b0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014b12:	6013      	str	r3, [r2, #0]
 8014b14:	e00f      	b.n	8014b36 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014b16:	69bb      	ldr	r3, [r7, #24]
 8014b18:	015a      	lsls	r2, r3, #5
 8014b1a:	69fb      	ldr	r3, [r7, #28]
 8014b1c:	4413      	add	r3, r2
 8014b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	69ba      	ldr	r2, [r7, #24]
 8014b26:	0151      	lsls	r1, r2, #5
 8014b28:	69fa      	ldr	r2, [r7, #28]
 8014b2a:	440a      	add	r2, r1
 8014b2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014b34:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014b36:	69bb      	ldr	r3, [r7, #24]
 8014b38:	015a      	lsls	r2, r3, #5
 8014b3a:	69fb      	ldr	r3, [r7, #28]
 8014b3c:	4413      	add	r3, r2
 8014b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	69ba      	ldr	r2, [r7, #24]
 8014b46:	0151      	lsls	r1, r2, #5
 8014b48:	69fa      	ldr	r2, [r7, #28]
 8014b4a:	440a      	add	r2, r1
 8014b4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014b50:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014b54:	6013      	str	r3, [r2, #0]
 8014b56:	e16a      	b.n	8014e2e <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014b58:	69bb      	ldr	r3, [r7, #24]
 8014b5a:	015a      	lsls	r2, r3, #5
 8014b5c:	69fb      	ldr	r3, [r7, #28]
 8014b5e:	4413      	add	r3, r2
 8014b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	69ba      	ldr	r2, [r7, #24]
 8014b68:	0151      	lsls	r1, r2, #5
 8014b6a:	69fa      	ldr	r2, [r7, #28]
 8014b6c:	440a      	add	r2, r1
 8014b6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014b72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014b76:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8014b78:	68bb      	ldr	r3, [r7, #8]
 8014b7a:	791b      	ldrb	r3, [r3, #4]
 8014b7c:	2b01      	cmp	r3, #1
 8014b7e:	d015      	beq.n	8014bac <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8014b80:	68bb      	ldr	r3, [r7, #8]
 8014b82:	691b      	ldr	r3, [r3, #16]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	f000 8152 	beq.w	8014e2e <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014b8a:	69fb      	ldr	r3, [r7, #28]
 8014b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014b90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014b92:	68bb      	ldr	r3, [r7, #8]
 8014b94:	781b      	ldrb	r3, [r3, #0]
 8014b96:	f003 030f 	and.w	r3, r3, #15
 8014b9a:	2101      	movs	r1, #1
 8014b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8014ba0:	69f9      	ldr	r1, [r7, #28]
 8014ba2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014ba6:	4313      	orrs	r3, r2
 8014ba8:	634b      	str	r3, [r1, #52]	; 0x34
 8014baa:	e140      	b.n	8014e2e <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014bac:	69fb      	ldr	r3, [r7, #28]
 8014bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014bb2:	689b      	ldr	r3, [r3, #8]
 8014bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d117      	bne.n	8014bec <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014bbc:	69bb      	ldr	r3, [r7, #24]
 8014bbe:	015a      	lsls	r2, r3, #5
 8014bc0:	69fb      	ldr	r3, [r7, #28]
 8014bc2:	4413      	add	r3, r2
 8014bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014bc8:	681b      	ldr	r3, [r3, #0]
 8014bca:	69ba      	ldr	r2, [r7, #24]
 8014bcc:	0151      	lsls	r1, r2, #5
 8014bce:	69fa      	ldr	r2, [r7, #28]
 8014bd0:	440a      	add	r2, r1
 8014bd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014bd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014bda:	6013      	str	r3, [r2, #0]
 8014bdc:	e016      	b.n	8014c0c <USB_EPStartXfer+0x308>
 8014bde:	bf00      	nop
 8014be0:	e007ffff 	.word	0xe007ffff
 8014be4:	fff80000 	.word	0xfff80000
 8014be8:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014bec:	69bb      	ldr	r3, [r7, #24]
 8014bee:	015a      	lsls	r2, r3, #5
 8014bf0:	69fb      	ldr	r3, [r7, #28]
 8014bf2:	4413      	add	r3, r2
 8014bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014bf8:	681b      	ldr	r3, [r3, #0]
 8014bfa:	69ba      	ldr	r2, [r7, #24]
 8014bfc:	0151      	lsls	r1, r2, #5
 8014bfe:	69fa      	ldr	r2, [r7, #28]
 8014c00:	440a      	add	r2, r1
 8014c02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014c0a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8014c0c:	68bb      	ldr	r3, [r7, #8]
 8014c0e:	68d9      	ldr	r1, [r3, #12]
 8014c10:	68bb      	ldr	r3, [r7, #8]
 8014c12:	781a      	ldrb	r2, [r3, #0]
 8014c14:	68bb      	ldr	r3, [r7, #8]
 8014c16:	691b      	ldr	r3, [r3, #16]
 8014c18:	b298      	uxth	r0, r3
 8014c1a:	79fb      	ldrb	r3, [r7, #7]
 8014c1c:	9300      	str	r3, [sp, #0]
 8014c1e:	4603      	mov	r3, r0
 8014c20:	68f8      	ldr	r0, [r7, #12]
 8014c22:	f000 f9b9 	bl	8014f98 <USB_WritePacket>
 8014c26:	e102      	b.n	8014e2e <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8014c28:	69bb      	ldr	r3, [r7, #24]
 8014c2a:	015a      	lsls	r2, r3, #5
 8014c2c:	69fb      	ldr	r3, [r7, #28]
 8014c2e:	4413      	add	r3, r2
 8014c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014c34:	691a      	ldr	r2, [r3, #16]
 8014c36:	69bb      	ldr	r3, [r7, #24]
 8014c38:	0159      	lsls	r1, r3, #5
 8014c3a:	69fb      	ldr	r3, [r7, #28]
 8014c3c:	440b      	add	r3, r1
 8014c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014c42:	4619      	mov	r1, r3
 8014c44:	4b7c      	ldr	r3, [pc, #496]	; (8014e38 <USB_EPStartXfer+0x534>)
 8014c46:	4013      	ands	r3, r2
 8014c48:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8014c4a:	69bb      	ldr	r3, [r7, #24]
 8014c4c:	015a      	lsls	r2, r3, #5
 8014c4e:	69fb      	ldr	r3, [r7, #28]
 8014c50:	4413      	add	r3, r2
 8014c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014c56:	691a      	ldr	r2, [r3, #16]
 8014c58:	69bb      	ldr	r3, [r7, #24]
 8014c5a:	0159      	lsls	r1, r3, #5
 8014c5c:	69fb      	ldr	r3, [r7, #28]
 8014c5e:	440b      	add	r3, r1
 8014c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014c64:	4619      	mov	r1, r3
 8014c66:	4b75      	ldr	r3, [pc, #468]	; (8014e3c <USB_EPStartXfer+0x538>)
 8014c68:	4013      	ands	r3, r2
 8014c6a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8014c6c:	69bb      	ldr	r3, [r7, #24]
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d12f      	bne.n	8014cd2 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8014c72:	68bb      	ldr	r3, [r7, #8]
 8014c74:	691b      	ldr	r3, [r3, #16]
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d003      	beq.n	8014c82 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8014c7a:	68bb      	ldr	r3, [r7, #8]
 8014c7c:	689a      	ldr	r2, [r3, #8]
 8014c7e:	68bb      	ldr	r3, [r7, #8]
 8014c80:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8014c82:	68bb      	ldr	r3, [r7, #8]
 8014c84:	689a      	ldr	r2, [r3, #8]
 8014c86:	68bb      	ldr	r3, [r7, #8]
 8014c88:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8014c8a:	69bb      	ldr	r3, [r7, #24]
 8014c8c:	015a      	lsls	r2, r3, #5
 8014c8e:	69fb      	ldr	r3, [r7, #28]
 8014c90:	4413      	add	r3, r2
 8014c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014c96:	691a      	ldr	r2, [r3, #16]
 8014c98:	68bb      	ldr	r3, [r7, #8]
 8014c9a:	6a1b      	ldr	r3, [r3, #32]
 8014c9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014ca0:	69b9      	ldr	r1, [r7, #24]
 8014ca2:	0148      	lsls	r0, r1, #5
 8014ca4:	69f9      	ldr	r1, [r7, #28]
 8014ca6:	4401      	add	r1, r0
 8014ca8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014cac:	4313      	orrs	r3, r2
 8014cae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014cb0:	69bb      	ldr	r3, [r7, #24]
 8014cb2:	015a      	lsls	r2, r3, #5
 8014cb4:	69fb      	ldr	r3, [r7, #28]
 8014cb6:	4413      	add	r3, r2
 8014cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014cbc:	691b      	ldr	r3, [r3, #16]
 8014cbe:	69ba      	ldr	r2, [r7, #24]
 8014cc0:	0151      	lsls	r1, r2, #5
 8014cc2:	69fa      	ldr	r2, [r7, #28]
 8014cc4:	440a      	add	r2, r1
 8014cc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014cca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014cce:	6113      	str	r3, [r2, #16]
 8014cd0:	e05f      	b.n	8014d92 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8014cd2:	68bb      	ldr	r3, [r7, #8]
 8014cd4:	691b      	ldr	r3, [r3, #16]
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d123      	bne.n	8014d22 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8014cda:	69bb      	ldr	r3, [r7, #24]
 8014cdc:	015a      	lsls	r2, r3, #5
 8014cde:	69fb      	ldr	r3, [r7, #28]
 8014ce0:	4413      	add	r3, r2
 8014ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014ce6:	691a      	ldr	r2, [r3, #16]
 8014ce8:	68bb      	ldr	r3, [r7, #8]
 8014cea:	689b      	ldr	r3, [r3, #8]
 8014cec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014cf0:	69b9      	ldr	r1, [r7, #24]
 8014cf2:	0148      	lsls	r0, r1, #5
 8014cf4:	69f9      	ldr	r1, [r7, #28]
 8014cf6:	4401      	add	r1, r0
 8014cf8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014cfc:	4313      	orrs	r3, r2
 8014cfe:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014d00:	69bb      	ldr	r3, [r7, #24]
 8014d02:	015a      	lsls	r2, r3, #5
 8014d04:	69fb      	ldr	r3, [r7, #28]
 8014d06:	4413      	add	r3, r2
 8014d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014d0c:	691b      	ldr	r3, [r3, #16]
 8014d0e:	69ba      	ldr	r2, [r7, #24]
 8014d10:	0151      	lsls	r1, r2, #5
 8014d12:	69fa      	ldr	r2, [r7, #28]
 8014d14:	440a      	add	r2, r1
 8014d16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014d1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014d1e:	6113      	str	r3, [r2, #16]
 8014d20:	e037      	b.n	8014d92 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014d22:	68bb      	ldr	r3, [r7, #8]
 8014d24:	691a      	ldr	r2, [r3, #16]
 8014d26:	68bb      	ldr	r3, [r7, #8]
 8014d28:	689b      	ldr	r3, [r3, #8]
 8014d2a:	4413      	add	r3, r2
 8014d2c:	1e5a      	subs	r2, r3, #1
 8014d2e:	68bb      	ldr	r3, [r7, #8]
 8014d30:	689b      	ldr	r3, [r3, #8]
 8014d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8014d36:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8014d38:	68bb      	ldr	r3, [r7, #8]
 8014d3a:	689b      	ldr	r3, [r3, #8]
 8014d3c:	8afa      	ldrh	r2, [r7, #22]
 8014d3e:	fb03 f202 	mul.w	r2, r3, r2
 8014d42:	68bb      	ldr	r3, [r7, #8]
 8014d44:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8014d46:	69bb      	ldr	r3, [r7, #24]
 8014d48:	015a      	lsls	r2, r3, #5
 8014d4a:	69fb      	ldr	r3, [r7, #28]
 8014d4c:	4413      	add	r3, r2
 8014d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014d52:	691a      	ldr	r2, [r3, #16]
 8014d54:	8afb      	ldrh	r3, [r7, #22]
 8014d56:	04d9      	lsls	r1, r3, #19
 8014d58:	4b39      	ldr	r3, [pc, #228]	; (8014e40 <USB_EPStartXfer+0x53c>)
 8014d5a:	400b      	ands	r3, r1
 8014d5c:	69b9      	ldr	r1, [r7, #24]
 8014d5e:	0148      	lsls	r0, r1, #5
 8014d60:	69f9      	ldr	r1, [r7, #28]
 8014d62:	4401      	add	r1, r0
 8014d64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014d68:	4313      	orrs	r3, r2
 8014d6a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8014d6c:	69bb      	ldr	r3, [r7, #24]
 8014d6e:	015a      	lsls	r2, r3, #5
 8014d70:	69fb      	ldr	r3, [r7, #28]
 8014d72:	4413      	add	r3, r2
 8014d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014d78:	691a      	ldr	r2, [r3, #16]
 8014d7a:	68bb      	ldr	r3, [r7, #8]
 8014d7c:	6a1b      	ldr	r3, [r3, #32]
 8014d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014d82:	69b9      	ldr	r1, [r7, #24]
 8014d84:	0148      	lsls	r0, r1, #5
 8014d86:	69f9      	ldr	r1, [r7, #28]
 8014d88:	4401      	add	r1, r0
 8014d8a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014d8e:	4313      	orrs	r3, r2
 8014d90:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8014d92:	79fb      	ldrb	r3, [r7, #7]
 8014d94:	2b01      	cmp	r3, #1
 8014d96:	d10d      	bne.n	8014db4 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8014d98:	68bb      	ldr	r3, [r7, #8]
 8014d9a:	68db      	ldr	r3, [r3, #12]
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d009      	beq.n	8014db4 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8014da0:	68bb      	ldr	r3, [r7, #8]
 8014da2:	68d9      	ldr	r1, [r3, #12]
 8014da4:	69bb      	ldr	r3, [r7, #24]
 8014da6:	015a      	lsls	r2, r3, #5
 8014da8:	69fb      	ldr	r3, [r7, #28]
 8014daa:	4413      	add	r3, r2
 8014dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014db0:	460a      	mov	r2, r1
 8014db2:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8014db4:	68bb      	ldr	r3, [r7, #8]
 8014db6:	791b      	ldrb	r3, [r3, #4]
 8014db8:	2b01      	cmp	r3, #1
 8014dba:	d128      	bne.n	8014e0e <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014dbc:	69fb      	ldr	r3, [r7, #28]
 8014dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014dc2:	689b      	ldr	r3, [r3, #8]
 8014dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d110      	bne.n	8014dee <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8014dcc:	69bb      	ldr	r3, [r7, #24]
 8014dce:	015a      	lsls	r2, r3, #5
 8014dd0:	69fb      	ldr	r3, [r7, #28]
 8014dd2:	4413      	add	r3, r2
 8014dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	69ba      	ldr	r2, [r7, #24]
 8014ddc:	0151      	lsls	r1, r2, #5
 8014dde:	69fa      	ldr	r2, [r7, #28]
 8014de0:	440a      	add	r2, r1
 8014de2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014de6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014dea:	6013      	str	r3, [r2, #0]
 8014dec:	e00f      	b.n	8014e0e <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8014dee:	69bb      	ldr	r3, [r7, #24]
 8014df0:	015a      	lsls	r2, r3, #5
 8014df2:	69fb      	ldr	r3, [r7, #28]
 8014df4:	4413      	add	r3, r2
 8014df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	69ba      	ldr	r2, [r7, #24]
 8014dfe:	0151      	lsls	r1, r2, #5
 8014e00:	69fa      	ldr	r2, [r7, #28]
 8014e02:	440a      	add	r2, r1
 8014e04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014e0c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8014e0e:	69bb      	ldr	r3, [r7, #24]
 8014e10:	015a      	lsls	r2, r3, #5
 8014e12:	69fb      	ldr	r3, [r7, #28]
 8014e14:	4413      	add	r3, r2
 8014e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	69ba      	ldr	r2, [r7, #24]
 8014e1e:	0151      	lsls	r1, r2, #5
 8014e20:	69fa      	ldr	r2, [r7, #28]
 8014e22:	440a      	add	r2, r1
 8014e24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014e28:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014e2c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014e2e:	2300      	movs	r3, #0
}
 8014e30:	4618      	mov	r0, r3
 8014e32:	3720      	adds	r7, #32
 8014e34:	46bd      	mov	sp, r7
 8014e36:	bd80      	pop	{r7, pc}
 8014e38:	fff80000 	.word	0xfff80000
 8014e3c:	e007ffff 	.word	0xe007ffff
 8014e40:	1ff80000 	.word	0x1ff80000

08014e44 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014e44:	b480      	push	{r7}
 8014e46:	b087      	sub	sp, #28
 8014e48:	af00      	add	r7, sp, #0
 8014e4a:	6078      	str	r0, [r7, #4]
 8014e4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8014e4e:	2300      	movs	r3, #0
 8014e50:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8014e52:	2300      	movs	r3, #0
 8014e54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014e5a:	683b      	ldr	r3, [r7, #0]
 8014e5c:	785b      	ldrb	r3, [r3, #1]
 8014e5e:	2b01      	cmp	r3, #1
 8014e60:	d14a      	bne.n	8014ef8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014e62:	683b      	ldr	r3, [r7, #0]
 8014e64:	781b      	ldrb	r3, [r3, #0]
 8014e66:	015a      	lsls	r2, r3, #5
 8014e68:	693b      	ldr	r3, [r7, #16]
 8014e6a:	4413      	add	r3, r2
 8014e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014e76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014e7a:	f040 8086 	bne.w	8014f8a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8014e7e:	683b      	ldr	r3, [r7, #0]
 8014e80:	781b      	ldrb	r3, [r3, #0]
 8014e82:	015a      	lsls	r2, r3, #5
 8014e84:	693b      	ldr	r3, [r7, #16]
 8014e86:	4413      	add	r3, r2
 8014e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014e8c:	681b      	ldr	r3, [r3, #0]
 8014e8e:	683a      	ldr	r2, [r7, #0]
 8014e90:	7812      	ldrb	r2, [r2, #0]
 8014e92:	0151      	lsls	r1, r2, #5
 8014e94:	693a      	ldr	r2, [r7, #16]
 8014e96:	440a      	add	r2, r1
 8014e98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014e9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014ea0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8014ea2:	683b      	ldr	r3, [r7, #0]
 8014ea4:	781b      	ldrb	r3, [r3, #0]
 8014ea6:	015a      	lsls	r2, r3, #5
 8014ea8:	693b      	ldr	r3, [r7, #16]
 8014eaa:	4413      	add	r3, r2
 8014eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014eb0:	681b      	ldr	r3, [r3, #0]
 8014eb2:	683a      	ldr	r2, [r7, #0]
 8014eb4:	7812      	ldrb	r2, [r2, #0]
 8014eb6:	0151      	lsls	r1, r2, #5
 8014eb8:	693a      	ldr	r2, [r7, #16]
 8014eba:	440a      	add	r2, r1
 8014ebc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014ec0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014ec4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014ec6:	68fb      	ldr	r3, [r7, #12]
 8014ec8:	3301      	adds	r3, #1
 8014eca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014ecc:	68fb      	ldr	r3, [r7, #12]
 8014ece:	f242 7210 	movw	r2, #10000	; 0x2710
 8014ed2:	4293      	cmp	r3, r2
 8014ed4:	d902      	bls.n	8014edc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8014ed6:	2301      	movs	r3, #1
 8014ed8:	75fb      	strb	r3, [r7, #23]
          break;
 8014eda:	e056      	b.n	8014f8a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8014edc:	683b      	ldr	r3, [r7, #0]
 8014ede:	781b      	ldrb	r3, [r3, #0]
 8014ee0:	015a      	lsls	r2, r3, #5
 8014ee2:	693b      	ldr	r3, [r7, #16]
 8014ee4:	4413      	add	r3, r2
 8014ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014eea:	681b      	ldr	r3, [r3, #0]
 8014eec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014ef0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014ef4:	d0e7      	beq.n	8014ec6 <USB_EPStopXfer+0x82>
 8014ef6:	e048      	b.n	8014f8a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014ef8:	683b      	ldr	r3, [r7, #0]
 8014efa:	781b      	ldrb	r3, [r3, #0]
 8014efc:	015a      	lsls	r2, r3, #5
 8014efe:	693b      	ldr	r3, [r7, #16]
 8014f00:	4413      	add	r3, r2
 8014f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014f06:	681b      	ldr	r3, [r3, #0]
 8014f08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014f0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014f10:	d13b      	bne.n	8014f8a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8014f12:	683b      	ldr	r3, [r7, #0]
 8014f14:	781b      	ldrb	r3, [r3, #0]
 8014f16:	015a      	lsls	r2, r3, #5
 8014f18:	693b      	ldr	r3, [r7, #16]
 8014f1a:	4413      	add	r3, r2
 8014f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014f20:	681b      	ldr	r3, [r3, #0]
 8014f22:	683a      	ldr	r2, [r7, #0]
 8014f24:	7812      	ldrb	r2, [r2, #0]
 8014f26:	0151      	lsls	r1, r2, #5
 8014f28:	693a      	ldr	r2, [r7, #16]
 8014f2a:	440a      	add	r2, r1
 8014f2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014f30:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014f34:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8014f36:	683b      	ldr	r3, [r7, #0]
 8014f38:	781b      	ldrb	r3, [r3, #0]
 8014f3a:	015a      	lsls	r2, r3, #5
 8014f3c:	693b      	ldr	r3, [r7, #16]
 8014f3e:	4413      	add	r3, r2
 8014f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	683a      	ldr	r2, [r7, #0]
 8014f48:	7812      	ldrb	r2, [r2, #0]
 8014f4a:	0151      	lsls	r1, r2, #5
 8014f4c:	693a      	ldr	r2, [r7, #16]
 8014f4e:	440a      	add	r2, r1
 8014f50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014f54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014f58:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	3301      	adds	r3, #1
 8014f5e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	f242 7210 	movw	r2, #10000	; 0x2710
 8014f66:	4293      	cmp	r3, r2
 8014f68:	d902      	bls.n	8014f70 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8014f6a:	2301      	movs	r3, #1
 8014f6c:	75fb      	strb	r3, [r7, #23]
          break;
 8014f6e:	e00c      	b.n	8014f8a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8014f70:	683b      	ldr	r3, [r7, #0]
 8014f72:	781b      	ldrb	r3, [r3, #0]
 8014f74:	015a      	lsls	r2, r3, #5
 8014f76:	693b      	ldr	r3, [r7, #16]
 8014f78:	4413      	add	r3, r2
 8014f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014f7e:	681b      	ldr	r3, [r3, #0]
 8014f80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014f84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014f88:	d0e7      	beq.n	8014f5a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8014f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8014f8c:	4618      	mov	r0, r3
 8014f8e:	371c      	adds	r7, #28
 8014f90:	46bd      	mov	sp, r7
 8014f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f96:	4770      	bx	lr

08014f98 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8014f98:	b480      	push	{r7}
 8014f9a:	b089      	sub	sp, #36	; 0x24
 8014f9c:	af00      	add	r7, sp, #0
 8014f9e:	60f8      	str	r0, [r7, #12]
 8014fa0:	60b9      	str	r1, [r7, #8]
 8014fa2:	4611      	mov	r1, r2
 8014fa4:	461a      	mov	r2, r3
 8014fa6:	460b      	mov	r3, r1
 8014fa8:	71fb      	strb	r3, [r7, #7]
 8014faa:	4613      	mov	r3, r2
 8014fac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8014fb2:	68bb      	ldr	r3, [r7, #8]
 8014fb4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8014fb6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d123      	bne.n	8015006 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8014fbe:	88bb      	ldrh	r3, [r7, #4]
 8014fc0:	3303      	adds	r3, #3
 8014fc2:	089b      	lsrs	r3, r3, #2
 8014fc4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8014fc6:	2300      	movs	r3, #0
 8014fc8:	61bb      	str	r3, [r7, #24]
 8014fca:	e018      	b.n	8014ffe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014fcc:	79fb      	ldrb	r3, [r7, #7]
 8014fce:	031a      	lsls	r2, r3, #12
 8014fd0:	697b      	ldr	r3, [r7, #20]
 8014fd2:	4413      	add	r3, r2
 8014fd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014fd8:	461a      	mov	r2, r3
 8014fda:	69fb      	ldr	r3, [r7, #28]
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	6013      	str	r3, [r2, #0]
      pSrc++;
 8014fe0:	69fb      	ldr	r3, [r7, #28]
 8014fe2:	3301      	adds	r3, #1
 8014fe4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014fe6:	69fb      	ldr	r3, [r7, #28]
 8014fe8:	3301      	adds	r3, #1
 8014fea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014fec:	69fb      	ldr	r3, [r7, #28]
 8014fee:	3301      	adds	r3, #1
 8014ff0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014ff2:	69fb      	ldr	r3, [r7, #28]
 8014ff4:	3301      	adds	r3, #1
 8014ff6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8014ff8:	69bb      	ldr	r3, [r7, #24]
 8014ffa:	3301      	adds	r3, #1
 8014ffc:	61bb      	str	r3, [r7, #24]
 8014ffe:	69ba      	ldr	r2, [r7, #24]
 8015000:	693b      	ldr	r3, [r7, #16]
 8015002:	429a      	cmp	r2, r3
 8015004:	d3e2      	bcc.n	8014fcc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8015006:	2300      	movs	r3, #0
}
 8015008:	4618      	mov	r0, r3
 801500a:	3724      	adds	r7, #36	; 0x24
 801500c:	46bd      	mov	sp, r7
 801500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015012:	4770      	bx	lr

08015014 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8015014:	b480      	push	{r7}
 8015016:	b08b      	sub	sp, #44	; 0x2c
 8015018:	af00      	add	r7, sp, #0
 801501a:	60f8      	str	r0, [r7, #12]
 801501c:	60b9      	str	r1, [r7, #8]
 801501e:	4613      	mov	r3, r2
 8015020:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8015026:	68bb      	ldr	r3, [r7, #8]
 8015028:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801502a:	88fb      	ldrh	r3, [r7, #6]
 801502c:	089b      	lsrs	r3, r3, #2
 801502e:	b29b      	uxth	r3, r3
 8015030:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8015032:	88fb      	ldrh	r3, [r7, #6]
 8015034:	f003 0303 	and.w	r3, r3, #3
 8015038:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801503a:	2300      	movs	r3, #0
 801503c:	623b      	str	r3, [r7, #32]
 801503e:	e014      	b.n	801506a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8015040:	69bb      	ldr	r3, [r7, #24]
 8015042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015046:	681a      	ldr	r2, [r3, #0]
 8015048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801504a:	601a      	str	r2, [r3, #0]
    pDest++;
 801504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801504e:	3301      	adds	r3, #1
 8015050:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8015052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015054:	3301      	adds	r3, #1
 8015056:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8015058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801505a:	3301      	adds	r3, #1
 801505c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801505e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015060:	3301      	adds	r3, #1
 8015062:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8015064:	6a3b      	ldr	r3, [r7, #32]
 8015066:	3301      	adds	r3, #1
 8015068:	623b      	str	r3, [r7, #32]
 801506a:	6a3a      	ldr	r2, [r7, #32]
 801506c:	697b      	ldr	r3, [r7, #20]
 801506e:	429a      	cmp	r2, r3
 8015070:	d3e6      	bcc.n	8015040 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8015072:	8bfb      	ldrh	r3, [r7, #30]
 8015074:	2b00      	cmp	r3, #0
 8015076:	d01e      	beq.n	80150b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8015078:	2300      	movs	r3, #0
 801507a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801507c:	69bb      	ldr	r3, [r7, #24]
 801507e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015082:	461a      	mov	r2, r3
 8015084:	f107 0310 	add.w	r3, r7, #16
 8015088:	6812      	ldr	r2, [r2, #0]
 801508a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801508c:	693a      	ldr	r2, [r7, #16]
 801508e:	6a3b      	ldr	r3, [r7, #32]
 8015090:	b2db      	uxtb	r3, r3
 8015092:	00db      	lsls	r3, r3, #3
 8015094:	fa22 f303 	lsr.w	r3, r2, r3
 8015098:	b2da      	uxtb	r2, r3
 801509a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801509c:	701a      	strb	r2, [r3, #0]
      i++;
 801509e:	6a3b      	ldr	r3, [r7, #32]
 80150a0:	3301      	adds	r3, #1
 80150a2:	623b      	str	r3, [r7, #32]
      pDest++;
 80150a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150a6:	3301      	adds	r3, #1
 80150a8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80150aa:	8bfb      	ldrh	r3, [r7, #30]
 80150ac:	3b01      	subs	r3, #1
 80150ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80150b0:	8bfb      	ldrh	r3, [r7, #30]
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d1ea      	bne.n	801508c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80150b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80150b8:	4618      	mov	r0, r3
 80150ba:	372c      	adds	r7, #44	; 0x2c
 80150bc:	46bd      	mov	sp, r7
 80150be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150c2:	4770      	bx	lr

080150c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80150c4:	b480      	push	{r7}
 80150c6:	b085      	sub	sp, #20
 80150c8:	af00      	add	r7, sp, #0
 80150ca:	6078      	str	r0, [r7, #4]
 80150cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80150d2:	683b      	ldr	r3, [r7, #0]
 80150d4:	781b      	ldrb	r3, [r3, #0]
 80150d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80150d8:	683b      	ldr	r3, [r7, #0]
 80150da:	785b      	ldrb	r3, [r3, #1]
 80150dc:	2b01      	cmp	r3, #1
 80150de:	d12c      	bne.n	801513a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80150e0:	68bb      	ldr	r3, [r7, #8]
 80150e2:	015a      	lsls	r2, r3, #5
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	4413      	add	r3, r2
 80150e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	db12      	blt.n	8015118 <USB_EPSetStall+0x54>
 80150f2:	68bb      	ldr	r3, [r7, #8]
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d00f      	beq.n	8015118 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80150f8:	68bb      	ldr	r3, [r7, #8]
 80150fa:	015a      	lsls	r2, r3, #5
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	4413      	add	r3, r2
 8015100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015104:	681b      	ldr	r3, [r3, #0]
 8015106:	68ba      	ldr	r2, [r7, #8]
 8015108:	0151      	lsls	r1, r2, #5
 801510a:	68fa      	ldr	r2, [r7, #12]
 801510c:	440a      	add	r2, r1
 801510e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015112:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8015116:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8015118:	68bb      	ldr	r3, [r7, #8]
 801511a:	015a      	lsls	r2, r3, #5
 801511c:	68fb      	ldr	r3, [r7, #12]
 801511e:	4413      	add	r3, r2
 8015120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015124:	681b      	ldr	r3, [r3, #0]
 8015126:	68ba      	ldr	r2, [r7, #8]
 8015128:	0151      	lsls	r1, r2, #5
 801512a:	68fa      	ldr	r2, [r7, #12]
 801512c:	440a      	add	r2, r1
 801512e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015132:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8015136:	6013      	str	r3, [r2, #0]
 8015138:	e02b      	b.n	8015192 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801513a:	68bb      	ldr	r3, [r7, #8]
 801513c:	015a      	lsls	r2, r3, #5
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	4413      	add	r3, r2
 8015142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	2b00      	cmp	r3, #0
 801514a:	db12      	blt.n	8015172 <USB_EPSetStall+0xae>
 801514c:	68bb      	ldr	r3, [r7, #8]
 801514e:	2b00      	cmp	r3, #0
 8015150:	d00f      	beq.n	8015172 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8015152:	68bb      	ldr	r3, [r7, #8]
 8015154:	015a      	lsls	r2, r3, #5
 8015156:	68fb      	ldr	r3, [r7, #12]
 8015158:	4413      	add	r3, r2
 801515a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801515e:	681b      	ldr	r3, [r3, #0]
 8015160:	68ba      	ldr	r2, [r7, #8]
 8015162:	0151      	lsls	r1, r2, #5
 8015164:	68fa      	ldr	r2, [r7, #12]
 8015166:	440a      	add	r2, r1
 8015168:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801516c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8015170:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8015172:	68bb      	ldr	r3, [r7, #8]
 8015174:	015a      	lsls	r2, r3, #5
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	4413      	add	r3, r2
 801517a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	68ba      	ldr	r2, [r7, #8]
 8015182:	0151      	lsls	r1, r2, #5
 8015184:	68fa      	ldr	r2, [r7, #12]
 8015186:	440a      	add	r2, r1
 8015188:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801518c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8015190:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015192:	2300      	movs	r3, #0
}
 8015194:	4618      	mov	r0, r3
 8015196:	3714      	adds	r7, #20
 8015198:	46bd      	mov	sp, r7
 801519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801519e:	4770      	bx	lr

080151a0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80151a0:	b480      	push	{r7}
 80151a2:	b085      	sub	sp, #20
 80151a4:	af00      	add	r7, sp, #0
 80151a6:	6078      	str	r0, [r7, #4]
 80151a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80151ae:	683b      	ldr	r3, [r7, #0]
 80151b0:	781b      	ldrb	r3, [r3, #0]
 80151b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80151b4:	683b      	ldr	r3, [r7, #0]
 80151b6:	785b      	ldrb	r3, [r3, #1]
 80151b8:	2b01      	cmp	r3, #1
 80151ba:	d128      	bne.n	801520e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80151bc:	68bb      	ldr	r3, [r7, #8]
 80151be:	015a      	lsls	r2, r3, #5
 80151c0:	68fb      	ldr	r3, [r7, #12]
 80151c2:	4413      	add	r3, r2
 80151c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80151c8:	681b      	ldr	r3, [r3, #0]
 80151ca:	68ba      	ldr	r2, [r7, #8]
 80151cc:	0151      	lsls	r1, r2, #5
 80151ce:	68fa      	ldr	r2, [r7, #12]
 80151d0:	440a      	add	r2, r1
 80151d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80151d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80151da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80151dc:	683b      	ldr	r3, [r7, #0]
 80151de:	791b      	ldrb	r3, [r3, #4]
 80151e0:	2b03      	cmp	r3, #3
 80151e2:	d003      	beq.n	80151ec <USB_EPClearStall+0x4c>
 80151e4:	683b      	ldr	r3, [r7, #0]
 80151e6:	791b      	ldrb	r3, [r3, #4]
 80151e8:	2b02      	cmp	r3, #2
 80151ea:	d138      	bne.n	801525e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80151ec:	68bb      	ldr	r3, [r7, #8]
 80151ee:	015a      	lsls	r2, r3, #5
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	4413      	add	r3, r2
 80151f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80151f8:	681b      	ldr	r3, [r3, #0]
 80151fa:	68ba      	ldr	r2, [r7, #8]
 80151fc:	0151      	lsls	r1, r2, #5
 80151fe:	68fa      	ldr	r2, [r7, #12]
 8015200:	440a      	add	r2, r1
 8015202:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015206:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801520a:	6013      	str	r3, [r2, #0]
 801520c:	e027      	b.n	801525e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801520e:	68bb      	ldr	r3, [r7, #8]
 8015210:	015a      	lsls	r2, r3, #5
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	4413      	add	r3, r2
 8015216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	68ba      	ldr	r2, [r7, #8]
 801521e:	0151      	lsls	r1, r2, #5
 8015220:	68fa      	ldr	r2, [r7, #12]
 8015222:	440a      	add	r2, r1
 8015224:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015228:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801522c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801522e:	683b      	ldr	r3, [r7, #0]
 8015230:	791b      	ldrb	r3, [r3, #4]
 8015232:	2b03      	cmp	r3, #3
 8015234:	d003      	beq.n	801523e <USB_EPClearStall+0x9e>
 8015236:	683b      	ldr	r3, [r7, #0]
 8015238:	791b      	ldrb	r3, [r3, #4]
 801523a:	2b02      	cmp	r3, #2
 801523c:	d10f      	bne.n	801525e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801523e:	68bb      	ldr	r3, [r7, #8]
 8015240:	015a      	lsls	r2, r3, #5
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	4413      	add	r3, r2
 8015246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801524a:	681b      	ldr	r3, [r3, #0]
 801524c:	68ba      	ldr	r2, [r7, #8]
 801524e:	0151      	lsls	r1, r2, #5
 8015250:	68fa      	ldr	r2, [r7, #12]
 8015252:	440a      	add	r2, r1
 8015254:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801525c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801525e:	2300      	movs	r3, #0
}
 8015260:	4618      	mov	r0, r3
 8015262:	3714      	adds	r7, #20
 8015264:	46bd      	mov	sp, r7
 8015266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801526a:	4770      	bx	lr

0801526c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801526c:	b480      	push	{r7}
 801526e:	b085      	sub	sp, #20
 8015270:	af00      	add	r7, sp, #0
 8015272:	6078      	str	r0, [r7, #4]
 8015274:	460b      	mov	r3, r1
 8015276:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015282:	681b      	ldr	r3, [r3, #0]
 8015284:	68fa      	ldr	r2, [r7, #12]
 8015286:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801528a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801528e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015296:	681a      	ldr	r2, [r3, #0]
 8015298:	78fb      	ldrb	r3, [r7, #3]
 801529a:	011b      	lsls	r3, r3, #4
 801529c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80152a0:	68f9      	ldr	r1, [r7, #12]
 80152a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80152a6:	4313      	orrs	r3, r2
 80152a8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80152aa:	2300      	movs	r3, #0
}
 80152ac:	4618      	mov	r0, r3
 80152ae:	3714      	adds	r7, #20
 80152b0:	46bd      	mov	sp, r7
 80152b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b6:	4770      	bx	lr

080152b8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80152b8:	b480      	push	{r7}
 80152ba:	b085      	sub	sp, #20
 80152bc:	af00      	add	r7, sp, #0
 80152be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80152c4:	68fb      	ldr	r3, [r7, #12]
 80152c6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	68fa      	ldr	r2, [r7, #12]
 80152ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80152d2:	f023 0303 	bic.w	r3, r3, #3
 80152d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80152d8:	68fb      	ldr	r3, [r7, #12]
 80152da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80152de:	685b      	ldr	r3, [r3, #4]
 80152e0:	68fa      	ldr	r2, [r7, #12]
 80152e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80152e6:	f023 0302 	bic.w	r3, r3, #2
 80152ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80152ec:	2300      	movs	r3, #0
}
 80152ee:	4618      	mov	r0, r3
 80152f0:	3714      	adds	r7, #20
 80152f2:	46bd      	mov	sp, r7
 80152f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152f8:	4770      	bx	lr

080152fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80152fa:	b480      	push	{r7}
 80152fc:	b085      	sub	sp, #20
 80152fe:	af00      	add	r7, sp, #0
 8015300:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	68fa      	ldr	r2, [r7, #12]
 8015310:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015314:	f023 0303 	bic.w	r3, r3, #3
 8015318:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015320:	685b      	ldr	r3, [r3, #4]
 8015322:	68fa      	ldr	r2, [r7, #12]
 8015324:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8015328:	f043 0302 	orr.w	r3, r3, #2
 801532c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801532e:	2300      	movs	r3, #0
}
 8015330:	4618      	mov	r0, r3
 8015332:	3714      	adds	r7, #20
 8015334:	46bd      	mov	sp, r7
 8015336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801533a:	4770      	bx	lr

0801533c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801533c:	b480      	push	{r7}
 801533e:	b085      	sub	sp, #20
 8015340:	af00      	add	r7, sp, #0
 8015342:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	695b      	ldr	r3, [r3, #20]
 8015348:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	699b      	ldr	r3, [r3, #24]
 801534e:	68fa      	ldr	r2, [r7, #12]
 8015350:	4013      	ands	r3, r2
 8015352:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8015354:	68fb      	ldr	r3, [r7, #12]
}
 8015356:	4618      	mov	r0, r3
 8015358:	3714      	adds	r7, #20
 801535a:	46bd      	mov	sp, r7
 801535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015360:	4770      	bx	lr

08015362 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8015362:	b480      	push	{r7}
 8015364:	b085      	sub	sp, #20
 8015366:	af00      	add	r7, sp, #0
 8015368:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015374:	699b      	ldr	r3, [r3, #24]
 8015376:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801537e:	69db      	ldr	r3, [r3, #28]
 8015380:	68ba      	ldr	r2, [r7, #8]
 8015382:	4013      	ands	r3, r2
 8015384:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8015386:	68bb      	ldr	r3, [r7, #8]
 8015388:	0c1b      	lsrs	r3, r3, #16
}
 801538a:	4618      	mov	r0, r3
 801538c:	3714      	adds	r7, #20
 801538e:	46bd      	mov	sp, r7
 8015390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015394:	4770      	bx	lr

08015396 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8015396:	b480      	push	{r7}
 8015398:	b085      	sub	sp, #20
 801539a:	af00      	add	r7, sp, #0
 801539c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80153a2:	68fb      	ldr	r3, [r7, #12]
 80153a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80153a8:	699b      	ldr	r3, [r3, #24]
 80153aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80153b2:	69db      	ldr	r3, [r3, #28]
 80153b4:	68ba      	ldr	r2, [r7, #8]
 80153b6:	4013      	ands	r3, r2
 80153b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80153ba:	68bb      	ldr	r3, [r7, #8]
 80153bc:	b29b      	uxth	r3, r3
}
 80153be:	4618      	mov	r0, r3
 80153c0:	3714      	adds	r7, #20
 80153c2:	46bd      	mov	sp, r7
 80153c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153c8:	4770      	bx	lr

080153ca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80153ca:	b480      	push	{r7}
 80153cc:	b085      	sub	sp, #20
 80153ce:	af00      	add	r7, sp, #0
 80153d0:	6078      	str	r0, [r7, #4]
 80153d2:	460b      	mov	r3, r1
 80153d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80153da:	78fb      	ldrb	r3, [r7, #3]
 80153dc:	015a      	lsls	r2, r3, #5
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	4413      	add	r3, r2
 80153e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80153e6:	689b      	ldr	r3, [r3, #8]
 80153e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80153f0:	695b      	ldr	r3, [r3, #20]
 80153f2:	68ba      	ldr	r2, [r7, #8]
 80153f4:	4013      	ands	r3, r2
 80153f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80153f8:	68bb      	ldr	r3, [r7, #8]
}
 80153fa:	4618      	mov	r0, r3
 80153fc:	3714      	adds	r7, #20
 80153fe:	46bd      	mov	sp, r7
 8015400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015404:	4770      	bx	lr

08015406 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8015406:	b480      	push	{r7}
 8015408:	b087      	sub	sp, #28
 801540a:	af00      	add	r7, sp, #0
 801540c:	6078      	str	r0, [r7, #4]
 801540e:	460b      	mov	r3, r1
 8015410:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8015416:	697b      	ldr	r3, [r7, #20]
 8015418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801541c:	691b      	ldr	r3, [r3, #16]
 801541e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8015420:	697b      	ldr	r3, [r7, #20]
 8015422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015428:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801542a:	78fb      	ldrb	r3, [r7, #3]
 801542c:	f003 030f 	and.w	r3, r3, #15
 8015430:	68fa      	ldr	r2, [r7, #12]
 8015432:	fa22 f303 	lsr.w	r3, r2, r3
 8015436:	01db      	lsls	r3, r3, #7
 8015438:	b2db      	uxtb	r3, r3
 801543a:	693a      	ldr	r2, [r7, #16]
 801543c:	4313      	orrs	r3, r2
 801543e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8015440:	78fb      	ldrb	r3, [r7, #3]
 8015442:	015a      	lsls	r2, r3, #5
 8015444:	697b      	ldr	r3, [r7, #20]
 8015446:	4413      	add	r3, r2
 8015448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801544c:	689b      	ldr	r3, [r3, #8]
 801544e:	693a      	ldr	r2, [r7, #16]
 8015450:	4013      	ands	r3, r2
 8015452:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8015454:	68bb      	ldr	r3, [r7, #8]
}
 8015456:	4618      	mov	r0, r3
 8015458:	371c      	adds	r7, #28
 801545a:	46bd      	mov	sp, r7
 801545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015460:	4770      	bx	lr

08015462 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8015462:	b480      	push	{r7}
 8015464:	b083      	sub	sp, #12
 8015466:	af00      	add	r7, sp, #0
 8015468:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	695b      	ldr	r3, [r3, #20]
 801546e:	f003 0301 	and.w	r3, r3, #1
}
 8015472:	4618      	mov	r0, r3
 8015474:	370c      	adds	r7, #12
 8015476:	46bd      	mov	sp, r7
 8015478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801547c:	4770      	bx	lr
	...

08015480 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8015480:	b480      	push	{r7}
 8015482:	b085      	sub	sp, #20
 8015484:	af00      	add	r7, sp, #0
 8015486:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015492:	681a      	ldr	r2, [r3, #0]
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801549a:	4619      	mov	r1, r3
 801549c:	4b09      	ldr	r3, [pc, #36]	; (80154c4 <USB_ActivateSetup+0x44>)
 801549e:	4013      	ands	r3, r2
 80154a0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80154a8:	685b      	ldr	r3, [r3, #4]
 80154aa:	68fa      	ldr	r2, [r7, #12]
 80154ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80154b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80154b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80154b6:	2300      	movs	r3, #0
}
 80154b8:	4618      	mov	r0, r3
 80154ba:	3714      	adds	r7, #20
 80154bc:	46bd      	mov	sp, r7
 80154be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154c2:	4770      	bx	lr
 80154c4:	fffff800 	.word	0xfffff800

080154c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80154c8:	b480      	push	{r7}
 80154ca:	b087      	sub	sp, #28
 80154cc:	af00      	add	r7, sp, #0
 80154ce:	60f8      	str	r0, [r7, #12]
 80154d0:	460b      	mov	r3, r1
 80154d2:	607a      	str	r2, [r7, #4]
 80154d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80154d6:	68fb      	ldr	r3, [r7, #12]
 80154d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80154da:	68fb      	ldr	r3, [r7, #12]
 80154dc:	333c      	adds	r3, #60	; 0x3c
 80154de:	3304      	adds	r3, #4
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80154e4:	693b      	ldr	r3, [r7, #16]
 80154e6:	4a26      	ldr	r2, [pc, #152]	; (8015580 <USB_EP0_OutStart+0xb8>)
 80154e8:	4293      	cmp	r3, r2
 80154ea:	d90a      	bls.n	8015502 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80154ec:	697b      	ldr	r3, [r7, #20]
 80154ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80154f2:	681b      	ldr	r3, [r3, #0]
 80154f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80154f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80154fc:	d101      	bne.n	8015502 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80154fe:	2300      	movs	r3, #0
 8015500:	e037      	b.n	8015572 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8015502:	697b      	ldr	r3, [r7, #20]
 8015504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015508:	461a      	mov	r2, r3
 801550a:	2300      	movs	r3, #0
 801550c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801550e:	697b      	ldr	r3, [r7, #20]
 8015510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015514:	691b      	ldr	r3, [r3, #16]
 8015516:	697a      	ldr	r2, [r7, #20]
 8015518:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801551c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8015520:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8015522:	697b      	ldr	r3, [r7, #20]
 8015524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015528:	691b      	ldr	r3, [r3, #16]
 801552a:	697a      	ldr	r2, [r7, #20]
 801552c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015530:	f043 0318 	orr.w	r3, r3, #24
 8015534:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8015536:	697b      	ldr	r3, [r7, #20]
 8015538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801553c:	691b      	ldr	r3, [r3, #16]
 801553e:	697a      	ldr	r2, [r7, #20]
 8015540:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015544:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8015548:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801554a:	7afb      	ldrb	r3, [r7, #11]
 801554c:	2b01      	cmp	r3, #1
 801554e:	d10f      	bne.n	8015570 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8015550:	697b      	ldr	r3, [r7, #20]
 8015552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015556:	461a      	mov	r2, r3
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801555c:	697b      	ldr	r3, [r7, #20]
 801555e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015562:	681b      	ldr	r3, [r3, #0]
 8015564:	697a      	ldr	r2, [r7, #20]
 8015566:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801556a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801556e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015570:	2300      	movs	r3, #0
}
 8015572:	4618      	mov	r0, r3
 8015574:	371c      	adds	r7, #28
 8015576:	46bd      	mov	sp, r7
 8015578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801557c:	4770      	bx	lr
 801557e:	bf00      	nop
 8015580:	4f54300a 	.word	0x4f54300a

08015584 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8015584:	b480      	push	{r7}
 8015586:	b085      	sub	sp, #20
 8015588:	af00      	add	r7, sp, #0
 801558a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801558c:	2300      	movs	r3, #0
 801558e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8015590:	68fb      	ldr	r3, [r7, #12]
 8015592:	3301      	adds	r3, #1
 8015594:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8015596:	68fb      	ldr	r3, [r7, #12]
 8015598:	4a13      	ldr	r2, [pc, #76]	; (80155e8 <USB_CoreReset+0x64>)
 801559a:	4293      	cmp	r3, r2
 801559c:	d901      	bls.n	80155a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801559e:	2303      	movs	r3, #3
 80155a0:	e01b      	b.n	80155da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	691b      	ldr	r3, [r3, #16]
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	daf2      	bge.n	8015590 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80155aa:	2300      	movs	r3, #0
 80155ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	691b      	ldr	r3, [r3, #16]
 80155b2:	f043 0201 	orr.w	r2, r3, #1
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80155ba:	68fb      	ldr	r3, [r7, #12]
 80155bc:	3301      	adds	r3, #1
 80155be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	4a09      	ldr	r2, [pc, #36]	; (80155e8 <USB_CoreReset+0x64>)
 80155c4:	4293      	cmp	r3, r2
 80155c6:	d901      	bls.n	80155cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80155c8:	2303      	movs	r3, #3
 80155ca:	e006      	b.n	80155da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	691b      	ldr	r3, [r3, #16]
 80155d0:	f003 0301 	and.w	r3, r3, #1
 80155d4:	2b01      	cmp	r3, #1
 80155d6:	d0f0      	beq.n	80155ba <USB_CoreReset+0x36>

  return HAL_OK;
 80155d8:	2300      	movs	r3, #0
}
 80155da:	4618      	mov	r0, r3
 80155dc:	3714      	adds	r7, #20
 80155de:	46bd      	mov	sp, r7
 80155e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155e4:	4770      	bx	lr
 80155e6:	bf00      	nop
 80155e8:	00030d40 	.word	0x00030d40

080155ec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80155ec:	b580      	push	{r7, lr}
 80155ee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80155f0:	4904      	ldr	r1, [pc, #16]	; (8015604 <MX_FATFS_Init+0x18>)
 80155f2:	4805      	ldr	r0, [pc, #20]	; (8015608 <MX_FATFS_Init+0x1c>)
 80155f4:	f005 f904 	bl	801a800 <FATFS_LinkDriver>
 80155f8:	4603      	mov	r3, r0
 80155fa:	461a      	mov	r2, r3
 80155fc:	4b03      	ldr	r3, [pc, #12]	; (801560c <MX_FATFS_Init+0x20>)
 80155fe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8015600:	bf00      	nop
 8015602:	bd80      	pop	{r7, pc}
 8015604:	240016ac 	.word	0x240016ac
 8015608:	08020534 	.word	0x08020534
 801560c:	240016a8 	.word	0x240016a8

08015610 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8015610:	b480      	push	{r7}
 8015612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8015614:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8015616:	4618      	mov	r0, r3
 8015618:	46bd      	mov	sp, r7
 801561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801561e:	4770      	bx	lr

08015620 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8015620:	b580      	push	{r7, lr}
 8015622:	b082      	sub	sp, #8
 8015624:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8015626:	2300      	movs	r3, #0
 8015628:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801562a:	f000 f885 	bl	8015738 <BSP_SD_IsDetected>
 801562e:	4603      	mov	r3, r0
 8015630:	2b01      	cmp	r3, #1
 8015632:	d001      	beq.n	8015638 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8015634:	2302      	movs	r3, #2
 8015636:	e012      	b.n	801565e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 8015638:	480b      	ldr	r0, [pc, #44]	; (8015668 <BSP_SD_Init+0x48>)
 801563a:	f7f8 ff39 	bl	800e4b0 <HAL_SD_Init>
 801563e:	4603      	mov	r3, r0
 8015640:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8015642:	79fb      	ldrb	r3, [r7, #7]
 8015644:	2b00      	cmp	r3, #0
 8015646:	d109      	bne.n	801565c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8015648:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801564c:	4806      	ldr	r0, [pc, #24]	; (8015668 <BSP_SD_Init+0x48>)
 801564e:	f7f9 fdef 	bl	800f230 <HAL_SD_ConfigWideBusOperation>
 8015652:	4603      	mov	r3, r0
 8015654:	2b00      	cmp	r3, #0
 8015656:	d001      	beq.n	801565c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8015658:	2301      	movs	r3, #1
 801565a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 801565c:	79fb      	ldrb	r3, [r7, #7]
}
 801565e:	4618      	mov	r0, r3
 8015660:	3708      	adds	r7, #8
 8015662:	46bd      	mov	sp, r7
 8015664:	bd80      	pop	{r7, pc}
 8015666:	bf00      	nop
 8015668:	24000f44 	.word	0x24000f44

0801566c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 801566c:	b580      	push	{r7, lr}
 801566e:	b086      	sub	sp, #24
 8015670:	af00      	add	r7, sp, #0
 8015672:	60f8      	str	r0, [r7, #12]
 8015674:	60b9      	str	r1, [r7, #8]
 8015676:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8015678:	2300      	movs	r3, #0
 801567a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	68ba      	ldr	r2, [r7, #8]
 8015680:	68f9      	ldr	r1, [r7, #12]
 8015682:	4806      	ldr	r0, [pc, #24]	; (801569c <BSP_SD_ReadBlocks_DMA+0x30>)
 8015684:	f7f9 f834 	bl	800e6f0 <HAL_SD_ReadBlocks_DMA>
 8015688:	4603      	mov	r3, r0
 801568a:	2b00      	cmp	r3, #0
 801568c:	d001      	beq.n	8015692 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801568e:	2301      	movs	r3, #1
 8015690:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8015692:	7dfb      	ldrb	r3, [r7, #23]
}
 8015694:	4618      	mov	r0, r3
 8015696:	3718      	adds	r7, #24
 8015698:	46bd      	mov	sp, r7
 801569a:	bd80      	pop	{r7, pc}
 801569c:	24000f44 	.word	0x24000f44

080156a0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80156a0:	b580      	push	{r7, lr}
 80156a2:	b086      	sub	sp, #24
 80156a4:	af00      	add	r7, sp, #0
 80156a6:	60f8      	str	r0, [r7, #12]
 80156a8:	60b9      	str	r1, [r7, #8]
 80156aa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80156ac:	2300      	movs	r3, #0
 80156ae:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	68ba      	ldr	r2, [r7, #8]
 80156b4:	68f9      	ldr	r1, [r7, #12]
 80156b6:	4806      	ldr	r0, [pc, #24]	; (80156d0 <BSP_SD_WriteBlocks_DMA+0x30>)
 80156b8:	f7f9 f8c2 	bl	800e840 <HAL_SD_WriteBlocks_DMA>
 80156bc:	4603      	mov	r3, r0
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d001      	beq.n	80156c6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80156c2:	2301      	movs	r3, #1
 80156c4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80156c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80156c8:	4618      	mov	r0, r3
 80156ca:	3718      	adds	r7, #24
 80156cc:	46bd      	mov	sp, r7
 80156ce:	bd80      	pop	{r7, pc}
 80156d0:	24000f44 	.word	0x24000f44

080156d4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80156d4:	b580      	push	{r7, lr}
 80156d6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80156d8:	4805      	ldr	r0, [pc, #20]	; (80156f0 <BSP_SD_GetCardState+0x1c>)
 80156da:	f7f9 febb 	bl	800f454 <HAL_SD_GetCardState>
 80156de:	4603      	mov	r3, r0
 80156e0:	2b04      	cmp	r3, #4
 80156e2:	bf14      	ite	ne
 80156e4:	2301      	movne	r3, #1
 80156e6:	2300      	moveq	r3, #0
 80156e8:	b2db      	uxtb	r3, r3
}
 80156ea:	4618      	mov	r0, r3
 80156ec:	bd80      	pop	{r7, pc}
 80156ee:	bf00      	nop
 80156f0:	24000f44 	.word	0x24000f44

080156f4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80156f4:	b580      	push	{r7, lr}
 80156f6:	b082      	sub	sp, #8
 80156f8:	af00      	add	r7, sp, #0
 80156fa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 80156fc:	6879      	ldr	r1, [r7, #4]
 80156fe:	4803      	ldr	r0, [pc, #12]	; (801570c <BSP_SD_GetCardInfo+0x18>)
 8015700:	f7f9 fd6a 	bl	800f1d8 <HAL_SD_GetCardInfo>
}
 8015704:	bf00      	nop
 8015706:	3708      	adds	r7, #8
 8015708:	46bd      	mov	sp, r7
 801570a:	bd80      	pop	{r7, pc}
 801570c:	24000f44 	.word	0x24000f44

08015710 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8015710:	b580      	push	{r7, lr}
 8015712:	b082      	sub	sp, #8
 8015714:	af00      	add	r7, sp, #0
 8015716:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8015718:	f000 f984 	bl	8015a24 <BSP_SD_WriteCpltCallback>
}
 801571c:	bf00      	nop
 801571e:	3708      	adds	r7, #8
 8015720:	46bd      	mov	sp, r7
 8015722:	bd80      	pop	{r7, pc}

08015724 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8015724:	b580      	push	{r7, lr}
 8015726:	b082      	sub	sp, #8
 8015728:	af00      	add	r7, sp, #0
 801572a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 801572c:	f000 f986 	bl	8015a3c <BSP_SD_ReadCpltCallback>
}
 8015730:	bf00      	nop
 8015732:	3708      	adds	r7, #8
 8015734:	46bd      	mov	sp, r7
 8015736:	bd80      	pop	{r7, pc}

08015738 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8015738:	b480      	push	{r7}
 801573a:	b083      	sub	sp, #12
 801573c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801573e:	2301      	movs	r3, #1
 8015740:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 8015742:	79fb      	ldrb	r3, [r7, #7]
 8015744:	b2db      	uxtb	r3, r3
}
 8015746:	4618      	mov	r0, r3
 8015748:	370c      	adds	r7, #12
 801574a:	46bd      	mov	sp, r7
 801574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015750:	4770      	bx	lr

08015752 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8015752:	b580      	push	{r7, lr}
 8015754:	b084      	sub	sp, #16
 8015756:	af00      	add	r7, sp, #0
 8015758:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 801575a:	f7ee fddd 	bl	8004318 <HAL_GetTick>
 801575e:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8015760:	e006      	b.n	8015770 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015762:	f7ff ffb7 	bl	80156d4 <BSP_SD_GetCardState>
 8015766:	4603      	mov	r3, r0
 8015768:	2b00      	cmp	r3, #0
 801576a:	d101      	bne.n	8015770 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801576c:	2300      	movs	r3, #0
 801576e:	e009      	b.n	8015784 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8015770:	f7ee fdd2 	bl	8004318 <HAL_GetTick>
 8015774:	4602      	mov	r2, r0
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	1ad3      	subs	r3, r2, r3
 801577a:	687a      	ldr	r2, [r7, #4]
 801577c:	429a      	cmp	r2, r3
 801577e:	d8f0      	bhi.n	8015762 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8015780:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015784:	4618      	mov	r0, r3
 8015786:	3710      	adds	r7, #16
 8015788:	46bd      	mov	sp, r7
 801578a:	bd80      	pop	{r7, pc}

0801578c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801578c:	b580      	push	{r7, lr}
 801578e:	b082      	sub	sp, #8
 8015790:	af00      	add	r7, sp, #0
 8015792:	4603      	mov	r3, r0
 8015794:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8015796:	4b0b      	ldr	r3, [pc, #44]	; (80157c4 <SD_CheckStatus+0x38>)
 8015798:	2201      	movs	r2, #1
 801579a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801579c:	f7ff ff9a 	bl	80156d4 <BSP_SD_GetCardState>
 80157a0:	4603      	mov	r3, r0
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d107      	bne.n	80157b6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80157a6:	4b07      	ldr	r3, [pc, #28]	; (80157c4 <SD_CheckStatus+0x38>)
 80157a8:	781b      	ldrb	r3, [r3, #0]
 80157aa:	b2db      	uxtb	r3, r3
 80157ac:	f023 0301 	bic.w	r3, r3, #1
 80157b0:	b2da      	uxtb	r2, r3
 80157b2:	4b04      	ldr	r3, [pc, #16]	; (80157c4 <SD_CheckStatus+0x38>)
 80157b4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80157b6:	4b03      	ldr	r3, [pc, #12]	; (80157c4 <SD_CheckStatus+0x38>)
 80157b8:	781b      	ldrb	r3, [r3, #0]
 80157ba:	b2db      	uxtb	r3, r3
}
 80157bc:	4618      	mov	r0, r3
 80157be:	3708      	adds	r7, #8
 80157c0:	46bd      	mov	sp, r7
 80157c2:	bd80      	pop	{r7, pc}
 80157c4:	2400000d 	.word	0x2400000d

080157c8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80157c8:	b580      	push	{r7, lr}
 80157ca:	b082      	sub	sp, #8
 80157cc:	af00      	add	r7, sp, #0
 80157ce:	4603      	mov	r3, r0
 80157d0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80157d2:	f7ff ff25 	bl	8015620 <BSP_SD_Init>
 80157d6:	4603      	mov	r3, r0
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d107      	bne.n	80157ec <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80157dc:	79fb      	ldrb	r3, [r7, #7]
 80157de:	4618      	mov	r0, r3
 80157e0:	f7ff ffd4 	bl	801578c <SD_CheckStatus>
 80157e4:	4603      	mov	r3, r0
 80157e6:	461a      	mov	r2, r3
 80157e8:	4b04      	ldr	r3, [pc, #16]	; (80157fc <SD_initialize+0x34>)
 80157ea:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80157ec:	4b03      	ldr	r3, [pc, #12]	; (80157fc <SD_initialize+0x34>)
 80157ee:	781b      	ldrb	r3, [r3, #0]
 80157f0:	b2db      	uxtb	r3, r3
}
 80157f2:	4618      	mov	r0, r3
 80157f4:	3708      	adds	r7, #8
 80157f6:	46bd      	mov	sp, r7
 80157f8:	bd80      	pop	{r7, pc}
 80157fa:	bf00      	nop
 80157fc:	2400000d 	.word	0x2400000d

08015800 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8015800:	b580      	push	{r7, lr}
 8015802:	b082      	sub	sp, #8
 8015804:	af00      	add	r7, sp, #0
 8015806:	4603      	mov	r3, r0
 8015808:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801580a:	79fb      	ldrb	r3, [r7, #7]
 801580c:	4618      	mov	r0, r3
 801580e:	f7ff ffbd 	bl	801578c <SD_CheckStatus>
 8015812:	4603      	mov	r3, r0
}
 8015814:	4618      	mov	r0, r3
 8015816:	3708      	adds	r7, #8
 8015818:	46bd      	mov	sp, r7
 801581a:	bd80      	pop	{r7, pc}

0801581c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801581c:	b580      	push	{r7, lr}
 801581e:	b086      	sub	sp, #24
 8015820:	af00      	add	r7, sp, #0
 8015822:	60b9      	str	r1, [r7, #8]
 8015824:	607a      	str	r2, [r7, #4]
 8015826:	603b      	str	r3, [r7, #0]
 8015828:	4603      	mov	r3, r0
 801582a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801582c:	2301      	movs	r3, #1
 801582e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8015830:	f247 5030 	movw	r0, #30000	; 0x7530
 8015834:	f7ff ff8d 	bl	8015752 <SD_CheckStatusWithTimeout>
 8015838:	4603      	mov	r3, r0
 801583a:	2b00      	cmp	r3, #0
 801583c:	da01      	bge.n	8015842 <SD_read+0x26>
  {
    return res;
 801583e:	7dfb      	ldrb	r3, [r7, #23]
 8015840:	e03b      	b.n	80158ba <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8015842:	683a      	ldr	r2, [r7, #0]
 8015844:	6879      	ldr	r1, [r7, #4]
 8015846:	68b8      	ldr	r0, [r7, #8]
 8015848:	f7ff ff10 	bl	801566c <BSP_SD_ReadBlocks_DMA>
 801584c:	4603      	mov	r3, r0
 801584e:	2b00      	cmp	r3, #0
 8015850:	d132      	bne.n	80158b8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8015852:	4b1c      	ldr	r3, [pc, #112]	; (80158c4 <SD_read+0xa8>)
 8015854:	2200      	movs	r2, #0
 8015856:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8015858:	f7ee fd5e 	bl	8004318 <HAL_GetTick>
 801585c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801585e:	bf00      	nop
 8015860:	4b18      	ldr	r3, [pc, #96]	; (80158c4 <SD_read+0xa8>)
 8015862:	681b      	ldr	r3, [r3, #0]
 8015864:	2b00      	cmp	r3, #0
 8015866:	d108      	bne.n	801587a <SD_read+0x5e>
 8015868:	f7ee fd56 	bl	8004318 <HAL_GetTick>
 801586c:	4602      	mov	r2, r0
 801586e:	693b      	ldr	r3, [r7, #16]
 8015870:	1ad3      	subs	r3, r2, r3
 8015872:	f247 522f 	movw	r2, #29999	; 0x752f
 8015876:	4293      	cmp	r3, r2
 8015878:	d9f2      	bls.n	8015860 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 801587a:	4b12      	ldr	r3, [pc, #72]	; (80158c4 <SD_read+0xa8>)
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	2b00      	cmp	r3, #0
 8015880:	d102      	bne.n	8015888 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8015882:	2301      	movs	r3, #1
 8015884:	75fb      	strb	r3, [r7, #23]
 8015886:	e017      	b.n	80158b8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8015888:	4b0e      	ldr	r3, [pc, #56]	; (80158c4 <SD_read+0xa8>)
 801588a:	2200      	movs	r2, #0
 801588c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801588e:	f7ee fd43 	bl	8004318 <HAL_GetTick>
 8015892:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015894:	e007      	b.n	80158a6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015896:	f7ff ff1d 	bl	80156d4 <BSP_SD_GetCardState>
 801589a:	4603      	mov	r3, r0
 801589c:	2b00      	cmp	r3, #0
 801589e:	d102      	bne.n	80158a6 <SD_read+0x8a>
          {
            res = RES_OK;
 80158a0:	2300      	movs	r3, #0
 80158a2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80158a4:	e008      	b.n	80158b8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80158a6:	f7ee fd37 	bl	8004318 <HAL_GetTick>
 80158aa:	4602      	mov	r2, r0
 80158ac:	693b      	ldr	r3, [r7, #16]
 80158ae:	1ad3      	subs	r3, r2, r3
 80158b0:	f247 522f 	movw	r2, #29999	; 0x752f
 80158b4:	4293      	cmp	r3, r2
 80158b6:	d9ee      	bls.n	8015896 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80158b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80158ba:	4618      	mov	r0, r3
 80158bc:	3718      	adds	r7, #24
 80158be:	46bd      	mov	sp, r7
 80158c0:	bd80      	pop	{r7, pc}
 80158c2:	bf00      	nop
 80158c4:	240016b4 	.word	0x240016b4

080158c8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80158c8:	b580      	push	{r7, lr}
 80158ca:	b086      	sub	sp, #24
 80158cc:	af00      	add	r7, sp, #0
 80158ce:	60b9      	str	r1, [r7, #8]
 80158d0:	607a      	str	r2, [r7, #4]
 80158d2:	603b      	str	r3, [r7, #0]
 80158d4:	4603      	mov	r3, r0
 80158d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80158d8:	2301      	movs	r3, #1
 80158da:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80158dc:	4b24      	ldr	r3, [pc, #144]	; (8015970 <SD_write+0xa8>)
 80158de:	2200      	movs	r2, #0
 80158e0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80158e2:	f247 5030 	movw	r0, #30000	; 0x7530
 80158e6:	f7ff ff34 	bl	8015752 <SD_CheckStatusWithTimeout>
 80158ea:	4603      	mov	r3, r0
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	da01      	bge.n	80158f4 <SD_write+0x2c>
  {
    return res;
 80158f0:	7dfb      	ldrb	r3, [r7, #23]
 80158f2:	e038      	b.n	8015966 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80158f4:	683a      	ldr	r2, [r7, #0]
 80158f6:	6879      	ldr	r1, [r7, #4]
 80158f8:	68b8      	ldr	r0, [r7, #8]
 80158fa:	f7ff fed1 	bl	80156a0 <BSP_SD_WriteBlocks_DMA>
 80158fe:	4603      	mov	r3, r0
 8015900:	2b00      	cmp	r3, #0
 8015902:	d12f      	bne.n	8015964 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8015904:	f7ee fd08 	bl	8004318 <HAL_GetTick>
 8015908:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801590a:	bf00      	nop
 801590c:	4b18      	ldr	r3, [pc, #96]	; (8015970 <SD_write+0xa8>)
 801590e:	681b      	ldr	r3, [r3, #0]
 8015910:	2b00      	cmp	r3, #0
 8015912:	d108      	bne.n	8015926 <SD_write+0x5e>
 8015914:	f7ee fd00 	bl	8004318 <HAL_GetTick>
 8015918:	4602      	mov	r2, r0
 801591a:	693b      	ldr	r3, [r7, #16]
 801591c:	1ad3      	subs	r3, r2, r3
 801591e:	f247 522f 	movw	r2, #29999	; 0x752f
 8015922:	4293      	cmp	r3, r2
 8015924:	d9f2      	bls.n	801590c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8015926:	4b12      	ldr	r3, [pc, #72]	; (8015970 <SD_write+0xa8>)
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	2b00      	cmp	r3, #0
 801592c:	d102      	bne.n	8015934 <SD_write+0x6c>
      {
        res = RES_ERROR;
 801592e:	2301      	movs	r3, #1
 8015930:	75fb      	strb	r3, [r7, #23]
 8015932:	e017      	b.n	8015964 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8015934:	4b0e      	ldr	r3, [pc, #56]	; (8015970 <SD_write+0xa8>)
 8015936:	2200      	movs	r2, #0
 8015938:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801593a:	f7ee fced 	bl	8004318 <HAL_GetTick>
 801593e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015940:	e007      	b.n	8015952 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015942:	f7ff fec7 	bl	80156d4 <BSP_SD_GetCardState>
 8015946:	4603      	mov	r3, r0
 8015948:	2b00      	cmp	r3, #0
 801594a:	d102      	bne.n	8015952 <SD_write+0x8a>
          {
            res = RES_OK;
 801594c:	2300      	movs	r3, #0
 801594e:	75fb      	strb	r3, [r7, #23]
            break;
 8015950:	e008      	b.n	8015964 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015952:	f7ee fce1 	bl	8004318 <HAL_GetTick>
 8015956:	4602      	mov	r2, r0
 8015958:	693b      	ldr	r3, [r7, #16]
 801595a:	1ad3      	subs	r3, r2, r3
 801595c:	f247 522f 	movw	r2, #29999	; 0x752f
 8015960:	4293      	cmp	r3, r2
 8015962:	d9ee      	bls.n	8015942 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8015964:	7dfb      	ldrb	r3, [r7, #23]
}
 8015966:	4618      	mov	r0, r3
 8015968:	3718      	adds	r7, #24
 801596a:	46bd      	mov	sp, r7
 801596c:	bd80      	pop	{r7, pc}
 801596e:	bf00      	nop
 8015970:	240016b0 	.word	0x240016b0

08015974 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8015974:	b580      	push	{r7, lr}
 8015976:	b08c      	sub	sp, #48	; 0x30
 8015978:	af00      	add	r7, sp, #0
 801597a:	4603      	mov	r3, r0
 801597c:	603a      	str	r2, [r7, #0]
 801597e:	71fb      	strb	r3, [r7, #7]
 8015980:	460b      	mov	r3, r1
 8015982:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8015984:	2301      	movs	r3, #1
 8015986:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801598a:	4b25      	ldr	r3, [pc, #148]	; (8015a20 <SD_ioctl+0xac>)
 801598c:	781b      	ldrb	r3, [r3, #0]
 801598e:	b2db      	uxtb	r3, r3
 8015990:	f003 0301 	and.w	r3, r3, #1
 8015994:	2b00      	cmp	r3, #0
 8015996:	d001      	beq.n	801599c <SD_ioctl+0x28>
 8015998:	2303      	movs	r3, #3
 801599a:	e03c      	b.n	8015a16 <SD_ioctl+0xa2>

  switch (cmd)
 801599c:	79bb      	ldrb	r3, [r7, #6]
 801599e:	2b03      	cmp	r3, #3
 80159a0:	d834      	bhi.n	8015a0c <SD_ioctl+0x98>
 80159a2:	a201      	add	r2, pc, #4	; (adr r2, 80159a8 <SD_ioctl+0x34>)
 80159a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80159a8:	080159b9 	.word	0x080159b9
 80159ac:	080159c1 	.word	0x080159c1
 80159b0:	080159d9 	.word	0x080159d9
 80159b4:	080159f3 	.word	0x080159f3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80159b8:	2300      	movs	r3, #0
 80159ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80159be:	e028      	b.n	8015a12 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80159c0:	f107 0308 	add.w	r3, r7, #8
 80159c4:	4618      	mov	r0, r3
 80159c6:	f7ff fe95 	bl	80156f4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80159ca:	6a3a      	ldr	r2, [r7, #32]
 80159cc:	683b      	ldr	r3, [r7, #0]
 80159ce:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80159d0:	2300      	movs	r3, #0
 80159d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80159d6:	e01c      	b.n	8015a12 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80159d8:	f107 0308 	add.w	r3, r7, #8
 80159dc:	4618      	mov	r0, r3
 80159de:	f7ff fe89 	bl	80156f4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80159e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159e4:	b29a      	uxth	r2, r3
 80159e6:	683b      	ldr	r3, [r7, #0]
 80159e8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80159ea:	2300      	movs	r3, #0
 80159ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80159f0:	e00f      	b.n	8015a12 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80159f2:	f107 0308 	add.w	r3, r7, #8
 80159f6:	4618      	mov	r0, r3
 80159f8:	f7ff fe7c 	bl	80156f4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80159fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159fe:	0a5a      	lsrs	r2, r3, #9
 8015a00:	683b      	ldr	r3, [r7, #0]
 8015a02:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8015a04:	2300      	movs	r3, #0
 8015a06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015a0a:	e002      	b.n	8015a12 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8015a0c:	2304      	movs	r3, #4
 8015a0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8015a12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8015a16:	4618      	mov	r0, r3
 8015a18:	3730      	adds	r7, #48	; 0x30
 8015a1a:	46bd      	mov	sp, r7
 8015a1c:	bd80      	pop	{r7, pc}
 8015a1e:	bf00      	nop
 8015a20:	2400000d 	.word	0x2400000d

08015a24 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8015a24:	b480      	push	{r7}
 8015a26:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8015a28:	4b03      	ldr	r3, [pc, #12]	; (8015a38 <BSP_SD_WriteCpltCallback+0x14>)
 8015a2a:	2201      	movs	r2, #1
 8015a2c:	601a      	str	r2, [r3, #0]
}
 8015a2e:	bf00      	nop
 8015a30:	46bd      	mov	sp, r7
 8015a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a36:	4770      	bx	lr
 8015a38:	240016b0 	.word	0x240016b0

08015a3c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8015a3c:	b480      	push	{r7}
 8015a3e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8015a40:	4b03      	ldr	r3, [pc, #12]	; (8015a50 <BSP_SD_ReadCpltCallback+0x14>)
 8015a42:	2201      	movs	r2, #1
 8015a44:	601a      	str	r2, [r3, #0]
}
 8015a46:	bf00      	nop
 8015a48:	46bd      	mov	sp, r7
 8015a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a4e:	4770      	bx	lr
 8015a50:	240016b4 	.word	0x240016b4

08015a54 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015a54:	b580      	push	{r7, lr}
 8015a56:	b084      	sub	sp, #16
 8015a58:	af00      	add	r7, sp, #0
 8015a5a:	6078      	str	r0, [r7, #4]
 8015a5c:	460b      	mov	r3, r1
 8015a5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8015a60:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8015a64:	f005 fc72 	bl	801b34c <USBD_static_malloc>
 8015a68:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8015a6a:	68fb      	ldr	r3, [r7, #12]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d109      	bne.n	8015a84 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	32b0      	adds	r2, #176	; 0xb0
 8015a7a:	2100      	movs	r1, #0
 8015a7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8015a80:	2302      	movs	r3, #2
 8015a82:	e0d4      	b.n	8015c2e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8015a84:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8015a88:	2100      	movs	r1, #0
 8015a8a:	68f8      	ldr	r0, [r7, #12]
 8015a8c:	f006 fc35 	bl	801c2fa <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	32b0      	adds	r2, #176	; 0xb0
 8015a9a:	68f9      	ldr	r1, [r7, #12]
 8015a9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	32b0      	adds	r2, #176	; 0xb0
 8015aaa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	7c1b      	ldrb	r3, [r3, #16]
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d138      	bne.n	8015b2e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015abc:	4b5e      	ldr	r3, [pc, #376]	; (8015c38 <USBD_CDC_Init+0x1e4>)
 8015abe:	7819      	ldrb	r1, [r3, #0]
 8015ac0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015ac4:	2202      	movs	r2, #2
 8015ac6:	6878      	ldr	r0, [r7, #4]
 8015ac8:	f005 fb1d 	bl	801b106 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015acc:	4b5a      	ldr	r3, [pc, #360]	; (8015c38 <USBD_CDC_Init+0x1e4>)
 8015ace:	781b      	ldrb	r3, [r3, #0]
 8015ad0:	f003 020f 	and.w	r2, r3, #15
 8015ad4:	6879      	ldr	r1, [r7, #4]
 8015ad6:	4613      	mov	r3, r2
 8015ad8:	009b      	lsls	r3, r3, #2
 8015ada:	4413      	add	r3, r2
 8015adc:	009b      	lsls	r3, r3, #2
 8015ade:	440b      	add	r3, r1
 8015ae0:	3324      	adds	r3, #36	; 0x24
 8015ae2:	2201      	movs	r2, #1
 8015ae4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8015ae6:	4b55      	ldr	r3, [pc, #340]	; (8015c3c <USBD_CDC_Init+0x1e8>)
 8015ae8:	7819      	ldrb	r1, [r3, #0]
 8015aea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015aee:	2202      	movs	r2, #2
 8015af0:	6878      	ldr	r0, [r7, #4]
 8015af2:	f005 fb08 	bl	801b106 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8015af6:	4b51      	ldr	r3, [pc, #324]	; (8015c3c <USBD_CDC_Init+0x1e8>)
 8015af8:	781b      	ldrb	r3, [r3, #0]
 8015afa:	f003 020f 	and.w	r2, r3, #15
 8015afe:	6879      	ldr	r1, [r7, #4]
 8015b00:	4613      	mov	r3, r2
 8015b02:	009b      	lsls	r3, r3, #2
 8015b04:	4413      	add	r3, r2
 8015b06:	009b      	lsls	r3, r3, #2
 8015b08:	440b      	add	r3, r1
 8015b0a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015b0e:	2201      	movs	r2, #1
 8015b10:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8015b12:	4b4b      	ldr	r3, [pc, #300]	; (8015c40 <USBD_CDC_Init+0x1ec>)
 8015b14:	781b      	ldrb	r3, [r3, #0]
 8015b16:	f003 020f 	and.w	r2, r3, #15
 8015b1a:	6879      	ldr	r1, [r7, #4]
 8015b1c:	4613      	mov	r3, r2
 8015b1e:	009b      	lsls	r3, r3, #2
 8015b20:	4413      	add	r3, r2
 8015b22:	009b      	lsls	r3, r3, #2
 8015b24:	440b      	add	r3, r1
 8015b26:	3326      	adds	r3, #38	; 0x26
 8015b28:	2210      	movs	r2, #16
 8015b2a:	801a      	strh	r2, [r3, #0]
 8015b2c:	e035      	b.n	8015b9a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015b2e:	4b42      	ldr	r3, [pc, #264]	; (8015c38 <USBD_CDC_Init+0x1e4>)
 8015b30:	7819      	ldrb	r1, [r3, #0]
 8015b32:	2340      	movs	r3, #64	; 0x40
 8015b34:	2202      	movs	r2, #2
 8015b36:	6878      	ldr	r0, [r7, #4]
 8015b38:	f005 fae5 	bl	801b106 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015b3c:	4b3e      	ldr	r3, [pc, #248]	; (8015c38 <USBD_CDC_Init+0x1e4>)
 8015b3e:	781b      	ldrb	r3, [r3, #0]
 8015b40:	f003 020f 	and.w	r2, r3, #15
 8015b44:	6879      	ldr	r1, [r7, #4]
 8015b46:	4613      	mov	r3, r2
 8015b48:	009b      	lsls	r3, r3, #2
 8015b4a:	4413      	add	r3, r2
 8015b4c:	009b      	lsls	r3, r3, #2
 8015b4e:	440b      	add	r3, r1
 8015b50:	3324      	adds	r3, #36	; 0x24
 8015b52:	2201      	movs	r2, #1
 8015b54:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8015b56:	4b39      	ldr	r3, [pc, #228]	; (8015c3c <USBD_CDC_Init+0x1e8>)
 8015b58:	7819      	ldrb	r1, [r3, #0]
 8015b5a:	2340      	movs	r3, #64	; 0x40
 8015b5c:	2202      	movs	r2, #2
 8015b5e:	6878      	ldr	r0, [r7, #4]
 8015b60:	f005 fad1 	bl	801b106 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8015b64:	4b35      	ldr	r3, [pc, #212]	; (8015c3c <USBD_CDC_Init+0x1e8>)
 8015b66:	781b      	ldrb	r3, [r3, #0]
 8015b68:	f003 020f 	and.w	r2, r3, #15
 8015b6c:	6879      	ldr	r1, [r7, #4]
 8015b6e:	4613      	mov	r3, r2
 8015b70:	009b      	lsls	r3, r3, #2
 8015b72:	4413      	add	r3, r2
 8015b74:	009b      	lsls	r3, r3, #2
 8015b76:	440b      	add	r3, r1
 8015b78:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015b7c:	2201      	movs	r2, #1
 8015b7e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8015b80:	4b2f      	ldr	r3, [pc, #188]	; (8015c40 <USBD_CDC_Init+0x1ec>)
 8015b82:	781b      	ldrb	r3, [r3, #0]
 8015b84:	f003 020f 	and.w	r2, r3, #15
 8015b88:	6879      	ldr	r1, [r7, #4]
 8015b8a:	4613      	mov	r3, r2
 8015b8c:	009b      	lsls	r3, r3, #2
 8015b8e:	4413      	add	r3, r2
 8015b90:	009b      	lsls	r3, r3, #2
 8015b92:	440b      	add	r3, r1
 8015b94:	3326      	adds	r3, #38	; 0x26
 8015b96:	2210      	movs	r2, #16
 8015b98:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8015b9a:	4b29      	ldr	r3, [pc, #164]	; (8015c40 <USBD_CDC_Init+0x1ec>)
 8015b9c:	7819      	ldrb	r1, [r3, #0]
 8015b9e:	2308      	movs	r3, #8
 8015ba0:	2203      	movs	r2, #3
 8015ba2:	6878      	ldr	r0, [r7, #4]
 8015ba4:	f005 faaf 	bl	801b106 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8015ba8:	4b25      	ldr	r3, [pc, #148]	; (8015c40 <USBD_CDC_Init+0x1ec>)
 8015baa:	781b      	ldrb	r3, [r3, #0]
 8015bac:	f003 020f 	and.w	r2, r3, #15
 8015bb0:	6879      	ldr	r1, [r7, #4]
 8015bb2:	4613      	mov	r3, r2
 8015bb4:	009b      	lsls	r3, r3, #2
 8015bb6:	4413      	add	r3, r2
 8015bb8:	009b      	lsls	r3, r3, #2
 8015bba:	440b      	add	r3, r1
 8015bbc:	3324      	adds	r3, #36	; 0x24
 8015bbe:	2201      	movs	r2, #1
 8015bc0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8015bc2:	68fb      	ldr	r3, [r7, #12]
 8015bc4:	2200      	movs	r2, #0
 8015bc6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015bd0:	687a      	ldr	r2, [r7, #4]
 8015bd2:	33b0      	adds	r3, #176	; 0xb0
 8015bd4:	009b      	lsls	r3, r3, #2
 8015bd6:	4413      	add	r3, r2
 8015bd8:	685b      	ldr	r3, [r3, #4]
 8015bda:	681b      	ldr	r3, [r3, #0]
 8015bdc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8015bde:	68fb      	ldr	r3, [r7, #12]
 8015be0:	2200      	movs	r2, #0
 8015be2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8015be6:	68fb      	ldr	r3, [r7, #12]
 8015be8:	2200      	movs	r2, #0
 8015bea:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8015bee:	68fb      	ldr	r3, [r7, #12]
 8015bf0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d101      	bne.n	8015bfc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8015bf8:	2302      	movs	r3, #2
 8015bfa:	e018      	b.n	8015c2e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	7c1b      	ldrb	r3, [r3, #16]
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d10a      	bne.n	8015c1a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015c04:	4b0d      	ldr	r3, [pc, #52]	; (8015c3c <USBD_CDC_Init+0x1e8>)
 8015c06:	7819      	ldrb	r1, [r3, #0]
 8015c08:	68fb      	ldr	r3, [r7, #12]
 8015c0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015c0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015c12:	6878      	ldr	r0, [r7, #4]
 8015c14:	f005 fb66 	bl	801b2e4 <USBD_LL_PrepareReceive>
 8015c18:	e008      	b.n	8015c2c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015c1a:	4b08      	ldr	r3, [pc, #32]	; (8015c3c <USBD_CDC_Init+0x1e8>)
 8015c1c:	7819      	ldrb	r1, [r3, #0]
 8015c1e:	68fb      	ldr	r3, [r7, #12]
 8015c20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015c24:	2340      	movs	r3, #64	; 0x40
 8015c26:	6878      	ldr	r0, [r7, #4]
 8015c28:	f005 fb5c 	bl	801b2e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015c2c:	2300      	movs	r3, #0
}
 8015c2e:	4618      	mov	r0, r3
 8015c30:	3710      	adds	r7, #16
 8015c32:	46bd      	mov	sp, r7
 8015c34:	bd80      	pop	{r7, pc}
 8015c36:	bf00      	nop
 8015c38:	24000097 	.word	0x24000097
 8015c3c:	24000098 	.word	0x24000098
 8015c40:	24000099 	.word	0x24000099

08015c44 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015c44:	b580      	push	{r7, lr}
 8015c46:	b082      	sub	sp, #8
 8015c48:	af00      	add	r7, sp, #0
 8015c4a:	6078      	str	r0, [r7, #4]
 8015c4c:	460b      	mov	r3, r1
 8015c4e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8015c50:	4b3a      	ldr	r3, [pc, #232]	; (8015d3c <USBD_CDC_DeInit+0xf8>)
 8015c52:	781b      	ldrb	r3, [r3, #0]
 8015c54:	4619      	mov	r1, r3
 8015c56:	6878      	ldr	r0, [r7, #4]
 8015c58:	f005 fa7b 	bl	801b152 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8015c5c:	4b37      	ldr	r3, [pc, #220]	; (8015d3c <USBD_CDC_DeInit+0xf8>)
 8015c5e:	781b      	ldrb	r3, [r3, #0]
 8015c60:	f003 020f 	and.w	r2, r3, #15
 8015c64:	6879      	ldr	r1, [r7, #4]
 8015c66:	4613      	mov	r3, r2
 8015c68:	009b      	lsls	r3, r3, #2
 8015c6a:	4413      	add	r3, r2
 8015c6c:	009b      	lsls	r3, r3, #2
 8015c6e:	440b      	add	r3, r1
 8015c70:	3324      	adds	r3, #36	; 0x24
 8015c72:	2200      	movs	r2, #0
 8015c74:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8015c76:	4b32      	ldr	r3, [pc, #200]	; (8015d40 <USBD_CDC_DeInit+0xfc>)
 8015c78:	781b      	ldrb	r3, [r3, #0]
 8015c7a:	4619      	mov	r1, r3
 8015c7c:	6878      	ldr	r0, [r7, #4]
 8015c7e:	f005 fa68 	bl	801b152 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8015c82:	4b2f      	ldr	r3, [pc, #188]	; (8015d40 <USBD_CDC_DeInit+0xfc>)
 8015c84:	781b      	ldrb	r3, [r3, #0]
 8015c86:	f003 020f 	and.w	r2, r3, #15
 8015c8a:	6879      	ldr	r1, [r7, #4]
 8015c8c:	4613      	mov	r3, r2
 8015c8e:	009b      	lsls	r3, r3, #2
 8015c90:	4413      	add	r3, r2
 8015c92:	009b      	lsls	r3, r3, #2
 8015c94:	440b      	add	r3, r1
 8015c96:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015c9a:	2200      	movs	r2, #0
 8015c9c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8015c9e:	4b29      	ldr	r3, [pc, #164]	; (8015d44 <USBD_CDC_DeInit+0x100>)
 8015ca0:	781b      	ldrb	r3, [r3, #0]
 8015ca2:	4619      	mov	r1, r3
 8015ca4:	6878      	ldr	r0, [r7, #4]
 8015ca6:	f005 fa54 	bl	801b152 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8015caa:	4b26      	ldr	r3, [pc, #152]	; (8015d44 <USBD_CDC_DeInit+0x100>)
 8015cac:	781b      	ldrb	r3, [r3, #0]
 8015cae:	f003 020f 	and.w	r2, r3, #15
 8015cb2:	6879      	ldr	r1, [r7, #4]
 8015cb4:	4613      	mov	r3, r2
 8015cb6:	009b      	lsls	r3, r3, #2
 8015cb8:	4413      	add	r3, r2
 8015cba:	009b      	lsls	r3, r3, #2
 8015cbc:	440b      	add	r3, r1
 8015cbe:	3324      	adds	r3, #36	; 0x24
 8015cc0:	2200      	movs	r2, #0
 8015cc2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8015cc4:	4b1f      	ldr	r3, [pc, #124]	; (8015d44 <USBD_CDC_DeInit+0x100>)
 8015cc6:	781b      	ldrb	r3, [r3, #0]
 8015cc8:	f003 020f 	and.w	r2, r3, #15
 8015ccc:	6879      	ldr	r1, [r7, #4]
 8015cce:	4613      	mov	r3, r2
 8015cd0:	009b      	lsls	r3, r3, #2
 8015cd2:	4413      	add	r3, r2
 8015cd4:	009b      	lsls	r3, r3, #2
 8015cd6:	440b      	add	r3, r1
 8015cd8:	3326      	adds	r3, #38	; 0x26
 8015cda:	2200      	movs	r2, #0
 8015cdc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	32b0      	adds	r2, #176	; 0xb0
 8015ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d01f      	beq.n	8015d30 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015cf6:	687a      	ldr	r2, [r7, #4]
 8015cf8:	33b0      	adds	r3, #176	; 0xb0
 8015cfa:	009b      	lsls	r3, r3, #2
 8015cfc:	4413      	add	r3, r2
 8015cfe:	685b      	ldr	r3, [r3, #4]
 8015d00:	685b      	ldr	r3, [r3, #4]
 8015d02:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	32b0      	adds	r2, #176	; 0xb0
 8015d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d12:	4618      	mov	r0, r3
 8015d14:	f005 fb28 	bl	801b368 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	32b0      	adds	r2, #176	; 0xb0
 8015d22:	2100      	movs	r1, #0
 8015d24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	2200      	movs	r2, #0
 8015d2c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8015d30:	2300      	movs	r3, #0
}
 8015d32:	4618      	mov	r0, r3
 8015d34:	3708      	adds	r7, #8
 8015d36:	46bd      	mov	sp, r7
 8015d38:	bd80      	pop	{r7, pc}
 8015d3a:	bf00      	nop
 8015d3c:	24000097 	.word	0x24000097
 8015d40:	24000098 	.word	0x24000098
 8015d44:	24000099 	.word	0x24000099

08015d48 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8015d48:	b580      	push	{r7, lr}
 8015d4a:	b086      	sub	sp, #24
 8015d4c:	af00      	add	r7, sp, #0
 8015d4e:	6078      	str	r0, [r7, #4]
 8015d50:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	32b0      	adds	r2, #176	; 0xb0
 8015d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d60:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8015d62:	2300      	movs	r3, #0
 8015d64:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8015d66:	2300      	movs	r3, #0
 8015d68:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8015d6a:	2300      	movs	r3, #0
 8015d6c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8015d6e:	693b      	ldr	r3, [r7, #16]
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d101      	bne.n	8015d78 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8015d74:	2303      	movs	r3, #3
 8015d76:	e0bf      	b.n	8015ef8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015d78:	683b      	ldr	r3, [r7, #0]
 8015d7a:	781b      	ldrb	r3, [r3, #0]
 8015d7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	d050      	beq.n	8015e26 <USBD_CDC_Setup+0xde>
 8015d84:	2b20      	cmp	r3, #32
 8015d86:	f040 80af 	bne.w	8015ee8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8015d8a:	683b      	ldr	r3, [r7, #0]
 8015d8c:	88db      	ldrh	r3, [r3, #6]
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d03a      	beq.n	8015e08 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8015d92:	683b      	ldr	r3, [r7, #0]
 8015d94:	781b      	ldrb	r3, [r3, #0]
 8015d96:	b25b      	sxtb	r3, r3
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	da1b      	bge.n	8015dd4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015da2:	687a      	ldr	r2, [r7, #4]
 8015da4:	33b0      	adds	r3, #176	; 0xb0
 8015da6:	009b      	lsls	r3, r3, #2
 8015da8:	4413      	add	r3, r2
 8015daa:	685b      	ldr	r3, [r3, #4]
 8015dac:	689b      	ldr	r3, [r3, #8]
 8015dae:	683a      	ldr	r2, [r7, #0]
 8015db0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8015db2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015db4:	683a      	ldr	r2, [r7, #0]
 8015db6:	88d2      	ldrh	r2, [r2, #6]
 8015db8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8015dba:	683b      	ldr	r3, [r7, #0]
 8015dbc:	88db      	ldrh	r3, [r3, #6]
 8015dbe:	2b07      	cmp	r3, #7
 8015dc0:	bf28      	it	cs
 8015dc2:	2307      	movcs	r3, #7
 8015dc4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8015dc6:	693b      	ldr	r3, [r7, #16]
 8015dc8:	89fa      	ldrh	r2, [r7, #14]
 8015dca:	4619      	mov	r1, r3
 8015dcc:	6878      	ldr	r0, [r7, #4]
 8015dce:	f001 fd89 	bl	80178e4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8015dd2:	e090      	b.n	8015ef6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8015dd4:	683b      	ldr	r3, [r7, #0]
 8015dd6:	785a      	ldrb	r2, [r3, #1]
 8015dd8:	693b      	ldr	r3, [r7, #16]
 8015dda:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8015dde:	683b      	ldr	r3, [r7, #0]
 8015de0:	88db      	ldrh	r3, [r3, #6]
 8015de2:	2b3f      	cmp	r3, #63	; 0x3f
 8015de4:	d803      	bhi.n	8015dee <USBD_CDC_Setup+0xa6>
 8015de6:	683b      	ldr	r3, [r7, #0]
 8015de8:	88db      	ldrh	r3, [r3, #6]
 8015dea:	b2da      	uxtb	r2, r3
 8015dec:	e000      	b.n	8015df0 <USBD_CDC_Setup+0xa8>
 8015dee:	2240      	movs	r2, #64	; 0x40
 8015df0:	693b      	ldr	r3, [r7, #16]
 8015df2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8015df6:	6939      	ldr	r1, [r7, #16]
 8015df8:	693b      	ldr	r3, [r7, #16]
 8015dfa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8015dfe:	461a      	mov	r2, r3
 8015e00:	6878      	ldr	r0, [r7, #4]
 8015e02:	f001 fd9b 	bl	801793c <USBD_CtlPrepareRx>
      break;
 8015e06:	e076      	b.n	8015ef6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015e0e:	687a      	ldr	r2, [r7, #4]
 8015e10:	33b0      	adds	r3, #176	; 0xb0
 8015e12:	009b      	lsls	r3, r3, #2
 8015e14:	4413      	add	r3, r2
 8015e16:	685b      	ldr	r3, [r3, #4]
 8015e18:	689b      	ldr	r3, [r3, #8]
 8015e1a:	683a      	ldr	r2, [r7, #0]
 8015e1c:	7850      	ldrb	r0, [r2, #1]
 8015e1e:	2200      	movs	r2, #0
 8015e20:	6839      	ldr	r1, [r7, #0]
 8015e22:	4798      	blx	r3
      break;
 8015e24:	e067      	b.n	8015ef6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015e26:	683b      	ldr	r3, [r7, #0]
 8015e28:	785b      	ldrb	r3, [r3, #1]
 8015e2a:	2b0b      	cmp	r3, #11
 8015e2c:	d851      	bhi.n	8015ed2 <USBD_CDC_Setup+0x18a>
 8015e2e:	a201      	add	r2, pc, #4	; (adr r2, 8015e34 <USBD_CDC_Setup+0xec>)
 8015e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e34:	08015e65 	.word	0x08015e65
 8015e38:	08015ee1 	.word	0x08015ee1
 8015e3c:	08015ed3 	.word	0x08015ed3
 8015e40:	08015ed3 	.word	0x08015ed3
 8015e44:	08015ed3 	.word	0x08015ed3
 8015e48:	08015ed3 	.word	0x08015ed3
 8015e4c:	08015ed3 	.word	0x08015ed3
 8015e50:	08015ed3 	.word	0x08015ed3
 8015e54:	08015ed3 	.word	0x08015ed3
 8015e58:	08015ed3 	.word	0x08015ed3
 8015e5c:	08015e8f 	.word	0x08015e8f
 8015e60:	08015eb9 	.word	0x08015eb9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015e6a:	b2db      	uxtb	r3, r3
 8015e6c:	2b03      	cmp	r3, #3
 8015e6e:	d107      	bne.n	8015e80 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015e70:	f107 030a 	add.w	r3, r7, #10
 8015e74:	2202      	movs	r2, #2
 8015e76:	4619      	mov	r1, r3
 8015e78:	6878      	ldr	r0, [r7, #4]
 8015e7a:	f001 fd33 	bl	80178e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015e7e:	e032      	b.n	8015ee6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015e80:	6839      	ldr	r1, [r7, #0]
 8015e82:	6878      	ldr	r0, [r7, #4]
 8015e84:	f001 fcbd 	bl	8017802 <USBD_CtlError>
            ret = USBD_FAIL;
 8015e88:	2303      	movs	r3, #3
 8015e8a:	75fb      	strb	r3, [r7, #23]
          break;
 8015e8c:	e02b      	b.n	8015ee6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015e94:	b2db      	uxtb	r3, r3
 8015e96:	2b03      	cmp	r3, #3
 8015e98:	d107      	bne.n	8015eaa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8015e9a:	f107 030d 	add.w	r3, r7, #13
 8015e9e:	2201      	movs	r2, #1
 8015ea0:	4619      	mov	r1, r3
 8015ea2:	6878      	ldr	r0, [r7, #4]
 8015ea4:	f001 fd1e 	bl	80178e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015ea8:	e01d      	b.n	8015ee6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015eaa:	6839      	ldr	r1, [r7, #0]
 8015eac:	6878      	ldr	r0, [r7, #4]
 8015eae:	f001 fca8 	bl	8017802 <USBD_CtlError>
            ret = USBD_FAIL;
 8015eb2:	2303      	movs	r3, #3
 8015eb4:	75fb      	strb	r3, [r7, #23]
          break;
 8015eb6:	e016      	b.n	8015ee6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ebe:	b2db      	uxtb	r3, r3
 8015ec0:	2b03      	cmp	r3, #3
 8015ec2:	d00f      	beq.n	8015ee4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8015ec4:	6839      	ldr	r1, [r7, #0]
 8015ec6:	6878      	ldr	r0, [r7, #4]
 8015ec8:	f001 fc9b 	bl	8017802 <USBD_CtlError>
            ret = USBD_FAIL;
 8015ecc:	2303      	movs	r3, #3
 8015ece:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8015ed0:	e008      	b.n	8015ee4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8015ed2:	6839      	ldr	r1, [r7, #0]
 8015ed4:	6878      	ldr	r0, [r7, #4]
 8015ed6:	f001 fc94 	bl	8017802 <USBD_CtlError>
          ret = USBD_FAIL;
 8015eda:	2303      	movs	r3, #3
 8015edc:	75fb      	strb	r3, [r7, #23]
          break;
 8015ede:	e002      	b.n	8015ee6 <USBD_CDC_Setup+0x19e>
          break;
 8015ee0:	bf00      	nop
 8015ee2:	e008      	b.n	8015ef6 <USBD_CDC_Setup+0x1ae>
          break;
 8015ee4:	bf00      	nop
      }
      break;
 8015ee6:	e006      	b.n	8015ef6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8015ee8:	6839      	ldr	r1, [r7, #0]
 8015eea:	6878      	ldr	r0, [r7, #4]
 8015eec:	f001 fc89 	bl	8017802 <USBD_CtlError>
      ret = USBD_FAIL;
 8015ef0:	2303      	movs	r3, #3
 8015ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8015ef4:	bf00      	nop
  }

  return (uint8_t)ret;
 8015ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8015ef8:	4618      	mov	r0, r3
 8015efa:	3718      	adds	r7, #24
 8015efc:	46bd      	mov	sp, r7
 8015efe:	bd80      	pop	{r7, pc}

08015f00 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015f00:	b580      	push	{r7, lr}
 8015f02:	b084      	sub	sp, #16
 8015f04:	af00      	add	r7, sp, #0
 8015f06:	6078      	str	r0, [r7, #4]
 8015f08:	460b      	mov	r3, r1
 8015f0a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015f12:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	32b0      	adds	r2, #176	; 0xb0
 8015f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d101      	bne.n	8015f2a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8015f26:	2303      	movs	r3, #3
 8015f28:	e065      	b.n	8015ff6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	32b0      	adds	r2, #176	; 0xb0
 8015f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f38:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015f3a:	78fb      	ldrb	r3, [r7, #3]
 8015f3c:	f003 020f 	and.w	r2, r3, #15
 8015f40:	6879      	ldr	r1, [r7, #4]
 8015f42:	4613      	mov	r3, r2
 8015f44:	009b      	lsls	r3, r3, #2
 8015f46:	4413      	add	r3, r2
 8015f48:	009b      	lsls	r3, r3, #2
 8015f4a:	440b      	add	r3, r1
 8015f4c:	3318      	adds	r3, #24
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	d02f      	beq.n	8015fb4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8015f54:	78fb      	ldrb	r3, [r7, #3]
 8015f56:	f003 020f 	and.w	r2, r3, #15
 8015f5a:	6879      	ldr	r1, [r7, #4]
 8015f5c:	4613      	mov	r3, r2
 8015f5e:	009b      	lsls	r3, r3, #2
 8015f60:	4413      	add	r3, r2
 8015f62:	009b      	lsls	r3, r3, #2
 8015f64:	440b      	add	r3, r1
 8015f66:	3318      	adds	r3, #24
 8015f68:	681a      	ldr	r2, [r3, #0]
 8015f6a:	78fb      	ldrb	r3, [r7, #3]
 8015f6c:	f003 010f 	and.w	r1, r3, #15
 8015f70:	68f8      	ldr	r0, [r7, #12]
 8015f72:	460b      	mov	r3, r1
 8015f74:	00db      	lsls	r3, r3, #3
 8015f76:	440b      	add	r3, r1
 8015f78:	009b      	lsls	r3, r3, #2
 8015f7a:	4403      	add	r3, r0
 8015f7c:	3344      	adds	r3, #68	; 0x44
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	fbb2 f1f3 	udiv	r1, r2, r3
 8015f84:	fb01 f303 	mul.w	r3, r1, r3
 8015f88:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d112      	bne.n	8015fb4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8015f8e:	78fb      	ldrb	r3, [r7, #3]
 8015f90:	f003 020f 	and.w	r2, r3, #15
 8015f94:	6879      	ldr	r1, [r7, #4]
 8015f96:	4613      	mov	r3, r2
 8015f98:	009b      	lsls	r3, r3, #2
 8015f9a:	4413      	add	r3, r2
 8015f9c:	009b      	lsls	r3, r3, #2
 8015f9e:	440b      	add	r3, r1
 8015fa0:	3318      	adds	r3, #24
 8015fa2:	2200      	movs	r2, #0
 8015fa4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8015fa6:	78f9      	ldrb	r1, [r7, #3]
 8015fa8:	2300      	movs	r3, #0
 8015faa:	2200      	movs	r2, #0
 8015fac:	6878      	ldr	r0, [r7, #4]
 8015fae:	f005 f978 	bl	801b2a2 <USBD_LL_Transmit>
 8015fb2:	e01f      	b.n	8015ff4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8015fb4:	68bb      	ldr	r3, [r7, #8]
 8015fb6:	2200      	movs	r2, #0
 8015fb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015fc2:	687a      	ldr	r2, [r7, #4]
 8015fc4:	33b0      	adds	r3, #176	; 0xb0
 8015fc6:	009b      	lsls	r3, r3, #2
 8015fc8:	4413      	add	r3, r2
 8015fca:	685b      	ldr	r3, [r3, #4]
 8015fcc:	691b      	ldr	r3, [r3, #16]
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	d010      	beq.n	8015ff4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015fd8:	687a      	ldr	r2, [r7, #4]
 8015fda:	33b0      	adds	r3, #176	; 0xb0
 8015fdc:	009b      	lsls	r3, r3, #2
 8015fde:	4413      	add	r3, r2
 8015fe0:	685b      	ldr	r3, [r3, #4]
 8015fe2:	691b      	ldr	r3, [r3, #16]
 8015fe4:	68ba      	ldr	r2, [r7, #8]
 8015fe6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8015fea:	68ba      	ldr	r2, [r7, #8]
 8015fec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8015ff0:	78fa      	ldrb	r2, [r7, #3]
 8015ff2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8015ff4:	2300      	movs	r3, #0
}
 8015ff6:	4618      	mov	r0, r3
 8015ff8:	3710      	adds	r7, #16
 8015ffa:	46bd      	mov	sp, r7
 8015ffc:	bd80      	pop	{r7, pc}

08015ffe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015ffe:	b580      	push	{r7, lr}
 8016000:	b084      	sub	sp, #16
 8016002:	af00      	add	r7, sp, #0
 8016004:	6078      	str	r0, [r7, #4]
 8016006:	460b      	mov	r3, r1
 8016008:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	32b0      	adds	r2, #176	; 0xb0
 8016014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016018:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	32b0      	adds	r2, #176	; 0xb0
 8016024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016028:	2b00      	cmp	r3, #0
 801602a:	d101      	bne.n	8016030 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 801602c:	2303      	movs	r3, #3
 801602e:	e01a      	b.n	8016066 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8016030:	78fb      	ldrb	r3, [r7, #3]
 8016032:	4619      	mov	r1, r3
 8016034:	6878      	ldr	r0, [r7, #4]
 8016036:	f005 f976 	bl	801b326 <USBD_LL_GetRxDataSize>
 801603a:	4602      	mov	r2, r0
 801603c:	68fb      	ldr	r3, [r7, #12]
 801603e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8016048:	687a      	ldr	r2, [r7, #4]
 801604a:	33b0      	adds	r3, #176	; 0xb0
 801604c:	009b      	lsls	r3, r3, #2
 801604e:	4413      	add	r3, r2
 8016050:	685b      	ldr	r3, [r3, #4]
 8016052:	68db      	ldr	r3, [r3, #12]
 8016054:	68fa      	ldr	r2, [r7, #12]
 8016056:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801605a:	68fa      	ldr	r2, [r7, #12]
 801605c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8016060:	4611      	mov	r1, r2
 8016062:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8016064:	2300      	movs	r3, #0
}
 8016066:	4618      	mov	r0, r3
 8016068:	3710      	adds	r7, #16
 801606a:	46bd      	mov	sp, r7
 801606c:	bd80      	pop	{r7, pc}

0801606e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801606e:	b580      	push	{r7, lr}
 8016070:	b084      	sub	sp, #16
 8016072:	af00      	add	r7, sp, #0
 8016074:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	32b0      	adds	r2, #176	; 0xb0
 8016080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016084:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	2b00      	cmp	r3, #0
 801608a:	d101      	bne.n	8016090 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801608c:	2303      	movs	r3, #3
 801608e:	e025      	b.n	80160dc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8016096:	687a      	ldr	r2, [r7, #4]
 8016098:	33b0      	adds	r3, #176	; 0xb0
 801609a:	009b      	lsls	r3, r3, #2
 801609c:	4413      	add	r3, r2
 801609e:	685b      	ldr	r3, [r3, #4]
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	d01a      	beq.n	80160da <USBD_CDC_EP0_RxReady+0x6c>
 80160a4:	68fb      	ldr	r3, [r7, #12]
 80160a6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80160aa:	2bff      	cmp	r3, #255	; 0xff
 80160ac:	d015      	beq.n	80160da <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80160b4:	687a      	ldr	r2, [r7, #4]
 80160b6:	33b0      	adds	r3, #176	; 0xb0
 80160b8:	009b      	lsls	r3, r3, #2
 80160ba:	4413      	add	r3, r2
 80160bc:	685b      	ldr	r3, [r3, #4]
 80160be:	689b      	ldr	r3, [r3, #8]
 80160c0:	68fa      	ldr	r2, [r7, #12]
 80160c2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80160c6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80160c8:	68fa      	ldr	r2, [r7, #12]
 80160ca:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80160ce:	b292      	uxth	r2, r2
 80160d0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	22ff      	movs	r2, #255	; 0xff
 80160d6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80160da:	2300      	movs	r3, #0
}
 80160dc:	4618      	mov	r0, r3
 80160de:	3710      	adds	r7, #16
 80160e0:	46bd      	mov	sp, r7
 80160e2:	bd80      	pop	{r7, pc}

080160e4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80160e4:	b580      	push	{r7, lr}
 80160e6:	b086      	sub	sp, #24
 80160e8:	af00      	add	r7, sp, #0
 80160ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80160ec:	2182      	movs	r1, #130	; 0x82
 80160ee:	4818      	ldr	r0, [pc, #96]	; (8016150 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80160f0:	f000 fd4f 	bl	8016b92 <USBD_GetEpDesc>
 80160f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80160f6:	2101      	movs	r1, #1
 80160f8:	4815      	ldr	r0, [pc, #84]	; (8016150 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80160fa:	f000 fd4a 	bl	8016b92 <USBD_GetEpDesc>
 80160fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8016100:	2181      	movs	r1, #129	; 0x81
 8016102:	4813      	ldr	r0, [pc, #76]	; (8016150 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8016104:	f000 fd45 	bl	8016b92 <USBD_GetEpDesc>
 8016108:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801610a:	697b      	ldr	r3, [r7, #20]
 801610c:	2b00      	cmp	r3, #0
 801610e:	d002      	beq.n	8016116 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8016110:	697b      	ldr	r3, [r7, #20]
 8016112:	2210      	movs	r2, #16
 8016114:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8016116:	693b      	ldr	r3, [r7, #16]
 8016118:	2b00      	cmp	r3, #0
 801611a:	d006      	beq.n	801612a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801611c:	693b      	ldr	r3, [r7, #16]
 801611e:	2200      	movs	r2, #0
 8016120:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8016124:	711a      	strb	r2, [r3, #4]
 8016126:	2200      	movs	r2, #0
 8016128:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	2b00      	cmp	r3, #0
 801612e:	d006      	beq.n	801613e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8016130:	68fb      	ldr	r3, [r7, #12]
 8016132:	2200      	movs	r2, #0
 8016134:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8016138:	711a      	strb	r2, [r3, #4]
 801613a:	2200      	movs	r2, #0
 801613c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	2243      	movs	r2, #67	; 0x43
 8016142:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8016144:	4b02      	ldr	r3, [pc, #8]	; (8016150 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8016146:	4618      	mov	r0, r3
 8016148:	3718      	adds	r7, #24
 801614a:	46bd      	mov	sp, r7
 801614c:	bd80      	pop	{r7, pc}
 801614e:	bf00      	nop
 8016150:	24000054 	.word	0x24000054

08016154 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8016154:	b580      	push	{r7, lr}
 8016156:	b086      	sub	sp, #24
 8016158:	af00      	add	r7, sp, #0
 801615a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801615c:	2182      	movs	r1, #130	; 0x82
 801615e:	4818      	ldr	r0, [pc, #96]	; (80161c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8016160:	f000 fd17 	bl	8016b92 <USBD_GetEpDesc>
 8016164:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8016166:	2101      	movs	r1, #1
 8016168:	4815      	ldr	r0, [pc, #84]	; (80161c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801616a:	f000 fd12 	bl	8016b92 <USBD_GetEpDesc>
 801616e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8016170:	2181      	movs	r1, #129	; 0x81
 8016172:	4813      	ldr	r0, [pc, #76]	; (80161c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8016174:	f000 fd0d 	bl	8016b92 <USBD_GetEpDesc>
 8016178:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801617a:	697b      	ldr	r3, [r7, #20]
 801617c:	2b00      	cmp	r3, #0
 801617e:	d002      	beq.n	8016186 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8016180:	697b      	ldr	r3, [r7, #20]
 8016182:	2210      	movs	r2, #16
 8016184:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8016186:	693b      	ldr	r3, [r7, #16]
 8016188:	2b00      	cmp	r3, #0
 801618a:	d006      	beq.n	801619a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801618c:	693b      	ldr	r3, [r7, #16]
 801618e:	2200      	movs	r2, #0
 8016190:	711a      	strb	r2, [r3, #4]
 8016192:	2200      	movs	r2, #0
 8016194:	f042 0202 	orr.w	r2, r2, #2
 8016198:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801619a:	68fb      	ldr	r3, [r7, #12]
 801619c:	2b00      	cmp	r3, #0
 801619e:	d006      	beq.n	80161ae <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	2200      	movs	r2, #0
 80161a4:	711a      	strb	r2, [r3, #4]
 80161a6:	2200      	movs	r2, #0
 80161a8:	f042 0202 	orr.w	r2, r2, #2
 80161ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	2243      	movs	r2, #67	; 0x43
 80161b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80161b4:	4b02      	ldr	r3, [pc, #8]	; (80161c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80161b6:	4618      	mov	r0, r3
 80161b8:	3718      	adds	r7, #24
 80161ba:	46bd      	mov	sp, r7
 80161bc:	bd80      	pop	{r7, pc}
 80161be:	bf00      	nop
 80161c0:	24000054 	.word	0x24000054

080161c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80161c4:	b580      	push	{r7, lr}
 80161c6:	b086      	sub	sp, #24
 80161c8:	af00      	add	r7, sp, #0
 80161ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80161cc:	2182      	movs	r1, #130	; 0x82
 80161ce:	4818      	ldr	r0, [pc, #96]	; (8016230 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80161d0:	f000 fcdf 	bl	8016b92 <USBD_GetEpDesc>
 80161d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80161d6:	2101      	movs	r1, #1
 80161d8:	4815      	ldr	r0, [pc, #84]	; (8016230 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80161da:	f000 fcda 	bl	8016b92 <USBD_GetEpDesc>
 80161de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80161e0:	2181      	movs	r1, #129	; 0x81
 80161e2:	4813      	ldr	r0, [pc, #76]	; (8016230 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80161e4:	f000 fcd5 	bl	8016b92 <USBD_GetEpDesc>
 80161e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80161ea:	697b      	ldr	r3, [r7, #20]
 80161ec:	2b00      	cmp	r3, #0
 80161ee:	d002      	beq.n	80161f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80161f0:	697b      	ldr	r3, [r7, #20]
 80161f2:	2210      	movs	r2, #16
 80161f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80161f6:	693b      	ldr	r3, [r7, #16]
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d006      	beq.n	801620a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80161fc:	693b      	ldr	r3, [r7, #16]
 80161fe:	2200      	movs	r2, #0
 8016200:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8016204:	711a      	strb	r2, [r3, #4]
 8016206:	2200      	movs	r2, #0
 8016208:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801620a:	68fb      	ldr	r3, [r7, #12]
 801620c:	2b00      	cmp	r3, #0
 801620e:	d006      	beq.n	801621e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	2200      	movs	r2, #0
 8016214:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8016218:	711a      	strb	r2, [r3, #4]
 801621a:	2200      	movs	r2, #0
 801621c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	2243      	movs	r2, #67	; 0x43
 8016222:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8016224:	4b02      	ldr	r3, [pc, #8]	; (8016230 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8016226:	4618      	mov	r0, r3
 8016228:	3718      	adds	r7, #24
 801622a:	46bd      	mov	sp, r7
 801622c:	bd80      	pop	{r7, pc}
 801622e:	bf00      	nop
 8016230:	24000054 	.word	0x24000054

08016234 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8016234:	b480      	push	{r7}
 8016236:	b083      	sub	sp, #12
 8016238:	af00      	add	r7, sp, #0
 801623a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	220a      	movs	r2, #10
 8016240:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8016242:	4b03      	ldr	r3, [pc, #12]	; (8016250 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8016244:	4618      	mov	r0, r3
 8016246:	370c      	adds	r7, #12
 8016248:	46bd      	mov	sp, r7
 801624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801624e:	4770      	bx	lr
 8016250:	24000010 	.word	0x24000010

08016254 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8016254:	b480      	push	{r7}
 8016256:	b083      	sub	sp, #12
 8016258:	af00      	add	r7, sp, #0
 801625a:	6078      	str	r0, [r7, #4]
 801625c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801625e:	683b      	ldr	r3, [r7, #0]
 8016260:	2b00      	cmp	r3, #0
 8016262:	d101      	bne.n	8016268 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8016264:	2303      	movs	r3, #3
 8016266:	e009      	b.n	801627c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801626e:	687a      	ldr	r2, [r7, #4]
 8016270:	33b0      	adds	r3, #176	; 0xb0
 8016272:	009b      	lsls	r3, r3, #2
 8016274:	4413      	add	r3, r2
 8016276:	683a      	ldr	r2, [r7, #0]
 8016278:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801627a:	2300      	movs	r3, #0
}
 801627c:	4618      	mov	r0, r3
 801627e:	370c      	adds	r7, #12
 8016280:	46bd      	mov	sp, r7
 8016282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016286:	4770      	bx	lr

08016288 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8016288:	b480      	push	{r7}
 801628a:	b087      	sub	sp, #28
 801628c:	af00      	add	r7, sp, #0
 801628e:	60f8      	str	r0, [r7, #12]
 8016290:	60b9      	str	r1, [r7, #8]
 8016292:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016294:	68fb      	ldr	r3, [r7, #12]
 8016296:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801629a:	68fb      	ldr	r3, [r7, #12]
 801629c:	32b0      	adds	r2, #176	; 0xb0
 801629e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80162a2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80162a4:	697b      	ldr	r3, [r7, #20]
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d101      	bne.n	80162ae <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80162aa:	2303      	movs	r3, #3
 80162ac:	e008      	b.n	80162c0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80162ae:	697b      	ldr	r3, [r7, #20]
 80162b0:	68ba      	ldr	r2, [r7, #8]
 80162b2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80162b6:	697b      	ldr	r3, [r7, #20]
 80162b8:	687a      	ldr	r2, [r7, #4]
 80162ba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80162be:	2300      	movs	r3, #0
}
 80162c0:	4618      	mov	r0, r3
 80162c2:	371c      	adds	r7, #28
 80162c4:	46bd      	mov	sp, r7
 80162c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ca:	4770      	bx	lr

080162cc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80162cc:	b480      	push	{r7}
 80162ce:	b085      	sub	sp, #20
 80162d0:	af00      	add	r7, sp, #0
 80162d2:	6078      	str	r0, [r7, #4]
 80162d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	32b0      	adds	r2, #176	; 0xb0
 80162e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80162e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80162e6:	68fb      	ldr	r3, [r7, #12]
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d101      	bne.n	80162f0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80162ec:	2303      	movs	r3, #3
 80162ee:	e004      	b.n	80162fa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80162f0:	68fb      	ldr	r3, [r7, #12]
 80162f2:	683a      	ldr	r2, [r7, #0]
 80162f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80162f8:	2300      	movs	r3, #0
}
 80162fa:	4618      	mov	r0, r3
 80162fc:	3714      	adds	r7, #20
 80162fe:	46bd      	mov	sp, r7
 8016300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016304:	4770      	bx	lr
	...

08016308 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8016308:	b580      	push	{r7, lr}
 801630a:	b084      	sub	sp, #16
 801630c:	af00      	add	r7, sp, #0
 801630e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	32b0      	adds	r2, #176	; 0xb0
 801631a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801631e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8016320:	2301      	movs	r3, #1
 8016322:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8016324:	68bb      	ldr	r3, [r7, #8]
 8016326:	2b00      	cmp	r3, #0
 8016328:	d101      	bne.n	801632e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801632a:	2303      	movs	r3, #3
 801632c:	e025      	b.n	801637a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 801632e:	68bb      	ldr	r3, [r7, #8]
 8016330:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8016334:	2b00      	cmp	r3, #0
 8016336:	d11f      	bne.n	8016378 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8016338:	68bb      	ldr	r3, [r7, #8]
 801633a:	2201      	movs	r2, #1
 801633c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8016340:	4b10      	ldr	r3, [pc, #64]	; (8016384 <USBD_CDC_TransmitPacket+0x7c>)
 8016342:	781b      	ldrb	r3, [r3, #0]
 8016344:	f003 020f 	and.w	r2, r3, #15
 8016348:	68bb      	ldr	r3, [r7, #8]
 801634a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 801634e:	6878      	ldr	r0, [r7, #4]
 8016350:	4613      	mov	r3, r2
 8016352:	009b      	lsls	r3, r3, #2
 8016354:	4413      	add	r3, r2
 8016356:	009b      	lsls	r3, r3, #2
 8016358:	4403      	add	r3, r0
 801635a:	3318      	adds	r3, #24
 801635c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 801635e:	4b09      	ldr	r3, [pc, #36]	; (8016384 <USBD_CDC_TransmitPacket+0x7c>)
 8016360:	7819      	ldrb	r1, [r3, #0]
 8016362:	68bb      	ldr	r3, [r7, #8]
 8016364:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8016368:	68bb      	ldr	r3, [r7, #8]
 801636a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801636e:	6878      	ldr	r0, [r7, #4]
 8016370:	f004 ff97 	bl	801b2a2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8016374:	2300      	movs	r3, #0
 8016376:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8016378:	7bfb      	ldrb	r3, [r7, #15]
}
 801637a:	4618      	mov	r0, r3
 801637c:	3710      	adds	r7, #16
 801637e:	46bd      	mov	sp, r7
 8016380:	bd80      	pop	{r7, pc}
 8016382:	bf00      	nop
 8016384:	24000097 	.word	0x24000097

08016388 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8016388:	b580      	push	{r7, lr}
 801638a:	b084      	sub	sp, #16
 801638c:	af00      	add	r7, sp, #0
 801638e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	32b0      	adds	r2, #176	; 0xb0
 801639a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801639e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	32b0      	adds	r2, #176	; 0xb0
 80163aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d101      	bne.n	80163b6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80163b2:	2303      	movs	r3, #3
 80163b4:	e018      	b.n	80163e8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	7c1b      	ldrb	r3, [r3, #16]
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d10a      	bne.n	80163d4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80163be:	4b0c      	ldr	r3, [pc, #48]	; (80163f0 <USBD_CDC_ReceivePacket+0x68>)
 80163c0:	7819      	ldrb	r1, [r3, #0]
 80163c2:	68fb      	ldr	r3, [r7, #12]
 80163c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80163c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80163cc:	6878      	ldr	r0, [r7, #4]
 80163ce:	f004 ff89 	bl	801b2e4 <USBD_LL_PrepareReceive>
 80163d2:	e008      	b.n	80163e6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80163d4:	4b06      	ldr	r3, [pc, #24]	; (80163f0 <USBD_CDC_ReceivePacket+0x68>)
 80163d6:	7819      	ldrb	r1, [r3, #0]
 80163d8:	68fb      	ldr	r3, [r7, #12]
 80163da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80163de:	2340      	movs	r3, #64	; 0x40
 80163e0:	6878      	ldr	r0, [r7, #4]
 80163e2:	f004 ff7f 	bl	801b2e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80163e6:	2300      	movs	r3, #0
}
 80163e8:	4618      	mov	r0, r3
 80163ea:	3710      	adds	r7, #16
 80163ec:	46bd      	mov	sp, r7
 80163ee:	bd80      	pop	{r7, pc}
 80163f0:	24000098 	.word	0x24000098

080163f4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80163f4:	b580      	push	{r7, lr}
 80163f6:	b086      	sub	sp, #24
 80163f8:	af00      	add	r7, sp, #0
 80163fa:	60f8      	str	r0, [r7, #12]
 80163fc:	60b9      	str	r1, [r7, #8]
 80163fe:	4613      	mov	r3, r2
 8016400:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8016402:	68fb      	ldr	r3, [r7, #12]
 8016404:	2b00      	cmp	r3, #0
 8016406:	d101      	bne.n	801640c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8016408:	2303      	movs	r3, #3
 801640a:	e01f      	b.n	801644c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 801640c:	68fb      	ldr	r3, [r7, #12]
 801640e:	2200      	movs	r2, #0
 8016410:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8016414:	68fb      	ldr	r3, [r7, #12]
 8016416:	2200      	movs	r2, #0
 8016418:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801641c:	68fb      	ldr	r3, [r7, #12]
 801641e:	2200      	movs	r2, #0
 8016420:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8016424:	68bb      	ldr	r3, [r7, #8]
 8016426:	2b00      	cmp	r3, #0
 8016428:	d003      	beq.n	8016432 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	68ba      	ldr	r2, [r7, #8]
 801642e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	2201      	movs	r2, #1
 8016436:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	79fa      	ldrb	r2, [r7, #7]
 801643e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8016440:	68f8      	ldr	r0, [r7, #12]
 8016442:	f004 fdf3 	bl	801b02c <USBD_LL_Init>
 8016446:	4603      	mov	r3, r0
 8016448:	75fb      	strb	r3, [r7, #23]

  return ret;
 801644a:	7dfb      	ldrb	r3, [r7, #23]
}
 801644c:	4618      	mov	r0, r3
 801644e:	3718      	adds	r7, #24
 8016450:	46bd      	mov	sp, r7
 8016452:	bd80      	pop	{r7, pc}

08016454 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8016454:	b580      	push	{r7, lr}
 8016456:	b084      	sub	sp, #16
 8016458:	af00      	add	r7, sp, #0
 801645a:	6078      	str	r0, [r7, #4]
 801645c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801645e:	2300      	movs	r3, #0
 8016460:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8016462:	683b      	ldr	r3, [r7, #0]
 8016464:	2b00      	cmp	r3, #0
 8016466:	d101      	bne.n	801646c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8016468:	2303      	movs	r3, #3
 801646a:	e025      	b.n	80164b8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	683a      	ldr	r2, [r7, #0]
 8016470:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	32ae      	adds	r2, #174	; 0xae
 801647e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016484:	2b00      	cmp	r3, #0
 8016486:	d00f      	beq.n	80164a8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	32ae      	adds	r2, #174	; 0xae
 8016492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016498:	f107 020e 	add.w	r2, r7, #14
 801649c:	4610      	mov	r0, r2
 801649e:	4798      	blx	r3
 80164a0:	4602      	mov	r2, r0
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80164ae:	1c5a      	adds	r2, r3, #1
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80164b6:	2300      	movs	r3, #0
}
 80164b8:	4618      	mov	r0, r3
 80164ba:	3710      	adds	r7, #16
 80164bc:	46bd      	mov	sp, r7
 80164be:	bd80      	pop	{r7, pc}

080164c0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80164c0:	b580      	push	{r7, lr}
 80164c2:	b082      	sub	sp, #8
 80164c4:	af00      	add	r7, sp, #0
 80164c6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80164c8:	6878      	ldr	r0, [r7, #4]
 80164ca:	f004 fe01 	bl	801b0d0 <USBD_LL_Start>
 80164ce:	4603      	mov	r3, r0
}
 80164d0:	4618      	mov	r0, r3
 80164d2:	3708      	adds	r7, #8
 80164d4:	46bd      	mov	sp, r7
 80164d6:	bd80      	pop	{r7, pc}

080164d8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80164d8:	b480      	push	{r7}
 80164da:	b083      	sub	sp, #12
 80164dc:	af00      	add	r7, sp, #0
 80164de:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80164e0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80164e2:	4618      	mov	r0, r3
 80164e4:	370c      	adds	r7, #12
 80164e6:	46bd      	mov	sp, r7
 80164e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ec:	4770      	bx	lr

080164ee <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80164ee:	b580      	push	{r7, lr}
 80164f0:	b084      	sub	sp, #16
 80164f2:	af00      	add	r7, sp, #0
 80164f4:	6078      	str	r0, [r7, #4]
 80164f6:	460b      	mov	r3, r1
 80164f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80164fa:	2300      	movs	r3, #0
 80164fc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016504:	2b00      	cmp	r3, #0
 8016506:	d009      	beq.n	801651c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801650e:	681b      	ldr	r3, [r3, #0]
 8016510:	78fa      	ldrb	r2, [r7, #3]
 8016512:	4611      	mov	r1, r2
 8016514:	6878      	ldr	r0, [r7, #4]
 8016516:	4798      	blx	r3
 8016518:	4603      	mov	r3, r0
 801651a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801651c:	7bfb      	ldrb	r3, [r7, #15]
}
 801651e:	4618      	mov	r0, r3
 8016520:	3710      	adds	r7, #16
 8016522:	46bd      	mov	sp, r7
 8016524:	bd80      	pop	{r7, pc}

08016526 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016526:	b580      	push	{r7, lr}
 8016528:	b084      	sub	sp, #16
 801652a:	af00      	add	r7, sp, #0
 801652c:	6078      	str	r0, [r7, #4]
 801652e:	460b      	mov	r3, r1
 8016530:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8016532:	2300      	movs	r3, #0
 8016534:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801653c:	685b      	ldr	r3, [r3, #4]
 801653e:	78fa      	ldrb	r2, [r7, #3]
 8016540:	4611      	mov	r1, r2
 8016542:	6878      	ldr	r0, [r7, #4]
 8016544:	4798      	blx	r3
 8016546:	4603      	mov	r3, r0
 8016548:	2b00      	cmp	r3, #0
 801654a:	d001      	beq.n	8016550 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 801654c:	2303      	movs	r3, #3
 801654e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016550:	7bfb      	ldrb	r3, [r7, #15]
}
 8016552:	4618      	mov	r0, r3
 8016554:	3710      	adds	r7, #16
 8016556:	46bd      	mov	sp, r7
 8016558:	bd80      	pop	{r7, pc}

0801655a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801655a:	b580      	push	{r7, lr}
 801655c:	b084      	sub	sp, #16
 801655e:	af00      	add	r7, sp, #0
 8016560:	6078      	str	r0, [r7, #4]
 8016562:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801656a:	6839      	ldr	r1, [r7, #0]
 801656c:	4618      	mov	r0, r3
 801656e:	f001 f90e 	bl	801778e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	2201      	movs	r2, #1
 8016576:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8016580:	461a      	mov	r2, r3
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801658e:	f003 031f 	and.w	r3, r3, #31
 8016592:	2b02      	cmp	r3, #2
 8016594:	d01a      	beq.n	80165cc <USBD_LL_SetupStage+0x72>
 8016596:	2b02      	cmp	r3, #2
 8016598:	d822      	bhi.n	80165e0 <USBD_LL_SetupStage+0x86>
 801659a:	2b00      	cmp	r3, #0
 801659c:	d002      	beq.n	80165a4 <USBD_LL_SetupStage+0x4a>
 801659e:	2b01      	cmp	r3, #1
 80165a0:	d00a      	beq.n	80165b8 <USBD_LL_SetupStage+0x5e>
 80165a2:	e01d      	b.n	80165e0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80165aa:	4619      	mov	r1, r3
 80165ac:	6878      	ldr	r0, [r7, #4]
 80165ae:	f000 fb65 	bl	8016c7c <USBD_StdDevReq>
 80165b2:	4603      	mov	r3, r0
 80165b4:	73fb      	strb	r3, [r7, #15]
      break;
 80165b6:	e020      	b.n	80165fa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80165be:	4619      	mov	r1, r3
 80165c0:	6878      	ldr	r0, [r7, #4]
 80165c2:	f000 fbcd 	bl	8016d60 <USBD_StdItfReq>
 80165c6:	4603      	mov	r3, r0
 80165c8:	73fb      	strb	r3, [r7, #15]
      break;
 80165ca:	e016      	b.n	80165fa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80165d2:	4619      	mov	r1, r3
 80165d4:	6878      	ldr	r0, [r7, #4]
 80165d6:	f000 fc2f 	bl	8016e38 <USBD_StdEPReq>
 80165da:	4603      	mov	r3, r0
 80165dc:	73fb      	strb	r3, [r7, #15]
      break;
 80165de:	e00c      	b.n	80165fa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80165e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80165ea:	b2db      	uxtb	r3, r3
 80165ec:	4619      	mov	r1, r3
 80165ee:	6878      	ldr	r0, [r7, #4]
 80165f0:	f004 fdce 	bl	801b190 <USBD_LL_StallEP>
 80165f4:	4603      	mov	r3, r0
 80165f6:	73fb      	strb	r3, [r7, #15]
      break;
 80165f8:	bf00      	nop
  }

  return ret;
 80165fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80165fc:	4618      	mov	r0, r3
 80165fe:	3710      	adds	r7, #16
 8016600:	46bd      	mov	sp, r7
 8016602:	bd80      	pop	{r7, pc}

08016604 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8016604:	b580      	push	{r7, lr}
 8016606:	b086      	sub	sp, #24
 8016608:	af00      	add	r7, sp, #0
 801660a:	60f8      	str	r0, [r7, #12]
 801660c:	460b      	mov	r3, r1
 801660e:	607a      	str	r2, [r7, #4]
 8016610:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8016612:	2300      	movs	r3, #0
 8016614:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8016616:	7afb      	ldrb	r3, [r7, #11]
 8016618:	2b00      	cmp	r3, #0
 801661a:	d16e      	bne.n	80166fa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 801661c:	68fb      	ldr	r3, [r7, #12]
 801661e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8016622:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8016624:	68fb      	ldr	r3, [r7, #12]
 8016626:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801662a:	2b03      	cmp	r3, #3
 801662c:	f040 8098 	bne.w	8016760 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8016630:	693b      	ldr	r3, [r7, #16]
 8016632:	689a      	ldr	r2, [r3, #8]
 8016634:	693b      	ldr	r3, [r7, #16]
 8016636:	68db      	ldr	r3, [r3, #12]
 8016638:	429a      	cmp	r2, r3
 801663a:	d913      	bls.n	8016664 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 801663c:	693b      	ldr	r3, [r7, #16]
 801663e:	689a      	ldr	r2, [r3, #8]
 8016640:	693b      	ldr	r3, [r7, #16]
 8016642:	68db      	ldr	r3, [r3, #12]
 8016644:	1ad2      	subs	r2, r2, r3
 8016646:	693b      	ldr	r3, [r7, #16]
 8016648:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801664a:	693b      	ldr	r3, [r7, #16]
 801664c:	68da      	ldr	r2, [r3, #12]
 801664e:	693b      	ldr	r3, [r7, #16]
 8016650:	689b      	ldr	r3, [r3, #8]
 8016652:	4293      	cmp	r3, r2
 8016654:	bf28      	it	cs
 8016656:	4613      	movcs	r3, r2
 8016658:	461a      	mov	r2, r3
 801665a:	6879      	ldr	r1, [r7, #4]
 801665c:	68f8      	ldr	r0, [r7, #12]
 801665e:	f001 f98a 	bl	8017976 <USBD_CtlContinueRx>
 8016662:	e07d      	b.n	8016760 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8016664:	68fb      	ldr	r3, [r7, #12]
 8016666:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801666a:	f003 031f 	and.w	r3, r3, #31
 801666e:	2b02      	cmp	r3, #2
 8016670:	d014      	beq.n	801669c <USBD_LL_DataOutStage+0x98>
 8016672:	2b02      	cmp	r3, #2
 8016674:	d81d      	bhi.n	80166b2 <USBD_LL_DataOutStage+0xae>
 8016676:	2b00      	cmp	r3, #0
 8016678:	d002      	beq.n	8016680 <USBD_LL_DataOutStage+0x7c>
 801667a:	2b01      	cmp	r3, #1
 801667c:	d003      	beq.n	8016686 <USBD_LL_DataOutStage+0x82>
 801667e:	e018      	b.n	80166b2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8016680:	2300      	movs	r3, #0
 8016682:	75bb      	strb	r3, [r7, #22]
            break;
 8016684:	e018      	b.n	80166b8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8016686:	68fb      	ldr	r3, [r7, #12]
 8016688:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801668c:	b2db      	uxtb	r3, r3
 801668e:	4619      	mov	r1, r3
 8016690:	68f8      	ldr	r0, [r7, #12]
 8016692:	f000 fa64 	bl	8016b5e <USBD_CoreFindIF>
 8016696:	4603      	mov	r3, r0
 8016698:	75bb      	strb	r3, [r7, #22]
            break;
 801669a:	e00d      	b.n	80166b8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801669c:	68fb      	ldr	r3, [r7, #12]
 801669e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80166a2:	b2db      	uxtb	r3, r3
 80166a4:	4619      	mov	r1, r3
 80166a6:	68f8      	ldr	r0, [r7, #12]
 80166a8:	f000 fa66 	bl	8016b78 <USBD_CoreFindEP>
 80166ac:	4603      	mov	r3, r0
 80166ae:	75bb      	strb	r3, [r7, #22]
            break;
 80166b0:	e002      	b.n	80166b8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80166b2:	2300      	movs	r3, #0
 80166b4:	75bb      	strb	r3, [r7, #22]
            break;
 80166b6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80166b8:	7dbb      	ldrb	r3, [r7, #22]
 80166ba:	2b00      	cmp	r3, #0
 80166bc:	d119      	bne.n	80166f2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80166be:	68fb      	ldr	r3, [r7, #12]
 80166c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80166c4:	b2db      	uxtb	r3, r3
 80166c6:	2b03      	cmp	r3, #3
 80166c8:	d113      	bne.n	80166f2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80166ca:	7dba      	ldrb	r2, [r7, #22]
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	32ae      	adds	r2, #174	; 0xae
 80166d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80166d4:	691b      	ldr	r3, [r3, #16]
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d00b      	beq.n	80166f2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80166da:	7dba      	ldrb	r2, [r7, #22]
 80166dc:	68fb      	ldr	r3, [r7, #12]
 80166de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80166e2:	7dba      	ldrb	r2, [r7, #22]
 80166e4:	68fb      	ldr	r3, [r7, #12]
 80166e6:	32ae      	adds	r2, #174	; 0xae
 80166e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80166ec:	691b      	ldr	r3, [r3, #16]
 80166ee:	68f8      	ldr	r0, [r7, #12]
 80166f0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80166f2:	68f8      	ldr	r0, [r7, #12]
 80166f4:	f001 f950 	bl	8017998 <USBD_CtlSendStatus>
 80166f8:	e032      	b.n	8016760 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80166fa:	7afb      	ldrb	r3, [r7, #11]
 80166fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016700:	b2db      	uxtb	r3, r3
 8016702:	4619      	mov	r1, r3
 8016704:	68f8      	ldr	r0, [r7, #12]
 8016706:	f000 fa37 	bl	8016b78 <USBD_CoreFindEP>
 801670a:	4603      	mov	r3, r0
 801670c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801670e:	7dbb      	ldrb	r3, [r7, #22]
 8016710:	2bff      	cmp	r3, #255	; 0xff
 8016712:	d025      	beq.n	8016760 <USBD_LL_DataOutStage+0x15c>
 8016714:	7dbb      	ldrb	r3, [r7, #22]
 8016716:	2b00      	cmp	r3, #0
 8016718:	d122      	bne.n	8016760 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801671a:	68fb      	ldr	r3, [r7, #12]
 801671c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016720:	b2db      	uxtb	r3, r3
 8016722:	2b03      	cmp	r3, #3
 8016724:	d117      	bne.n	8016756 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8016726:	7dba      	ldrb	r2, [r7, #22]
 8016728:	68fb      	ldr	r3, [r7, #12]
 801672a:	32ae      	adds	r2, #174	; 0xae
 801672c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016730:	699b      	ldr	r3, [r3, #24]
 8016732:	2b00      	cmp	r3, #0
 8016734:	d00f      	beq.n	8016756 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8016736:	7dba      	ldrb	r2, [r7, #22]
 8016738:	68fb      	ldr	r3, [r7, #12]
 801673a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801673e:	7dba      	ldrb	r2, [r7, #22]
 8016740:	68fb      	ldr	r3, [r7, #12]
 8016742:	32ae      	adds	r2, #174	; 0xae
 8016744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016748:	699b      	ldr	r3, [r3, #24]
 801674a:	7afa      	ldrb	r2, [r7, #11]
 801674c:	4611      	mov	r1, r2
 801674e:	68f8      	ldr	r0, [r7, #12]
 8016750:	4798      	blx	r3
 8016752:	4603      	mov	r3, r0
 8016754:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8016756:	7dfb      	ldrb	r3, [r7, #23]
 8016758:	2b00      	cmp	r3, #0
 801675a:	d001      	beq.n	8016760 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801675c:	7dfb      	ldrb	r3, [r7, #23]
 801675e:	e000      	b.n	8016762 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8016760:	2300      	movs	r3, #0
}
 8016762:	4618      	mov	r0, r3
 8016764:	3718      	adds	r7, #24
 8016766:	46bd      	mov	sp, r7
 8016768:	bd80      	pop	{r7, pc}

0801676a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801676a:	b580      	push	{r7, lr}
 801676c:	b086      	sub	sp, #24
 801676e:	af00      	add	r7, sp, #0
 8016770:	60f8      	str	r0, [r7, #12]
 8016772:	460b      	mov	r3, r1
 8016774:	607a      	str	r2, [r7, #4]
 8016776:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8016778:	7afb      	ldrb	r3, [r7, #11]
 801677a:	2b00      	cmp	r3, #0
 801677c:	d16f      	bne.n	801685e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801677e:	68fb      	ldr	r3, [r7, #12]
 8016780:	3314      	adds	r3, #20
 8016782:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8016784:	68fb      	ldr	r3, [r7, #12]
 8016786:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801678a:	2b02      	cmp	r3, #2
 801678c:	d15a      	bne.n	8016844 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801678e:	693b      	ldr	r3, [r7, #16]
 8016790:	689a      	ldr	r2, [r3, #8]
 8016792:	693b      	ldr	r3, [r7, #16]
 8016794:	68db      	ldr	r3, [r3, #12]
 8016796:	429a      	cmp	r2, r3
 8016798:	d914      	bls.n	80167c4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801679a:	693b      	ldr	r3, [r7, #16]
 801679c:	689a      	ldr	r2, [r3, #8]
 801679e:	693b      	ldr	r3, [r7, #16]
 80167a0:	68db      	ldr	r3, [r3, #12]
 80167a2:	1ad2      	subs	r2, r2, r3
 80167a4:	693b      	ldr	r3, [r7, #16]
 80167a6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80167a8:	693b      	ldr	r3, [r7, #16]
 80167aa:	689b      	ldr	r3, [r3, #8]
 80167ac:	461a      	mov	r2, r3
 80167ae:	6879      	ldr	r1, [r7, #4]
 80167b0:	68f8      	ldr	r0, [r7, #12]
 80167b2:	f001 f8b2 	bl	801791a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80167b6:	2300      	movs	r3, #0
 80167b8:	2200      	movs	r2, #0
 80167ba:	2100      	movs	r1, #0
 80167bc:	68f8      	ldr	r0, [r7, #12]
 80167be:	f004 fd91 	bl	801b2e4 <USBD_LL_PrepareReceive>
 80167c2:	e03f      	b.n	8016844 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80167c4:	693b      	ldr	r3, [r7, #16]
 80167c6:	68da      	ldr	r2, [r3, #12]
 80167c8:	693b      	ldr	r3, [r7, #16]
 80167ca:	689b      	ldr	r3, [r3, #8]
 80167cc:	429a      	cmp	r2, r3
 80167ce:	d11c      	bne.n	801680a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80167d0:	693b      	ldr	r3, [r7, #16]
 80167d2:	685a      	ldr	r2, [r3, #4]
 80167d4:	693b      	ldr	r3, [r7, #16]
 80167d6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80167d8:	429a      	cmp	r2, r3
 80167da:	d316      	bcc.n	801680a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80167dc:	693b      	ldr	r3, [r7, #16]
 80167de:	685a      	ldr	r2, [r3, #4]
 80167e0:	68fb      	ldr	r3, [r7, #12]
 80167e2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80167e6:	429a      	cmp	r2, r3
 80167e8:	d20f      	bcs.n	801680a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80167ea:	2200      	movs	r2, #0
 80167ec:	2100      	movs	r1, #0
 80167ee:	68f8      	ldr	r0, [r7, #12]
 80167f0:	f001 f893 	bl	801791a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80167f4:	68fb      	ldr	r3, [r7, #12]
 80167f6:	2200      	movs	r2, #0
 80167f8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80167fc:	2300      	movs	r3, #0
 80167fe:	2200      	movs	r2, #0
 8016800:	2100      	movs	r1, #0
 8016802:	68f8      	ldr	r0, [r7, #12]
 8016804:	f004 fd6e 	bl	801b2e4 <USBD_LL_PrepareReceive>
 8016808:	e01c      	b.n	8016844 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801680a:	68fb      	ldr	r3, [r7, #12]
 801680c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016810:	b2db      	uxtb	r3, r3
 8016812:	2b03      	cmp	r3, #3
 8016814:	d10f      	bne.n	8016836 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8016816:	68fb      	ldr	r3, [r7, #12]
 8016818:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801681c:	68db      	ldr	r3, [r3, #12]
 801681e:	2b00      	cmp	r3, #0
 8016820:	d009      	beq.n	8016836 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8016822:	68fb      	ldr	r3, [r7, #12]
 8016824:	2200      	movs	r2, #0
 8016826:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801682a:	68fb      	ldr	r3, [r7, #12]
 801682c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016830:	68db      	ldr	r3, [r3, #12]
 8016832:	68f8      	ldr	r0, [r7, #12]
 8016834:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8016836:	2180      	movs	r1, #128	; 0x80
 8016838:	68f8      	ldr	r0, [r7, #12]
 801683a:	f004 fca9 	bl	801b190 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801683e:	68f8      	ldr	r0, [r7, #12]
 8016840:	f001 f8bd 	bl	80179be <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8016844:	68fb      	ldr	r3, [r7, #12]
 8016846:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801684a:	2b00      	cmp	r3, #0
 801684c:	d03a      	beq.n	80168c4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801684e:	68f8      	ldr	r0, [r7, #12]
 8016850:	f7ff fe42 	bl	80164d8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8016854:	68fb      	ldr	r3, [r7, #12]
 8016856:	2200      	movs	r2, #0
 8016858:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801685c:	e032      	b.n	80168c4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801685e:	7afb      	ldrb	r3, [r7, #11]
 8016860:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016864:	b2db      	uxtb	r3, r3
 8016866:	4619      	mov	r1, r3
 8016868:	68f8      	ldr	r0, [r7, #12]
 801686a:	f000 f985 	bl	8016b78 <USBD_CoreFindEP>
 801686e:	4603      	mov	r3, r0
 8016870:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016872:	7dfb      	ldrb	r3, [r7, #23]
 8016874:	2bff      	cmp	r3, #255	; 0xff
 8016876:	d025      	beq.n	80168c4 <USBD_LL_DataInStage+0x15a>
 8016878:	7dfb      	ldrb	r3, [r7, #23]
 801687a:	2b00      	cmp	r3, #0
 801687c:	d122      	bne.n	80168c4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801687e:	68fb      	ldr	r3, [r7, #12]
 8016880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016884:	b2db      	uxtb	r3, r3
 8016886:	2b03      	cmp	r3, #3
 8016888:	d11c      	bne.n	80168c4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801688a:	7dfa      	ldrb	r2, [r7, #23]
 801688c:	68fb      	ldr	r3, [r7, #12]
 801688e:	32ae      	adds	r2, #174	; 0xae
 8016890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016894:	695b      	ldr	r3, [r3, #20]
 8016896:	2b00      	cmp	r3, #0
 8016898:	d014      	beq.n	80168c4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801689a:	7dfa      	ldrb	r2, [r7, #23]
 801689c:	68fb      	ldr	r3, [r7, #12]
 801689e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80168a2:	7dfa      	ldrb	r2, [r7, #23]
 80168a4:	68fb      	ldr	r3, [r7, #12]
 80168a6:	32ae      	adds	r2, #174	; 0xae
 80168a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80168ac:	695b      	ldr	r3, [r3, #20]
 80168ae:	7afa      	ldrb	r2, [r7, #11]
 80168b0:	4611      	mov	r1, r2
 80168b2:	68f8      	ldr	r0, [r7, #12]
 80168b4:	4798      	blx	r3
 80168b6:	4603      	mov	r3, r0
 80168b8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80168ba:	7dbb      	ldrb	r3, [r7, #22]
 80168bc:	2b00      	cmp	r3, #0
 80168be:	d001      	beq.n	80168c4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80168c0:	7dbb      	ldrb	r3, [r7, #22]
 80168c2:	e000      	b.n	80168c6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80168c4:	2300      	movs	r3, #0
}
 80168c6:	4618      	mov	r0, r3
 80168c8:	3718      	adds	r7, #24
 80168ca:	46bd      	mov	sp, r7
 80168cc:	bd80      	pop	{r7, pc}

080168ce <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80168ce:	b580      	push	{r7, lr}
 80168d0:	b084      	sub	sp, #16
 80168d2:	af00      	add	r7, sp, #0
 80168d4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80168d6:	2300      	movs	r3, #0
 80168d8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	2201      	movs	r2, #1
 80168de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	2200      	movs	r2, #0
 80168e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	2200      	movs	r2, #0
 80168ee:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	2200      	movs	r2, #0
 80168f4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	2200      	movs	r2, #0
 80168fc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016906:	2b00      	cmp	r3, #0
 8016908:	d014      	beq.n	8016934 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016910:	685b      	ldr	r3, [r3, #4]
 8016912:	2b00      	cmp	r3, #0
 8016914:	d00e      	beq.n	8016934 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801691c:	685b      	ldr	r3, [r3, #4]
 801691e:	687a      	ldr	r2, [r7, #4]
 8016920:	6852      	ldr	r2, [r2, #4]
 8016922:	b2d2      	uxtb	r2, r2
 8016924:	4611      	mov	r1, r2
 8016926:	6878      	ldr	r0, [r7, #4]
 8016928:	4798      	blx	r3
 801692a:	4603      	mov	r3, r0
 801692c:	2b00      	cmp	r3, #0
 801692e:	d001      	beq.n	8016934 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8016930:	2303      	movs	r3, #3
 8016932:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016934:	2340      	movs	r3, #64	; 0x40
 8016936:	2200      	movs	r2, #0
 8016938:	2100      	movs	r1, #0
 801693a:	6878      	ldr	r0, [r7, #4]
 801693c:	f004 fbe3 	bl	801b106 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	2201      	movs	r2, #1
 8016944:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	2240      	movs	r2, #64	; 0x40
 801694c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016950:	2340      	movs	r3, #64	; 0x40
 8016952:	2200      	movs	r2, #0
 8016954:	2180      	movs	r1, #128	; 0x80
 8016956:	6878      	ldr	r0, [r7, #4]
 8016958:	f004 fbd5 	bl	801b106 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	2201      	movs	r2, #1
 8016960:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	2240      	movs	r2, #64	; 0x40
 8016966:	621a      	str	r2, [r3, #32]

  return ret;
 8016968:	7bfb      	ldrb	r3, [r7, #15]
}
 801696a:	4618      	mov	r0, r3
 801696c:	3710      	adds	r7, #16
 801696e:	46bd      	mov	sp, r7
 8016970:	bd80      	pop	{r7, pc}

08016972 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8016972:	b480      	push	{r7}
 8016974:	b083      	sub	sp, #12
 8016976:	af00      	add	r7, sp, #0
 8016978:	6078      	str	r0, [r7, #4]
 801697a:	460b      	mov	r3, r1
 801697c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	78fa      	ldrb	r2, [r7, #3]
 8016982:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8016984:	2300      	movs	r3, #0
}
 8016986:	4618      	mov	r0, r3
 8016988:	370c      	adds	r7, #12
 801698a:	46bd      	mov	sp, r7
 801698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016990:	4770      	bx	lr

08016992 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8016992:	b480      	push	{r7}
 8016994:	b083      	sub	sp, #12
 8016996:	af00      	add	r7, sp, #0
 8016998:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80169a0:	b2db      	uxtb	r3, r3
 80169a2:	2b04      	cmp	r3, #4
 80169a4:	d006      	beq.n	80169b4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80169ac:	b2da      	uxtb	r2, r3
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	2204      	movs	r2, #4
 80169b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80169bc:	2300      	movs	r3, #0
}
 80169be:	4618      	mov	r0, r3
 80169c0:	370c      	adds	r7, #12
 80169c2:	46bd      	mov	sp, r7
 80169c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169c8:	4770      	bx	lr

080169ca <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80169ca:	b480      	push	{r7}
 80169cc:	b083      	sub	sp, #12
 80169ce:	af00      	add	r7, sp, #0
 80169d0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80169d8:	b2db      	uxtb	r3, r3
 80169da:	2b04      	cmp	r3, #4
 80169dc:	d106      	bne.n	80169ec <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80169e4:	b2da      	uxtb	r2, r3
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80169ec:	2300      	movs	r3, #0
}
 80169ee:	4618      	mov	r0, r3
 80169f0:	370c      	adds	r7, #12
 80169f2:	46bd      	mov	sp, r7
 80169f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169f8:	4770      	bx	lr

080169fa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80169fa:	b580      	push	{r7, lr}
 80169fc:	b082      	sub	sp, #8
 80169fe:	af00      	add	r7, sp, #0
 8016a00:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016a08:	b2db      	uxtb	r3, r3
 8016a0a:	2b03      	cmp	r3, #3
 8016a0c:	d110      	bne.n	8016a30 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	d00b      	beq.n	8016a30 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016a1e:	69db      	ldr	r3, [r3, #28]
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	d005      	beq.n	8016a30 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016a2a:	69db      	ldr	r3, [r3, #28]
 8016a2c:	6878      	ldr	r0, [r7, #4]
 8016a2e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8016a30:	2300      	movs	r3, #0
}
 8016a32:	4618      	mov	r0, r3
 8016a34:	3708      	adds	r7, #8
 8016a36:	46bd      	mov	sp, r7
 8016a38:	bd80      	pop	{r7, pc}

08016a3a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8016a3a:	b580      	push	{r7, lr}
 8016a3c:	b082      	sub	sp, #8
 8016a3e:	af00      	add	r7, sp, #0
 8016a40:	6078      	str	r0, [r7, #4]
 8016a42:	460b      	mov	r3, r1
 8016a44:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	32ae      	adds	r2, #174	; 0xae
 8016a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a54:	2b00      	cmp	r3, #0
 8016a56:	d101      	bne.n	8016a5c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8016a58:	2303      	movs	r3, #3
 8016a5a:	e01c      	b.n	8016a96 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016a62:	b2db      	uxtb	r3, r3
 8016a64:	2b03      	cmp	r3, #3
 8016a66:	d115      	bne.n	8016a94 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	32ae      	adds	r2, #174	; 0xae
 8016a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a76:	6a1b      	ldr	r3, [r3, #32]
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d00b      	beq.n	8016a94 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	32ae      	adds	r2, #174	; 0xae
 8016a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a8a:	6a1b      	ldr	r3, [r3, #32]
 8016a8c:	78fa      	ldrb	r2, [r7, #3]
 8016a8e:	4611      	mov	r1, r2
 8016a90:	6878      	ldr	r0, [r7, #4]
 8016a92:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016a94:	2300      	movs	r3, #0
}
 8016a96:	4618      	mov	r0, r3
 8016a98:	3708      	adds	r7, #8
 8016a9a:	46bd      	mov	sp, r7
 8016a9c:	bd80      	pop	{r7, pc}

08016a9e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8016a9e:	b580      	push	{r7, lr}
 8016aa0:	b082      	sub	sp, #8
 8016aa2:	af00      	add	r7, sp, #0
 8016aa4:	6078      	str	r0, [r7, #4]
 8016aa6:	460b      	mov	r3, r1
 8016aa8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8016aaa:	687b      	ldr	r3, [r7, #4]
 8016aac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	32ae      	adds	r2, #174	; 0xae
 8016ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d101      	bne.n	8016ac0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8016abc:	2303      	movs	r3, #3
 8016abe:	e01c      	b.n	8016afa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016ac6:	b2db      	uxtb	r3, r3
 8016ac8:	2b03      	cmp	r3, #3
 8016aca:	d115      	bne.n	8016af8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	32ae      	adds	r2, #174	; 0xae
 8016ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d00b      	beq.n	8016af8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	32ae      	adds	r2, #174	; 0xae
 8016aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016af0:	78fa      	ldrb	r2, [r7, #3]
 8016af2:	4611      	mov	r1, r2
 8016af4:	6878      	ldr	r0, [r7, #4]
 8016af6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016af8:	2300      	movs	r3, #0
}
 8016afa:	4618      	mov	r0, r3
 8016afc:	3708      	adds	r7, #8
 8016afe:	46bd      	mov	sp, r7
 8016b00:	bd80      	pop	{r7, pc}

08016b02 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8016b02:	b480      	push	{r7}
 8016b04:	b083      	sub	sp, #12
 8016b06:	af00      	add	r7, sp, #0
 8016b08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016b0a:	2300      	movs	r3, #0
}
 8016b0c:	4618      	mov	r0, r3
 8016b0e:	370c      	adds	r7, #12
 8016b10:	46bd      	mov	sp, r7
 8016b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b16:	4770      	bx	lr

08016b18 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8016b18:	b580      	push	{r7, lr}
 8016b1a:	b084      	sub	sp, #16
 8016b1c:	af00      	add	r7, sp, #0
 8016b1e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8016b20:	2300      	movs	r3, #0
 8016b22:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	2201      	movs	r2, #1
 8016b28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d00e      	beq.n	8016b54 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016b3c:	685b      	ldr	r3, [r3, #4]
 8016b3e:	687a      	ldr	r2, [r7, #4]
 8016b40:	6852      	ldr	r2, [r2, #4]
 8016b42:	b2d2      	uxtb	r2, r2
 8016b44:	4611      	mov	r1, r2
 8016b46:	6878      	ldr	r0, [r7, #4]
 8016b48:	4798      	blx	r3
 8016b4a:	4603      	mov	r3, r0
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d001      	beq.n	8016b54 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8016b50:	2303      	movs	r3, #3
 8016b52:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b56:	4618      	mov	r0, r3
 8016b58:	3710      	adds	r7, #16
 8016b5a:	46bd      	mov	sp, r7
 8016b5c:	bd80      	pop	{r7, pc}

08016b5e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016b5e:	b480      	push	{r7}
 8016b60:	b083      	sub	sp, #12
 8016b62:	af00      	add	r7, sp, #0
 8016b64:	6078      	str	r0, [r7, #4]
 8016b66:	460b      	mov	r3, r1
 8016b68:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016b6a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016b6c:	4618      	mov	r0, r3
 8016b6e:	370c      	adds	r7, #12
 8016b70:	46bd      	mov	sp, r7
 8016b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b76:	4770      	bx	lr

08016b78 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016b78:	b480      	push	{r7}
 8016b7a:	b083      	sub	sp, #12
 8016b7c:	af00      	add	r7, sp, #0
 8016b7e:	6078      	str	r0, [r7, #4]
 8016b80:	460b      	mov	r3, r1
 8016b82:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016b84:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016b86:	4618      	mov	r0, r3
 8016b88:	370c      	adds	r7, #12
 8016b8a:	46bd      	mov	sp, r7
 8016b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b90:	4770      	bx	lr

08016b92 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8016b92:	b580      	push	{r7, lr}
 8016b94:	b086      	sub	sp, #24
 8016b96:	af00      	add	r7, sp, #0
 8016b98:	6078      	str	r0, [r7, #4]
 8016b9a:	460b      	mov	r3, r1
 8016b9c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8016ba6:	2300      	movs	r3, #0
 8016ba8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8016baa:	68fb      	ldr	r3, [r7, #12]
 8016bac:	885b      	ldrh	r3, [r3, #2]
 8016bae:	b29a      	uxth	r2, r3
 8016bb0:	68fb      	ldr	r3, [r7, #12]
 8016bb2:	781b      	ldrb	r3, [r3, #0]
 8016bb4:	b29b      	uxth	r3, r3
 8016bb6:	429a      	cmp	r2, r3
 8016bb8:	d920      	bls.n	8016bfc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8016bba:	68fb      	ldr	r3, [r7, #12]
 8016bbc:	781b      	ldrb	r3, [r3, #0]
 8016bbe:	b29b      	uxth	r3, r3
 8016bc0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8016bc2:	e013      	b.n	8016bec <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8016bc4:	f107 030a 	add.w	r3, r7, #10
 8016bc8:	4619      	mov	r1, r3
 8016bca:	6978      	ldr	r0, [r7, #20]
 8016bcc:	f000 f81b 	bl	8016c06 <USBD_GetNextDesc>
 8016bd0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8016bd2:	697b      	ldr	r3, [r7, #20]
 8016bd4:	785b      	ldrb	r3, [r3, #1]
 8016bd6:	2b05      	cmp	r3, #5
 8016bd8:	d108      	bne.n	8016bec <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8016bda:	697b      	ldr	r3, [r7, #20]
 8016bdc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8016bde:	693b      	ldr	r3, [r7, #16]
 8016be0:	789b      	ldrb	r3, [r3, #2]
 8016be2:	78fa      	ldrb	r2, [r7, #3]
 8016be4:	429a      	cmp	r2, r3
 8016be6:	d008      	beq.n	8016bfa <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8016be8:	2300      	movs	r3, #0
 8016bea:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8016bec:	68fb      	ldr	r3, [r7, #12]
 8016bee:	885b      	ldrh	r3, [r3, #2]
 8016bf0:	b29a      	uxth	r2, r3
 8016bf2:	897b      	ldrh	r3, [r7, #10]
 8016bf4:	429a      	cmp	r2, r3
 8016bf6:	d8e5      	bhi.n	8016bc4 <USBD_GetEpDesc+0x32>
 8016bf8:	e000      	b.n	8016bfc <USBD_GetEpDesc+0x6a>
          break;
 8016bfa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8016bfc:	693b      	ldr	r3, [r7, #16]
}
 8016bfe:	4618      	mov	r0, r3
 8016c00:	3718      	adds	r7, #24
 8016c02:	46bd      	mov	sp, r7
 8016c04:	bd80      	pop	{r7, pc}

08016c06 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8016c06:	b480      	push	{r7}
 8016c08:	b085      	sub	sp, #20
 8016c0a:	af00      	add	r7, sp, #0
 8016c0c:	6078      	str	r0, [r7, #4]
 8016c0e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8016c14:	683b      	ldr	r3, [r7, #0]
 8016c16:	881a      	ldrh	r2, [r3, #0]
 8016c18:	68fb      	ldr	r3, [r7, #12]
 8016c1a:	781b      	ldrb	r3, [r3, #0]
 8016c1c:	b29b      	uxth	r3, r3
 8016c1e:	4413      	add	r3, r2
 8016c20:	b29a      	uxth	r2, r3
 8016c22:	683b      	ldr	r3, [r7, #0]
 8016c24:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	781b      	ldrb	r3, [r3, #0]
 8016c2a:	461a      	mov	r2, r3
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	4413      	add	r3, r2
 8016c30:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8016c32:	68fb      	ldr	r3, [r7, #12]
}
 8016c34:	4618      	mov	r0, r3
 8016c36:	3714      	adds	r7, #20
 8016c38:	46bd      	mov	sp, r7
 8016c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c3e:	4770      	bx	lr

08016c40 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8016c40:	b480      	push	{r7}
 8016c42:	b087      	sub	sp, #28
 8016c44:	af00      	add	r7, sp, #0
 8016c46:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8016c4c:	697b      	ldr	r3, [r7, #20]
 8016c4e:	781b      	ldrb	r3, [r3, #0]
 8016c50:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8016c52:	697b      	ldr	r3, [r7, #20]
 8016c54:	3301      	adds	r3, #1
 8016c56:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8016c58:	697b      	ldr	r3, [r7, #20]
 8016c5a:	781b      	ldrb	r3, [r3, #0]
 8016c5c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8016c5e:	8a3b      	ldrh	r3, [r7, #16]
 8016c60:	021b      	lsls	r3, r3, #8
 8016c62:	b21a      	sxth	r2, r3
 8016c64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016c68:	4313      	orrs	r3, r2
 8016c6a:	b21b      	sxth	r3, r3
 8016c6c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8016c6e:	89fb      	ldrh	r3, [r7, #14]
}
 8016c70:	4618      	mov	r0, r3
 8016c72:	371c      	adds	r7, #28
 8016c74:	46bd      	mov	sp, r7
 8016c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c7a:	4770      	bx	lr

08016c7c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016c7c:	b580      	push	{r7, lr}
 8016c7e:	b084      	sub	sp, #16
 8016c80:	af00      	add	r7, sp, #0
 8016c82:	6078      	str	r0, [r7, #4]
 8016c84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016c86:	2300      	movs	r3, #0
 8016c88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016c8a:	683b      	ldr	r3, [r7, #0]
 8016c8c:	781b      	ldrb	r3, [r3, #0]
 8016c8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016c92:	2b40      	cmp	r3, #64	; 0x40
 8016c94:	d005      	beq.n	8016ca2 <USBD_StdDevReq+0x26>
 8016c96:	2b40      	cmp	r3, #64	; 0x40
 8016c98:	d857      	bhi.n	8016d4a <USBD_StdDevReq+0xce>
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	d00f      	beq.n	8016cbe <USBD_StdDevReq+0x42>
 8016c9e:	2b20      	cmp	r3, #32
 8016ca0:	d153      	bne.n	8016d4a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	32ae      	adds	r2, #174	; 0xae
 8016cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016cb0:	689b      	ldr	r3, [r3, #8]
 8016cb2:	6839      	ldr	r1, [r7, #0]
 8016cb4:	6878      	ldr	r0, [r7, #4]
 8016cb6:	4798      	blx	r3
 8016cb8:	4603      	mov	r3, r0
 8016cba:	73fb      	strb	r3, [r7, #15]
      break;
 8016cbc:	e04a      	b.n	8016d54 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016cbe:	683b      	ldr	r3, [r7, #0]
 8016cc0:	785b      	ldrb	r3, [r3, #1]
 8016cc2:	2b09      	cmp	r3, #9
 8016cc4:	d83b      	bhi.n	8016d3e <USBD_StdDevReq+0xc2>
 8016cc6:	a201      	add	r2, pc, #4	; (adr r2, 8016ccc <USBD_StdDevReq+0x50>)
 8016cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ccc:	08016d21 	.word	0x08016d21
 8016cd0:	08016d35 	.word	0x08016d35
 8016cd4:	08016d3f 	.word	0x08016d3f
 8016cd8:	08016d2b 	.word	0x08016d2b
 8016cdc:	08016d3f 	.word	0x08016d3f
 8016ce0:	08016cff 	.word	0x08016cff
 8016ce4:	08016cf5 	.word	0x08016cf5
 8016ce8:	08016d3f 	.word	0x08016d3f
 8016cec:	08016d17 	.word	0x08016d17
 8016cf0:	08016d09 	.word	0x08016d09
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8016cf4:	6839      	ldr	r1, [r7, #0]
 8016cf6:	6878      	ldr	r0, [r7, #4]
 8016cf8:	f000 fa3c 	bl	8017174 <USBD_GetDescriptor>
          break;
 8016cfc:	e024      	b.n	8016d48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8016cfe:	6839      	ldr	r1, [r7, #0]
 8016d00:	6878      	ldr	r0, [r7, #4]
 8016d02:	f000 fba1 	bl	8017448 <USBD_SetAddress>
          break;
 8016d06:	e01f      	b.n	8016d48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8016d08:	6839      	ldr	r1, [r7, #0]
 8016d0a:	6878      	ldr	r0, [r7, #4]
 8016d0c:	f000 fbe0 	bl	80174d0 <USBD_SetConfig>
 8016d10:	4603      	mov	r3, r0
 8016d12:	73fb      	strb	r3, [r7, #15]
          break;
 8016d14:	e018      	b.n	8016d48 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8016d16:	6839      	ldr	r1, [r7, #0]
 8016d18:	6878      	ldr	r0, [r7, #4]
 8016d1a:	f000 fc83 	bl	8017624 <USBD_GetConfig>
          break;
 8016d1e:	e013      	b.n	8016d48 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8016d20:	6839      	ldr	r1, [r7, #0]
 8016d22:	6878      	ldr	r0, [r7, #4]
 8016d24:	f000 fcb4 	bl	8017690 <USBD_GetStatus>
          break;
 8016d28:	e00e      	b.n	8016d48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8016d2a:	6839      	ldr	r1, [r7, #0]
 8016d2c:	6878      	ldr	r0, [r7, #4]
 8016d2e:	f000 fce3 	bl	80176f8 <USBD_SetFeature>
          break;
 8016d32:	e009      	b.n	8016d48 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8016d34:	6839      	ldr	r1, [r7, #0]
 8016d36:	6878      	ldr	r0, [r7, #4]
 8016d38:	f000 fd07 	bl	801774a <USBD_ClrFeature>
          break;
 8016d3c:	e004      	b.n	8016d48 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8016d3e:	6839      	ldr	r1, [r7, #0]
 8016d40:	6878      	ldr	r0, [r7, #4]
 8016d42:	f000 fd5e 	bl	8017802 <USBD_CtlError>
          break;
 8016d46:	bf00      	nop
      }
      break;
 8016d48:	e004      	b.n	8016d54 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8016d4a:	6839      	ldr	r1, [r7, #0]
 8016d4c:	6878      	ldr	r0, [r7, #4]
 8016d4e:	f000 fd58 	bl	8017802 <USBD_CtlError>
      break;
 8016d52:	bf00      	nop
  }

  return ret;
 8016d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8016d56:	4618      	mov	r0, r3
 8016d58:	3710      	adds	r7, #16
 8016d5a:	46bd      	mov	sp, r7
 8016d5c:	bd80      	pop	{r7, pc}
 8016d5e:	bf00      	nop

08016d60 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016d60:	b580      	push	{r7, lr}
 8016d62:	b084      	sub	sp, #16
 8016d64:	af00      	add	r7, sp, #0
 8016d66:	6078      	str	r0, [r7, #4]
 8016d68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016d6a:	2300      	movs	r3, #0
 8016d6c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016d6e:	683b      	ldr	r3, [r7, #0]
 8016d70:	781b      	ldrb	r3, [r3, #0]
 8016d72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016d76:	2b40      	cmp	r3, #64	; 0x40
 8016d78:	d005      	beq.n	8016d86 <USBD_StdItfReq+0x26>
 8016d7a:	2b40      	cmp	r3, #64	; 0x40
 8016d7c:	d852      	bhi.n	8016e24 <USBD_StdItfReq+0xc4>
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d001      	beq.n	8016d86 <USBD_StdItfReq+0x26>
 8016d82:	2b20      	cmp	r3, #32
 8016d84:	d14e      	bne.n	8016e24 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016d8c:	b2db      	uxtb	r3, r3
 8016d8e:	3b01      	subs	r3, #1
 8016d90:	2b02      	cmp	r3, #2
 8016d92:	d840      	bhi.n	8016e16 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8016d94:	683b      	ldr	r3, [r7, #0]
 8016d96:	889b      	ldrh	r3, [r3, #4]
 8016d98:	b2db      	uxtb	r3, r3
 8016d9a:	2b01      	cmp	r3, #1
 8016d9c:	d836      	bhi.n	8016e0c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8016d9e:	683b      	ldr	r3, [r7, #0]
 8016da0:	889b      	ldrh	r3, [r3, #4]
 8016da2:	b2db      	uxtb	r3, r3
 8016da4:	4619      	mov	r1, r3
 8016da6:	6878      	ldr	r0, [r7, #4]
 8016da8:	f7ff fed9 	bl	8016b5e <USBD_CoreFindIF>
 8016dac:	4603      	mov	r3, r0
 8016dae:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016db0:	7bbb      	ldrb	r3, [r7, #14]
 8016db2:	2bff      	cmp	r3, #255	; 0xff
 8016db4:	d01d      	beq.n	8016df2 <USBD_StdItfReq+0x92>
 8016db6:	7bbb      	ldrb	r3, [r7, #14]
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d11a      	bne.n	8016df2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8016dbc:	7bba      	ldrb	r2, [r7, #14]
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	32ae      	adds	r2, #174	; 0xae
 8016dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016dc6:	689b      	ldr	r3, [r3, #8]
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d00f      	beq.n	8016dec <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8016dcc:	7bba      	ldrb	r2, [r7, #14]
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016dd4:	7bba      	ldrb	r2, [r7, #14]
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	32ae      	adds	r2, #174	; 0xae
 8016dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016dde:	689b      	ldr	r3, [r3, #8]
 8016de0:	6839      	ldr	r1, [r7, #0]
 8016de2:	6878      	ldr	r0, [r7, #4]
 8016de4:	4798      	blx	r3
 8016de6:	4603      	mov	r3, r0
 8016de8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016dea:	e004      	b.n	8016df6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8016dec:	2303      	movs	r3, #3
 8016dee:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016df0:	e001      	b.n	8016df6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8016df2:	2303      	movs	r3, #3
 8016df4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8016df6:	683b      	ldr	r3, [r7, #0]
 8016df8:	88db      	ldrh	r3, [r3, #6]
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	d110      	bne.n	8016e20 <USBD_StdItfReq+0xc0>
 8016dfe:	7bfb      	ldrb	r3, [r7, #15]
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	d10d      	bne.n	8016e20 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8016e04:	6878      	ldr	r0, [r7, #4]
 8016e06:	f000 fdc7 	bl	8017998 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8016e0a:	e009      	b.n	8016e20 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8016e0c:	6839      	ldr	r1, [r7, #0]
 8016e0e:	6878      	ldr	r0, [r7, #4]
 8016e10:	f000 fcf7 	bl	8017802 <USBD_CtlError>
          break;
 8016e14:	e004      	b.n	8016e20 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8016e16:	6839      	ldr	r1, [r7, #0]
 8016e18:	6878      	ldr	r0, [r7, #4]
 8016e1a:	f000 fcf2 	bl	8017802 <USBD_CtlError>
          break;
 8016e1e:	e000      	b.n	8016e22 <USBD_StdItfReq+0xc2>
          break;
 8016e20:	bf00      	nop
      }
      break;
 8016e22:	e004      	b.n	8016e2e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8016e24:	6839      	ldr	r1, [r7, #0]
 8016e26:	6878      	ldr	r0, [r7, #4]
 8016e28:	f000 fceb 	bl	8017802 <USBD_CtlError>
      break;
 8016e2c:	bf00      	nop
  }

  return ret;
 8016e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016e30:	4618      	mov	r0, r3
 8016e32:	3710      	adds	r7, #16
 8016e34:	46bd      	mov	sp, r7
 8016e36:	bd80      	pop	{r7, pc}

08016e38 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016e38:	b580      	push	{r7, lr}
 8016e3a:	b084      	sub	sp, #16
 8016e3c:	af00      	add	r7, sp, #0
 8016e3e:	6078      	str	r0, [r7, #4]
 8016e40:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8016e42:	2300      	movs	r3, #0
 8016e44:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8016e46:	683b      	ldr	r3, [r7, #0]
 8016e48:	889b      	ldrh	r3, [r3, #4]
 8016e4a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016e4c:	683b      	ldr	r3, [r7, #0]
 8016e4e:	781b      	ldrb	r3, [r3, #0]
 8016e50:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016e54:	2b40      	cmp	r3, #64	; 0x40
 8016e56:	d007      	beq.n	8016e68 <USBD_StdEPReq+0x30>
 8016e58:	2b40      	cmp	r3, #64	; 0x40
 8016e5a:	f200 817f 	bhi.w	801715c <USBD_StdEPReq+0x324>
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d02a      	beq.n	8016eb8 <USBD_StdEPReq+0x80>
 8016e62:	2b20      	cmp	r3, #32
 8016e64:	f040 817a 	bne.w	801715c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8016e68:	7bbb      	ldrb	r3, [r7, #14]
 8016e6a:	4619      	mov	r1, r3
 8016e6c:	6878      	ldr	r0, [r7, #4]
 8016e6e:	f7ff fe83 	bl	8016b78 <USBD_CoreFindEP>
 8016e72:	4603      	mov	r3, r0
 8016e74:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016e76:	7b7b      	ldrb	r3, [r7, #13]
 8016e78:	2bff      	cmp	r3, #255	; 0xff
 8016e7a:	f000 8174 	beq.w	8017166 <USBD_StdEPReq+0x32e>
 8016e7e:	7b7b      	ldrb	r3, [r7, #13]
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	f040 8170 	bne.w	8017166 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8016e86:	7b7a      	ldrb	r2, [r7, #13]
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8016e8e:	7b7a      	ldrb	r2, [r7, #13]
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	32ae      	adds	r2, #174	; 0xae
 8016e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016e98:	689b      	ldr	r3, [r3, #8]
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	f000 8163 	beq.w	8017166 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8016ea0:	7b7a      	ldrb	r2, [r7, #13]
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	32ae      	adds	r2, #174	; 0xae
 8016ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016eaa:	689b      	ldr	r3, [r3, #8]
 8016eac:	6839      	ldr	r1, [r7, #0]
 8016eae:	6878      	ldr	r0, [r7, #4]
 8016eb0:	4798      	blx	r3
 8016eb2:	4603      	mov	r3, r0
 8016eb4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8016eb6:	e156      	b.n	8017166 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016eb8:	683b      	ldr	r3, [r7, #0]
 8016eba:	785b      	ldrb	r3, [r3, #1]
 8016ebc:	2b03      	cmp	r3, #3
 8016ebe:	d008      	beq.n	8016ed2 <USBD_StdEPReq+0x9a>
 8016ec0:	2b03      	cmp	r3, #3
 8016ec2:	f300 8145 	bgt.w	8017150 <USBD_StdEPReq+0x318>
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	f000 809b 	beq.w	8017002 <USBD_StdEPReq+0x1ca>
 8016ecc:	2b01      	cmp	r3, #1
 8016ece:	d03c      	beq.n	8016f4a <USBD_StdEPReq+0x112>
 8016ed0:	e13e      	b.n	8017150 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016ed8:	b2db      	uxtb	r3, r3
 8016eda:	2b02      	cmp	r3, #2
 8016edc:	d002      	beq.n	8016ee4 <USBD_StdEPReq+0xac>
 8016ede:	2b03      	cmp	r3, #3
 8016ee0:	d016      	beq.n	8016f10 <USBD_StdEPReq+0xd8>
 8016ee2:	e02c      	b.n	8016f3e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016ee4:	7bbb      	ldrb	r3, [r7, #14]
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	d00d      	beq.n	8016f06 <USBD_StdEPReq+0xce>
 8016eea:	7bbb      	ldrb	r3, [r7, #14]
 8016eec:	2b80      	cmp	r3, #128	; 0x80
 8016eee:	d00a      	beq.n	8016f06 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016ef0:	7bbb      	ldrb	r3, [r7, #14]
 8016ef2:	4619      	mov	r1, r3
 8016ef4:	6878      	ldr	r0, [r7, #4]
 8016ef6:	f004 f94b 	bl	801b190 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016efa:	2180      	movs	r1, #128	; 0x80
 8016efc:	6878      	ldr	r0, [r7, #4]
 8016efe:	f004 f947 	bl	801b190 <USBD_LL_StallEP>
 8016f02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016f04:	e020      	b.n	8016f48 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8016f06:	6839      	ldr	r1, [r7, #0]
 8016f08:	6878      	ldr	r0, [r7, #4]
 8016f0a:	f000 fc7a 	bl	8017802 <USBD_CtlError>
              break;
 8016f0e:	e01b      	b.n	8016f48 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016f10:	683b      	ldr	r3, [r7, #0]
 8016f12:	885b      	ldrh	r3, [r3, #2]
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d10e      	bne.n	8016f36 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016f18:	7bbb      	ldrb	r3, [r7, #14]
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	d00b      	beq.n	8016f36 <USBD_StdEPReq+0xfe>
 8016f1e:	7bbb      	ldrb	r3, [r7, #14]
 8016f20:	2b80      	cmp	r3, #128	; 0x80
 8016f22:	d008      	beq.n	8016f36 <USBD_StdEPReq+0xfe>
 8016f24:	683b      	ldr	r3, [r7, #0]
 8016f26:	88db      	ldrh	r3, [r3, #6]
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	d104      	bne.n	8016f36 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8016f2c:	7bbb      	ldrb	r3, [r7, #14]
 8016f2e:	4619      	mov	r1, r3
 8016f30:	6878      	ldr	r0, [r7, #4]
 8016f32:	f004 f92d 	bl	801b190 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8016f36:	6878      	ldr	r0, [r7, #4]
 8016f38:	f000 fd2e 	bl	8017998 <USBD_CtlSendStatus>

              break;
 8016f3c:	e004      	b.n	8016f48 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8016f3e:	6839      	ldr	r1, [r7, #0]
 8016f40:	6878      	ldr	r0, [r7, #4]
 8016f42:	f000 fc5e 	bl	8017802 <USBD_CtlError>
              break;
 8016f46:	bf00      	nop
          }
          break;
 8016f48:	e107      	b.n	801715a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016f50:	b2db      	uxtb	r3, r3
 8016f52:	2b02      	cmp	r3, #2
 8016f54:	d002      	beq.n	8016f5c <USBD_StdEPReq+0x124>
 8016f56:	2b03      	cmp	r3, #3
 8016f58:	d016      	beq.n	8016f88 <USBD_StdEPReq+0x150>
 8016f5a:	e04b      	b.n	8016ff4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016f5c:	7bbb      	ldrb	r3, [r7, #14]
 8016f5e:	2b00      	cmp	r3, #0
 8016f60:	d00d      	beq.n	8016f7e <USBD_StdEPReq+0x146>
 8016f62:	7bbb      	ldrb	r3, [r7, #14]
 8016f64:	2b80      	cmp	r3, #128	; 0x80
 8016f66:	d00a      	beq.n	8016f7e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016f68:	7bbb      	ldrb	r3, [r7, #14]
 8016f6a:	4619      	mov	r1, r3
 8016f6c:	6878      	ldr	r0, [r7, #4]
 8016f6e:	f004 f90f 	bl	801b190 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016f72:	2180      	movs	r1, #128	; 0x80
 8016f74:	6878      	ldr	r0, [r7, #4]
 8016f76:	f004 f90b 	bl	801b190 <USBD_LL_StallEP>
 8016f7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016f7c:	e040      	b.n	8017000 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8016f7e:	6839      	ldr	r1, [r7, #0]
 8016f80:	6878      	ldr	r0, [r7, #4]
 8016f82:	f000 fc3e 	bl	8017802 <USBD_CtlError>
              break;
 8016f86:	e03b      	b.n	8017000 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016f88:	683b      	ldr	r3, [r7, #0]
 8016f8a:	885b      	ldrh	r3, [r3, #2]
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	d136      	bne.n	8016ffe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016f90:	7bbb      	ldrb	r3, [r7, #14]
 8016f92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d004      	beq.n	8016fa4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8016f9a:	7bbb      	ldrb	r3, [r7, #14]
 8016f9c:	4619      	mov	r1, r3
 8016f9e:	6878      	ldr	r0, [r7, #4]
 8016fa0:	f004 f915 	bl	801b1ce <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8016fa4:	6878      	ldr	r0, [r7, #4]
 8016fa6:	f000 fcf7 	bl	8017998 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8016faa:	7bbb      	ldrb	r3, [r7, #14]
 8016fac:	4619      	mov	r1, r3
 8016fae:	6878      	ldr	r0, [r7, #4]
 8016fb0:	f7ff fde2 	bl	8016b78 <USBD_CoreFindEP>
 8016fb4:	4603      	mov	r3, r0
 8016fb6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016fb8:	7b7b      	ldrb	r3, [r7, #13]
 8016fba:	2bff      	cmp	r3, #255	; 0xff
 8016fbc:	d01f      	beq.n	8016ffe <USBD_StdEPReq+0x1c6>
 8016fbe:	7b7b      	ldrb	r3, [r7, #13]
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	d11c      	bne.n	8016ffe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8016fc4:	7b7a      	ldrb	r2, [r7, #13]
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8016fcc:	7b7a      	ldrb	r2, [r7, #13]
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	32ae      	adds	r2, #174	; 0xae
 8016fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016fd6:	689b      	ldr	r3, [r3, #8]
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	d010      	beq.n	8016ffe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016fdc:	7b7a      	ldrb	r2, [r7, #13]
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	32ae      	adds	r2, #174	; 0xae
 8016fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016fe6:	689b      	ldr	r3, [r3, #8]
 8016fe8:	6839      	ldr	r1, [r7, #0]
 8016fea:	6878      	ldr	r0, [r7, #4]
 8016fec:	4798      	blx	r3
 8016fee:	4603      	mov	r3, r0
 8016ff0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8016ff2:	e004      	b.n	8016ffe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8016ff4:	6839      	ldr	r1, [r7, #0]
 8016ff6:	6878      	ldr	r0, [r7, #4]
 8016ff8:	f000 fc03 	bl	8017802 <USBD_CtlError>
              break;
 8016ffc:	e000      	b.n	8017000 <USBD_StdEPReq+0x1c8>
              break;
 8016ffe:	bf00      	nop
          }
          break;
 8017000:	e0ab      	b.n	801715a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017008:	b2db      	uxtb	r3, r3
 801700a:	2b02      	cmp	r3, #2
 801700c:	d002      	beq.n	8017014 <USBD_StdEPReq+0x1dc>
 801700e:	2b03      	cmp	r3, #3
 8017010:	d032      	beq.n	8017078 <USBD_StdEPReq+0x240>
 8017012:	e097      	b.n	8017144 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017014:	7bbb      	ldrb	r3, [r7, #14]
 8017016:	2b00      	cmp	r3, #0
 8017018:	d007      	beq.n	801702a <USBD_StdEPReq+0x1f2>
 801701a:	7bbb      	ldrb	r3, [r7, #14]
 801701c:	2b80      	cmp	r3, #128	; 0x80
 801701e:	d004      	beq.n	801702a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8017020:	6839      	ldr	r1, [r7, #0]
 8017022:	6878      	ldr	r0, [r7, #4]
 8017024:	f000 fbed 	bl	8017802 <USBD_CtlError>
                break;
 8017028:	e091      	b.n	801714e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801702a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801702e:	2b00      	cmp	r3, #0
 8017030:	da0b      	bge.n	801704a <USBD_StdEPReq+0x212>
 8017032:	7bbb      	ldrb	r3, [r7, #14]
 8017034:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017038:	4613      	mov	r3, r2
 801703a:	009b      	lsls	r3, r3, #2
 801703c:	4413      	add	r3, r2
 801703e:	009b      	lsls	r3, r3, #2
 8017040:	3310      	adds	r3, #16
 8017042:	687a      	ldr	r2, [r7, #4]
 8017044:	4413      	add	r3, r2
 8017046:	3304      	adds	r3, #4
 8017048:	e00b      	b.n	8017062 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801704a:	7bbb      	ldrb	r3, [r7, #14]
 801704c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017050:	4613      	mov	r3, r2
 8017052:	009b      	lsls	r3, r3, #2
 8017054:	4413      	add	r3, r2
 8017056:	009b      	lsls	r3, r3, #2
 8017058:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801705c:	687a      	ldr	r2, [r7, #4]
 801705e:	4413      	add	r3, r2
 8017060:	3304      	adds	r3, #4
 8017062:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8017064:	68bb      	ldr	r3, [r7, #8]
 8017066:	2200      	movs	r2, #0
 8017068:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801706a:	68bb      	ldr	r3, [r7, #8]
 801706c:	2202      	movs	r2, #2
 801706e:	4619      	mov	r1, r3
 8017070:	6878      	ldr	r0, [r7, #4]
 8017072:	f000 fc37 	bl	80178e4 <USBD_CtlSendData>
              break;
 8017076:	e06a      	b.n	801714e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8017078:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801707c:	2b00      	cmp	r3, #0
 801707e:	da11      	bge.n	80170a4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8017080:	7bbb      	ldrb	r3, [r7, #14]
 8017082:	f003 020f 	and.w	r2, r3, #15
 8017086:	6879      	ldr	r1, [r7, #4]
 8017088:	4613      	mov	r3, r2
 801708a:	009b      	lsls	r3, r3, #2
 801708c:	4413      	add	r3, r2
 801708e:	009b      	lsls	r3, r3, #2
 8017090:	440b      	add	r3, r1
 8017092:	3324      	adds	r3, #36	; 0x24
 8017094:	881b      	ldrh	r3, [r3, #0]
 8017096:	2b00      	cmp	r3, #0
 8017098:	d117      	bne.n	80170ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801709a:	6839      	ldr	r1, [r7, #0]
 801709c:	6878      	ldr	r0, [r7, #4]
 801709e:	f000 fbb0 	bl	8017802 <USBD_CtlError>
                  break;
 80170a2:	e054      	b.n	801714e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80170a4:	7bbb      	ldrb	r3, [r7, #14]
 80170a6:	f003 020f 	and.w	r2, r3, #15
 80170aa:	6879      	ldr	r1, [r7, #4]
 80170ac:	4613      	mov	r3, r2
 80170ae:	009b      	lsls	r3, r3, #2
 80170b0:	4413      	add	r3, r2
 80170b2:	009b      	lsls	r3, r3, #2
 80170b4:	440b      	add	r3, r1
 80170b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80170ba:	881b      	ldrh	r3, [r3, #0]
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d104      	bne.n	80170ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80170c0:	6839      	ldr	r1, [r7, #0]
 80170c2:	6878      	ldr	r0, [r7, #4]
 80170c4:	f000 fb9d 	bl	8017802 <USBD_CtlError>
                  break;
 80170c8:	e041      	b.n	801714e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80170ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80170ce:	2b00      	cmp	r3, #0
 80170d0:	da0b      	bge.n	80170ea <USBD_StdEPReq+0x2b2>
 80170d2:	7bbb      	ldrb	r3, [r7, #14]
 80170d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80170d8:	4613      	mov	r3, r2
 80170da:	009b      	lsls	r3, r3, #2
 80170dc:	4413      	add	r3, r2
 80170de:	009b      	lsls	r3, r3, #2
 80170e0:	3310      	adds	r3, #16
 80170e2:	687a      	ldr	r2, [r7, #4]
 80170e4:	4413      	add	r3, r2
 80170e6:	3304      	adds	r3, #4
 80170e8:	e00b      	b.n	8017102 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80170ea:	7bbb      	ldrb	r3, [r7, #14]
 80170ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80170f0:	4613      	mov	r3, r2
 80170f2:	009b      	lsls	r3, r3, #2
 80170f4:	4413      	add	r3, r2
 80170f6:	009b      	lsls	r3, r3, #2
 80170f8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80170fc:	687a      	ldr	r2, [r7, #4]
 80170fe:	4413      	add	r3, r2
 8017100:	3304      	adds	r3, #4
 8017102:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8017104:	7bbb      	ldrb	r3, [r7, #14]
 8017106:	2b00      	cmp	r3, #0
 8017108:	d002      	beq.n	8017110 <USBD_StdEPReq+0x2d8>
 801710a:	7bbb      	ldrb	r3, [r7, #14]
 801710c:	2b80      	cmp	r3, #128	; 0x80
 801710e:	d103      	bne.n	8017118 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8017110:	68bb      	ldr	r3, [r7, #8]
 8017112:	2200      	movs	r2, #0
 8017114:	601a      	str	r2, [r3, #0]
 8017116:	e00e      	b.n	8017136 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8017118:	7bbb      	ldrb	r3, [r7, #14]
 801711a:	4619      	mov	r1, r3
 801711c:	6878      	ldr	r0, [r7, #4]
 801711e:	f004 f875 	bl	801b20c <USBD_LL_IsStallEP>
 8017122:	4603      	mov	r3, r0
 8017124:	2b00      	cmp	r3, #0
 8017126:	d003      	beq.n	8017130 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8017128:	68bb      	ldr	r3, [r7, #8]
 801712a:	2201      	movs	r2, #1
 801712c:	601a      	str	r2, [r3, #0]
 801712e:	e002      	b.n	8017136 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8017130:	68bb      	ldr	r3, [r7, #8]
 8017132:	2200      	movs	r2, #0
 8017134:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8017136:	68bb      	ldr	r3, [r7, #8]
 8017138:	2202      	movs	r2, #2
 801713a:	4619      	mov	r1, r3
 801713c:	6878      	ldr	r0, [r7, #4]
 801713e:	f000 fbd1 	bl	80178e4 <USBD_CtlSendData>
              break;
 8017142:	e004      	b.n	801714e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8017144:	6839      	ldr	r1, [r7, #0]
 8017146:	6878      	ldr	r0, [r7, #4]
 8017148:	f000 fb5b 	bl	8017802 <USBD_CtlError>
              break;
 801714c:	bf00      	nop
          }
          break;
 801714e:	e004      	b.n	801715a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8017150:	6839      	ldr	r1, [r7, #0]
 8017152:	6878      	ldr	r0, [r7, #4]
 8017154:	f000 fb55 	bl	8017802 <USBD_CtlError>
          break;
 8017158:	bf00      	nop
      }
      break;
 801715a:	e005      	b.n	8017168 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801715c:	6839      	ldr	r1, [r7, #0]
 801715e:	6878      	ldr	r0, [r7, #4]
 8017160:	f000 fb4f 	bl	8017802 <USBD_CtlError>
      break;
 8017164:	e000      	b.n	8017168 <USBD_StdEPReq+0x330>
      break;
 8017166:	bf00      	nop
  }

  return ret;
 8017168:	7bfb      	ldrb	r3, [r7, #15]
}
 801716a:	4618      	mov	r0, r3
 801716c:	3710      	adds	r7, #16
 801716e:	46bd      	mov	sp, r7
 8017170:	bd80      	pop	{r7, pc}
	...

08017174 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017174:	b580      	push	{r7, lr}
 8017176:	b084      	sub	sp, #16
 8017178:	af00      	add	r7, sp, #0
 801717a:	6078      	str	r0, [r7, #4]
 801717c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801717e:	2300      	movs	r3, #0
 8017180:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8017182:	2300      	movs	r3, #0
 8017184:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8017186:	2300      	movs	r3, #0
 8017188:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801718a:	683b      	ldr	r3, [r7, #0]
 801718c:	885b      	ldrh	r3, [r3, #2]
 801718e:	0a1b      	lsrs	r3, r3, #8
 8017190:	b29b      	uxth	r3, r3
 8017192:	3b01      	subs	r3, #1
 8017194:	2b06      	cmp	r3, #6
 8017196:	f200 8128 	bhi.w	80173ea <USBD_GetDescriptor+0x276>
 801719a:	a201      	add	r2, pc, #4	; (adr r2, 80171a0 <USBD_GetDescriptor+0x2c>)
 801719c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80171a0:	080171bd 	.word	0x080171bd
 80171a4:	080171d5 	.word	0x080171d5
 80171a8:	08017215 	.word	0x08017215
 80171ac:	080173eb 	.word	0x080173eb
 80171b0:	080173eb 	.word	0x080173eb
 80171b4:	0801738b 	.word	0x0801738b
 80171b8:	080173b7 	.word	0x080173b7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80171c2:	681b      	ldr	r3, [r3, #0]
 80171c4:	687a      	ldr	r2, [r7, #4]
 80171c6:	7c12      	ldrb	r2, [r2, #16]
 80171c8:	f107 0108 	add.w	r1, r7, #8
 80171cc:	4610      	mov	r0, r2
 80171ce:	4798      	blx	r3
 80171d0:	60f8      	str	r0, [r7, #12]
      break;
 80171d2:	e112      	b.n	80173fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	7c1b      	ldrb	r3, [r3, #16]
 80171d8:	2b00      	cmp	r3, #0
 80171da:	d10d      	bne.n	80171f8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80171e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80171e4:	f107 0208 	add.w	r2, r7, #8
 80171e8:	4610      	mov	r0, r2
 80171ea:	4798      	blx	r3
 80171ec:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80171ee:	68fb      	ldr	r3, [r7, #12]
 80171f0:	3301      	adds	r3, #1
 80171f2:	2202      	movs	r2, #2
 80171f4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80171f6:	e100      	b.n	80173fa <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80171fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017200:	f107 0208 	add.w	r2, r7, #8
 8017204:	4610      	mov	r0, r2
 8017206:	4798      	blx	r3
 8017208:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801720a:	68fb      	ldr	r3, [r7, #12]
 801720c:	3301      	adds	r3, #1
 801720e:	2202      	movs	r2, #2
 8017210:	701a      	strb	r2, [r3, #0]
      break;
 8017212:	e0f2      	b.n	80173fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8017214:	683b      	ldr	r3, [r7, #0]
 8017216:	885b      	ldrh	r3, [r3, #2]
 8017218:	b2db      	uxtb	r3, r3
 801721a:	2b05      	cmp	r3, #5
 801721c:	f200 80ac 	bhi.w	8017378 <USBD_GetDescriptor+0x204>
 8017220:	a201      	add	r2, pc, #4	; (adr r2, 8017228 <USBD_GetDescriptor+0xb4>)
 8017222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017226:	bf00      	nop
 8017228:	08017241 	.word	0x08017241
 801722c:	08017275 	.word	0x08017275
 8017230:	080172a9 	.word	0x080172a9
 8017234:	080172dd 	.word	0x080172dd
 8017238:	08017311 	.word	0x08017311
 801723c:	08017345 	.word	0x08017345
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017246:	685b      	ldr	r3, [r3, #4]
 8017248:	2b00      	cmp	r3, #0
 801724a:	d00b      	beq.n	8017264 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017252:	685b      	ldr	r3, [r3, #4]
 8017254:	687a      	ldr	r2, [r7, #4]
 8017256:	7c12      	ldrb	r2, [r2, #16]
 8017258:	f107 0108 	add.w	r1, r7, #8
 801725c:	4610      	mov	r0, r2
 801725e:	4798      	blx	r3
 8017260:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017262:	e091      	b.n	8017388 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017264:	6839      	ldr	r1, [r7, #0]
 8017266:	6878      	ldr	r0, [r7, #4]
 8017268:	f000 facb 	bl	8017802 <USBD_CtlError>
            err++;
 801726c:	7afb      	ldrb	r3, [r7, #11]
 801726e:	3301      	adds	r3, #1
 8017270:	72fb      	strb	r3, [r7, #11]
          break;
 8017272:	e089      	b.n	8017388 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801727a:	689b      	ldr	r3, [r3, #8]
 801727c:	2b00      	cmp	r3, #0
 801727e:	d00b      	beq.n	8017298 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017286:	689b      	ldr	r3, [r3, #8]
 8017288:	687a      	ldr	r2, [r7, #4]
 801728a:	7c12      	ldrb	r2, [r2, #16]
 801728c:	f107 0108 	add.w	r1, r7, #8
 8017290:	4610      	mov	r0, r2
 8017292:	4798      	blx	r3
 8017294:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017296:	e077      	b.n	8017388 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017298:	6839      	ldr	r1, [r7, #0]
 801729a:	6878      	ldr	r0, [r7, #4]
 801729c:	f000 fab1 	bl	8017802 <USBD_CtlError>
            err++;
 80172a0:	7afb      	ldrb	r3, [r7, #11]
 80172a2:	3301      	adds	r3, #1
 80172a4:	72fb      	strb	r3, [r7, #11]
          break;
 80172a6:	e06f      	b.n	8017388 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80172ae:	68db      	ldr	r3, [r3, #12]
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	d00b      	beq.n	80172cc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80172ba:	68db      	ldr	r3, [r3, #12]
 80172bc:	687a      	ldr	r2, [r7, #4]
 80172be:	7c12      	ldrb	r2, [r2, #16]
 80172c0:	f107 0108 	add.w	r1, r7, #8
 80172c4:	4610      	mov	r0, r2
 80172c6:	4798      	blx	r3
 80172c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80172ca:	e05d      	b.n	8017388 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80172cc:	6839      	ldr	r1, [r7, #0]
 80172ce:	6878      	ldr	r0, [r7, #4]
 80172d0:	f000 fa97 	bl	8017802 <USBD_CtlError>
            err++;
 80172d4:	7afb      	ldrb	r3, [r7, #11]
 80172d6:	3301      	adds	r3, #1
 80172d8:	72fb      	strb	r3, [r7, #11]
          break;
 80172da:	e055      	b.n	8017388 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80172e2:	691b      	ldr	r3, [r3, #16]
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	d00b      	beq.n	8017300 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80172ee:	691b      	ldr	r3, [r3, #16]
 80172f0:	687a      	ldr	r2, [r7, #4]
 80172f2:	7c12      	ldrb	r2, [r2, #16]
 80172f4:	f107 0108 	add.w	r1, r7, #8
 80172f8:	4610      	mov	r0, r2
 80172fa:	4798      	blx	r3
 80172fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80172fe:	e043      	b.n	8017388 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017300:	6839      	ldr	r1, [r7, #0]
 8017302:	6878      	ldr	r0, [r7, #4]
 8017304:	f000 fa7d 	bl	8017802 <USBD_CtlError>
            err++;
 8017308:	7afb      	ldrb	r3, [r7, #11]
 801730a:	3301      	adds	r3, #1
 801730c:	72fb      	strb	r3, [r7, #11]
          break;
 801730e:	e03b      	b.n	8017388 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017316:	695b      	ldr	r3, [r3, #20]
 8017318:	2b00      	cmp	r3, #0
 801731a:	d00b      	beq.n	8017334 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017322:	695b      	ldr	r3, [r3, #20]
 8017324:	687a      	ldr	r2, [r7, #4]
 8017326:	7c12      	ldrb	r2, [r2, #16]
 8017328:	f107 0108 	add.w	r1, r7, #8
 801732c:	4610      	mov	r0, r2
 801732e:	4798      	blx	r3
 8017330:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017332:	e029      	b.n	8017388 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017334:	6839      	ldr	r1, [r7, #0]
 8017336:	6878      	ldr	r0, [r7, #4]
 8017338:	f000 fa63 	bl	8017802 <USBD_CtlError>
            err++;
 801733c:	7afb      	ldrb	r3, [r7, #11]
 801733e:	3301      	adds	r3, #1
 8017340:	72fb      	strb	r3, [r7, #11]
          break;
 8017342:	e021      	b.n	8017388 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801734a:	699b      	ldr	r3, [r3, #24]
 801734c:	2b00      	cmp	r3, #0
 801734e:	d00b      	beq.n	8017368 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017356:	699b      	ldr	r3, [r3, #24]
 8017358:	687a      	ldr	r2, [r7, #4]
 801735a:	7c12      	ldrb	r2, [r2, #16]
 801735c:	f107 0108 	add.w	r1, r7, #8
 8017360:	4610      	mov	r0, r2
 8017362:	4798      	blx	r3
 8017364:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017366:	e00f      	b.n	8017388 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017368:	6839      	ldr	r1, [r7, #0]
 801736a:	6878      	ldr	r0, [r7, #4]
 801736c:	f000 fa49 	bl	8017802 <USBD_CtlError>
            err++;
 8017370:	7afb      	ldrb	r3, [r7, #11]
 8017372:	3301      	adds	r3, #1
 8017374:	72fb      	strb	r3, [r7, #11]
          break;
 8017376:	e007      	b.n	8017388 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8017378:	6839      	ldr	r1, [r7, #0]
 801737a:	6878      	ldr	r0, [r7, #4]
 801737c:	f000 fa41 	bl	8017802 <USBD_CtlError>
          err++;
 8017380:	7afb      	ldrb	r3, [r7, #11]
 8017382:	3301      	adds	r3, #1
 8017384:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8017386:	bf00      	nop
      }
      break;
 8017388:	e037      	b.n	80173fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	7c1b      	ldrb	r3, [r3, #16]
 801738e:	2b00      	cmp	r3, #0
 8017390:	d109      	bne.n	80173a6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801739a:	f107 0208 	add.w	r2, r7, #8
 801739e:	4610      	mov	r0, r2
 80173a0:	4798      	blx	r3
 80173a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80173a4:	e029      	b.n	80173fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80173a6:	6839      	ldr	r1, [r7, #0]
 80173a8:	6878      	ldr	r0, [r7, #4]
 80173aa:	f000 fa2a 	bl	8017802 <USBD_CtlError>
        err++;
 80173ae:	7afb      	ldrb	r3, [r7, #11]
 80173b0:	3301      	adds	r3, #1
 80173b2:	72fb      	strb	r3, [r7, #11]
      break;
 80173b4:	e021      	b.n	80173fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	7c1b      	ldrb	r3, [r3, #16]
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d10d      	bne.n	80173da <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80173c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173c6:	f107 0208 	add.w	r2, r7, #8
 80173ca:	4610      	mov	r0, r2
 80173cc:	4798      	blx	r3
 80173ce:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80173d0:	68fb      	ldr	r3, [r7, #12]
 80173d2:	3301      	adds	r3, #1
 80173d4:	2207      	movs	r2, #7
 80173d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80173d8:	e00f      	b.n	80173fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80173da:	6839      	ldr	r1, [r7, #0]
 80173dc:	6878      	ldr	r0, [r7, #4]
 80173de:	f000 fa10 	bl	8017802 <USBD_CtlError>
        err++;
 80173e2:	7afb      	ldrb	r3, [r7, #11]
 80173e4:	3301      	adds	r3, #1
 80173e6:	72fb      	strb	r3, [r7, #11]
      break;
 80173e8:	e007      	b.n	80173fa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80173ea:	6839      	ldr	r1, [r7, #0]
 80173ec:	6878      	ldr	r0, [r7, #4]
 80173ee:	f000 fa08 	bl	8017802 <USBD_CtlError>
      err++;
 80173f2:	7afb      	ldrb	r3, [r7, #11]
 80173f4:	3301      	adds	r3, #1
 80173f6:	72fb      	strb	r3, [r7, #11]
      break;
 80173f8:	bf00      	nop
  }

  if (err != 0U)
 80173fa:	7afb      	ldrb	r3, [r7, #11]
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d11e      	bne.n	801743e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8017400:	683b      	ldr	r3, [r7, #0]
 8017402:	88db      	ldrh	r3, [r3, #6]
 8017404:	2b00      	cmp	r3, #0
 8017406:	d016      	beq.n	8017436 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8017408:	893b      	ldrh	r3, [r7, #8]
 801740a:	2b00      	cmp	r3, #0
 801740c:	d00e      	beq.n	801742c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801740e:	683b      	ldr	r3, [r7, #0]
 8017410:	88da      	ldrh	r2, [r3, #6]
 8017412:	893b      	ldrh	r3, [r7, #8]
 8017414:	4293      	cmp	r3, r2
 8017416:	bf28      	it	cs
 8017418:	4613      	movcs	r3, r2
 801741a:	b29b      	uxth	r3, r3
 801741c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801741e:	893b      	ldrh	r3, [r7, #8]
 8017420:	461a      	mov	r2, r3
 8017422:	68f9      	ldr	r1, [r7, #12]
 8017424:	6878      	ldr	r0, [r7, #4]
 8017426:	f000 fa5d 	bl	80178e4 <USBD_CtlSendData>
 801742a:	e009      	b.n	8017440 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801742c:	6839      	ldr	r1, [r7, #0]
 801742e:	6878      	ldr	r0, [r7, #4]
 8017430:	f000 f9e7 	bl	8017802 <USBD_CtlError>
 8017434:	e004      	b.n	8017440 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8017436:	6878      	ldr	r0, [r7, #4]
 8017438:	f000 faae 	bl	8017998 <USBD_CtlSendStatus>
 801743c:	e000      	b.n	8017440 <USBD_GetDescriptor+0x2cc>
    return;
 801743e:	bf00      	nop
  }
}
 8017440:	3710      	adds	r7, #16
 8017442:	46bd      	mov	sp, r7
 8017444:	bd80      	pop	{r7, pc}
 8017446:	bf00      	nop

08017448 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017448:	b580      	push	{r7, lr}
 801744a:	b084      	sub	sp, #16
 801744c:	af00      	add	r7, sp, #0
 801744e:	6078      	str	r0, [r7, #4]
 8017450:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8017452:	683b      	ldr	r3, [r7, #0]
 8017454:	889b      	ldrh	r3, [r3, #4]
 8017456:	2b00      	cmp	r3, #0
 8017458:	d131      	bne.n	80174be <USBD_SetAddress+0x76>
 801745a:	683b      	ldr	r3, [r7, #0]
 801745c:	88db      	ldrh	r3, [r3, #6]
 801745e:	2b00      	cmp	r3, #0
 8017460:	d12d      	bne.n	80174be <USBD_SetAddress+0x76>
 8017462:	683b      	ldr	r3, [r7, #0]
 8017464:	885b      	ldrh	r3, [r3, #2]
 8017466:	2b7f      	cmp	r3, #127	; 0x7f
 8017468:	d829      	bhi.n	80174be <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801746a:	683b      	ldr	r3, [r7, #0]
 801746c:	885b      	ldrh	r3, [r3, #2]
 801746e:	b2db      	uxtb	r3, r3
 8017470:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017474:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801747c:	b2db      	uxtb	r3, r3
 801747e:	2b03      	cmp	r3, #3
 8017480:	d104      	bne.n	801748c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8017482:	6839      	ldr	r1, [r7, #0]
 8017484:	6878      	ldr	r0, [r7, #4]
 8017486:	f000 f9bc 	bl	8017802 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801748a:	e01d      	b.n	80174c8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	7bfa      	ldrb	r2, [r7, #15]
 8017490:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8017494:	7bfb      	ldrb	r3, [r7, #15]
 8017496:	4619      	mov	r1, r3
 8017498:	6878      	ldr	r0, [r7, #4]
 801749a:	f003 fee3 	bl	801b264 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801749e:	6878      	ldr	r0, [r7, #4]
 80174a0:	f000 fa7a 	bl	8017998 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80174a4:	7bfb      	ldrb	r3, [r7, #15]
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	d004      	beq.n	80174b4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	2202      	movs	r2, #2
 80174ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80174b2:	e009      	b.n	80174c8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	2201      	movs	r2, #1
 80174b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80174bc:	e004      	b.n	80174c8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80174be:	6839      	ldr	r1, [r7, #0]
 80174c0:	6878      	ldr	r0, [r7, #4]
 80174c2:	f000 f99e 	bl	8017802 <USBD_CtlError>
  }
}
 80174c6:	bf00      	nop
 80174c8:	bf00      	nop
 80174ca:	3710      	adds	r7, #16
 80174cc:	46bd      	mov	sp, r7
 80174ce:	bd80      	pop	{r7, pc}

080174d0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80174d0:	b580      	push	{r7, lr}
 80174d2:	b084      	sub	sp, #16
 80174d4:	af00      	add	r7, sp, #0
 80174d6:	6078      	str	r0, [r7, #4]
 80174d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80174da:	2300      	movs	r3, #0
 80174dc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80174de:	683b      	ldr	r3, [r7, #0]
 80174e0:	885b      	ldrh	r3, [r3, #2]
 80174e2:	b2da      	uxtb	r2, r3
 80174e4:	4b4e      	ldr	r3, [pc, #312]	; (8017620 <USBD_SetConfig+0x150>)
 80174e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80174e8:	4b4d      	ldr	r3, [pc, #308]	; (8017620 <USBD_SetConfig+0x150>)
 80174ea:	781b      	ldrb	r3, [r3, #0]
 80174ec:	2b01      	cmp	r3, #1
 80174ee:	d905      	bls.n	80174fc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80174f0:	6839      	ldr	r1, [r7, #0]
 80174f2:	6878      	ldr	r0, [r7, #4]
 80174f4:	f000 f985 	bl	8017802 <USBD_CtlError>
    return USBD_FAIL;
 80174f8:	2303      	movs	r3, #3
 80174fa:	e08c      	b.n	8017616 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017502:	b2db      	uxtb	r3, r3
 8017504:	2b02      	cmp	r3, #2
 8017506:	d002      	beq.n	801750e <USBD_SetConfig+0x3e>
 8017508:	2b03      	cmp	r3, #3
 801750a:	d029      	beq.n	8017560 <USBD_SetConfig+0x90>
 801750c:	e075      	b.n	80175fa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801750e:	4b44      	ldr	r3, [pc, #272]	; (8017620 <USBD_SetConfig+0x150>)
 8017510:	781b      	ldrb	r3, [r3, #0]
 8017512:	2b00      	cmp	r3, #0
 8017514:	d020      	beq.n	8017558 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8017516:	4b42      	ldr	r3, [pc, #264]	; (8017620 <USBD_SetConfig+0x150>)
 8017518:	781b      	ldrb	r3, [r3, #0]
 801751a:	461a      	mov	r2, r3
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017520:	4b3f      	ldr	r3, [pc, #252]	; (8017620 <USBD_SetConfig+0x150>)
 8017522:	781b      	ldrb	r3, [r3, #0]
 8017524:	4619      	mov	r1, r3
 8017526:	6878      	ldr	r0, [r7, #4]
 8017528:	f7fe ffe1 	bl	80164ee <USBD_SetClassConfig>
 801752c:	4603      	mov	r3, r0
 801752e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8017530:	7bfb      	ldrb	r3, [r7, #15]
 8017532:	2b00      	cmp	r3, #0
 8017534:	d008      	beq.n	8017548 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8017536:	6839      	ldr	r1, [r7, #0]
 8017538:	6878      	ldr	r0, [r7, #4]
 801753a:	f000 f962 	bl	8017802 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	2202      	movs	r2, #2
 8017542:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017546:	e065      	b.n	8017614 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8017548:	6878      	ldr	r0, [r7, #4]
 801754a:	f000 fa25 	bl	8017998 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	2203      	movs	r2, #3
 8017552:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8017556:	e05d      	b.n	8017614 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8017558:	6878      	ldr	r0, [r7, #4]
 801755a:	f000 fa1d 	bl	8017998 <USBD_CtlSendStatus>
      break;
 801755e:	e059      	b.n	8017614 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8017560:	4b2f      	ldr	r3, [pc, #188]	; (8017620 <USBD_SetConfig+0x150>)
 8017562:	781b      	ldrb	r3, [r3, #0]
 8017564:	2b00      	cmp	r3, #0
 8017566:	d112      	bne.n	801758e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	2202      	movs	r2, #2
 801756c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8017570:	4b2b      	ldr	r3, [pc, #172]	; (8017620 <USBD_SetConfig+0x150>)
 8017572:	781b      	ldrb	r3, [r3, #0]
 8017574:	461a      	mov	r2, r3
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801757a:	4b29      	ldr	r3, [pc, #164]	; (8017620 <USBD_SetConfig+0x150>)
 801757c:	781b      	ldrb	r3, [r3, #0]
 801757e:	4619      	mov	r1, r3
 8017580:	6878      	ldr	r0, [r7, #4]
 8017582:	f7fe ffd0 	bl	8016526 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8017586:	6878      	ldr	r0, [r7, #4]
 8017588:	f000 fa06 	bl	8017998 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801758c:	e042      	b.n	8017614 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801758e:	4b24      	ldr	r3, [pc, #144]	; (8017620 <USBD_SetConfig+0x150>)
 8017590:	781b      	ldrb	r3, [r3, #0]
 8017592:	461a      	mov	r2, r3
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	685b      	ldr	r3, [r3, #4]
 8017598:	429a      	cmp	r2, r3
 801759a:	d02a      	beq.n	80175f2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	685b      	ldr	r3, [r3, #4]
 80175a0:	b2db      	uxtb	r3, r3
 80175a2:	4619      	mov	r1, r3
 80175a4:	6878      	ldr	r0, [r7, #4]
 80175a6:	f7fe ffbe 	bl	8016526 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80175aa:	4b1d      	ldr	r3, [pc, #116]	; (8017620 <USBD_SetConfig+0x150>)
 80175ac:	781b      	ldrb	r3, [r3, #0]
 80175ae:	461a      	mov	r2, r3
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80175b4:	4b1a      	ldr	r3, [pc, #104]	; (8017620 <USBD_SetConfig+0x150>)
 80175b6:	781b      	ldrb	r3, [r3, #0]
 80175b8:	4619      	mov	r1, r3
 80175ba:	6878      	ldr	r0, [r7, #4]
 80175bc:	f7fe ff97 	bl	80164ee <USBD_SetClassConfig>
 80175c0:	4603      	mov	r3, r0
 80175c2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80175c4:	7bfb      	ldrb	r3, [r7, #15]
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d00f      	beq.n	80175ea <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80175ca:	6839      	ldr	r1, [r7, #0]
 80175cc:	6878      	ldr	r0, [r7, #4]
 80175ce:	f000 f918 	bl	8017802 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80175d2:	687b      	ldr	r3, [r7, #4]
 80175d4:	685b      	ldr	r3, [r3, #4]
 80175d6:	b2db      	uxtb	r3, r3
 80175d8:	4619      	mov	r1, r3
 80175da:	6878      	ldr	r0, [r7, #4]
 80175dc:	f7fe ffa3 	bl	8016526 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	2202      	movs	r2, #2
 80175e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80175e8:	e014      	b.n	8017614 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80175ea:	6878      	ldr	r0, [r7, #4]
 80175ec:	f000 f9d4 	bl	8017998 <USBD_CtlSendStatus>
      break;
 80175f0:	e010      	b.n	8017614 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80175f2:	6878      	ldr	r0, [r7, #4]
 80175f4:	f000 f9d0 	bl	8017998 <USBD_CtlSendStatus>
      break;
 80175f8:	e00c      	b.n	8017614 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80175fa:	6839      	ldr	r1, [r7, #0]
 80175fc:	6878      	ldr	r0, [r7, #4]
 80175fe:	f000 f900 	bl	8017802 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8017602:	4b07      	ldr	r3, [pc, #28]	; (8017620 <USBD_SetConfig+0x150>)
 8017604:	781b      	ldrb	r3, [r3, #0]
 8017606:	4619      	mov	r1, r3
 8017608:	6878      	ldr	r0, [r7, #4]
 801760a:	f7fe ff8c 	bl	8016526 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801760e:	2303      	movs	r3, #3
 8017610:	73fb      	strb	r3, [r7, #15]
      break;
 8017612:	bf00      	nop
  }

  return ret;
 8017614:	7bfb      	ldrb	r3, [r7, #15]
}
 8017616:	4618      	mov	r0, r3
 8017618:	3710      	adds	r7, #16
 801761a:	46bd      	mov	sp, r7
 801761c:	bd80      	pop	{r7, pc}
 801761e:	bf00      	nop
 8017620:	240016b8 	.word	0x240016b8

08017624 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017624:	b580      	push	{r7, lr}
 8017626:	b082      	sub	sp, #8
 8017628:	af00      	add	r7, sp, #0
 801762a:	6078      	str	r0, [r7, #4]
 801762c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801762e:	683b      	ldr	r3, [r7, #0]
 8017630:	88db      	ldrh	r3, [r3, #6]
 8017632:	2b01      	cmp	r3, #1
 8017634:	d004      	beq.n	8017640 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8017636:	6839      	ldr	r1, [r7, #0]
 8017638:	6878      	ldr	r0, [r7, #4]
 801763a:	f000 f8e2 	bl	8017802 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801763e:	e023      	b.n	8017688 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017646:	b2db      	uxtb	r3, r3
 8017648:	2b02      	cmp	r3, #2
 801764a:	dc02      	bgt.n	8017652 <USBD_GetConfig+0x2e>
 801764c:	2b00      	cmp	r3, #0
 801764e:	dc03      	bgt.n	8017658 <USBD_GetConfig+0x34>
 8017650:	e015      	b.n	801767e <USBD_GetConfig+0x5a>
 8017652:	2b03      	cmp	r3, #3
 8017654:	d00b      	beq.n	801766e <USBD_GetConfig+0x4a>
 8017656:	e012      	b.n	801767e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	2200      	movs	r2, #0
 801765c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	3308      	adds	r3, #8
 8017662:	2201      	movs	r2, #1
 8017664:	4619      	mov	r1, r3
 8017666:	6878      	ldr	r0, [r7, #4]
 8017668:	f000 f93c 	bl	80178e4 <USBD_CtlSendData>
        break;
 801766c:	e00c      	b.n	8017688 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	3304      	adds	r3, #4
 8017672:	2201      	movs	r2, #1
 8017674:	4619      	mov	r1, r3
 8017676:	6878      	ldr	r0, [r7, #4]
 8017678:	f000 f934 	bl	80178e4 <USBD_CtlSendData>
        break;
 801767c:	e004      	b.n	8017688 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801767e:	6839      	ldr	r1, [r7, #0]
 8017680:	6878      	ldr	r0, [r7, #4]
 8017682:	f000 f8be 	bl	8017802 <USBD_CtlError>
        break;
 8017686:	bf00      	nop
}
 8017688:	bf00      	nop
 801768a:	3708      	adds	r7, #8
 801768c:	46bd      	mov	sp, r7
 801768e:	bd80      	pop	{r7, pc}

08017690 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017690:	b580      	push	{r7, lr}
 8017692:	b082      	sub	sp, #8
 8017694:	af00      	add	r7, sp, #0
 8017696:	6078      	str	r0, [r7, #4]
 8017698:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80176a0:	b2db      	uxtb	r3, r3
 80176a2:	3b01      	subs	r3, #1
 80176a4:	2b02      	cmp	r3, #2
 80176a6:	d81e      	bhi.n	80176e6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80176a8:	683b      	ldr	r3, [r7, #0]
 80176aa:	88db      	ldrh	r3, [r3, #6]
 80176ac:	2b02      	cmp	r3, #2
 80176ae:	d004      	beq.n	80176ba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80176b0:	6839      	ldr	r1, [r7, #0]
 80176b2:	6878      	ldr	r0, [r7, #4]
 80176b4:	f000 f8a5 	bl	8017802 <USBD_CtlError>
        break;
 80176b8:	e01a      	b.n	80176f0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	2201      	movs	r2, #1
 80176be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80176c6:	2b00      	cmp	r3, #0
 80176c8:	d005      	beq.n	80176d6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	68db      	ldr	r3, [r3, #12]
 80176ce:	f043 0202 	orr.w	r2, r3, #2
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	330c      	adds	r3, #12
 80176da:	2202      	movs	r2, #2
 80176dc:	4619      	mov	r1, r3
 80176de:	6878      	ldr	r0, [r7, #4]
 80176e0:	f000 f900 	bl	80178e4 <USBD_CtlSendData>
      break;
 80176e4:	e004      	b.n	80176f0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80176e6:	6839      	ldr	r1, [r7, #0]
 80176e8:	6878      	ldr	r0, [r7, #4]
 80176ea:	f000 f88a 	bl	8017802 <USBD_CtlError>
      break;
 80176ee:	bf00      	nop
  }
}
 80176f0:	bf00      	nop
 80176f2:	3708      	adds	r7, #8
 80176f4:	46bd      	mov	sp, r7
 80176f6:	bd80      	pop	{r7, pc}

080176f8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80176f8:	b580      	push	{r7, lr}
 80176fa:	b082      	sub	sp, #8
 80176fc:	af00      	add	r7, sp, #0
 80176fe:	6078      	str	r0, [r7, #4]
 8017700:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017702:	683b      	ldr	r3, [r7, #0]
 8017704:	885b      	ldrh	r3, [r3, #2]
 8017706:	2b01      	cmp	r3, #1
 8017708:	d107      	bne.n	801771a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	2201      	movs	r2, #1
 801770e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8017712:	6878      	ldr	r0, [r7, #4]
 8017714:	f000 f940 	bl	8017998 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8017718:	e013      	b.n	8017742 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801771a:	683b      	ldr	r3, [r7, #0]
 801771c:	885b      	ldrh	r3, [r3, #2]
 801771e:	2b02      	cmp	r3, #2
 8017720:	d10b      	bne.n	801773a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8017722:	683b      	ldr	r3, [r7, #0]
 8017724:	889b      	ldrh	r3, [r3, #4]
 8017726:	0a1b      	lsrs	r3, r3, #8
 8017728:	b29b      	uxth	r3, r3
 801772a:	b2da      	uxtb	r2, r3
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8017732:	6878      	ldr	r0, [r7, #4]
 8017734:	f000 f930 	bl	8017998 <USBD_CtlSendStatus>
}
 8017738:	e003      	b.n	8017742 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801773a:	6839      	ldr	r1, [r7, #0]
 801773c:	6878      	ldr	r0, [r7, #4]
 801773e:	f000 f860 	bl	8017802 <USBD_CtlError>
}
 8017742:	bf00      	nop
 8017744:	3708      	adds	r7, #8
 8017746:	46bd      	mov	sp, r7
 8017748:	bd80      	pop	{r7, pc}

0801774a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801774a:	b580      	push	{r7, lr}
 801774c:	b082      	sub	sp, #8
 801774e:	af00      	add	r7, sp, #0
 8017750:	6078      	str	r0, [r7, #4]
 8017752:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801775a:	b2db      	uxtb	r3, r3
 801775c:	3b01      	subs	r3, #1
 801775e:	2b02      	cmp	r3, #2
 8017760:	d80b      	bhi.n	801777a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017762:	683b      	ldr	r3, [r7, #0]
 8017764:	885b      	ldrh	r3, [r3, #2]
 8017766:	2b01      	cmp	r3, #1
 8017768:	d10c      	bne.n	8017784 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	2200      	movs	r2, #0
 801776e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8017772:	6878      	ldr	r0, [r7, #4]
 8017774:	f000 f910 	bl	8017998 <USBD_CtlSendStatus>
      }
      break;
 8017778:	e004      	b.n	8017784 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801777a:	6839      	ldr	r1, [r7, #0]
 801777c:	6878      	ldr	r0, [r7, #4]
 801777e:	f000 f840 	bl	8017802 <USBD_CtlError>
      break;
 8017782:	e000      	b.n	8017786 <USBD_ClrFeature+0x3c>
      break;
 8017784:	bf00      	nop
  }
}
 8017786:	bf00      	nop
 8017788:	3708      	adds	r7, #8
 801778a:	46bd      	mov	sp, r7
 801778c:	bd80      	pop	{r7, pc}

0801778e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801778e:	b580      	push	{r7, lr}
 8017790:	b084      	sub	sp, #16
 8017792:	af00      	add	r7, sp, #0
 8017794:	6078      	str	r0, [r7, #4]
 8017796:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8017798:	683b      	ldr	r3, [r7, #0]
 801779a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801779c:	68fb      	ldr	r3, [r7, #12]
 801779e:	781a      	ldrb	r2, [r3, #0]
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80177a4:	68fb      	ldr	r3, [r7, #12]
 80177a6:	3301      	adds	r3, #1
 80177a8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80177aa:	68fb      	ldr	r3, [r7, #12]
 80177ac:	781a      	ldrb	r2, [r3, #0]
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80177b2:	68fb      	ldr	r3, [r7, #12]
 80177b4:	3301      	adds	r3, #1
 80177b6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80177b8:	68f8      	ldr	r0, [r7, #12]
 80177ba:	f7ff fa41 	bl	8016c40 <SWAPBYTE>
 80177be:	4603      	mov	r3, r0
 80177c0:	461a      	mov	r2, r3
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80177c6:	68fb      	ldr	r3, [r7, #12]
 80177c8:	3301      	adds	r3, #1
 80177ca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80177cc:	68fb      	ldr	r3, [r7, #12]
 80177ce:	3301      	adds	r3, #1
 80177d0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80177d2:	68f8      	ldr	r0, [r7, #12]
 80177d4:	f7ff fa34 	bl	8016c40 <SWAPBYTE>
 80177d8:	4603      	mov	r3, r0
 80177da:	461a      	mov	r2, r3
 80177dc:	687b      	ldr	r3, [r7, #4]
 80177de:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80177e0:	68fb      	ldr	r3, [r7, #12]
 80177e2:	3301      	adds	r3, #1
 80177e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80177e6:	68fb      	ldr	r3, [r7, #12]
 80177e8:	3301      	adds	r3, #1
 80177ea:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80177ec:	68f8      	ldr	r0, [r7, #12]
 80177ee:	f7ff fa27 	bl	8016c40 <SWAPBYTE>
 80177f2:	4603      	mov	r3, r0
 80177f4:	461a      	mov	r2, r3
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	80da      	strh	r2, [r3, #6]
}
 80177fa:	bf00      	nop
 80177fc:	3710      	adds	r7, #16
 80177fe:	46bd      	mov	sp, r7
 8017800:	bd80      	pop	{r7, pc}

08017802 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017802:	b580      	push	{r7, lr}
 8017804:	b082      	sub	sp, #8
 8017806:	af00      	add	r7, sp, #0
 8017808:	6078      	str	r0, [r7, #4]
 801780a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801780c:	2180      	movs	r1, #128	; 0x80
 801780e:	6878      	ldr	r0, [r7, #4]
 8017810:	f003 fcbe 	bl	801b190 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8017814:	2100      	movs	r1, #0
 8017816:	6878      	ldr	r0, [r7, #4]
 8017818:	f003 fcba 	bl	801b190 <USBD_LL_StallEP>
}
 801781c:	bf00      	nop
 801781e:	3708      	adds	r7, #8
 8017820:	46bd      	mov	sp, r7
 8017822:	bd80      	pop	{r7, pc}

08017824 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8017824:	b580      	push	{r7, lr}
 8017826:	b086      	sub	sp, #24
 8017828:	af00      	add	r7, sp, #0
 801782a:	60f8      	str	r0, [r7, #12]
 801782c:	60b9      	str	r1, [r7, #8]
 801782e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8017830:	2300      	movs	r3, #0
 8017832:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8017834:	68fb      	ldr	r3, [r7, #12]
 8017836:	2b00      	cmp	r3, #0
 8017838:	d036      	beq.n	80178a8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801783a:	68fb      	ldr	r3, [r7, #12]
 801783c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801783e:	6938      	ldr	r0, [r7, #16]
 8017840:	f000 f836 	bl	80178b0 <USBD_GetLen>
 8017844:	4603      	mov	r3, r0
 8017846:	3301      	adds	r3, #1
 8017848:	b29b      	uxth	r3, r3
 801784a:	005b      	lsls	r3, r3, #1
 801784c:	b29a      	uxth	r2, r3
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8017852:	7dfb      	ldrb	r3, [r7, #23]
 8017854:	68ba      	ldr	r2, [r7, #8]
 8017856:	4413      	add	r3, r2
 8017858:	687a      	ldr	r2, [r7, #4]
 801785a:	7812      	ldrb	r2, [r2, #0]
 801785c:	701a      	strb	r2, [r3, #0]
  idx++;
 801785e:	7dfb      	ldrb	r3, [r7, #23]
 8017860:	3301      	adds	r3, #1
 8017862:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8017864:	7dfb      	ldrb	r3, [r7, #23]
 8017866:	68ba      	ldr	r2, [r7, #8]
 8017868:	4413      	add	r3, r2
 801786a:	2203      	movs	r2, #3
 801786c:	701a      	strb	r2, [r3, #0]
  idx++;
 801786e:	7dfb      	ldrb	r3, [r7, #23]
 8017870:	3301      	adds	r3, #1
 8017872:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8017874:	e013      	b.n	801789e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8017876:	7dfb      	ldrb	r3, [r7, #23]
 8017878:	68ba      	ldr	r2, [r7, #8]
 801787a:	4413      	add	r3, r2
 801787c:	693a      	ldr	r2, [r7, #16]
 801787e:	7812      	ldrb	r2, [r2, #0]
 8017880:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8017882:	693b      	ldr	r3, [r7, #16]
 8017884:	3301      	adds	r3, #1
 8017886:	613b      	str	r3, [r7, #16]
    idx++;
 8017888:	7dfb      	ldrb	r3, [r7, #23]
 801788a:	3301      	adds	r3, #1
 801788c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801788e:	7dfb      	ldrb	r3, [r7, #23]
 8017890:	68ba      	ldr	r2, [r7, #8]
 8017892:	4413      	add	r3, r2
 8017894:	2200      	movs	r2, #0
 8017896:	701a      	strb	r2, [r3, #0]
    idx++;
 8017898:	7dfb      	ldrb	r3, [r7, #23]
 801789a:	3301      	adds	r3, #1
 801789c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801789e:	693b      	ldr	r3, [r7, #16]
 80178a0:	781b      	ldrb	r3, [r3, #0]
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d1e7      	bne.n	8017876 <USBD_GetString+0x52>
 80178a6:	e000      	b.n	80178aa <USBD_GetString+0x86>
    return;
 80178a8:	bf00      	nop
  }
}
 80178aa:	3718      	adds	r7, #24
 80178ac:	46bd      	mov	sp, r7
 80178ae:	bd80      	pop	{r7, pc}

080178b0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80178b0:	b480      	push	{r7}
 80178b2:	b085      	sub	sp, #20
 80178b4:	af00      	add	r7, sp, #0
 80178b6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80178b8:	2300      	movs	r3, #0
 80178ba:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80178c0:	e005      	b.n	80178ce <USBD_GetLen+0x1e>
  {
    len++;
 80178c2:	7bfb      	ldrb	r3, [r7, #15]
 80178c4:	3301      	adds	r3, #1
 80178c6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80178c8:	68bb      	ldr	r3, [r7, #8]
 80178ca:	3301      	adds	r3, #1
 80178cc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80178ce:	68bb      	ldr	r3, [r7, #8]
 80178d0:	781b      	ldrb	r3, [r3, #0]
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d1f5      	bne.n	80178c2 <USBD_GetLen+0x12>
  }

  return len;
 80178d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80178d8:	4618      	mov	r0, r3
 80178da:	3714      	adds	r7, #20
 80178dc:	46bd      	mov	sp, r7
 80178de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178e2:	4770      	bx	lr

080178e4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80178e4:	b580      	push	{r7, lr}
 80178e6:	b084      	sub	sp, #16
 80178e8:	af00      	add	r7, sp, #0
 80178ea:	60f8      	str	r0, [r7, #12]
 80178ec:	60b9      	str	r1, [r7, #8]
 80178ee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80178f0:	68fb      	ldr	r3, [r7, #12]
 80178f2:	2202      	movs	r2, #2
 80178f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80178f8:	68fb      	ldr	r3, [r7, #12]
 80178fa:	687a      	ldr	r2, [r7, #4]
 80178fc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80178fe:	68fb      	ldr	r3, [r7, #12]
 8017900:	687a      	ldr	r2, [r7, #4]
 8017902:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	68ba      	ldr	r2, [r7, #8]
 8017908:	2100      	movs	r1, #0
 801790a:	68f8      	ldr	r0, [r7, #12]
 801790c:	f003 fcc9 	bl	801b2a2 <USBD_LL_Transmit>

  return USBD_OK;
 8017910:	2300      	movs	r3, #0
}
 8017912:	4618      	mov	r0, r3
 8017914:	3710      	adds	r7, #16
 8017916:	46bd      	mov	sp, r7
 8017918:	bd80      	pop	{r7, pc}

0801791a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801791a:	b580      	push	{r7, lr}
 801791c:	b084      	sub	sp, #16
 801791e:	af00      	add	r7, sp, #0
 8017920:	60f8      	str	r0, [r7, #12]
 8017922:	60b9      	str	r1, [r7, #8]
 8017924:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	68ba      	ldr	r2, [r7, #8]
 801792a:	2100      	movs	r1, #0
 801792c:	68f8      	ldr	r0, [r7, #12]
 801792e:	f003 fcb8 	bl	801b2a2 <USBD_LL_Transmit>

  return USBD_OK;
 8017932:	2300      	movs	r3, #0
}
 8017934:	4618      	mov	r0, r3
 8017936:	3710      	adds	r7, #16
 8017938:	46bd      	mov	sp, r7
 801793a:	bd80      	pop	{r7, pc}

0801793c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801793c:	b580      	push	{r7, lr}
 801793e:	b084      	sub	sp, #16
 8017940:	af00      	add	r7, sp, #0
 8017942:	60f8      	str	r0, [r7, #12]
 8017944:	60b9      	str	r1, [r7, #8]
 8017946:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8017948:	68fb      	ldr	r3, [r7, #12]
 801794a:	2203      	movs	r2, #3
 801794c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8017950:	68fb      	ldr	r3, [r7, #12]
 8017952:	687a      	ldr	r2, [r7, #4]
 8017954:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8017958:	68fb      	ldr	r3, [r7, #12]
 801795a:	687a      	ldr	r2, [r7, #4]
 801795c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	68ba      	ldr	r2, [r7, #8]
 8017964:	2100      	movs	r1, #0
 8017966:	68f8      	ldr	r0, [r7, #12]
 8017968:	f003 fcbc 	bl	801b2e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801796c:	2300      	movs	r3, #0
}
 801796e:	4618      	mov	r0, r3
 8017970:	3710      	adds	r7, #16
 8017972:	46bd      	mov	sp, r7
 8017974:	bd80      	pop	{r7, pc}

08017976 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8017976:	b580      	push	{r7, lr}
 8017978:	b084      	sub	sp, #16
 801797a:	af00      	add	r7, sp, #0
 801797c:	60f8      	str	r0, [r7, #12]
 801797e:	60b9      	str	r1, [r7, #8]
 8017980:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	68ba      	ldr	r2, [r7, #8]
 8017986:	2100      	movs	r1, #0
 8017988:	68f8      	ldr	r0, [r7, #12]
 801798a:	f003 fcab 	bl	801b2e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801798e:	2300      	movs	r3, #0
}
 8017990:	4618      	mov	r0, r3
 8017992:	3710      	adds	r7, #16
 8017994:	46bd      	mov	sp, r7
 8017996:	bd80      	pop	{r7, pc}

08017998 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8017998:	b580      	push	{r7, lr}
 801799a:	b082      	sub	sp, #8
 801799c:	af00      	add	r7, sp, #0
 801799e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	2204      	movs	r2, #4
 80179a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80179a8:	2300      	movs	r3, #0
 80179aa:	2200      	movs	r2, #0
 80179ac:	2100      	movs	r1, #0
 80179ae:	6878      	ldr	r0, [r7, #4]
 80179b0:	f003 fc77 	bl	801b2a2 <USBD_LL_Transmit>

  return USBD_OK;
 80179b4:	2300      	movs	r3, #0
}
 80179b6:	4618      	mov	r0, r3
 80179b8:	3708      	adds	r7, #8
 80179ba:	46bd      	mov	sp, r7
 80179bc:	bd80      	pop	{r7, pc}

080179be <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80179be:	b580      	push	{r7, lr}
 80179c0:	b082      	sub	sp, #8
 80179c2:	af00      	add	r7, sp, #0
 80179c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	2205      	movs	r2, #5
 80179ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80179ce:	2300      	movs	r3, #0
 80179d0:	2200      	movs	r2, #0
 80179d2:	2100      	movs	r1, #0
 80179d4:	6878      	ldr	r0, [r7, #4]
 80179d6:	f003 fc85 	bl	801b2e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80179da:	2300      	movs	r3, #0
}
 80179dc:	4618      	mov	r0, r3
 80179de:	3708      	adds	r7, #8
 80179e0:	46bd      	mov	sp, r7
 80179e2:	bd80      	pop	{r7, pc}

080179e4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80179e4:	b580      	push	{r7, lr}
 80179e6:	b084      	sub	sp, #16
 80179e8:	af00      	add	r7, sp, #0
 80179ea:	4603      	mov	r3, r0
 80179ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80179ee:	79fb      	ldrb	r3, [r7, #7]
 80179f0:	4a08      	ldr	r2, [pc, #32]	; (8017a14 <disk_status+0x30>)
 80179f2:	009b      	lsls	r3, r3, #2
 80179f4:	4413      	add	r3, r2
 80179f6:	685b      	ldr	r3, [r3, #4]
 80179f8:	685b      	ldr	r3, [r3, #4]
 80179fa:	79fa      	ldrb	r2, [r7, #7]
 80179fc:	4905      	ldr	r1, [pc, #20]	; (8017a14 <disk_status+0x30>)
 80179fe:	440a      	add	r2, r1
 8017a00:	7a12      	ldrb	r2, [r2, #8]
 8017a02:	4610      	mov	r0, r2
 8017a04:	4798      	blx	r3
 8017a06:	4603      	mov	r3, r0
 8017a08:	73fb      	strb	r3, [r7, #15]
  return stat;
 8017a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8017a0c:	4618      	mov	r0, r3
 8017a0e:	3710      	adds	r7, #16
 8017a10:	46bd      	mov	sp, r7
 8017a12:	bd80      	pop	{r7, pc}
 8017a14:	240018e4 	.word	0x240018e4

08017a18 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8017a18:	b580      	push	{r7, lr}
 8017a1a:	b084      	sub	sp, #16
 8017a1c:	af00      	add	r7, sp, #0
 8017a1e:	4603      	mov	r3, r0
 8017a20:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8017a22:	2300      	movs	r3, #0
 8017a24:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8017a26:	79fb      	ldrb	r3, [r7, #7]
 8017a28:	4a0d      	ldr	r2, [pc, #52]	; (8017a60 <disk_initialize+0x48>)
 8017a2a:	5cd3      	ldrb	r3, [r2, r3]
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	d111      	bne.n	8017a54 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8017a30:	79fb      	ldrb	r3, [r7, #7]
 8017a32:	4a0b      	ldr	r2, [pc, #44]	; (8017a60 <disk_initialize+0x48>)
 8017a34:	2101      	movs	r1, #1
 8017a36:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8017a38:	79fb      	ldrb	r3, [r7, #7]
 8017a3a:	4a09      	ldr	r2, [pc, #36]	; (8017a60 <disk_initialize+0x48>)
 8017a3c:	009b      	lsls	r3, r3, #2
 8017a3e:	4413      	add	r3, r2
 8017a40:	685b      	ldr	r3, [r3, #4]
 8017a42:	681b      	ldr	r3, [r3, #0]
 8017a44:	79fa      	ldrb	r2, [r7, #7]
 8017a46:	4906      	ldr	r1, [pc, #24]	; (8017a60 <disk_initialize+0x48>)
 8017a48:	440a      	add	r2, r1
 8017a4a:	7a12      	ldrb	r2, [r2, #8]
 8017a4c:	4610      	mov	r0, r2
 8017a4e:	4798      	blx	r3
 8017a50:	4603      	mov	r3, r0
 8017a52:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8017a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8017a56:	4618      	mov	r0, r3
 8017a58:	3710      	adds	r7, #16
 8017a5a:	46bd      	mov	sp, r7
 8017a5c:	bd80      	pop	{r7, pc}
 8017a5e:	bf00      	nop
 8017a60:	240018e4 	.word	0x240018e4

08017a64 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8017a64:	b590      	push	{r4, r7, lr}
 8017a66:	b087      	sub	sp, #28
 8017a68:	af00      	add	r7, sp, #0
 8017a6a:	60b9      	str	r1, [r7, #8]
 8017a6c:	607a      	str	r2, [r7, #4]
 8017a6e:	603b      	str	r3, [r7, #0]
 8017a70:	4603      	mov	r3, r0
 8017a72:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8017a74:	7bfb      	ldrb	r3, [r7, #15]
 8017a76:	4a0a      	ldr	r2, [pc, #40]	; (8017aa0 <disk_read+0x3c>)
 8017a78:	009b      	lsls	r3, r3, #2
 8017a7a:	4413      	add	r3, r2
 8017a7c:	685b      	ldr	r3, [r3, #4]
 8017a7e:	689c      	ldr	r4, [r3, #8]
 8017a80:	7bfb      	ldrb	r3, [r7, #15]
 8017a82:	4a07      	ldr	r2, [pc, #28]	; (8017aa0 <disk_read+0x3c>)
 8017a84:	4413      	add	r3, r2
 8017a86:	7a18      	ldrb	r0, [r3, #8]
 8017a88:	683b      	ldr	r3, [r7, #0]
 8017a8a:	687a      	ldr	r2, [r7, #4]
 8017a8c:	68b9      	ldr	r1, [r7, #8]
 8017a8e:	47a0      	blx	r4
 8017a90:	4603      	mov	r3, r0
 8017a92:	75fb      	strb	r3, [r7, #23]
  return res;
 8017a94:	7dfb      	ldrb	r3, [r7, #23]
}
 8017a96:	4618      	mov	r0, r3
 8017a98:	371c      	adds	r7, #28
 8017a9a:	46bd      	mov	sp, r7
 8017a9c:	bd90      	pop	{r4, r7, pc}
 8017a9e:	bf00      	nop
 8017aa0:	240018e4 	.word	0x240018e4

08017aa4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8017aa4:	b590      	push	{r4, r7, lr}
 8017aa6:	b087      	sub	sp, #28
 8017aa8:	af00      	add	r7, sp, #0
 8017aaa:	60b9      	str	r1, [r7, #8]
 8017aac:	607a      	str	r2, [r7, #4]
 8017aae:	603b      	str	r3, [r7, #0]
 8017ab0:	4603      	mov	r3, r0
 8017ab2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8017ab4:	7bfb      	ldrb	r3, [r7, #15]
 8017ab6:	4a0a      	ldr	r2, [pc, #40]	; (8017ae0 <disk_write+0x3c>)
 8017ab8:	009b      	lsls	r3, r3, #2
 8017aba:	4413      	add	r3, r2
 8017abc:	685b      	ldr	r3, [r3, #4]
 8017abe:	68dc      	ldr	r4, [r3, #12]
 8017ac0:	7bfb      	ldrb	r3, [r7, #15]
 8017ac2:	4a07      	ldr	r2, [pc, #28]	; (8017ae0 <disk_write+0x3c>)
 8017ac4:	4413      	add	r3, r2
 8017ac6:	7a18      	ldrb	r0, [r3, #8]
 8017ac8:	683b      	ldr	r3, [r7, #0]
 8017aca:	687a      	ldr	r2, [r7, #4]
 8017acc:	68b9      	ldr	r1, [r7, #8]
 8017ace:	47a0      	blx	r4
 8017ad0:	4603      	mov	r3, r0
 8017ad2:	75fb      	strb	r3, [r7, #23]
  return res;
 8017ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8017ad6:	4618      	mov	r0, r3
 8017ad8:	371c      	adds	r7, #28
 8017ada:	46bd      	mov	sp, r7
 8017adc:	bd90      	pop	{r4, r7, pc}
 8017ade:	bf00      	nop
 8017ae0:	240018e4 	.word	0x240018e4

08017ae4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8017ae4:	b580      	push	{r7, lr}
 8017ae6:	b084      	sub	sp, #16
 8017ae8:	af00      	add	r7, sp, #0
 8017aea:	4603      	mov	r3, r0
 8017aec:	603a      	str	r2, [r7, #0]
 8017aee:	71fb      	strb	r3, [r7, #7]
 8017af0:	460b      	mov	r3, r1
 8017af2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8017af4:	79fb      	ldrb	r3, [r7, #7]
 8017af6:	4a09      	ldr	r2, [pc, #36]	; (8017b1c <disk_ioctl+0x38>)
 8017af8:	009b      	lsls	r3, r3, #2
 8017afa:	4413      	add	r3, r2
 8017afc:	685b      	ldr	r3, [r3, #4]
 8017afe:	691b      	ldr	r3, [r3, #16]
 8017b00:	79fa      	ldrb	r2, [r7, #7]
 8017b02:	4906      	ldr	r1, [pc, #24]	; (8017b1c <disk_ioctl+0x38>)
 8017b04:	440a      	add	r2, r1
 8017b06:	7a10      	ldrb	r0, [r2, #8]
 8017b08:	79b9      	ldrb	r1, [r7, #6]
 8017b0a:	683a      	ldr	r2, [r7, #0]
 8017b0c:	4798      	blx	r3
 8017b0e:	4603      	mov	r3, r0
 8017b10:	73fb      	strb	r3, [r7, #15]
  return res;
 8017b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8017b14:	4618      	mov	r0, r3
 8017b16:	3710      	adds	r7, #16
 8017b18:	46bd      	mov	sp, r7
 8017b1a:	bd80      	pop	{r7, pc}
 8017b1c:	240018e4 	.word	0x240018e4

08017b20 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8017b20:	b480      	push	{r7}
 8017b22:	b085      	sub	sp, #20
 8017b24:	af00      	add	r7, sp, #0
 8017b26:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8017b28:	687b      	ldr	r3, [r7, #4]
 8017b2a:	3301      	adds	r3, #1
 8017b2c:	781b      	ldrb	r3, [r3, #0]
 8017b2e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8017b30:	89fb      	ldrh	r3, [r7, #14]
 8017b32:	021b      	lsls	r3, r3, #8
 8017b34:	b21a      	sxth	r2, r3
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	781b      	ldrb	r3, [r3, #0]
 8017b3a:	b21b      	sxth	r3, r3
 8017b3c:	4313      	orrs	r3, r2
 8017b3e:	b21b      	sxth	r3, r3
 8017b40:	81fb      	strh	r3, [r7, #14]
	return rv;
 8017b42:	89fb      	ldrh	r3, [r7, #14]
}
 8017b44:	4618      	mov	r0, r3
 8017b46:	3714      	adds	r7, #20
 8017b48:	46bd      	mov	sp, r7
 8017b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b4e:	4770      	bx	lr

08017b50 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8017b50:	b480      	push	{r7}
 8017b52:	b085      	sub	sp, #20
 8017b54:	af00      	add	r7, sp, #0
 8017b56:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	3303      	adds	r3, #3
 8017b5c:	781b      	ldrb	r3, [r3, #0]
 8017b5e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8017b60:	68fb      	ldr	r3, [r7, #12]
 8017b62:	021b      	lsls	r3, r3, #8
 8017b64:	687a      	ldr	r2, [r7, #4]
 8017b66:	3202      	adds	r2, #2
 8017b68:	7812      	ldrb	r2, [r2, #0]
 8017b6a:	4313      	orrs	r3, r2
 8017b6c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8017b6e:	68fb      	ldr	r3, [r7, #12]
 8017b70:	021b      	lsls	r3, r3, #8
 8017b72:	687a      	ldr	r2, [r7, #4]
 8017b74:	3201      	adds	r2, #1
 8017b76:	7812      	ldrb	r2, [r2, #0]
 8017b78:	4313      	orrs	r3, r2
 8017b7a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8017b7c:	68fb      	ldr	r3, [r7, #12]
 8017b7e:	021b      	lsls	r3, r3, #8
 8017b80:	687a      	ldr	r2, [r7, #4]
 8017b82:	7812      	ldrb	r2, [r2, #0]
 8017b84:	4313      	orrs	r3, r2
 8017b86:	60fb      	str	r3, [r7, #12]
	return rv;
 8017b88:	68fb      	ldr	r3, [r7, #12]
}
 8017b8a:	4618      	mov	r0, r3
 8017b8c:	3714      	adds	r7, #20
 8017b8e:	46bd      	mov	sp, r7
 8017b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b94:	4770      	bx	lr

08017b96 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8017b96:	b480      	push	{r7}
 8017b98:	b083      	sub	sp, #12
 8017b9a:	af00      	add	r7, sp, #0
 8017b9c:	6078      	str	r0, [r7, #4]
 8017b9e:	460b      	mov	r3, r1
 8017ba0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8017ba2:	687b      	ldr	r3, [r7, #4]
 8017ba4:	1c5a      	adds	r2, r3, #1
 8017ba6:	607a      	str	r2, [r7, #4]
 8017ba8:	887a      	ldrh	r2, [r7, #2]
 8017baa:	b2d2      	uxtb	r2, r2
 8017bac:	701a      	strb	r2, [r3, #0]
 8017bae:	887b      	ldrh	r3, [r7, #2]
 8017bb0:	0a1b      	lsrs	r3, r3, #8
 8017bb2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	1c5a      	adds	r2, r3, #1
 8017bb8:	607a      	str	r2, [r7, #4]
 8017bba:	887a      	ldrh	r2, [r7, #2]
 8017bbc:	b2d2      	uxtb	r2, r2
 8017bbe:	701a      	strb	r2, [r3, #0]
}
 8017bc0:	bf00      	nop
 8017bc2:	370c      	adds	r7, #12
 8017bc4:	46bd      	mov	sp, r7
 8017bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bca:	4770      	bx	lr

08017bcc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8017bcc:	b480      	push	{r7}
 8017bce:	b083      	sub	sp, #12
 8017bd0:	af00      	add	r7, sp, #0
 8017bd2:	6078      	str	r0, [r7, #4]
 8017bd4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	1c5a      	adds	r2, r3, #1
 8017bda:	607a      	str	r2, [r7, #4]
 8017bdc:	683a      	ldr	r2, [r7, #0]
 8017bde:	b2d2      	uxtb	r2, r2
 8017be0:	701a      	strb	r2, [r3, #0]
 8017be2:	683b      	ldr	r3, [r7, #0]
 8017be4:	0a1b      	lsrs	r3, r3, #8
 8017be6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8017be8:	687b      	ldr	r3, [r7, #4]
 8017bea:	1c5a      	adds	r2, r3, #1
 8017bec:	607a      	str	r2, [r7, #4]
 8017bee:	683a      	ldr	r2, [r7, #0]
 8017bf0:	b2d2      	uxtb	r2, r2
 8017bf2:	701a      	strb	r2, [r3, #0]
 8017bf4:	683b      	ldr	r3, [r7, #0]
 8017bf6:	0a1b      	lsrs	r3, r3, #8
 8017bf8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8017bfa:	687b      	ldr	r3, [r7, #4]
 8017bfc:	1c5a      	adds	r2, r3, #1
 8017bfe:	607a      	str	r2, [r7, #4]
 8017c00:	683a      	ldr	r2, [r7, #0]
 8017c02:	b2d2      	uxtb	r2, r2
 8017c04:	701a      	strb	r2, [r3, #0]
 8017c06:	683b      	ldr	r3, [r7, #0]
 8017c08:	0a1b      	lsrs	r3, r3, #8
 8017c0a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8017c0c:	687b      	ldr	r3, [r7, #4]
 8017c0e:	1c5a      	adds	r2, r3, #1
 8017c10:	607a      	str	r2, [r7, #4]
 8017c12:	683a      	ldr	r2, [r7, #0]
 8017c14:	b2d2      	uxtb	r2, r2
 8017c16:	701a      	strb	r2, [r3, #0]
}
 8017c18:	bf00      	nop
 8017c1a:	370c      	adds	r7, #12
 8017c1c:	46bd      	mov	sp, r7
 8017c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c22:	4770      	bx	lr

08017c24 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8017c24:	b480      	push	{r7}
 8017c26:	b087      	sub	sp, #28
 8017c28:	af00      	add	r7, sp, #0
 8017c2a:	60f8      	str	r0, [r7, #12]
 8017c2c:	60b9      	str	r1, [r7, #8]
 8017c2e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8017c30:	68fb      	ldr	r3, [r7, #12]
 8017c32:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8017c34:	68bb      	ldr	r3, [r7, #8]
 8017c36:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	d00d      	beq.n	8017c5a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8017c3e:	693a      	ldr	r2, [r7, #16]
 8017c40:	1c53      	adds	r3, r2, #1
 8017c42:	613b      	str	r3, [r7, #16]
 8017c44:	697b      	ldr	r3, [r7, #20]
 8017c46:	1c59      	adds	r1, r3, #1
 8017c48:	6179      	str	r1, [r7, #20]
 8017c4a:	7812      	ldrb	r2, [r2, #0]
 8017c4c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	3b01      	subs	r3, #1
 8017c52:	607b      	str	r3, [r7, #4]
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	d1f1      	bne.n	8017c3e <mem_cpy+0x1a>
	}
}
 8017c5a:	bf00      	nop
 8017c5c:	371c      	adds	r7, #28
 8017c5e:	46bd      	mov	sp, r7
 8017c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c64:	4770      	bx	lr

08017c66 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8017c66:	b480      	push	{r7}
 8017c68:	b087      	sub	sp, #28
 8017c6a:	af00      	add	r7, sp, #0
 8017c6c:	60f8      	str	r0, [r7, #12]
 8017c6e:	60b9      	str	r1, [r7, #8]
 8017c70:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8017c72:	68fb      	ldr	r3, [r7, #12]
 8017c74:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8017c76:	697b      	ldr	r3, [r7, #20]
 8017c78:	1c5a      	adds	r2, r3, #1
 8017c7a:	617a      	str	r2, [r7, #20]
 8017c7c:	68ba      	ldr	r2, [r7, #8]
 8017c7e:	b2d2      	uxtb	r2, r2
 8017c80:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	3b01      	subs	r3, #1
 8017c86:	607b      	str	r3, [r7, #4]
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	d1f3      	bne.n	8017c76 <mem_set+0x10>
}
 8017c8e:	bf00      	nop
 8017c90:	bf00      	nop
 8017c92:	371c      	adds	r7, #28
 8017c94:	46bd      	mov	sp, r7
 8017c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c9a:	4770      	bx	lr

08017c9c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8017c9c:	b480      	push	{r7}
 8017c9e:	b089      	sub	sp, #36	; 0x24
 8017ca0:	af00      	add	r7, sp, #0
 8017ca2:	60f8      	str	r0, [r7, #12]
 8017ca4:	60b9      	str	r1, [r7, #8]
 8017ca6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8017ca8:	68fb      	ldr	r3, [r7, #12]
 8017caa:	61fb      	str	r3, [r7, #28]
 8017cac:	68bb      	ldr	r3, [r7, #8]
 8017cae:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8017cb0:	2300      	movs	r3, #0
 8017cb2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8017cb4:	69fb      	ldr	r3, [r7, #28]
 8017cb6:	1c5a      	adds	r2, r3, #1
 8017cb8:	61fa      	str	r2, [r7, #28]
 8017cba:	781b      	ldrb	r3, [r3, #0]
 8017cbc:	4619      	mov	r1, r3
 8017cbe:	69bb      	ldr	r3, [r7, #24]
 8017cc0:	1c5a      	adds	r2, r3, #1
 8017cc2:	61ba      	str	r2, [r7, #24]
 8017cc4:	781b      	ldrb	r3, [r3, #0]
 8017cc6:	1acb      	subs	r3, r1, r3
 8017cc8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	3b01      	subs	r3, #1
 8017cce:	607b      	str	r3, [r7, #4]
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	d002      	beq.n	8017cdc <mem_cmp+0x40>
 8017cd6:	697b      	ldr	r3, [r7, #20]
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d0eb      	beq.n	8017cb4 <mem_cmp+0x18>

	return r;
 8017cdc:	697b      	ldr	r3, [r7, #20]
}
 8017cde:	4618      	mov	r0, r3
 8017ce0:	3724      	adds	r7, #36	; 0x24
 8017ce2:	46bd      	mov	sp, r7
 8017ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ce8:	4770      	bx	lr

08017cea <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8017cea:	b480      	push	{r7}
 8017cec:	b083      	sub	sp, #12
 8017cee:	af00      	add	r7, sp, #0
 8017cf0:	6078      	str	r0, [r7, #4]
 8017cf2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8017cf4:	e002      	b.n	8017cfc <chk_chr+0x12>
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	3301      	adds	r3, #1
 8017cfa:	607b      	str	r3, [r7, #4]
 8017cfc:	687b      	ldr	r3, [r7, #4]
 8017cfe:	781b      	ldrb	r3, [r3, #0]
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d005      	beq.n	8017d10 <chk_chr+0x26>
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	781b      	ldrb	r3, [r3, #0]
 8017d08:	461a      	mov	r2, r3
 8017d0a:	683b      	ldr	r3, [r7, #0]
 8017d0c:	4293      	cmp	r3, r2
 8017d0e:	d1f2      	bne.n	8017cf6 <chk_chr+0xc>
	return *str;
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	781b      	ldrb	r3, [r3, #0]
}
 8017d14:	4618      	mov	r0, r3
 8017d16:	370c      	adds	r7, #12
 8017d18:	46bd      	mov	sp, r7
 8017d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d1e:	4770      	bx	lr

08017d20 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8017d20:	b480      	push	{r7}
 8017d22:	b085      	sub	sp, #20
 8017d24:	af00      	add	r7, sp, #0
 8017d26:	6078      	str	r0, [r7, #4]
 8017d28:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8017d2a:	2300      	movs	r3, #0
 8017d2c:	60bb      	str	r3, [r7, #8]
 8017d2e:	68bb      	ldr	r3, [r7, #8]
 8017d30:	60fb      	str	r3, [r7, #12]
 8017d32:	e029      	b.n	8017d88 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8017d34:	4a27      	ldr	r2, [pc, #156]	; (8017dd4 <chk_lock+0xb4>)
 8017d36:	68fb      	ldr	r3, [r7, #12]
 8017d38:	011b      	lsls	r3, r3, #4
 8017d3a:	4413      	add	r3, r2
 8017d3c:	681b      	ldr	r3, [r3, #0]
 8017d3e:	2b00      	cmp	r3, #0
 8017d40:	d01d      	beq.n	8017d7e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8017d42:	4a24      	ldr	r2, [pc, #144]	; (8017dd4 <chk_lock+0xb4>)
 8017d44:	68fb      	ldr	r3, [r7, #12]
 8017d46:	011b      	lsls	r3, r3, #4
 8017d48:	4413      	add	r3, r2
 8017d4a:	681a      	ldr	r2, [r3, #0]
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	681b      	ldr	r3, [r3, #0]
 8017d50:	429a      	cmp	r2, r3
 8017d52:	d116      	bne.n	8017d82 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8017d54:	4a1f      	ldr	r2, [pc, #124]	; (8017dd4 <chk_lock+0xb4>)
 8017d56:	68fb      	ldr	r3, [r7, #12]
 8017d58:	011b      	lsls	r3, r3, #4
 8017d5a:	4413      	add	r3, r2
 8017d5c:	3304      	adds	r3, #4
 8017d5e:	681a      	ldr	r2, [r3, #0]
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8017d64:	429a      	cmp	r2, r3
 8017d66:	d10c      	bne.n	8017d82 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8017d68:	4a1a      	ldr	r2, [pc, #104]	; (8017dd4 <chk_lock+0xb4>)
 8017d6a:	68fb      	ldr	r3, [r7, #12]
 8017d6c:	011b      	lsls	r3, r3, #4
 8017d6e:	4413      	add	r3, r2
 8017d70:	3308      	adds	r3, #8
 8017d72:	681a      	ldr	r2, [r3, #0]
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8017d78:	429a      	cmp	r2, r3
 8017d7a:	d102      	bne.n	8017d82 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8017d7c:	e007      	b.n	8017d8e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8017d7e:	2301      	movs	r3, #1
 8017d80:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8017d82:	68fb      	ldr	r3, [r7, #12]
 8017d84:	3301      	adds	r3, #1
 8017d86:	60fb      	str	r3, [r7, #12]
 8017d88:	68fb      	ldr	r3, [r7, #12]
 8017d8a:	2b01      	cmp	r3, #1
 8017d8c:	d9d2      	bls.n	8017d34 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8017d8e:	68fb      	ldr	r3, [r7, #12]
 8017d90:	2b02      	cmp	r3, #2
 8017d92:	d109      	bne.n	8017da8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8017d94:	68bb      	ldr	r3, [r7, #8]
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	d102      	bne.n	8017da0 <chk_lock+0x80>
 8017d9a:	683b      	ldr	r3, [r7, #0]
 8017d9c:	2b02      	cmp	r3, #2
 8017d9e:	d101      	bne.n	8017da4 <chk_lock+0x84>
 8017da0:	2300      	movs	r3, #0
 8017da2:	e010      	b.n	8017dc6 <chk_lock+0xa6>
 8017da4:	2312      	movs	r3, #18
 8017da6:	e00e      	b.n	8017dc6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8017da8:	683b      	ldr	r3, [r7, #0]
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	d108      	bne.n	8017dc0 <chk_lock+0xa0>
 8017dae:	4a09      	ldr	r2, [pc, #36]	; (8017dd4 <chk_lock+0xb4>)
 8017db0:	68fb      	ldr	r3, [r7, #12]
 8017db2:	011b      	lsls	r3, r3, #4
 8017db4:	4413      	add	r3, r2
 8017db6:	330c      	adds	r3, #12
 8017db8:	881b      	ldrh	r3, [r3, #0]
 8017dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017dbe:	d101      	bne.n	8017dc4 <chk_lock+0xa4>
 8017dc0:	2310      	movs	r3, #16
 8017dc2:	e000      	b.n	8017dc6 <chk_lock+0xa6>
 8017dc4:	2300      	movs	r3, #0
}
 8017dc6:	4618      	mov	r0, r3
 8017dc8:	3714      	adds	r7, #20
 8017dca:	46bd      	mov	sp, r7
 8017dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dd0:	4770      	bx	lr
 8017dd2:	bf00      	nop
 8017dd4:	240016c4 	.word	0x240016c4

08017dd8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8017dd8:	b480      	push	{r7}
 8017dda:	b083      	sub	sp, #12
 8017ddc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8017dde:	2300      	movs	r3, #0
 8017de0:	607b      	str	r3, [r7, #4]
 8017de2:	e002      	b.n	8017dea <enq_lock+0x12>
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	3301      	adds	r3, #1
 8017de8:	607b      	str	r3, [r7, #4]
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	2b01      	cmp	r3, #1
 8017dee:	d806      	bhi.n	8017dfe <enq_lock+0x26>
 8017df0:	4a09      	ldr	r2, [pc, #36]	; (8017e18 <enq_lock+0x40>)
 8017df2:	687b      	ldr	r3, [r7, #4]
 8017df4:	011b      	lsls	r3, r3, #4
 8017df6:	4413      	add	r3, r2
 8017df8:	681b      	ldr	r3, [r3, #0]
 8017dfa:	2b00      	cmp	r3, #0
 8017dfc:	d1f2      	bne.n	8017de4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	2b02      	cmp	r3, #2
 8017e02:	bf14      	ite	ne
 8017e04:	2301      	movne	r3, #1
 8017e06:	2300      	moveq	r3, #0
 8017e08:	b2db      	uxtb	r3, r3
}
 8017e0a:	4618      	mov	r0, r3
 8017e0c:	370c      	adds	r7, #12
 8017e0e:	46bd      	mov	sp, r7
 8017e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e14:	4770      	bx	lr
 8017e16:	bf00      	nop
 8017e18:	240016c4 	.word	0x240016c4

08017e1c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8017e1c:	b480      	push	{r7}
 8017e1e:	b085      	sub	sp, #20
 8017e20:	af00      	add	r7, sp, #0
 8017e22:	6078      	str	r0, [r7, #4]
 8017e24:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8017e26:	2300      	movs	r3, #0
 8017e28:	60fb      	str	r3, [r7, #12]
 8017e2a:	e01f      	b.n	8017e6c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8017e2c:	4a41      	ldr	r2, [pc, #260]	; (8017f34 <inc_lock+0x118>)
 8017e2e:	68fb      	ldr	r3, [r7, #12]
 8017e30:	011b      	lsls	r3, r3, #4
 8017e32:	4413      	add	r3, r2
 8017e34:	681a      	ldr	r2, [r3, #0]
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	681b      	ldr	r3, [r3, #0]
 8017e3a:	429a      	cmp	r2, r3
 8017e3c:	d113      	bne.n	8017e66 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8017e3e:	4a3d      	ldr	r2, [pc, #244]	; (8017f34 <inc_lock+0x118>)
 8017e40:	68fb      	ldr	r3, [r7, #12]
 8017e42:	011b      	lsls	r3, r3, #4
 8017e44:	4413      	add	r3, r2
 8017e46:	3304      	adds	r3, #4
 8017e48:	681a      	ldr	r2, [r3, #0]
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8017e4e:	429a      	cmp	r2, r3
 8017e50:	d109      	bne.n	8017e66 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8017e52:	4a38      	ldr	r2, [pc, #224]	; (8017f34 <inc_lock+0x118>)
 8017e54:	68fb      	ldr	r3, [r7, #12]
 8017e56:	011b      	lsls	r3, r3, #4
 8017e58:	4413      	add	r3, r2
 8017e5a:	3308      	adds	r3, #8
 8017e5c:	681a      	ldr	r2, [r3, #0]
 8017e5e:	687b      	ldr	r3, [r7, #4]
 8017e60:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8017e62:	429a      	cmp	r2, r3
 8017e64:	d006      	beq.n	8017e74 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8017e66:	68fb      	ldr	r3, [r7, #12]
 8017e68:	3301      	adds	r3, #1
 8017e6a:	60fb      	str	r3, [r7, #12]
 8017e6c:	68fb      	ldr	r3, [r7, #12]
 8017e6e:	2b01      	cmp	r3, #1
 8017e70:	d9dc      	bls.n	8017e2c <inc_lock+0x10>
 8017e72:	e000      	b.n	8017e76 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8017e74:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8017e76:	68fb      	ldr	r3, [r7, #12]
 8017e78:	2b02      	cmp	r3, #2
 8017e7a:	d132      	bne.n	8017ee2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8017e7c:	2300      	movs	r3, #0
 8017e7e:	60fb      	str	r3, [r7, #12]
 8017e80:	e002      	b.n	8017e88 <inc_lock+0x6c>
 8017e82:	68fb      	ldr	r3, [r7, #12]
 8017e84:	3301      	adds	r3, #1
 8017e86:	60fb      	str	r3, [r7, #12]
 8017e88:	68fb      	ldr	r3, [r7, #12]
 8017e8a:	2b01      	cmp	r3, #1
 8017e8c:	d806      	bhi.n	8017e9c <inc_lock+0x80>
 8017e8e:	4a29      	ldr	r2, [pc, #164]	; (8017f34 <inc_lock+0x118>)
 8017e90:	68fb      	ldr	r3, [r7, #12]
 8017e92:	011b      	lsls	r3, r3, #4
 8017e94:	4413      	add	r3, r2
 8017e96:	681b      	ldr	r3, [r3, #0]
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	d1f2      	bne.n	8017e82 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8017e9c:	68fb      	ldr	r3, [r7, #12]
 8017e9e:	2b02      	cmp	r3, #2
 8017ea0:	d101      	bne.n	8017ea6 <inc_lock+0x8a>
 8017ea2:	2300      	movs	r3, #0
 8017ea4:	e040      	b.n	8017f28 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	681a      	ldr	r2, [r3, #0]
 8017eaa:	4922      	ldr	r1, [pc, #136]	; (8017f34 <inc_lock+0x118>)
 8017eac:	68fb      	ldr	r3, [r7, #12]
 8017eae:	011b      	lsls	r3, r3, #4
 8017eb0:	440b      	add	r3, r1
 8017eb2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8017eb4:	687b      	ldr	r3, [r7, #4]
 8017eb6:	689a      	ldr	r2, [r3, #8]
 8017eb8:	491e      	ldr	r1, [pc, #120]	; (8017f34 <inc_lock+0x118>)
 8017eba:	68fb      	ldr	r3, [r7, #12]
 8017ebc:	011b      	lsls	r3, r3, #4
 8017ebe:	440b      	add	r3, r1
 8017ec0:	3304      	adds	r3, #4
 8017ec2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8017ec4:	687b      	ldr	r3, [r7, #4]
 8017ec6:	695a      	ldr	r2, [r3, #20]
 8017ec8:	491a      	ldr	r1, [pc, #104]	; (8017f34 <inc_lock+0x118>)
 8017eca:	68fb      	ldr	r3, [r7, #12]
 8017ecc:	011b      	lsls	r3, r3, #4
 8017ece:	440b      	add	r3, r1
 8017ed0:	3308      	adds	r3, #8
 8017ed2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8017ed4:	4a17      	ldr	r2, [pc, #92]	; (8017f34 <inc_lock+0x118>)
 8017ed6:	68fb      	ldr	r3, [r7, #12]
 8017ed8:	011b      	lsls	r3, r3, #4
 8017eda:	4413      	add	r3, r2
 8017edc:	330c      	adds	r3, #12
 8017ede:	2200      	movs	r2, #0
 8017ee0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8017ee2:	683b      	ldr	r3, [r7, #0]
 8017ee4:	2b00      	cmp	r3, #0
 8017ee6:	d009      	beq.n	8017efc <inc_lock+0xe0>
 8017ee8:	4a12      	ldr	r2, [pc, #72]	; (8017f34 <inc_lock+0x118>)
 8017eea:	68fb      	ldr	r3, [r7, #12]
 8017eec:	011b      	lsls	r3, r3, #4
 8017eee:	4413      	add	r3, r2
 8017ef0:	330c      	adds	r3, #12
 8017ef2:	881b      	ldrh	r3, [r3, #0]
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d001      	beq.n	8017efc <inc_lock+0xe0>
 8017ef8:	2300      	movs	r3, #0
 8017efa:	e015      	b.n	8017f28 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8017efc:	683b      	ldr	r3, [r7, #0]
 8017efe:	2b00      	cmp	r3, #0
 8017f00:	d108      	bne.n	8017f14 <inc_lock+0xf8>
 8017f02:	4a0c      	ldr	r2, [pc, #48]	; (8017f34 <inc_lock+0x118>)
 8017f04:	68fb      	ldr	r3, [r7, #12]
 8017f06:	011b      	lsls	r3, r3, #4
 8017f08:	4413      	add	r3, r2
 8017f0a:	330c      	adds	r3, #12
 8017f0c:	881b      	ldrh	r3, [r3, #0]
 8017f0e:	3301      	adds	r3, #1
 8017f10:	b29a      	uxth	r2, r3
 8017f12:	e001      	b.n	8017f18 <inc_lock+0xfc>
 8017f14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017f18:	4906      	ldr	r1, [pc, #24]	; (8017f34 <inc_lock+0x118>)
 8017f1a:	68fb      	ldr	r3, [r7, #12]
 8017f1c:	011b      	lsls	r3, r3, #4
 8017f1e:	440b      	add	r3, r1
 8017f20:	330c      	adds	r3, #12
 8017f22:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8017f24:	68fb      	ldr	r3, [r7, #12]
 8017f26:	3301      	adds	r3, #1
}
 8017f28:	4618      	mov	r0, r3
 8017f2a:	3714      	adds	r7, #20
 8017f2c:	46bd      	mov	sp, r7
 8017f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f32:	4770      	bx	lr
 8017f34:	240016c4 	.word	0x240016c4

08017f38 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8017f38:	b480      	push	{r7}
 8017f3a:	b085      	sub	sp, #20
 8017f3c:	af00      	add	r7, sp, #0
 8017f3e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	3b01      	subs	r3, #1
 8017f44:	607b      	str	r3, [r7, #4]
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	2b01      	cmp	r3, #1
 8017f4a:	d825      	bhi.n	8017f98 <dec_lock+0x60>
		n = Files[i].ctr;
 8017f4c:	4a17      	ldr	r2, [pc, #92]	; (8017fac <dec_lock+0x74>)
 8017f4e:	687b      	ldr	r3, [r7, #4]
 8017f50:	011b      	lsls	r3, r3, #4
 8017f52:	4413      	add	r3, r2
 8017f54:	330c      	adds	r3, #12
 8017f56:	881b      	ldrh	r3, [r3, #0]
 8017f58:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8017f5a:	89fb      	ldrh	r3, [r7, #14]
 8017f5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017f60:	d101      	bne.n	8017f66 <dec_lock+0x2e>
 8017f62:	2300      	movs	r3, #0
 8017f64:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8017f66:	89fb      	ldrh	r3, [r7, #14]
 8017f68:	2b00      	cmp	r3, #0
 8017f6a:	d002      	beq.n	8017f72 <dec_lock+0x3a>
 8017f6c:	89fb      	ldrh	r3, [r7, #14]
 8017f6e:	3b01      	subs	r3, #1
 8017f70:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8017f72:	4a0e      	ldr	r2, [pc, #56]	; (8017fac <dec_lock+0x74>)
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	011b      	lsls	r3, r3, #4
 8017f78:	4413      	add	r3, r2
 8017f7a:	330c      	adds	r3, #12
 8017f7c:	89fa      	ldrh	r2, [r7, #14]
 8017f7e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8017f80:	89fb      	ldrh	r3, [r7, #14]
 8017f82:	2b00      	cmp	r3, #0
 8017f84:	d105      	bne.n	8017f92 <dec_lock+0x5a>
 8017f86:	4a09      	ldr	r2, [pc, #36]	; (8017fac <dec_lock+0x74>)
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	011b      	lsls	r3, r3, #4
 8017f8c:	4413      	add	r3, r2
 8017f8e:	2200      	movs	r2, #0
 8017f90:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8017f92:	2300      	movs	r3, #0
 8017f94:	737b      	strb	r3, [r7, #13]
 8017f96:	e001      	b.n	8017f9c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8017f98:	2302      	movs	r3, #2
 8017f9a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8017f9c:	7b7b      	ldrb	r3, [r7, #13]
}
 8017f9e:	4618      	mov	r0, r3
 8017fa0:	3714      	adds	r7, #20
 8017fa2:	46bd      	mov	sp, r7
 8017fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fa8:	4770      	bx	lr
 8017faa:	bf00      	nop
 8017fac:	240016c4 	.word	0x240016c4

08017fb0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8017fb0:	b480      	push	{r7}
 8017fb2:	b085      	sub	sp, #20
 8017fb4:	af00      	add	r7, sp, #0
 8017fb6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8017fb8:	2300      	movs	r3, #0
 8017fba:	60fb      	str	r3, [r7, #12]
 8017fbc:	e010      	b.n	8017fe0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8017fbe:	4a0d      	ldr	r2, [pc, #52]	; (8017ff4 <clear_lock+0x44>)
 8017fc0:	68fb      	ldr	r3, [r7, #12]
 8017fc2:	011b      	lsls	r3, r3, #4
 8017fc4:	4413      	add	r3, r2
 8017fc6:	681b      	ldr	r3, [r3, #0]
 8017fc8:	687a      	ldr	r2, [r7, #4]
 8017fca:	429a      	cmp	r2, r3
 8017fcc:	d105      	bne.n	8017fda <clear_lock+0x2a>
 8017fce:	4a09      	ldr	r2, [pc, #36]	; (8017ff4 <clear_lock+0x44>)
 8017fd0:	68fb      	ldr	r3, [r7, #12]
 8017fd2:	011b      	lsls	r3, r3, #4
 8017fd4:	4413      	add	r3, r2
 8017fd6:	2200      	movs	r2, #0
 8017fd8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8017fda:	68fb      	ldr	r3, [r7, #12]
 8017fdc:	3301      	adds	r3, #1
 8017fde:	60fb      	str	r3, [r7, #12]
 8017fe0:	68fb      	ldr	r3, [r7, #12]
 8017fe2:	2b01      	cmp	r3, #1
 8017fe4:	d9eb      	bls.n	8017fbe <clear_lock+0xe>
	}
}
 8017fe6:	bf00      	nop
 8017fe8:	bf00      	nop
 8017fea:	3714      	adds	r7, #20
 8017fec:	46bd      	mov	sp, r7
 8017fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ff2:	4770      	bx	lr
 8017ff4:	240016c4 	.word	0x240016c4

08017ff8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8017ff8:	b580      	push	{r7, lr}
 8017ffa:	b086      	sub	sp, #24
 8017ffc:	af00      	add	r7, sp, #0
 8017ffe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8018000:	2300      	movs	r3, #0
 8018002:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	78db      	ldrb	r3, [r3, #3]
 8018008:	2b00      	cmp	r3, #0
 801800a:	d034      	beq.n	8018076 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018010:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	7858      	ldrb	r0, [r3, #1]
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801801c:	2301      	movs	r3, #1
 801801e:	697a      	ldr	r2, [r7, #20]
 8018020:	f7ff fd40 	bl	8017aa4 <disk_write>
 8018024:	4603      	mov	r3, r0
 8018026:	2b00      	cmp	r3, #0
 8018028:	d002      	beq.n	8018030 <sync_window+0x38>
			res = FR_DISK_ERR;
 801802a:	2301      	movs	r3, #1
 801802c:	73fb      	strb	r3, [r7, #15]
 801802e:	e022      	b.n	8018076 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	2200      	movs	r2, #0
 8018034:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8018036:	687b      	ldr	r3, [r7, #4]
 8018038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801803a:	697a      	ldr	r2, [r7, #20]
 801803c:	1ad2      	subs	r2, r2, r3
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	6a1b      	ldr	r3, [r3, #32]
 8018042:	429a      	cmp	r2, r3
 8018044:	d217      	bcs.n	8018076 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	789b      	ldrb	r3, [r3, #2]
 801804a:	613b      	str	r3, [r7, #16]
 801804c:	e010      	b.n	8018070 <sync_window+0x78>
					wsect += fs->fsize;
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	6a1b      	ldr	r3, [r3, #32]
 8018052:	697a      	ldr	r2, [r7, #20]
 8018054:	4413      	add	r3, r2
 8018056:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	7858      	ldrb	r0, [r3, #1]
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8018062:	2301      	movs	r3, #1
 8018064:	697a      	ldr	r2, [r7, #20]
 8018066:	f7ff fd1d 	bl	8017aa4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801806a:	693b      	ldr	r3, [r7, #16]
 801806c:	3b01      	subs	r3, #1
 801806e:	613b      	str	r3, [r7, #16]
 8018070:	693b      	ldr	r3, [r7, #16]
 8018072:	2b01      	cmp	r3, #1
 8018074:	d8eb      	bhi.n	801804e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8018076:	7bfb      	ldrb	r3, [r7, #15]
}
 8018078:	4618      	mov	r0, r3
 801807a:	3718      	adds	r7, #24
 801807c:	46bd      	mov	sp, r7
 801807e:	bd80      	pop	{r7, pc}

08018080 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8018080:	b580      	push	{r7, lr}
 8018082:	b084      	sub	sp, #16
 8018084:	af00      	add	r7, sp, #0
 8018086:	6078      	str	r0, [r7, #4]
 8018088:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801808a:	2300      	movs	r3, #0
 801808c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018092:	683a      	ldr	r2, [r7, #0]
 8018094:	429a      	cmp	r2, r3
 8018096:	d01b      	beq.n	80180d0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8018098:	6878      	ldr	r0, [r7, #4]
 801809a:	f7ff ffad 	bl	8017ff8 <sync_window>
 801809e:	4603      	mov	r3, r0
 80180a0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80180a2:	7bfb      	ldrb	r3, [r7, #15]
 80180a4:	2b00      	cmp	r3, #0
 80180a6:	d113      	bne.n	80180d0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	7858      	ldrb	r0, [r3, #1]
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80180b2:	2301      	movs	r3, #1
 80180b4:	683a      	ldr	r2, [r7, #0]
 80180b6:	f7ff fcd5 	bl	8017a64 <disk_read>
 80180ba:	4603      	mov	r3, r0
 80180bc:	2b00      	cmp	r3, #0
 80180be:	d004      	beq.n	80180ca <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80180c0:	f04f 33ff 	mov.w	r3, #4294967295
 80180c4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80180c6:	2301      	movs	r3, #1
 80180c8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	683a      	ldr	r2, [r7, #0]
 80180ce:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80180d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80180d2:	4618      	mov	r0, r3
 80180d4:	3710      	adds	r7, #16
 80180d6:	46bd      	mov	sp, r7
 80180d8:	bd80      	pop	{r7, pc}
	...

080180dc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80180dc:	b580      	push	{r7, lr}
 80180de:	b084      	sub	sp, #16
 80180e0:	af00      	add	r7, sp, #0
 80180e2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80180e4:	6878      	ldr	r0, [r7, #4]
 80180e6:	f7ff ff87 	bl	8017ff8 <sync_window>
 80180ea:	4603      	mov	r3, r0
 80180ec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80180ee:	7bfb      	ldrb	r3, [r7, #15]
 80180f0:	2b00      	cmp	r3, #0
 80180f2:	d159      	bne.n	80181a8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	781b      	ldrb	r3, [r3, #0]
 80180f8:	2b03      	cmp	r3, #3
 80180fa:	d149      	bne.n	8018190 <sync_fs+0xb4>
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	791b      	ldrb	r3, [r3, #4]
 8018100:	2b01      	cmp	r3, #1
 8018102:	d145      	bne.n	8018190 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8018104:	687b      	ldr	r3, [r7, #4]
 8018106:	f103 0038 	add.w	r0, r3, #56	; 0x38
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	899b      	ldrh	r3, [r3, #12]
 801810e:	461a      	mov	r2, r3
 8018110:	2100      	movs	r1, #0
 8018112:	f7ff fda8 	bl	8017c66 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	3338      	adds	r3, #56	; 0x38
 801811a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801811e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8018122:	4618      	mov	r0, r3
 8018124:	f7ff fd37 	bl	8017b96 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	3338      	adds	r3, #56	; 0x38
 801812c:	4921      	ldr	r1, [pc, #132]	; (80181b4 <sync_fs+0xd8>)
 801812e:	4618      	mov	r0, r3
 8018130:	f7ff fd4c 	bl	8017bcc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	3338      	adds	r3, #56	; 0x38
 8018138:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801813c:	491e      	ldr	r1, [pc, #120]	; (80181b8 <sync_fs+0xdc>)
 801813e:	4618      	mov	r0, r3
 8018140:	f7ff fd44 	bl	8017bcc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	3338      	adds	r3, #56	; 0x38
 8018148:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	699b      	ldr	r3, [r3, #24]
 8018150:	4619      	mov	r1, r3
 8018152:	4610      	mov	r0, r2
 8018154:	f7ff fd3a 	bl	8017bcc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8018158:	687b      	ldr	r3, [r7, #4]
 801815a:	3338      	adds	r3, #56	; 0x38
 801815c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	695b      	ldr	r3, [r3, #20]
 8018164:	4619      	mov	r1, r3
 8018166:	4610      	mov	r0, r2
 8018168:	f7ff fd30 	bl	8017bcc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018170:	1c5a      	adds	r2, r3, #1
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	7858      	ldrb	r0, [r3, #1]
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8018180:	687b      	ldr	r3, [r7, #4]
 8018182:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8018184:	2301      	movs	r3, #1
 8018186:	f7ff fc8d 	bl	8017aa4 <disk_write>
			fs->fsi_flag = 0;
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	2200      	movs	r2, #0
 801818e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	785b      	ldrb	r3, [r3, #1]
 8018194:	2200      	movs	r2, #0
 8018196:	2100      	movs	r1, #0
 8018198:	4618      	mov	r0, r3
 801819a:	f7ff fca3 	bl	8017ae4 <disk_ioctl>
 801819e:	4603      	mov	r3, r0
 80181a0:	2b00      	cmp	r3, #0
 80181a2:	d001      	beq.n	80181a8 <sync_fs+0xcc>
 80181a4:	2301      	movs	r3, #1
 80181a6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80181a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80181aa:	4618      	mov	r0, r3
 80181ac:	3710      	adds	r7, #16
 80181ae:	46bd      	mov	sp, r7
 80181b0:	bd80      	pop	{r7, pc}
 80181b2:	bf00      	nop
 80181b4:	41615252 	.word	0x41615252
 80181b8:	61417272 	.word	0x61417272

080181bc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80181bc:	b480      	push	{r7}
 80181be:	b083      	sub	sp, #12
 80181c0:	af00      	add	r7, sp, #0
 80181c2:	6078      	str	r0, [r7, #4]
 80181c4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80181c6:	683b      	ldr	r3, [r7, #0]
 80181c8:	3b02      	subs	r3, #2
 80181ca:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	69db      	ldr	r3, [r3, #28]
 80181d0:	3b02      	subs	r3, #2
 80181d2:	683a      	ldr	r2, [r7, #0]
 80181d4:	429a      	cmp	r2, r3
 80181d6:	d301      	bcc.n	80181dc <clust2sect+0x20>
 80181d8:	2300      	movs	r3, #0
 80181da:	e008      	b.n	80181ee <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80181dc:	687b      	ldr	r3, [r7, #4]
 80181de:	895b      	ldrh	r3, [r3, #10]
 80181e0:	461a      	mov	r2, r3
 80181e2:	683b      	ldr	r3, [r7, #0]
 80181e4:	fb03 f202 	mul.w	r2, r3, r2
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80181ec:	4413      	add	r3, r2
}
 80181ee:	4618      	mov	r0, r3
 80181f0:	370c      	adds	r7, #12
 80181f2:	46bd      	mov	sp, r7
 80181f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181f8:	4770      	bx	lr

080181fa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80181fa:	b580      	push	{r7, lr}
 80181fc:	b086      	sub	sp, #24
 80181fe:	af00      	add	r7, sp, #0
 8018200:	6078      	str	r0, [r7, #4]
 8018202:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	681b      	ldr	r3, [r3, #0]
 8018208:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801820a:	683b      	ldr	r3, [r7, #0]
 801820c:	2b01      	cmp	r3, #1
 801820e:	d904      	bls.n	801821a <get_fat+0x20>
 8018210:	693b      	ldr	r3, [r7, #16]
 8018212:	69db      	ldr	r3, [r3, #28]
 8018214:	683a      	ldr	r2, [r7, #0]
 8018216:	429a      	cmp	r2, r3
 8018218:	d302      	bcc.n	8018220 <get_fat+0x26>
		val = 1;	/* Internal error */
 801821a:	2301      	movs	r3, #1
 801821c:	617b      	str	r3, [r7, #20]
 801821e:	e0bb      	b.n	8018398 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8018220:	f04f 33ff 	mov.w	r3, #4294967295
 8018224:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8018226:	693b      	ldr	r3, [r7, #16]
 8018228:	781b      	ldrb	r3, [r3, #0]
 801822a:	2b03      	cmp	r3, #3
 801822c:	f000 8083 	beq.w	8018336 <get_fat+0x13c>
 8018230:	2b03      	cmp	r3, #3
 8018232:	f300 80a7 	bgt.w	8018384 <get_fat+0x18a>
 8018236:	2b01      	cmp	r3, #1
 8018238:	d002      	beq.n	8018240 <get_fat+0x46>
 801823a:	2b02      	cmp	r3, #2
 801823c:	d056      	beq.n	80182ec <get_fat+0xf2>
 801823e:	e0a1      	b.n	8018384 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8018240:	683b      	ldr	r3, [r7, #0]
 8018242:	60fb      	str	r3, [r7, #12]
 8018244:	68fb      	ldr	r3, [r7, #12]
 8018246:	085b      	lsrs	r3, r3, #1
 8018248:	68fa      	ldr	r2, [r7, #12]
 801824a:	4413      	add	r3, r2
 801824c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801824e:	693b      	ldr	r3, [r7, #16]
 8018250:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8018252:	693b      	ldr	r3, [r7, #16]
 8018254:	899b      	ldrh	r3, [r3, #12]
 8018256:	4619      	mov	r1, r3
 8018258:	68fb      	ldr	r3, [r7, #12]
 801825a:	fbb3 f3f1 	udiv	r3, r3, r1
 801825e:	4413      	add	r3, r2
 8018260:	4619      	mov	r1, r3
 8018262:	6938      	ldr	r0, [r7, #16]
 8018264:	f7ff ff0c 	bl	8018080 <move_window>
 8018268:	4603      	mov	r3, r0
 801826a:	2b00      	cmp	r3, #0
 801826c:	f040 808d 	bne.w	801838a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8018270:	68fb      	ldr	r3, [r7, #12]
 8018272:	1c5a      	adds	r2, r3, #1
 8018274:	60fa      	str	r2, [r7, #12]
 8018276:	693a      	ldr	r2, [r7, #16]
 8018278:	8992      	ldrh	r2, [r2, #12]
 801827a:	fbb3 f1f2 	udiv	r1, r3, r2
 801827e:	fb01 f202 	mul.w	r2, r1, r2
 8018282:	1a9b      	subs	r3, r3, r2
 8018284:	693a      	ldr	r2, [r7, #16]
 8018286:	4413      	add	r3, r2
 8018288:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801828c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801828e:	693b      	ldr	r3, [r7, #16]
 8018290:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8018292:	693b      	ldr	r3, [r7, #16]
 8018294:	899b      	ldrh	r3, [r3, #12]
 8018296:	4619      	mov	r1, r3
 8018298:	68fb      	ldr	r3, [r7, #12]
 801829a:	fbb3 f3f1 	udiv	r3, r3, r1
 801829e:	4413      	add	r3, r2
 80182a0:	4619      	mov	r1, r3
 80182a2:	6938      	ldr	r0, [r7, #16]
 80182a4:	f7ff feec 	bl	8018080 <move_window>
 80182a8:	4603      	mov	r3, r0
 80182aa:	2b00      	cmp	r3, #0
 80182ac:	d16f      	bne.n	801838e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80182ae:	693b      	ldr	r3, [r7, #16]
 80182b0:	899b      	ldrh	r3, [r3, #12]
 80182b2:	461a      	mov	r2, r3
 80182b4:	68fb      	ldr	r3, [r7, #12]
 80182b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80182ba:	fb01 f202 	mul.w	r2, r1, r2
 80182be:	1a9b      	subs	r3, r3, r2
 80182c0:	693a      	ldr	r2, [r7, #16]
 80182c2:	4413      	add	r3, r2
 80182c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80182c8:	021b      	lsls	r3, r3, #8
 80182ca:	461a      	mov	r2, r3
 80182cc:	68bb      	ldr	r3, [r7, #8]
 80182ce:	4313      	orrs	r3, r2
 80182d0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80182d2:	683b      	ldr	r3, [r7, #0]
 80182d4:	f003 0301 	and.w	r3, r3, #1
 80182d8:	2b00      	cmp	r3, #0
 80182da:	d002      	beq.n	80182e2 <get_fat+0xe8>
 80182dc:	68bb      	ldr	r3, [r7, #8]
 80182de:	091b      	lsrs	r3, r3, #4
 80182e0:	e002      	b.n	80182e8 <get_fat+0xee>
 80182e2:	68bb      	ldr	r3, [r7, #8]
 80182e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80182e8:	617b      	str	r3, [r7, #20]
			break;
 80182ea:	e055      	b.n	8018398 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80182ec:	693b      	ldr	r3, [r7, #16]
 80182ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80182f0:	693b      	ldr	r3, [r7, #16]
 80182f2:	899b      	ldrh	r3, [r3, #12]
 80182f4:	085b      	lsrs	r3, r3, #1
 80182f6:	b29b      	uxth	r3, r3
 80182f8:	4619      	mov	r1, r3
 80182fa:	683b      	ldr	r3, [r7, #0]
 80182fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8018300:	4413      	add	r3, r2
 8018302:	4619      	mov	r1, r3
 8018304:	6938      	ldr	r0, [r7, #16]
 8018306:	f7ff febb 	bl	8018080 <move_window>
 801830a:	4603      	mov	r3, r0
 801830c:	2b00      	cmp	r3, #0
 801830e:	d140      	bne.n	8018392 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8018310:	693b      	ldr	r3, [r7, #16]
 8018312:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8018316:	683b      	ldr	r3, [r7, #0]
 8018318:	005b      	lsls	r3, r3, #1
 801831a:	693a      	ldr	r2, [r7, #16]
 801831c:	8992      	ldrh	r2, [r2, #12]
 801831e:	fbb3 f0f2 	udiv	r0, r3, r2
 8018322:	fb00 f202 	mul.w	r2, r0, r2
 8018326:	1a9b      	subs	r3, r3, r2
 8018328:	440b      	add	r3, r1
 801832a:	4618      	mov	r0, r3
 801832c:	f7ff fbf8 	bl	8017b20 <ld_word>
 8018330:	4603      	mov	r3, r0
 8018332:	617b      	str	r3, [r7, #20]
			break;
 8018334:	e030      	b.n	8018398 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8018336:	693b      	ldr	r3, [r7, #16]
 8018338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801833a:	693b      	ldr	r3, [r7, #16]
 801833c:	899b      	ldrh	r3, [r3, #12]
 801833e:	089b      	lsrs	r3, r3, #2
 8018340:	b29b      	uxth	r3, r3
 8018342:	4619      	mov	r1, r3
 8018344:	683b      	ldr	r3, [r7, #0]
 8018346:	fbb3 f3f1 	udiv	r3, r3, r1
 801834a:	4413      	add	r3, r2
 801834c:	4619      	mov	r1, r3
 801834e:	6938      	ldr	r0, [r7, #16]
 8018350:	f7ff fe96 	bl	8018080 <move_window>
 8018354:	4603      	mov	r3, r0
 8018356:	2b00      	cmp	r3, #0
 8018358:	d11d      	bne.n	8018396 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801835a:	693b      	ldr	r3, [r7, #16]
 801835c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8018360:	683b      	ldr	r3, [r7, #0]
 8018362:	009b      	lsls	r3, r3, #2
 8018364:	693a      	ldr	r2, [r7, #16]
 8018366:	8992      	ldrh	r2, [r2, #12]
 8018368:	fbb3 f0f2 	udiv	r0, r3, r2
 801836c:	fb00 f202 	mul.w	r2, r0, r2
 8018370:	1a9b      	subs	r3, r3, r2
 8018372:	440b      	add	r3, r1
 8018374:	4618      	mov	r0, r3
 8018376:	f7ff fbeb 	bl	8017b50 <ld_dword>
 801837a:	4603      	mov	r3, r0
 801837c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8018380:	617b      	str	r3, [r7, #20]
			break;
 8018382:	e009      	b.n	8018398 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8018384:	2301      	movs	r3, #1
 8018386:	617b      	str	r3, [r7, #20]
 8018388:	e006      	b.n	8018398 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801838a:	bf00      	nop
 801838c:	e004      	b.n	8018398 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801838e:	bf00      	nop
 8018390:	e002      	b.n	8018398 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8018392:	bf00      	nop
 8018394:	e000      	b.n	8018398 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8018396:	bf00      	nop
		}
	}

	return val;
 8018398:	697b      	ldr	r3, [r7, #20]
}
 801839a:	4618      	mov	r0, r3
 801839c:	3718      	adds	r7, #24
 801839e:	46bd      	mov	sp, r7
 80183a0:	bd80      	pop	{r7, pc}

080183a2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80183a2:	b590      	push	{r4, r7, lr}
 80183a4:	b089      	sub	sp, #36	; 0x24
 80183a6:	af00      	add	r7, sp, #0
 80183a8:	60f8      	str	r0, [r7, #12]
 80183aa:	60b9      	str	r1, [r7, #8]
 80183ac:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80183ae:	2302      	movs	r3, #2
 80183b0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80183b2:	68bb      	ldr	r3, [r7, #8]
 80183b4:	2b01      	cmp	r3, #1
 80183b6:	f240 8109 	bls.w	80185cc <put_fat+0x22a>
 80183ba:	68fb      	ldr	r3, [r7, #12]
 80183bc:	69db      	ldr	r3, [r3, #28]
 80183be:	68ba      	ldr	r2, [r7, #8]
 80183c0:	429a      	cmp	r2, r3
 80183c2:	f080 8103 	bcs.w	80185cc <put_fat+0x22a>
		switch (fs->fs_type) {
 80183c6:	68fb      	ldr	r3, [r7, #12]
 80183c8:	781b      	ldrb	r3, [r3, #0]
 80183ca:	2b03      	cmp	r3, #3
 80183cc:	f000 80b6 	beq.w	801853c <put_fat+0x19a>
 80183d0:	2b03      	cmp	r3, #3
 80183d2:	f300 80fb 	bgt.w	80185cc <put_fat+0x22a>
 80183d6:	2b01      	cmp	r3, #1
 80183d8:	d003      	beq.n	80183e2 <put_fat+0x40>
 80183da:	2b02      	cmp	r3, #2
 80183dc:	f000 8083 	beq.w	80184e6 <put_fat+0x144>
 80183e0:	e0f4      	b.n	80185cc <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80183e2:	68bb      	ldr	r3, [r7, #8]
 80183e4:	61bb      	str	r3, [r7, #24]
 80183e6:	69bb      	ldr	r3, [r7, #24]
 80183e8:	085b      	lsrs	r3, r3, #1
 80183ea:	69ba      	ldr	r2, [r7, #24]
 80183ec:	4413      	add	r3, r2
 80183ee:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80183f0:	68fb      	ldr	r3, [r7, #12]
 80183f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80183f4:	68fb      	ldr	r3, [r7, #12]
 80183f6:	899b      	ldrh	r3, [r3, #12]
 80183f8:	4619      	mov	r1, r3
 80183fa:	69bb      	ldr	r3, [r7, #24]
 80183fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8018400:	4413      	add	r3, r2
 8018402:	4619      	mov	r1, r3
 8018404:	68f8      	ldr	r0, [r7, #12]
 8018406:	f7ff fe3b 	bl	8018080 <move_window>
 801840a:	4603      	mov	r3, r0
 801840c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801840e:	7ffb      	ldrb	r3, [r7, #31]
 8018410:	2b00      	cmp	r3, #0
 8018412:	f040 80d4 	bne.w	80185be <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8018416:	68fb      	ldr	r3, [r7, #12]
 8018418:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801841c:	69bb      	ldr	r3, [r7, #24]
 801841e:	1c5a      	adds	r2, r3, #1
 8018420:	61ba      	str	r2, [r7, #24]
 8018422:	68fa      	ldr	r2, [r7, #12]
 8018424:	8992      	ldrh	r2, [r2, #12]
 8018426:	fbb3 f0f2 	udiv	r0, r3, r2
 801842a:	fb00 f202 	mul.w	r2, r0, r2
 801842e:	1a9b      	subs	r3, r3, r2
 8018430:	440b      	add	r3, r1
 8018432:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8018434:	68bb      	ldr	r3, [r7, #8]
 8018436:	f003 0301 	and.w	r3, r3, #1
 801843a:	2b00      	cmp	r3, #0
 801843c:	d00d      	beq.n	801845a <put_fat+0xb8>
 801843e:	697b      	ldr	r3, [r7, #20]
 8018440:	781b      	ldrb	r3, [r3, #0]
 8018442:	b25b      	sxtb	r3, r3
 8018444:	f003 030f 	and.w	r3, r3, #15
 8018448:	b25a      	sxtb	r2, r3
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	b2db      	uxtb	r3, r3
 801844e:	011b      	lsls	r3, r3, #4
 8018450:	b25b      	sxtb	r3, r3
 8018452:	4313      	orrs	r3, r2
 8018454:	b25b      	sxtb	r3, r3
 8018456:	b2db      	uxtb	r3, r3
 8018458:	e001      	b.n	801845e <put_fat+0xbc>
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	b2db      	uxtb	r3, r3
 801845e:	697a      	ldr	r2, [r7, #20]
 8018460:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8018462:	68fb      	ldr	r3, [r7, #12]
 8018464:	2201      	movs	r2, #1
 8018466:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8018468:	68fb      	ldr	r3, [r7, #12]
 801846a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801846c:	68fb      	ldr	r3, [r7, #12]
 801846e:	899b      	ldrh	r3, [r3, #12]
 8018470:	4619      	mov	r1, r3
 8018472:	69bb      	ldr	r3, [r7, #24]
 8018474:	fbb3 f3f1 	udiv	r3, r3, r1
 8018478:	4413      	add	r3, r2
 801847a:	4619      	mov	r1, r3
 801847c:	68f8      	ldr	r0, [r7, #12]
 801847e:	f7ff fdff 	bl	8018080 <move_window>
 8018482:	4603      	mov	r3, r0
 8018484:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8018486:	7ffb      	ldrb	r3, [r7, #31]
 8018488:	2b00      	cmp	r3, #0
 801848a:	f040 809a 	bne.w	80185c2 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 801848e:	68fb      	ldr	r3, [r7, #12]
 8018490:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8018494:	68fb      	ldr	r3, [r7, #12]
 8018496:	899b      	ldrh	r3, [r3, #12]
 8018498:	461a      	mov	r2, r3
 801849a:	69bb      	ldr	r3, [r7, #24]
 801849c:	fbb3 f0f2 	udiv	r0, r3, r2
 80184a0:	fb00 f202 	mul.w	r2, r0, r2
 80184a4:	1a9b      	subs	r3, r3, r2
 80184a6:	440b      	add	r3, r1
 80184a8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80184aa:	68bb      	ldr	r3, [r7, #8]
 80184ac:	f003 0301 	and.w	r3, r3, #1
 80184b0:	2b00      	cmp	r3, #0
 80184b2:	d003      	beq.n	80184bc <put_fat+0x11a>
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	091b      	lsrs	r3, r3, #4
 80184b8:	b2db      	uxtb	r3, r3
 80184ba:	e00e      	b.n	80184da <put_fat+0x138>
 80184bc:	697b      	ldr	r3, [r7, #20]
 80184be:	781b      	ldrb	r3, [r3, #0]
 80184c0:	b25b      	sxtb	r3, r3
 80184c2:	f023 030f 	bic.w	r3, r3, #15
 80184c6:	b25a      	sxtb	r2, r3
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	0a1b      	lsrs	r3, r3, #8
 80184cc:	b25b      	sxtb	r3, r3
 80184ce:	f003 030f 	and.w	r3, r3, #15
 80184d2:	b25b      	sxtb	r3, r3
 80184d4:	4313      	orrs	r3, r2
 80184d6:	b25b      	sxtb	r3, r3
 80184d8:	b2db      	uxtb	r3, r3
 80184da:	697a      	ldr	r2, [r7, #20]
 80184dc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80184de:	68fb      	ldr	r3, [r7, #12]
 80184e0:	2201      	movs	r2, #1
 80184e2:	70da      	strb	r2, [r3, #3]
			break;
 80184e4:	e072      	b.n	80185cc <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80184e6:	68fb      	ldr	r3, [r7, #12]
 80184e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80184ea:	68fb      	ldr	r3, [r7, #12]
 80184ec:	899b      	ldrh	r3, [r3, #12]
 80184ee:	085b      	lsrs	r3, r3, #1
 80184f0:	b29b      	uxth	r3, r3
 80184f2:	4619      	mov	r1, r3
 80184f4:	68bb      	ldr	r3, [r7, #8]
 80184f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80184fa:	4413      	add	r3, r2
 80184fc:	4619      	mov	r1, r3
 80184fe:	68f8      	ldr	r0, [r7, #12]
 8018500:	f7ff fdbe 	bl	8018080 <move_window>
 8018504:	4603      	mov	r3, r0
 8018506:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8018508:	7ffb      	ldrb	r3, [r7, #31]
 801850a:	2b00      	cmp	r3, #0
 801850c:	d15b      	bne.n	80185c6 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801850e:	68fb      	ldr	r3, [r7, #12]
 8018510:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8018514:	68bb      	ldr	r3, [r7, #8]
 8018516:	005b      	lsls	r3, r3, #1
 8018518:	68fa      	ldr	r2, [r7, #12]
 801851a:	8992      	ldrh	r2, [r2, #12]
 801851c:	fbb3 f0f2 	udiv	r0, r3, r2
 8018520:	fb00 f202 	mul.w	r2, r0, r2
 8018524:	1a9b      	subs	r3, r3, r2
 8018526:	440b      	add	r3, r1
 8018528:	687a      	ldr	r2, [r7, #4]
 801852a:	b292      	uxth	r2, r2
 801852c:	4611      	mov	r1, r2
 801852e:	4618      	mov	r0, r3
 8018530:	f7ff fb31 	bl	8017b96 <st_word>
			fs->wflag = 1;
 8018534:	68fb      	ldr	r3, [r7, #12]
 8018536:	2201      	movs	r2, #1
 8018538:	70da      	strb	r2, [r3, #3]
			break;
 801853a:	e047      	b.n	80185cc <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801853c:	68fb      	ldr	r3, [r7, #12]
 801853e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8018540:	68fb      	ldr	r3, [r7, #12]
 8018542:	899b      	ldrh	r3, [r3, #12]
 8018544:	089b      	lsrs	r3, r3, #2
 8018546:	b29b      	uxth	r3, r3
 8018548:	4619      	mov	r1, r3
 801854a:	68bb      	ldr	r3, [r7, #8]
 801854c:	fbb3 f3f1 	udiv	r3, r3, r1
 8018550:	4413      	add	r3, r2
 8018552:	4619      	mov	r1, r3
 8018554:	68f8      	ldr	r0, [r7, #12]
 8018556:	f7ff fd93 	bl	8018080 <move_window>
 801855a:	4603      	mov	r3, r0
 801855c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801855e:	7ffb      	ldrb	r3, [r7, #31]
 8018560:	2b00      	cmp	r3, #0
 8018562:	d132      	bne.n	80185ca <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801856a:	68fb      	ldr	r3, [r7, #12]
 801856c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8018570:	68bb      	ldr	r3, [r7, #8]
 8018572:	009b      	lsls	r3, r3, #2
 8018574:	68fa      	ldr	r2, [r7, #12]
 8018576:	8992      	ldrh	r2, [r2, #12]
 8018578:	fbb3 f0f2 	udiv	r0, r3, r2
 801857c:	fb00 f202 	mul.w	r2, r0, r2
 8018580:	1a9b      	subs	r3, r3, r2
 8018582:	440b      	add	r3, r1
 8018584:	4618      	mov	r0, r3
 8018586:	f7ff fae3 	bl	8017b50 <ld_dword>
 801858a:	4603      	mov	r3, r0
 801858c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8018590:	4323      	orrs	r3, r4
 8018592:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8018594:	68fb      	ldr	r3, [r7, #12]
 8018596:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801859a:	68bb      	ldr	r3, [r7, #8]
 801859c:	009b      	lsls	r3, r3, #2
 801859e:	68fa      	ldr	r2, [r7, #12]
 80185a0:	8992      	ldrh	r2, [r2, #12]
 80185a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80185a6:	fb00 f202 	mul.w	r2, r0, r2
 80185aa:	1a9b      	subs	r3, r3, r2
 80185ac:	440b      	add	r3, r1
 80185ae:	6879      	ldr	r1, [r7, #4]
 80185b0:	4618      	mov	r0, r3
 80185b2:	f7ff fb0b 	bl	8017bcc <st_dword>
			fs->wflag = 1;
 80185b6:	68fb      	ldr	r3, [r7, #12]
 80185b8:	2201      	movs	r2, #1
 80185ba:	70da      	strb	r2, [r3, #3]
			break;
 80185bc:	e006      	b.n	80185cc <put_fat+0x22a>
			if (res != FR_OK) break;
 80185be:	bf00      	nop
 80185c0:	e004      	b.n	80185cc <put_fat+0x22a>
			if (res != FR_OK) break;
 80185c2:	bf00      	nop
 80185c4:	e002      	b.n	80185cc <put_fat+0x22a>
			if (res != FR_OK) break;
 80185c6:	bf00      	nop
 80185c8:	e000      	b.n	80185cc <put_fat+0x22a>
			if (res != FR_OK) break;
 80185ca:	bf00      	nop
		}
	}
	return res;
 80185cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80185ce:	4618      	mov	r0, r3
 80185d0:	3724      	adds	r7, #36	; 0x24
 80185d2:	46bd      	mov	sp, r7
 80185d4:	bd90      	pop	{r4, r7, pc}

080185d6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80185d6:	b580      	push	{r7, lr}
 80185d8:	b088      	sub	sp, #32
 80185da:	af00      	add	r7, sp, #0
 80185dc:	60f8      	str	r0, [r7, #12]
 80185de:	60b9      	str	r1, [r7, #8]
 80185e0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80185e2:	2300      	movs	r3, #0
 80185e4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80185e6:	68fb      	ldr	r3, [r7, #12]
 80185e8:	681b      	ldr	r3, [r3, #0]
 80185ea:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80185ec:	68bb      	ldr	r3, [r7, #8]
 80185ee:	2b01      	cmp	r3, #1
 80185f0:	d904      	bls.n	80185fc <remove_chain+0x26>
 80185f2:	69bb      	ldr	r3, [r7, #24]
 80185f4:	69db      	ldr	r3, [r3, #28]
 80185f6:	68ba      	ldr	r2, [r7, #8]
 80185f8:	429a      	cmp	r2, r3
 80185fa:	d301      	bcc.n	8018600 <remove_chain+0x2a>
 80185fc:	2302      	movs	r3, #2
 80185fe:	e04b      	b.n	8018698 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	2b00      	cmp	r3, #0
 8018604:	d00c      	beq.n	8018620 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8018606:	f04f 32ff 	mov.w	r2, #4294967295
 801860a:	6879      	ldr	r1, [r7, #4]
 801860c:	69b8      	ldr	r0, [r7, #24]
 801860e:	f7ff fec8 	bl	80183a2 <put_fat>
 8018612:	4603      	mov	r3, r0
 8018614:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8018616:	7ffb      	ldrb	r3, [r7, #31]
 8018618:	2b00      	cmp	r3, #0
 801861a:	d001      	beq.n	8018620 <remove_chain+0x4a>
 801861c:	7ffb      	ldrb	r3, [r7, #31]
 801861e:	e03b      	b.n	8018698 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8018620:	68b9      	ldr	r1, [r7, #8]
 8018622:	68f8      	ldr	r0, [r7, #12]
 8018624:	f7ff fde9 	bl	80181fa <get_fat>
 8018628:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801862a:	697b      	ldr	r3, [r7, #20]
 801862c:	2b00      	cmp	r3, #0
 801862e:	d031      	beq.n	8018694 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8018630:	697b      	ldr	r3, [r7, #20]
 8018632:	2b01      	cmp	r3, #1
 8018634:	d101      	bne.n	801863a <remove_chain+0x64>
 8018636:	2302      	movs	r3, #2
 8018638:	e02e      	b.n	8018698 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801863a:	697b      	ldr	r3, [r7, #20]
 801863c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018640:	d101      	bne.n	8018646 <remove_chain+0x70>
 8018642:	2301      	movs	r3, #1
 8018644:	e028      	b.n	8018698 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8018646:	2200      	movs	r2, #0
 8018648:	68b9      	ldr	r1, [r7, #8]
 801864a:	69b8      	ldr	r0, [r7, #24]
 801864c:	f7ff fea9 	bl	80183a2 <put_fat>
 8018650:	4603      	mov	r3, r0
 8018652:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8018654:	7ffb      	ldrb	r3, [r7, #31]
 8018656:	2b00      	cmp	r3, #0
 8018658:	d001      	beq.n	801865e <remove_chain+0x88>
 801865a:	7ffb      	ldrb	r3, [r7, #31]
 801865c:	e01c      	b.n	8018698 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801865e:	69bb      	ldr	r3, [r7, #24]
 8018660:	699a      	ldr	r2, [r3, #24]
 8018662:	69bb      	ldr	r3, [r7, #24]
 8018664:	69db      	ldr	r3, [r3, #28]
 8018666:	3b02      	subs	r3, #2
 8018668:	429a      	cmp	r2, r3
 801866a:	d20b      	bcs.n	8018684 <remove_chain+0xae>
			fs->free_clst++;
 801866c:	69bb      	ldr	r3, [r7, #24]
 801866e:	699b      	ldr	r3, [r3, #24]
 8018670:	1c5a      	adds	r2, r3, #1
 8018672:	69bb      	ldr	r3, [r7, #24]
 8018674:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8018676:	69bb      	ldr	r3, [r7, #24]
 8018678:	791b      	ldrb	r3, [r3, #4]
 801867a:	f043 0301 	orr.w	r3, r3, #1
 801867e:	b2da      	uxtb	r2, r3
 8018680:	69bb      	ldr	r3, [r7, #24]
 8018682:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8018684:	697b      	ldr	r3, [r7, #20]
 8018686:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8018688:	69bb      	ldr	r3, [r7, #24]
 801868a:	69db      	ldr	r3, [r3, #28]
 801868c:	68ba      	ldr	r2, [r7, #8]
 801868e:	429a      	cmp	r2, r3
 8018690:	d3c6      	bcc.n	8018620 <remove_chain+0x4a>
 8018692:	e000      	b.n	8018696 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8018694:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8018696:	2300      	movs	r3, #0
}
 8018698:	4618      	mov	r0, r3
 801869a:	3720      	adds	r7, #32
 801869c:	46bd      	mov	sp, r7
 801869e:	bd80      	pop	{r7, pc}

080186a0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80186a0:	b580      	push	{r7, lr}
 80186a2:	b088      	sub	sp, #32
 80186a4:	af00      	add	r7, sp, #0
 80186a6:	6078      	str	r0, [r7, #4]
 80186a8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	681b      	ldr	r3, [r3, #0]
 80186ae:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80186b0:	683b      	ldr	r3, [r7, #0]
 80186b2:	2b00      	cmp	r3, #0
 80186b4:	d10d      	bne.n	80186d2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80186b6:	693b      	ldr	r3, [r7, #16]
 80186b8:	695b      	ldr	r3, [r3, #20]
 80186ba:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80186bc:	69bb      	ldr	r3, [r7, #24]
 80186be:	2b00      	cmp	r3, #0
 80186c0:	d004      	beq.n	80186cc <create_chain+0x2c>
 80186c2:	693b      	ldr	r3, [r7, #16]
 80186c4:	69db      	ldr	r3, [r3, #28]
 80186c6:	69ba      	ldr	r2, [r7, #24]
 80186c8:	429a      	cmp	r2, r3
 80186ca:	d31b      	bcc.n	8018704 <create_chain+0x64>
 80186cc:	2301      	movs	r3, #1
 80186ce:	61bb      	str	r3, [r7, #24]
 80186d0:	e018      	b.n	8018704 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80186d2:	6839      	ldr	r1, [r7, #0]
 80186d4:	6878      	ldr	r0, [r7, #4]
 80186d6:	f7ff fd90 	bl	80181fa <get_fat>
 80186da:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80186dc:	68fb      	ldr	r3, [r7, #12]
 80186de:	2b01      	cmp	r3, #1
 80186e0:	d801      	bhi.n	80186e6 <create_chain+0x46>
 80186e2:	2301      	movs	r3, #1
 80186e4:	e070      	b.n	80187c8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80186e6:	68fb      	ldr	r3, [r7, #12]
 80186e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80186ec:	d101      	bne.n	80186f2 <create_chain+0x52>
 80186ee:	68fb      	ldr	r3, [r7, #12]
 80186f0:	e06a      	b.n	80187c8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80186f2:	693b      	ldr	r3, [r7, #16]
 80186f4:	69db      	ldr	r3, [r3, #28]
 80186f6:	68fa      	ldr	r2, [r7, #12]
 80186f8:	429a      	cmp	r2, r3
 80186fa:	d201      	bcs.n	8018700 <create_chain+0x60>
 80186fc:	68fb      	ldr	r3, [r7, #12]
 80186fe:	e063      	b.n	80187c8 <create_chain+0x128>
		scl = clst;
 8018700:	683b      	ldr	r3, [r7, #0]
 8018702:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8018704:	69bb      	ldr	r3, [r7, #24]
 8018706:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8018708:	69fb      	ldr	r3, [r7, #28]
 801870a:	3301      	adds	r3, #1
 801870c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801870e:	693b      	ldr	r3, [r7, #16]
 8018710:	69db      	ldr	r3, [r3, #28]
 8018712:	69fa      	ldr	r2, [r7, #28]
 8018714:	429a      	cmp	r2, r3
 8018716:	d307      	bcc.n	8018728 <create_chain+0x88>
				ncl = 2;
 8018718:	2302      	movs	r3, #2
 801871a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801871c:	69fa      	ldr	r2, [r7, #28]
 801871e:	69bb      	ldr	r3, [r7, #24]
 8018720:	429a      	cmp	r2, r3
 8018722:	d901      	bls.n	8018728 <create_chain+0x88>
 8018724:	2300      	movs	r3, #0
 8018726:	e04f      	b.n	80187c8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8018728:	69f9      	ldr	r1, [r7, #28]
 801872a:	6878      	ldr	r0, [r7, #4]
 801872c:	f7ff fd65 	bl	80181fa <get_fat>
 8018730:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8018732:	68fb      	ldr	r3, [r7, #12]
 8018734:	2b00      	cmp	r3, #0
 8018736:	d00e      	beq.n	8018756 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8018738:	68fb      	ldr	r3, [r7, #12]
 801873a:	2b01      	cmp	r3, #1
 801873c:	d003      	beq.n	8018746 <create_chain+0xa6>
 801873e:	68fb      	ldr	r3, [r7, #12]
 8018740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018744:	d101      	bne.n	801874a <create_chain+0xaa>
 8018746:	68fb      	ldr	r3, [r7, #12]
 8018748:	e03e      	b.n	80187c8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801874a:	69fa      	ldr	r2, [r7, #28]
 801874c:	69bb      	ldr	r3, [r7, #24]
 801874e:	429a      	cmp	r2, r3
 8018750:	d1da      	bne.n	8018708 <create_chain+0x68>
 8018752:	2300      	movs	r3, #0
 8018754:	e038      	b.n	80187c8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8018756:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8018758:	f04f 32ff 	mov.w	r2, #4294967295
 801875c:	69f9      	ldr	r1, [r7, #28]
 801875e:	6938      	ldr	r0, [r7, #16]
 8018760:	f7ff fe1f 	bl	80183a2 <put_fat>
 8018764:	4603      	mov	r3, r0
 8018766:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8018768:	7dfb      	ldrb	r3, [r7, #23]
 801876a:	2b00      	cmp	r3, #0
 801876c:	d109      	bne.n	8018782 <create_chain+0xe2>
 801876e:	683b      	ldr	r3, [r7, #0]
 8018770:	2b00      	cmp	r3, #0
 8018772:	d006      	beq.n	8018782 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8018774:	69fa      	ldr	r2, [r7, #28]
 8018776:	6839      	ldr	r1, [r7, #0]
 8018778:	6938      	ldr	r0, [r7, #16]
 801877a:	f7ff fe12 	bl	80183a2 <put_fat>
 801877e:	4603      	mov	r3, r0
 8018780:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8018782:	7dfb      	ldrb	r3, [r7, #23]
 8018784:	2b00      	cmp	r3, #0
 8018786:	d116      	bne.n	80187b6 <create_chain+0x116>
		fs->last_clst = ncl;
 8018788:	693b      	ldr	r3, [r7, #16]
 801878a:	69fa      	ldr	r2, [r7, #28]
 801878c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801878e:	693b      	ldr	r3, [r7, #16]
 8018790:	699a      	ldr	r2, [r3, #24]
 8018792:	693b      	ldr	r3, [r7, #16]
 8018794:	69db      	ldr	r3, [r3, #28]
 8018796:	3b02      	subs	r3, #2
 8018798:	429a      	cmp	r2, r3
 801879a:	d804      	bhi.n	80187a6 <create_chain+0x106>
 801879c:	693b      	ldr	r3, [r7, #16]
 801879e:	699b      	ldr	r3, [r3, #24]
 80187a0:	1e5a      	subs	r2, r3, #1
 80187a2:	693b      	ldr	r3, [r7, #16]
 80187a4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80187a6:	693b      	ldr	r3, [r7, #16]
 80187a8:	791b      	ldrb	r3, [r3, #4]
 80187aa:	f043 0301 	orr.w	r3, r3, #1
 80187ae:	b2da      	uxtb	r2, r3
 80187b0:	693b      	ldr	r3, [r7, #16]
 80187b2:	711a      	strb	r2, [r3, #4]
 80187b4:	e007      	b.n	80187c6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80187b6:	7dfb      	ldrb	r3, [r7, #23]
 80187b8:	2b01      	cmp	r3, #1
 80187ba:	d102      	bne.n	80187c2 <create_chain+0x122>
 80187bc:	f04f 33ff 	mov.w	r3, #4294967295
 80187c0:	e000      	b.n	80187c4 <create_chain+0x124>
 80187c2:	2301      	movs	r3, #1
 80187c4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80187c6:	69fb      	ldr	r3, [r7, #28]
}
 80187c8:	4618      	mov	r0, r3
 80187ca:	3720      	adds	r7, #32
 80187cc:	46bd      	mov	sp, r7
 80187ce:	bd80      	pop	{r7, pc}

080187d0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80187d0:	b480      	push	{r7}
 80187d2:	b087      	sub	sp, #28
 80187d4:	af00      	add	r7, sp, #0
 80187d6:	6078      	str	r0, [r7, #4]
 80187d8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	681b      	ldr	r3, [r3, #0]
 80187de:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187e4:	3304      	adds	r3, #4
 80187e6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80187e8:	68fb      	ldr	r3, [r7, #12]
 80187ea:	899b      	ldrh	r3, [r3, #12]
 80187ec:	461a      	mov	r2, r3
 80187ee:	683b      	ldr	r3, [r7, #0]
 80187f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80187f4:	68fa      	ldr	r2, [r7, #12]
 80187f6:	8952      	ldrh	r2, [r2, #10]
 80187f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80187fc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80187fe:	693b      	ldr	r3, [r7, #16]
 8018800:	1d1a      	adds	r2, r3, #4
 8018802:	613a      	str	r2, [r7, #16]
 8018804:	681b      	ldr	r3, [r3, #0]
 8018806:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8018808:	68bb      	ldr	r3, [r7, #8]
 801880a:	2b00      	cmp	r3, #0
 801880c:	d101      	bne.n	8018812 <clmt_clust+0x42>
 801880e:	2300      	movs	r3, #0
 8018810:	e010      	b.n	8018834 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8018812:	697a      	ldr	r2, [r7, #20]
 8018814:	68bb      	ldr	r3, [r7, #8]
 8018816:	429a      	cmp	r2, r3
 8018818:	d307      	bcc.n	801882a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801881a:	697a      	ldr	r2, [r7, #20]
 801881c:	68bb      	ldr	r3, [r7, #8]
 801881e:	1ad3      	subs	r3, r2, r3
 8018820:	617b      	str	r3, [r7, #20]
 8018822:	693b      	ldr	r3, [r7, #16]
 8018824:	3304      	adds	r3, #4
 8018826:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8018828:	e7e9      	b.n	80187fe <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801882a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801882c:	693b      	ldr	r3, [r7, #16]
 801882e:	681a      	ldr	r2, [r3, #0]
 8018830:	697b      	ldr	r3, [r7, #20]
 8018832:	4413      	add	r3, r2
}
 8018834:	4618      	mov	r0, r3
 8018836:	371c      	adds	r7, #28
 8018838:	46bd      	mov	sp, r7
 801883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801883e:	4770      	bx	lr

08018840 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8018840:	b580      	push	{r7, lr}
 8018842:	b086      	sub	sp, #24
 8018844:	af00      	add	r7, sp, #0
 8018846:	6078      	str	r0, [r7, #4]
 8018848:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	681b      	ldr	r3, [r3, #0]
 801884e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8018850:	683b      	ldr	r3, [r7, #0]
 8018852:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8018856:	d204      	bcs.n	8018862 <dir_sdi+0x22>
 8018858:	683b      	ldr	r3, [r7, #0]
 801885a:	f003 031f 	and.w	r3, r3, #31
 801885e:	2b00      	cmp	r3, #0
 8018860:	d001      	beq.n	8018866 <dir_sdi+0x26>
		return FR_INT_ERR;
 8018862:	2302      	movs	r3, #2
 8018864:	e071      	b.n	801894a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8018866:	687b      	ldr	r3, [r7, #4]
 8018868:	683a      	ldr	r2, [r7, #0]
 801886a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	689b      	ldr	r3, [r3, #8]
 8018870:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8018872:	697b      	ldr	r3, [r7, #20]
 8018874:	2b00      	cmp	r3, #0
 8018876:	d106      	bne.n	8018886 <dir_sdi+0x46>
 8018878:	693b      	ldr	r3, [r7, #16]
 801887a:	781b      	ldrb	r3, [r3, #0]
 801887c:	2b02      	cmp	r3, #2
 801887e:	d902      	bls.n	8018886 <dir_sdi+0x46>
		clst = fs->dirbase;
 8018880:	693b      	ldr	r3, [r7, #16]
 8018882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018884:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8018886:	697b      	ldr	r3, [r7, #20]
 8018888:	2b00      	cmp	r3, #0
 801888a:	d10c      	bne.n	80188a6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801888c:	683b      	ldr	r3, [r7, #0]
 801888e:	095b      	lsrs	r3, r3, #5
 8018890:	693a      	ldr	r2, [r7, #16]
 8018892:	8912      	ldrh	r2, [r2, #8]
 8018894:	4293      	cmp	r3, r2
 8018896:	d301      	bcc.n	801889c <dir_sdi+0x5c>
 8018898:	2302      	movs	r3, #2
 801889a:	e056      	b.n	801894a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801889c:	693b      	ldr	r3, [r7, #16]
 801889e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	61da      	str	r2, [r3, #28]
 80188a4:	e02d      	b.n	8018902 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80188a6:	693b      	ldr	r3, [r7, #16]
 80188a8:	895b      	ldrh	r3, [r3, #10]
 80188aa:	461a      	mov	r2, r3
 80188ac:	693b      	ldr	r3, [r7, #16]
 80188ae:	899b      	ldrh	r3, [r3, #12]
 80188b0:	fb02 f303 	mul.w	r3, r2, r3
 80188b4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80188b6:	e019      	b.n	80188ec <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	6979      	ldr	r1, [r7, #20]
 80188bc:	4618      	mov	r0, r3
 80188be:	f7ff fc9c 	bl	80181fa <get_fat>
 80188c2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80188c4:	697b      	ldr	r3, [r7, #20]
 80188c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80188ca:	d101      	bne.n	80188d0 <dir_sdi+0x90>
 80188cc:	2301      	movs	r3, #1
 80188ce:	e03c      	b.n	801894a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80188d0:	697b      	ldr	r3, [r7, #20]
 80188d2:	2b01      	cmp	r3, #1
 80188d4:	d904      	bls.n	80188e0 <dir_sdi+0xa0>
 80188d6:	693b      	ldr	r3, [r7, #16]
 80188d8:	69db      	ldr	r3, [r3, #28]
 80188da:	697a      	ldr	r2, [r7, #20]
 80188dc:	429a      	cmp	r2, r3
 80188de:	d301      	bcc.n	80188e4 <dir_sdi+0xa4>
 80188e0:	2302      	movs	r3, #2
 80188e2:	e032      	b.n	801894a <dir_sdi+0x10a>
			ofs -= csz;
 80188e4:	683a      	ldr	r2, [r7, #0]
 80188e6:	68fb      	ldr	r3, [r7, #12]
 80188e8:	1ad3      	subs	r3, r2, r3
 80188ea:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80188ec:	683a      	ldr	r2, [r7, #0]
 80188ee:	68fb      	ldr	r3, [r7, #12]
 80188f0:	429a      	cmp	r2, r3
 80188f2:	d2e1      	bcs.n	80188b8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80188f4:	6979      	ldr	r1, [r7, #20]
 80188f6:	6938      	ldr	r0, [r7, #16]
 80188f8:	f7ff fc60 	bl	80181bc <clust2sect>
 80188fc:	4602      	mov	r2, r0
 80188fe:	687b      	ldr	r3, [r7, #4]
 8018900:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8018902:	687b      	ldr	r3, [r7, #4]
 8018904:	697a      	ldr	r2, [r7, #20]
 8018906:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	69db      	ldr	r3, [r3, #28]
 801890c:	2b00      	cmp	r3, #0
 801890e:	d101      	bne.n	8018914 <dir_sdi+0xd4>
 8018910:	2302      	movs	r3, #2
 8018912:	e01a      	b.n	801894a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	69da      	ldr	r2, [r3, #28]
 8018918:	693b      	ldr	r3, [r7, #16]
 801891a:	899b      	ldrh	r3, [r3, #12]
 801891c:	4619      	mov	r1, r3
 801891e:	683b      	ldr	r3, [r7, #0]
 8018920:	fbb3 f3f1 	udiv	r3, r3, r1
 8018924:	441a      	add	r2, r3
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801892a:	693b      	ldr	r3, [r7, #16]
 801892c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8018930:	693b      	ldr	r3, [r7, #16]
 8018932:	899b      	ldrh	r3, [r3, #12]
 8018934:	461a      	mov	r2, r3
 8018936:	683b      	ldr	r3, [r7, #0]
 8018938:	fbb3 f0f2 	udiv	r0, r3, r2
 801893c:	fb00 f202 	mul.w	r2, r0, r2
 8018940:	1a9b      	subs	r3, r3, r2
 8018942:	18ca      	adds	r2, r1, r3
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8018948:	2300      	movs	r3, #0
}
 801894a:	4618      	mov	r0, r3
 801894c:	3718      	adds	r7, #24
 801894e:	46bd      	mov	sp, r7
 8018950:	bd80      	pop	{r7, pc}

08018952 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8018952:	b580      	push	{r7, lr}
 8018954:	b086      	sub	sp, #24
 8018956:	af00      	add	r7, sp, #0
 8018958:	6078      	str	r0, [r7, #4]
 801895a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	681b      	ldr	r3, [r3, #0]
 8018960:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	695b      	ldr	r3, [r3, #20]
 8018966:	3320      	adds	r3, #32
 8018968:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	69db      	ldr	r3, [r3, #28]
 801896e:	2b00      	cmp	r3, #0
 8018970:	d003      	beq.n	801897a <dir_next+0x28>
 8018972:	68bb      	ldr	r3, [r7, #8]
 8018974:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8018978:	d301      	bcc.n	801897e <dir_next+0x2c>
 801897a:	2304      	movs	r3, #4
 801897c:	e0bb      	b.n	8018af6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801897e:	68fb      	ldr	r3, [r7, #12]
 8018980:	899b      	ldrh	r3, [r3, #12]
 8018982:	461a      	mov	r2, r3
 8018984:	68bb      	ldr	r3, [r7, #8]
 8018986:	fbb3 f1f2 	udiv	r1, r3, r2
 801898a:	fb01 f202 	mul.w	r2, r1, r2
 801898e:	1a9b      	subs	r3, r3, r2
 8018990:	2b00      	cmp	r3, #0
 8018992:	f040 809d 	bne.w	8018ad0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	69db      	ldr	r3, [r3, #28]
 801899a:	1c5a      	adds	r2, r3, #1
 801899c:	687b      	ldr	r3, [r7, #4]
 801899e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	699b      	ldr	r3, [r3, #24]
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	d10b      	bne.n	80189c0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80189a8:	68bb      	ldr	r3, [r7, #8]
 80189aa:	095b      	lsrs	r3, r3, #5
 80189ac:	68fa      	ldr	r2, [r7, #12]
 80189ae:	8912      	ldrh	r2, [r2, #8]
 80189b0:	4293      	cmp	r3, r2
 80189b2:	f0c0 808d 	bcc.w	8018ad0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	2200      	movs	r2, #0
 80189ba:	61da      	str	r2, [r3, #28]
 80189bc:	2304      	movs	r3, #4
 80189be:	e09a      	b.n	8018af6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80189c0:	68fb      	ldr	r3, [r7, #12]
 80189c2:	899b      	ldrh	r3, [r3, #12]
 80189c4:	461a      	mov	r2, r3
 80189c6:	68bb      	ldr	r3, [r7, #8]
 80189c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80189cc:	68fa      	ldr	r2, [r7, #12]
 80189ce:	8952      	ldrh	r2, [r2, #10]
 80189d0:	3a01      	subs	r2, #1
 80189d2:	4013      	ands	r3, r2
 80189d4:	2b00      	cmp	r3, #0
 80189d6:	d17b      	bne.n	8018ad0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80189d8:	687a      	ldr	r2, [r7, #4]
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	699b      	ldr	r3, [r3, #24]
 80189de:	4619      	mov	r1, r3
 80189e0:	4610      	mov	r0, r2
 80189e2:	f7ff fc0a 	bl	80181fa <get_fat>
 80189e6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80189e8:	697b      	ldr	r3, [r7, #20]
 80189ea:	2b01      	cmp	r3, #1
 80189ec:	d801      	bhi.n	80189f2 <dir_next+0xa0>
 80189ee:	2302      	movs	r3, #2
 80189f0:	e081      	b.n	8018af6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80189f2:	697b      	ldr	r3, [r7, #20]
 80189f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80189f8:	d101      	bne.n	80189fe <dir_next+0xac>
 80189fa:	2301      	movs	r3, #1
 80189fc:	e07b      	b.n	8018af6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80189fe:	68fb      	ldr	r3, [r7, #12]
 8018a00:	69db      	ldr	r3, [r3, #28]
 8018a02:	697a      	ldr	r2, [r7, #20]
 8018a04:	429a      	cmp	r2, r3
 8018a06:	d359      	bcc.n	8018abc <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8018a08:	683b      	ldr	r3, [r7, #0]
 8018a0a:	2b00      	cmp	r3, #0
 8018a0c:	d104      	bne.n	8018a18 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	2200      	movs	r2, #0
 8018a12:	61da      	str	r2, [r3, #28]
 8018a14:	2304      	movs	r3, #4
 8018a16:	e06e      	b.n	8018af6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8018a18:	687a      	ldr	r2, [r7, #4]
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	699b      	ldr	r3, [r3, #24]
 8018a1e:	4619      	mov	r1, r3
 8018a20:	4610      	mov	r0, r2
 8018a22:	f7ff fe3d 	bl	80186a0 <create_chain>
 8018a26:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8018a28:	697b      	ldr	r3, [r7, #20]
 8018a2a:	2b00      	cmp	r3, #0
 8018a2c:	d101      	bne.n	8018a32 <dir_next+0xe0>
 8018a2e:	2307      	movs	r3, #7
 8018a30:	e061      	b.n	8018af6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8018a32:	697b      	ldr	r3, [r7, #20]
 8018a34:	2b01      	cmp	r3, #1
 8018a36:	d101      	bne.n	8018a3c <dir_next+0xea>
 8018a38:	2302      	movs	r3, #2
 8018a3a:	e05c      	b.n	8018af6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8018a3c:	697b      	ldr	r3, [r7, #20]
 8018a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018a42:	d101      	bne.n	8018a48 <dir_next+0xf6>
 8018a44:	2301      	movs	r3, #1
 8018a46:	e056      	b.n	8018af6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8018a48:	68f8      	ldr	r0, [r7, #12]
 8018a4a:	f7ff fad5 	bl	8017ff8 <sync_window>
 8018a4e:	4603      	mov	r3, r0
 8018a50:	2b00      	cmp	r3, #0
 8018a52:	d001      	beq.n	8018a58 <dir_next+0x106>
 8018a54:	2301      	movs	r3, #1
 8018a56:	e04e      	b.n	8018af6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8018a58:	68fb      	ldr	r3, [r7, #12]
 8018a5a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8018a5e:	68fb      	ldr	r3, [r7, #12]
 8018a60:	899b      	ldrh	r3, [r3, #12]
 8018a62:	461a      	mov	r2, r3
 8018a64:	2100      	movs	r1, #0
 8018a66:	f7ff f8fe 	bl	8017c66 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8018a6a:	2300      	movs	r3, #0
 8018a6c:	613b      	str	r3, [r7, #16]
 8018a6e:	6979      	ldr	r1, [r7, #20]
 8018a70:	68f8      	ldr	r0, [r7, #12]
 8018a72:	f7ff fba3 	bl	80181bc <clust2sect>
 8018a76:	4602      	mov	r2, r0
 8018a78:	68fb      	ldr	r3, [r7, #12]
 8018a7a:	635a      	str	r2, [r3, #52]	; 0x34
 8018a7c:	e012      	b.n	8018aa4 <dir_next+0x152>
						fs->wflag = 1;
 8018a7e:	68fb      	ldr	r3, [r7, #12]
 8018a80:	2201      	movs	r2, #1
 8018a82:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8018a84:	68f8      	ldr	r0, [r7, #12]
 8018a86:	f7ff fab7 	bl	8017ff8 <sync_window>
 8018a8a:	4603      	mov	r3, r0
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	d001      	beq.n	8018a94 <dir_next+0x142>
 8018a90:	2301      	movs	r3, #1
 8018a92:	e030      	b.n	8018af6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8018a94:	693b      	ldr	r3, [r7, #16]
 8018a96:	3301      	adds	r3, #1
 8018a98:	613b      	str	r3, [r7, #16]
 8018a9a:	68fb      	ldr	r3, [r7, #12]
 8018a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018a9e:	1c5a      	adds	r2, r3, #1
 8018aa0:	68fb      	ldr	r3, [r7, #12]
 8018aa2:	635a      	str	r2, [r3, #52]	; 0x34
 8018aa4:	68fb      	ldr	r3, [r7, #12]
 8018aa6:	895b      	ldrh	r3, [r3, #10]
 8018aa8:	461a      	mov	r2, r3
 8018aaa:	693b      	ldr	r3, [r7, #16]
 8018aac:	4293      	cmp	r3, r2
 8018aae:	d3e6      	bcc.n	8018a7e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8018ab0:	68fb      	ldr	r3, [r7, #12]
 8018ab2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8018ab4:	693b      	ldr	r3, [r7, #16]
 8018ab6:	1ad2      	subs	r2, r2, r3
 8018ab8:	68fb      	ldr	r3, [r7, #12]
 8018aba:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	697a      	ldr	r2, [r7, #20]
 8018ac0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8018ac2:	6979      	ldr	r1, [r7, #20]
 8018ac4:	68f8      	ldr	r0, [r7, #12]
 8018ac6:	f7ff fb79 	bl	80181bc <clust2sect>
 8018aca:	4602      	mov	r2, r0
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8018ad0:	687b      	ldr	r3, [r7, #4]
 8018ad2:	68ba      	ldr	r2, [r7, #8]
 8018ad4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8018ad6:	68fb      	ldr	r3, [r7, #12]
 8018ad8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8018adc:	68fb      	ldr	r3, [r7, #12]
 8018ade:	899b      	ldrh	r3, [r3, #12]
 8018ae0:	461a      	mov	r2, r3
 8018ae2:	68bb      	ldr	r3, [r7, #8]
 8018ae4:	fbb3 f0f2 	udiv	r0, r3, r2
 8018ae8:	fb00 f202 	mul.w	r2, r0, r2
 8018aec:	1a9b      	subs	r3, r3, r2
 8018aee:	18ca      	adds	r2, r1, r3
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8018af4:	2300      	movs	r3, #0
}
 8018af6:	4618      	mov	r0, r3
 8018af8:	3718      	adds	r7, #24
 8018afa:	46bd      	mov	sp, r7
 8018afc:	bd80      	pop	{r7, pc}

08018afe <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8018afe:	b580      	push	{r7, lr}
 8018b00:	b086      	sub	sp, #24
 8018b02:	af00      	add	r7, sp, #0
 8018b04:	6078      	str	r0, [r7, #4]
 8018b06:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	681b      	ldr	r3, [r3, #0]
 8018b0c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8018b0e:	2100      	movs	r1, #0
 8018b10:	6878      	ldr	r0, [r7, #4]
 8018b12:	f7ff fe95 	bl	8018840 <dir_sdi>
 8018b16:	4603      	mov	r3, r0
 8018b18:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8018b1a:	7dfb      	ldrb	r3, [r7, #23]
 8018b1c:	2b00      	cmp	r3, #0
 8018b1e:	d12b      	bne.n	8018b78 <dir_alloc+0x7a>
		n = 0;
 8018b20:	2300      	movs	r3, #0
 8018b22:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8018b24:	687b      	ldr	r3, [r7, #4]
 8018b26:	69db      	ldr	r3, [r3, #28]
 8018b28:	4619      	mov	r1, r3
 8018b2a:	68f8      	ldr	r0, [r7, #12]
 8018b2c:	f7ff faa8 	bl	8018080 <move_window>
 8018b30:	4603      	mov	r3, r0
 8018b32:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8018b34:	7dfb      	ldrb	r3, [r7, #23]
 8018b36:	2b00      	cmp	r3, #0
 8018b38:	d11d      	bne.n	8018b76 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8018b3a:	687b      	ldr	r3, [r7, #4]
 8018b3c:	6a1b      	ldr	r3, [r3, #32]
 8018b3e:	781b      	ldrb	r3, [r3, #0]
 8018b40:	2be5      	cmp	r3, #229	; 0xe5
 8018b42:	d004      	beq.n	8018b4e <dir_alloc+0x50>
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	6a1b      	ldr	r3, [r3, #32]
 8018b48:	781b      	ldrb	r3, [r3, #0]
 8018b4a:	2b00      	cmp	r3, #0
 8018b4c:	d107      	bne.n	8018b5e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8018b4e:	693b      	ldr	r3, [r7, #16]
 8018b50:	3301      	adds	r3, #1
 8018b52:	613b      	str	r3, [r7, #16]
 8018b54:	693a      	ldr	r2, [r7, #16]
 8018b56:	683b      	ldr	r3, [r7, #0]
 8018b58:	429a      	cmp	r2, r3
 8018b5a:	d102      	bne.n	8018b62 <dir_alloc+0x64>
 8018b5c:	e00c      	b.n	8018b78 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8018b5e:	2300      	movs	r3, #0
 8018b60:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8018b62:	2101      	movs	r1, #1
 8018b64:	6878      	ldr	r0, [r7, #4]
 8018b66:	f7ff fef4 	bl	8018952 <dir_next>
 8018b6a:	4603      	mov	r3, r0
 8018b6c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8018b6e:	7dfb      	ldrb	r3, [r7, #23]
 8018b70:	2b00      	cmp	r3, #0
 8018b72:	d0d7      	beq.n	8018b24 <dir_alloc+0x26>
 8018b74:	e000      	b.n	8018b78 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8018b76:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8018b78:	7dfb      	ldrb	r3, [r7, #23]
 8018b7a:	2b04      	cmp	r3, #4
 8018b7c:	d101      	bne.n	8018b82 <dir_alloc+0x84>
 8018b7e:	2307      	movs	r3, #7
 8018b80:	75fb      	strb	r3, [r7, #23]
	return res;
 8018b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8018b84:	4618      	mov	r0, r3
 8018b86:	3718      	adds	r7, #24
 8018b88:	46bd      	mov	sp, r7
 8018b8a:	bd80      	pop	{r7, pc}

08018b8c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8018b8c:	b580      	push	{r7, lr}
 8018b8e:	b084      	sub	sp, #16
 8018b90:	af00      	add	r7, sp, #0
 8018b92:	6078      	str	r0, [r7, #4]
 8018b94:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8018b96:	683b      	ldr	r3, [r7, #0]
 8018b98:	331a      	adds	r3, #26
 8018b9a:	4618      	mov	r0, r3
 8018b9c:	f7fe ffc0 	bl	8017b20 <ld_word>
 8018ba0:	4603      	mov	r3, r0
 8018ba2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	781b      	ldrb	r3, [r3, #0]
 8018ba8:	2b03      	cmp	r3, #3
 8018baa:	d109      	bne.n	8018bc0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8018bac:	683b      	ldr	r3, [r7, #0]
 8018bae:	3314      	adds	r3, #20
 8018bb0:	4618      	mov	r0, r3
 8018bb2:	f7fe ffb5 	bl	8017b20 <ld_word>
 8018bb6:	4603      	mov	r3, r0
 8018bb8:	041b      	lsls	r3, r3, #16
 8018bba:	68fa      	ldr	r2, [r7, #12]
 8018bbc:	4313      	orrs	r3, r2
 8018bbe:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8018bc0:	68fb      	ldr	r3, [r7, #12]
}
 8018bc2:	4618      	mov	r0, r3
 8018bc4:	3710      	adds	r7, #16
 8018bc6:	46bd      	mov	sp, r7
 8018bc8:	bd80      	pop	{r7, pc}

08018bca <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8018bca:	b580      	push	{r7, lr}
 8018bcc:	b084      	sub	sp, #16
 8018bce:	af00      	add	r7, sp, #0
 8018bd0:	60f8      	str	r0, [r7, #12]
 8018bd2:	60b9      	str	r1, [r7, #8]
 8018bd4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8018bd6:	68bb      	ldr	r3, [r7, #8]
 8018bd8:	331a      	adds	r3, #26
 8018bda:	687a      	ldr	r2, [r7, #4]
 8018bdc:	b292      	uxth	r2, r2
 8018bde:	4611      	mov	r1, r2
 8018be0:	4618      	mov	r0, r3
 8018be2:	f7fe ffd8 	bl	8017b96 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8018be6:	68fb      	ldr	r3, [r7, #12]
 8018be8:	781b      	ldrb	r3, [r3, #0]
 8018bea:	2b03      	cmp	r3, #3
 8018bec:	d109      	bne.n	8018c02 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8018bee:	68bb      	ldr	r3, [r7, #8]
 8018bf0:	f103 0214 	add.w	r2, r3, #20
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	0c1b      	lsrs	r3, r3, #16
 8018bf8:	b29b      	uxth	r3, r3
 8018bfa:	4619      	mov	r1, r3
 8018bfc:	4610      	mov	r0, r2
 8018bfe:	f7fe ffca 	bl	8017b96 <st_word>
	}
}
 8018c02:	bf00      	nop
 8018c04:	3710      	adds	r7, #16
 8018c06:	46bd      	mov	sp, r7
 8018c08:	bd80      	pop	{r7, pc}
	...

08018c0c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8018c0c:	b590      	push	{r4, r7, lr}
 8018c0e:	b087      	sub	sp, #28
 8018c10:	af00      	add	r7, sp, #0
 8018c12:	6078      	str	r0, [r7, #4]
 8018c14:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8018c16:	683b      	ldr	r3, [r7, #0]
 8018c18:	331a      	adds	r3, #26
 8018c1a:	4618      	mov	r0, r3
 8018c1c:	f7fe ff80 	bl	8017b20 <ld_word>
 8018c20:	4603      	mov	r3, r0
 8018c22:	2b00      	cmp	r3, #0
 8018c24:	d001      	beq.n	8018c2a <cmp_lfn+0x1e>
 8018c26:	2300      	movs	r3, #0
 8018c28:	e059      	b.n	8018cde <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8018c2a:	683b      	ldr	r3, [r7, #0]
 8018c2c:	781b      	ldrb	r3, [r3, #0]
 8018c2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018c32:	1e5a      	subs	r2, r3, #1
 8018c34:	4613      	mov	r3, r2
 8018c36:	005b      	lsls	r3, r3, #1
 8018c38:	4413      	add	r3, r2
 8018c3a:	009b      	lsls	r3, r3, #2
 8018c3c:	4413      	add	r3, r2
 8018c3e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8018c40:	2301      	movs	r3, #1
 8018c42:	81fb      	strh	r3, [r7, #14]
 8018c44:	2300      	movs	r3, #0
 8018c46:	613b      	str	r3, [r7, #16]
 8018c48:	e033      	b.n	8018cb2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8018c4a:	4a27      	ldr	r2, [pc, #156]	; (8018ce8 <cmp_lfn+0xdc>)
 8018c4c:	693b      	ldr	r3, [r7, #16]
 8018c4e:	4413      	add	r3, r2
 8018c50:	781b      	ldrb	r3, [r3, #0]
 8018c52:	461a      	mov	r2, r3
 8018c54:	683b      	ldr	r3, [r7, #0]
 8018c56:	4413      	add	r3, r2
 8018c58:	4618      	mov	r0, r3
 8018c5a:	f7fe ff61 	bl	8017b20 <ld_word>
 8018c5e:	4603      	mov	r3, r0
 8018c60:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8018c62:	89fb      	ldrh	r3, [r7, #14]
 8018c64:	2b00      	cmp	r3, #0
 8018c66:	d01a      	beq.n	8018c9e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8018c68:	697b      	ldr	r3, [r7, #20]
 8018c6a:	2bfe      	cmp	r3, #254	; 0xfe
 8018c6c:	d812      	bhi.n	8018c94 <cmp_lfn+0x88>
 8018c6e:	89bb      	ldrh	r3, [r7, #12]
 8018c70:	4618      	mov	r0, r3
 8018c72:	f001 fe11 	bl	801a898 <ff_wtoupper>
 8018c76:	4603      	mov	r3, r0
 8018c78:	461c      	mov	r4, r3
 8018c7a:	697b      	ldr	r3, [r7, #20]
 8018c7c:	1c5a      	adds	r2, r3, #1
 8018c7e:	617a      	str	r2, [r7, #20]
 8018c80:	005b      	lsls	r3, r3, #1
 8018c82:	687a      	ldr	r2, [r7, #4]
 8018c84:	4413      	add	r3, r2
 8018c86:	881b      	ldrh	r3, [r3, #0]
 8018c88:	4618      	mov	r0, r3
 8018c8a:	f001 fe05 	bl	801a898 <ff_wtoupper>
 8018c8e:	4603      	mov	r3, r0
 8018c90:	429c      	cmp	r4, r3
 8018c92:	d001      	beq.n	8018c98 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8018c94:	2300      	movs	r3, #0
 8018c96:	e022      	b.n	8018cde <cmp_lfn+0xd2>
			}
			wc = uc;
 8018c98:	89bb      	ldrh	r3, [r7, #12]
 8018c9a:	81fb      	strh	r3, [r7, #14]
 8018c9c:	e006      	b.n	8018cac <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8018c9e:	89bb      	ldrh	r3, [r7, #12]
 8018ca0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018ca4:	4293      	cmp	r3, r2
 8018ca6:	d001      	beq.n	8018cac <cmp_lfn+0xa0>
 8018ca8:	2300      	movs	r3, #0
 8018caa:	e018      	b.n	8018cde <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8018cac:	693b      	ldr	r3, [r7, #16]
 8018cae:	3301      	adds	r3, #1
 8018cb0:	613b      	str	r3, [r7, #16]
 8018cb2:	693b      	ldr	r3, [r7, #16]
 8018cb4:	2b0c      	cmp	r3, #12
 8018cb6:	d9c8      	bls.n	8018c4a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8018cb8:	683b      	ldr	r3, [r7, #0]
 8018cba:	781b      	ldrb	r3, [r3, #0]
 8018cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018cc0:	2b00      	cmp	r3, #0
 8018cc2:	d00b      	beq.n	8018cdc <cmp_lfn+0xd0>
 8018cc4:	89fb      	ldrh	r3, [r7, #14]
 8018cc6:	2b00      	cmp	r3, #0
 8018cc8:	d008      	beq.n	8018cdc <cmp_lfn+0xd0>
 8018cca:	697b      	ldr	r3, [r7, #20]
 8018ccc:	005b      	lsls	r3, r3, #1
 8018cce:	687a      	ldr	r2, [r7, #4]
 8018cd0:	4413      	add	r3, r2
 8018cd2:	881b      	ldrh	r3, [r3, #0]
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	d001      	beq.n	8018cdc <cmp_lfn+0xd0>
 8018cd8:	2300      	movs	r3, #0
 8018cda:	e000      	b.n	8018cde <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8018cdc:	2301      	movs	r3, #1
}
 8018cde:	4618      	mov	r0, r3
 8018ce0:	371c      	adds	r7, #28
 8018ce2:	46bd      	mov	sp, r7
 8018ce4:	bd90      	pop	{r4, r7, pc}
 8018ce6:	bf00      	nop
 8018ce8:	080205c8 	.word	0x080205c8

08018cec <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8018cec:	b580      	push	{r7, lr}
 8018cee:	b088      	sub	sp, #32
 8018cf0:	af00      	add	r7, sp, #0
 8018cf2:	60f8      	str	r0, [r7, #12]
 8018cf4:	60b9      	str	r1, [r7, #8]
 8018cf6:	4611      	mov	r1, r2
 8018cf8:	461a      	mov	r2, r3
 8018cfa:	460b      	mov	r3, r1
 8018cfc:	71fb      	strb	r3, [r7, #7]
 8018cfe:	4613      	mov	r3, r2
 8018d00:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8018d02:	68bb      	ldr	r3, [r7, #8]
 8018d04:	330d      	adds	r3, #13
 8018d06:	79ba      	ldrb	r2, [r7, #6]
 8018d08:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8018d0a:	68bb      	ldr	r3, [r7, #8]
 8018d0c:	330b      	adds	r3, #11
 8018d0e:	220f      	movs	r2, #15
 8018d10:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8018d12:	68bb      	ldr	r3, [r7, #8]
 8018d14:	330c      	adds	r3, #12
 8018d16:	2200      	movs	r2, #0
 8018d18:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8018d1a:	68bb      	ldr	r3, [r7, #8]
 8018d1c:	331a      	adds	r3, #26
 8018d1e:	2100      	movs	r1, #0
 8018d20:	4618      	mov	r0, r3
 8018d22:	f7fe ff38 	bl	8017b96 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8018d26:	79fb      	ldrb	r3, [r7, #7]
 8018d28:	1e5a      	subs	r2, r3, #1
 8018d2a:	4613      	mov	r3, r2
 8018d2c:	005b      	lsls	r3, r3, #1
 8018d2e:	4413      	add	r3, r2
 8018d30:	009b      	lsls	r3, r3, #2
 8018d32:	4413      	add	r3, r2
 8018d34:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8018d36:	2300      	movs	r3, #0
 8018d38:	82fb      	strh	r3, [r7, #22]
 8018d3a:	2300      	movs	r3, #0
 8018d3c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8018d3e:	8afb      	ldrh	r3, [r7, #22]
 8018d40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018d44:	4293      	cmp	r3, r2
 8018d46:	d007      	beq.n	8018d58 <put_lfn+0x6c>
 8018d48:	69fb      	ldr	r3, [r7, #28]
 8018d4a:	1c5a      	adds	r2, r3, #1
 8018d4c:	61fa      	str	r2, [r7, #28]
 8018d4e:	005b      	lsls	r3, r3, #1
 8018d50:	68fa      	ldr	r2, [r7, #12]
 8018d52:	4413      	add	r3, r2
 8018d54:	881b      	ldrh	r3, [r3, #0]
 8018d56:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8018d58:	4a17      	ldr	r2, [pc, #92]	; (8018db8 <put_lfn+0xcc>)
 8018d5a:	69bb      	ldr	r3, [r7, #24]
 8018d5c:	4413      	add	r3, r2
 8018d5e:	781b      	ldrb	r3, [r3, #0]
 8018d60:	461a      	mov	r2, r3
 8018d62:	68bb      	ldr	r3, [r7, #8]
 8018d64:	4413      	add	r3, r2
 8018d66:	8afa      	ldrh	r2, [r7, #22]
 8018d68:	4611      	mov	r1, r2
 8018d6a:	4618      	mov	r0, r3
 8018d6c:	f7fe ff13 	bl	8017b96 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8018d70:	8afb      	ldrh	r3, [r7, #22]
 8018d72:	2b00      	cmp	r3, #0
 8018d74:	d102      	bne.n	8018d7c <put_lfn+0x90>
 8018d76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018d7a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8018d7c:	69bb      	ldr	r3, [r7, #24]
 8018d7e:	3301      	adds	r3, #1
 8018d80:	61bb      	str	r3, [r7, #24]
 8018d82:	69bb      	ldr	r3, [r7, #24]
 8018d84:	2b0c      	cmp	r3, #12
 8018d86:	d9da      	bls.n	8018d3e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8018d88:	8afb      	ldrh	r3, [r7, #22]
 8018d8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018d8e:	4293      	cmp	r3, r2
 8018d90:	d006      	beq.n	8018da0 <put_lfn+0xb4>
 8018d92:	69fb      	ldr	r3, [r7, #28]
 8018d94:	005b      	lsls	r3, r3, #1
 8018d96:	68fa      	ldr	r2, [r7, #12]
 8018d98:	4413      	add	r3, r2
 8018d9a:	881b      	ldrh	r3, [r3, #0]
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	d103      	bne.n	8018da8 <put_lfn+0xbc>
 8018da0:	79fb      	ldrb	r3, [r7, #7]
 8018da2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018da6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8018da8:	68bb      	ldr	r3, [r7, #8]
 8018daa:	79fa      	ldrb	r2, [r7, #7]
 8018dac:	701a      	strb	r2, [r3, #0]
}
 8018dae:	bf00      	nop
 8018db0:	3720      	adds	r7, #32
 8018db2:	46bd      	mov	sp, r7
 8018db4:	bd80      	pop	{r7, pc}
 8018db6:	bf00      	nop
 8018db8:	080205c8 	.word	0x080205c8

08018dbc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8018dbc:	b580      	push	{r7, lr}
 8018dbe:	b08c      	sub	sp, #48	; 0x30
 8018dc0:	af00      	add	r7, sp, #0
 8018dc2:	60f8      	str	r0, [r7, #12]
 8018dc4:	60b9      	str	r1, [r7, #8]
 8018dc6:	607a      	str	r2, [r7, #4]
 8018dc8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8018dca:	220b      	movs	r2, #11
 8018dcc:	68b9      	ldr	r1, [r7, #8]
 8018dce:	68f8      	ldr	r0, [r7, #12]
 8018dd0:	f7fe ff28 	bl	8017c24 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8018dd4:	683b      	ldr	r3, [r7, #0]
 8018dd6:	2b05      	cmp	r3, #5
 8018dd8:	d929      	bls.n	8018e2e <gen_numname+0x72>
		sr = seq;
 8018dda:	683b      	ldr	r3, [r7, #0]
 8018ddc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8018dde:	e020      	b.n	8018e22 <gen_numname+0x66>
			wc = *lfn++;
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	1c9a      	adds	r2, r3, #2
 8018de4:	607a      	str	r2, [r7, #4]
 8018de6:	881b      	ldrh	r3, [r3, #0]
 8018de8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8018dea:	2300      	movs	r3, #0
 8018dec:	62bb      	str	r3, [r7, #40]	; 0x28
 8018dee:	e015      	b.n	8018e1c <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8018df0:	69fb      	ldr	r3, [r7, #28]
 8018df2:	005a      	lsls	r2, r3, #1
 8018df4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018df6:	f003 0301 	and.w	r3, r3, #1
 8018dfa:	4413      	add	r3, r2
 8018dfc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8018dfe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018e00:	085b      	lsrs	r3, r3, #1
 8018e02:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8018e04:	69fb      	ldr	r3, [r7, #28]
 8018e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018e0a:	2b00      	cmp	r3, #0
 8018e0c:	d003      	beq.n	8018e16 <gen_numname+0x5a>
 8018e0e:	69fa      	ldr	r2, [r7, #28]
 8018e10:	4b30      	ldr	r3, [pc, #192]	; (8018ed4 <gen_numname+0x118>)
 8018e12:	4053      	eors	r3, r2
 8018e14:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8018e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e18:	3301      	adds	r3, #1
 8018e1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8018e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e1e:	2b0f      	cmp	r3, #15
 8018e20:	d9e6      	bls.n	8018df0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	881b      	ldrh	r3, [r3, #0]
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	d1da      	bne.n	8018de0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8018e2a:	69fb      	ldr	r3, [r7, #28]
 8018e2c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8018e2e:	2307      	movs	r3, #7
 8018e30:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8018e32:	683b      	ldr	r3, [r7, #0]
 8018e34:	b2db      	uxtb	r3, r3
 8018e36:	f003 030f 	and.w	r3, r3, #15
 8018e3a:	b2db      	uxtb	r3, r3
 8018e3c:	3330      	adds	r3, #48	; 0x30
 8018e3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8018e42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018e46:	2b39      	cmp	r3, #57	; 0x39
 8018e48:	d904      	bls.n	8018e54 <gen_numname+0x98>
 8018e4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018e4e:	3307      	adds	r3, #7
 8018e50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8018e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e56:	1e5a      	subs	r2, r3, #1
 8018e58:	62ba      	str	r2, [r7, #40]	; 0x28
 8018e5a:	3330      	adds	r3, #48	; 0x30
 8018e5c:	443b      	add	r3, r7
 8018e5e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8018e62:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8018e66:	683b      	ldr	r3, [r7, #0]
 8018e68:	091b      	lsrs	r3, r3, #4
 8018e6a:	603b      	str	r3, [r7, #0]
	} while (seq);
 8018e6c:	683b      	ldr	r3, [r7, #0]
 8018e6e:	2b00      	cmp	r3, #0
 8018e70:	d1df      	bne.n	8018e32 <gen_numname+0x76>
	ns[i] = '~';
 8018e72:	f107 0214 	add.w	r2, r7, #20
 8018e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e78:	4413      	add	r3, r2
 8018e7a:	227e      	movs	r2, #126	; 0x7e
 8018e7c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8018e7e:	2300      	movs	r3, #0
 8018e80:	627b      	str	r3, [r7, #36]	; 0x24
 8018e82:	e002      	b.n	8018e8a <gen_numname+0xce>
 8018e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e86:	3301      	adds	r3, #1
 8018e88:	627b      	str	r3, [r7, #36]	; 0x24
 8018e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e8e:	429a      	cmp	r2, r3
 8018e90:	d205      	bcs.n	8018e9e <gen_numname+0xe2>
 8018e92:	68fa      	ldr	r2, [r7, #12]
 8018e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e96:	4413      	add	r3, r2
 8018e98:	781b      	ldrb	r3, [r3, #0]
 8018e9a:	2b20      	cmp	r3, #32
 8018e9c:	d1f2      	bne.n	8018e84 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8018e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ea0:	2b07      	cmp	r3, #7
 8018ea2:	d807      	bhi.n	8018eb4 <gen_numname+0xf8>
 8018ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ea6:	1c5a      	adds	r2, r3, #1
 8018ea8:	62ba      	str	r2, [r7, #40]	; 0x28
 8018eaa:	3330      	adds	r3, #48	; 0x30
 8018eac:	443b      	add	r3, r7
 8018eae:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8018eb2:	e000      	b.n	8018eb6 <gen_numname+0xfa>
 8018eb4:	2120      	movs	r1, #32
 8018eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018eb8:	1c5a      	adds	r2, r3, #1
 8018eba:	627a      	str	r2, [r7, #36]	; 0x24
 8018ebc:	68fa      	ldr	r2, [r7, #12]
 8018ebe:	4413      	add	r3, r2
 8018ec0:	460a      	mov	r2, r1
 8018ec2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8018ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ec6:	2b07      	cmp	r3, #7
 8018ec8:	d9e9      	bls.n	8018e9e <gen_numname+0xe2>
}
 8018eca:	bf00      	nop
 8018ecc:	bf00      	nop
 8018ece:	3730      	adds	r7, #48	; 0x30
 8018ed0:	46bd      	mov	sp, r7
 8018ed2:	bd80      	pop	{r7, pc}
 8018ed4:	00011021 	.word	0x00011021

08018ed8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8018ed8:	b480      	push	{r7}
 8018eda:	b085      	sub	sp, #20
 8018edc:	af00      	add	r7, sp, #0
 8018ede:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8018ee0:	2300      	movs	r3, #0
 8018ee2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8018ee4:	230b      	movs	r3, #11
 8018ee6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8018ee8:	7bfb      	ldrb	r3, [r7, #15]
 8018eea:	b2da      	uxtb	r2, r3
 8018eec:	0852      	lsrs	r2, r2, #1
 8018eee:	01db      	lsls	r3, r3, #7
 8018ef0:	4313      	orrs	r3, r2
 8018ef2:	b2da      	uxtb	r2, r3
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	1c59      	adds	r1, r3, #1
 8018ef8:	6079      	str	r1, [r7, #4]
 8018efa:	781b      	ldrb	r3, [r3, #0]
 8018efc:	4413      	add	r3, r2
 8018efe:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8018f00:	68bb      	ldr	r3, [r7, #8]
 8018f02:	3b01      	subs	r3, #1
 8018f04:	60bb      	str	r3, [r7, #8]
 8018f06:	68bb      	ldr	r3, [r7, #8]
 8018f08:	2b00      	cmp	r3, #0
 8018f0a:	d1ed      	bne.n	8018ee8 <sum_sfn+0x10>
	return sum;
 8018f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8018f0e:	4618      	mov	r0, r3
 8018f10:	3714      	adds	r7, #20
 8018f12:	46bd      	mov	sp, r7
 8018f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f18:	4770      	bx	lr

08018f1a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8018f1a:	b580      	push	{r7, lr}
 8018f1c:	b086      	sub	sp, #24
 8018f1e:	af00      	add	r7, sp, #0
 8018f20:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	681b      	ldr	r3, [r3, #0]
 8018f26:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8018f28:	2100      	movs	r1, #0
 8018f2a:	6878      	ldr	r0, [r7, #4]
 8018f2c:	f7ff fc88 	bl	8018840 <dir_sdi>
 8018f30:	4603      	mov	r3, r0
 8018f32:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8018f34:	7dfb      	ldrb	r3, [r7, #23]
 8018f36:	2b00      	cmp	r3, #0
 8018f38:	d001      	beq.n	8018f3e <dir_find+0x24>
 8018f3a:	7dfb      	ldrb	r3, [r7, #23]
 8018f3c:	e0a9      	b.n	8019092 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8018f3e:	23ff      	movs	r3, #255	; 0xff
 8018f40:	753b      	strb	r3, [r7, #20]
 8018f42:	7d3b      	ldrb	r3, [r7, #20]
 8018f44:	757b      	strb	r3, [r7, #21]
 8018f46:	687b      	ldr	r3, [r7, #4]
 8018f48:	f04f 32ff 	mov.w	r2, #4294967295
 8018f4c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8018f4e:	687b      	ldr	r3, [r7, #4]
 8018f50:	69db      	ldr	r3, [r3, #28]
 8018f52:	4619      	mov	r1, r3
 8018f54:	6938      	ldr	r0, [r7, #16]
 8018f56:	f7ff f893 	bl	8018080 <move_window>
 8018f5a:	4603      	mov	r3, r0
 8018f5c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8018f5e:	7dfb      	ldrb	r3, [r7, #23]
 8018f60:	2b00      	cmp	r3, #0
 8018f62:	f040 8090 	bne.w	8019086 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	6a1b      	ldr	r3, [r3, #32]
 8018f6a:	781b      	ldrb	r3, [r3, #0]
 8018f6c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8018f6e:	7dbb      	ldrb	r3, [r7, #22]
 8018f70:	2b00      	cmp	r3, #0
 8018f72:	d102      	bne.n	8018f7a <dir_find+0x60>
 8018f74:	2304      	movs	r3, #4
 8018f76:	75fb      	strb	r3, [r7, #23]
 8018f78:	e08a      	b.n	8019090 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	6a1b      	ldr	r3, [r3, #32]
 8018f7e:	330b      	adds	r3, #11
 8018f80:	781b      	ldrb	r3, [r3, #0]
 8018f82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018f86:	73fb      	strb	r3, [r7, #15]
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	7bfa      	ldrb	r2, [r7, #15]
 8018f8c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8018f8e:	7dbb      	ldrb	r3, [r7, #22]
 8018f90:	2be5      	cmp	r3, #229	; 0xe5
 8018f92:	d007      	beq.n	8018fa4 <dir_find+0x8a>
 8018f94:	7bfb      	ldrb	r3, [r7, #15]
 8018f96:	f003 0308 	and.w	r3, r3, #8
 8018f9a:	2b00      	cmp	r3, #0
 8018f9c:	d009      	beq.n	8018fb2 <dir_find+0x98>
 8018f9e:	7bfb      	ldrb	r3, [r7, #15]
 8018fa0:	2b0f      	cmp	r3, #15
 8018fa2:	d006      	beq.n	8018fb2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8018fa4:	23ff      	movs	r3, #255	; 0xff
 8018fa6:	757b      	strb	r3, [r7, #21]
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	f04f 32ff 	mov.w	r2, #4294967295
 8018fae:	631a      	str	r2, [r3, #48]	; 0x30
 8018fb0:	e05e      	b.n	8019070 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8018fb2:	7bfb      	ldrb	r3, [r7, #15]
 8018fb4:	2b0f      	cmp	r3, #15
 8018fb6:	d136      	bne.n	8019026 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018fc2:	2b00      	cmp	r3, #0
 8018fc4:	d154      	bne.n	8019070 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8018fc6:	7dbb      	ldrb	r3, [r7, #22]
 8018fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	d00d      	beq.n	8018fec <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	6a1b      	ldr	r3, [r3, #32]
 8018fd4:	7b5b      	ldrb	r3, [r3, #13]
 8018fd6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8018fd8:	7dbb      	ldrb	r3, [r7, #22]
 8018fda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8018fde:	75bb      	strb	r3, [r7, #22]
 8018fe0:	7dbb      	ldrb	r3, [r7, #22]
 8018fe2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8018fe4:	687b      	ldr	r3, [r7, #4]
 8018fe6:	695a      	ldr	r2, [r3, #20]
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8018fec:	7dba      	ldrb	r2, [r7, #22]
 8018fee:	7d7b      	ldrb	r3, [r7, #21]
 8018ff0:	429a      	cmp	r2, r3
 8018ff2:	d115      	bne.n	8019020 <dir_find+0x106>
 8018ff4:	687b      	ldr	r3, [r7, #4]
 8018ff6:	6a1b      	ldr	r3, [r3, #32]
 8018ff8:	330d      	adds	r3, #13
 8018ffa:	781b      	ldrb	r3, [r3, #0]
 8018ffc:	7d3a      	ldrb	r2, [r7, #20]
 8018ffe:	429a      	cmp	r2, r3
 8019000:	d10e      	bne.n	8019020 <dir_find+0x106>
 8019002:	693b      	ldr	r3, [r7, #16]
 8019004:	691a      	ldr	r2, [r3, #16]
 8019006:	687b      	ldr	r3, [r7, #4]
 8019008:	6a1b      	ldr	r3, [r3, #32]
 801900a:	4619      	mov	r1, r3
 801900c:	4610      	mov	r0, r2
 801900e:	f7ff fdfd 	bl	8018c0c <cmp_lfn>
 8019012:	4603      	mov	r3, r0
 8019014:	2b00      	cmp	r3, #0
 8019016:	d003      	beq.n	8019020 <dir_find+0x106>
 8019018:	7d7b      	ldrb	r3, [r7, #21]
 801901a:	3b01      	subs	r3, #1
 801901c:	b2db      	uxtb	r3, r3
 801901e:	e000      	b.n	8019022 <dir_find+0x108>
 8019020:	23ff      	movs	r3, #255	; 0xff
 8019022:	757b      	strb	r3, [r7, #21]
 8019024:	e024      	b.n	8019070 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8019026:	7d7b      	ldrb	r3, [r7, #21]
 8019028:	2b00      	cmp	r3, #0
 801902a:	d109      	bne.n	8019040 <dir_find+0x126>
 801902c:	687b      	ldr	r3, [r7, #4]
 801902e:	6a1b      	ldr	r3, [r3, #32]
 8019030:	4618      	mov	r0, r3
 8019032:	f7ff ff51 	bl	8018ed8 <sum_sfn>
 8019036:	4603      	mov	r3, r0
 8019038:	461a      	mov	r2, r3
 801903a:	7d3b      	ldrb	r3, [r7, #20]
 801903c:	4293      	cmp	r3, r2
 801903e:	d024      	beq.n	801908a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8019046:	f003 0301 	and.w	r3, r3, #1
 801904a:	2b00      	cmp	r3, #0
 801904c:	d10a      	bne.n	8019064 <dir_find+0x14a>
 801904e:	687b      	ldr	r3, [r7, #4]
 8019050:	6a18      	ldr	r0, [r3, #32]
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	3324      	adds	r3, #36	; 0x24
 8019056:	220b      	movs	r2, #11
 8019058:	4619      	mov	r1, r3
 801905a:	f7fe fe1f 	bl	8017c9c <mem_cmp>
 801905e:	4603      	mov	r3, r0
 8019060:	2b00      	cmp	r3, #0
 8019062:	d014      	beq.n	801908e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8019064:	23ff      	movs	r3, #255	; 0xff
 8019066:	757b      	strb	r3, [r7, #21]
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	f04f 32ff 	mov.w	r2, #4294967295
 801906e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8019070:	2100      	movs	r1, #0
 8019072:	6878      	ldr	r0, [r7, #4]
 8019074:	f7ff fc6d 	bl	8018952 <dir_next>
 8019078:	4603      	mov	r3, r0
 801907a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801907c:	7dfb      	ldrb	r3, [r7, #23]
 801907e:	2b00      	cmp	r3, #0
 8019080:	f43f af65 	beq.w	8018f4e <dir_find+0x34>
 8019084:	e004      	b.n	8019090 <dir_find+0x176>
		if (res != FR_OK) break;
 8019086:	bf00      	nop
 8019088:	e002      	b.n	8019090 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801908a:	bf00      	nop
 801908c:	e000      	b.n	8019090 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801908e:	bf00      	nop

	return res;
 8019090:	7dfb      	ldrb	r3, [r7, #23]
}
 8019092:	4618      	mov	r0, r3
 8019094:	3718      	adds	r7, #24
 8019096:	46bd      	mov	sp, r7
 8019098:	bd80      	pop	{r7, pc}
	...

0801909c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801909c:	b580      	push	{r7, lr}
 801909e:	b08c      	sub	sp, #48	; 0x30
 80190a0:	af00      	add	r7, sp, #0
 80190a2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	681b      	ldr	r3, [r3, #0]
 80190a8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80190b0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80190b4:	2b00      	cmp	r3, #0
 80190b6:	d001      	beq.n	80190bc <dir_register+0x20>
 80190b8:	2306      	movs	r3, #6
 80190ba:	e0e0      	b.n	801927e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80190bc:	2300      	movs	r3, #0
 80190be:	627b      	str	r3, [r7, #36]	; 0x24
 80190c0:	e002      	b.n	80190c8 <dir_register+0x2c>
 80190c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190c4:	3301      	adds	r3, #1
 80190c6:	627b      	str	r3, [r7, #36]	; 0x24
 80190c8:	69fb      	ldr	r3, [r7, #28]
 80190ca:	691a      	ldr	r2, [r3, #16]
 80190cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190ce:	005b      	lsls	r3, r3, #1
 80190d0:	4413      	add	r3, r2
 80190d2:	881b      	ldrh	r3, [r3, #0]
 80190d4:	2b00      	cmp	r3, #0
 80190d6:	d1f4      	bne.n	80190c2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80190d8:	687b      	ldr	r3, [r7, #4]
 80190da:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80190de:	f107 030c 	add.w	r3, r7, #12
 80190e2:	220c      	movs	r2, #12
 80190e4:	4618      	mov	r0, r3
 80190e6:	f7fe fd9d 	bl	8017c24 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80190ea:	7dfb      	ldrb	r3, [r7, #23]
 80190ec:	f003 0301 	and.w	r3, r3, #1
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	d032      	beq.n	801915a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	2240      	movs	r2, #64	; 0x40
 80190f8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80190fc:	2301      	movs	r3, #1
 80190fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8019100:	e016      	b.n	8019130 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8019102:	687b      	ldr	r3, [r7, #4]
 8019104:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8019108:	69fb      	ldr	r3, [r7, #28]
 801910a:	691a      	ldr	r2, [r3, #16]
 801910c:	f107 010c 	add.w	r1, r7, #12
 8019110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019112:	f7ff fe53 	bl	8018dbc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8019116:	6878      	ldr	r0, [r7, #4]
 8019118:	f7ff feff 	bl	8018f1a <dir_find>
 801911c:	4603      	mov	r3, r0
 801911e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8019122:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019126:	2b00      	cmp	r3, #0
 8019128:	d106      	bne.n	8019138 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801912a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801912c:	3301      	adds	r3, #1
 801912e:	62bb      	str	r3, [r7, #40]	; 0x28
 8019130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019132:	2b63      	cmp	r3, #99	; 0x63
 8019134:	d9e5      	bls.n	8019102 <dir_register+0x66>
 8019136:	e000      	b.n	801913a <dir_register+0x9e>
			if (res != FR_OK) break;
 8019138:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801913a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801913c:	2b64      	cmp	r3, #100	; 0x64
 801913e:	d101      	bne.n	8019144 <dir_register+0xa8>
 8019140:	2307      	movs	r3, #7
 8019142:	e09c      	b.n	801927e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8019144:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019148:	2b04      	cmp	r3, #4
 801914a:	d002      	beq.n	8019152 <dir_register+0xb6>
 801914c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019150:	e095      	b.n	801927e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8019152:	7dfa      	ldrb	r2, [r7, #23]
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801915a:	7dfb      	ldrb	r3, [r7, #23]
 801915c:	f003 0302 	and.w	r3, r3, #2
 8019160:	2b00      	cmp	r3, #0
 8019162:	d007      	beq.n	8019174 <dir_register+0xd8>
 8019164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019166:	330c      	adds	r3, #12
 8019168:	4a47      	ldr	r2, [pc, #284]	; (8019288 <dir_register+0x1ec>)
 801916a:	fba2 2303 	umull	r2, r3, r2, r3
 801916e:	089b      	lsrs	r3, r3, #2
 8019170:	3301      	adds	r3, #1
 8019172:	e000      	b.n	8019176 <dir_register+0xda>
 8019174:	2301      	movs	r3, #1
 8019176:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8019178:	6a39      	ldr	r1, [r7, #32]
 801917a:	6878      	ldr	r0, [r7, #4]
 801917c:	f7ff fcbf 	bl	8018afe <dir_alloc>
 8019180:	4603      	mov	r3, r0
 8019182:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8019186:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801918a:	2b00      	cmp	r3, #0
 801918c:	d148      	bne.n	8019220 <dir_register+0x184>
 801918e:	6a3b      	ldr	r3, [r7, #32]
 8019190:	3b01      	subs	r3, #1
 8019192:	623b      	str	r3, [r7, #32]
 8019194:	6a3b      	ldr	r3, [r7, #32]
 8019196:	2b00      	cmp	r3, #0
 8019198:	d042      	beq.n	8019220 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801919a:	687b      	ldr	r3, [r7, #4]
 801919c:	695a      	ldr	r2, [r3, #20]
 801919e:	6a3b      	ldr	r3, [r7, #32]
 80191a0:	015b      	lsls	r3, r3, #5
 80191a2:	1ad3      	subs	r3, r2, r3
 80191a4:	4619      	mov	r1, r3
 80191a6:	6878      	ldr	r0, [r7, #4]
 80191a8:	f7ff fb4a 	bl	8018840 <dir_sdi>
 80191ac:	4603      	mov	r3, r0
 80191ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80191b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80191b6:	2b00      	cmp	r3, #0
 80191b8:	d132      	bne.n	8019220 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80191ba:	687b      	ldr	r3, [r7, #4]
 80191bc:	3324      	adds	r3, #36	; 0x24
 80191be:	4618      	mov	r0, r3
 80191c0:	f7ff fe8a 	bl	8018ed8 <sum_sfn>
 80191c4:	4603      	mov	r3, r0
 80191c6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	69db      	ldr	r3, [r3, #28]
 80191cc:	4619      	mov	r1, r3
 80191ce:	69f8      	ldr	r0, [r7, #28]
 80191d0:	f7fe ff56 	bl	8018080 <move_window>
 80191d4:	4603      	mov	r3, r0
 80191d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80191da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80191de:	2b00      	cmp	r3, #0
 80191e0:	d11d      	bne.n	801921e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80191e2:	69fb      	ldr	r3, [r7, #28]
 80191e4:	6918      	ldr	r0, [r3, #16]
 80191e6:	687b      	ldr	r3, [r7, #4]
 80191e8:	6a19      	ldr	r1, [r3, #32]
 80191ea:	6a3b      	ldr	r3, [r7, #32]
 80191ec:	b2da      	uxtb	r2, r3
 80191ee:	7efb      	ldrb	r3, [r7, #27]
 80191f0:	f7ff fd7c 	bl	8018cec <put_lfn>
				fs->wflag = 1;
 80191f4:	69fb      	ldr	r3, [r7, #28]
 80191f6:	2201      	movs	r2, #1
 80191f8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80191fa:	2100      	movs	r1, #0
 80191fc:	6878      	ldr	r0, [r7, #4]
 80191fe:	f7ff fba8 	bl	8018952 <dir_next>
 8019202:	4603      	mov	r3, r0
 8019204:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8019208:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801920c:	2b00      	cmp	r3, #0
 801920e:	d107      	bne.n	8019220 <dir_register+0x184>
 8019210:	6a3b      	ldr	r3, [r7, #32]
 8019212:	3b01      	subs	r3, #1
 8019214:	623b      	str	r3, [r7, #32]
 8019216:	6a3b      	ldr	r3, [r7, #32]
 8019218:	2b00      	cmp	r3, #0
 801921a:	d1d5      	bne.n	80191c8 <dir_register+0x12c>
 801921c:	e000      	b.n	8019220 <dir_register+0x184>
				if (res != FR_OK) break;
 801921e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8019220:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019224:	2b00      	cmp	r3, #0
 8019226:	d128      	bne.n	801927a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8019228:	687b      	ldr	r3, [r7, #4]
 801922a:	69db      	ldr	r3, [r3, #28]
 801922c:	4619      	mov	r1, r3
 801922e:	69f8      	ldr	r0, [r7, #28]
 8019230:	f7fe ff26 	bl	8018080 <move_window>
 8019234:	4603      	mov	r3, r0
 8019236:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801923a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801923e:	2b00      	cmp	r3, #0
 8019240:	d11b      	bne.n	801927a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	6a1b      	ldr	r3, [r3, #32]
 8019246:	2220      	movs	r2, #32
 8019248:	2100      	movs	r1, #0
 801924a:	4618      	mov	r0, r3
 801924c:	f7fe fd0b 	bl	8017c66 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	6a18      	ldr	r0, [r3, #32]
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	3324      	adds	r3, #36	; 0x24
 8019258:	220b      	movs	r2, #11
 801925a:	4619      	mov	r1, r3
 801925c:	f7fe fce2 	bl	8017c24 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8019266:	687b      	ldr	r3, [r7, #4]
 8019268:	6a1b      	ldr	r3, [r3, #32]
 801926a:	330c      	adds	r3, #12
 801926c:	f002 0218 	and.w	r2, r2, #24
 8019270:	b2d2      	uxtb	r2, r2
 8019272:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8019274:	69fb      	ldr	r3, [r7, #28]
 8019276:	2201      	movs	r2, #1
 8019278:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801927a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801927e:	4618      	mov	r0, r3
 8019280:	3730      	adds	r7, #48	; 0x30
 8019282:	46bd      	mov	sp, r7
 8019284:	bd80      	pop	{r7, pc}
 8019286:	bf00      	nop
 8019288:	4ec4ec4f 	.word	0x4ec4ec4f

0801928c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801928c:	b580      	push	{r7, lr}
 801928e:	b08a      	sub	sp, #40	; 0x28
 8019290:	af00      	add	r7, sp, #0
 8019292:	6078      	str	r0, [r7, #4]
 8019294:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8019296:	683b      	ldr	r3, [r7, #0]
 8019298:	681b      	ldr	r3, [r3, #0]
 801929a:	613b      	str	r3, [r7, #16]
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	681b      	ldr	r3, [r3, #0]
 80192a0:	691b      	ldr	r3, [r3, #16]
 80192a2:	60fb      	str	r3, [r7, #12]
 80192a4:	2300      	movs	r3, #0
 80192a6:	617b      	str	r3, [r7, #20]
 80192a8:	697b      	ldr	r3, [r7, #20]
 80192aa:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80192ac:	69bb      	ldr	r3, [r7, #24]
 80192ae:	1c5a      	adds	r2, r3, #1
 80192b0:	61ba      	str	r2, [r7, #24]
 80192b2:	693a      	ldr	r2, [r7, #16]
 80192b4:	4413      	add	r3, r2
 80192b6:	781b      	ldrb	r3, [r3, #0]
 80192b8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80192ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80192bc:	2b1f      	cmp	r3, #31
 80192be:	d940      	bls.n	8019342 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80192c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80192c2:	2b2f      	cmp	r3, #47	; 0x2f
 80192c4:	d006      	beq.n	80192d4 <create_name+0x48>
 80192c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80192c8:	2b5c      	cmp	r3, #92	; 0x5c
 80192ca:	d110      	bne.n	80192ee <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80192cc:	e002      	b.n	80192d4 <create_name+0x48>
 80192ce:	69bb      	ldr	r3, [r7, #24]
 80192d0:	3301      	adds	r3, #1
 80192d2:	61bb      	str	r3, [r7, #24]
 80192d4:	693a      	ldr	r2, [r7, #16]
 80192d6:	69bb      	ldr	r3, [r7, #24]
 80192d8:	4413      	add	r3, r2
 80192da:	781b      	ldrb	r3, [r3, #0]
 80192dc:	2b2f      	cmp	r3, #47	; 0x2f
 80192de:	d0f6      	beq.n	80192ce <create_name+0x42>
 80192e0:	693a      	ldr	r2, [r7, #16]
 80192e2:	69bb      	ldr	r3, [r7, #24]
 80192e4:	4413      	add	r3, r2
 80192e6:	781b      	ldrb	r3, [r3, #0]
 80192e8:	2b5c      	cmp	r3, #92	; 0x5c
 80192ea:	d0f0      	beq.n	80192ce <create_name+0x42>
			break;
 80192ec:	e02a      	b.n	8019344 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80192ee:	697b      	ldr	r3, [r7, #20]
 80192f0:	2bfe      	cmp	r3, #254	; 0xfe
 80192f2:	d901      	bls.n	80192f8 <create_name+0x6c>
 80192f4:	2306      	movs	r3, #6
 80192f6:	e17d      	b.n	80195f4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80192f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80192fa:	b2db      	uxtb	r3, r3
 80192fc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80192fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019300:	2101      	movs	r1, #1
 8019302:	4618      	mov	r0, r3
 8019304:	f001 fa8c 	bl	801a820 <ff_convert>
 8019308:	4603      	mov	r3, r0
 801930a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801930c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801930e:	2b00      	cmp	r3, #0
 8019310:	d101      	bne.n	8019316 <create_name+0x8a>
 8019312:	2306      	movs	r3, #6
 8019314:	e16e      	b.n	80195f4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8019316:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019318:	2b7f      	cmp	r3, #127	; 0x7f
 801931a:	d809      	bhi.n	8019330 <create_name+0xa4>
 801931c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801931e:	4619      	mov	r1, r3
 8019320:	488d      	ldr	r0, [pc, #564]	; (8019558 <create_name+0x2cc>)
 8019322:	f7fe fce2 	bl	8017cea <chk_chr>
 8019326:	4603      	mov	r3, r0
 8019328:	2b00      	cmp	r3, #0
 801932a:	d001      	beq.n	8019330 <create_name+0xa4>
 801932c:	2306      	movs	r3, #6
 801932e:	e161      	b.n	80195f4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8019330:	697b      	ldr	r3, [r7, #20]
 8019332:	1c5a      	adds	r2, r3, #1
 8019334:	617a      	str	r2, [r7, #20]
 8019336:	005b      	lsls	r3, r3, #1
 8019338:	68fa      	ldr	r2, [r7, #12]
 801933a:	4413      	add	r3, r2
 801933c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801933e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8019340:	e7b4      	b.n	80192ac <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8019342:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8019344:	693a      	ldr	r2, [r7, #16]
 8019346:	69bb      	ldr	r3, [r7, #24]
 8019348:	441a      	add	r2, r3
 801934a:	683b      	ldr	r3, [r7, #0]
 801934c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801934e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019350:	2b1f      	cmp	r3, #31
 8019352:	d801      	bhi.n	8019358 <create_name+0xcc>
 8019354:	2304      	movs	r3, #4
 8019356:	e000      	b.n	801935a <create_name+0xce>
 8019358:	2300      	movs	r3, #0
 801935a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801935e:	e011      	b.n	8019384 <create_name+0xf8>
		w = lfn[di - 1];
 8019360:	697a      	ldr	r2, [r7, #20]
 8019362:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8019366:	4413      	add	r3, r2
 8019368:	005b      	lsls	r3, r3, #1
 801936a:	68fa      	ldr	r2, [r7, #12]
 801936c:	4413      	add	r3, r2
 801936e:	881b      	ldrh	r3, [r3, #0]
 8019370:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8019372:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019374:	2b20      	cmp	r3, #32
 8019376:	d002      	beq.n	801937e <create_name+0xf2>
 8019378:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801937a:	2b2e      	cmp	r3, #46	; 0x2e
 801937c:	d106      	bne.n	801938c <create_name+0x100>
		di--;
 801937e:	697b      	ldr	r3, [r7, #20]
 8019380:	3b01      	subs	r3, #1
 8019382:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8019384:	697b      	ldr	r3, [r7, #20]
 8019386:	2b00      	cmp	r3, #0
 8019388:	d1ea      	bne.n	8019360 <create_name+0xd4>
 801938a:	e000      	b.n	801938e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801938c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801938e:	697b      	ldr	r3, [r7, #20]
 8019390:	005b      	lsls	r3, r3, #1
 8019392:	68fa      	ldr	r2, [r7, #12]
 8019394:	4413      	add	r3, r2
 8019396:	2200      	movs	r2, #0
 8019398:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801939a:	697b      	ldr	r3, [r7, #20]
 801939c:	2b00      	cmp	r3, #0
 801939e:	d101      	bne.n	80193a4 <create_name+0x118>
 80193a0:	2306      	movs	r3, #6
 80193a2:	e127      	b.n	80195f4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	3324      	adds	r3, #36	; 0x24
 80193a8:	220b      	movs	r2, #11
 80193aa:	2120      	movs	r1, #32
 80193ac:	4618      	mov	r0, r3
 80193ae:	f7fe fc5a 	bl	8017c66 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80193b2:	2300      	movs	r3, #0
 80193b4:	61bb      	str	r3, [r7, #24]
 80193b6:	e002      	b.n	80193be <create_name+0x132>
 80193b8:	69bb      	ldr	r3, [r7, #24]
 80193ba:	3301      	adds	r3, #1
 80193bc:	61bb      	str	r3, [r7, #24]
 80193be:	69bb      	ldr	r3, [r7, #24]
 80193c0:	005b      	lsls	r3, r3, #1
 80193c2:	68fa      	ldr	r2, [r7, #12]
 80193c4:	4413      	add	r3, r2
 80193c6:	881b      	ldrh	r3, [r3, #0]
 80193c8:	2b20      	cmp	r3, #32
 80193ca:	d0f5      	beq.n	80193b8 <create_name+0x12c>
 80193cc:	69bb      	ldr	r3, [r7, #24]
 80193ce:	005b      	lsls	r3, r3, #1
 80193d0:	68fa      	ldr	r2, [r7, #12]
 80193d2:	4413      	add	r3, r2
 80193d4:	881b      	ldrh	r3, [r3, #0]
 80193d6:	2b2e      	cmp	r3, #46	; 0x2e
 80193d8:	d0ee      	beq.n	80193b8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80193da:	69bb      	ldr	r3, [r7, #24]
 80193dc:	2b00      	cmp	r3, #0
 80193de:	d009      	beq.n	80193f4 <create_name+0x168>
 80193e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80193e4:	f043 0303 	orr.w	r3, r3, #3
 80193e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80193ec:	e002      	b.n	80193f4 <create_name+0x168>
 80193ee:	697b      	ldr	r3, [r7, #20]
 80193f0:	3b01      	subs	r3, #1
 80193f2:	617b      	str	r3, [r7, #20]
 80193f4:	697b      	ldr	r3, [r7, #20]
 80193f6:	2b00      	cmp	r3, #0
 80193f8:	d009      	beq.n	801940e <create_name+0x182>
 80193fa:	697a      	ldr	r2, [r7, #20]
 80193fc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8019400:	4413      	add	r3, r2
 8019402:	005b      	lsls	r3, r3, #1
 8019404:	68fa      	ldr	r2, [r7, #12]
 8019406:	4413      	add	r3, r2
 8019408:	881b      	ldrh	r3, [r3, #0]
 801940a:	2b2e      	cmp	r3, #46	; 0x2e
 801940c:	d1ef      	bne.n	80193ee <create_name+0x162>

	i = b = 0; ni = 8;
 801940e:	2300      	movs	r3, #0
 8019410:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8019414:	2300      	movs	r3, #0
 8019416:	623b      	str	r3, [r7, #32]
 8019418:	2308      	movs	r3, #8
 801941a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801941c:	69bb      	ldr	r3, [r7, #24]
 801941e:	1c5a      	adds	r2, r3, #1
 8019420:	61ba      	str	r2, [r7, #24]
 8019422:	005b      	lsls	r3, r3, #1
 8019424:	68fa      	ldr	r2, [r7, #12]
 8019426:	4413      	add	r3, r2
 8019428:	881b      	ldrh	r3, [r3, #0]
 801942a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 801942c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801942e:	2b00      	cmp	r3, #0
 8019430:	f000 8090 	beq.w	8019554 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8019434:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019436:	2b20      	cmp	r3, #32
 8019438:	d006      	beq.n	8019448 <create_name+0x1bc>
 801943a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801943c:	2b2e      	cmp	r3, #46	; 0x2e
 801943e:	d10a      	bne.n	8019456 <create_name+0x1ca>
 8019440:	69ba      	ldr	r2, [r7, #24]
 8019442:	697b      	ldr	r3, [r7, #20]
 8019444:	429a      	cmp	r2, r3
 8019446:	d006      	beq.n	8019456 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8019448:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801944c:	f043 0303 	orr.w	r3, r3, #3
 8019450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019454:	e07d      	b.n	8019552 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8019456:	6a3a      	ldr	r2, [r7, #32]
 8019458:	69fb      	ldr	r3, [r7, #28]
 801945a:	429a      	cmp	r2, r3
 801945c:	d203      	bcs.n	8019466 <create_name+0x1da>
 801945e:	69ba      	ldr	r2, [r7, #24]
 8019460:	697b      	ldr	r3, [r7, #20]
 8019462:	429a      	cmp	r2, r3
 8019464:	d123      	bne.n	80194ae <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8019466:	69fb      	ldr	r3, [r7, #28]
 8019468:	2b0b      	cmp	r3, #11
 801946a:	d106      	bne.n	801947a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801946c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019470:	f043 0303 	orr.w	r3, r3, #3
 8019474:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019478:	e075      	b.n	8019566 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801947a:	69ba      	ldr	r2, [r7, #24]
 801947c:	697b      	ldr	r3, [r7, #20]
 801947e:	429a      	cmp	r2, r3
 8019480:	d005      	beq.n	801948e <create_name+0x202>
 8019482:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019486:	f043 0303 	orr.w	r3, r3, #3
 801948a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 801948e:	69ba      	ldr	r2, [r7, #24]
 8019490:	697b      	ldr	r3, [r7, #20]
 8019492:	429a      	cmp	r2, r3
 8019494:	d866      	bhi.n	8019564 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8019496:	697b      	ldr	r3, [r7, #20]
 8019498:	61bb      	str	r3, [r7, #24]
 801949a:	2308      	movs	r3, #8
 801949c:	623b      	str	r3, [r7, #32]
 801949e:	230b      	movs	r3, #11
 80194a0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80194a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80194a6:	009b      	lsls	r3, r3, #2
 80194a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80194ac:	e051      	b.n	8019552 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80194ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80194b0:	2b7f      	cmp	r3, #127	; 0x7f
 80194b2:	d914      	bls.n	80194de <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80194b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80194b6:	2100      	movs	r1, #0
 80194b8:	4618      	mov	r0, r3
 80194ba:	f001 f9b1 	bl	801a820 <ff_convert>
 80194be:	4603      	mov	r3, r0
 80194c0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80194c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	d004      	beq.n	80194d2 <create_name+0x246>
 80194c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80194ca:	3b80      	subs	r3, #128	; 0x80
 80194cc:	4a23      	ldr	r2, [pc, #140]	; (801955c <create_name+0x2d0>)
 80194ce:	5cd3      	ldrb	r3, [r2, r3]
 80194d0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80194d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80194d6:	f043 0302 	orr.w	r3, r3, #2
 80194da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80194de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80194e0:	2b00      	cmp	r3, #0
 80194e2:	d007      	beq.n	80194f4 <create_name+0x268>
 80194e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80194e6:	4619      	mov	r1, r3
 80194e8:	481d      	ldr	r0, [pc, #116]	; (8019560 <create_name+0x2d4>)
 80194ea:	f7fe fbfe 	bl	8017cea <chk_chr>
 80194ee:	4603      	mov	r3, r0
 80194f0:	2b00      	cmp	r3, #0
 80194f2:	d008      	beq.n	8019506 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80194f4:	235f      	movs	r3, #95	; 0x5f
 80194f6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80194f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80194fc:	f043 0303 	orr.w	r3, r3, #3
 8019500:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019504:	e01b      	b.n	801953e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8019506:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019508:	2b40      	cmp	r3, #64	; 0x40
 801950a:	d909      	bls.n	8019520 <create_name+0x294>
 801950c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801950e:	2b5a      	cmp	r3, #90	; 0x5a
 8019510:	d806      	bhi.n	8019520 <create_name+0x294>
					b |= 2;
 8019512:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019516:	f043 0302 	orr.w	r3, r3, #2
 801951a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801951e:	e00e      	b.n	801953e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8019520:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019522:	2b60      	cmp	r3, #96	; 0x60
 8019524:	d90b      	bls.n	801953e <create_name+0x2b2>
 8019526:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019528:	2b7a      	cmp	r3, #122	; 0x7a
 801952a:	d808      	bhi.n	801953e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801952c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019530:	f043 0301 	orr.w	r3, r3, #1
 8019534:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8019538:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801953a:	3b20      	subs	r3, #32
 801953c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801953e:	6a3b      	ldr	r3, [r7, #32]
 8019540:	1c5a      	adds	r2, r3, #1
 8019542:	623a      	str	r2, [r7, #32]
 8019544:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019546:	b2d1      	uxtb	r1, r2
 8019548:	687a      	ldr	r2, [r7, #4]
 801954a:	4413      	add	r3, r2
 801954c:	460a      	mov	r2, r1
 801954e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8019552:	e763      	b.n	801941c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8019554:	bf00      	nop
 8019556:	e006      	b.n	8019566 <create_name+0x2da>
 8019558:	080203f4 	.word	0x080203f4
 801955c:	08020548 	.word	0x08020548
 8019560:	08020400 	.word	0x08020400
			if (si > di) break;			/* No extension */
 8019564:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8019566:	687b      	ldr	r3, [r7, #4]
 8019568:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801956c:	2be5      	cmp	r3, #229	; 0xe5
 801956e:	d103      	bne.n	8019578 <create_name+0x2ec>
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	2205      	movs	r2, #5
 8019574:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8019578:	69fb      	ldr	r3, [r7, #28]
 801957a:	2b08      	cmp	r3, #8
 801957c:	d104      	bne.n	8019588 <create_name+0x2fc>
 801957e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019582:	009b      	lsls	r3, r3, #2
 8019584:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8019588:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801958c:	f003 030c 	and.w	r3, r3, #12
 8019590:	2b0c      	cmp	r3, #12
 8019592:	d005      	beq.n	80195a0 <create_name+0x314>
 8019594:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019598:	f003 0303 	and.w	r3, r3, #3
 801959c:	2b03      	cmp	r3, #3
 801959e:	d105      	bne.n	80195ac <create_name+0x320>
 80195a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80195a4:	f043 0302 	orr.w	r3, r3, #2
 80195a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80195ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80195b0:	f003 0302 	and.w	r3, r3, #2
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	d117      	bne.n	80195e8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80195b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80195bc:	f003 0303 	and.w	r3, r3, #3
 80195c0:	2b01      	cmp	r3, #1
 80195c2:	d105      	bne.n	80195d0 <create_name+0x344>
 80195c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80195c8:	f043 0310 	orr.w	r3, r3, #16
 80195cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80195d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80195d4:	f003 030c 	and.w	r3, r3, #12
 80195d8:	2b04      	cmp	r3, #4
 80195da:	d105      	bne.n	80195e8 <create_name+0x35c>
 80195dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80195e0:	f043 0308 	orr.w	r3, r3, #8
 80195e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80195e8:	687b      	ldr	r3, [r7, #4]
 80195ea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80195ee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80195f2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80195f4:	4618      	mov	r0, r3
 80195f6:	3728      	adds	r7, #40	; 0x28
 80195f8:	46bd      	mov	sp, r7
 80195fa:	bd80      	pop	{r7, pc}

080195fc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80195fc:	b580      	push	{r7, lr}
 80195fe:	b086      	sub	sp, #24
 8019600:	af00      	add	r7, sp, #0
 8019602:	6078      	str	r0, [r7, #4]
 8019604:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8019606:	687b      	ldr	r3, [r7, #4]
 8019608:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801960a:	693b      	ldr	r3, [r7, #16]
 801960c:	681b      	ldr	r3, [r3, #0]
 801960e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8019610:	e002      	b.n	8019618 <follow_path+0x1c>
 8019612:	683b      	ldr	r3, [r7, #0]
 8019614:	3301      	adds	r3, #1
 8019616:	603b      	str	r3, [r7, #0]
 8019618:	683b      	ldr	r3, [r7, #0]
 801961a:	781b      	ldrb	r3, [r3, #0]
 801961c:	2b2f      	cmp	r3, #47	; 0x2f
 801961e:	d0f8      	beq.n	8019612 <follow_path+0x16>
 8019620:	683b      	ldr	r3, [r7, #0]
 8019622:	781b      	ldrb	r3, [r3, #0]
 8019624:	2b5c      	cmp	r3, #92	; 0x5c
 8019626:	d0f4      	beq.n	8019612 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8019628:	693b      	ldr	r3, [r7, #16]
 801962a:	2200      	movs	r2, #0
 801962c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801962e:	683b      	ldr	r3, [r7, #0]
 8019630:	781b      	ldrb	r3, [r3, #0]
 8019632:	2b1f      	cmp	r3, #31
 8019634:	d80a      	bhi.n	801964c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8019636:	687b      	ldr	r3, [r7, #4]
 8019638:	2280      	movs	r2, #128	; 0x80
 801963a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801963e:	2100      	movs	r1, #0
 8019640:	6878      	ldr	r0, [r7, #4]
 8019642:	f7ff f8fd 	bl	8018840 <dir_sdi>
 8019646:	4603      	mov	r3, r0
 8019648:	75fb      	strb	r3, [r7, #23]
 801964a:	e048      	b.n	80196de <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801964c:	463b      	mov	r3, r7
 801964e:	4619      	mov	r1, r3
 8019650:	6878      	ldr	r0, [r7, #4]
 8019652:	f7ff fe1b 	bl	801928c <create_name>
 8019656:	4603      	mov	r3, r0
 8019658:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801965a:	7dfb      	ldrb	r3, [r7, #23]
 801965c:	2b00      	cmp	r3, #0
 801965e:	d139      	bne.n	80196d4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8019660:	6878      	ldr	r0, [r7, #4]
 8019662:	f7ff fc5a 	bl	8018f1a <dir_find>
 8019666:	4603      	mov	r3, r0
 8019668:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801966a:	687b      	ldr	r3, [r7, #4]
 801966c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8019670:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8019672:	7dfb      	ldrb	r3, [r7, #23]
 8019674:	2b00      	cmp	r3, #0
 8019676:	d00a      	beq.n	801968e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8019678:	7dfb      	ldrb	r3, [r7, #23]
 801967a:	2b04      	cmp	r3, #4
 801967c:	d12c      	bne.n	80196d8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801967e:	7afb      	ldrb	r3, [r7, #11]
 8019680:	f003 0304 	and.w	r3, r3, #4
 8019684:	2b00      	cmp	r3, #0
 8019686:	d127      	bne.n	80196d8 <follow_path+0xdc>
 8019688:	2305      	movs	r3, #5
 801968a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801968c:	e024      	b.n	80196d8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801968e:	7afb      	ldrb	r3, [r7, #11]
 8019690:	f003 0304 	and.w	r3, r3, #4
 8019694:	2b00      	cmp	r3, #0
 8019696:	d121      	bne.n	80196dc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8019698:	693b      	ldr	r3, [r7, #16]
 801969a:	799b      	ldrb	r3, [r3, #6]
 801969c:	f003 0310 	and.w	r3, r3, #16
 80196a0:	2b00      	cmp	r3, #0
 80196a2:	d102      	bne.n	80196aa <follow_path+0xae>
				res = FR_NO_PATH; break;
 80196a4:	2305      	movs	r3, #5
 80196a6:	75fb      	strb	r3, [r7, #23]
 80196a8:	e019      	b.n	80196de <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80196aa:	68fb      	ldr	r3, [r7, #12]
 80196ac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	695b      	ldr	r3, [r3, #20]
 80196b4:	68fa      	ldr	r2, [r7, #12]
 80196b6:	8992      	ldrh	r2, [r2, #12]
 80196b8:	fbb3 f0f2 	udiv	r0, r3, r2
 80196bc:	fb00 f202 	mul.w	r2, r0, r2
 80196c0:	1a9b      	subs	r3, r3, r2
 80196c2:	440b      	add	r3, r1
 80196c4:	4619      	mov	r1, r3
 80196c6:	68f8      	ldr	r0, [r7, #12]
 80196c8:	f7ff fa60 	bl	8018b8c <ld_clust>
 80196cc:	4602      	mov	r2, r0
 80196ce:	693b      	ldr	r3, [r7, #16]
 80196d0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80196d2:	e7bb      	b.n	801964c <follow_path+0x50>
			if (res != FR_OK) break;
 80196d4:	bf00      	nop
 80196d6:	e002      	b.n	80196de <follow_path+0xe2>
				break;
 80196d8:	bf00      	nop
 80196da:	e000      	b.n	80196de <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80196dc:	bf00      	nop
			}
		}
	}

	return res;
 80196de:	7dfb      	ldrb	r3, [r7, #23]
}
 80196e0:	4618      	mov	r0, r3
 80196e2:	3718      	adds	r7, #24
 80196e4:	46bd      	mov	sp, r7
 80196e6:	bd80      	pop	{r7, pc}

080196e8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80196e8:	b480      	push	{r7}
 80196ea:	b087      	sub	sp, #28
 80196ec:	af00      	add	r7, sp, #0
 80196ee:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80196f0:	f04f 33ff 	mov.w	r3, #4294967295
 80196f4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	681b      	ldr	r3, [r3, #0]
 80196fa:	2b00      	cmp	r3, #0
 80196fc:	d031      	beq.n	8019762 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80196fe:	687b      	ldr	r3, [r7, #4]
 8019700:	681b      	ldr	r3, [r3, #0]
 8019702:	617b      	str	r3, [r7, #20]
 8019704:	e002      	b.n	801970c <get_ldnumber+0x24>
 8019706:	697b      	ldr	r3, [r7, #20]
 8019708:	3301      	adds	r3, #1
 801970a:	617b      	str	r3, [r7, #20]
 801970c:	697b      	ldr	r3, [r7, #20]
 801970e:	781b      	ldrb	r3, [r3, #0]
 8019710:	2b1f      	cmp	r3, #31
 8019712:	d903      	bls.n	801971c <get_ldnumber+0x34>
 8019714:	697b      	ldr	r3, [r7, #20]
 8019716:	781b      	ldrb	r3, [r3, #0]
 8019718:	2b3a      	cmp	r3, #58	; 0x3a
 801971a:	d1f4      	bne.n	8019706 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801971c:	697b      	ldr	r3, [r7, #20]
 801971e:	781b      	ldrb	r3, [r3, #0]
 8019720:	2b3a      	cmp	r3, #58	; 0x3a
 8019722:	d11c      	bne.n	801975e <get_ldnumber+0x76>
			tp = *path;
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	681b      	ldr	r3, [r3, #0]
 8019728:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801972a:	68fb      	ldr	r3, [r7, #12]
 801972c:	1c5a      	adds	r2, r3, #1
 801972e:	60fa      	str	r2, [r7, #12]
 8019730:	781b      	ldrb	r3, [r3, #0]
 8019732:	3b30      	subs	r3, #48	; 0x30
 8019734:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8019736:	68bb      	ldr	r3, [r7, #8]
 8019738:	2b09      	cmp	r3, #9
 801973a:	d80e      	bhi.n	801975a <get_ldnumber+0x72>
 801973c:	68fa      	ldr	r2, [r7, #12]
 801973e:	697b      	ldr	r3, [r7, #20]
 8019740:	429a      	cmp	r2, r3
 8019742:	d10a      	bne.n	801975a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8019744:	68bb      	ldr	r3, [r7, #8]
 8019746:	2b00      	cmp	r3, #0
 8019748:	d107      	bne.n	801975a <get_ldnumber+0x72>
					vol = (int)i;
 801974a:	68bb      	ldr	r3, [r7, #8]
 801974c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801974e:	697b      	ldr	r3, [r7, #20]
 8019750:	3301      	adds	r3, #1
 8019752:	617b      	str	r3, [r7, #20]
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	697a      	ldr	r2, [r7, #20]
 8019758:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801975a:	693b      	ldr	r3, [r7, #16]
 801975c:	e002      	b.n	8019764 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801975e:	2300      	movs	r3, #0
 8019760:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8019762:	693b      	ldr	r3, [r7, #16]
}
 8019764:	4618      	mov	r0, r3
 8019766:	371c      	adds	r7, #28
 8019768:	46bd      	mov	sp, r7
 801976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801976e:	4770      	bx	lr

08019770 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8019770:	b580      	push	{r7, lr}
 8019772:	b082      	sub	sp, #8
 8019774:	af00      	add	r7, sp, #0
 8019776:	6078      	str	r0, [r7, #4]
 8019778:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801977a:	687b      	ldr	r3, [r7, #4]
 801977c:	2200      	movs	r2, #0
 801977e:	70da      	strb	r2, [r3, #3]
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	f04f 32ff 	mov.w	r2, #4294967295
 8019786:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8019788:	6839      	ldr	r1, [r7, #0]
 801978a:	6878      	ldr	r0, [r7, #4]
 801978c:	f7fe fc78 	bl	8018080 <move_window>
 8019790:	4603      	mov	r3, r0
 8019792:	2b00      	cmp	r3, #0
 8019794:	d001      	beq.n	801979a <check_fs+0x2a>
 8019796:	2304      	movs	r3, #4
 8019798:	e038      	b.n	801980c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801979a:	687b      	ldr	r3, [r7, #4]
 801979c:	3338      	adds	r3, #56	; 0x38
 801979e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80197a2:	4618      	mov	r0, r3
 80197a4:	f7fe f9bc 	bl	8017b20 <ld_word>
 80197a8:	4603      	mov	r3, r0
 80197aa:	461a      	mov	r2, r3
 80197ac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80197b0:	429a      	cmp	r2, r3
 80197b2:	d001      	beq.n	80197b8 <check_fs+0x48>
 80197b4:	2303      	movs	r3, #3
 80197b6:	e029      	b.n	801980c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80197be:	2be9      	cmp	r3, #233	; 0xe9
 80197c0:	d009      	beq.n	80197d6 <check_fs+0x66>
 80197c2:	687b      	ldr	r3, [r7, #4]
 80197c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80197c8:	2beb      	cmp	r3, #235	; 0xeb
 80197ca:	d11e      	bne.n	801980a <check_fs+0x9a>
 80197cc:	687b      	ldr	r3, [r7, #4]
 80197ce:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80197d2:	2b90      	cmp	r3, #144	; 0x90
 80197d4:	d119      	bne.n	801980a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80197d6:	687b      	ldr	r3, [r7, #4]
 80197d8:	3338      	adds	r3, #56	; 0x38
 80197da:	3336      	adds	r3, #54	; 0x36
 80197dc:	4618      	mov	r0, r3
 80197de:	f7fe f9b7 	bl	8017b50 <ld_dword>
 80197e2:	4603      	mov	r3, r0
 80197e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80197e8:	4a0a      	ldr	r2, [pc, #40]	; (8019814 <check_fs+0xa4>)
 80197ea:	4293      	cmp	r3, r2
 80197ec:	d101      	bne.n	80197f2 <check_fs+0x82>
 80197ee:	2300      	movs	r3, #0
 80197f0:	e00c      	b.n	801980c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80197f2:	687b      	ldr	r3, [r7, #4]
 80197f4:	3338      	adds	r3, #56	; 0x38
 80197f6:	3352      	adds	r3, #82	; 0x52
 80197f8:	4618      	mov	r0, r3
 80197fa:	f7fe f9a9 	bl	8017b50 <ld_dword>
 80197fe:	4603      	mov	r3, r0
 8019800:	4a05      	ldr	r2, [pc, #20]	; (8019818 <check_fs+0xa8>)
 8019802:	4293      	cmp	r3, r2
 8019804:	d101      	bne.n	801980a <check_fs+0x9a>
 8019806:	2300      	movs	r3, #0
 8019808:	e000      	b.n	801980c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801980a:	2302      	movs	r3, #2
}
 801980c:	4618      	mov	r0, r3
 801980e:	3708      	adds	r7, #8
 8019810:	46bd      	mov	sp, r7
 8019812:	bd80      	pop	{r7, pc}
 8019814:	00544146 	.word	0x00544146
 8019818:	33544146 	.word	0x33544146

0801981c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801981c:	b580      	push	{r7, lr}
 801981e:	b096      	sub	sp, #88	; 0x58
 8019820:	af00      	add	r7, sp, #0
 8019822:	60f8      	str	r0, [r7, #12]
 8019824:	60b9      	str	r1, [r7, #8]
 8019826:	4613      	mov	r3, r2
 8019828:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801982a:	68bb      	ldr	r3, [r7, #8]
 801982c:	2200      	movs	r2, #0
 801982e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8019830:	68f8      	ldr	r0, [r7, #12]
 8019832:	f7ff ff59 	bl	80196e8 <get_ldnumber>
 8019836:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8019838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801983a:	2b00      	cmp	r3, #0
 801983c:	da01      	bge.n	8019842 <find_volume+0x26>
 801983e:	230b      	movs	r3, #11
 8019840:	e265      	b.n	8019d0e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8019842:	4a9f      	ldr	r2, [pc, #636]	; (8019ac0 <find_volume+0x2a4>)
 8019844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801984a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801984c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801984e:	2b00      	cmp	r3, #0
 8019850:	d101      	bne.n	8019856 <find_volume+0x3a>
 8019852:	230c      	movs	r3, #12
 8019854:	e25b      	b.n	8019d0e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8019856:	68bb      	ldr	r3, [r7, #8]
 8019858:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801985a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801985c:	79fb      	ldrb	r3, [r7, #7]
 801985e:	f023 0301 	bic.w	r3, r3, #1
 8019862:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8019864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019866:	781b      	ldrb	r3, [r3, #0]
 8019868:	2b00      	cmp	r3, #0
 801986a:	d01a      	beq.n	80198a2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801986c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801986e:	785b      	ldrb	r3, [r3, #1]
 8019870:	4618      	mov	r0, r3
 8019872:	f7fe f8b7 	bl	80179e4 <disk_status>
 8019876:	4603      	mov	r3, r0
 8019878:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801987c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8019880:	f003 0301 	and.w	r3, r3, #1
 8019884:	2b00      	cmp	r3, #0
 8019886:	d10c      	bne.n	80198a2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8019888:	79fb      	ldrb	r3, [r7, #7]
 801988a:	2b00      	cmp	r3, #0
 801988c:	d007      	beq.n	801989e <find_volume+0x82>
 801988e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8019892:	f003 0304 	and.w	r3, r3, #4
 8019896:	2b00      	cmp	r3, #0
 8019898:	d001      	beq.n	801989e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801989a:	230a      	movs	r3, #10
 801989c:	e237      	b.n	8019d0e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 801989e:	2300      	movs	r3, #0
 80198a0:	e235      	b.n	8019d0e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80198a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80198a4:	2200      	movs	r2, #0
 80198a6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80198a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80198aa:	b2da      	uxtb	r2, r3
 80198ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80198ae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80198b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80198b2:	785b      	ldrb	r3, [r3, #1]
 80198b4:	4618      	mov	r0, r3
 80198b6:	f7fe f8af 	bl	8017a18 <disk_initialize>
 80198ba:	4603      	mov	r3, r0
 80198bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80198c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80198c4:	f003 0301 	and.w	r3, r3, #1
 80198c8:	2b00      	cmp	r3, #0
 80198ca:	d001      	beq.n	80198d0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80198cc:	2303      	movs	r3, #3
 80198ce:	e21e      	b.n	8019d0e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80198d0:	79fb      	ldrb	r3, [r7, #7]
 80198d2:	2b00      	cmp	r3, #0
 80198d4:	d007      	beq.n	80198e6 <find_volume+0xca>
 80198d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80198da:	f003 0304 	and.w	r3, r3, #4
 80198de:	2b00      	cmp	r3, #0
 80198e0:	d001      	beq.n	80198e6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80198e2:	230a      	movs	r3, #10
 80198e4:	e213      	b.n	8019d0e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80198e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80198e8:	7858      	ldrb	r0, [r3, #1]
 80198ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80198ec:	330c      	adds	r3, #12
 80198ee:	461a      	mov	r2, r3
 80198f0:	2102      	movs	r1, #2
 80198f2:	f7fe f8f7 	bl	8017ae4 <disk_ioctl>
 80198f6:	4603      	mov	r3, r0
 80198f8:	2b00      	cmp	r3, #0
 80198fa:	d001      	beq.n	8019900 <find_volume+0xe4>
 80198fc:	2301      	movs	r3, #1
 80198fe:	e206      	b.n	8019d0e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8019900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019902:	899b      	ldrh	r3, [r3, #12]
 8019904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8019908:	d80d      	bhi.n	8019926 <find_volume+0x10a>
 801990a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801990c:	899b      	ldrh	r3, [r3, #12]
 801990e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019912:	d308      	bcc.n	8019926 <find_volume+0x10a>
 8019914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019916:	899b      	ldrh	r3, [r3, #12]
 8019918:	461a      	mov	r2, r3
 801991a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801991c:	899b      	ldrh	r3, [r3, #12]
 801991e:	3b01      	subs	r3, #1
 8019920:	4013      	ands	r3, r2
 8019922:	2b00      	cmp	r3, #0
 8019924:	d001      	beq.n	801992a <find_volume+0x10e>
 8019926:	2301      	movs	r3, #1
 8019928:	e1f1      	b.n	8019d0e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801992a:	2300      	movs	r3, #0
 801992c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801992e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8019930:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019932:	f7ff ff1d 	bl	8019770 <check_fs>
 8019936:	4603      	mov	r3, r0
 8019938:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801993c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019940:	2b02      	cmp	r3, #2
 8019942:	d149      	bne.n	80199d8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8019944:	2300      	movs	r3, #0
 8019946:	643b      	str	r3, [r7, #64]	; 0x40
 8019948:	e01e      	b.n	8019988 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801994a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801994c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8019950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019952:	011b      	lsls	r3, r3, #4
 8019954:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8019958:	4413      	add	r3, r2
 801995a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801995c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801995e:	3304      	adds	r3, #4
 8019960:	781b      	ldrb	r3, [r3, #0]
 8019962:	2b00      	cmp	r3, #0
 8019964:	d006      	beq.n	8019974 <find_volume+0x158>
 8019966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019968:	3308      	adds	r3, #8
 801996a:	4618      	mov	r0, r3
 801996c:	f7fe f8f0 	bl	8017b50 <ld_dword>
 8019970:	4602      	mov	r2, r0
 8019972:	e000      	b.n	8019976 <find_volume+0x15a>
 8019974:	2200      	movs	r2, #0
 8019976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019978:	009b      	lsls	r3, r3, #2
 801997a:	3358      	adds	r3, #88	; 0x58
 801997c:	443b      	add	r3, r7
 801997e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8019982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019984:	3301      	adds	r3, #1
 8019986:	643b      	str	r3, [r7, #64]	; 0x40
 8019988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801998a:	2b03      	cmp	r3, #3
 801998c:	d9dd      	bls.n	801994a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801998e:	2300      	movs	r3, #0
 8019990:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8019992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019994:	2b00      	cmp	r3, #0
 8019996:	d002      	beq.n	801999e <find_volume+0x182>
 8019998:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801999a:	3b01      	subs	r3, #1
 801999c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801999e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80199a0:	009b      	lsls	r3, r3, #2
 80199a2:	3358      	adds	r3, #88	; 0x58
 80199a4:	443b      	add	r3, r7
 80199a6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80199aa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80199ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80199ae:	2b00      	cmp	r3, #0
 80199b0:	d005      	beq.n	80199be <find_volume+0x1a2>
 80199b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80199b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80199b6:	f7ff fedb 	bl	8019770 <check_fs>
 80199ba:	4603      	mov	r3, r0
 80199bc:	e000      	b.n	80199c0 <find_volume+0x1a4>
 80199be:	2303      	movs	r3, #3
 80199c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80199c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80199c8:	2b01      	cmp	r3, #1
 80199ca:	d905      	bls.n	80199d8 <find_volume+0x1bc>
 80199cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80199ce:	3301      	adds	r3, #1
 80199d0:	643b      	str	r3, [r7, #64]	; 0x40
 80199d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80199d4:	2b03      	cmp	r3, #3
 80199d6:	d9e2      	bls.n	801999e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80199d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80199dc:	2b04      	cmp	r3, #4
 80199de:	d101      	bne.n	80199e4 <find_volume+0x1c8>
 80199e0:	2301      	movs	r3, #1
 80199e2:	e194      	b.n	8019d0e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80199e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80199e8:	2b01      	cmp	r3, #1
 80199ea:	d901      	bls.n	80199f0 <find_volume+0x1d4>
 80199ec:	230d      	movs	r3, #13
 80199ee:	e18e      	b.n	8019d0e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80199f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80199f2:	3338      	adds	r3, #56	; 0x38
 80199f4:	330b      	adds	r3, #11
 80199f6:	4618      	mov	r0, r3
 80199f8:	f7fe f892 	bl	8017b20 <ld_word>
 80199fc:	4603      	mov	r3, r0
 80199fe:	461a      	mov	r2, r3
 8019a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a02:	899b      	ldrh	r3, [r3, #12]
 8019a04:	429a      	cmp	r2, r3
 8019a06:	d001      	beq.n	8019a0c <find_volume+0x1f0>
 8019a08:	230d      	movs	r3, #13
 8019a0a:	e180      	b.n	8019d0e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8019a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a0e:	3338      	adds	r3, #56	; 0x38
 8019a10:	3316      	adds	r3, #22
 8019a12:	4618      	mov	r0, r3
 8019a14:	f7fe f884 	bl	8017b20 <ld_word>
 8019a18:	4603      	mov	r3, r0
 8019a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8019a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019a1e:	2b00      	cmp	r3, #0
 8019a20:	d106      	bne.n	8019a30 <find_volume+0x214>
 8019a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a24:	3338      	adds	r3, #56	; 0x38
 8019a26:	3324      	adds	r3, #36	; 0x24
 8019a28:	4618      	mov	r0, r3
 8019a2a:	f7fe f891 	bl	8017b50 <ld_dword>
 8019a2e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8019a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019a34:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8019a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a38:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8019a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a3e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8019a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a42:	789b      	ldrb	r3, [r3, #2]
 8019a44:	2b01      	cmp	r3, #1
 8019a46:	d005      	beq.n	8019a54 <find_volume+0x238>
 8019a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a4a:	789b      	ldrb	r3, [r3, #2]
 8019a4c:	2b02      	cmp	r3, #2
 8019a4e:	d001      	beq.n	8019a54 <find_volume+0x238>
 8019a50:	230d      	movs	r3, #13
 8019a52:	e15c      	b.n	8019d0e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8019a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a56:	789b      	ldrb	r3, [r3, #2]
 8019a58:	461a      	mov	r2, r3
 8019a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019a5c:	fb02 f303 	mul.w	r3, r2, r3
 8019a60:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8019a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019a68:	b29a      	uxth	r2, r3
 8019a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a6c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8019a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a70:	895b      	ldrh	r3, [r3, #10]
 8019a72:	2b00      	cmp	r3, #0
 8019a74:	d008      	beq.n	8019a88 <find_volume+0x26c>
 8019a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a78:	895b      	ldrh	r3, [r3, #10]
 8019a7a:	461a      	mov	r2, r3
 8019a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a7e:	895b      	ldrh	r3, [r3, #10]
 8019a80:	3b01      	subs	r3, #1
 8019a82:	4013      	ands	r3, r2
 8019a84:	2b00      	cmp	r3, #0
 8019a86:	d001      	beq.n	8019a8c <find_volume+0x270>
 8019a88:	230d      	movs	r3, #13
 8019a8a:	e140      	b.n	8019d0e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8019a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a8e:	3338      	adds	r3, #56	; 0x38
 8019a90:	3311      	adds	r3, #17
 8019a92:	4618      	mov	r0, r3
 8019a94:	f7fe f844 	bl	8017b20 <ld_word>
 8019a98:	4603      	mov	r3, r0
 8019a9a:	461a      	mov	r2, r3
 8019a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a9e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8019aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019aa2:	891b      	ldrh	r3, [r3, #8]
 8019aa4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019aa6:	8992      	ldrh	r2, [r2, #12]
 8019aa8:	0952      	lsrs	r2, r2, #5
 8019aaa:	b292      	uxth	r2, r2
 8019aac:	fbb3 f1f2 	udiv	r1, r3, r2
 8019ab0:	fb01 f202 	mul.w	r2, r1, r2
 8019ab4:	1a9b      	subs	r3, r3, r2
 8019ab6:	b29b      	uxth	r3, r3
 8019ab8:	2b00      	cmp	r3, #0
 8019aba:	d003      	beq.n	8019ac4 <find_volume+0x2a8>
 8019abc:	230d      	movs	r3, #13
 8019abe:	e126      	b.n	8019d0e <find_volume+0x4f2>
 8019ac0:	240016bc 	.word	0x240016bc

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8019ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ac6:	3338      	adds	r3, #56	; 0x38
 8019ac8:	3313      	adds	r3, #19
 8019aca:	4618      	mov	r0, r3
 8019acc:	f7fe f828 	bl	8017b20 <ld_word>
 8019ad0:	4603      	mov	r3, r0
 8019ad2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8019ad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019ad6:	2b00      	cmp	r3, #0
 8019ad8:	d106      	bne.n	8019ae8 <find_volume+0x2cc>
 8019ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019adc:	3338      	adds	r3, #56	; 0x38
 8019ade:	3320      	adds	r3, #32
 8019ae0:	4618      	mov	r0, r3
 8019ae2:	f7fe f835 	bl	8017b50 <ld_dword>
 8019ae6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8019ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019aea:	3338      	adds	r3, #56	; 0x38
 8019aec:	330e      	adds	r3, #14
 8019aee:	4618      	mov	r0, r3
 8019af0:	f7fe f816 	bl	8017b20 <ld_word>
 8019af4:	4603      	mov	r3, r0
 8019af6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8019af8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8019afa:	2b00      	cmp	r3, #0
 8019afc:	d101      	bne.n	8019b02 <find_volume+0x2e6>
 8019afe:	230d      	movs	r3, #13
 8019b00:	e105      	b.n	8019d0e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8019b02:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8019b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019b06:	4413      	add	r3, r2
 8019b08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019b0a:	8911      	ldrh	r1, [r2, #8]
 8019b0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019b0e:	8992      	ldrh	r2, [r2, #12]
 8019b10:	0952      	lsrs	r2, r2, #5
 8019b12:	b292      	uxth	r2, r2
 8019b14:	fbb1 f2f2 	udiv	r2, r1, r2
 8019b18:	b292      	uxth	r2, r2
 8019b1a:	4413      	add	r3, r2
 8019b1c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8019b1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b22:	429a      	cmp	r2, r3
 8019b24:	d201      	bcs.n	8019b2a <find_volume+0x30e>
 8019b26:	230d      	movs	r3, #13
 8019b28:	e0f1      	b.n	8019d0e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8019b2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b2e:	1ad3      	subs	r3, r2, r3
 8019b30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019b32:	8952      	ldrh	r2, [r2, #10]
 8019b34:	fbb3 f3f2 	udiv	r3, r3, r2
 8019b38:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8019b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b3c:	2b00      	cmp	r3, #0
 8019b3e:	d101      	bne.n	8019b44 <find_volume+0x328>
 8019b40:	230d      	movs	r3, #13
 8019b42:	e0e4      	b.n	8019d0e <find_volume+0x4f2>
		fmt = FS_FAT32;
 8019b44:	2303      	movs	r3, #3
 8019b46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8019b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b4c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8019b50:	4293      	cmp	r3, r2
 8019b52:	d802      	bhi.n	8019b5a <find_volume+0x33e>
 8019b54:	2302      	movs	r3, #2
 8019b56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8019b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b5c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8019b60:	4293      	cmp	r3, r2
 8019b62:	d802      	bhi.n	8019b6a <find_volume+0x34e>
 8019b64:	2301      	movs	r3, #1
 8019b66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8019b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b6c:	1c9a      	adds	r2, r3, #2
 8019b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b70:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8019b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b74:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019b76:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8019b78:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8019b7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019b7c:	441a      	add	r2, r3
 8019b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b80:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8019b82:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b86:	441a      	add	r2, r3
 8019b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b8a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8019b8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019b90:	2b03      	cmp	r3, #3
 8019b92:	d11e      	bne.n	8019bd2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8019b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b96:	3338      	adds	r3, #56	; 0x38
 8019b98:	332a      	adds	r3, #42	; 0x2a
 8019b9a:	4618      	mov	r0, r3
 8019b9c:	f7fd ffc0 	bl	8017b20 <ld_word>
 8019ba0:	4603      	mov	r3, r0
 8019ba2:	2b00      	cmp	r3, #0
 8019ba4:	d001      	beq.n	8019baa <find_volume+0x38e>
 8019ba6:	230d      	movs	r3, #13
 8019ba8:	e0b1      	b.n	8019d0e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8019baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019bac:	891b      	ldrh	r3, [r3, #8]
 8019bae:	2b00      	cmp	r3, #0
 8019bb0:	d001      	beq.n	8019bb6 <find_volume+0x39a>
 8019bb2:	230d      	movs	r3, #13
 8019bb4:	e0ab      	b.n	8019d0e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8019bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019bb8:	3338      	adds	r3, #56	; 0x38
 8019bba:	332c      	adds	r3, #44	; 0x2c
 8019bbc:	4618      	mov	r0, r3
 8019bbe:	f7fd ffc7 	bl	8017b50 <ld_dword>
 8019bc2:	4602      	mov	r2, r0
 8019bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019bc6:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8019bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019bca:	69db      	ldr	r3, [r3, #28]
 8019bcc:	009b      	lsls	r3, r3, #2
 8019bce:	647b      	str	r3, [r7, #68]	; 0x44
 8019bd0:	e01f      	b.n	8019c12 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8019bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019bd4:	891b      	ldrh	r3, [r3, #8]
 8019bd6:	2b00      	cmp	r3, #0
 8019bd8:	d101      	bne.n	8019bde <find_volume+0x3c2>
 8019bda:	230d      	movs	r3, #13
 8019bdc:	e097      	b.n	8019d0e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8019bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019be0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8019be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019be4:	441a      	add	r2, r3
 8019be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019be8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8019bea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019bee:	2b02      	cmp	r3, #2
 8019bf0:	d103      	bne.n	8019bfa <find_volume+0x3de>
 8019bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019bf4:	69db      	ldr	r3, [r3, #28]
 8019bf6:	005b      	lsls	r3, r3, #1
 8019bf8:	e00a      	b.n	8019c10 <find_volume+0x3f4>
 8019bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019bfc:	69da      	ldr	r2, [r3, #28]
 8019bfe:	4613      	mov	r3, r2
 8019c00:	005b      	lsls	r3, r3, #1
 8019c02:	4413      	add	r3, r2
 8019c04:	085a      	lsrs	r2, r3, #1
 8019c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019c08:	69db      	ldr	r3, [r3, #28]
 8019c0a:	f003 0301 	and.w	r3, r3, #1
 8019c0e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8019c10:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8019c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019c14:	6a1a      	ldr	r2, [r3, #32]
 8019c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019c18:	899b      	ldrh	r3, [r3, #12]
 8019c1a:	4619      	mov	r1, r3
 8019c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019c1e:	440b      	add	r3, r1
 8019c20:	3b01      	subs	r3, #1
 8019c22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019c24:	8989      	ldrh	r1, [r1, #12]
 8019c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8019c2a:	429a      	cmp	r2, r3
 8019c2c:	d201      	bcs.n	8019c32 <find_volume+0x416>
 8019c2e:	230d      	movs	r3, #13
 8019c30:	e06d      	b.n	8019d0e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8019c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019c34:	f04f 32ff 	mov.w	r2, #4294967295
 8019c38:	619a      	str	r2, [r3, #24]
 8019c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019c3c:	699a      	ldr	r2, [r3, #24]
 8019c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019c40:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8019c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019c44:	2280      	movs	r2, #128	; 0x80
 8019c46:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8019c48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019c4c:	2b03      	cmp	r3, #3
 8019c4e:	d149      	bne.n	8019ce4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8019c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019c52:	3338      	adds	r3, #56	; 0x38
 8019c54:	3330      	adds	r3, #48	; 0x30
 8019c56:	4618      	mov	r0, r3
 8019c58:	f7fd ff62 	bl	8017b20 <ld_word>
 8019c5c:	4603      	mov	r3, r0
 8019c5e:	2b01      	cmp	r3, #1
 8019c60:	d140      	bne.n	8019ce4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8019c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019c64:	3301      	adds	r3, #1
 8019c66:	4619      	mov	r1, r3
 8019c68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019c6a:	f7fe fa09 	bl	8018080 <move_window>
 8019c6e:	4603      	mov	r3, r0
 8019c70:	2b00      	cmp	r3, #0
 8019c72:	d137      	bne.n	8019ce4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8019c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019c76:	2200      	movs	r2, #0
 8019c78:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8019c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019c7c:	3338      	adds	r3, #56	; 0x38
 8019c7e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8019c82:	4618      	mov	r0, r3
 8019c84:	f7fd ff4c 	bl	8017b20 <ld_word>
 8019c88:	4603      	mov	r3, r0
 8019c8a:	461a      	mov	r2, r3
 8019c8c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8019c90:	429a      	cmp	r2, r3
 8019c92:	d127      	bne.n	8019ce4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8019c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019c96:	3338      	adds	r3, #56	; 0x38
 8019c98:	4618      	mov	r0, r3
 8019c9a:	f7fd ff59 	bl	8017b50 <ld_dword>
 8019c9e:	4603      	mov	r3, r0
 8019ca0:	4a1d      	ldr	r2, [pc, #116]	; (8019d18 <find_volume+0x4fc>)
 8019ca2:	4293      	cmp	r3, r2
 8019ca4:	d11e      	bne.n	8019ce4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8019ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ca8:	3338      	adds	r3, #56	; 0x38
 8019caa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8019cae:	4618      	mov	r0, r3
 8019cb0:	f7fd ff4e 	bl	8017b50 <ld_dword>
 8019cb4:	4603      	mov	r3, r0
 8019cb6:	4a19      	ldr	r2, [pc, #100]	; (8019d1c <find_volume+0x500>)
 8019cb8:	4293      	cmp	r3, r2
 8019cba:	d113      	bne.n	8019ce4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8019cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019cbe:	3338      	adds	r3, #56	; 0x38
 8019cc0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8019cc4:	4618      	mov	r0, r3
 8019cc6:	f7fd ff43 	bl	8017b50 <ld_dword>
 8019cca:	4602      	mov	r2, r0
 8019ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019cce:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8019cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019cd2:	3338      	adds	r3, #56	; 0x38
 8019cd4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8019cd8:	4618      	mov	r0, r3
 8019cda:	f7fd ff39 	bl	8017b50 <ld_dword>
 8019cde:	4602      	mov	r2, r0
 8019ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ce2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8019ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ce6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8019cea:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8019cec:	4b0c      	ldr	r3, [pc, #48]	; (8019d20 <find_volume+0x504>)
 8019cee:	881b      	ldrh	r3, [r3, #0]
 8019cf0:	3301      	adds	r3, #1
 8019cf2:	b29a      	uxth	r2, r3
 8019cf4:	4b0a      	ldr	r3, [pc, #40]	; (8019d20 <find_volume+0x504>)
 8019cf6:	801a      	strh	r2, [r3, #0]
 8019cf8:	4b09      	ldr	r3, [pc, #36]	; (8019d20 <find_volume+0x504>)
 8019cfa:	881a      	ldrh	r2, [r3, #0]
 8019cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019cfe:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8019d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019d02:	4a08      	ldr	r2, [pc, #32]	; (8019d24 <find_volume+0x508>)
 8019d04:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8019d06:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019d08:	f7fe f952 	bl	8017fb0 <clear_lock>
#endif
	return FR_OK;
 8019d0c:	2300      	movs	r3, #0
}
 8019d0e:	4618      	mov	r0, r3
 8019d10:	3758      	adds	r7, #88	; 0x58
 8019d12:	46bd      	mov	sp, r7
 8019d14:	bd80      	pop	{r7, pc}
 8019d16:	bf00      	nop
 8019d18:	41615252 	.word	0x41615252
 8019d1c:	61417272 	.word	0x61417272
 8019d20:	240016c0 	.word	0x240016c0
 8019d24:	240016e4 	.word	0x240016e4

08019d28 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8019d28:	b580      	push	{r7, lr}
 8019d2a:	b084      	sub	sp, #16
 8019d2c:	af00      	add	r7, sp, #0
 8019d2e:	6078      	str	r0, [r7, #4]
 8019d30:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8019d32:	2309      	movs	r3, #9
 8019d34:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8019d36:	687b      	ldr	r3, [r7, #4]
 8019d38:	2b00      	cmp	r3, #0
 8019d3a:	d01c      	beq.n	8019d76 <validate+0x4e>
 8019d3c:	687b      	ldr	r3, [r7, #4]
 8019d3e:	681b      	ldr	r3, [r3, #0]
 8019d40:	2b00      	cmp	r3, #0
 8019d42:	d018      	beq.n	8019d76 <validate+0x4e>
 8019d44:	687b      	ldr	r3, [r7, #4]
 8019d46:	681b      	ldr	r3, [r3, #0]
 8019d48:	781b      	ldrb	r3, [r3, #0]
 8019d4a:	2b00      	cmp	r3, #0
 8019d4c:	d013      	beq.n	8019d76 <validate+0x4e>
 8019d4e:	687b      	ldr	r3, [r7, #4]
 8019d50:	889a      	ldrh	r2, [r3, #4]
 8019d52:	687b      	ldr	r3, [r7, #4]
 8019d54:	681b      	ldr	r3, [r3, #0]
 8019d56:	88db      	ldrh	r3, [r3, #6]
 8019d58:	429a      	cmp	r2, r3
 8019d5a:	d10c      	bne.n	8019d76 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	681b      	ldr	r3, [r3, #0]
 8019d60:	785b      	ldrb	r3, [r3, #1]
 8019d62:	4618      	mov	r0, r3
 8019d64:	f7fd fe3e 	bl	80179e4 <disk_status>
 8019d68:	4603      	mov	r3, r0
 8019d6a:	f003 0301 	and.w	r3, r3, #1
 8019d6e:	2b00      	cmp	r3, #0
 8019d70:	d101      	bne.n	8019d76 <validate+0x4e>
			res = FR_OK;
 8019d72:	2300      	movs	r3, #0
 8019d74:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8019d76:	7bfb      	ldrb	r3, [r7, #15]
 8019d78:	2b00      	cmp	r3, #0
 8019d7a:	d102      	bne.n	8019d82 <validate+0x5a>
 8019d7c:	687b      	ldr	r3, [r7, #4]
 8019d7e:	681b      	ldr	r3, [r3, #0]
 8019d80:	e000      	b.n	8019d84 <validate+0x5c>
 8019d82:	2300      	movs	r3, #0
 8019d84:	683a      	ldr	r2, [r7, #0]
 8019d86:	6013      	str	r3, [r2, #0]
	return res;
 8019d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8019d8a:	4618      	mov	r0, r3
 8019d8c:	3710      	adds	r7, #16
 8019d8e:	46bd      	mov	sp, r7
 8019d90:	bd80      	pop	{r7, pc}
	...

08019d94 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8019d94:	b580      	push	{r7, lr}
 8019d96:	b088      	sub	sp, #32
 8019d98:	af00      	add	r7, sp, #0
 8019d9a:	60f8      	str	r0, [r7, #12]
 8019d9c:	60b9      	str	r1, [r7, #8]
 8019d9e:	4613      	mov	r3, r2
 8019da0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8019da2:	68bb      	ldr	r3, [r7, #8]
 8019da4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8019da6:	f107 0310 	add.w	r3, r7, #16
 8019daa:	4618      	mov	r0, r3
 8019dac:	f7ff fc9c 	bl	80196e8 <get_ldnumber>
 8019db0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8019db2:	69fb      	ldr	r3, [r7, #28]
 8019db4:	2b00      	cmp	r3, #0
 8019db6:	da01      	bge.n	8019dbc <f_mount+0x28>
 8019db8:	230b      	movs	r3, #11
 8019dba:	e02b      	b.n	8019e14 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8019dbc:	4a17      	ldr	r2, [pc, #92]	; (8019e1c <f_mount+0x88>)
 8019dbe:	69fb      	ldr	r3, [r7, #28]
 8019dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019dc4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8019dc6:	69bb      	ldr	r3, [r7, #24]
 8019dc8:	2b00      	cmp	r3, #0
 8019dca:	d005      	beq.n	8019dd8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8019dcc:	69b8      	ldr	r0, [r7, #24]
 8019dce:	f7fe f8ef 	bl	8017fb0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8019dd2:	69bb      	ldr	r3, [r7, #24]
 8019dd4:	2200      	movs	r2, #0
 8019dd6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8019dd8:	68fb      	ldr	r3, [r7, #12]
 8019dda:	2b00      	cmp	r3, #0
 8019ddc:	d002      	beq.n	8019de4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8019dde:	68fb      	ldr	r3, [r7, #12]
 8019de0:	2200      	movs	r2, #0
 8019de2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8019de4:	68fa      	ldr	r2, [r7, #12]
 8019de6:	490d      	ldr	r1, [pc, #52]	; (8019e1c <f_mount+0x88>)
 8019de8:	69fb      	ldr	r3, [r7, #28]
 8019dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8019dee:	68fb      	ldr	r3, [r7, #12]
 8019df0:	2b00      	cmp	r3, #0
 8019df2:	d002      	beq.n	8019dfa <f_mount+0x66>
 8019df4:	79fb      	ldrb	r3, [r7, #7]
 8019df6:	2b01      	cmp	r3, #1
 8019df8:	d001      	beq.n	8019dfe <f_mount+0x6a>
 8019dfa:	2300      	movs	r3, #0
 8019dfc:	e00a      	b.n	8019e14 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8019dfe:	f107 010c 	add.w	r1, r7, #12
 8019e02:	f107 0308 	add.w	r3, r7, #8
 8019e06:	2200      	movs	r2, #0
 8019e08:	4618      	mov	r0, r3
 8019e0a:	f7ff fd07 	bl	801981c <find_volume>
 8019e0e:	4603      	mov	r3, r0
 8019e10:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8019e12:	7dfb      	ldrb	r3, [r7, #23]
}
 8019e14:	4618      	mov	r0, r3
 8019e16:	3720      	adds	r7, #32
 8019e18:	46bd      	mov	sp, r7
 8019e1a:	bd80      	pop	{r7, pc}
 8019e1c:	240016bc 	.word	0x240016bc

08019e20 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8019e20:	b580      	push	{r7, lr}
 8019e22:	b09a      	sub	sp, #104	; 0x68
 8019e24:	af00      	add	r7, sp, #0
 8019e26:	60f8      	str	r0, [r7, #12]
 8019e28:	60b9      	str	r1, [r7, #8]
 8019e2a:	4613      	mov	r3, r2
 8019e2c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8019e2e:	68fb      	ldr	r3, [r7, #12]
 8019e30:	2b00      	cmp	r3, #0
 8019e32:	d101      	bne.n	8019e38 <f_open+0x18>
 8019e34:	2309      	movs	r3, #9
 8019e36:	e1bb      	b.n	801a1b0 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8019e38:	79fb      	ldrb	r3, [r7, #7]
 8019e3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019e3e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8019e40:	79fa      	ldrb	r2, [r7, #7]
 8019e42:	f107 0114 	add.w	r1, r7, #20
 8019e46:	f107 0308 	add.w	r3, r7, #8
 8019e4a:	4618      	mov	r0, r3
 8019e4c:	f7ff fce6 	bl	801981c <find_volume>
 8019e50:	4603      	mov	r3, r0
 8019e52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8019e56:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019e5a:	2b00      	cmp	r3, #0
 8019e5c:	f040 819f 	bne.w	801a19e <f_open+0x37e>
		dj.obj.fs = fs;
 8019e60:	697b      	ldr	r3, [r7, #20]
 8019e62:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8019e64:	68ba      	ldr	r2, [r7, #8]
 8019e66:	f107 0318 	add.w	r3, r7, #24
 8019e6a:	4611      	mov	r1, r2
 8019e6c:	4618      	mov	r0, r3
 8019e6e:	f7ff fbc5 	bl	80195fc <follow_path>
 8019e72:	4603      	mov	r3, r0
 8019e74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8019e78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019e7c:	2b00      	cmp	r3, #0
 8019e7e:	d11a      	bne.n	8019eb6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8019e80:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019e84:	b25b      	sxtb	r3, r3
 8019e86:	2b00      	cmp	r3, #0
 8019e88:	da03      	bge.n	8019e92 <f_open+0x72>
				res = FR_INVALID_NAME;
 8019e8a:	2306      	movs	r3, #6
 8019e8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8019e90:	e011      	b.n	8019eb6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8019e92:	79fb      	ldrb	r3, [r7, #7]
 8019e94:	f023 0301 	bic.w	r3, r3, #1
 8019e98:	2b00      	cmp	r3, #0
 8019e9a:	bf14      	ite	ne
 8019e9c:	2301      	movne	r3, #1
 8019e9e:	2300      	moveq	r3, #0
 8019ea0:	b2db      	uxtb	r3, r3
 8019ea2:	461a      	mov	r2, r3
 8019ea4:	f107 0318 	add.w	r3, r7, #24
 8019ea8:	4611      	mov	r1, r2
 8019eaa:	4618      	mov	r0, r3
 8019eac:	f7fd ff38 	bl	8017d20 <chk_lock>
 8019eb0:	4603      	mov	r3, r0
 8019eb2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8019eb6:	79fb      	ldrb	r3, [r7, #7]
 8019eb8:	f003 031c 	and.w	r3, r3, #28
 8019ebc:	2b00      	cmp	r3, #0
 8019ebe:	d07f      	beq.n	8019fc0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8019ec0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019ec4:	2b00      	cmp	r3, #0
 8019ec6:	d017      	beq.n	8019ef8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8019ec8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019ecc:	2b04      	cmp	r3, #4
 8019ece:	d10e      	bne.n	8019eee <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8019ed0:	f7fd ff82 	bl	8017dd8 <enq_lock>
 8019ed4:	4603      	mov	r3, r0
 8019ed6:	2b00      	cmp	r3, #0
 8019ed8:	d006      	beq.n	8019ee8 <f_open+0xc8>
 8019eda:	f107 0318 	add.w	r3, r7, #24
 8019ede:	4618      	mov	r0, r3
 8019ee0:	f7ff f8dc 	bl	801909c <dir_register>
 8019ee4:	4603      	mov	r3, r0
 8019ee6:	e000      	b.n	8019eea <f_open+0xca>
 8019ee8:	2312      	movs	r3, #18
 8019eea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8019eee:	79fb      	ldrb	r3, [r7, #7]
 8019ef0:	f043 0308 	orr.w	r3, r3, #8
 8019ef4:	71fb      	strb	r3, [r7, #7]
 8019ef6:	e010      	b.n	8019f1a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8019ef8:	7fbb      	ldrb	r3, [r7, #30]
 8019efa:	f003 0311 	and.w	r3, r3, #17
 8019efe:	2b00      	cmp	r3, #0
 8019f00:	d003      	beq.n	8019f0a <f_open+0xea>
					res = FR_DENIED;
 8019f02:	2307      	movs	r3, #7
 8019f04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8019f08:	e007      	b.n	8019f1a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8019f0a:	79fb      	ldrb	r3, [r7, #7]
 8019f0c:	f003 0304 	and.w	r3, r3, #4
 8019f10:	2b00      	cmp	r3, #0
 8019f12:	d002      	beq.n	8019f1a <f_open+0xfa>
 8019f14:	2308      	movs	r3, #8
 8019f16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8019f1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019f1e:	2b00      	cmp	r3, #0
 8019f20:	d168      	bne.n	8019ff4 <f_open+0x1d4>
 8019f22:	79fb      	ldrb	r3, [r7, #7]
 8019f24:	f003 0308 	and.w	r3, r3, #8
 8019f28:	2b00      	cmp	r3, #0
 8019f2a:	d063      	beq.n	8019ff4 <f_open+0x1d4>
				dw = GET_FATTIME();
 8019f2c:	f7fb fb70 	bl	8015610 <get_fattime>
 8019f30:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8019f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f34:	330e      	adds	r3, #14
 8019f36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8019f38:	4618      	mov	r0, r3
 8019f3a:	f7fd fe47 	bl	8017bcc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8019f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f40:	3316      	adds	r3, #22
 8019f42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8019f44:	4618      	mov	r0, r3
 8019f46:	f7fd fe41 	bl	8017bcc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8019f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f4c:	330b      	adds	r3, #11
 8019f4e:	2220      	movs	r2, #32
 8019f50:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8019f52:	697b      	ldr	r3, [r7, #20]
 8019f54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019f56:	4611      	mov	r1, r2
 8019f58:	4618      	mov	r0, r3
 8019f5a:	f7fe fe17 	bl	8018b8c <ld_clust>
 8019f5e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8019f60:	697b      	ldr	r3, [r7, #20]
 8019f62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019f64:	2200      	movs	r2, #0
 8019f66:	4618      	mov	r0, r3
 8019f68:	f7fe fe2f 	bl	8018bca <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8019f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f6e:	331c      	adds	r3, #28
 8019f70:	2100      	movs	r1, #0
 8019f72:	4618      	mov	r0, r3
 8019f74:	f7fd fe2a 	bl	8017bcc <st_dword>
					fs->wflag = 1;
 8019f78:	697b      	ldr	r3, [r7, #20]
 8019f7a:	2201      	movs	r2, #1
 8019f7c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8019f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019f80:	2b00      	cmp	r3, #0
 8019f82:	d037      	beq.n	8019ff4 <f_open+0x1d4>
						dw = fs->winsect;
 8019f84:	697b      	ldr	r3, [r7, #20]
 8019f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019f88:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8019f8a:	f107 0318 	add.w	r3, r7, #24
 8019f8e:	2200      	movs	r2, #0
 8019f90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8019f92:	4618      	mov	r0, r3
 8019f94:	f7fe fb1f 	bl	80185d6 <remove_chain>
 8019f98:	4603      	mov	r3, r0
 8019f9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8019f9e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019fa2:	2b00      	cmp	r3, #0
 8019fa4:	d126      	bne.n	8019ff4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8019fa6:	697b      	ldr	r3, [r7, #20]
 8019fa8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8019faa:	4618      	mov	r0, r3
 8019fac:	f7fe f868 	bl	8018080 <move_window>
 8019fb0:	4603      	mov	r3, r0
 8019fb2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8019fb6:	697b      	ldr	r3, [r7, #20]
 8019fb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019fba:	3a01      	subs	r2, #1
 8019fbc:	615a      	str	r2, [r3, #20]
 8019fbe:	e019      	b.n	8019ff4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8019fc0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019fc4:	2b00      	cmp	r3, #0
 8019fc6:	d115      	bne.n	8019ff4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8019fc8:	7fbb      	ldrb	r3, [r7, #30]
 8019fca:	f003 0310 	and.w	r3, r3, #16
 8019fce:	2b00      	cmp	r3, #0
 8019fd0:	d003      	beq.n	8019fda <f_open+0x1ba>
					res = FR_NO_FILE;
 8019fd2:	2304      	movs	r3, #4
 8019fd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8019fd8:	e00c      	b.n	8019ff4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8019fda:	79fb      	ldrb	r3, [r7, #7]
 8019fdc:	f003 0302 	and.w	r3, r3, #2
 8019fe0:	2b00      	cmp	r3, #0
 8019fe2:	d007      	beq.n	8019ff4 <f_open+0x1d4>
 8019fe4:	7fbb      	ldrb	r3, [r7, #30]
 8019fe6:	f003 0301 	and.w	r3, r3, #1
 8019fea:	2b00      	cmp	r3, #0
 8019fec:	d002      	beq.n	8019ff4 <f_open+0x1d4>
						res = FR_DENIED;
 8019fee:	2307      	movs	r3, #7
 8019ff0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8019ff4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019ff8:	2b00      	cmp	r3, #0
 8019ffa:	d128      	bne.n	801a04e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8019ffc:	79fb      	ldrb	r3, [r7, #7]
 8019ffe:	f003 0308 	and.w	r3, r3, #8
 801a002:	2b00      	cmp	r3, #0
 801a004:	d003      	beq.n	801a00e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801a006:	79fb      	ldrb	r3, [r7, #7]
 801a008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a00c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801a00e:	697b      	ldr	r3, [r7, #20]
 801a010:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801a012:	68fb      	ldr	r3, [r7, #12]
 801a014:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801a016:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a018:	68fb      	ldr	r3, [r7, #12]
 801a01a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801a01c:	79fb      	ldrb	r3, [r7, #7]
 801a01e:	f023 0301 	bic.w	r3, r3, #1
 801a022:	2b00      	cmp	r3, #0
 801a024:	bf14      	ite	ne
 801a026:	2301      	movne	r3, #1
 801a028:	2300      	moveq	r3, #0
 801a02a:	b2db      	uxtb	r3, r3
 801a02c:	461a      	mov	r2, r3
 801a02e:	f107 0318 	add.w	r3, r7, #24
 801a032:	4611      	mov	r1, r2
 801a034:	4618      	mov	r0, r3
 801a036:	f7fd fef1 	bl	8017e1c <inc_lock>
 801a03a:	4602      	mov	r2, r0
 801a03c:	68fb      	ldr	r3, [r7, #12]
 801a03e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801a040:	68fb      	ldr	r3, [r7, #12]
 801a042:	691b      	ldr	r3, [r3, #16]
 801a044:	2b00      	cmp	r3, #0
 801a046:	d102      	bne.n	801a04e <f_open+0x22e>
 801a048:	2302      	movs	r3, #2
 801a04a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801a04e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801a052:	2b00      	cmp	r3, #0
 801a054:	f040 80a3 	bne.w	801a19e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801a058:	697b      	ldr	r3, [r7, #20]
 801a05a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a05c:	4611      	mov	r1, r2
 801a05e:	4618      	mov	r0, r3
 801a060:	f7fe fd94 	bl	8018b8c <ld_clust>
 801a064:	4602      	mov	r2, r0
 801a066:	68fb      	ldr	r3, [r7, #12]
 801a068:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801a06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a06c:	331c      	adds	r3, #28
 801a06e:	4618      	mov	r0, r3
 801a070:	f7fd fd6e 	bl	8017b50 <ld_dword>
 801a074:	4602      	mov	r2, r0
 801a076:	68fb      	ldr	r3, [r7, #12]
 801a078:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801a07a:	68fb      	ldr	r3, [r7, #12]
 801a07c:	2200      	movs	r2, #0
 801a07e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801a080:	697a      	ldr	r2, [r7, #20]
 801a082:	68fb      	ldr	r3, [r7, #12]
 801a084:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801a086:	697b      	ldr	r3, [r7, #20]
 801a088:	88da      	ldrh	r2, [r3, #6]
 801a08a:	68fb      	ldr	r3, [r7, #12]
 801a08c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801a08e:	68fb      	ldr	r3, [r7, #12]
 801a090:	79fa      	ldrb	r2, [r7, #7]
 801a092:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801a094:	68fb      	ldr	r3, [r7, #12]
 801a096:	2200      	movs	r2, #0
 801a098:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801a09a:	68fb      	ldr	r3, [r7, #12]
 801a09c:	2200      	movs	r2, #0
 801a09e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801a0a0:	68fb      	ldr	r3, [r7, #12]
 801a0a2:	2200      	movs	r2, #0
 801a0a4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801a0a6:	68fb      	ldr	r3, [r7, #12]
 801a0a8:	3330      	adds	r3, #48	; 0x30
 801a0aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801a0ae:	2100      	movs	r1, #0
 801a0b0:	4618      	mov	r0, r3
 801a0b2:	f7fd fdd8 	bl	8017c66 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801a0b6:	79fb      	ldrb	r3, [r7, #7]
 801a0b8:	f003 0320 	and.w	r3, r3, #32
 801a0bc:	2b00      	cmp	r3, #0
 801a0be:	d06e      	beq.n	801a19e <f_open+0x37e>
 801a0c0:	68fb      	ldr	r3, [r7, #12]
 801a0c2:	68db      	ldr	r3, [r3, #12]
 801a0c4:	2b00      	cmp	r3, #0
 801a0c6:	d06a      	beq.n	801a19e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801a0c8:	68fb      	ldr	r3, [r7, #12]
 801a0ca:	68da      	ldr	r2, [r3, #12]
 801a0cc:	68fb      	ldr	r3, [r7, #12]
 801a0ce:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801a0d0:	697b      	ldr	r3, [r7, #20]
 801a0d2:	895b      	ldrh	r3, [r3, #10]
 801a0d4:	461a      	mov	r2, r3
 801a0d6:	697b      	ldr	r3, [r7, #20]
 801a0d8:	899b      	ldrh	r3, [r3, #12]
 801a0da:	fb02 f303 	mul.w	r3, r2, r3
 801a0de:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801a0e0:	68fb      	ldr	r3, [r7, #12]
 801a0e2:	689b      	ldr	r3, [r3, #8]
 801a0e4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801a0e6:	68fb      	ldr	r3, [r7, #12]
 801a0e8:	68db      	ldr	r3, [r3, #12]
 801a0ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 801a0ec:	e016      	b.n	801a11c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 801a0ee:	68fb      	ldr	r3, [r7, #12]
 801a0f0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801a0f2:	4618      	mov	r0, r3
 801a0f4:	f7fe f881 	bl	80181fa <get_fat>
 801a0f8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801a0fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a0fc:	2b01      	cmp	r3, #1
 801a0fe:	d802      	bhi.n	801a106 <f_open+0x2e6>
 801a100:	2302      	movs	r3, #2
 801a102:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801a106:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a108:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a10c:	d102      	bne.n	801a114 <f_open+0x2f4>
 801a10e:	2301      	movs	r3, #1
 801a110:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801a114:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801a116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a118:	1ad3      	subs	r3, r2, r3
 801a11a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801a11c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801a120:	2b00      	cmp	r3, #0
 801a122:	d103      	bne.n	801a12c <f_open+0x30c>
 801a124:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801a126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a128:	429a      	cmp	r2, r3
 801a12a:	d8e0      	bhi.n	801a0ee <f_open+0x2ce>
				}
				fp->clust = clst;
 801a12c:	68fb      	ldr	r3, [r7, #12]
 801a12e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801a130:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801a132:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801a136:	2b00      	cmp	r3, #0
 801a138:	d131      	bne.n	801a19e <f_open+0x37e>
 801a13a:	697b      	ldr	r3, [r7, #20]
 801a13c:	899b      	ldrh	r3, [r3, #12]
 801a13e:	461a      	mov	r2, r3
 801a140:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a142:	fbb3 f1f2 	udiv	r1, r3, r2
 801a146:	fb01 f202 	mul.w	r2, r1, r2
 801a14a:	1a9b      	subs	r3, r3, r2
 801a14c:	2b00      	cmp	r3, #0
 801a14e:	d026      	beq.n	801a19e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801a150:	697b      	ldr	r3, [r7, #20]
 801a152:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801a154:	4618      	mov	r0, r3
 801a156:	f7fe f831 	bl	80181bc <clust2sect>
 801a15a:	64f8      	str	r0, [r7, #76]	; 0x4c
 801a15c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a15e:	2b00      	cmp	r3, #0
 801a160:	d103      	bne.n	801a16a <f_open+0x34a>
						res = FR_INT_ERR;
 801a162:	2302      	movs	r3, #2
 801a164:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801a168:	e019      	b.n	801a19e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801a16a:	697b      	ldr	r3, [r7, #20]
 801a16c:	899b      	ldrh	r3, [r3, #12]
 801a16e:	461a      	mov	r2, r3
 801a170:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a172:	fbb3 f2f2 	udiv	r2, r3, r2
 801a176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a178:	441a      	add	r2, r3
 801a17a:	68fb      	ldr	r3, [r7, #12]
 801a17c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801a17e:	697b      	ldr	r3, [r7, #20]
 801a180:	7858      	ldrb	r0, [r3, #1]
 801a182:	68fb      	ldr	r3, [r7, #12]
 801a184:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801a188:	68fb      	ldr	r3, [r7, #12]
 801a18a:	6a1a      	ldr	r2, [r3, #32]
 801a18c:	2301      	movs	r3, #1
 801a18e:	f7fd fc69 	bl	8017a64 <disk_read>
 801a192:	4603      	mov	r3, r0
 801a194:	2b00      	cmp	r3, #0
 801a196:	d002      	beq.n	801a19e <f_open+0x37e>
 801a198:	2301      	movs	r3, #1
 801a19a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801a19e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801a1a2:	2b00      	cmp	r3, #0
 801a1a4:	d002      	beq.n	801a1ac <f_open+0x38c>
 801a1a6:	68fb      	ldr	r3, [r7, #12]
 801a1a8:	2200      	movs	r2, #0
 801a1aa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801a1ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 801a1b0:	4618      	mov	r0, r3
 801a1b2:	3768      	adds	r7, #104	; 0x68
 801a1b4:	46bd      	mov	sp, r7
 801a1b6:	bd80      	pop	{r7, pc}

0801a1b8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801a1b8:	b580      	push	{r7, lr}
 801a1ba:	b08c      	sub	sp, #48	; 0x30
 801a1bc:	af00      	add	r7, sp, #0
 801a1be:	60f8      	str	r0, [r7, #12]
 801a1c0:	60b9      	str	r1, [r7, #8]
 801a1c2:	607a      	str	r2, [r7, #4]
 801a1c4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801a1c6:	68bb      	ldr	r3, [r7, #8]
 801a1c8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801a1ca:	683b      	ldr	r3, [r7, #0]
 801a1cc:	2200      	movs	r2, #0
 801a1ce:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801a1d0:	68fb      	ldr	r3, [r7, #12]
 801a1d2:	f107 0210 	add.w	r2, r7, #16
 801a1d6:	4611      	mov	r1, r2
 801a1d8:	4618      	mov	r0, r3
 801a1da:	f7ff fda5 	bl	8019d28 <validate>
 801a1de:	4603      	mov	r3, r0
 801a1e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801a1e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a1e8:	2b00      	cmp	r3, #0
 801a1ea:	d107      	bne.n	801a1fc <f_write+0x44>
 801a1ec:	68fb      	ldr	r3, [r7, #12]
 801a1ee:	7d5b      	ldrb	r3, [r3, #21]
 801a1f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801a1f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a1f8:	2b00      	cmp	r3, #0
 801a1fa:	d002      	beq.n	801a202 <f_write+0x4a>
 801a1fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a200:	e16a      	b.n	801a4d8 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801a202:	68fb      	ldr	r3, [r7, #12]
 801a204:	7d1b      	ldrb	r3, [r3, #20]
 801a206:	f003 0302 	and.w	r3, r3, #2
 801a20a:	2b00      	cmp	r3, #0
 801a20c:	d101      	bne.n	801a212 <f_write+0x5a>
 801a20e:	2307      	movs	r3, #7
 801a210:	e162      	b.n	801a4d8 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801a212:	68fb      	ldr	r3, [r7, #12]
 801a214:	699a      	ldr	r2, [r3, #24]
 801a216:	687b      	ldr	r3, [r7, #4]
 801a218:	441a      	add	r2, r3
 801a21a:	68fb      	ldr	r3, [r7, #12]
 801a21c:	699b      	ldr	r3, [r3, #24]
 801a21e:	429a      	cmp	r2, r3
 801a220:	f080 814c 	bcs.w	801a4bc <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801a224:	68fb      	ldr	r3, [r7, #12]
 801a226:	699b      	ldr	r3, [r3, #24]
 801a228:	43db      	mvns	r3, r3
 801a22a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801a22c:	e146      	b.n	801a4bc <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801a22e:	68fb      	ldr	r3, [r7, #12]
 801a230:	699b      	ldr	r3, [r3, #24]
 801a232:	693a      	ldr	r2, [r7, #16]
 801a234:	8992      	ldrh	r2, [r2, #12]
 801a236:	fbb3 f1f2 	udiv	r1, r3, r2
 801a23a:	fb01 f202 	mul.w	r2, r1, r2
 801a23e:	1a9b      	subs	r3, r3, r2
 801a240:	2b00      	cmp	r3, #0
 801a242:	f040 80f1 	bne.w	801a428 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801a246:	68fb      	ldr	r3, [r7, #12]
 801a248:	699b      	ldr	r3, [r3, #24]
 801a24a:	693a      	ldr	r2, [r7, #16]
 801a24c:	8992      	ldrh	r2, [r2, #12]
 801a24e:	fbb3 f3f2 	udiv	r3, r3, r2
 801a252:	693a      	ldr	r2, [r7, #16]
 801a254:	8952      	ldrh	r2, [r2, #10]
 801a256:	3a01      	subs	r2, #1
 801a258:	4013      	ands	r3, r2
 801a25a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801a25c:	69bb      	ldr	r3, [r7, #24]
 801a25e:	2b00      	cmp	r3, #0
 801a260:	d143      	bne.n	801a2ea <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801a262:	68fb      	ldr	r3, [r7, #12]
 801a264:	699b      	ldr	r3, [r3, #24]
 801a266:	2b00      	cmp	r3, #0
 801a268:	d10c      	bne.n	801a284 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801a26a:	68fb      	ldr	r3, [r7, #12]
 801a26c:	689b      	ldr	r3, [r3, #8]
 801a26e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801a270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a272:	2b00      	cmp	r3, #0
 801a274:	d11a      	bne.n	801a2ac <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801a276:	68fb      	ldr	r3, [r7, #12]
 801a278:	2100      	movs	r1, #0
 801a27a:	4618      	mov	r0, r3
 801a27c:	f7fe fa10 	bl	80186a0 <create_chain>
 801a280:	62b8      	str	r0, [r7, #40]	; 0x28
 801a282:	e013      	b.n	801a2ac <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801a284:	68fb      	ldr	r3, [r7, #12]
 801a286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a288:	2b00      	cmp	r3, #0
 801a28a:	d007      	beq.n	801a29c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801a28c:	68fb      	ldr	r3, [r7, #12]
 801a28e:	699b      	ldr	r3, [r3, #24]
 801a290:	4619      	mov	r1, r3
 801a292:	68f8      	ldr	r0, [r7, #12]
 801a294:	f7fe fa9c 	bl	80187d0 <clmt_clust>
 801a298:	62b8      	str	r0, [r7, #40]	; 0x28
 801a29a:	e007      	b.n	801a2ac <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801a29c:	68fa      	ldr	r2, [r7, #12]
 801a29e:	68fb      	ldr	r3, [r7, #12]
 801a2a0:	69db      	ldr	r3, [r3, #28]
 801a2a2:	4619      	mov	r1, r3
 801a2a4:	4610      	mov	r0, r2
 801a2a6:	f7fe f9fb 	bl	80186a0 <create_chain>
 801a2aa:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801a2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2ae:	2b00      	cmp	r3, #0
 801a2b0:	f000 8109 	beq.w	801a4c6 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801a2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2b6:	2b01      	cmp	r3, #1
 801a2b8:	d104      	bne.n	801a2c4 <f_write+0x10c>
 801a2ba:	68fb      	ldr	r3, [r7, #12]
 801a2bc:	2202      	movs	r2, #2
 801a2be:	755a      	strb	r2, [r3, #21]
 801a2c0:	2302      	movs	r3, #2
 801a2c2:	e109      	b.n	801a4d8 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801a2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a2ca:	d104      	bne.n	801a2d6 <f_write+0x11e>
 801a2cc:	68fb      	ldr	r3, [r7, #12]
 801a2ce:	2201      	movs	r2, #1
 801a2d0:	755a      	strb	r2, [r3, #21]
 801a2d2:	2301      	movs	r3, #1
 801a2d4:	e100      	b.n	801a4d8 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801a2d6:	68fb      	ldr	r3, [r7, #12]
 801a2d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a2da:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801a2dc:	68fb      	ldr	r3, [r7, #12]
 801a2de:	689b      	ldr	r3, [r3, #8]
 801a2e0:	2b00      	cmp	r3, #0
 801a2e2:	d102      	bne.n	801a2ea <f_write+0x132>
 801a2e4:	68fb      	ldr	r3, [r7, #12]
 801a2e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a2e8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801a2ea:	68fb      	ldr	r3, [r7, #12]
 801a2ec:	7d1b      	ldrb	r3, [r3, #20]
 801a2ee:	b25b      	sxtb	r3, r3
 801a2f0:	2b00      	cmp	r3, #0
 801a2f2:	da18      	bge.n	801a326 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801a2f4:	693b      	ldr	r3, [r7, #16]
 801a2f6:	7858      	ldrb	r0, [r3, #1]
 801a2f8:	68fb      	ldr	r3, [r7, #12]
 801a2fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801a2fe:	68fb      	ldr	r3, [r7, #12]
 801a300:	6a1a      	ldr	r2, [r3, #32]
 801a302:	2301      	movs	r3, #1
 801a304:	f7fd fbce 	bl	8017aa4 <disk_write>
 801a308:	4603      	mov	r3, r0
 801a30a:	2b00      	cmp	r3, #0
 801a30c:	d004      	beq.n	801a318 <f_write+0x160>
 801a30e:	68fb      	ldr	r3, [r7, #12]
 801a310:	2201      	movs	r2, #1
 801a312:	755a      	strb	r2, [r3, #21]
 801a314:	2301      	movs	r3, #1
 801a316:	e0df      	b.n	801a4d8 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801a318:	68fb      	ldr	r3, [r7, #12]
 801a31a:	7d1b      	ldrb	r3, [r3, #20]
 801a31c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a320:	b2da      	uxtb	r2, r3
 801a322:	68fb      	ldr	r3, [r7, #12]
 801a324:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801a326:	693a      	ldr	r2, [r7, #16]
 801a328:	68fb      	ldr	r3, [r7, #12]
 801a32a:	69db      	ldr	r3, [r3, #28]
 801a32c:	4619      	mov	r1, r3
 801a32e:	4610      	mov	r0, r2
 801a330:	f7fd ff44 	bl	80181bc <clust2sect>
 801a334:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801a336:	697b      	ldr	r3, [r7, #20]
 801a338:	2b00      	cmp	r3, #0
 801a33a:	d104      	bne.n	801a346 <f_write+0x18e>
 801a33c:	68fb      	ldr	r3, [r7, #12]
 801a33e:	2202      	movs	r2, #2
 801a340:	755a      	strb	r2, [r3, #21]
 801a342:	2302      	movs	r3, #2
 801a344:	e0c8      	b.n	801a4d8 <f_write+0x320>
			sect += csect;
 801a346:	697a      	ldr	r2, [r7, #20]
 801a348:	69bb      	ldr	r3, [r7, #24]
 801a34a:	4413      	add	r3, r2
 801a34c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801a34e:	693b      	ldr	r3, [r7, #16]
 801a350:	899b      	ldrh	r3, [r3, #12]
 801a352:	461a      	mov	r2, r3
 801a354:	687b      	ldr	r3, [r7, #4]
 801a356:	fbb3 f3f2 	udiv	r3, r3, r2
 801a35a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801a35c:	6a3b      	ldr	r3, [r7, #32]
 801a35e:	2b00      	cmp	r3, #0
 801a360:	d043      	beq.n	801a3ea <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801a362:	69ba      	ldr	r2, [r7, #24]
 801a364:	6a3b      	ldr	r3, [r7, #32]
 801a366:	4413      	add	r3, r2
 801a368:	693a      	ldr	r2, [r7, #16]
 801a36a:	8952      	ldrh	r2, [r2, #10]
 801a36c:	4293      	cmp	r3, r2
 801a36e:	d905      	bls.n	801a37c <f_write+0x1c4>
					cc = fs->csize - csect;
 801a370:	693b      	ldr	r3, [r7, #16]
 801a372:	895b      	ldrh	r3, [r3, #10]
 801a374:	461a      	mov	r2, r3
 801a376:	69bb      	ldr	r3, [r7, #24]
 801a378:	1ad3      	subs	r3, r2, r3
 801a37a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801a37c:	693b      	ldr	r3, [r7, #16]
 801a37e:	7858      	ldrb	r0, [r3, #1]
 801a380:	6a3b      	ldr	r3, [r7, #32]
 801a382:	697a      	ldr	r2, [r7, #20]
 801a384:	69f9      	ldr	r1, [r7, #28]
 801a386:	f7fd fb8d 	bl	8017aa4 <disk_write>
 801a38a:	4603      	mov	r3, r0
 801a38c:	2b00      	cmp	r3, #0
 801a38e:	d004      	beq.n	801a39a <f_write+0x1e2>
 801a390:	68fb      	ldr	r3, [r7, #12]
 801a392:	2201      	movs	r2, #1
 801a394:	755a      	strb	r2, [r3, #21]
 801a396:	2301      	movs	r3, #1
 801a398:	e09e      	b.n	801a4d8 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801a39a:	68fb      	ldr	r3, [r7, #12]
 801a39c:	6a1a      	ldr	r2, [r3, #32]
 801a39e:	697b      	ldr	r3, [r7, #20]
 801a3a0:	1ad3      	subs	r3, r2, r3
 801a3a2:	6a3a      	ldr	r2, [r7, #32]
 801a3a4:	429a      	cmp	r2, r3
 801a3a6:	d918      	bls.n	801a3da <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801a3a8:	68fb      	ldr	r3, [r7, #12]
 801a3aa:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801a3ae:	68fb      	ldr	r3, [r7, #12]
 801a3b0:	6a1a      	ldr	r2, [r3, #32]
 801a3b2:	697b      	ldr	r3, [r7, #20]
 801a3b4:	1ad3      	subs	r3, r2, r3
 801a3b6:	693a      	ldr	r2, [r7, #16]
 801a3b8:	8992      	ldrh	r2, [r2, #12]
 801a3ba:	fb02 f303 	mul.w	r3, r2, r3
 801a3be:	69fa      	ldr	r2, [r7, #28]
 801a3c0:	18d1      	adds	r1, r2, r3
 801a3c2:	693b      	ldr	r3, [r7, #16]
 801a3c4:	899b      	ldrh	r3, [r3, #12]
 801a3c6:	461a      	mov	r2, r3
 801a3c8:	f7fd fc2c 	bl	8017c24 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801a3cc:	68fb      	ldr	r3, [r7, #12]
 801a3ce:	7d1b      	ldrb	r3, [r3, #20]
 801a3d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a3d4:	b2da      	uxtb	r2, r3
 801a3d6:	68fb      	ldr	r3, [r7, #12]
 801a3d8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801a3da:	693b      	ldr	r3, [r7, #16]
 801a3dc:	899b      	ldrh	r3, [r3, #12]
 801a3de:	461a      	mov	r2, r3
 801a3e0:	6a3b      	ldr	r3, [r7, #32]
 801a3e2:	fb02 f303 	mul.w	r3, r2, r3
 801a3e6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801a3e8:	e04b      	b.n	801a482 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801a3ea:	68fb      	ldr	r3, [r7, #12]
 801a3ec:	6a1b      	ldr	r3, [r3, #32]
 801a3ee:	697a      	ldr	r2, [r7, #20]
 801a3f0:	429a      	cmp	r2, r3
 801a3f2:	d016      	beq.n	801a422 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801a3f4:	68fb      	ldr	r3, [r7, #12]
 801a3f6:	699a      	ldr	r2, [r3, #24]
 801a3f8:	68fb      	ldr	r3, [r7, #12]
 801a3fa:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801a3fc:	429a      	cmp	r2, r3
 801a3fe:	d210      	bcs.n	801a422 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801a400:	693b      	ldr	r3, [r7, #16]
 801a402:	7858      	ldrb	r0, [r3, #1]
 801a404:	68fb      	ldr	r3, [r7, #12]
 801a406:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801a40a:	2301      	movs	r3, #1
 801a40c:	697a      	ldr	r2, [r7, #20]
 801a40e:	f7fd fb29 	bl	8017a64 <disk_read>
 801a412:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801a414:	2b00      	cmp	r3, #0
 801a416:	d004      	beq.n	801a422 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801a418:	68fb      	ldr	r3, [r7, #12]
 801a41a:	2201      	movs	r2, #1
 801a41c:	755a      	strb	r2, [r3, #21]
 801a41e:	2301      	movs	r3, #1
 801a420:	e05a      	b.n	801a4d8 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801a422:	68fb      	ldr	r3, [r7, #12]
 801a424:	697a      	ldr	r2, [r7, #20]
 801a426:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801a428:	693b      	ldr	r3, [r7, #16]
 801a42a:	899b      	ldrh	r3, [r3, #12]
 801a42c:	4618      	mov	r0, r3
 801a42e:	68fb      	ldr	r3, [r7, #12]
 801a430:	699b      	ldr	r3, [r3, #24]
 801a432:	693a      	ldr	r2, [r7, #16]
 801a434:	8992      	ldrh	r2, [r2, #12]
 801a436:	fbb3 f1f2 	udiv	r1, r3, r2
 801a43a:	fb01 f202 	mul.w	r2, r1, r2
 801a43e:	1a9b      	subs	r3, r3, r2
 801a440:	1ac3      	subs	r3, r0, r3
 801a442:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801a444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a446:	687b      	ldr	r3, [r7, #4]
 801a448:	429a      	cmp	r2, r3
 801a44a:	d901      	bls.n	801a450 <f_write+0x298>
 801a44c:	687b      	ldr	r3, [r7, #4]
 801a44e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801a450:	68fb      	ldr	r3, [r7, #12]
 801a452:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801a456:	68fb      	ldr	r3, [r7, #12]
 801a458:	699b      	ldr	r3, [r3, #24]
 801a45a:	693a      	ldr	r2, [r7, #16]
 801a45c:	8992      	ldrh	r2, [r2, #12]
 801a45e:	fbb3 f0f2 	udiv	r0, r3, r2
 801a462:	fb00 f202 	mul.w	r2, r0, r2
 801a466:	1a9b      	subs	r3, r3, r2
 801a468:	440b      	add	r3, r1
 801a46a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a46c:	69f9      	ldr	r1, [r7, #28]
 801a46e:	4618      	mov	r0, r3
 801a470:	f7fd fbd8 	bl	8017c24 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801a474:	68fb      	ldr	r3, [r7, #12]
 801a476:	7d1b      	ldrb	r3, [r3, #20]
 801a478:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801a47c:	b2da      	uxtb	r2, r3
 801a47e:	68fb      	ldr	r3, [r7, #12]
 801a480:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801a482:	69fa      	ldr	r2, [r7, #28]
 801a484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a486:	4413      	add	r3, r2
 801a488:	61fb      	str	r3, [r7, #28]
 801a48a:	68fb      	ldr	r3, [r7, #12]
 801a48c:	699a      	ldr	r2, [r3, #24]
 801a48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a490:	441a      	add	r2, r3
 801a492:	68fb      	ldr	r3, [r7, #12]
 801a494:	619a      	str	r2, [r3, #24]
 801a496:	68fb      	ldr	r3, [r7, #12]
 801a498:	68da      	ldr	r2, [r3, #12]
 801a49a:	68fb      	ldr	r3, [r7, #12]
 801a49c:	699b      	ldr	r3, [r3, #24]
 801a49e:	429a      	cmp	r2, r3
 801a4a0:	bf38      	it	cc
 801a4a2:	461a      	movcc	r2, r3
 801a4a4:	68fb      	ldr	r3, [r7, #12]
 801a4a6:	60da      	str	r2, [r3, #12]
 801a4a8:	683b      	ldr	r3, [r7, #0]
 801a4aa:	681a      	ldr	r2, [r3, #0]
 801a4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4ae:	441a      	add	r2, r3
 801a4b0:	683b      	ldr	r3, [r7, #0]
 801a4b2:	601a      	str	r2, [r3, #0]
 801a4b4:	687a      	ldr	r2, [r7, #4]
 801a4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4b8:	1ad3      	subs	r3, r2, r3
 801a4ba:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801a4bc:	687b      	ldr	r3, [r7, #4]
 801a4be:	2b00      	cmp	r3, #0
 801a4c0:	f47f aeb5 	bne.w	801a22e <f_write+0x76>
 801a4c4:	e000      	b.n	801a4c8 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801a4c6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801a4c8:	68fb      	ldr	r3, [r7, #12]
 801a4ca:	7d1b      	ldrb	r3, [r3, #20]
 801a4cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a4d0:	b2da      	uxtb	r2, r3
 801a4d2:	68fb      	ldr	r3, [r7, #12]
 801a4d4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801a4d6:	2300      	movs	r3, #0
}
 801a4d8:	4618      	mov	r0, r3
 801a4da:	3730      	adds	r7, #48	; 0x30
 801a4dc:	46bd      	mov	sp, r7
 801a4de:	bd80      	pop	{r7, pc}

0801a4e0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801a4e0:	b580      	push	{r7, lr}
 801a4e2:	b086      	sub	sp, #24
 801a4e4:	af00      	add	r7, sp, #0
 801a4e6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801a4e8:	687b      	ldr	r3, [r7, #4]
 801a4ea:	f107 0208 	add.w	r2, r7, #8
 801a4ee:	4611      	mov	r1, r2
 801a4f0:	4618      	mov	r0, r3
 801a4f2:	f7ff fc19 	bl	8019d28 <validate>
 801a4f6:	4603      	mov	r3, r0
 801a4f8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801a4fa:	7dfb      	ldrb	r3, [r7, #23]
 801a4fc:	2b00      	cmp	r3, #0
 801a4fe:	d168      	bne.n	801a5d2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801a500:	687b      	ldr	r3, [r7, #4]
 801a502:	7d1b      	ldrb	r3, [r3, #20]
 801a504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a508:	2b00      	cmp	r3, #0
 801a50a:	d062      	beq.n	801a5d2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801a50c:	687b      	ldr	r3, [r7, #4]
 801a50e:	7d1b      	ldrb	r3, [r3, #20]
 801a510:	b25b      	sxtb	r3, r3
 801a512:	2b00      	cmp	r3, #0
 801a514:	da15      	bge.n	801a542 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801a516:	68bb      	ldr	r3, [r7, #8]
 801a518:	7858      	ldrb	r0, [r3, #1]
 801a51a:	687b      	ldr	r3, [r7, #4]
 801a51c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801a520:	687b      	ldr	r3, [r7, #4]
 801a522:	6a1a      	ldr	r2, [r3, #32]
 801a524:	2301      	movs	r3, #1
 801a526:	f7fd fabd 	bl	8017aa4 <disk_write>
 801a52a:	4603      	mov	r3, r0
 801a52c:	2b00      	cmp	r3, #0
 801a52e:	d001      	beq.n	801a534 <f_sync+0x54>
 801a530:	2301      	movs	r3, #1
 801a532:	e04f      	b.n	801a5d4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801a534:	687b      	ldr	r3, [r7, #4]
 801a536:	7d1b      	ldrb	r3, [r3, #20]
 801a538:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a53c:	b2da      	uxtb	r2, r3
 801a53e:	687b      	ldr	r3, [r7, #4]
 801a540:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801a542:	f7fb f865 	bl	8015610 <get_fattime>
 801a546:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801a548:	68ba      	ldr	r2, [r7, #8]
 801a54a:	687b      	ldr	r3, [r7, #4]
 801a54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a54e:	4619      	mov	r1, r3
 801a550:	4610      	mov	r0, r2
 801a552:	f7fd fd95 	bl	8018080 <move_window>
 801a556:	4603      	mov	r3, r0
 801a558:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801a55a:	7dfb      	ldrb	r3, [r7, #23]
 801a55c:	2b00      	cmp	r3, #0
 801a55e:	d138      	bne.n	801a5d2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801a560:	687b      	ldr	r3, [r7, #4]
 801a562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a564:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801a566:	68fb      	ldr	r3, [r7, #12]
 801a568:	330b      	adds	r3, #11
 801a56a:	781a      	ldrb	r2, [r3, #0]
 801a56c:	68fb      	ldr	r3, [r7, #12]
 801a56e:	330b      	adds	r3, #11
 801a570:	f042 0220 	orr.w	r2, r2, #32
 801a574:	b2d2      	uxtb	r2, r2
 801a576:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801a578:	687b      	ldr	r3, [r7, #4]
 801a57a:	6818      	ldr	r0, [r3, #0]
 801a57c:	687b      	ldr	r3, [r7, #4]
 801a57e:	689b      	ldr	r3, [r3, #8]
 801a580:	461a      	mov	r2, r3
 801a582:	68f9      	ldr	r1, [r7, #12]
 801a584:	f7fe fb21 	bl	8018bca <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801a588:	68fb      	ldr	r3, [r7, #12]
 801a58a:	f103 021c 	add.w	r2, r3, #28
 801a58e:	687b      	ldr	r3, [r7, #4]
 801a590:	68db      	ldr	r3, [r3, #12]
 801a592:	4619      	mov	r1, r3
 801a594:	4610      	mov	r0, r2
 801a596:	f7fd fb19 	bl	8017bcc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801a59a:	68fb      	ldr	r3, [r7, #12]
 801a59c:	3316      	adds	r3, #22
 801a59e:	6939      	ldr	r1, [r7, #16]
 801a5a0:	4618      	mov	r0, r3
 801a5a2:	f7fd fb13 	bl	8017bcc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801a5a6:	68fb      	ldr	r3, [r7, #12]
 801a5a8:	3312      	adds	r3, #18
 801a5aa:	2100      	movs	r1, #0
 801a5ac:	4618      	mov	r0, r3
 801a5ae:	f7fd faf2 	bl	8017b96 <st_word>
					fs->wflag = 1;
 801a5b2:	68bb      	ldr	r3, [r7, #8]
 801a5b4:	2201      	movs	r2, #1
 801a5b6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801a5b8:	68bb      	ldr	r3, [r7, #8]
 801a5ba:	4618      	mov	r0, r3
 801a5bc:	f7fd fd8e 	bl	80180dc <sync_fs>
 801a5c0:	4603      	mov	r3, r0
 801a5c2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801a5c4:	687b      	ldr	r3, [r7, #4]
 801a5c6:	7d1b      	ldrb	r3, [r3, #20]
 801a5c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801a5cc:	b2da      	uxtb	r2, r3
 801a5ce:	687b      	ldr	r3, [r7, #4]
 801a5d0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801a5d2:	7dfb      	ldrb	r3, [r7, #23]
}
 801a5d4:	4618      	mov	r0, r3
 801a5d6:	3718      	adds	r7, #24
 801a5d8:	46bd      	mov	sp, r7
 801a5da:	bd80      	pop	{r7, pc}

0801a5dc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801a5dc:	b580      	push	{r7, lr}
 801a5de:	b084      	sub	sp, #16
 801a5e0:	af00      	add	r7, sp, #0
 801a5e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801a5e4:	6878      	ldr	r0, [r7, #4]
 801a5e6:	f7ff ff7b 	bl	801a4e0 <f_sync>
 801a5ea:	4603      	mov	r3, r0
 801a5ec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801a5ee:	7bfb      	ldrb	r3, [r7, #15]
 801a5f0:	2b00      	cmp	r3, #0
 801a5f2:	d118      	bne.n	801a626 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	f107 0208 	add.w	r2, r7, #8
 801a5fa:	4611      	mov	r1, r2
 801a5fc:	4618      	mov	r0, r3
 801a5fe:	f7ff fb93 	bl	8019d28 <validate>
 801a602:	4603      	mov	r3, r0
 801a604:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801a606:	7bfb      	ldrb	r3, [r7, #15]
 801a608:	2b00      	cmp	r3, #0
 801a60a:	d10c      	bne.n	801a626 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801a60c:	687b      	ldr	r3, [r7, #4]
 801a60e:	691b      	ldr	r3, [r3, #16]
 801a610:	4618      	mov	r0, r3
 801a612:	f7fd fc91 	bl	8017f38 <dec_lock>
 801a616:	4603      	mov	r3, r0
 801a618:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801a61a:	7bfb      	ldrb	r3, [r7, #15]
 801a61c:	2b00      	cmp	r3, #0
 801a61e:	d102      	bne.n	801a626 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801a620:	687b      	ldr	r3, [r7, #4]
 801a622:	2200      	movs	r2, #0
 801a624:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801a626:	7bfb      	ldrb	r3, [r7, #15]
}
 801a628:	4618      	mov	r0, r3
 801a62a:	3710      	adds	r7, #16
 801a62c:	46bd      	mov	sp, r7
 801a62e:	bd80      	pop	{r7, pc}

0801a630 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 801a630:	b580      	push	{r7, lr}
 801a632:	b084      	sub	sp, #16
 801a634:	af00      	add	r7, sp, #0
 801a636:	6078      	str	r0, [r7, #4]
 801a638:	460b      	mov	r3, r1
 801a63a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 801a63c:	78fb      	ldrb	r3, [r7, #3]
 801a63e:	2b0a      	cmp	r3, #10
 801a640:	d103      	bne.n	801a64a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 801a642:	210d      	movs	r1, #13
 801a644:	6878      	ldr	r0, [r7, #4]
 801a646:	f7ff fff3 	bl	801a630 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 801a64a:	687b      	ldr	r3, [r7, #4]
 801a64c:	685b      	ldr	r3, [r3, #4]
 801a64e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 801a650:	68fb      	ldr	r3, [r7, #12]
 801a652:	2b00      	cmp	r3, #0
 801a654:	db25      	blt.n	801a6a2 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 801a656:	68fb      	ldr	r3, [r7, #12]
 801a658:	1c5a      	adds	r2, r3, #1
 801a65a:	60fa      	str	r2, [r7, #12]
 801a65c:	687a      	ldr	r2, [r7, #4]
 801a65e:	4413      	add	r3, r2
 801a660:	78fa      	ldrb	r2, [r7, #3]
 801a662:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801a664:	68fb      	ldr	r3, [r7, #12]
 801a666:	2b3c      	cmp	r3, #60	; 0x3c
 801a668:	dd12      	ble.n	801a690 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801a66a:	687b      	ldr	r3, [r7, #4]
 801a66c:	6818      	ldr	r0, [r3, #0]
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	f103 010c 	add.w	r1, r3, #12
 801a674:	68fa      	ldr	r2, [r7, #12]
 801a676:	f107 0308 	add.w	r3, r7, #8
 801a67a:	f7ff fd9d 	bl	801a1b8 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801a67e:	68ba      	ldr	r2, [r7, #8]
 801a680:	68fb      	ldr	r3, [r7, #12]
 801a682:	429a      	cmp	r2, r3
 801a684:	d101      	bne.n	801a68a <putc_bfd+0x5a>
 801a686:	2300      	movs	r3, #0
 801a688:	e001      	b.n	801a68e <putc_bfd+0x5e>
 801a68a:	f04f 33ff 	mov.w	r3, #4294967295
 801a68e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 801a690:	687b      	ldr	r3, [r7, #4]
 801a692:	68fa      	ldr	r2, [r7, #12]
 801a694:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 801a696:	687b      	ldr	r3, [r7, #4]
 801a698:	689b      	ldr	r3, [r3, #8]
 801a69a:	1c5a      	adds	r2, r3, #1
 801a69c:	687b      	ldr	r3, [r7, #4]
 801a69e:	609a      	str	r2, [r3, #8]
 801a6a0:	e000      	b.n	801a6a4 <putc_bfd+0x74>
	if (i < 0) return;
 801a6a2:	bf00      	nop
}
 801a6a4:	3710      	adds	r7, #16
 801a6a6:	46bd      	mov	sp, r7
 801a6a8:	bd80      	pop	{r7, pc}

0801a6aa <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 801a6aa:	b580      	push	{r7, lr}
 801a6ac:	b084      	sub	sp, #16
 801a6ae:	af00      	add	r7, sp, #0
 801a6b0:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 801a6b2:	687b      	ldr	r3, [r7, #4]
 801a6b4:	685b      	ldr	r3, [r3, #4]
 801a6b6:	2b00      	cmp	r3, #0
 801a6b8:	db16      	blt.n	801a6e8 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 801a6ba:	687b      	ldr	r3, [r7, #4]
 801a6bc:	6818      	ldr	r0, [r3, #0]
 801a6be:	687b      	ldr	r3, [r7, #4]
 801a6c0:	f103 010c 	add.w	r1, r3, #12
 801a6c4:	687b      	ldr	r3, [r7, #4]
 801a6c6:	685b      	ldr	r3, [r3, #4]
 801a6c8:	461a      	mov	r2, r3
 801a6ca:	f107 030c 	add.w	r3, r7, #12
 801a6ce:	f7ff fd73 	bl	801a1b8 <f_write>
 801a6d2:	4603      	mov	r3, r0
 801a6d4:	2b00      	cmp	r3, #0
 801a6d6:	d107      	bne.n	801a6e8 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 801a6d8:	687b      	ldr	r3, [r7, #4]
 801a6da:	685b      	ldr	r3, [r3, #4]
 801a6dc:	68fa      	ldr	r2, [r7, #12]
 801a6de:	4293      	cmp	r3, r2
 801a6e0:	d102      	bne.n	801a6e8 <putc_flush+0x3e>
 801a6e2:	687b      	ldr	r3, [r7, #4]
 801a6e4:	689b      	ldr	r3, [r3, #8]
 801a6e6:	e001      	b.n	801a6ec <putc_flush+0x42>
	return EOF;
 801a6e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a6ec:	4618      	mov	r0, r3
 801a6ee:	3710      	adds	r7, #16
 801a6f0:	46bd      	mov	sp, r7
 801a6f2:	bd80      	pop	{r7, pc}

0801a6f4 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 801a6f4:	b480      	push	{r7}
 801a6f6:	b083      	sub	sp, #12
 801a6f8:	af00      	add	r7, sp, #0
 801a6fa:	6078      	str	r0, [r7, #4]
 801a6fc:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 801a6fe:	687b      	ldr	r3, [r7, #4]
 801a700:	683a      	ldr	r2, [r7, #0]
 801a702:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	2200      	movs	r2, #0
 801a708:	605a      	str	r2, [r3, #4]
 801a70a:	687b      	ldr	r3, [r7, #4]
 801a70c:	685a      	ldr	r2, [r3, #4]
 801a70e:	687b      	ldr	r3, [r7, #4]
 801a710:	609a      	str	r2, [r3, #8]
}
 801a712:	bf00      	nop
 801a714:	370c      	adds	r7, #12
 801a716:	46bd      	mov	sp, r7
 801a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a71c:	4770      	bx	lr

0801a71e <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 801a71e:	b580      	push	{r7, lr}
 801a720:	b096      	sub	sp, #88	; 0x58
 801a722:	af00      	add	r7, sp, #0
 801a724:	6078      	str	r0, [r7, #4]
 801a726:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 801a728:	f107 030c 	add.w	r3, r7, #12
 801a72c:	6839      	ldr	r1, [r7, #0]
 801a72e:	4618      	mov	r0, r3
 801a730:	f7ff ffe0 	bl	801a6f4 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 801a734:	e009      	b.n	801a74a <f_puts+0x2c>
 801a736:	687b      	ldr	r3, [r7, #4]
 801a738:	1c5a      	adds	r2, r3, #1
 801a73a:	607a      	str	r2, [r7, #4]
 801a73c:	781a      	ldrb	r2, [r3, #0]
 801a73e:	f107 030c 	add.w	r3, r7, #12
 801a742:	4611      	mov	r1, r2
 801a744:	4618      	mov	r0, r3
 801a746:	f7ff ff73 	bl	801a630 <putc_bfd>
 801a74a:	687b      	ldr	r3, [r7, #4]
 801a74c:	781b      	ldrb	r3, [r3, #0]
 801a74e:	2b00      	cmp	r3, #0
 801a750:	d1f1      	bne.n	801a736 <f_puts+0x18>
	return putc_flush(&pb);
 801a752:	f107 030c 	add.w	r3, r7, #12
 801a756:	4618      	mov	r0, r3
 801a758:	f7ff ffa7 	bl	801a6aa <putc_flush>
 801a75c:	4603      	mov	r3, r0
}
 801a75e:	4618      	mov	r0, r3
 801a760:	3758      	adds	r7, #88	; 0x58
 801a762:	46bd      	mov	sp, r7
 801a764:	bd80      	pop	{r7, pc}
	...

0801a768 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801a768:	b480      	push	{r7}
 801a76a:	b087      	sub	sp, #28
 801a76c:	af00      	add	r7, sp, #0
 801a76e:	60f8      	str	r0, [r7, #12]
 801a770:	60b9      	str	r1, [r7, #8]
 801a772:	4613      	mov	r3, r2
 801a774:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801a776:	2301      	movs	r3, #1
 801a778:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801a77a:	2300      	movs	r3, #0
 801a77c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801a77e:	4b1f      	ldr	r3, [pc, #124]	; (801a7fc <FATFS_LinkDriverEx+0x94>)
 801a780:	7a5b      	ldrb	r3, [r3, #9]
 801a782:	b2db      	uxtb	r3, r3
 801a784:	2b00      	cmp	r3, #0
 801a786:	d131      	bne.n	801a7ec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801a788:	4b1c      	ldr	r3, [pc, #112]	; (801a7fc <FATFS_LinkDriverEx+0x94>)
 801a78a:	7a5b      	ldrb	r3, [r3, #9]
 801a78c:	b2db      	uxtb	r3, r3
 801a78e:	461a      	mov	r2, r3
 801a790:	4b1a      	ldr	r3, [pc, #104]	; (801a7fc <FATFS_LinkDriverEx+0x94>)
 801a792:	2100      	movs	r1, #0
 801a794:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801a796:	4b19      	ldr	r3, [pc, #100]	; (801a7fc <FATFS_LinkDriverEx+0x94>)
 801a798:	7a5b      	ldrb	r3, [r3, #9]
 801a79a:	b2db      	uxtb	r3, r3
 801a79c:	4a17      	ldr	r2, [pc, #92]	; (801a7fc <FATFS_LinkDriverEx+0x94>)
 801a79e:	009b      	lsls	r3, r3, #2
 801a7a0:	4413      	add	r3, r2
 801a7a2:	68fa      	ldr	r2, [r7, #12]
 801a7a4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801a7a6:	4b15      	ldr	r3, [pc, #84]	; (801a7fc <FATFS_LinkDriverEx+0x94>)
 801a7a8:	7a5b      	ldrb	r3, [r3, #9]
 801a7aa:	b2db      	uxtb	r3, r3
 801a7ac:	461a      	mov	r2, r3
 801a7ae:	4b13      	ldr	r3, [pc, #76]	; (801a7fc <FATFS_LinkDriverEx+0x94>)
 801a7b0:	4413      	add	r3, r2
 801a7b2:	79fa      	ldrb	r2, [r7, #7]
 801a7b4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801a7b6:	4b11      	ldr	r3, [pc, #68]	; (801a7fc <FATFS_LinkDriverEx+0x94>)
 801a7b8:	7a5b      	ldrb	r3, [r3, #9]
 801a7ba:	b2db      	uxtb	r3, r3
 801a7bc:	1c5a      	adds	r2, r3, #1
 801a7be:	b2d1      	uxtb	r1, r2
 801a7c0:	4a0e      	ldr	r2, [pc, #56]	; (801a7fc <FATFS_LinkDriverEx+0x94>)
 801a7c2:	7251      	strb	r1, [r2, #9]
 801a7c4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801a7c6:	7dbb      	ldrb	r3, [r7, #22]
 801a7c8:	3330      	adds	r3, #48	; 0x30
 801a7ca:	b2da      	uxtb	r2, r3
 801a7cc:	68bb      	ldr	r3, [r7, #8]
 801a7ce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801a7d0:	68bb      	ldr	r3, [r7, #8]
 801a7d2:	3301      	adds	r3, #1
 801a7d4:	223a      	movs	r2, #58	; 0x3a
 801a7d6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801a7d8:	68bb      	ldr	r3, [r7, #8]
 801a7da:	3302      	adds	r3, #2
 801a7dc:	222f      	movs	r2, #47	; 0x2f
 801a7de:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801a7e0:	68bb      	ldr	r3, [r7, #8]
 801a7e2:	3303      	adds	r3, #3
 801a7e4:	2200      	movs	r2, #0
 801a7e6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801a7e8:	2300      	movs	r3, #0
 801a7ea:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801a7ec:	7dfb      	ldrb	r3, [r7, #23]
}
 801a7ee:	4618      	mov	r0, r3
 801a7f0:	371c      	adds	r7, #28
 801a7f2:	46bd      	mov	sp, r7
 801a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7f8:	4770      	bx	lr
 801a7fa:	bf00      	nop
 801a7fc:	240018e4 	.word	0x240018e4

0801a800 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801a800:	b580      	push	{r7, lr}
 801a802:	b082      	sub	sp, #8
 801a804:	af00      	add	r7, sp, #0
 801a806:	6078      	str	r0, [r7, #4]
 801a808:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801a80a:	2200      	movs	r2, #0
 801a80c:	6839      	ldr	r1, [r7, #0]
 801a80e:	6878      	ldr	r0, [r7, #4]
 801a810:	f7ff ffaa 	bl	801a768 <FATFS_LinkDriverEx>
 801a814:	4603      	mov	r3, r0
}
 801a816:	4618      	mov	r0, r3
 801a818:	3708      	adds	r7, #8
 801a81a:	46bd      	mov	sp, r7
 801a81c:	bd80      	pop	{r7, pc}
	...

0801a820 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801a820:	b480      	push	{r7}
 801a822:	b085      	sub	sp, #20
 801a824:	af00      	add	r7, sp, #0
 801a826:	4603      	mov	r3, r0
 801a828:	6039      	str	r1, [r7, #0]
 801a82a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801a82c:	88fb      	ldrh	r3, [r7, #6]
 801a82e:	2b7f      	cmp	r3, #127	; 0x7f
 801a830:	d802      	bhi.n	801a838 <ff_convert+0x18>
		c = chr;
 801a832:	88fb      	ldrh	r3, [r7, #6]
 801a834:	81fb      	strh	r3, [r7, #14]
 801a836:	e025      	b.n	801a884 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801a838:	683b      	ldr	r3, [r7, #0]
 801a83a:	2b00      	cmp	r3, #0
 801a83c:	d00b      	beq.n	801a856 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801a83e:	88fb      	ldrh	r3, [r7, #6]
 801a840:	2bff      	cmp	r3, #255	; 0xff
 801a842:	d805      	bhi.n	801a850 <ff_convert+0x30>
 801a844:	88fb      	ldrh	r3, [r7, #6]
 801a846:	3b80      	subs	r3, #128	; 0x80
 801a848:	4a12      	ldr	r2, [pc, #72]	; (801a894 <ff_convert+0x74>)
 801a84a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a84e:	e000      	b.n	801a852 <ff_convert+0x32>
 801a850:	2300      	movs	r3, #0
 801a852:	81fb      	strh	r3, [r7, #14]
 801a854:	e016      	b.n	801a884 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801a856:	2300      	movs	r3, #0
 801a858:	81fb      	strh	r3, [r7, #14]
 801a85a:	e009      	b.n	801a870 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801a85c:	89fb      	ldrh	r3, [r7, #14]
 801a85e:	4a0d      	ldr	r2, [pc, #52]	; (801a894 <ff_convert+0x74>)
 801a860:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a864:	88fa      	ldrh	r2, [r7, #6]
 801a866:	429a      	cmp	r2, r3
 801a868:	d006      	beq.n	801a878 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801a86a:	89fb      	ldrh	r3, [r7, #14]
 801a86c:	3301      	adds	r3, #1
 801a86e:	81fb      	strh	r3, [r7, #14]
 801a870:	89fb      	ldrh	r3, [r7, #14]
 801a872:	2b7f      	cmp	r3, #127	; 0x7f
 801a874:	d9f2      	bls.n	801a85c <ff_convert+0x3c>
 801a876:	e000      	b.n	801a87a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801a878:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801a87a:	89fb      	ldrh	r3, [r7, #14]
 801a87c:	3380      	adds	r3, #128	; 0x80
 801a87e:	b29b      	uxth	r3, r3
 801a880:	b2db      	uxtb	r3, r3
 801a882:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801a884:	89fb      	ldrh	r3, [r7, #14]
}
 801a886:	4618      	mov	r0, r3
 801a888:	3714      	adds	r7, #20
 801a88a:	46bd      	mov	sp, r7
 801a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a890:	4770      	bx	lr
 801a892:	bf00      	nop
 801a894:	080205d8 	.word	0x080205d8

0801a898 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801a898:	b480      	push	{r7}
 801a89a:	b087      	sub	sp, #28
 801a89c:	af00      	add	r7, sp, #0
 801a89e:	4603      	mov	r3, r0
 801a8a0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801a8a2:	88fb      	ldrh	r3, [r7, #6]
 801a8a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a8a8:	d201      	bcs.n	801a8ae <ff_wtoupper+0x16>
 801a8aa:	4b3e      	ldr	r3, [pc, #248]	; (801a9a4 <ff_wtoupper+0x10c>)
 801a8ac:	e000      	b.n	801a8b0 <ff_wtoupper+0x18>
 801a8ae:	4b3e      	ldr	r3, [pc, #248]	; (801a9a8 <ff_wtoupper+0x110>)
 801a8b0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801a8b2:	697b      	ldr	r3, [r7, #20]
 801a8b4:	1c9a      	adds	r2, r3, #2
 801a8b6:	617a      	str	r2, [r7, #20]
 801a8b8:	881b      	ldrh	r3, [r3, #0]
 801a8ba:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801a8bc:	8a7b      	ldrh	r3, [r7, #18]
 801a8be:	2b00      	cmp	r3, #0
 801a8c0:	d068      	beq.n	801a994 <ff_wtoupper+0xfc>
 801a8c2:	88fa      	ldrh	r2, [r7, #6]
 801a8c4:	8a7b      	ldrh	r3, [r7, #18]
 801a8c6:	429a      	cmp	r2, r3
 801a8c8:	d364      	bcc.n	801a994 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801a8ca:	697b      	ldr	r3, [r7, #20]
 801a8cc:	1c9a      	adds	r2, r3, #2
 801a8ce:	617a      	str	r2, [r7, #20]
 801a8d0:	881b      	ldrh	r3, [r3, #0]
 801a8d2:	823b      	strh	r3, [r7, #16]
 801a8d4:	8a3b      	ldrh	r3, [r7, #16]
 801a8d6:	0a1b      	lsrs	r3, r3, #8
 801a8d8:	81fb      	strh	r3, [r7, #14]
 801a8da:	8a3b      	ldrh	r3, [r7, #16]
 801a8dc:	b2db      	uxtb	r3, r3
 801a8de:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801a8e0:	88fa      	ldrh	r2, [r7, #6]
 801a8e2:	8a79      	ldrh	r1, [r7, #18]
 801a8e4:	8a3b      	ldrh	r3, [r7, #16]
 801a8e6:	440b      	add	r3, r1
 801a8e8:	429a      	cmp	r2, r3
 801a8ea:	da49      	bge.n	801a980 <ff_wtoupper+0xe8>
			switch (cmd) {
 801a8ec:	89fb      	ldrh	r3, [r7, #14]
 801a8ee:	2b08      	cmp	r3, #8
 801a8f0:	d84f      	bhi.n	801a992 <ff_wtoupper+0xfa>
 801a8f2:	a201      	add	r2, pc, #4	; (adr r2, 801a8f8 <ff_wtoupper+0x60>)
 801a8f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a8f8:	0801a91d 	.word	0x0801a91d
 801a8fc:	0801a92f 	.word	0x0801a92f
 801a900:	0801a945 	.word	0x0801a945
 801a904:	0801a94d 	.word	0x0801a94d
 801a908:	0801a955 	.word	0x0801a955
 801a90c:	0801a95d 	.word	0x0801a95d
 801a910:	0801a965 	.word	0x0801a965
 801a914:	0801a96d 	.word	0x0801a96d
 801a918:	0801a975 	.word	0x0801a975
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801a91c:	88fa      	ldrh	r2, [r7, #6]
 801a91e:	8a7b      	ldrh	r3, [r7, #18]
 801a920:	1ad3      	subs	r3, r2, r3
 801a922:	005b      	lsls	r3, r3, #1
 801a924:	697a      	ldr	r2, [r7, #20]
 801a926:	4413      	add	r3, r2
 801a928:	881b      	ldrh	r3, [r3, #0]
 801a92a:	80fb      	strh	r3, [r7, #6]
 801a92c:	e027      	b.n	801a97e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801a92e:	88fa      	ldrh	r2, [r7, #6]
 801a930:	8a7b      	ldrh	r3, [r7, #18]
 801a932:	1ad3      	subs	r3, r2, r3
 801a934:	b29b      	uxth	r3, r3
 801a936:	f003 0301 	and.w	r3, r3, #1
 801a93a:	b29b      	uxth	r3, r3
 801a93c:	88fa      	ldrh	r2, [r7, #6]
 801a93e:	1ad3      	subs	r3, r2, r3
 801a940:	80fb      	strh	r3, [r7, #6]
 801a942:	e01c      	b.n	801a97e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801a944:	88fb      	ldrh	r3, [r7, #6]
 801a946:	3b10      	subs	r3, #16
 801a948:	80fb      	strh	r3, [r7, #6]
 801a94a:	e018      	b.n	801a97e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801a94c:	88fb      	ldrh	r3, [r7, #6]
 801a94e:	3b20      	subs	r3, #32
 801a950:	80fb      	strh	r3, [r7, #6]
 801a952:	e014      	b.n	801a97e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801a954:	88fb      	ldrh	r3, [r7, #6]
 801a956:	3b30      	subs	r3, #48	; 0x30
 801a958:	80fb      	strh	r3, [r7, #6]
 801a95a:	e010      	b.n	801a97e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801a95c:	88fb      	ldrh	r3, [r7, #6]
 801a95e:	3b1a      	subs	r3, #26
 801a960:	80fb      	strh	r3, [r7, #6]
 801a962:	e00c      	b.n	801a97e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801a964:	88fb      	ldrh	r3, [r7, #6]
 801a966:	3308      	adds	r3, #8
 801a968:	80fb      	strh	r3, [r7, #6]
 801a96a:	e008      	b.n	801a97e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801a96c:	88fb      	ldrh	r3, [r7, #6]
 801a96e:	3b50      	subs	r3, #80	; 0x50
 801a970:	80fb      	strh	r3, [r7, #6]
 801a972:	e004      	b.n	801a97e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801a974:	88fb      	ldrh	r3, [r7, #6]
 801a976:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801a97a:	80fb      	strh	r3, [r7, #6]
 801a97c:	bf00      	nop
			}
			break;
 801a97e:	e008      	b.n	801a992 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801a980:	89fb      	ldrh	r3, [r7, #14]
 801a982:	2b00      	cmp	r3, #0
 801a984:	d195      	bne.n	801a8b2 <ff_wtoupper+0x1a>
 801a986:	8a3b      	ldrh	r3, [r7, #16]
 801a988:	005b      	lsls	r3, r3, #1
 801a98a:	697a      	ldr	r2, [r7, #20]
 801a98c:	4413      	add	r3, r2
 801a98e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801a990:	e78f      	b.n	801a8b2 <ff_wtoupper+0x1a>
			break;
 801a992:	bf00      	nop
	}

	return chr;
 801a994:	88fb      	ldrh	r3, [r7, #6]
}
 801a996:	4618      	mov	r0, r3
 801a998:	371c      	adds	r7, #28
 801a99a:	46bd      	mov	sp, r7
 801a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9a0:	4770      	bx	lr
 801a9a2:	bf00      	nop
 801a9a4:	080206d8 	.word	0x080206d8
 801a9a8:	080208cc 	.word	0x080208cc

0801a9ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801a9ac:	b580      	push	{r7, lr}
 801a9ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 801a9b0:	2201      	movs	r2, #1
 801a9b2:	4913      	ldr	r1, [pc, #76]	; (801aa00 <MX_USB_DEVICE_Init+0x54>)
 801a9b4:	4813      	ldr	r0, [pc, #76]	; (801aa04 <MX_USB_DEVICE_Init+0x58>)
 801a9b6:	f7fb fd1d 	bl	80163f4 <USBD_Init>
 801a9ba:	4603      	mov	r3, r0
 801a9bc:	2b00      	cmp	r3, #0
 801a9be:	d001      	beq.n	801a9c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801a9c0:	f7e8 fb36 	bl	8003030 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 801a9c4:	4910      	ldr	r1, [pc, #64]	; (801aa08 <MX_USB_DEVICE_Init+0x5c>)
 801a9c6:	480f      	ldr	r0, [pc, #60]	; (801aa04 <MX_USB_DEVICE_Init+0x58>)
 801a9c8:	f7fb fd44 	bl	8016454 <USBD_RegisterClass>
 801a9cc:	4603      	mov	r3, r0
 801a9ce:	2b00      	cmp	r3, #0
 801a9d0:	d001      	beq.n	801a9d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801a9d2:	f7e8 fb2d 	bl	8003030 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 801a9d6:	490d      	ldr	r1, [pc, #52]	; (801aa0c <MX_USB_DEVICE_Init+0x60>)
 801a9d8:	480a      	ldr	r0, [pc, #40]	; (801aa04 <MX_USB_DEVICE_Init+0x58>)
 801a9da:	f7fb fc3b 	bl	8016254 <USBD_CDC_RegisterInterface>
 801a9de:	4603      	mov	r3, r0
 801a9e0:	2b00      	cmp	r3, #0
 801a9e2:	d001      	beq.n	801a9e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801a9e4:	f7e8 fb24 	bl	8003030 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 801a9e8:	4806      	ldr	r0, [pc, #24]	; (801aa04 <MX_USB_DEVICE_Init+0x58>)
 801a9ea:	f7fb fd69 	bl	80164c0 <USBD_Start>
 801a9ee:	4603      	mov	r3, r0
 801a9f0:	2b00      	cmp	r3, #0
 801a9f2:	d001      	beq.n	801a9f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801a9f4:	f7e8 fb1c 	bl	8003030 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801a9f8:	f7ef ffe6 	bl	800a9c8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801a9fc:	bf00      	nop
 801a9fe:	bd80      	pop	{r7, pc}
 801aa00:	240000b0 	.word	0x240000b0
 801aa04:	240018f0 	.word	0x240018f0
 801aa08:	2400001c 	.word	0x2400001c
 801aa0c:	2400009c 	.word	0x2400009c

0801aa10 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 801aa10:	b580      	push	{r7, lr}
 801aa12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 801aa14:	2200      	movs	r2, #0
 801aa16:	4905      	ldr	r1, [pc, #20]	; (801aa2c <CDC_Init_HS+0x1c>)
 801aa18:	4805      	ldr	r0, [pc, #20]	; (801aa30 <CDC_Init_HS+0x20>)
 801aa1a:	f7fb fc35 	bl	8016288 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 801aa1e:	4905      	ldr	r1, [pc, #20]	; (801aa34 <CDC_Init_HS+0x24>)
 801aa20:	4803      	ldr	r0, [pc, #12]	; (801aa30 <CDC_Init_HS+0x20>)
 801aa22:	f7fb fc53 	bl	80162cc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801aa26:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801aa28:	4618      	mov	r0, r3
 801aa2a:	bd80      	pop	{r7, pc}
 801aa2c:	240023cc 	.word	0x240023cc
 801aa30:	240018f0 	.word	0x240018f0
 801aa34:	24001bcc 	.word	0x24001bcc

0801aa38 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 801aa38:	b480      	push	{r7}
 801aa3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 801aa3c:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 801aa3e:	4618      	mov	r0, r3
 801aa40:	46bd      	mov	sp, r7
 801aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa46:	4770      	bx	lr

0801aa48 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801aa48:	b480      	push	{r7}
 801aa4a:	b083      	sub	sp, #12
 801aa4c:	af00      	add	r7, sp, #0
 801aa4e:	4603      	mov	r3, r0
 801aa50:	6039      	str	r1, [r7, #0]
 801aa52:	71fb      	strb	r3, [r7, #7]
 801aa54:	4613      	mov	r3, r2
 801aa56:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 801aa58:	79fb      	ldrb	r3, [r7, #7]
 801aa5a:	2b23      	cmp	r3, #35	; 0x23
 801aa5c:	d84a      	bhi.n	801aaf4 <CDC_Control_HS+0xac>
 801aa5e:	a201      	add	r2, pc, #4	; (adr r2, 801aa64 <CDC_Control_HS+0x1c>)
 801aa60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aa64:	0801aaf5 	.word	0x0801aaf5
 801aa68:	0801aaf5 	.word	0x0801aaf5
 801aa6c:	0801aaf5 	.word	0x0801aaf5
 801aa70:	0801aaf5 	.word	0x0801aaf5
 801aa74:	0801aaf5 	.word	0x0801aaf5
 801aa78:	0801aaf5 	.word	0x0801aaf5
 801aa7c:	0801aaf5 	.word	0x0801aaf5
 801aa80:	0801aaf5 	.word	0x0801aaf5
 801aa84:	0801aaf5 	.word	0x0801aaf5
 801aa88:	0801aaf5 	.word	0x0801aaf5
 801aa8c:	0801aaf5 	.word	0x0801aaf5
 801aa90:	0801aaf5 	.word	0x0801aaf5
 801aa94:	0801aaf5 	.word	0x0801aaf5
 801aa98:	0801aaf5 	.word	0x0801aaf5
 801aa9c:	0801aaf5 	.word	0x0801aaf5
 801aaa0:	0801aaf5 	.word	0x0801aaf5
 801aaa4:	0801aaf5 	.word	0x0801aaf5
 801aaa8:	0801aaf5 	.word	0x0801aaf5
 801aaac:	0801aaf5 	.word	0x0801aaf5
 801aab0:	0801aaf5 	.word	0x0801aaf5
 801aab4:	0801aaf5 	.word	0x0801aaf5
 801aab8:	0801aaf5 	.word	0x0801aaf5
 801aabc:	0801aaf5 	.word	0x0801aaf5
 801aac0:	0801aaf5 	.word	0x0801aaf5
 801aac4:	0801aaf5 	.word	0x0801aaf5
 801aac8:	0801aaf5 	.word	0x0801aaf5
 801aacc:	0801aaf5 	.word	0x0801aaf5
 801aad0:	0801aaf5 	.word	0x0801aaf5
 801aad4:	0801aaf5 	.word	0x0801aaf5
 801aad8:	0801aaf5 	.word	0x0801aaf5
 801aadc:	0801aaf5 	.word	0x0801aaf5
 801aae0:	0801aaf5 	.word	0x0801aaf5
 801aae4:	0801aaf5 	.word	0x0801aaf5
 801aae8:	0801aaf5 	.word	0x0801aaf5
 801aaec:	0801aaf5 	.word	0x0801aaf5
 801aaf0:	0801aaf5 	.word	0x0801aaf5
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 801aaf4:	bf00      	nop
  }

  return (USBD_OK);
 801aaf6:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 801aaf8:	4618      	mov	r0, r3
 801aafa:	370c      	adds	r7, #12
 801aafc:	46bd      	mov	sp, r7
 801aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab02:	4770      	bx	lr

0801ab04 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 801ab04:	b580      	push	{r7, lr}
 801ab06:	b082      	sub	sp, #8
 801ab08:	af00      	add	r7, sp, #0
 801ab0a:	6078      	str	r0, [r7, #4]
 801ab0c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 801ab0e:	6879      	ldr	r1, [r7, #4]
 801ab10:	4805      	ldr	r0, [pc, #20]	; (801ab28 <CDC_Receive_HS+0x24>)
 801ab12:	f7fb fbdb 	bl	80162cc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 801ab16:	4804      	ldr	r0, [pc, #16]	; (801ab28 <CDC_Receive_HS+0x24>)
 801ab18:	f7fb fc36 	bl	8016388 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801ab1c:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 801ab1e:	4618      	mov	r0, r3
 801ab20:	3708      	adds	r7, #8
 801ab22:	46bd      	mov	sp, r7
 801ab24:	bd80      	pop	{r7, pc}
 801ab26:	bf00      	nop
 801ab28:	240018f0 	.word	0x240018f0

0801ab2c <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 801ab2c:	b580      	push	{r7, lr}
 801ab2e:	b084      	sub	sp, #16
 801ab30:	af00      	add	r7, sp, #0
 801ab32:	6078      	str	r0, [r7, #4]
 801ab34:	460b      	mov	r3, r1
 801ab36:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801ab38:	2300      	movs	r3, #0
 801ab3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 801ab3c:	4b0d      	ldr	r3, [pc, #52]	; (801ab74 <CDC_Transmit_HS+0x48>)
 801ab3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801ab42:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801ab44:	68bb      	ldr	r3, [r7, #8]
 801ab46:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801ab4a:	2b00      	cmp	r3, #0
 801ab4c:	d001      	beq.n	801ab52 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 801ab4e:	2301      	movs	r3, #1
 801ab50:	e00b      	b.n	801ab6a <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 801ab52:	887b      	ldrh	r3, [r7, #2]
 801ab54:	461a      	mov	r2, r3
 801ab56:	6879      	ldr	r1, [r7, #4]
 801ab58:	4806      	ldr	r0, [pc, #24]	; (801ab74 <CDC_Transmit_HS+0x48>)
 801ab5a:	f7fb fb95 	bl	8016288 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 801ab5e:	4805      	ldr	r0, [pc, #20]	; (801ab74 <CDC_Transmit_HS+0x48>)
 801ab60:	f7fb fbd2 	bl	8016308 <USBD_CDC_TransmitPacket>
 801ab64:	4603      	mov	r3, r0
 801ab66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 801ab68:	7bfb      	ldrb	r3, [r7, #15]
}
 801ab6a:	4618      	mov	r0, r3
 801ab6c:	3710      	adds	r7, #16
 801ab6e:	46bd      	mov	sp, r7
 801ab70:	bd80      	pop	{r7, pc}
 801ab72:	bf00      	nop
 801ab74:	240018f0 	.word	0x240018f0

0801ab78 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801ab78:	b480      	push	{r7}
 801ab7a:	b087      	sub	sp, #28
 801ab7c:	af00      	add	r7, sp, #0
 801ab7e:	60f8      	str	r0, [r7, #12]
 801ab80:	60b9      	str	r1, [r7, #8]
 801ab82:	4613      	mov	r3, r2
 801ab84:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801ab86:	2300      	movs	r3, #0
 801ab88:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801ab8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801ab8e:	4618      	mov	r0, r3
 801ab90:	371c      	adds	r7, #28
 801ab92:	46bd      	mov	sp, r7
 801ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab98:	4770      	bx	lr
	...

0801ab9c <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ab9c:	b480      	push	{r7}
 801ab9e:	b083      	sub	sp, #12
 801aba0:	af00      	add	r7, sp, #0
 801aba2:	4603      	mov	r3, r0
 801aba4:	6039      	str	r1, [r7, #0]
 801aba6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 801aba8:	683b      	ldr	r3, [r7, #0]
 801abaa:	2212      	movs	r2, #18
 801abac:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 801abae:	4b03      	ldr	r3, [pc, #12]	; (801abbc <USBD_HS_DeviceDescriptor+0x20>)
}
 801abb0:	4618      	mov	r0, r3
 801abb2:	370c      	adds	r7, #12
 801abb4:	46bd      	mov	sp, r7
 801abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abba:	4770      	bx	lr
 801abbc:	240000cc 	.word	0x240000cc

0801abc0 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801abc0:	b480      	push	{r7}
 801abc2:	b083      	sub	sp, #12
 801abc4:	af00      	add	r7, sp, #0
 801abc6:	4603      	mov	r3, r0
 801abc8:	6039      	str	r1, [r7, #0]
 801abca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801abcc:	683b      	ldr	r3, [r7, #0]
 801abce:	2204      	movs	r2, #4
 801abd0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801abd2:	4b03      	ldr	r3, [pc, #12]	; (801abe0 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 801abd4:	4618      	mov	r0, r3
 801abd6:	370c      	adds	r7, #12
 801abd8:	46bd      	mov	sp, r7
 801abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abde:	4770      	bx	lr
 801abe0:	240000e0 	.word	0x240000e0

0801abe4 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801abe4:	b580      	push	{r7, lr}
 801abe6:	b082      	sub	sp, #8
 801abe8:	af00      	add	r7, sp, #0
 801abea:	4603      	mov	r3, r0
 801abec:	6039      	str	r1, [r7, #0]
 801abee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801abf0:	79fb      	ldrb	r3, [r7, #7]
 801abf2:	2b00      	cmp	r3, #0
 801abf4:	d105      	bne.n	801ac02 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801abf6:	683a      	ldr	r2, [r7, #0]
 801abf8:	4907      	ldr	r1, [pc, #28]	; (801ac18 <USBD_HS_ProductStrDescriptor+0x34>)
 801abfa:	4808      	ldr	r0, [pc, #32]	; (801ac1c <USBD_HS_ProductStrDescriptor+0x38>)
 801abfc:	f7fc fe12 	bl	8017824 <USBD_GetString>
 801ac00:	e004      	b.n	801ac0c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801ac02:	683a      	ldr	r2, [r7, #0]
 801ac04:	4904      	ldr	r1, [pc, #16]	; (801ac18 <USBD_HS_ProductStrDescriptor+0x34>)
 801ac06:	4805      	ldr	r0, [pc, #20]	; (801ac1c <USBD_HS_ProductStrDescriptor+0x38>)
 801ac08:	f7fc fe0c 	bl	8017824 <USBD_GetString>
  }
  return USBD_StrDesc;
 801ac0c:	4b02      	ldr	r3, [pc, #8]	; (801ac18 <USBD_HS_ProductStrDescriptor+0x34>)
}
 801ac0e:	4618      	mov	r0, r3
 801ac10:	3708      	adds	r7, #8
 801ac12:	46bd      	mov	sp, r7
 801ac14:	bd80      	pop	{r7, pc}
 801ac16:	bf00      	nop
 801ac18:	24002bcc 	.word	0x24002bcc
 801ac1c:	0802043c 	.word	0x0802043c

0801ac20 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ac20:	b580      	push	{r7, lr}
 801ac22:	b082      	sub	sp, #8
 801ac24:	af00      	add	r7, sp, #0
 801ac26:	4603      	mov	r3, r0
 801ac28:	6039      	str	r1, [r7, #0]
 801ac2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801ac2c:	683a      	ldr	r2, [r7, #0]
 801ac2e:	4904      	ldr	r1, [pc, #16]	; (801ac40 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 801ac30:	4804      	ldr	r0, [pc, #16]	; (801ac44 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 801ac32:	f7fc fdf7 	bl	8017824 <USBD_GetString>
  return USBD_StrDesc;
 801ac36:	4b02      	ldr	r3, [pc, #8]	; (801ac40 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 801ac38:	4618      	mov	r0, r3
 801ac3a:	3708      	adds	r7, #8
 801ac3c:	46bd      	mov	sp, r7
 801ac3e:	bd80      	pop	{r7, pc}
 801ac40:	24002bcc 	.word	0x24002bcc
 801ac44:	08020458 	.word	0x08020458

0801ac48 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ac48:	b580      	push	{r7, lr}
 801ac4a:	b082      	sub	sp, #8
 801ac4c:	af00      	add	r7, sp, #0
 801ac4e:	4603      	mov	r3, r0
 801ac50:	6039      	str	r1, [r7, #0]
 801ac52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801ac54:	683b      	ldr	r3, [r7, #0]
 801ac56:	221a      	movs	r2, #26
 801ac58:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801ac5a:	f000 f843 	bl	801ace4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801ac5e:	4b02      	ldr	r3, [pc, #8]	; (801ac68 <USBD_HS_SerialStrDescriptor+0x20>)
}
 801ac60:	4618      	mov	r0, r3
 801ac62:	3708      	adds	r7, #8
 801ac64:	46bd      	mov	sp, r7
 801ac66:	bd80      	pop	{r7, pc}
 801ac68:	240000e4 	.word	0x240000e4

0801ac6c <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ac6c:	b580      	push	{r7, lr}
 801ac6e:	b082      	sub	sp, #8
 801ac70:	af00      	add	r7, sp, #0
 801ac72:	4603      	mov	r3, r0
 801ac74:	6039      	str	r1, [r7, #0]
 801ac76:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801ac78:	79fb      	ldrb	r3, [r7, #7]
 801ac7a:	2b00      	cmp	r3, #0
 801ac7c:	d105      	bne.n	801ac8a <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801ac7e:	683a      	ldr	r2, [r7, #0]
 801ac80:	4907      	ldr	r1, [pc, #28]	; (801aca0 <USBD_HS_ConfigStrDescriptor+0x34>)
 801ac82:	4808      	ldr	r0, [pc, #32]	; (801aca4 <USBD_HS_ConfigStrDescriptor+0x38>)
 801ac84:	f7fc fdce 	bl	8017824 <USBD_GetString>
 801ac88:	e004      	b.n	801ac94 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801ac8a:	683a      	ldr	r2, [r7, #0]
 801ac8c:	4904      	ldr	r1, [pc, #16]	; (801aca0 <USBD_HS_ConfigStrDescriptor+0x34>)
 801ac8e:	4805      	ldr	r0, [pc, #20]	; (801aca4 <USBD_HS_ConfigStrDescriptor+0x38>)
 801ac90:	f7fc fdc8 	bl	8017824 <USBD_GetString>
  }
  return USBD_StrDesc;
 801ac94:	4b02      	ldr	r3, [pc, #8]	; (801aca0 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801ac96:	4618      	mov	r0, r3
 801ac98:	3708      	adds	r7, #8
 801ac9a:	46bd      	mov	sp, r7
 801ac9c:	bd80      	pop	{r7, pc}
 801ac9e:	bf00      	nop
 801aca0:	24002bcc 	.word	0x24002bcc
 801aca4:	0802045c 	.word	0x0802045c

0801aca8 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801aca8:	b580      	push	{r7, lr}
 801acaa:	b082      	sub	sp, #8
 801acac:	af00      	add	r7, sp, #0
 801acae:	4603      	mov	r3, r0
 801acb0:	6039      	str	r1, [r7, #0]
 801acb2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801acb4:	79fb      	ldrb	r3, [r7, #7]
 801acb6:	2b00      	cmp	r3, #0
 801acb8:	d105      	bne.n	801acc6 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801acba:	683a      	ldr	r2, [r7, #0]
 801acbc:	4907      	ldr	r1, [pc, #28]	; (801acdc <USBD_HS_InterfaceStrDescriptor+0x34>)
 801acbe:	4808      	ldr	r0, [pc, #32]	; (801ace0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 801acc0:	f7fc fdb0 	bl	8017824 <USBD_GetString>
 801acc4:	e004      	b.n	801acd0 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801acc6:	683a      	ldr	r2, [r7, #0]
 801acc8:	4904      	ldr	r1, [pc, #16]	; (801acdc <USBD_HS_InterfaceStrDescriptor+0x34>)
 801acca:	4805      	ldr	r0, [pc, #20]	; (801ace0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 801accc:	f7fc fdaa 	bl	8017824 <USBD_GetString>
  }
  return USBD_StrDesc;
 801acd0:	4b02      	ldr	r3, [pc, #8]	; (801acdc <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 801acd2:	4618      	mov	r0, r3
 801acd4:	3708      	adds	r7, #8
 801acd6:	46bd      	mov	sp, r7
 801acd8:	bd80      	pop	{r7, pc}
 801acda:	bf00      	nop
 801acdc:	24002bcc 	.word	0x24002bcc
 801ace0:	08020468 	.word	0x08020468

0801ace4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801ace4:	b580      	push	{r7, lr}
 801ace6:	b084      	sub	sp, #16
 801ace8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801acea:	4b0f      	ldr	r3, [pc, #60]	; (801ad28 <Get_SerialNum+0x44>)
 801acec:	681b      	ldr	r3, [r3, #0]
 801acee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801acf0:	4b0e      	ldr	r3, [pc, #56]	; (801ad2c <Get_SerialNum+0x48>)
 801acf2:	681b      	ldr	r3, [r3, #0]
 801acf4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801acf6:	4b0e      	ldr	r3, [pc, #56]	; (801ad30 <Get_SerialNum+0x4c>)
 801acf8:	681b      	ldr	r3, [r3, #0]
 801acfa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801acfc:	68fa      	ldr	r2, [r7, #12]
 801acfe:	687b      	ldr	r3, [r7, #4]
 801ad00:	4413      	add	r3, r2
 801ad02:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801ad04:	68fb      	ldr	r3, [r7, #12]
 801ad06:	2b00      	cmp	r3, #0
 801ad08:	d009      	beq.n	801ad1e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801ad0a:	2208      	movs	r2, #8
 801ad0c:	4909      	ldr	r1, [pc, #36]	; (801ad34 <Get_SerialNum+0x50>)
 801ad0e:	68f8      	ldr	r0, [r7, #12]
 801ad10:	f000 f814 	bl	801ad3c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801ad14:	2204      	movs	r2, #4
 801ad16:	4908      	ldr	r1, [pc, #32]	; (801ad38 <Get_SerialNum+0x54>)
 801ad18:	68b8      	ldr	r0, [r7, #8]
 801ad1a:	f000 f80f 	bl	801ad3c <IntToUnicode>
  }
}
 801ad1e:	bf00      	nop
 801ad20:	3710      	adds	r7, #16
 801ad22:	46bd      	mov	sp, r7
 801ad24:	bd80      	pop	{r7, pc}
 801ad26:	bf00      	nop
 801ad28:	1ff1e800 	.word	0x1ff1e800
 801ad2c:	1ff1e804 	.word	0x1ff1e804
 801ad30:	1ff1e808 	.word	0x1ff1e808
 801ad34:	240000e6 	.word	0x240000e6
 801ad38:	240000f6 	.word	0x240000f6

0801ad3c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801ad3c:	b480      	push	{r7}
 801ad3e:	b087      	sub	sp, #28
 801ad40:	af00      	add	r7, sp, #0
 801ad42:	60f8      	str	r0, [r7, #12]
 801ad44:	60b9      	str	r1, [r7, #8]
 801ad46:	4613      	mov	r3, r2
 801ad48:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801ad4a:	2300      	movs	r3, #0
 801ad4c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801ad4e:	2300      	movs	r3, #0
 801ad50:	75fb      	strb	r3, [r7, #23]
 801ad52:	e027      	b.n	801ada4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801ad54:	68fb      	ldr	r3, [r7, #12]
 801ad56:	0f1b      	lsrs	r3, r3, #28
 801ad58:	2b09      	cmp	r3, #9
 801ad5a:	d80b      	bhi.n	801ad74 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801ad5c:	68fb      	ldr	r3, [r7, #12]
 801ad5e:	0f1b      	lsrs	r3, r3, #28
 801ad60:	b2da      	uxtb	r2, r3
 801ad62:	7dfb      	ldrb	r3, [r7, #23]
 801ad64:	005b      	lsls	r3, r3, #1
 801ad66:	4619      	mov	r1, r3
 801ad68:	68bb      	ldr	r3, [r7, #8]
 801ad6a:	440b      	add	r3, r1
 801ad6c:	3230      	adds	r2, #48	; 0x30
 801ad6e:	b2d2      	uxtb	r2, r2
 801ad70:	701a      	strb	r2, [r3, #0]
 801ad72:	e00a      	b.n	801ad8a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801ad74:	68fb      	ldr	r3, [r7, #12]
 801ad76:	0f1b      	lsrs	r3, r3, #28
 801ad78:	b2da      	uxtb	r2, r3
 801ad7a:	7dfb      	ldrb	r3, [r7, #23]
 801ad7c:	005b      	lsls	r3, r3, #1
 801ad7e:	4619      	mov	r1, r3
 801ad80:	68bb      	ldr	r3, [r7, #8]
 801ad82:	440b      	add	r3, r1
 801ad84:	3237      	adds	r2, #55	; 0x37
 801ad86:	b2d2      	uxtb	r2, r2
 801ad88:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801ad8a:	68fb      	ldr	r3, [r7, #12]
 801ad8c:	011b      	lsls	r3, r3, #4
 801ad8e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801ad90:	7dfb      	ldrb	r3, [r7, #23]
 801ad92:	005b      	lsls	r3, r3, #1
 801ad94:	3301      	adds	r3, #1
 801ad96:	68ba      	ldr	r2, [r7, #8]
 801ad98:	4413      	add	r3, r2
 801ad9a:	2200      	movs	r2, #0
 801ad9c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801ad9e:	7dfb      	ldrb	r3, [r7, #23]
 801ada0:	3301      	adds	r3, #1
 801ada2:	75fb      	strb	r3, [r7, #23]
 801ada4:	7dfa      	ldrb	r2, [r7, #23]
 801ada6:	79fb      	ldrb	r3, [r7, #7]
 801ada8:	429a      	cmp	r2, r3
 801adaa:	d3d3      	bcc.n	801ad54 <IntToUnicode+0x18>
  }
}
 801adac:	bf00      	nop
 801adae:	bf00      	nop
 801adb0:	371c      	adds	r7, #28
 801adb2:	46bd      	mov	sp, r7
 801adb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adb8:	4770      	bx	lr
	...

0801adbc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801adbc:	b580      	push	{r7, lr}
 801adbe:	b0b2      	sub	sp, #200	; 0xc8
 801adc0:	af00      	add	r7, sp, #0
 801adc2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801adc4:	f107 0310 	add.w	r3, r7, #16
 801adc8:	22b8      	movs	r2, #184	; 0xb8
 801adca:	2100      	movs	r1, #0
 801adcc:	4618      	mov	r0, r3
 801adce:	f001 fa94 	bl	801c2fa <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 801add2:	687b      	ldr	r3, [r7, #4]
 801add4:	681b      	ldr	r3, [r3, #0]
 801add6:	4a1a      	ldr	r2, [pc, #104]	; (801ae40 <HAL_PCD_MspInit+0x84>)
 801add8:	4293      	cmp	r3, r2
 801adda:	d12c      	bne.n	801ae36 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801addc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 801ade0:	f04f 0300 	mov.w	r3, #0
 801ade4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801ade8:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 801adec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801adf0:	f107 0310 	add.w	r3, r7, #16
 801adf4:	4618      	mov	r0, r3
 801adf6:	f7f0 fdc7 	bl	800b988 <HAL_RCCEx_PeriphCLKConfig>
 801adfa:	4603      	mov	r3, r0
 801adfc:	2b00      	cmp	r3, #0
 801adfe:	d001      	beq.n	801ae04 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 801ae00:	f7e8 f916 	bl	8003030 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801ae04:	f7ef fde0 	bl	800a9c8 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 801ae08:	4b0e      	ldr	r3, [pc, #56]	; (801ae44 <HAL_PCD_MspInit+0x88>)
 801ae0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801ae0e:	4a0d      	ldr	r2, [pc, #52]	; (801ae44 <HAL_PCD_MspInit+0x88>)
 801ae10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801ae14:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801ae18:	4b0a      	ldr	r3, [pc, #40]	; (801ae44 <HAL_PCD_MspInit+0x88>)
 801ae1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801ae1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801ae22:	60fb      	str	r3, [r7, #12]
 801ae24:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801ae26:	2200      	movs	r2, #0
 801ae28:	2100      	movs	r1, #0
 801ae2a:	204d      	movs	r0, #77	; 0x4d
 801ae2c:	f7eb fb51 	bl	80064d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 801ae30:	204d      	movs	r0, #77	; 0x4d
 801ae32:	f7eb fb68 	bl	8006506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801ae36:	bf00      	nop
 801ae38:	37c8      	adds	r7, #200	; 0xc8
 801ae3a:	46bd      	mov	sp, r7
 801ae3c:	bd80      	pop	{r7, pc}
 801ae3e:	bf00      	nop
 801ae40:	40040000 	.word	0x40040000
 801ae44:	58024400 	.word	0x58024400

0801ae48 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ae48:	b580      	push	{r7, lr}
 801ae4a:	b082      	sub	sp, #8
 801ae4c:	af00      	add	r7, sp, #0
 801ae4e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801ae50:	687b      	ldr	r3, [r7, #4]
 801ae52:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801ae56:	687b      	ldr	r3, [r7, #4]
 801ae58:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801ae5c:	4619      	mov	r1, r3
 801ae5e:	4610      	mov	r0, r2
 801ae60:	f7fb fb7b 	bl	801655a <USBD_LL_SetupStage>
}
 801ae64:	bf00      	nop
 801ae66:	3708      	adds	r7, #8
 801ae68:	46bd      	mov	sp, r7
 801ae6a:	bd80      	pop	{r7, pc}

0801ae6c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ae6c:	b580      	push	{r7, lr}
 801ae6e:	b082      	sub	sp, #8
 801ae70:	af00      	add	r7, sp, #0
 801ae72:	6078      	str	r0, [r7, #4]
 801ae74:	460b      	mov	r3, r1
 801ae76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801ae78:	687b      	ldr	r3, [r7, #4]
 801ae7a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801ae7e:	78fa      	ldrb	r2, [r7, #3]
 801ae80:	6879      	ldr	r1, [r7, #4]
 801ae82:	4613      	mov	r3, r2
 801ae84:	00db      	lsls	r3, r3, #3
 801ae86:	4413      	add	r3, r2
 801ae88:	009b      	lsls	r3, r3, #2
 801ae8a:	440b      	add	r3, r1
 801ae8c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801ae90:	681a      	ldr	r2, [r3, #0]
 801ae92:	78fb      	ldrb	r3, [r7, #3]
 801ae94:	4619      	mov	r1, r3
 801ae96:	f7fb fbb5 	bl	8016604 <USBD_LL_DataOutStage>
}
 801ae9a:	bf00      	nop
 801ae9c:	3708      	adds	r7, #8
 801ae9e:	46bd      	mov	sp, r7
 801aea0:	bd80      	pop	{r7, pc}

0801aea2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aea2:	b580      	push	{r7, lr}
 801aea4:	b082      	sub	sp, #8
 801aea6:	af00      	add	r7, sp, #0
 801aea8:	6078      	str	r0, [r7, #4]
 801aeaa:	460b      	mov	r3, r1
 801aeac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801aeae:	687b      	ldr	r3, [r7, #4]
 801aeb0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801aeb4:	78fa      	ldrb	r2, [r7, #3]
 801aeb6:	6879      	ldr	r1, [r7, #4]
 801aeb8:	4613      	mov	r3, r2
 801aeba:	00db      	lsls	r3, r3, #3
 801aebc:	4413      	add	r3, r2
 801aebe:	009b      	lsls	r3, r3, #2
 801aec0:	440b      	add	r3, r1
 801aec2:	3348      	adds	r3, #72	; 0x48
 801aec4:	681a      	ldr	r2, [r3, #0]
 801aec6:	78fb      	ldrb	r3, [r7, #3]
 801aec8:	4619      	mov	r1, r3
 801aeca:	f7fb fc4e 	bl	801676a <USBD_LL_DataInStage>
}
 801aece:	bf00      	nop
 801aed0:	3708      	adds	r7, #8
 801aed2:	46bd      	mov	sp, r7
 801aed4:	bd80      	pop	{r7, pc}

0801aed6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aed6:	b580      	push	{r7, lr}
 801aed8:	b082      	sub	sp, #8
 801aeda:	af00      	add	r7, sp, #0
 801aedc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801aede:	687b      	ldr	r3, [r7, #4]
 801aee0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aee4:	4618      	mov	r0, r3
 801aee6:	f7fb fd88 	bl	80169fa <USBD_LL_SOF>
}
 801aeea:	bf00      	nop
 801aeec:	3708      	adds	r7, #8
 801aeee:	46bd      	mov	sp, r7
 801aef0:	bd80      	pop	{r7, pc}

0801aef2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aef2:	b580      	push	{r7, lr}
 801aef4:	b084      	sub	sp, #16
 801aef6:	af00      	add	r7, sp, #0
 801aef8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801aefa:	2301      	movs	r3, #1
 801aefc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801aefe:	687b      	ldr	r3, [r7, #4]
 801af00:	691b      	ldr	r3, [r3, #16]
 801af02:	2b00      	cmp	r3, #0
 801af04:	d102      	bne.n	801af0c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801af06:	2300      	movs	r3, #0
 801af08:	73fb      	strb	r3, [r7, #15]
 801af0a:	e008      	b.n	801af1e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801af0c:	687b      	ldr	r3, [r7, #4]
 801af0e:	691b      	ldr	r3, [r3, #16]
 801af10:	2b02      	cmp	r3, #2
 801af12:	d102      	bne.n	801af1a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801af14:	2301      	movs	r3, #1
 801af16:	73fb      	strb	r3, [r7, #15]
 801af18:	e001      	b.n	801af1e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801af1a:	f7e8 f889 	bl	8003030 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801af1e:	687b      	ldr	r3, [r7, #4]
 801af20:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801af24:	7bfa      	ldrb	r2, [r7, #15]
 801af26:	4611      	mov	r1, r2
 801af28:	4618      	mov	r0, r3
 801af2a:	f7fb fd22 	bl	8016972 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801af2e:	687b      	ldr	r3, [r7, #4]
 801af30:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801af34:	4618      	mov	r0, r3
 801af36:	f7fb fcca 	bl	80168ce <USBD_LL_Reset>
}
 801af3a:	bf00      	nop
 801af3c:	3710      	adds	r7, #16
 801af3e:	46bd      	mov	sp, r7
 801af40:	bd80      	pop	{r7, pc}
	...

0801af44 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801af44:	b580      	push	{r7, lr}
 801af46:	b082      	sub	sp, #8
 801af48:	af00      	add	r7, sp, #0
 801af4a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801af4c:	687b      	ldr	r3, [r7, #4]
 801af4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801af52:	4618      	mov	r0, r3
 801af54:	f7fb fd1d 	bl	8016992 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801af58:	687b      	ldr	r3, [r7, #4]
 801af5a:	681b      	ldr	r3, [r3, #0]
 801af5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801af60:	681b      	ldr	r3, [r3, #0]
 801af62:	687a      	ldr	r2, [r7, #4]
 801af64:	6812      	ldr	r2, [r2, #0]
 801af66:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801af6a:	f043 0301 	orr.w	r3, r3, #1
 801af6e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801af70:	687b      	ldr	r3, [r7, #4]
 801af72:	6a1b      	ldr	r3, [r3, #32]
 801af74:	2b00      	cmp	r3, #0
 801af76:	d005      	beq.n	801af84 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801af78:	4b04      	ldr	r3, [pc, #16]	; (801af8c <HAL_PCD_SuspendCallback+0x48>)
 801af7a:	691b      	ldr	r3, [r3, #16]
 801af7c:	4a03      	ldr	r2, [pc, #12]	; (801af8c <HAL_PCD_SuspendCallback+0x48>)
 801af7e:	f043 0306 	orr.w	r3, r3, #6
 801af82:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801af84:	bf00      	nop
 801af86:	3708      	adds	r7, #8
 801af88:	46bd      	mov	sp, r7
 801af8a:	bd80      	pop	{r7, pc}
 801af8c:	e000ed00 	.word	0xe000ed00

0801af90 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801af90:	b580      	push	{r7, lr}
 801af92:	b082      	sub	sp, #8
 801af94:	af00      	add	r7, sp, #0
 801af96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801af98:	687b      	ldr	r3, [r7, #4]
 801af9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801af9e:	4618      	mov	r0, r3
 801afa0:	f7fb fd13 	bl	80169ca <USBD_LL_Resume>
}
 801afa4:	bf00      	nop
 801afa6:	3708      	adds	r7, #8
 801afa8:	46bd      	mov	sp, r7
 801afaa:	bd80      	pop	{r7, pc}

0801afac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801afac:	b580      	push	{r7, lr}
 801afae:	b082      	sub	sp, #8
 801afb0:	af00      	add	r7, sp, #0
 801afb2:	6078      	str	r0, [r7, #4]
 801afb4:	460b      	mov	r3, r1
 801afb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801afb8:	687b      	ldr	r3, [r7, #4]
 801afba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801afbe:	78fa      	ldrb	r2, [r7, #3]
 801afc0:	4611      	mov	r1, r2
 801afc2:	4618      	mov	r0, r3
 801afc4:	f7fb fd6b 	bl	8016a9e <USBD_LL_IsoOUTIncomplete>
}
 801afc8:	bf00      	nop
 801afca:	3708      	adds	r7, #8
 801afcc:	46bd      	mov	sp, r7
 801afce:	bd80      	pop	{r7, pc}

0801afd0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801afd0:	b580      	push	{r7, lr}
 801afd2:	b082      	sub	sp, #8
 801afd4:	af00      	add	r7, sp, #0
 801afd6:	6078      	str	r0, [r7, #4]
 801afd8:	460b      	mov	r3, r1
 801afda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801afdc:	687b      	ldr	r3, [r7, #4]
 801afde:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801afe2:	78fa      	ldrb	r2, [r7, #3]
 801afe4:	4611      	mov	r1, r2
 801afe6:	4618      	mov	r0, r3
 801afe8:	f7fb fd27 	bl	8016a3a <USBD_LL_IsoINIncomplete>
}
 801afec:	bf00      	nop
 801afee:	3708      	adds	r7, #8
 801aff0:	46bd      	mov	sp, r7
 801aff2:	bd80      	pop	{r7, pc}

0801aff4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aff4:	b580      	push	{r7, lr}
 801aff6:	b082      	sub	sp, #8
 801aff8:	af00      	add	r7, sp, #0
 801affa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801affc:	687b      	ldr	r3, [r7, #4]
 801affe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801b002:	4618      	mov	r0, r3
 801b004:	f7fb fd7d 	bl	8016b02 <USBD_LL_DevConnected>
}
 801b008:	bf00      	nop
 801b00a:	3708      	adds	r7, #8
 801b00c:	46bd      	mov	sp, r7
 801b00e:	bd80      	pop	{r7, pc}

0801b010 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b010:	b580      	push	{r7, lr}
 801b012:	b082      	sub	sp, #8
 801b014:	af00      	add	r7, sp, #0
 801b016:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801b018:	687b      	ldr	r3, [r7, #4]
 801b01a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801b01e:	4618      	mov	r0, r3
 801b020:	f7fb fd7a 	bl	8016b18 <USBD_LL_DevDisconnected>
}
 801b024:	bf00      	nop
 801b026:	3708      	adds	r7, #8
 801b028:	46bd      	mov	sp, r7
 801b02a:	bd80      	pop	{r7, pc}

0801b02c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801b02c:	b580      	push	{r7, lr}
 801b02e:	b082      	sub	sp, #8
 801b030:	af00      	add	r7, sp, #0
 801b032:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 801b034:	687b      	ldr	r3, [r7, #4]
 801b036:	781b      	ldrb	r3, [r3, #0]
 801b038:	2b01      	cmp	r3, #1
 801b03a:	d140      	bne.n	801b0be <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 801b03c:	4a22      	ldr	r2, [pc, #136]	; (801b0c8 <USBD_LL_Init+0x9c>)
 801b03e:	687b      	ldr	r3, [r7, #4]
 801b040:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 801b044:	687b      	ldr	r3, [r7, #4]
 801b046:	4a20      	ldr	r2, [pc, #128]	; (801b0c8 <USBD_LL_Init+0x9c>)
 801b048:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 801b04c:	4b1e      	ldr	r3, [pc, #120]	; (801b0c8 <USBD_LL_Init+0x9c>)
 801b04e:	4a1f      	ldr	r2, [pc, #124]	; (801b0cc <USBD_LL_Init+0xa0>)
 801b050:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 801b052:	4b1d      	ldr	r3, [pc, #116]	; (801b0c8 <USBD_LL_Init+0x9c>)
 801b054:	2209      	movs	r2, #9
 801b056:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 801b058:	4b1b      	ldr	r3, [pc, #108]	; (801b0c8 <USBD_LL_Init+0x9c>)
 801b05a:	2202      	movs	r2, #2
 801b05c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801b05e:	4b1a      	ldr	r3, [pc, #104]	; (801b0c8 <USBD_LL_Init+0x9c>)
 801b060:	2200      	movs	r2, #0
 801b062:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 801b064:	4b18      	ldr	r3, [pc, #96]	; (801b0c8 <USBD_LL_Init+0x9c>)
 801b066:	2202      	movs	r2, #2
 801b068:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801b06a:	4b17      	ldr	r3, [pc, #92]	; (801b0c8 <USBD_LL_Init+0x9c>)
 801b06c:	2200      	movs	r2, #0
 801b06e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 801b070:	4b15      	ldr	r3, [pc, #84]	; (801b0c8 <USBD_LL_Init+0x9c>)
 801b072:	2200      	movs	r2, #0
 801b074:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801b076:	4b14      	ldr	r3, [pc, #80]	; (801b0c8 <USBD_LL_Init+0x9c>)
 801b078:	2200      	movs	r2, #0
 801b07a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 801b07c:	4b12      	ldr	r3, [pc, #72]	; (801b0c8 <USBD_LL_Init+0x9c>)
 801b07e:	2200      	movs	r2, #0
 801b080:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 801b082:	4b11      	ldr	r3, [pc, #68]	; (801b0c8 <USBD_LL_Init+0x9c>)
 801b084:	2200      	movs	r2, #0
 801b086:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801b088:	4b0f      	ldr	r3, [pc, #60]	; (801b0c8 <USBD_LL_Init+0x9c>)
 801b08a:	2200      	movs	r2, #0
 801b08c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 801b08e:	480e      	ldr	r0, [pc, #56]	; (801b0c8 <USBD_LL_Init+0x9c>)
 801b090:	f7ee f9a7 	bl	80093e2 <HAL_PCD_Init>
 801b094:	4603      	mov	r3, r0
 801b096:	2b00      	cmp	r3, #0
 801b098:	d001      	beq.n	801b09e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801b09a:	f7e7 ffc9 	bl	8003030 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 801b09e:	f44f 7100 	mov.w	r1, #512	; 0x200
 801b0a2:	4809      	ldr	r0, [pc, #36]	; (801b0c8 <USBD_LL_Init+0x9c>)
 801b0a4:	f7ef fc15 	bl	800a8d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 801b0a8:	2280      	movs	r2, #128	; 0x80
 801b0aa:	2100      	movs	r1, #0
 801b0ac:	4806      	ldr	r0, [pc, #24]	; (801b0c8 <USBD_LL_Init+0x9c>)
 801b0ae:	f7ef fbc9 	bl	800a844 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 801b0b2:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801b0b6:	2101      	movs	r1, #1
 801b0b8:	4803      	ldr	r0, [pc, #12]	; (801b0c8 <USBD_LL_Init+0x9c>)
 801b0ba:	f7ef fbc3 	bl	800a844 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 801b0be:	2300      	movs	r3, #0
}
 801b0c0:	4618      	mov	r0, r3
 801b0c2:	3708      	adds	r7, #8
 801b0c4:	46bd      	mov	sp, r7
 801b0c6:	bd80      	pop	{r7, pc}
 801b0c8:	24002dcc 	.word	0x24002dcc
 801b0cc:	40040000 	.word	0x40040000

0801b0d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801b0d0:	b580      	push	{r7, lr}
 801b0d2:	b084      	sub	sp, #16
 801b0d4:	af00      	add	r7, sp, #0
 801b0d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b0d8:	2300      	movs	r3, #0
 801b0da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b0dc:	2300      	movs	r3, #0
 801b0de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801b0e0:	687b      	ldr	r3, [r7, #4]
 801b0e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b0e6:	4618      	mov	r0, r3
 801b0e8:	f7ee fa9f 	bl	800962a <HAL_PCD_Start>
 801b0ec:	4603      	mov	r3, r0
 801b0ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b0f0:	7bfb      	ldrb	r3, [r7, #15]
 801b0f2:	4618      	mov	r0, r3
 801b0f4:	f000 f942 	bl	801b37c <USBD_Get_USB_Status>
 801b0f8:	4603      	mov	r3, r0
 801b0fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b0fc:	7bbb      	ldrb	r3, [r7, #14]
}
 801b0fe:	4618      	mov	r0, r3
 801b100:	3710      	adds	r7, #16
 801b102:	46bd      	mov	sp, r7
 801b104:	bd80      	pop	{r7, pc}

0801b106 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801b106:	b580      	push	{r7, lr}
 801b108:	b084      	sub	sp, #16
 801b10a:	af00      	add	r7, sp, #0
 801b10c:	6078      	str	r0, [r7, #4]
 801b10e:	4608      	mov	r0, r1
 801b110:	4611      	mov	r1, r2
 801b112:	461a      	mov	r2, r3
 801b114:	4603      	mov	r3, r0
 801b116:	70fb      	strb	r3, [r7, #3]
 801b118:	460b      	mov	r3, r1
 801b11a:	70bb      	strb	r3, [r7, #2]
 801b11c:	4613      	mov	r3, r2
 801b11e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b120:	2300      	movs	r3, #0
 801b122:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b124:	2300      	movs	r3, #0
 801b126:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801b128:	687b      	ldr	r3, [r7, #4]
 801b12a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801b12e:	78bb      	ldrb	r3, [r7, #2]
 801b130:	883a      	ldrh	r2, [r7, #0]
 801b132:	78f9      	ldrb	r1, [r7, #3]
 801b134:	f7ee ff9f 	bl	800a076 <HAL_PCD_EP_Open>
 801b138:	4603      	mov	r3, r0
 801b13a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b13c:	7bfb      	ldrb	r3, [r7, #15]
 801b13e:	4618      	mov	r0, r3
 801b140:	f000 f91c 	bl	801b37c <USBD_Get_USB_Status>
 801b144:	4603      	mov	r3, r0
 801b146:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b148:	7bbb      	ldrb	r3, [r7, #14]
}
 801b14a:	4618      	mov	r0, r3
 801b14c:	3710      	adds	r7, #16
 801b14e:	46bd      	mov	sp, r7
 801b150:	bd80      	pop	{r7, pc}

0801b152 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b152:	b580      	push	{r7, lr}
 801b154:	b084      	sub	sp, #16
 801b156:	af00      	add	r7, sp, #0
 801b158:	6078      	str	r0, [r7, #4]
 801b15a:	460b      	mov	r3, r1
 801b15c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b15e:	2300      	movs	r3, #0
 801b160:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b162:	2300      	movs	r3, #0
 801b164:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801b166:	687b      	ldr	r3, [r7, #4]
 801b168:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b16c:	78fa      	ldrb	r2, [r7, #3]
 801b16e:	4611      	mov	r1, r2
 801b170:	4618      	mov	r0, r3
 801b172:	f7ee ffe8 	bl	800a146 <HAL_PCD_EP_Close>
 801b176:	4603      	mov	r3, r0
 801b178:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b17a:	7bfb      	ldrb	r3, [r7, #15]
 801b17c:	4618      	mov	r0, r3
 801b17e:	f000 f8fd 	bl	801b37c <USBD_Get_USB_Status>
 801b182:	4603      	mov	r3, r0
 801b184:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b186:	7bbb      	ldrb	r3, [r7, #14]
}
 801b188:	4618      	mov	r0, r3
 801b18a:	3710      	adds	r7, #16
 801b18c:	46bd      	mov	sp, r7
 801b18e:	bd80      	pop	{r7, pc}

0801b190 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b190:	b580      	push	{r7, lr}
 801b192:	b084      	sub	sp, #16
 801b194:	af00      	add	r7, sp, #0
 801b196:	6078      	str	r0, [r7, #4]
 801b198:	460b      	mov	r3, r1
 801b19a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b19c:	2300      	movs	r3, #0
 801b19e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b1a0:	2300      	movs	r3, #0
 801b1a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801b1a4:	687b      	ldr	r3, [r7, #4]
 801b1a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b1aa:	78fa      	ldrb	r2, [r7, #3]
 801b1ac:	4611      	mov	r1, r2
 801b1ae:	4618      	mov	r0, r3
 801b1b0:	f7ef f8a2 	bl	800a2f8 <HAL_PCD_EP_SetStall>
 801b1b4:	4603      	mov	r3, r0
 801b1b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b1b8:	7bfb      	ldrb	r3, [r7, #15]
 801b1ba:	4618      	mov	r0, r3
 801b1bc:	f000 f8de 	bl	801b37c <USBD_Get_USB_Status>
 801b1c0:	4603      	mov	r3, r0
 801b1c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b1c4:	7bbb      	ldrb	r3, [r7, #14]
}
 801b1c6:	4618      	mov	r0, r3
 801b1c8:	3710      	adds	r7, #16
 801b1ca:	46bd      	mov	sp, r7
 801b1cc:	bd80      	pop	{r7, pc}

0801b1ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b1ce:	b580      	push	{r7, lr}
 801b1d0:	b084      	sub	sp, #16
 801b1d2:	af00      	add	r7, sp, #0
 801b1d4:	6078      	str	r0, [r7, #4]
 801b1d6:	460b      	mov	r3, r1
 801b1d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b1da:	2300      	movs	r3, #0
 801b1dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b1de:	2300      	movs	r3, #0
 801b1e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801b1e2:	687b      	ldr	r3, [r7, #4]
 801b1e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b1e8:	78fa      	ldrb	r2, [r7, #3]
 801b1ea:	4611      	mov	r1, r2
 801b1ec:	4618      	mov	r0, r3
 801b1ee:	f7ef f8e7 	bl	800a3c0 <HAL_PCD_EP_ClrStall>
 801b1f2:	4603      	mov	r3, r0
 801b1f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b1f6:	7bfb      	ldrb	r3, [r7, #15]
 801b1f8:	4618      	mov	r0, r3
 801b1fa:	f000 f8bf 	bl	801b37c <USBD_Get_USB_Status>
 801b1fe:	4603      	mov	r3, r0
 801b200:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b202:	7bbb      	ldrb	r3, [r7, #14]
}
 801b204:	4618      	mov	r0, r3
 801b206:	3710      	adds	r7, #16
 801b208:	46bd      	mov	sp, r7
 801b20a:	bd80      	pop	{r7, pc}

0801b20c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b20c:	b480      	push	{r7}
 801b20e:	b085      	sub	sp, #20
 801b210:	af00      	add	r7, sp, #0
 801b212:	6078      	str	r0, [r7, #4]
 801b214:	460b      	mov	r3, r1
 801b216:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801b218:	687b      	ldr	r3, [r7, #4]
 801b21a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b21e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801b220:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801b224:	2b00      	cmp	r3, #0
 801b226:	da0b      	bge.n	801b240 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801b228:	78fb      	ldrb	r3, [r7, #3]
 801b22a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b22e:	68f9      	ldr	r1, [r7, #12]
 801b230:	4613      	mov	r3, r2
 801b232:	00db      	lsls	r3, r3, #3
 801b234:	4413      	add	r3, r2
 801b236:	009b      	lsls	r3, r3, #2
 801b238:	440b      	add	r3, r1
 801b23a:	333e      	adds	r3, #62	; 0x3e
 801b23c:	781b      	ldrb	r3, [r3, #0]
 801b23e:	e00b      	b.n	801b258 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801b240:	78fb      	ldrb	r3, [r7, #3]
 801b242:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b246:	68f9      	ldr	r1, [r7, #12]
 801b248:	4613      	mov	r3, r2
 801b24a:	00db      	lsls	r3, r3, #3
 801b24c:	4413      	add	r3, r2
 801b24e:	009b      	lsls	r3, r3, #2
 801b250:	440b      	add	r3, r1
 801b252:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801b256:	781b      	ldrb	r3, [r3, #0]
  }
}
 801b258:	4618      	mov	r0, r3
 801b25a:	3714      	adds	r7, #20
 801b25c:	46bd      	mov	sp, r7
 801b25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b262:	4770      	bx	lr

0801b264 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801b264:	b580      	push	{r7, lr}
 801b266:	b084      	sub	sp, #16
 801b268:	af00      	add	r7, sp, #0
 801b26a:	6078      	str	r0, [r7, #4]
 801b26c:	460b      	mov	r3, r1
 801b26e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b270:	2300      	movs	r3, #0
 801b272:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b274:	2300      	movs	r3, #0
 801b276:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801b278:	687b      	ldr	r3, [r7, #4]
 801b27a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b27e:	78fa      	ldrb	r2, [r7, #3]
 801b280:	4611      	mov	r1, r2
 801b282:	4618      	mov	r0, r3
 801b284:	f7ee fed2 	bl	800a02c <HAL_PCD_SetAddress>
 801b288:	4603      	mov	r3, r0
 801b28a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b28c:	7bfb      	ldrb	r3, [r7, #15]
 801b28e:	4618      	mov	r0, r3
 801b290:	f000 f874 	bl	801b37c <USBD_Get_USB_Status>
 801b294:	4603      	mov	r3, r0
 801b296:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b298:	7bbb      	ldrb	r3, [r7, #14]
}
 801b29a:	4618      	mov	r0, r3
 801b29c:	3710      	adds	r7, #16
 801b29e:	46bd      	mov	sp, r7
 801b2a0:	bd80      	pop	{r7, pc}

0801b2a2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801b2a2:	b580      	push	{r7, lr}
 801b2a4:	b086      	sub	sp, #24
 801b2a6:	af00      	add	r7, sp, #0
 801b2a8:	60f8      	str	r0, [r7, #12]
 801b2aa:	607a      	str	r2, [r7, #4]
 801b2ac:	603b      	str	r3, [r7, #0]
 801b2ae:	460b      	mov	r3, r1
 801b2b0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b2b2:	2300      	movs	r3, #0
 801b2b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b2b6:	2300      	movs	r3, #0
 801b2b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801b2ba:	68fb      	ldr	r3, [r7, #12]
 801b2bc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801b2c0:	7af9      	ldrb	r1, [r7, #11]
 801b2c2:	683b      	ldr	r3, [r7, #0]
 801b2c4:	687a      	ldr	r2, [r7, #4]
 801b2c6:	f7ee ffdc 	bl	800a282 <HAL_PCD_EP_Transmit>
 801b2ca:	4603      	mov	r3, r0
 801b2cc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b2ce:	7dfb      	ldrb	r3, [r7, #23]
 801b2d0:	4618      	mov	r0, r3
 801b2d2:	f000 f853 	bl	801b37c <USBD_Get_USB_Status>
 801b2d6:	4603      	mov	r3, r0
 801b2d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801b2da:	7dbb      	ldrb	r3, [r7, #22]
}
 801b2dc:	4618      	mov	r0, r3
 801b2de:	3718      	adds	r7, #24
 801b2e0:	46bd      	mov	sp, r7
 801b2e2:	bd80      	pop	{r7, pc}

0801b2e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801b2e4:	b580      	push	{r7, lr}
 801b2e6:	b086      	sub	sp, #24
 801b2e8:	af00      	add	r7, sp, #0
 801b2ea:	60f8      	str	r0, [r7, #12]
 801b2ec:	607a      	str	r2, [r7, #4]
 801b2ee:	603b      	str	r3, [r7, #0]
 801b2f0:	460b      	mov	r3, r1
 801b2f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b2f4:	2300      	movs	r3, #0
 801b2f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b2f8:	2300      	movs	r3, #0
 801b2fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801b2fc:	68fb      	ldr	r3, [r7, #12]
 801b2fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801b302:	7af9      	ldrb	r1, [r7, #11]
 801b304:	683b      	ldr	r3, [r7, #0]
 801b306:	687a      	ldr	r2, [r7, #4]
 801b308:	f7ee ff67 	bl	800a1da <HAL_PCD_EP_Receive>
 801b30c:	4603      	mov	r3, r0
 801b30e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b310:	7dfb      	ldrb	r3, [r7, #23]
 801b312:	4618      	mov	r0, r3
 801b314:	f000 f832 	bl	801b37c <USBD_Get_USB_Status>
 801b318:	4603      	mov	r3, r0
 801b31a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801b31c:	7dbb      	ldrb	r3, [r7, #22]
}
 801b31e:	4618      	mov	r0, r3
 801b320:	3718      	adds	r7, #24
 801b322:	46bd      	mov	sp, r7
 801b324:	bd80      	pop	{r7, pc}

0801b326 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b326:	b580      	push	{r7, lr}
 801b328:	b082      	sub	sp, #8
 801b32a:	af00      	add	r7, sp, #0
 801b32c:	6078      	str	r0, [r7, #4]
 801b32e:	460b      	mov	r3, r1
 801b330:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801b332:	687b      	ldr	r3, [r7, #4]
 801b334:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b338:	78fa      	ldrb	r2, [r7, #3]
 801b33a:	4611      	mov	r1, r2
 801b33c:	4618      	mov	r0, r3
 801b33e:	f7ee ff88 	bl	800a252 <HAL_PCD_EP_GetRxCount>
 801b342:	4603      	mov	r3, r0
}
 801b344:	4618      	mov	r0, r3
 801b346:	3708      	adds	r7, #8
 801b348:	46bd      	mov	sp, r7
 801b34a:	bd80      	pop	{r7, pc}

0801b34c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801b34c:	b480      	push	{r7}
 801b34e:	b083      	sub	sp, #12
 801b350:	af00      	add	r7, sp, #0
 801b352:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801b354:	4b03      	ldr	r3, [pc, #12]	; (801b364 <USBD_static_malloc+0x18>)
}
 801b356:	4618      	mov	r0, r3
 801b358:	370c      	adds	r7, #12
 801b35a:	46bd      	mov	sp, r7
 801b35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b360:	4770      	bx	lr
 801b362:	bf00      	nop
 801b364:	240032d8 	.word	0x240032d8

0801b368 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801b368:	b480      	push	{r7}
 801b36a:	b083      	sub	sp, #12
 801b36c:	af00      	add	r7, sp, #0
 801b36e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801b370:	bf00      	nop
 801b372:	370c      	adds	r7, #12
 801b374:	46bd      	mov	sp, r7
 801b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b37a:	4770      	bx	lr

0801b37c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801b37c:	b480      	push	{r7}
 801b37e:	b085      	sub	sp, #20
 801b380:	af00      	add	r7, sp, #0
 801b382:	4603      	mov	r3, r0
 801b384:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b386:	2300      	movs	r3, #0
 801b388:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801b38a:	79fb      	ldrb	r3, [r7, #7]
 801b38c:	2b03      	cmp	r3, #3
 801b38e:	d817      	bhi.n	801b3c0 <USBD_Get_USB_Status+0x44>
 801b390:	a201      	add	r2, pc, #4	; (adr r2, 801b398 <USBD_Get_USB_Status+0x1c>)
 801b392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b396:	bf00      	nop
 801b398:	0801b3a9 	.word	0x0801b3a9
 801b39c:	0801b3af 	.word	0x0801b3af
 801b3a0:	0801b3b5 	.word	0x0801b3b5
 801b3a4:	0801b3bb 	.word	0x0801b3bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801b3a8:	2300      	movs	r3, #0
 801b3aa:	73fb      	strb	r3, [r7, #15]
    break;
 801b3ac:	e00b      	b.n	801b3c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801b3ae:	2303      	movs	r3, #3
 801b3b0:	73fb      	strb	r3, [r7, #15]
    break;
 801b3b2:	e008      	b.n	801b3c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801b3b4:	2301      	movs	r3, #1
 801b3b6:	73fb      	strb	r3, [r7, #15]
    break;
 801b3b8:	e005      	b.n	801b3c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801b3ba:	2303      	movs	r3, #3
 801b3bc:	73fb      	strb	r3, [r7, #15]
    break;
 801b3be:	e002      	b.n	801b3c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801b3c0:	2303      	movs	r3, #3
 801b3c2:	73fb      	strb	r3, [r7, #15]
    break;
 801b3c4:	bf00      	nop
  }
  return usb_status;
 801b3c6:	7bfb      	ldrb	r3, [r7, #15]
}
 801b3c8:	4618      	mov	r0, r3
 801b3ca:	3714      	adds	r7, #20
 801b3cc:	46bd      	mov	sp, r7
 801b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3d2:	4770      	bx	lr

0801b3d4 <__cvt>:
 801b3d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b3d6:	ed2d 8b02 	vpush	{d8}
 801b3da:	eeb0 8b40 	vmov.f64	d8, d0
 801b3de:	b085      	sub	sp, #20
 801b3e0:	4617      	mov	r7, r2
 801b3e2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801b3e4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801b3e6:	ee18 2a90 	vmov	r2, s17
 801b3ea:	f025 0520 	bic.w	r5, r5, #32
 801b3ee:	2a00      	cmp	r2, #0
 801b3f0:	bfb6      	itet	lt
 801b3f2:	222d      	movlt	r2, #45	; 0x2d
 801b3f4:	2200      	movge	r2, #0
 801b3f6:	eeb1 8b40 	vneglt.f64	d8, d0
 801b3fa:	2d46      	cmp	r5, #70	; 0x46
 801b3fc:	460c      	mov	r4, r1
 801b3fe:	701a      	strb	r2, [r3, #0]
 801b400:	d004      	beq.n	801b40c <__cvt+0x38>
 801b402:	2d45      	cmp	r5, #69	; 0x45
 801b404:	d100      	bne.n	801b408 <__cvt+0x34>
 801b406:	3401      	adds	r4, #1
 801b408:	2102      	movs	r1, #2
 801b40a:	e000      	b.n	801b40e <__cvt+0x3a>
 801b40c:	2103      	movs	r1, #3
 801b40e:	ab03      	add	r3, sp, #12
 801b410:	9301      	str	r3, [sp, #4]
 801b412:	ab02      	add	r3, sp, #8
 801b414:	9300      	str	r3, [sp, #0]
 801b416:	4622      	mov	r2, r4
 801b418:	4633      	mov	r3, r6
 801b41a:	eeb0 0b48 	vmov.f64	d0, d8
 801b41e:	f001 f893 	bl	801c548 <_dtoa_r>
 801b422:	2d47      	cmp	r5, #71	; 0x47
 801b424:	d101      	bne.n	801b42a <__cvt+0x56>
 801b426:	07fb      	lsls	r3, r7, #31
 801b428:	d51a      	bpl.n	801b460 <__cvt+0x8c>
 801b42a:	2d46      	cmp	r5, #70	; 0x46
 801b42c:	eb00 0204 	add.w	r2, r0, r4
 801b430:	d10c      	bne.n	801b44c <__cvt+0x78>
 801b432:	7803      	ldrb	r3, [r0, #0]
 801b434:	2b30      	cmp	r3, #48	; 0x30
 801b436:	d107      	bne.n	801b448 <__cvt+0x74>
 801b438:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801b43c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b440:	bf1c      	itt	ne
 801b442:	f1c4 0401 	rsbne	r4, r4, #1
 801b446:	6034      	strne	r4, [r6, #0]
 801b448:	6833      	ldr	r3, [r6, #0]
 801b44a:	441a      	add	r2, r3
 801b44c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801b450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b454:	bf08      	it	eq
 801b456:	9203      	streq	r2, [sp, #12]
 801b458:	2130      	movs	r1, #48	; 0x30
 801b45a:	9b03      	ldr	r3, [sp, #12]
 801b45c:	4293      	cmp	r3, r2
 801b45e:	d307      	bcc.n	801b470 <__cvt+0x9c>
 801b460:	9b03      	ldr	r3, [sp, #12]
 801b462:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b464:	1a1b      	subs	r3, r3, r0
 801b466:	6013      	str	r3, [r2, #0]
 801b468:	b005      	add	sp, #20
 801b46a:	ecbd 8b02 	vpop	{d8}
 801b46e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b470:	1c5c      	adds	r4, r3, #1
 801b472:	9403      	str	r4, [sp, #12]
 801b474:	7019      	strb	r1, [r3, #0]
 801b476:	e7f0      	b.n	801b45a <__cvt+0x86>

0801b478 <__exponent>:
 801b478:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b47a:	4603      	mov	r3, r0
 801b47c:	2900      	cmp	r1, #0
 801b47e:	bfb8      	it	lt
 801b480:	4249      	neglt	r1, r1
 801b482:	f803 2b02 	strb.w	r2, [r3], #2
 801b486:	bfb4      	ite	lt
 801b488:	222d      	movlt	r2, #45	; 0x2d
 801b48a:	222b      	movge	r2, #43	; 0x2b
 801b48c:	2909      	cmp	r1, #9
 801b48e:	7042      	strb	r2, [r0, #1]
 801b490:	dd2a      	ble.n	801b4e8 <__exponent+0x70>
 801b492:	f10d 0207 	add.w	r2, sp, #7
 801b496:	4617      	mov	r7, r2
 801b498:	260a      	movs	r6, #10
 801b49a:	4694      	mov	ip, r2
 801b49c:	fb91 f5f6 	sdiv	r5, r1, r6
 801b4a0:	fb06 1415 	mls	r4, r6, r5, r1
 801b4a4:	3430      	adds	r4, #48	; 0x30
 801b4a6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801b4aa:	460c      	mov	r4, r1
 801b4ac:	2c63      	cmp	r4, #99	; 0x63
 801b4ae:	f102 32ff 	add.w	r2, r2, #4294967295
 801b4b2:	4629      	mov	r1, r5
 801b4b4:	dcf1      	bgt.n	801b49a <__exponent+0x22>
 801b4b6:	3130      	adds	r1, #48	; 0x30
 801b4b8:	f1ac 0402 	sub.w	r4, ip, #2
 801b4bc:	f802 1c01 	strb.w	r1, [r2, #-1]
 801b4c0:	1c41      	adds	r1, r0, #1
 801b4c2:	4622      	mov	r2, r4
 801b4c4:	42ba      	cmp	r2, r7
 801b4c6:	d30a      	bcc.n	801b4de <__exponent+0x66>
 801b4c8:	f10d 0209 	add.w	r2, sp, #9
 801b4cc:	eba2 020c 	sub.w	r2, r2, ip
 801b4d0:	42bc      	cmp	r4, r7
 801b4d2:	bf88      	it	hi
 801b4d4:	2200      	movhi	r2, #0
 801b4d6:	4413      	add	r3, r2
 801b4d8:	1a18      	subs	r0, r3, r0
 801b4da:	b003      	add	sp, #12
 801b4dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b4de:	f812 5b01 	ldrb.w	r5, [r2], #1
 801b4e2:	f801 5f01 	strb.w	r5, [r1, #1]!
 801b4e6:	e7ed      	b.n	801b4c4 <__exponent+0x4c>
 801b4e8:	2330      	movs	r3, #48	; 0x30
 801b4ea:	3130      	adds	r1, #48	; 0x30
 801b4ec:	7083      	strb	r3, [r0, #2]
 801b4ee:	70c1      	strb	r1, [r0, #3]
 801b4f0:	1d03      	adds	r3, r0, #4
 801b4f2:	e7f1      	b.n	801b4d8 <__exponent+0x60>
 801b4f4:	0000      	movs	r0, r0
	...

0801b4f8 <_printf_float>:
 801b4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4fc:	b08b      	sub	sp, #44	; 0x2c
 801b4fe:	460c      	mov	r4, r1
 801b500:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801b504:	4616      	mov	r6, r2
 801b506:	461f      	mov	r7, r3
 801b508:	4605      	mov	r5, r0
 801b50a:	f000 feff 	bl	801c30c <_localeconv_r>
 801b50e:	f8d0 b000 	ldr.w	fp, [r0]
 801b512:	4658      	mov	r0, fp
 801b514:	f7e4 ff5c 	bl	80003d0 <strlen>
 801b518:	2300      	movs	r3, #0
 801b51a:	9308      	str	r3, [sp, #32]
 801b51c:	f8d8 3000 	ldr.w	r3, [r8]
 801b520:	f894 9018 	ldrb.w	r9, [r4, #24]
 801b524:	6822      	ldr	r2, [r4, #0]
 801b526:	3307      	adds	r3, #7
 801b528:	f023 0307 	bic.w	r3, r3, #7
 801b52c:	f103 0108 	add.w	r1, r3, #8
 801b530:	f8c8 1000 	str.w	r1, [r8]
 801b534:	ed93 0b00 	vldr	d0, [r3]
 801b538:	ed9f 6b97 	vldr	d6, [pc, #604]	; 801b798 <_printf_float+0x2a0>
 801b53c:	eeb0 7bc0 	vabs.f64	d7, d0
 801b540:	eeb4 7b46 	vcmp.f64	d7, d6
 801b544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b548:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 801b54c:	4682      	mov	sl, r0
 801b54e:	dd24      	ble.n	801b59a <_printf_float+0xa2>
 801b550:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801b554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b558:	d502      	bpl.n	801b560 <_printf_float+0x68>
 801b55a:	232d      	movs	r3, #45	; 0x2d
 801b55c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b560:	498f      	ldr	r1, [pc, #572]	; (801b7a0 <_printf_float+0x2a8>)
 801b562:	4b90      	ldr	r3, [pc, #576]	; (801b7a4 <_printf_float+0x2ac>)
 801b564:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801b568:	bf94      	ite	ls
 801b56a:	4688      	movls	r8, r1
 801b56c:	4698      	movhi	r8, r3
 801b56e:	2303      	movs	r3, #3
 801b570:	6123      	str	r3, [r4, #16]
 801b572:	f022 0204 	bic.w	r2, r2, #4
 801b576:	2300      	movs	r3, #0
 801b578:	6022      	str	r2, [r4, #0]
 801b57a:	9304      	str	r3, [sp, #16]
 801b57c:	9700      	str	r7, [sp, #0]
 801b57e:	4633      	mov	r3, r6
 801b580:	aa09      	add	r2, sp, #36	; 0x24
 801b582:	4621      	mov	r1, r4
 801b584:	4628      	mov	r0, r5
 801b586:	f000 f9d1 	bl	801b92c <_printf_common>
 801b58a:	3001      	adds	r0, #1
 801b58c:	f040 808a 	bne.w	801b6a4 <_printf_float+0x1ac>
 801b590:	f04f 30ff 	mov.w	r0, #4294967295
 801b594:	b00b      	add	sp, #44	; 0x2c
 801b596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b59a:	eeb4 0b40 	vcmp.f64	d0, d0
 801b59e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5a2:	d709      	bvc.n	801b5b8 <_printf_float+0xc0>
 801b5a4:	ee10 3a90 	vmov	r3, s1
 801b5a8:	2b00      	cmp	r3, #0
 801b5aa:	bfbc      	itt	lt
 801b5ac:	232d      	movlt	r3, #45	; 0x2d
 801b5ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801b5b2:	497d      	ldr	r1, [pc, #500]	; (801b7a8 <_printf_float+0x2b0>)
 801b5b4:	4b7d      	ldr	r3, [pc, #500]	; (801b7ac <_printf_float+0x2b4>)
 801b5b6:	e7d5      	b.n	801b564 <_printf_float+0x6c>
 801b5b8:	6863      	ldr	r3, [r4, #4]
 801b5ba:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801b5be:	9104      	str	r1, [sp, #16]
 801b5c0:	1c59      	adds	r1, r3, #1
 801b5c2:	d13c      	bne.n	801b63e <_printf_float+0x146>
 801b5c4:	2306      	movs	r3, #6
 801b5c6:	6063      	str	r3, [r4, #4]
 801b5c8:	2300      	movs	r3, #0
 801b5ca:	9303      	str	r3, [sp, #12]
 801b5cc:	ab08      	add	r3, sp, #32
 801b5ce:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801b5d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801b5d6:	ab07      	add	r3, sp, #28
 801b5d8:	6861      	ldr	r1, [r4, #4]
 801b5da:	9300      	str	r3, [sp, #0]
 801b5dc:	6022      	str	r2, [r4, #0]
 801b5de:	f10d 031b 	add.w	r3, sp, #27
 801b5e2:	4628      	mov	r0, r5
 801b5e4:	f7ff fef6 	bl	801b3d4 <__cvt>
 801b5e8:	9b04      	ldr	r3, [sp, #16]
 801b5ea:	9907      	ldr	r1, [sp, #28]
 801b5ec:	2b47      	cmp	r3, #71	; 0x47
 801b5ee:	4680      	mov	r8, r0
 801b5f0:	d108      	bne.n	801b604 <_printf_float+0x10c>
 801b5f2:	1cc8      	adds	r0, r1, #3
 801b5f4:	db02      	blt.n	801b5fc <_printf_float+0x104>
 801b5f6:	6863      	ldr	r3, [r4, #4]
 801b5f8:	4299      	cmp	r1, r3
 801b5fa:	dd41      	ble.n	801b680 <_printf_float+0x188>
 801b5fc:	f1a9 0902 	sub.w	r9, r9, #2
 801b600:	fa5f f989 	uxtb.w	r9, r9
 801b604:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801b608:	d820      	bhi.n	801b64c <_printf_float+0x154>
 801b60a:	3901      	subs	r1, #1
 801b60c:	464a      	mov	r2, r9
 801b60e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801b612:	9107      	str	r1, [sp, #28]
 801b614:	f7ff ff30 	bl	801b478 <__exponent>
 801b618:	9a08      	ldr	r2, [sp, #32]
 801b61a:	9004      	str	r0, [sp, #16]
 801b61c:	1813      	adds	r3, r2, r0
 801b61e:	2a01      	cmp	r2, #1
 801b620:	6123      	str	r3, [r4, #16]
 801b622:	dc02      	bgt.n	801b62a <_printf_float+0x132>
 801b624:	6822      	ldr	r2, [r4, #0]
 801b626:	07d2      	lsls	r2, r2, #31
 801b628:	d501      	bpl.n	801b62e <_printf_float+0x136>
 801b62a:	3301      	adds	r3, #1
 801b62c:	6123      	str	r3, [r4, #16]
 801b62e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801b632:	2b00      	cmp	r3, #0
 801b634:	d0a2      	beq.n	801b57c <_printf_float+0x84>
 801b636:	232d      	movs	r3, #45	; 0x2d
 801b638:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b63c:	e79e      	b.n	801b57c <_printf_float+0x84>
 801b63e:	9904      	ldr	r1, [sp, #16]
 801b640:	2947      	cmp	r1, #71	; 0x47
 801b642:	d1c1      	bne.n	801b5c8 <_printf_float+0xd0>
 801b644:	2b00      	cmp	r3, #0
 801b646:	d1bf      	bne.n	801b5c8 <_printf_float+0xd0>
 801b648:	2301      	movs	r3, #1
 801b64a:	e7bc      	b.n	801b5c6 <_printf_float+0xce>
 801b64c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801b650:	d118      	bne.n	801b684 <_printf_float+0x18c>
 801b652:	2900      	cmp	r1, #0
 801b654:	6863      	ldr	r3, [r4, #4]
 801b656:	dd0b      	ble.n	801b670 <_printf_float+0x178>
 801b658:	6121      	str	r1, [r4, #16]
 801b65a:	b913      	cbnz	r3, 801b662 <_printf_float+0x16a>
 801b65c:	6822      	ldr	r2, [r4, #0]
 801b65e:	07d0      	lsls	r0, r2, #31
 801b660:	d502      	bpl.n	801b668 <_printf_float+0x170>
 801b662:	3301      	adds	r3, #1
 801b664:	440b      	add	r3, r1
 801b666:	6123      	str	r3, [r4, #16]
 801b668:	2300      	movs	r3, #0
 801b66a:	65a1      	str	r1, [r4, #88]	; 0x58
 801b66c:	9304      	str	r3, [sp, #16]
 801b66e:	e7de      	b.n	801b62e <_printf_float+0x136>
 801b670:	b913      	cbnz	r3, 801b678 <_printf_float+0x180>
 801b672:	6822      	ldr	r2, [r4, #0]
 801b674:	07d2      	lsls	r2, r2, #31
 801b676:	d501      	bpl.n	801b67c <_printf_float+0x184>
 801b678:	3302      	adds	r3, #2
 801b67a:	e7f4      	b.n	801b666 <_printf_float+0x16e>
 801b67c:	2301      	movs	r3, #1
 801b67e:	e7f2      	b.n	801b666 <_printf_float+0x16e>
 801b680:	f04f 0967 	mov.w	r9, #103	; 0x67
 801b684:	9b08      	ldr	r3, [sp, #32]
 801b686:	4299      	cmp	r1, r3
 801b688:	db05      	blt.n	801b696 <_printf_float+0x19e>
 801b68a:	6823      	ldr	r3, [r4, #0]
 801b68c:	6121      	str	r1, [r4, #16]
 801b68e:	07d8      	lsls	r0, r3, #31
 801b690:	d5ea      	bpl.n	801b668 <_printf_float+0x170>
 801b692:	1c4b      	adds	r3, r1, #1
 801b694:	e7e7      	b.n	801b666 <_printf_float+0x16e>
 801b696:	2900      	cmp	r1, #0
 801b698:	bfd4      	ite	le
 801b69a:	f1c1 0202 	rsble	r2, r1, #2
 801b69e:	2201      	movgt	r2, #1
 801b6a0:	4413      	add	r3, r2
 801b6a2:	e7e0      	b.n	801b666 <_printf_float+0x16e>
 801b6a4:	6823      	ldr	r3, [r4, #0]
 801b6a6:	055a      	lsls	r2, r3, #21
 801b6a8:	d407      	bmi.n	801b6ba <_printf_float+0x1c2>
 801b6aa:	6923      	ldr	r3, [r4, #16]
 801b6ac:	4642      	mov	r2, r8
 801b6ae:	4631      	mov	r1, r6
 801b6b0:	4628      	mov	r0, r5
 801b6b2:	47b8      	blx	r7
 801b6b4:	3001      	adds	r0, #1
 801b6b6:	d12a      	bne.n	801b70e <_printf_float+0x216>
 801b6b8:	e76a      	b.n	801b590 <_printf_float+0x98>
 801b6ba:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801b6be:	f240 80e0 	bls.w	801b882 <_printf_float+0x38a>
 801b6c2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801b6c6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b6ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6ce:	d133      	bne.n	801b738 <_printf_float+0x240>
 801b6d0:	4a37      	ldr	r2, [pc, #220]	; (801b7b0 <_printf_float+0x2b8>)
 801b6d2:	2301      	movs	r3, #1
 801b6d4:	4631      	mov	r1, r6
 801b6d6:	4628      	mov	r0, r5
 801b6d8:	47b8      	blx	r7
 801b6da:	3001      	adds	r0, #1
 801b6dc:	f43f af58 	beq.w	801b590 <_printf_float+0x98>
 801b6e0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b6e4:	429a      	cmp	r2, r3
 801b6e6:	db02      	blt.n	801b6ee <_printf_float+0x1f6>
 801b6e8:	6823      	ldr	r3, [r4, #0]
 801b6ea:	07d8      	lsls	r0, r3, #31
 801b6ec:	d50f      	bpl.n	801b70e <_printf_float+0x216>
 801b6ee:	4653      	mov	r3, sl
 801b6f0:	465a      	mov	r2, fp
 801b6f2:	4631      	mov	r1, r6
 801b6f4:	4628      	mov	r0, r5
 801b6f6:	47b8      	blx	r7
 801b6f8:	3001      	adds	r0, #1
 801b6fa:	f43f af49 	beq.w	801b590 <_printf_float+0x98>
 801b6fe:	f04f 0800 	mov.w	r8, #0
 801b702:	f104 091a 	add.w	r9, r4, #26
 801b706:	9b08      	ldr	r3, [sp, #32]
 801b708:	3b01      	subs	r3, #1
 801b70a:	4543      	cmp	r3, r8
 801b70c:	dc09      	bgt.n	801b722 <_printf_float+0x22a>
 801b70e:	6823      	ldr	r3, [r4, #0]
 801b710:	079b      	lsls	r3, r3, #30
 801b712:	f100 8106 	bmi.w	801b922 <_printf_float+0x42a>
 801b716:	68e0      	ldr	r0, [r4, #12]
 801b718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b71a:	4298      	cmp	r0, r3
 801b71c:	bfb8      	it	lt
 801b71e:	4618      	movlt	r0, r3
 801b720:	e738      	b.n	801b594 <_printf_float+0x9c>
 801b722:	2301      	movs	r3, #1
 801b724:	464a      	mov	r2, r9
 801b726:	4631      	mov	r1, r6
 801b728:	4628      	mov	r0, r5
 801b72a:	47b8      	blx	r7
 801b72c:	3001      	adds	r0, #1
 801b72e:	f43f af2f 	beq.w	801b590 <_printf_float+0x98>
 801b732:	f108 0801 	add.w	r8, r8, #1
 801b736:	e7e6      	b.n	801b706 <_printf_float+0x20e>
 801b738:	9b07      	ldr	r3, [sp, #28]
 801b73a:	2b00      	cmp	r3, #0
 801b73c:	dc3a      	bgt.n	801b7b4 <_printf_float+0x2bc>
 801b73e:	4a1c      	ldr	r2, [pc, #112]	; (801b7b0 <_printf_float+0x2b8>)
 801b740:	2301      	movs	r3, #1
 801b742:	4631      	mov	r1, r6
 801b744:	4628      	mov	r0, r5
 801b746:	47b8      	blx	r7
 801b748:	3001      	adds	r0, #1
 801b74a:	f43f af21 	beq.w	801b590 <_printf_float+0x98>
 801b74e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801b752:	4313      	orrs	r3, r2
 801b754:	d102      	bne.n	801b75c <_printf_float+0x264>
 801b756:	6823      	ldr	r3, [r4, #0]
 801b758:	07d9      	lsls	r1, r3, #31
 801b75a:	d5d8      	bpl.n	801b70e <_printf_float+0x216>
 801b75c:	4653      	mov	r3, sl
 801b75e:	465a      	mov	r2, fp
 801b760:	4631      	mov	r1, r6
 801b762:	4628      	mov	r0, r5
 801b764:	47b8      	blx	r7
 801b766:	3001      	adds	r0, #1
 801b768:	f43f af12 	beq.w	801b590 <_printf_float+0x98>
 801b76c:	f04f 0900 	mov.w	r9, #0
 801b770:	f104 0a1a 	add.w	sl, r4, #26
 801b774:	9b07      	ldr	r3, [sp, #28]
 801b776:	425b      	negs	r3, r3
 801b778:	454b      	cmp	r3, r9
 801b77a:	dc01      	bgt.n	801b780 <_printf_float+0x288>
 801b77c:	9b08      	ldr	r3, [sp, #32]
 801b77e:	e795      	b.n	801b6ac <_printf_float+0x1b4>
 801b780:	2301      	movs	r3, #1
 801b782:	4652      	mov	r2, sl
 801b784:	4631      	mov	r1, r6
 801b786:	4628      	mov	r0, r5
 801b788:	47b8      	blx	r7
 801b78a:	3001      	adds	r0, #1
 801b78c:	f43f af00 	beq.w	801b590 <_printf_float+0x98>
 801b790:	f109 0901 	add.w	r9, r9, #1
 801b794:	e7ee      	b.n	801b774 <_printf_float+0x27c>
 801b796:	bf00      	nop
 801b798:	ffffffff 	.word	0xffffffff
 801b79c:	7fefffff 	.word	0x7fefffff
 801b7a0:	08020988 	.word	0x08020988
 801b7a4:	0802098c 	.word	0x0802098c
 801b7a8:	08020990 	.word	0x08020990
 801b7ac:	08020994 	.word	0x08020994
 801b7b0:	08020d20 	.word	0x08020d20
 801b7b4:	9a08      	ldr	r2, [sp, #32]
 801b7b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b7b8:	429a      	cmp	r2, r3
 801b7ba:	bfa8      	it	ge
 801b7bc:	461a      	movge	r2, r3
 801b7be:	2a00      	cmp	r2, #0
 801b7c0:	4691      	mov	r9, r2
 801b7c2:	dc38      	bgt.n	801b836 <_printf_float+0x33e>
 801b7c4:	2300      	movs	r3, #0
 801b7c6:	9305      	str	r3, [sp, #20]
 801b7c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b7cc:	f104 021a 	add.w	r2, r4, #26
 801b7d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b7d2:	9905      	ldr	r1, [sp, #20]
 801b7d4:	9304      	str	r3, [sp, #16]
 801b7d6:	eba3 0309 	sub.w	r3, r3, r9
 801b7da:	428b      	cmp	r3, r1
 801b7dc:	dc33      	bgt.n	801b846 <_printf_float+0x34e>
 801b7de:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b7e2:	429a      	cmp	r2, r3
 801b7e4:	db3c      	blt.n	801b860 <_printf_float+0x368>
 801b7e6:	6823      	ldr	r3, [r4, #0]
 801b7e8:	07da      	lsls	r2, r3, #31
 801b7ea:	d439      	bmi.n	801b860 <_printf_float+0x368>
 801b7ec:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801b7f0:	eba2 0903 	sub.w	r9, r2, r3
 801b7f4:	9b04      	ldr	r3, [sp, #16]
 801b7f6:	1ad2      	subs	r2, r2, r3
 801b7f8:	4591      	cmp	r9, r2
 801b7fa:	bfa8      	it	ge
 801b7fc:	4691      	movge	r9, r2
 801b7fe:	f1b9 0f00 	cmp.w	r9, #0
 801b802:	dc35      	bgt.n	801b870 <_printf_float+0x378>
 801b804:	f04f 0800 	mov.w	r8, #0
 801b808:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b80c:	f104 0a1a 	add.w	sl, r4, #26
 801b810:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b814:	1a9b      	subs	r3, r3, r2
 801b816:	eba3 0309 	sub.w	r3, r3, r9
 801b81a:	4543      	cmp	r3, r8
 801b81c:	f77f af77 	ble.w	801b70e <_printf_float+0x216>
 801b820:	2301      	movs	r3, #1
 801b822:	4652      	mov	r2, sl
 801b824:	4631      	mov	r1, r6
 801b826:	4628      	mov	r0, r5
 801b828:	47b8      	blx	r7
 801b82a:	3001      	adds	r0, #1
 801b82c:	f43f aeb0 	beq.w	801b590 <_printf_float+0x98>
 801b830:	f108 0801 	add.w	r8, r8, #1
 801b834:	e7ec      	b.n	801b810 <_printf_float+0x318>
 801b836:	4613      	mov	r3, r2
 801b838:	4631      	mov	r1, r6
 801b83a:	4642      	mov	r2, r8
 801b83c:	4628      	mov	r0, r5
 801b83e:	47b8      	blx	r7
 801b840:	3001      	adds	r0, #1
 801b842:	d1bf      	bne.n	801b7c4 <_printf_float+0x2cc>
 801b844:	e6a4      	b.n	801b590 <_printf_float+0x98>
 801b846:	2301      	movs	r3, #1
 801b848:	4631      	mov	r1, r6
 801b84a:	4628      	mov	r0, r5
 801b84c:	9204      	str	r2, [sp, #16]
 801b84e:	47b8      	blx	r7
 801b850:	3001      	adds	r0, #1
 801b852:	f43f ae9d 	beq.w	801b590 <_printf_float+0x98>
 801b856:	9b05      	ldr	r3, [sp, #20]
 801b858:	9a04      	ldr	r2, [sp, #16]
 801b85a:	3301      	adds	r3, #1
 801b85c:	9305      	str	r3, [sp, #20]
 801b85e:	e7b7      	b.n	801b7d0 <_printf_float+0x2d8>
 801b860:	4653      	mov	r3, sl
 801b862:	465a      	mov	r2, fp
 801b864:	4631      	mov	r1, r6
 801b866:	4628      	mov	r0, r5
 801b868:	47b8      	blx	r7
 801b86a:	3001      	adds	r0, #1
 801b86c:	d1be      	bne.n	801b7ec <_printf_float+0x2f4>
 801b86e:	e68f      	b.n	801b590 <_printf_float+0x98>
 801b870:	9a04      	ldr	r2, [sp, #16]
 801b872:	464b      	mov	r3, r9
 801b874:	4442      	add	r2, r8
 801b876:	4631      	mov	r1, r6
 801b878:	4628      	mov	r0, r5
 801b87a:	47b8      	blx	r7
 801b87c:	3001      	adds	r0, #1
 801b87e:	d1c1      	bne.n	801b804 <_printf_float+0x30c>
 801b880:	e686      	b.n	801b590 <_printf_float+0x98>
 801b882:	9a08      	ldr	r2, [sp, #32]
 801b884:	2a01      	cmp	r2, #1
 801b886:	dc01      	bgt.n	801b88c <_printf_float+0x394>
 801b888:	07db      	lsls	r3, r3, #31
 801b88a:	d537      	bpl.n	801b8fc <_printf_float+0x404>
 801b88c:	2301      	movs	r3, #1
 801b88e:	4642      	mov	r2, r8
 801b890:	4631      	mov	r1, r6
 801b892:	4628      	mov	r0, r5
 801b894:	47b8      	blx	r7
 801b896:	3001      	adds	r0, #1
 801b898:	f43f ae7a 	beq.w	801b590 <_printf_float+0x98>
 801b89c:	4653      	mov	r3, sl
 801b89e:	465a      	mov	r2, fp
 801b8a0:	4631      	mov	r1, r6
 801b8a2:	4628      	mov	r0, r5
 801b8a4:	47b8      	blx	r7
 801b8a6:	3001      	adds	r0, #1
 801b8a8:	f43f ae72 	beq.w	801b590 <_printf_float+0x98>
 801b8ac:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801b8b0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b8b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8b8:	9b08      	ldr	r3, [sp, #32]
 801b8ba:	d01a      	beq.n	801b8f2 <_printf_float+0x3fa>
 801b8bc:	3b01      	subs	r3, #1
 801b8be:	f108 0201 	add.w	r2, r8, #1
 801b8c2:	4631      	mov	r1, r6
 801b8c4:	4628      	mov	r0, r5
 801b8c6:	47b8      	blx	r7
 801b8c8:	3001      	adds	r0, #1
 801b8ca:	d10e      	bne.n	801b8ea <_printf_float+0x3f2>
 801b8cc:	e660      	b.n	801b590 <_printf_float+0x98>
 801b8ce:	2301      	movs	r3, #1
 801b8d0:	464a      	mov	r2, r9
 801b8d2:	4631      	mov	r1, r6
 801b8d4:	4628      	mov	r0, r5
 801b8d6:	47b8      	blx	r7
 801b8d8:	3001      	adds	r0, #1
 801b8da:	f43f ae59 	beq.w	801b590 <_printf_float+0x98>
 801b8de:	f108 0801 	add.w	r8, r8, #1
 801b8e2:	9b08      	ldr	r3, [sp, #32]
 801b8e4:	3b01      	subs	r3, #1
 801b8e6:	4543      	cmp	r3, r8
 801b8e8:	dcf1      	bgt.n	801b8ce <_printf_float+0x3d6>
 801b8ea:	9b04      	ldr	r3, [sp, #16]
 801b8ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801b8f0:	e6dd      	b.n	801b6ae <_printf_float+0x1b6>
 801b8f2:	f04f 0800 	mov.w	r8, #0
 801b8f6:	f104 091a 	add.w	r9, r4, #26
 801b8fa:	e7f2      	b.n	801b8e2 <_printf_float+0x3ea>
 801b8fc:	2301      	movs	r3, #1
 801b8fe:	4642      	mov	r2, r8
 801b900:	e7df      	b.n	801b8c2 <_printf_float+0x3ca>
 801b902:	2301      	movs	r3, #1
 801b904:	464a      	mov	r2, r9
 801b906:	4631      	mov	r1, r6
 801b908:	4628      	mov	r0, r5
 801b90a:	47b8      	blx	r7
 801b90c:	3001      	adds	r0, #1
 801b90e:	f43f ae3f 	beq.w	801b590 <_printf_float+0x98>
 801b912:	f108 0801 	add.w	r8, r8, #1
 801b916:	68e3      	ldr	r3, [r4, #12]
 801b918:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b91a:	1a5b      	subs	r3, r3, r1
 801b91c:	4543      	cmp	r3, r8
 801b91e:	dcf0      	bgt.n	801b902 <_printf_float+0x40a>
 801b920:	e6f9      	b.n	801b716 <_printf_float+0x21e>
 801b922:	f04f 0800 	mov.w	r8, #0
 801b926:	f104 0919 	add.w	r9, r4, #25
 801b92a:	e7f4      	b.n	801b916 <_printf_float+0x41e>

0801b92c <_printf_common>:
 801b92c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b930:	4616      	mov	r6, r2
 801b932:	4699      	mov	r9, r3
 801b934:	688a      	ldr	r2, [r1, #8]
 801b936:	690b      	ldr	r3, [r1, #16]
 801b938:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b93c:	4293      	cmp	r3, r2
 801b93e:	bfb8      	it	lt
 801b940:	4613      	movlt	r3, r2
 801b942:	6033      	str	r3, [r6, #0]
 801b944:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b948:	4607      	mov	r7, r0
 801b94a:	460c      	mov	r4, r1
 801b94c:	b10a      	cbz	r2, 801b952 <_printf_common+0x26>
 801b94e:	3301      	adds	r3, #1
 801b950:	6033      	str	r3, [r6, #0]
 801b952:	6823      	ldr	r3, [r4, #0]
 801b954:	0699      	lsls	r1, r3, #26
 801b956:	bf42      	ittt	mi
 801b958:	6833      	ldrmi	r3, [r6, #0]
 801b95a:	3302      	addmi	r3, #2
 801b95c:	6033      	strmi	r3, [r6, #0]
 801b95e:	6825      	ldr	r5, [r4, #0]
 801b960:	f015 0506 	ands.w	r5, r5, #6
 801b964:	d106      	bne.n	801b974 <_printf_common+0x48>
 801b966:	f104 0a19 	add.w	sl, r4, #25
 801b96a:	68e3      	ldr	r3, [r4, #12]
 801b96c:	6832      	ldr	r2, [r6, #0]
 801b96e:	1a9b      	subs	r3, r3, r2
 801b970:	42ab      	cmp	r3, r5
 801b972:	dc26      	bgt.n	801b9c2 <_printf_common+0x96>
 801b974:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b978:	1e13      	subs	r3, r2, #0
 801b97a:	6822      	ldr	r2, [r4, #0]
 801b97c:	bf18      	it	ne
 801b97e:	2301      	movne	r3, #1
 801b980:	0692      	lsls	r2, r2, #26
 801b982:	d42b      	bmi.n	801b9dc <_printf_common+0xb0>
 801b984:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b988:	4649      	mov	r1, r9
 801b98a:	4638      	mov	r0, r7
 801b98c:	47c0      	blx	r8
 801b98e:	3001      	adds	r0, #1
 801b990:	d01e      	beq.n	801b9d0 <_printf_common+0xa4>
 801b992:	6823      	ldr	r3, [r4, #0]
 801b994:	6922      	ldr	r2, [r4, #16]
 801b996:	f003 0306 	and.w	r3, r3, #6
 801b99a:	2b04      	cmp	r3, #4
 801b99c:	bf02      	ittt	eq
 801b99e:	68e5      	ldreq	r5, [r4, #12]
 801b9a0:	6833      	ldreq	r3, [r6, #0]
 801b9a2:	1aed      	subeq	r5, r5, r3
 801b9a4:	68a3      	ldr	r3, [r4, #8]
 801b9a6:	bf0c      	ite	eq
 801b9a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b9ac:	2500      	movne	r5, #0
 801b9ae:	4293      	cmp	r3, r2
 801b9b0:	bfc4      	itt	gt
 801b9b2:	1a9b      	subgt	r3, r3, r2
 801b9b4:	18ed      	addgt	r5, r5, r3
 801b9b6:	2600      	movs	r6, #0
 801b9b8:	341a      	adds	r4, #26
 801b9ba:	42b5      	cmp	r5, r6
 801b9bc:	d11a      	bne.n	801b9f4 <_printf_common+0xc8>
 801b9be:	2000      	movs	r0, #0
 801b9c0:	e008      	b.n	801b9d4 <_printf_common+0xa8>
 801b9c2:	2301      	movs	r3, #1
 801b9c4:	4652      	mov	r2, sl
 801b9c6:	4649      	mov	r1, r9
 801b9c8:	4638      	mov	r0, r7
 801b9ca:	47c0      	blx	r8
 801b9cc:	3001      	adds	r0, #1
 801b9ce:	d103      	bne.n	801b9d8 <_printf_common+0xac>
 801b9d0:	f04f 30ff 	mov.w	r0, #4294967295
 801b9d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b9d8:	3501      	adds	r5, #1
 801b9da:	e7c6      	b.n	801b96a <_printf_common+0x3e>
 801b9dc:	18e1      	adds	r1, r4, r3
 801b9de:	1c5a      	adds	r2, r3, #1
 801b9e0:	2030      	movs	r0, #48	; 0x30
 801b9e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b9e6:	4422      	add	r2, r4
 801b9e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b9ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b9f0:	3302      	adds	r3, #2
 801b9f2:	e7c7      	b.n	801b984 <_printf_common+0x58>
 801b9f4:	2301      	movs	r3, #1
 801b9f6:	4622      	mov	r2, r4
 801b9f8:	4649      	mov	r1, r9
 801b9fa:	4638      	mov	r0, r7
 801b9fc:	47c0      	blx	r8
 801b9fe:	3001      	adds	r0, #1
 801ba00:	d0e6      	beq.n	801b9d0 <_printf_common+0xa4>
 801ba02:	3601      	adds	r6, #1
 801ba04:	e7d9      	b.n	801b9ba <_printf_common+0x8e>
	...

0801ba08 <_printf_i>:
 801ba08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ba0c:	7e0f      	ldrb	r7, [r1, #24]
 801ba0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ba10:	2f78      	cmp	r7, #120	; 0x78
 801ba12:	4691      	mov	r9, r2
 801ba14:	4680      	mov	r8, r0
 801ba16:	460c      	mov	r4, r1
 801ba18:	469a      	mov	sl, r3
 801ba1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801ba1e:	d807      	bhi.n	801ba30 <_printf_i+0x28>
 801ba20:	2f62      	cmp	r7, #98	; 0x62
 801ba22:	d80a      	bhi.n	801ba3a <_printf_i+0x32>
 801ba24:	2f00      	cmp	r7, #0
 801ba26:	f000 80d4 	beq.w	801bbd2 <_printf_i+0x1ca>
 801ba2a:	2f58      	cmp	r7, #88	; 0x58
 801ba2c:	f000 80c0 	beq.w	801bbb0 <_printf_i+0x1a8>
 801ba30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ba34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ba38:	e03a      	b.n	801bab0 <_printf_i+0xa8>
 801ba3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ba3e:	2b15      	cmp	r3, #21
 801ba40:	d8f6      	bhi.n	801ba30 <_printf_i+0x28>
 801ba42:	a101      	add	r1, pc, #4	; (adr r1, 801ba48 <_printf_i+0x40>)
 801ba44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ba48:	0801baa1 	.word	0x0801baa1
 801ba4c:	0801bab5 	.word	0x0801bab5
 801ba50:	0801ba31 	.word	0x0801ba31
 801ba54:	0801ba31 	.word	0x0801ba31
 801ba58:	0801ba31 	.word	0x0801ba31
 801ba5c:	0801ba31 	.word	0x0801ba31
 801ba60:	0801bab5 	.word	0x0801bab5
 801ba64:	0801ba31 	.word	0x0801ba31
 801ba68:	0801ba31 	.word	0x0801ba31
 801ba6c:	0801ba31 	.word	0x0801ba31
 801ba70:	0801ba31 	.word	0x0801ba31
 801ba74:	0801bbb9 	.word	0x0801bbb9
 801ba78:	0801bae1 	.word	0x0801bae1
 801ba7c:	0801bb73 	.word	0x0801bb73
 801ba80:	0801ba31 	.word	0x0801ba31
 801ba84:	0801ba31 	.word	0x0801ba31
 801ba88:	0801bbdb 	.word	0x0801bbdb
 801ba8c:	0801ba31 	.word	0x0801ba31
 801ba90:	0801bae1 	.word	0x0801bae1
 801ba94:	0801ba31 	.word	0x0801ba31
 801ba98:	0801ba31 	.word	0x0801ba31
 801ba9c:	0801bb7b 	.word	0x0801bb7b
 801baa0:	682b      	ldr	r3, [r5, #0]
 801baa2:	1d1a      	adds	r2, r3, #4
 801baa4:	681b      	ldr	r3, [r3, #0]
 801baa6:	602a      	str	r2, [r5, #0]
 801baa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801baac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801bab0:	2301      	movs	r3, #1
 801bab2:	e09f      	b.n	801bbf4 <_printf_i+0x1ec>
 801bab4:	6820      	ldr	r0, [r4, #0]
 801bab6:	682b      	ldr	r3, [r5, #0]
 801bab8:	0607      	lsls	r7, r0, #24
 801baba:	f103 0104 	add.w	r1, r3, #4
 801babe:	6029      	str	r1, [r5, #0]
 801bac0:	d501      	bpl.n	801bac6 <_printf_i+0xbe>
 801bac2:	681e      	ldr	r6, [r3, #0]
 801bac4:	e003      	b.n	801bace <_printf_i+0xc6>
 801bac6:	0646      	lsls	r6, r0, #25
 801bac8:	d5fb      	bpl.n	801bac2 <_printf_i+0xba>
 801baca:	f9b3 6000 	ldrsh.w	r6, [r3]
 801bace:	2e00      	cmp	r6, #0
 801bad0:	da03      	bge.n	801bada <_printf_i+0xd2>
 801bad2:	232d      	movs	r3, #45	; 0x2d
 801bad4:	4276      	negs	r6, r6
 801bad6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bada:	485a      	ldr	r0, [pc, #360]	; (801bc44 <_printf_i+0x23c>)
 801badc:	230a      	movs	r3, #10
 801bade:	e012      	b.n	801bb06 <_printf_i+0xfe>
 801bae0:	682b      	ldr	r3, [r5, #0]
 801bae2:	6820      	ldr	r0, [r4, #0]
 801bae4:	1d19      	adds	r1, r3, #4
 801bae6:	6029      	str	r1, [r5, #0]
 801bae8:	0605      	lsls	r5, r0, #24
 801baea:	d501      	bpl.n	801baf0 <_printf_i+0xe8>
 801baec:	681e      	ldr	r6, [r3, #0]
 801baee:	e002      	b.n	801baf6 <_printf_i+0xee>
 801baf0:	0641      	lsls	r1, r0, #25
 801baf2:	d5fb      	bpl.n	801baec <_printf_i+0xe4>
 801baf4:	881e      	ldrh	r6, [r3, #0]
 801baf6:	4853      	ldr	r0, [pc, #332]	; (801bc44 <_printf_i+0x23c>)
 801baf8:	2f6f      	cmp	r7, #111	; 0x6f
 801bafa:	bf0c      	ite	eq
 801bafc:	2308      	moveq	r3, #8
 801bafe:	230a      	movne	r3, #10
 801bb00:	2100      	movs	r1, #0
 801bb02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801bb06:	6865      	ldr	r5, [r4, #4]
 801bb08:	60a5      	str	r5, [r4, #8]
 801bb0a:	2d00      	cmp	r5, #0
 801bb0c:	bfa2      	ittt	ge
 801bb0e:	6821      	ldrge	r1, [r4, #0]
 801bb10:	f021 0104 	bicge.w	r1, r1, #4
 801bb14:	6021      	strge	r1, [r4, #0]
 801bb16:	b90e      	cbnz	r6, 801bb1c <_printf_i+0x114>
 801bb18:	2d00      	cmp	r5, #0
 801bb1a:	d04b      	beq.n	801bbb4 <_printf_i+0x1ac>
 801bb1c:	4615      	mov	r5, r2
 801bb1e:	fbb6 f1f3 	udiv	r1, r6, r3
 801bb22:	fb03 6711 	mls	r7, r3, r1, r6
 801bb26:	5dc7      	ldrb	r7, [r0, r7]
 801bb28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801bb2c:	4637      	mov	r7, r6
 801bb2e:	42bb      	cmp	r3, r7
 801bb30:	460e      	mov	r6, r1
 801bb32:	d9f4      	bls.n	801bb1e <_printf_i+0x116>
 801bb34:	2b08      	cmp	r3, #8
 801bb36:	d10b      	bne.n	801bb50 <_printf_i+0x148>
 801bb38:	6823      	ldr	r3, [r4, #0]
 801bb3a:	07de      	lsls	r6, r3, #31
 801bb3c:	d508      	bpl.n	801bb50 <_printf_i+0x148>
 801bb3e:	6923      	ldr	r3, [r4, #16]
 801bb40:	6861      	ldr	r1, [r4, #4]
 801bb42:	4299      	cmp	r1, r3
 801bb44:	bfde      	ittt	le
 801bb46:	2330      	movle	r3, #48	; 0x30
 801bb48:	f805 3c01 	strble.w	r3, [r5, #-1]
 801bb4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801bb50:	1b52      	subs	r2, r2, r5
 801bb52:	6122      	str	r2, [r4, #16]
 801bb54:	f8cd a000 	str.w	sl, [sp]
 801bb58:	464b      	mov	r3, r9
 801bb5a:	aa03      	add	r2, sp, #12
 801bb5c:	4621      	mov	r1, r4
 801bb5e:	4640      	mov	r0, r8
 801bb60:	f7ff fee4 	bl	801b92c <_printf_common>
 801bb64:	3001      	adds	r0, #1
 801bb66:	d14a      	bne.n	801bbfe <_printf_i+0x1f6>
 801bb68:	f04f 30ff 	mov.w	r0, #4294967295
 801bb6c:	b004      	add	sp, #16
 801bb6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bb72:	6823      	ldr	r3, [r4, #0]
 801bb74:	f043 0320 	orr.w	r3, r3, #32
 801bb78:	6023      	str	r3, [r4, #0]
 801bb7a:	4833      	ldr	r0, [pc, #204]	; (801bc48 <_printf_i+0x240>)
 801bb7c:	2778      	movs	r7, #120	; 0x78
 801bb7e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801bb82:	6823      	ldr	r3, [r4, #0]
 801bb84:	6829      	ldr	r1, [r5, #0]
 801bb86:	061f      	lsls	r7, r3, #24
 801bb88:	f851 6b04 	ldr.w	r6, [r1], #4
 801bb8c:	d402      	bmi.n	801bb94 <_printf_i+0x18c>
 801bb8e:	065f      	lsls	r7, r3, #25
 801bb90:	bf48      	it	mi
 801bb92:	b2b6      	uxthmi	r6, r6
 801bb94:	07df      	lsls	r7, r3, #31
 801bb96:	bf48      	it	mi
 801bb98:	f043 0320 	orrmi.w	r3, r3, #32
 801bb9c:	6029      	str	r1, [r5, #0]
 801bb9e:	bf48      	it	mi
 801bba0:	6023      	strmi	r3, [r4, #0]
 801bba2:	b91e      	cbnz	r6, 801bbac <_printf_i+0x1a4>
 801bba4:	6823      	ldr	r3, [r4, #0]
 801bba6:	f023 0320 	bic.w	r3, r3, #32
 801bbaa:	6023      	str	r3, [r4, #0]
 801bbac:	2310      	movs	r3, #16
 801bbae:	e7a7      	b.n	801bb00 <_printf_i+0xf8>
 801bbb0:	4824      	ldr	r0, [pc, #144]	; (801bc44 <_printf_i+0x23c>)
 801bbb2:	e7e4      	b.n	801bb7e <_printf_i+0x176>
 801bbb4:	4615      	mov	r5, r2
 801bbb6:	e7bd      	b.n	801bb34 <_printf_i+0x12c>
 801bbb8:	682b      	ldr	r3, [r5, #0]
 801bbba:	6826      	ldr	r6, [r4, #0]
 801bbbc:	6961      	ldr	r1, [r4, #20]
 801bbbe:	1d18      	adds	r0, r3, #4
 801bbc0:	6028      	str	r0, [r5, #0]
 801bbc2:	0635      	lsls	r5, r6, #24
 801bbc4:	681b      	ldr	r3, [r3, #0]
 801bbc6:	d501      	bpl.n	801bbcc <_printf_i+0x1c4>
 801bbc8:	6019      	str	r1, [r3, #0]
 801bbca:	e002      	b.n	801bbd2 <_printf_i+0x1ca>
 801bbcc:	0670      	lsls	r0, r6, #25
 801bbce:	d5fb      	bpl.n	801bbc8 <_printf_i+0x1c0>
 801bbd0:	8019      	strh	r1, [r3, #0]
 801bbd2:	2300      	movs	r3, #0
 801bbd4:	6123      	str	r3, [r4, #16]
 801bbd6:	4615      	mov	r5, r2
 801bbd8:	e7bc      	b.n	801bb54 <_printf_i+0x14c>
 801bbda:	682b      	ldr	r3, [r5, #0]
 801bbdc:	1d1a      	adds	r2, r3, #4
 801bbde:	602a      	str	r2, [r5, #0]
 801bbe0:	681d      	ldr	r5, [r3, #0]
 801bbe2:	6862      	ldr	r2, [r4, #4]
 801bbe4:	2100      	movs	r1, #0
 801bbe6:	4628      	mov	r0, r5
 801bbe8:	f7e4 fba2 	bl	8000330 <memchr>
 801bbec:	b108      	cbz	r0, 801bbf2 <_printf_i+0x1ea>
 801bbee:	1b40      	subs	r0, r0, r5
 801bbf0:	6060      	str	r0, [r4, #4]
 801bbf2:	6863      	ldr	r3, [r4, #4]
 801bbf4:	6123      	str	r3, [r4, #16]
 801bbf6:	2300      	movs	r3, #0
 801bbf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bbfc:	e7aa      	b.n	801bb54 <_printf_i+0x14c>
 801bbfe:	6923      	ldr	r3, [r4, #16]
 801bc00:	462a      	mov	r2, r5
 801bc02:	4649      	mov	r1, r9
 801bc04:	4640      	mov	r0, r8
 801bc06:	47d0      	blx	sl
 801bc08:	3001      	adds	r0, #1
 801bc0a:	d0ad      	beq.n	801bb68 <_printf_i+0x160>
 801bc0c:	6823      	ldr	r3, [r4, #0]
 801bc0e:	079b      	lsls	r3, r3, #30
 801bc10:	d413      	bmi.n	801bc3a <_printf_i+0x232>
 801bc12:	68e0      	ldr	r0, [r4, #12]
 801bc14:	9b03      	ldr	r3, [sp, #12]
 801bc16:	4298      	cmp	r0, r3
 801bc18:	bfb8      	it	lt
 801bc1a:	4618      	movlt	r0, r3
 801bc1c:	e7a6      	b.n	801bb6c <_printf_i+0x164>
 801bc1e:	2301      	movs	r3, #1
 801bc20:	4632      	mov	r2, r6
 801bc22:	4649      	mov	r1, r9
 801bc24:	4640      	mov	r0, r8
 801bc26:	47d0      	blx	sl
 801bc28:	3001      	adds	r0, #1
 801bc2a:	d09d      	beq.n	801bb68 <_printf_i+0x160>
 801bc2c:	3501      	adds	r5, #1
 801bc2e:	68e3      	ldr	r3, [r4, #12]
 801bc30:	9903      	ldr	r1, [sp, #12]
 801bc32:	1a5b      	subs	r3, r3, r1
 801bc34:	42ab      	cmp	r3, r5
 801bc36:	dcf2      	bgt.n	801bc1e <_printf_i+0x216>
 801bc38:	e7eb      	b.n	801bc12 <_printf_i+0x20a>
 801bc3a:	2500      	movs	r5, #0
 801bc3c:	f104 0619 	add.w	r6, r4, #25
 801bc40:	e7f5      	b.n	801bc2e <_printf_i+0x226>
 801bc42:	bf00      	nop
 801bc44:	08020998 	.word	0x08020998
 801bc48:	080209a9 	.word	0x080209a9

0801bc4c <_scanf_float>:
 801bc4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc50:	b087      	sub	sp, #28
 801bc52:	4617      	mov	r7, r2
 801bc54:	9303      	str	r3, [sp, #12]
 801bc56:	688b      	ldr	r3, [r1, #8]
 801bc58:	1e5a      	subs	r2, r3, #1
 801bc5a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801bc5e:	bf83      	ittte	hi
 801bc60:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801bc64:	195b      	addhi	r3, r3, r5
 801bc66:	9302      	strhi	r3, [sp, #8]
 801bc68:	2300      	movls	r3, #0
 801bc6a:	bf86      	itte	hi
 801bc6c:	f240 135d 	movwhi	r3, #349	; 0x15d
 801bc70:	608b      	strhi	r3, [r1, #8]
 801bc72:	9302      	strls	r3, [sp, #8]
 801bc74:	680b      	ldr	r3, [r1, #0]
 801bc76:	468b      	mov	fp, r1
 801bc78:	2500      	movs	r5, #0
 801bc7a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801bc7e:	f84b 3b1c 	str.w	r3, [fp], #28
 801bc82:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801bc86:	4680      	mov	r8, r0
 801bc88:	460c      	mov	r4, r1
 801bc8a:	465e      	mov	r6, fp
 801bc8c:	46aa      	mov	sl, r5
 801bc8e:	46a9      	mov	r9, r5
 801bc90:	9501      	str	r5, [sp, #4]
 801bc92:	68a2      	ldr	r2, [r4, #8]
 801bc94:	b152      	cbz	r2, 801bcac <_scanf_float+0x60>
 801bc96:	683b      	ldr	r3, [r7, #0]
 801bc98:	781b      	ldrb	r3, [r3, #0]
 801bc9a:	2b4e      	cmp	r3, #78	; 0x4e
 801bc9c:	d864      	bhi.n	801bd68 <_scanf_float+0x11c>
 801bc9e:	2b40      	cmp	r3, #64	; 0x40
 801bca0:	d83c      	bhi.n	801bd1c <_scanf_float+0xd0>
 801bca2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801bca6:	b2c8      	uxtb	r0, r1
 801bca8:	280e      	cmp	r0, #14
 801bcaa:	d93a      	bls.n	801bd22 <_scanf_float+0xd6>
 801bcac:	f1b9 0f00 	cmp.w	r9, #0
 801bcb0:	d003      	beq.n	801bcba <_scanf_float+0x6e>
 801bcb2:	6823      	ldr	r3, [r4, #0]
 801bcb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801bcb8:	6023      	str	r3, [r4, #0]
 801bcba:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bcbe:	f1ba 0f01 	cmp.w	sl, #1
 801bcc2:	f200 8113 	bhi.w	801beec <_scanf_float+0x2a0>
 801bcc6:	455e      	cmp	r6, fp
 801bcc8:	f200 8105 	bhi.w	801bed6 <_scanf_float+0x28a>
 801bccc:	2501      	movs	r5, #1
 801bcce:	4628      	mov	r0, r5
 801bcd0:	b007      	add	sp, #28
 801bcd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bcd6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801bcda:	2a0d      	cmp	r2, #13
 801bcdc:	d8e6      	bhi.n	801bcac <_scanf_float+0x60>
 801bcde:	a101      	add	r1, pc, #4	; (adr r1, 801bce4 <_scanf_float+0x98>)
 801bce0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801bce4:	0801be23 	.word	0x0801be23
 801bce8:	0801bcad 	.word	0x0801bcad
 801bcec:	0801bcad 	.word	0x0801bcad
 801bcf0:	0801bcad 	.word	0x0801bcad
 801bcf4:	0801be83 	.word	0x0801be83
 801bcf8:	0801be5b 	.word	0x0801be5b
 801bcfc:	0801bcad 	.word	0x0801bcad
 801bd00:	0801bcad 	.word	0x0801bcad
 801bd04:	0801be31 	.word	0x0801be31
 801bd08:	0801bcad 	.word	0x0801bcad
 801bd0c:	0801bcad 	.word	0x0801bcad
 801bd10:	0801bcad 	.word	0x0801bcad
 801bd14:	0801bcad 	.word	0x0801bcad
 801bd18:	0801bde9 	.word	0x0801bde9
 801bd1c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801bd20:	e7db      	b.n	801bcda <_scanf_float+0x8e>
 801bd22:	290e      	cmp	r1, #14
 801bd24:	d8c2      	bhi.n	801bcac <_scanf_float+0x60>
 801bd26:	a001      	add	r0, pc, #4	; (adr r0, 801bd2c <_scanf_float+0xe0>)
 801bd28:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801bd2c:	0801bddb 	.word	0x0801bddb
 801bd30:	0801bcad 	.word	0x0801bcad
 801bd34:	0801bddb 	.word	0x0801bddb
 801bd38:	0801be6f 	.word	0x0801be6f
 801bd3c:	0801bcad 	.word	0x0801bcad
 801bd40:	0801bd89 	.word	0x0801bd89
 801bd44:	0801bdc5 	.word	0x0801bdc5
 801bd48:	0801bdc5 	.word	0x0801bdc5
 801bd4c:	0801bdc5 	.word	0x0801bdc5
 801bd50:	0801bdc5 	.word	0x0801bdc5
 801bd54:	0801bdc5 	.word	0x0801bdc5
 801bd58:	0801bdc5 	.word	0x0801bdc5
 801bd5c:	0801bdc5 	.word	0x0801bdc5
 801bd60:	0801bdc5 	.word	0x0801bdc5
 801bd64:	0801bdc5 	.word	0x0801bdc5
 801bd68:	2b6e      	cmp	r3, #110	; 0x6e
 801bd6a:	d809      	bhi.n	801bd80 <_scanf_float+0x134>
 801bd6c:	2b60      	cmp	r3, #96	; 0x60
 801bd6e:	d8b2      	bhi.n	801bcd6 <_scanf_float+0x8a>
 801bd70:	2b54      	cmp	r3, #84	; 0x54
 801bd72:	d077      	beq.n	801be64 <_scanf_float+0x218>
 801bd74:	2b59      	cmp	r3, #89	; 0x59
 801bd76:	d199      	bne.n	801bcac <_scanf_float+0x60>
 801bd78:	2d07      	cmp	r5, #7
 801bd7a:	d197      	bne.n	801bcac <_scanf_float+0x60>
 801bd7c:	2508      	movs	r5, #8
 801bd7e:	e029      	b.n	801bdd4 <_scanf_float+0x188>
 801bd80:	2b74      	cmp	r3, #116	; 0x74
 801bd82:	d06f      	beq.n	801be64 <_scanf_float+0x218>
 801bd84:	2b79      	cmp	r3, #121	; 0x79
 801bd86:	e7f6      	b.n	801bd76 <_scanf_float+0x12a>
 801bd88:	6821      	ldr	r1, [r4, #0]
 801bd8a:	05c8      	lsls	r0, r1, #23
 801bd8c:	d51a      	bpl.n	801bdc4 <_scanf_float+0x178>
 801bd8e:	9b02      	ldr	r3, [sp, #8]
 801bd90:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801bd94:	6021      	str	r1, [r4, #0]
 801bd96:	f109 0901 	add.w	r9, r9, #1
 801bd9a:	b11b      	cbz	r3, 801bda4 <_scanf_float+0x158>
 801bd9c:	3b01      	subs	r3, #1
 801bd9e:	3201      	adds	r2, #1
 801bda0:	9302      	str	r3, [sp, #8]
 801bda2:	60a2      	str	r2, [r4, #8]
 801bda4:	68a3      	ldr	r3, [r4, #8]
 801bda6:	3b01      	subs	r3, #1
 801bda8:	60a3      	str	r3, [r4, #8]
 801bdaa:	6923      	ldr	r3, [r4, #16]
 801bdac:	3301      	adds	r3, #1
 801bdae:	6123      	str	r3, [r4, #16]
 801bdb0:	687b      	ldr	r3, [r7, #4]
 801bdb2:	3b01      	subs	r3, #1
 801bdb4:	2b00      	cmp	r3, #0
 801bdb6:	607b      	str	r3, [r7, #4]
 801bdb8:	f340 8084 	ble.w	801bec4 <_scanf_float+0x278>
 801bdbc:	683b      	ldr	r3, [r7, #0]
 801bdbe:	3301      	adds	r3, #1
 801bdc0:	603b      	str	r3, [r7, #0]
 801bdc2:	e766      	b.n	801bc92 <_scanf_float+0x46>
 801bdc4:	eb1a 0f05 	cmn.w	sl, r5
 801bdc8:	f47f af70 	bne.w	801bcac <_scanf_float+0x60>
 801bdcc:	6822      	ldr	r2, [r4, #0]
 801bdce:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801bdd2:	6022      	str	r2, [r4, #0]
 801bdd4:	f806 3b01 	strb.w	r3, [r6], #1
 801bdd8:	e7e4      	b.n	801bda4 <_scanf_float+0x158>
 801bdda:	6822      	ldr	r2, [r4, #0]
 801bddc:	0610      	lsls	r0, r2, #24
 801bdde:	f57f af65 	bpl.w	801bcac <_scanf_float+0x60>
 801bde2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801bde6:	e7f4      	b.n	801bdd2 <_scanf_float+0x186>
 801bde8:	f1ba 0f00 	cmp.w	sl, #0
 801bdec:	d10e      	bne.n	801be0c <_scanf_float+0x1c0>
 801bdee:	f1b9 0f00 	cmp.w	r9, #0
 801bdf2:	d10e      	bne.n	801be12 <_scanf_float+0x1c6>
 801bdf4:	6822      	ldr	r2, [r4, #0]
 801bdf6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801bdfa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801bdfe:	d108      	bne.n	801be12 <_scanf_float+0x1c6>
 801be00:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801be04:	6022      	str	r2, [r4, #0]
 801be06:	f04f 0a01 	mov.w	sl, #1
 801be0a:	e7e3      	b.n	801bdd4 <_scanf_float+0x188>
 801be0c:	f1ba 0f02 	cmp.w	sl, #2
 801be10:	d055      	beq.n	801bebe <_scanf_float+0x272>
 801be12:	2d01      	cmp	r5, #1
 801be14:	d002      	beq.n	801be1c <_scanf_float+0x1d0>
 801be16:	2d04      	cmp	r5, #4
 801be18:	f47f af48 	bne.w	801bcac <_scanf_float+0x60>
 801be1c:	3501      	adds	r5, #1
 801be1e:	b2ed      	uxtb	r5, r5
 801be20:	e7d8      	b.n	801bdd4 <_scanf_float+0x188>
 801be22:	f1ba 0f01 	cmp.w	sl, #1
 801be26:	f47f af41 	bne.w	801bcac <_scanf_float+0x60>
 801be2a:	f04f 0a02 	mov.w	sl, #2
 801be2e:	e7d1      	b.n	801bdd4 <_scanf_float+0x188>
 801be30:	b97d      	cbnz	r5, 801be52 <_scanf_float+0x206>
 801be32:	f1b9 0f00 	cmp.w	r9, #0
 801be36:	f47f af3c 	bne.w	801bcb2 <_scanf_float+0x66>
 801be3a:	6822      	ldr	r2, [r4, #0]
 801be3c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801be40:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801be44:	f47f af39 	bne.w	801bcba <_scanf_float+0x6e>
 801be48:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801be4c:	6022      	str	r2, [r4, #0]
 801be4e:	2501      	movs	r5, #1
 801be50:	e7c0      	b.n	801bdd4 <_scanf_float+0x188>
 801be52:	2d03      	cmp	r5, #3
 801be54:	d0e2      	beq.n	801be1c <_scanf_float+0x1d0>
 801be56:	2d05      	cmp	r5, #5
 801be58:	e7de      	b.n	801be18 <_scanf_float+0x1cc>
 801be5a:	2d02      	cmp	r5, #2
 801be5c:	f47f af26 	bne.w	801bcac <_scanf_float+0x60>
 801be60:	2503      	movs	r5, #3
 801be62:	e7b7      	b.n	801bdd4 <_scanf_float+0x188>
 801be64:	2d06      	cmp	r5, #6
 801be66:	f47f af21 	bne.w	801bcac <_scanf_float+0x60>
 801be6a:	2507      	movs	r5, #7
 801be6c:	e7b2      	b.n	801bdd4 <_scanf_float+0x188>
 801be6e:	6822      	ldr	r2, [r4, #0]
 801be70:	0591      	lsls	r1, r2, #22
 801be72:	f57f af1b 	bpl.w	801bcac <_scanf_float+0x60>
 801be76:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801be7a:	6022      	str	r2, [r4, #0]
 801be7c:	f8cd 9004 	str.w	r9, [sp, #4]
 801be80:	e7a8      	b.n	801bdd4 <_scanf_float+0x188>
 801be82:	6822      	ldr	r2, [r4, #0]
 801be84:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801be88:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801be8c:	d006      	beq.n	801be9c <_scanf_float+0x250>
 801be8e:	0550      	lsls	r0, r2, #21
 801be90:	f57f af0c 	bpl.w	801bcac <_scanf_float+0x60>
 801be94:	f1b9 0f00 	cmp.w	r9, #0
 801be98:	f43f af0f 	beq.w	801bcba <_scanf_float+0x6e>
 801be9c:	0591      	lsls	r1, r2, #22
 801be9e:	bf58      	it	pl
 801bea0:	9901      	ldrpl	r1, [sp, #4]
 801bea2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801bea6:	bf58      	it	pl
 801bea8:	eba9 0101 	subpl.w	r1, r9, r1
 801beac:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801beb0:	bf58      	it	pl
 801beb2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801beb6:	6022      	str	r2, [r4, #0]
 801beb8:	f04f 0900 	mov.w	r9, #0
 801bebc:	e78a      	b.n	801bdd4 <_scanf_float+0x188>
 801bebe:	f04f 0a03 	mov.w	sl, #3
 801bec2:	e787      	b.n	801bdd4 <_scanf_float+0x188>
 801bec4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801bec8:	4639      	mov	r1, r7
 801beca:	4640      	mov	r0, r8
 801becc:	4798      	blx	r3
 801bece:	2800      	cmp	r0, #0
 801bed0:	f43f aedf 	beq.w	801bc92 <_scanf_float+0x46>
 801bed4:	e6ea      	b.n	801bcac <_scanf_float+0x60>
 801bed6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801beda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801bede:	463a      	mov	r2, r7
 801bee0:	4640      	mov	r0, r8
 801bee2:	4798      	blx	r3
 801bee4:	6923      	ldr	r3, [r4, #16]
 801bee6:	3b01      	subs	r3, #1
 801bee8:	6123      	str	r3, [r4, #16]
 801beea:	e6ec      	b.n	801bcc6 <_scanf_float+0x7a>
 801beec:	1e6b      	subs	r3, r5, #1
 801beee:	2b06      	cmp	r3, #6
 801bef0:	d825      	bhi.n	801bf3e <_scanf_float+0x2f2>
 801bef2:	2d02      	cmp	r5, #2
 801bef4:	d836      	bhi.n	801bf64 <_scanf_float+0x318>
 801bef6:	455e      	cmp	r6, fp
 801bef8:	f67f aee8 	bls.w	801bccc <_scanf_float+0x80>
 801befc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bf00:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801bf04:	463a      	mov	r2, r7
 801bf06:	4640      	mov	r0, r8
 801bf08:	4798      	blx	r3
 801bf0a:	6923      	ldr	r3, [r4, #16]
 801bf0c:	3b01      	subs	r3, #1
 801bf0e:	6123      	str	r3, [r4, #16]
 801bf10:	e7f1      	b.n	801bef6 <_scanf_float+0x2aa>
 801bf12:	9802      	ldr	r0, [sp, #8]
 801bf14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bf18:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801bf1c:	9002      	str	r0, [sp, #8]
 801bf1e:	463a      	mov	r2, r7
 801bf20:	4640      	mov	r0, r8
 801bf22:	4798      	blx	r3
 801bf24:	6923      	ldr	r3, [r4, #16]
 801bf26:	3b01      	subs	r3, #1
 801bf28:	6123      	str	r3, [r4, #16]
 801bf2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bf2e:	fa5f fa8a 	uxtb.w	sl, sl
 801bf32:	f1ba 0f02 	cmp.w	sl, #2
 801bf36:	d1ec      	bne.n	801bf12 <_scanf_float+0x2c6>
 801bf38:	3d03      	subs	r5, #3
 801bf3a:	b2ed      	uxtb	r5, r5
 801bf3c:	1b76      	subs	r6, r6, r5
 801bf3e:	6823      	ldr	r3, [r4, #0]
 801bf40:	05da      	lsls	r2, r3, #23
 801bf42:	d52f      	bpl.n	801bfa4 <_scanf_float+0x358>
 801bf44:	055b      	lsls	r3, r3, #21
 801bf46:	d510      	bpl.n	801bf6a <_scanf_float+0x31e>
 801bf48:	455e      	cmp	r6, fp
 801bf4a:	f67f aebf 	bls.w	801bccc <_scanf_float+0x80>
 801bf4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bf52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801bf56:	463a      	mov	r2, r7
 801bf58:	4640      	mov	r0, r8
 801bf5a:	4798      	blx	r3
 801bf5c:	6923      	ldr	r3, [r4, #16]
 801bf5e:	3b01      	subs	r3, #1
 801bf60:	6123      	str	r3, [r4, #16]
 801bf62:	e7f1      	b.n	801bf48 <_scanf_float+0x2fc>
 801bf64:	46aa      	mov	sl, r5
 801bf66:	9602      	str	r6, [sp, #8]
 801bf68:	e7df      	b.n	801bf2a <_scanf_float+0x2de>
 801bf6a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801bf6e:	6923      	ldr	r3, [r4, #16]
 801bf70:	2965      	cmp	r1, #101	; 0x65
 801bf72:	f103 33ff 	add.w	r3, r3, #4294967295
 801bf76:	f106 35ff 	add.w	r5, r6, #4294967295
 801bf7a:	6123      	str	r3, [r4, #16]
 801bf7c:	d00c      	beq.n	801bf98 <_scanf_float+0x34c>
 801bf7e:	2945      	cmp	r1, #69	; 0x45
 801bf80:	d00a      	beq.n	801bf98 <_scanf_float+0x34c>
 801bf82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bf86:	463a      	mov	r2, r7
 801bf88:	4640      	mov	r0, r8
 801bf8a:	4798      	blx	r3
 801bf8c:	6923      	ldr	r3, [r4, #16]
 801bf8e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801bf92:	3b01      	subs	r3, #1
 801bf94:	1eb5      	subs	r5, r6, #2
 801bf96:	6123      	str	r3, [r4, #16]
 801bf98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bf9c:	463a      	mov	r2, r7
 801bf9e:	4640      	mov	r0, r8
 801bfa0:	4798      	blx	r3
 801bfa2:	462e      	mov	r6, r5
 801bfa4:	6825      	ldr	r5, [r4, #0]
 801bfa6:	f015 0510 	ands.w	r5, r5, #16
 801bfaa:	d14d      	bne.n	801c048 <_scanf_float+0x3fc>
 801bfac:	7035      	strb	r5, [r6, #0]
 801bfae:	6823      	ldr	r3, [r4, #0]
 801bfb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801bfb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801bfb8:	d11a      	bne.n	801bff0 <_scanf_float+0x3a4>
 801bfba:	9b01      	ldr	r3, [sp, #4]
 801bfbc:	454b      	cmp	r3, r9
 801bfbe:	eba3 0209 	sub.w	r2, r3, r9
 801bfc2:	d122      	bne.n	801c00a <_scanf_float+0x3be>
 801bfc4:	2200      	movs	r2, #0
 801bfc6:	4659      	mov	r1, fp
 801bfc8:	4640      	mov	r0, r8
 801bfca:	f002 fb9f 	bl	801e70c <_strtod_r>
 801bfce:	9b03      	ldr	r3, [sp, #12]
 801bfd0:	6821      	ldr	r1, [r4, #0]
 801bfd2:	681b      	ldr	r3, [r3, #0]
 801bfd4:	f011 0f02 	tst.w	r1, #2
 801bfd8:	f103 0204 	add.w	r2, r3, #4
 801bfdc:	d020      	beq.n	801c020 <_scanf_float+0x3d4>
 801bfde:	9903      	ldr	r1, [sp, #12]
 801bfe0:	600a      	str	r2, [r1, #0]
 801bfe2:	681b      	ldr	r3, [r3, #0]
 801bfe4:	ed83 0b00 	vstr	d0, [r3]
 801bfe8:	68e3      	ldr	r3, [r4, #12]
 801bfea:	3301      	adds	r3, #1
 801bfec:	60e3      	str	r3, [r4, #12]
 801bfee:	e66e      	b.n	801bcce <_scanf_float+0x82>
 801bff0:	9b04      	ldr	r3, [sp, #16]
 801bff2:	2b00      	cmp	r3, #0
 801bff4:	d0e6      	beq.n	801bfc4 <_scanf_float+0x378>
 801bff6:	9905      	ldr	r1, [sp, #20]
 801bff8:	230a      	movs	r3, #10
 801bffa:	462a      	mov	r2, r5
 801bffc:	3101      	adds	r1, #1
 801bffe:	4640      	mov	r0, r8
 801c000:	f002 fc0c 	bl	801e81c <_strtol_r>
 801c004:	9b04      	ldr	r3, [sp, #16]
 801c006:	9e05      	ldr	r6, [sp, #20]
 801c008:	1ac2      	subs	r2, r0, r3
 801c00a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801c00e:	429e      	cmp	r6, r3
 801c010:	bf28      	it	cs
 801c012:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801c016:	490d      	ldr	r1, [pc, #52]	; (801c04c <_scanf_float+0x400>)
 801c018:	4630      	mov	r0, r6
 801c01a:	f000 f8dd 	bl	801c1d8 <siprintf>
 801c01e:	e7d1      	b.n	801bfc4 <_scanf_float+0x378>
 801c020:	f011 0f04 	tst.w	r1, #4
 801c024:	9903      	ldr	r1, [sp, #12]
 801c026:	600a      	str	r2, [r1, #0]
 801c028:	d1db      	bne.n	801bfe2 <_scanf_float+0x396>
 801c02a:	eeb4 0b40 	vcmp.f64	d0, d0
 801c02e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c032:	681e      	ldr	r6, [r3, #0]
 801c034:	d705      	bvc.n	801c042 <_scanf_float+0x3f6>
 801c036:	4806      	ldr	r0, [pc, #24]	; (801c050 <_scanf_float+0x404>)
 801c038:	f000 f9f6 	bl	801c428 <nanf>
 801c03c:	ed86 0a00 	vstr	s0, [r6]
 801c040:	e7d2      	b.n	801bfe8 <_scanf_float+0x39c>
 801c042:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801c046:	e7f9      	b.n	801c03c <_scanf_float+0x3f0>
 801c048:	2500      	movs	r5, #0
 801c04a:	e640      	b.n	801bcce <_scanf_float+0x82>
 801c04c:	080209ba 	.word	0x080209ba
 801c050:	08020d68 	.word	0x08020d68

0801c054 <std>:
 801c054:	2300      	movs	r3, #0
 801c056:	b510      	push	{r4, lr}
 801c058:	4604      	mov	r4, r0
 801c05a:	e9c0 3300 	strd	r3, r3, [r0]
 801c05e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c062:	6083      	str	r3, [r0, #8]
 801c064:	8181      	strh	r1, [r0, #12]
 801c066:	6643      	str	r3, [r0, #100]	; 0x64
 801c068:	81c2      	strh	r2, [r0, #14]
 801c06a:	6183      	str	r3, [r0, #24]
 801c06c:	4619      	mov	r1, r3
 801c06e:	2208      	movs	r2, #8
 801c070:	305c      	adds	r0, #92	; 0x5c
 801c072:	f000 f942 	bl	801c2fa <memset>
 801c076:	4b0d      	ldr	r3, [pc, #52]	; (801c0ac <std+0x58>)
 801c078:	6263      	str	r3, [r4, #36]	; 0x24
 801c07a:	4b0d      	ldr	r3, [pc, #52]	; (801c0b0 <std+0x5c>)
 801c07c:	62a3      	str	r3, [r4, #40]	; 0x28
 801c07e:	4b0d      	ldr	r3, [pc, #52]	; (801c0b4 <std+0x60>)
 801c080:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c082:	4b0d      	ldr	r3, [pc, #52]	; (801c0b8 <std+0x64>)
 801c084:	6323      	str	r3, [r4, #48]	; 0x30
 801c086:	4b0d      	ldr	r3, [pc, #52]	; (801c0bc <std+0x68>)
 801c088:	6224      	str	r4, [r4, #32]
 801c08a:	429c      	cmp	r4, r3
 801c08c:	d006      	beq.n	801c09c <std+0x48>
 801c08e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801c092:	4294      	cmp	r4, r2
 801c094:	d002      	beq.n	801c09c <std+0x48>
 801c096:	33d0      	adds	r3, #208	; 0xd0
 801c098:	429c      	cmp	r4, r3
 801c09a:	d105      	bne.n	801c0a8 <std+0x54>
 801c09c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801c0a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c0a4:	f000 b9a6 	b.w	801c3f4 <__retarget_lock_init_recursive>
 801c0a8:	bd10      	pop	{r4, pc}
 801c0aa:	bf00      	nop
 801c0ac:	0801c271 	.word	0x0801c271
 801c0b0:	0801c297 	.word	0x0801c297
 801c0b4:	0801c2cf 	.word	0x0801c2cf
 801c0b8:	0801c2f3 	.word	0x0801c2f3
 801c0bc:	240034f8 	.word	0x240034f8

0801c0c0 <stdio_exit_handler>:
 801c0c0:	4a02      	ldr	r2, [pc, #8]	; (801c0cc <stdio_exit_handler+0xc>)
 801c0c2:	4903      	ldr	r1, [pc, #12]	; (801c0d0 <stdio_exit_handler+0x10>)
 801c0c4:	4803      	ldr	r0, [pc, #12]	; (801c0d4 <stdio_exit_handler+0x14>)
 801c0c6:	f000 b869 	b.w	801c19c <_fwalk_sglue>
 801c0ca:	bf00      	nop
 801c0cc:	24000100 	.word	0x24000100
 801c0d0:	0801f21d 	.word	0x0801f21d
 801c0d4:	2400010c 	.word	0x2400010c

0801c0d8 <cleanup_stdio>:
 801c0d8:	6841      	ldr	r1, [r0, #4]
 801c0da:	4b0c      	ldr	r3, [pc, #48]	; (801c10c <cleanup_stdio+0x34>)
 801c0dc:	4299      	cmp	r1, r3
 801c0de:	b510      	push	{r4, lr}
 801c0e0:	4604      	mov	r4, r0
 801c0e2:	d001      	beq.n	801c0e8 <cleanup_stdio+0x10>
 801c0e4:	f003 f89a 	bl	801f21c <_fflush_r>
 801c0e8:	68a1      	ldr	r1, [r4, #8]
 801c0ea:	4b09      	ldr	r3, [pc, #36]	; (801c110 <cleanup_stdio+0x38>)
 801c0ec:	4299      	cmp	r1, r3
 801c0ee:	d002      	beq.n	801c0f6 <cleanup_stdio+0x1e>
 801c0f0:	4620      	mov	r0, r4
 801c0f2:	f003 f893 	bl	801f21c <_fflush_r>
 801c0f6:	68e1      	ldr	r1, [r4, #12]
 801c0f8:	4b06      	ldr	r3, [pc, #24]	; (801c114 <cleanup_stdio+0x3c>)
 801c0fa:	4299      	cmp	r1, r3
 801c0fc:	d004      	beq.n	801c108 <cleanup_stdio+0x30>
 801c0fe:	4620      	mov	r0, r4
 801c100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c104:	f003 b88a 	b.w	801f21c <_fflush_r>
 801c108:	bd10      	pop	{r4, pc}
 801c10a:	bf00      	nop
 801c10c:	240034f8 	.word	0x240034f8
 801c110:	24003560 	.word	0x24003560
 801c114:	240035c8 	.word	0x240035c8

0801c118 <global_stdio_init.part.0>:
 801c118:	b510      	push	{r4, lr}
 801c11a:	4b0b      	ldr	r3, [pc, #44]	; (801c148 <global_stdio_init.part.0+0x30>)
 801c11c:	4c0b      	ldr	r4, [pc, #44]	; (801c14c <global_stdio_init.part.0+0x34>)
 801c11e:	4a0c      	ldr	r2, [pc, #48]	; (801c150 <global_stdio_init.part.0+0x38>)
 801c120:	601a      	str	r2, [r3, #0]
 801c122:	4620      	mov	r0, r4
 801c124:	2200      	movs	r2, #0
 801c126:	2104      	movs	r1, #4
 801c128:	f7ff ff94 	bl	801c054 <std>
 801c12c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801c130:	2201      	movs	r2, #1
 801c132:	2109      	movs	r1, #9
 801c134:	f7ff ff8e 	bl	801c054 <std>
 801c138:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801c13c:	2202      	movs	r2, #2
 801c13e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c142:	2112      	movs	r1, #18
 801c144:	f7ff bf86 	b.w	801c054 <std>
 801c148:	24003630 	.word	0x24003630
 801c14c:	240034f8 	.word	0x240034f8
 801c150:	0801c0c1 	.word	0x0801c0c1

0801c154 <__sfp_lock_acquire>:
 801c154:	4801      	ldr	r0, [pc, #4]	; (801c15c <__sfp_lock_acquire+0x8>)
 801c156:	f000 b94e 	b.w	801c3f6 <__retarget_lock_acquire_recursive>
 801c15a:	bf00      	nop
 801c15c:	24003639 	.word	0x24003639

0801c160 <__sfp_lock_release>:
 801c160:	4801      	ldr	r0, [pc, #4]	; (801c168 <__sfp_lock_release+0x8>)
 801c162:	f000 b949 	b.w	801c3f8 <__retarget_lock_release_recursive>
 801c166:	bf00      	nop
 801c168:	24003639 	.word	0x24003639

0801c16c <__sinit>:
 801c16c:	b510      	push	{r4, lr}
 801c16e:	4604      	mov	r4, r0
 801c170:	f7ff fff0 	bl	801c154 <__sfp_lock_acquire>
 801c174:	6a23      	ldr	r3, [r4, #32]
 801c176:	b11b      	cbz	r3, 801c180 <__sinit+0x14>
 801c178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c17c:	f7ff bff0 	b.w	801c160 <__sfp_lock_release>
 801c180:	4b04      	ldr	r3, [pc, #16]	; (801c194 <__sinit+0x28>)
 801c182:	6223      	str	r3, [r4, #32]
 801c184:	4b04      	ldr	r3, [pc, #16]	; (801c198 <__sinit+0x2c>)
 801c186:	681b      	ldr	r3, [r3, #0]
 801c188:	2b00      	cmp	r3, #0
 801c18a:	d1f5      	bne.n	801c178 <__sinit+0xc>
 801c18c:	f7ff ffc4 	bl	801c118 <global_stdio_init.part.0>
 801c190:	e7f2      	b.n	801c178 <__sinit+0xc>
 801c192:	bf00      	nop
 801c194:	0801c0d9 	.word	0x0801c0d9
 801c198:	24003630 	.word	0x24003630

0801c19c <_fwalk_sglue>:
 801c19c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c1a0:	4607      	mov	r7, r0
 801c1a2:	4688      	mov	r8, r1
 801c1a4:	4614      	mov	r4, r2
 801c1a6:	2600      	movs	r6, #0
 801c1a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c1ac:	f1b9 0901 	subs.w	r9, r9, #1
 801c1b0:	d505      	bpl.n	801c1be <_fwalk_sglue+0x22>
 801c1b2:	6824      	ldr	r4, [r4, #0]
 801c1b4:	2c00      	cmp	r4, #0
 801c1b6:	d1f7      	bne.n	801c1a8 <_fwalk_sglue+0xc>
 801c1b8:	4630      	mov	r0, r6
 801c1ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c1be:	89ab      	ldrh	r3, [r5, #12]
 801c1c0:	2b01      	cmp	r3, #1
 801c1c2:	d907      	bls.n	801c1d4 <_fwalk_sglue+0x38>
 801c1c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c1c8:	3301      	adds	r3, #1
 801c1ca:	d003      	beq.n	801c1d4 <_fwalk_sglue+0x38>
 801c1cc:	4629      	mov	r1, r5
 801c1ce:	4638      	mov	r0, r7
 801c1d0:	47c0      	blx	r8
 801c1d2:	4306      	orrs	r6, r0
 801c1d4:	3568      	adds	r5, #104	; 0x68
 801c1d6:	e7e9      	b.n	801c1ac <_fwalk_sglue+0x10>

0801c1d8 <siprintf>:
 801c1d8:	b40e      	push	{r1, r2, r3}
 801c1da:	b500      	push	{lr}
 801c1dc:	b09c      	sub	sp, #112	; 0x70
 801c1de:	ab1d      	add	r3, sp, #116	; 0x74
 801c1e0:	9002      	str	r0, [sp, #8]
 801c1e2:	9006      	str	r0, [sp, #24]
 801c1e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801c1e8:	4809      	ldr	r0, [pc, #36]	; (801c210 <siprintf+0x38>)
 801c1ea:	9107      	str	r1, [sp, #28]
 801c1ec:	9104      	str	r1, [sp, #16]
 801c1ee:	4909      	ldr	r1, [pc, #36]	; (801c214 <siprintf+0x3c>)
 801c1f0:	f853 2b04 	ldr.w	r2, [r3], #4
 801c1f4:	9105      	str	r1, [sp, #20]
 801c1f6:	6800      	ldr	r0, [r0, #0]
 801c1f8:	9301      	str	r3, [sp, #4]
 801c1fa:	a902      	add	r1, sp, #8
 801c1fc:	f002 fb6a 	bl	801e8d4 <_svfiprintf_r>
 801c200:	9b02      	ldr	r3, [sp, #8]
 801c202:	2200      	movs	r2, #0
 801c204:	701a      	strb	r2, [r3, #0]
 801c206:	b01c      	add	sp, #112	; 0x70
 801c208:	f85d eb04 	ldr.w	lr, [sp], #4
 801c20c:	b003      	add	sp, #12
 801c20e:	4770      	bx	lr
 801c210:	24000158 	.word	0x24000158
 801c214:	ffff0208 	.word	0xffff0208

0801c218 <siscanf>:
 801c218:	b40e      	push	{r1, r2, r3}
 801c21a:	b510      	push	{r4, lr}
 801c21c:	b09f      	sub	sp, #124	; 0x7c
 801c21e:	ac21      	add	r4, sp, #132	; 0x84
 801c220:	f44f 7101 	mov.w	r1, #516	; 0x204
 801c224:	f854 2b04 	ldr.w	r2, [r4], #4
 801c228:	9201      	str	r2, [sp, #4]
 801c22a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801c22e:	9004      	str	r0, [sp, #16]
 801c230:	9008      	str	r0, [sp, #32]
 801c232:	f7e4 f8cd 	bl	80003d0 <strlen>
 801c236:	4b0c      	ldr	r3, [pc, #48]	; (801c268 <siscanf+0x50>)
 801c238:	9005      	str	r0, [sp, #20]
 801c23a:	9009      	str	r0, [sp, #36]	; 0x24
 801c23c:	930d      	str	r3, [sp, #52]	; 0x34
 801c23e:	480b      	ldr	r0, [pc, #44]	; (801c26c <siscanf+0x54>)
 801c240:	9a01      	ldr	r2, [sp, #4]
 801c242:	6800      	ldr	r0, [r0, #0]
 801c244:	9403      	str	r4, [sp, #12]
 801c246:	2300      	movs	r3, #0
 801c248:	9311      	str	r3, [sp, #68]	; 0x44
 801c24a:	9316      	str	r3, [sp, #88]	; 0x58
 801c24c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c250:	f8ad 301e 	strh.w	r3, [sp, #30]
 801c254:	a904      	add	r1, sp, #16
 801c256:	4623      	mov	r3, r4
 801c258:	f002 fc94 	bl	801eb84 <__ssvfiscanf_r>
 801c25c:	b01f      	add	sp, #124	; 0x7c
 801c25e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c262:	b003      	add	sp, #12
 801c264:	4770      	bx	lr
 801c266:	bf00      	nop
 801c268:	0801c293 	.word	0x0801c293
 801c26c:	24000158 	.word	0x24000158

0801c270 <__sread>:
 801c270:	b510      	push	{r4, lr}
 801c272:	460c      	mov	r4, r1
 801c274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c278:	f000 f86e 	bl	801c358 <_read_r>
 801c27c:	2800      	cmp	r0, #0
 801c27e:	bfab      	itete	ge
 801c280:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c282:	89a3      	ldrhlt	r3, [r4, #12]
 801c284:	181b      	addge	r3, r3, r0
 801c286:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c28a:	bfac      	ite	ge
 801c28c:	6563      	strge	r3, [r4, #84]	; 0x54
 801c28e:	81a3      	strhlt	r3, [r4, #12]
 801c290:	bd10      	pop	{r4, pc}

0801c292 <__seofread>:
 801c292:	2000      	movs	r0, #0
 801c294:	4770      	bx	lr

0801c296 <__swrite>:
 801c296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c29a:	461f      	mov	r7, r3
 801c29c:	898b      	ldrh	r3, [r1, #12]
 801c29e:	05db      	lsls	r3, r3, #23
 801c2a0:	4605      	mov	r5, r0
 801c2a2:	460c      	mov	r4, r1
 801c2a4:	4616      	mov	r6, r2
 801c2a6:	d505      	bpl.n	801c2b4 <__swrite+0x1e>
 801c2a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c2ac:	2302      	movs	r3, #2
 801c2ae:	2200      	movs	r2, #0
 801c2b0:	f000 f840 	bl	801c334 <_lseek_r>
 801c2b4:	89a3      	ldrh	r3, [r4, #12]
 801c2b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c2ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c2be:	81a3      	strh	r3, [r4, #12]
 801c2c0:	4632      	mov	r2, r6
 801c2c2:	463b      	mov	r3, r7
 801c2c4:	4628      	mov	r0, r5
 801c2c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c2ca:	f000 b857 	b.w	801c37c <_write_r>

0801c2ce <__sseek>:
 801c2ce:	b510      	push	{r4, lr}
 801c2d0:	460c      	mov	r4, r1
 801c2d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c2d6:	f000 f82d 	bl	801c334 <_lseek_r>
 801c2da:	1c43      	adds	r3, r0, #1
 801c2dc:	89a3      	ldrh	r3, [r4, #12]
 801c2de:	bf15      	itete	ne
 801c2e0:	6560      	strne	r0, [r4, #84]	; 0x54
 801c2e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c2e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c2ea:	81a3      	strheq	r3, [r4, #12]
 801c2ec:	bf18      	it	ne
 801c2ee:	81a3      	strhne	r3, [r4, #12]
 801c2f0:	bd10      	pop	{r4, pc}

0801c2f2 <__sclose>:
 801c2f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c2f6:	f000 b80d 	b.w	801c314 <_close_r>

0801c2fa <memset>:
 801c2fa:	4402      	add	r2, r0
 801c2fc:	4603      	mov	r3, r0
 801c2fe:	4293      	cmp	r3, r2
 801c300:	d100      	bne.n	801c304 <memset+0xa>
 801c302:	4770      	bx	lr
 801c304:	f803 1b01 	strb.w	r1, [r3], #1
 801c308:	e7f9      	b.n	801c2fe <memset+0x4>
	...

0801c30c <_localeconv_r>:
 801c30c:	4800      	ldr	r0, [pc, #0]	; (801c310 <_localeconv_r+0x4>)
 801c30e:	4770      	bx	lr
 801c310:	2400024c 	.word	0x2400024c

0801c314 <_close_r>:
 801c314:	b538      	push	{r3, r4, r5, lr}
 801c316:	4d06      	ldr	r5, [pc, #24]	; (801c330 <_close_r+0x1c>)
 801c318:	2300      	movs	r3, #0
 801c31a:	4604      	mov	r4, r0
 801c31c:	4608      	mov	r0, r1
 801c31e:	602b      	str	r3, [r5, #0]
 801c320:	f7e7 fe67 	bl	8003ff2 <_close>
 801c324:	1c43      	adds	r3, r0, #1
 801c326:	d102      	bne.n	801c32e <_close_r+0x1a>
 801c328:	682b      	ldr	r3, [r5, #0]
 801c32a:	b103      	cbz	r3, 801c32e <_close_r+0x1a>
 801c32c:	6023      	str	r3, [r4, #0]
 801c32e:	bd38      	pop	{r3, r4, r5, pc}
 801c330:	24003634 	.word	0x24003634

0801c334 <_lseek_r>:
 801c334:	b538      	push	{r3, r4, r5, lr}
 801c336:	4d07      	ldr	r5, [pc, #28]	; (801c354 <_lseek_r+0x20>)
 801c338:	4604      	mov	r4, r0
 801c33a:	4608      	mov	r0, r1
 801c33c:	4611      	mov	r1, r2
 801c33e:	2200      	movs	r2, #0
 801c340:	602a      	str	r2, [r5, #0]
 801c342:	461a      	mov	r2, r3
 801c344:	f7e7 fe7c 	bl	8004040 <_lseek>
 801c348:	1c43      	adds	r3, r0, #1
 801c34a:	d102      	bne.n	801c352 <_lseek_r+0x1e>
 801c34c:	682b      	ldr	r3, [r5, #0]
 801c34e:	b103      	cbz	r3, 801c352 <_lseek_r+0x1e>
 801c350:	6023      	str	r3, [r4, #0]
 801c352:	bd38      	pop	{r3, r4, r5, pc}
 801c354:	24003634 	.word	0x24003634

0801c358 <_read_r>:
 801c358:	b538      	push	{r3, r4, r5, lr}
 801c35a:	4d07      	ldr	r5, [pc, #28]	; (801c378 <_read_r+0x20>)
 801c35c:	4604      	mov	r4, r0
 801c35e:	4608      	mov	r0, r1
 801c360:	4611      	mov	r1, r2
 801c362:	2200      	movs	r2, #0
 801c364:	602a      	str	r2, [r5, #0]
 801c366:	461a      	mov	r2, r3
 801c368:	f7e7 fe0a 	bl	8003f80 <_read>
 801c36c:	1c43      	adds	r3, r0, #1
 801c36e:	d102      	bne.n	801c376 <_read_r+0x1e>
 801c370:	682b      	ldr	r3, [r5, #0]
 801c372:	b103      	cbz	r3, 801c376 <_read_r+0x1e>
 801c374:	6023      	str	r3, [r4, #0]
 801c376:	bd38      	pop	{r3, r4, r5, pc}
 801c378:	24003634 	.word	0x24003634

0801c37c <_write_r>:
 801c37c:	b538      	push	{r3, r4, r5, lr}
 801c37e:	4d07      	ldr	r5, [pc, #28]	; (801c39c <_write_r+0x20>)
 801c380:	4604      	mov	r4, r0
 801c382:	4608      	mov	r0, r1
 801c384:	4611      	mov	r1, r2
 801c386:	2200      	movs	r2, #0
 801c388:	602a      	str	r2, [r5, #0]
 801c38a:	461a      	mov	r2, r3
 801c38c:	f7e7 fe15 	bl	8003fba <_write>
 801c390:	1c43      	adds	r3, r0, #1
 801c392:	d102      	bne.n	801c39a <_write_r+0x1e>
 801c394:	682b      	ldr	r3, [r5, #0]
 801c396:	b103      	cbz	r3, 801c39a <_write_r+0x1e>
 801c398:	6023      	str	r3, [r4, #0]
 801c39a:	bd38      	pop	{r3, r4, r5, pc}
 801c39c:	24003634 	.word	0x24003634

0801c3a0 <__errno>:
 801c3a0:	4b01      	ldr	r3, [pc, #4]	; (801c3a8 <__errno+0x8>)
 801c3a2:	6818      	ldr	r0, [r3, #0]
 801c3a4:	4770      	bx	lr
 801c3a6:	bf00      	nop
 801c3a8:	24000158 	.word	0x24000158

0801c3ac <__libc_init_array>:
 801c3ac:	b570      	push	{r4, r5, r6, lr}
 801c3ae:	4d0d      	ldr	r5, [pc, #52]	; (801c3e4 <__libc_init_array+0x38>)
 801c3b0:	4c0d      	ldr	r4, [pc, #52]	; (801c3e8 <__libc_init_array+0x3c>)
 801c3b2:	1b64      	subs	r4, r4, r5
 801c3b4:	10a4      	asrs	r4, r4, #2
 801c3b6:	2600      	movs	r6, #0
 801c3b8:	42a6      	cmp	r6, r4
 801c3ba:	d109      	bne.n	801c3d0 <__libc_init_array+0x24>
 801c3bc:	4d0b      	ldr	r5, [pc, #44]	; (801c3ec <__libc_init_array+0x40>)
 801c3be:	4c0c      	ldr	r4, [pc, #48]	; (801c3f0 <__libc_init_array+0x44>)
 801c3c0:	f003 ff1e 	bl	8020200 <_init>
 801c3c4:	1b64      	subs	r4, r4, r5
 801c3c6:	10a4      	asrs	r4, r4, #2
 801c3c8:	2600      	movs	r6, #0
 801c3ca:	42a6      	cmp	r6, r4
 801c3cc:	d105      	bne.n	801c3da <__libc_init_array+0x2e>
 801c3ce:	bd70      	pop	{r4, r5, r6, pc}
 801c3d0:	f855 3b04 	ldr.w	r3, [r5], #4
 801c3d4:	4798      	blx	r3
 801c3d6:	3601      	adds	r6, #1
 801c3d8:	e7ee      	b.n	801c3b8 <__libc_init_array+0xc>
 801c3da:	f855 3b04 	ldr.w	r3, [r5], #4
 801c3de:	4798      	blx	r3
 801c3e0:	3601      	adds	r6, #1
 801c3e2:	e7f2      	b.n	801c3ca <__libc_init_array+0x1e>
 801c3e4:	08020dd4 	.word	0x08020dd4
 801c3e8:	08020dd4 	.word	0x08020dd4
 801c3ec:	08020dd4 	.word	0x08020dd4
 801c3f0:	08020dd8 	.word	0x08020dd8

0801c3f4 <__retarget_lock_init_recursive>:
 801c3f4:	4770      	bx	lr

0801c3f6 <__retarget_lock_acquire_recursive>:
 801c3f6:	4770      	bx	lr

0801c3f8 <__retarget_lock_release_recursive>:
 801c3f8:	4770      	bx	lr

0801c3fa <strcpy>:
 801c3fa:	4603      	mov	r3, r0
 801c3fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c400:	f803 2b01 	strb.w	r2, [r3], #1
 801c404:	2a00      	cmp	r2, #0
 801c406:	d1f9      	bne.n	801c3fc <strcpy+0x2>
 801c408:	4770      	bx	lr

0801c40a <memcpy>:
 801c40a:	440a      	add	r2, r1
 801c40c:	4291      	cmp	r1, r2
 801c40e:	f100 33ff 	add.w	r3, r0, #4294967295
 801c412:	d100      	bne.n	801c416 <memcpy+0xc>
 801c414:	4770      	bx	lr
 801c416:	b510      	push	{r4, lr}
 801c418:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c41c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c420:	4291      	cmp	r1, r2
 801c422:	d1f9      	bne.n	801c418 <memcpy+0xe>
 801c424:	bd10      	pop	{r4, pc}
	...

0801c428 <nanf>:
 801c428:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801c430 <nanf+0x8>
 801c42c:	4770      	bx	lr
 801c42e:	bf00      	nop
 801c430:	7fc00000 	.word	0x7fc00000

0801c434 <quorem>:
 801c434:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c438:	6903      	ldr	r3, [r0, #16]
 801c43a:	690c      	ldr	r4, [r1, #16]
 801c43c:	42a3      	cmp	r3, r4
 801c43e:	4607      	mov	r7, r0
 801c440:	db7e      	blt.n	801c540 <quorem+0x10c>
 801c442:	3c01      	subs	r4, #1
 801c444:	f101 0814 	add.w	r8, r1, #20
 801c448:	f100 0514 	add.w	r5, r0, #20
 801c44c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c450:	9301      	str	r3, [sp, #4]
 801c452:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801c456:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c45a:	3301      	adds	r3, #1
 801c45c:	429a      	cmp	r2, r3
 801c45e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801c462:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801c466:	fbb2 f6f3 	udiv	r6, r2, r3
 801c46a:	d331      	bcc.n	801c4d0 <quorem+0x9c>
 801c46c:	f04f 0e00 	mov.w	lr, #0
 801c470:	4640      	mov	r0, r8
 801c472:	46ac      	mov	ip, r5
 801c474:	46f2      	mov	sl, lr
 801c476:	f850 2b04 	ldr.w	r2, [r0], #4
 801c47a:	b293      	uxth	r3, r2
 801c47c:	fb06 e303 	mla	r3, r6, r3, lr
 801c480:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801c484:	0c1a      	lsrs	r2, r3, #16
 801c486:	b29b      	uxth	r3, r3
 801c488:	ebaa 0303 	sub.w	r3, sl, r3
 801c48c:	f8dc a000 	ldr.w	sl, [ip]
 801c490:	fa13 f38a 	uxtah	r3, r3, sl
 801c494:	fb06 220e 	mla	r2, r6, lr, r2
 801c498:	9300      	str	r3, [sp, #0]
 801c49a:	9b00      	ldr	r3, [sp, #0]
 801c49c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801c4a0:	b292      	uxth	r2, r2
 801c4a2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801c4a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c4aa:	f8bd 3000 	ldrh.w	r3, [sp]
 801c4ae:	4581      	cmp	r9, r0
 801c4b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c4b4:	f84c 3b04 	str.w	r3, [ip], #4
 801c4b8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801c4bc:	d2db      	bcs.n	801c476 <quorem+0x42>
 801c4be:	f855 300b 	ldr.w	r3, [r5, fp]
 801c4c2:	b92b      	cbnz	r3, 801c4d0 <quorem+0x9c>
 801c4c4:	9b01      	ldr	r3, [sp, #4]
 801c4c6:	3b04      	subs	r3, #4
 801c4c8:	429d      	cmp	r5, r3
 801c4ca:	461a      	mov	r2, r3
 801c4cc:	d32c      	bcc.n	801c528 <quorem+0xf4>
 801c4ce:	613c      	str	r4, [r7, #16]
 801c4d0:	4638      	mov	r0, r7
 801c4d2:	f001 f96b 	bl	801d7ac <__mcmp>
 801c4d6:	2800      	cmp	r0, #0
 801c4d8:	db22      	blt.n	801c520 <quorem+0xec>
 801c4da:	3601      	adds	r6, #1
 801c4dc:	4629      	mov	r1, r5
 801c4de:	2000      	movs	r0, #0
 801c4e0:	f858 2b04 	ldr.w	r2, [r8], #4
 801c4e4:	f8d1 c000 	ldr.w	ip, [r1]
 801c4e8:	b293      	uxth	r3, r2
 801c4ea:	1ac3      	subs	r3, r0, r3
 801c4ec:	0c12      	lsrs	r2, r2, #16
 801c4ee:	fa13 f38c 	uxtah	r3, r3, ip
 801c4f2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801c4f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c4fa:	b29b      	uxth	r3, r3
 801c4fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c500:	45c1      	cmp	r9, r8
 801c502:	f841 3b04 	str.w	r3, [r1], #4
 801c506:	ea4f 4022 	mov.w	r0, r2, asr #16
 801c50a:	d2e9      	bcs.n	801c4e0 <quorem+0xac>
 801c50c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c510:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c514:	b922      	cbnz	r2, 801c520 <quorem+0xec>
 801c516:	3b04      	subs	r3, #4
 801c518:	429d      	cmp	r5, r3
 801c51a:	461a      	mov	r2, r3
 801c51c:	d30a      	bcc.n	801c534 <quorem+0x100>
 801c51e:	613c      	str	r4, [r7, #16]
 801c520:	4630      	mov	r0, r6
 801c522:	b003      	add	sp, #12
 801c524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c528:	6812      	ldr	r2, [r2, #0]
 801c52a:	3b04      	subs	r3, #4
 801c52c:	2a00      	cmp	r2, #0
 801c52e:	d1ce      	bne.n	801c4ce <quorem+0x9a>
 801c530:	3c01      	subs	r4, #1
 801c532:	e7c9      	b.n	801c4c8 <quorem+0x94>
 801c534:	6812      	ldr	r2, [r2, #0]
 801c536:	3b04      	subs	r3, #4
 801c538:	2a00      	cmp	r2, #0
 801c53a:	d1f0      	bne.n	801c51e <quorem+0xea>
 801c53c:	3c01      	subs	r4, #1
 801c53e:	e7eb      	b.n	801c518 <quorem+0xe4>
 801c540:	2000      	movs	r0, #0
 801c542:	e7ee      	b.n	801c522 <quorem+0xee>
 801c544:	0000      	movs	r0, r0
	...

0801c548 <_dtoa_r>:
 801c548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c54c:	ed2d 8b02 	vpush	{d8}
 801c550:	69c5      	ldr	r5, [r0, #28]
 801c552:	b091      	sub	sp, #68	; 0x44
 801c554:	ed8d 0b02 	vstr	d0, [sp, #8]
 801c558:	ec59 8b10 	vmov	r8, r9, d0
 801c55c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801c55e:	9106      	str	r1, [sp, #24]
 801c560:	4606      	mov	r6, r0
 801c562:	9208      	str	r2, [sp, #32]
 801c564:	930c      	str	r3, [sp, #48]	; 0x30
 801c566:	b975      	cbnz	r5, 801c586 <_dtoa_r+0x3e>
 801c568:	2010      	movs	r0, #16
 801c56a:	f000 fda5 	bl	801d0b8 <malloc>
 801c56e:	4602      	mov	r2, r0
 801c570:	61f0      	str	r0, [r6, #28]
 801c572:	b920      	cbnz	r0, 801c57e <_dtoa_r+0x36>
 801c574:	4ba6      	ldr	r3, [pc, #664]	; (801c810 <_dtoa_r+0x2c8>)
 801c576:	21ef      	movs	r1, #239	; 0xef
 801c578:	48a6      	ldr	r0, [pc, #664]	; (801c814 <_dtoa_r+0x2cc>)
 801c57a:	f002 ff31 	bl	801f3e0 <__assert_func>
 801c57e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801c582:	6005      	str	r5, [r0, #0]
 801c584:	60c5      	str	r5, [r0, #12]
 801c586:	69f3      	ldr	r3, [r6, #28]
 801c588:	6819      	ldr	r1, [r3, #0]
 801c58a:	b151      	cbz	r1, 801c5a2 <_dtoa_r+0x5a>
 801c58c:	685a      	ldr	r2, [r3, #4]
 801c58e:	604a      	str	r2, [r1, #4]
 801c590:	2301      	movs	r3, #1
 801c592:	4093      	lsls	r3, r2
 801c594:	608b      	str	r3, [r1, #8]
 801c596:	4630      	mov	r0, r6
 801c598:	f000 fe82 	bl	801d2a0 <_Bfree>
 801c59c:	69f3      	ldr	r3, [r6, #28]
 801c59e:	2200      	movs	r2, #0
 801c5a0:	601a      	str	r2, [r3, #0]
 801c5a2:	f1b9 0300 	subs.w	r3, r9, #0
 801c5a6:	bfbb      	ittet	lt
 801c5a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801c5ac:	9303      	strlt	r3, [sp, #12]
 801c5ae:	2300      	movge	r3, #0
 801c5b0:	2201      	movlt	r2, #1
 801c5b2:	bfac      	ite	ge
 801c5b4:	6023      	strge	r3, [r4, #0]
 801c5b6:	6022      	strlt	r2, [r4, #0]
 801c5b8:	4b97      	ldr	r3, [pc, #604]	; (801c818 <_dtoa_r+0x2d0>)
 801c5ba:	9c03      	ldr	r4, [sp, #12]
 801c5bc:	43a3      	bics	r3, r4
 801c5be:	d11c      	bne.n	801c5fa <_dtoa_r+0xb2>
 801c5c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c5c2:	f242 730f 	movw	r3, #9999	; 0x270f
 801c5c6:	6013      	str	r3, [r2, #0]
 801c5c8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801c5cc:	ea53 0308 	orrs.w	r3, r3, r8
 801c5d0:	f000 84fb 	beq.w	801cfca <_dtoa_r+0xa82>
 801c5d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c5d6:	b963      	cbnz	r3, 801c5f2 <_dtoa_r+0xaa>
 801c5d8:	4b90      	ldr	r3, [pc, #576]	; (801c81c <_dtoa_r+0x2d4>)
 801c5da:	e020      	b.n	801c61e <_dtoa_r+0xd6>
 801c5dc:	4b90      	ldr	r3, [pc, #576]	; (801c820 <_dtoa_r+0x2d8>)
 801c5de:	9301      	str	r3, [sp, #4]
 801c5e0:	3308      	adds	r3, #8
 801c5e2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801c5e4:	6013      	str	r3, [r2, #0]
 801c5e6:	9801      	ldr	r0, [sp, #4]
 801c5e8:	b011      	add	sp, #68	; 0x44
 801c5ea:	ecbd 8b02 	vpop	{d8}
 801c5ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c5f2:	4b8a      	ldr	r3, [pc, #552]	; (801c81c <_dtoa_r+0x2d4>)
 801c5f4:	9301      	str	r3, [sp, #4]
 801c5f6:	3303      	adds	r3, #3
 801c5f8:	e7f3      	b.n	801c5e2 <_dtoa_r+0x9a>
 801c5fa:	ed9d 8b02 	vldr	d8, [sp, #8]
 801c5fe:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801c602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c606:	d10c      	bne.n	801c622 <_dtoa_r+0xda>
 801c608:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c60a:	2301      	movs	r3, #1
 801c60c:	6013      	str	r3, [r2, #0]
 801c60e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c610:	2b00      	cmp	r3, #0
 801c612:	f000 84d7 	beq.w	801cfc4 <_dtoa_r+0xa7c>
 801c616:	4b83      	ldr	r3, [pc, #524]	; (801c824 <_dtoa_r+0x2dc>)
 801c618:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801c61a:	6013      	str	r3, [r2, #0]
 801c61c:	3b01      	subs	r3, #1
 801c61e:	9301      	str	r3, [sp, #4]
 801c620:	e7e1      	b.n	801c5e6 <_dtoa_r+0x9e>
 801c622:	aa0e      	add	r2, sp, #56	; 0x38
 801c624:	a90f      	add	r1, sp, #60	; 0x3c
 801c626:	4630      	mov	r0, r6
 801c628:	eeb0 0b48 	vmov.f64	d0, d8
 801c62c:	f001 f9d4 	bl	801d9d8 <__d2b>
 801c630:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801c634:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c636:	4605      	mov	r5, r0
 801c638:	2b00      	cmp	r3, #0
 801c63a:	d046      	beq.n	801c6ca <_dtoa_r+0x182>
 801c63c:	eeb0 7b48 	vmov.f64	d7, d8
 801c640:	ee18 1a90 	vmov	r1, s17
 801c644:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801c648:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801c64c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801c650:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801c654:	2000      	movs	r0, #0
 801c656:	ee07 1a90 	vmov	s15, r1
 801c65a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 801c65e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801c7f8 <_dtoa_r+0x2b0>
 801c662:	ee37 7b46 	vsub.f64	d7, d7, d6
 801c666:	ed9f 6b66 	vldr	d6, [pc, #408]	; 801c800 <_dtoa_r+0x2b8>
 801c66a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801c66e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801c808 <_dtoa_r+0x2c0>
 801c672:	ee07 3a90 	vmov	s15, r3
 801c676:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801c67a:	eeb0 7b46 	vmov.f64	d7, d6
 801c67e:	eea4 7b05 	vfma.f64	d7, d4, d5
 801c682:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801c686:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801c68a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c68e:	ee16 ba90 	vmov	fp, s13
 801c692:	9009      	str	r0, [sp, #36]	; 0x24
 801c694:	d508      	bpl.n	801c6a8 <_dtoa_r+0x160>
 801c696:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801c69a:	eeb4 6b47 	vcmp.f64	d6, d7
 801c69e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c6a2:	bf18      	it	ne
 801c6a4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801c6a8:	f1bb 0f16 	cmp.w	fp, #22
 801c6ac:	d82b      	bhi.n	801c706 <_dtoa_r+0x1be>
 801c6ae:	495e      	ldr	r1, [pc, #376]	; (801c828 <_dtoa_r+0x2e0>)
 801c6b0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 801c6b4:	ed91 7b00 	vldr	d7, [r1]
 801c6b8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801c6bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c6c0:	d501      	bpl.n	801c6c6 <_dtoa_r+0x17e>
 801c6c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c6c6:	2100      	movs	r1, #0
 801c6c8:	e01e      	b.n	801c708 <_dtoa_r+0x1c0>
 801c6ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c6cc:	4413      	add	r3, r2
 801c6ce:	f203 4132 	addw	r1, r3, #1074	; 0x432
 801c6d2:	2920      	cmp	r1, #32
 801c6d4:	bfc1      	itttt	gt
 801c6d6:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 801c6da:	408c      	lslgt	r4, r1
 801c6dc:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 801c6e0:	fa28 f101 	lsrgt.w	r1, r8, r1
 801c6e4:	bfd6      	itet	le
 801c6e6:	f1c1 0120 	rsble	r1, r1, #32
 801c6ea:	4321      	orrgt	r1, r4
 801c6ec:	fa08 f101 	lslle.w	r1, r8, r1
 801c6f0:	ee07 1a90 	vmov	s15, r1
 801c6f4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801c6f8:	3b01      	subs	r3, #1
 801c6fa:	ee17 1a90 	vmov	r1, s15
 801c6fe:	2001      	movs	r0, #1
 801c700:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801c704:	e7a7      	b.n	801c656 <_dtoa_r+0x10e>
 801c706:	2101      	movs	r1, #1
 801c708:	1ad2      	subs	r2, r2, r3
 801c70a:	1e53      	subs	r3, r2, #1
 801c70c:	9305      	str	r3, [sp, #20]
 801c70e:	bf45      	ittet	mi
 801c710:	f1c2 0301 	rsbmi	r3, r2, #1
 801c714:	9304      	strmi	r3, [sp, #16]
 801c716:	2300      	movpl	r3, #0
 801c718:	2300      	movmi	r3, #0
 801c71a:	bf4c      	ite	mi
 801c71c:	9305      	strmi	r3, [sp, #20]
 801c71e:	9304      	strpl	r3, [sp, #16]
 801c720:	f1bb 0f00 	cmp.w	fp, #0
 801c724:	910b      	str	r1, [sp, #44]	; 0x2c
 801c726:	db18      	blt.n	801c75a <_dtoa_r+0x212>
 801c728:	9b05      	ldr	r3, [sp, #20]
 801c72a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801c72e:	445b      	add	r3, fp
 801c730:	9305      	str	r3, [sp, #20]
 801c732:	2300      	movs	r3, #0
 801c734:	9a06      	ldr	r2, [sp, #24]
 801c736:	2a09      	cmp	r2, #9
 801c738:	d848      	bhi.n	801c7cc <_dtoa_r+0x284>
 801c73a:	2a05      	cmp	r2, #5
 801c73c:	bfc4      	itt	gt
 801c73e:	3a04      	subgt	r2, #4
 801c740:	9206      	strgt	r2, [sp, #24]
 801c742:	9a06      	ldr	r2, [sp, #24]
 801c744:	f1a2 0202 	sub.w	r2, r2, #2
 801c748:	bfcc      	ite	gt
 801c74a:	2400      	movgt	r4, #0
 801c74c:	2401      	movle	r4, #1
 801c74e:	2a03      	cmp	r2, #3
 801c750:	d847      	bhi.n	801c7e2 <_dtoa_r+0x29a>
 801c752:	e8df f002 	tbb	[pc, r2]
 801c756:	2d0b      	.short	0x2d0b
 801c758:	392b      	.short	0x392b
 801c75a:	9b04      	ldr	r3, [sp, #16]
 801c75c:	2200      	movs	r2, #0
 801c75e:	eba3 030b 	sub.w	r3, r3, fp
 801c762:	9304      	str	r3, [sp, #16]
 801c764:	920a      	str	r2, [sp, #40]	; 0x28
 801c766:	f1cb 0300 	rsb	r3, fp, #0
 801c76a:	e7e3      	b.n	801c734 <_dtoa_r+0x1ec>
 801c76c:	2200      	movs	r2, #0
 801c76e:	9207      	str	r2, [sp, #28]
 801c770:	9a08      	ldr	r2, [sp, #32]
 801c772:	2a00      	cmp	r2, #0
 801c774:	dc38      	bgt.n	801c7e8 <_dtoa_r+0x2a0>
 801c776:	f04f 0a01 	mov.w	sl, #1
 801c77a:	46d1      	mov	r9, sl
 801c77c:	4652      	mov	r2, sl
 801c77e:	f8cd a020 	str.w	sl, [sp, #32]
 801c782:	69f7      	ldr	r7, [r6, #28]
 801c784:	2100      	movs	r1, #0
 801c786:	2004      	movs	r0, #4
 801c788:	f100 0c14 	add.w	ip, r0, #20
 801c78c:	4594      	cmp	ip, r2
 801c78e:	d930      	bls.n	801c7f2 <_dtoa_r+0x2aa>
 801c790:	6079      	str	r1, [r7, #4]
 801c792:	4630      	mov	r0, r6
 801c794:	930d      	str	r3, [sp, #52]	; 0x34
 801c796:	f000 fd43 	bl	801d220 <_Balloc>
 801c79a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c79c:	9001      	str	r0, [sp, #4]
 801c79e:	4602      	mov	r2, r0
 801c7a0:	2800      	cmp	r0, #0
 801c7a2:	d145      	bne.n	801c830 <_dtoa_r+0x2e8>
 801c7a4:	4b21      	ldr	r3, [pc, #132]	; (801c82c <_dtoa_r+0x2e4>)
 801c7a6:	f240 11af 	movw	r1, #431	; 0x1af
 801c7aa:	e6e5      	b.n	801c578 <_dtoa_r+0x30>
 801c7ac:	2201      	movs	r2, #1
 801c7ae:	e7de      	b.n	801c76e <_dtoa_r+0x226>
 801c7b0:	2200      	movs	r2, #0
 801c7b2:	9207      	str	r2, [sp, #28]
 801c7b4:	9a08      	ldr	r2, [sp, #32]
 801c7b6:	eb0b 0a02 	add.w	sl, fp, r2
 801c7ba:	f10a 0901 	add.w	r9, sl, #1
 801c7be:	464a      	mov	r2, r9
 801c7c0:	2a01      	cmp	r2, #1
 801c7c2:	bfb8      	it	lt
 801c7c4:	2201      	movlt	r2, #1
 801c7c6:	e7dc      	b.n	801c782 <_dtoa_r+0x23a>
 801c7c8:	2201      	movs	r2, #1
 801c7ca:	e7f2      	b.n	801c7b2 <_dtoa_r+0x26a>
 801c7cc:	2401      	movs	r4, #1
 801c7ce:	2200      	movs	r2, #0
 801c7d0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801c7d4:	f04f 3aff 	mov.w	sl, #4294967295
 801c7d8:	2100      	movs	r1, #0
 801c7da:	46d1      	mov	r9, sl
 801c7dc:	2212      	movs	r2, #18
 801c7de:	9108      	str	r1, [sp, #32]
 801c7e0:	e7cf      	b.n	801c782 <_dtoa_r+0x23a>
 801c7e2:	2201      	movs	r2, #1
 801c7e4:	9207      	str	r2, [sp, #28]
 801c7e6:	e7f5      	b.n	801c7d4 <_dtoa_r+0x28c>
 801c7e8:	f8dd a020 	ldr.w	sl, [sp, #32]
 801c7ec:	46d1      	mov	r9, sl
 801c7ee:	4652      	mov	r2, sl
 801c7f0:	e7c7      	b.n	801c782 <_dtoa_r+0x23a>
 801c7f2:	3101      	adds	r1, #1
 801c7f4:	0040      	lsls	r0, r0, #1
 801c7f6:	e7c7      	b.n	801c788 <_dtoa_r+0x240>
 801c7f8:	636f4361 	.word	0x636f4361
 801c7fc:	3fd287a7 	.word	0x3fd287a7
 801c800:	8b60c8b3 	.word	0x8b60c8b3
 801c804:	3fc68a28 	.word	0x3fc68a28
 801c808:	509f79fb 	.word	0x509f79fb
 801c80c:	3fd34413 	.word	0x3fd34413
 801c810:	080209cc 	.word	0x080209cc
 801c814:	080209e3 	.word	0x080209e3
 801c818:	7ff00000 	.word	0x7ff00000
 801c81c:	080209c8 	.word	0x080209c8
 801c820:	080209bf 	.word	0x080209bf
 801c824:	08020d21 	.word	0x08020d21
 801c828:	08020ad0 	.word	0x08020ad0
 801c82c:	08020a3b 	.word	0x08020a3b
 801c830:	69f2      	ldr	r2, [r6, #28]
 801c832:	9901      	ldr	r1, [sp, #4]
 801c834:	6011      	str	r1, [r2, #0]
 801c836:	f1b9 0f0e 	cmp.w	r9, #14
 801c83a:	d86c      	bhi.n	801c916 <_dtoa_r+0x3ce>
 801c83c:	2c00      	cmp	r4, #0
 801c83e:	d06a      	beq.n	801c916 <_dtoa_r+0x3ce>
 801c840:	f1bb 0f00 	cmp.w	fp, #0
 801c844:	f340 80a0 	ble.w	801c988 <_dtoa_r+0x440>
 801c848:	4ac1      	ldr	r2, [pc, #772]	; (801cb50 <_dtoa_r+0x608>)
 801c84a:	f00b 010f 	and.w	r1, fp, #15
 801c84e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801c852:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801c856:	ed92 7b00 	vldr	d7, [r2]
 801c85a:	ea4f 122b 	mov.w	r2, fp, asr #4
 801c85e:	f000 8087 	beq.w	801c970 <_dtoa_r+0x428>
 801c862:	49bc      	ldr	r1, [pc, #752]	; (801cb54 <_dtoa_r+0x60c>)
 801c864:	ed91 6b08 	vldr	d6, [r1, #32]
 801c868:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801c86c:	ed8d 6b02 	vstr	d6, [sp, #8]
 801c870:	f002 020f 	and.w	r2, r2, #15
 801c874:	2103      	movs	r1, #3
 801c876:	48b7      	ldr	r0, [pc, #732]	; (801cb54 <_dtoa_r+0x60c>)
 801c878:	2a00      	cmp	r2, #0
 801c87a:	d17b      	bne.n	801c974 <_dtoa_r+0x42c>
 801c87c:	ed9d 6b02 	vldr	d6, [sp, #8]
 801c880:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801c884:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c888:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c88a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c88e:	2a00      	cmp	r2, #0
 801c890:	f000 80a0 	beq.w	801c9d4 <_dtoa_r+0x48c>
 801c894:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801c898:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801c89c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c8a0:	f140 8098 	bpl.w	801c9d4 <_dtoa_r+0x48c>
 801c8a4:	f1b9 0f00 	cmp.w	r9, #0
 801c8a8:	f000 8094 	beq.w	801c9d4 <_dtoa_r+0x48c>
 801c8ac:	f1ba 0f00 	cmp.w	sl, #0
 801c8b0:	dd2f      	ble.n	801c912 <_dtoa_r+0x3ca>
 801c8b2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801c8b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c8ba:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c8be:	f10b 32ff 	add.w	r2, fp, #4294967295
 801c8c2:	3101      	adds	r1, #1
 801c8c4:	4654      	mov	r4, sl
 801c8c6:	ed9d 6b02 	vldr	d6, [sp, #8]
 801c8ca:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801c8ce:	ee07 1a90 	vmov	s15, r1
 801c8d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801c8d6:	eea7 5b06 	vfma.f64	d5, d7, d6
 801c8da:	ee15 7a90 	vmov	r7, s11
 801c8de:	ec51 0b15 	vmov	r0, r1, d5
 801c8e2:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 801c8e6:	2c00      	cmp	r4, #0
 801c8e8:	d177      	bne.n	801c9da <_dtoa_r+0x492>
 801c8ea:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801c8ee:	ee36 6b47 	vsub.f64	d6, d6, d7
 801c8f2:	ec41 0b17 	vmov	d7, r0, r1
 801c8f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c8fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c8fe:	f300 826a 	bgt.w	801cdd6 <_dtoa_r+0x88e>
 801c902:	eeb1 7b47 	vneg.f64	d7, d7
 801c906:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c90a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c90e:	f100 8260 	bmi.w	801cdd2 <_dtoa_r+0x88a>
 801c912:	ed8d 8b02 	vstr	d8, [sp, #8]
 801c916:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c918:	2a00      	cmp	r2, #0
 801c91a:	f2c0 811d 	blt.w	801cb58 <_dtoa_r+0x610>
 801c91e:	f1bb 0f0e 	cmp.w	fp, #14
 801c922:	f300 8119 	bgt.w	801cb58 <_dtoa_r+0x610>
 801c926:	4b8a      	ldr	r3, [pc, #552]	; (801cb50 <_dtoa_r+0x608>)
 801c928:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801c92c:	ed93 6b00 	vldr	d6, [r3]
 801c930:	9b08      	ldr	r3, [sp, #32]
 801c932:	2b00      	cmp	r3, #0
 801c934:	f280 80b7 	bge.w	801caa6 <_dtoa_r+0x55e>
 801c938:	f1b9 0f00 	cmp.w	r9, #0
 801c93c:	f300 80b3 	bgt.w	801caa6 <_dtoa_r+0x55e>
 801c940:	f040 8246 	bne.w	801cdd0 <_dtoa_r+0x888>
 801c944:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801c948:	ee26 6b07 	vmul.f64	d6, d6, d7
 801c94c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c950:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c958:	464c      	mov	r4, r9
 801c95a:	464f      	mov	r7, r9
 801c95c:	f280 821c 	bge.w	801cd98 <_dtoa_r+0x850>
 801c960:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c964:	2331      	movs	r3, #49	; 0x31
 801c966:	f808 3b01 	strb.w	r3, [r8], #1
 801c96a:	f10b 0b01 	add.w	fp, fp, #1
 801c96e:	e218      	b.n	801cda2 <_dtoa_r+0x85a>
 801c970:	2102      	movs	r1, #2
 801c972:	e780      	b.n	801c876 <_dtoa_r+0x32e>
 801c974:	07d4      	lsls	r4, r2, #31
 801c976:	d504      	bpl.n	801c982 <_dtoa_r+0x43a>
 801c978:	ed90 6b00 	vldr	d6, [r0]
 801c97c:	3101      	adds	r1, #1
 801c97e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c982:	1052      	asrs	r2, r2, #1
 801c984:	3008      	adds	r0, #8
 801c986:	e777      	b.n	801c878 <_dtoa_r+0x330>
 801c988:	d022      	beq.n	801c9d0 <_dtoa_r+0x488>
 801c98a:	f1cb 0200 	rsb	r2, fp, #0
 801c98e:	4970      	ldr	r1, [pc, #448]	; (801cb50 <_dtoa_r+0x608>)
 801c990:	f002 000f 	and.w	r0, r2, #15
 801c994:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801c998:	ed91 7b00 	vldr	d7, [r1]
 801c99c:	ee28 7b07 	vmul.f64	d7, d8, d7
 801c9a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c9a4:	486b      	ldr	r0, [pc, #428]	; (801cb54 <_dtoa_r+0x60c>)
 801c9a6:	1112      	asrs	r2, r2, #4
 801c9a8:	2400      	movs	r4, #0
 801c9aa:	2102      	movs	r1, #2
 801c9ac:	b92a      	cbnz	r2, 801c9ba <_dtoa_r+0x472>
 801c9ae:	2c00      	cmp	r4, #0
 801c9b0:	f43f af6a 	beq.w	801c888 <_dtoa_r+0x340>
 801c9b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c9b8:	e766      	b.n	801c888 <_dtoa_r+0x340>
 801c9ba:	07d7      	lsls	r7, r2, #31
 801c9bc:	d505      	bpl.n	801c9ca <_dtoa_r+0x482>
 801c9be:	ed90 6b00 	vldr	d6, [r0]
 801c9c2:	3101      	adds	r1, #1
 801c9c4:	2401      	movs	r4, #1
 801c9c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c9ca:	1052      	asrs	r2, r2, #1
 801c9cc:	3008      	adds	r0, #8
 801c9ce:	e7ed      	b.n	801c9ac <_dtoa_r+0x464>
 801c9d0:	2102      	movs	r1, #2
 801c9d2:	e759      	b.n	801c888 <_dtoa_r+0x340>
 801c9d4:	465a      	mov	r2, fp
 801c9d6:	464c      	mov	r4, r9
 801c9d8:	e775      	b.n	801c8c6 <_dtoa_r+0x37e>
 801c9da:	ec41 0b17 	vmov	d7, r0, r1
 801c9de:	495c      	ldr	r1, [pc, #368]	; (801cb50 <_dtoa_r+0x608>)
 801c9e0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 801c9e4:	ed11 4b02 	vldr	d4, [r1, #-8]
 801c9e8:	9901      	ldr	r1, [sp, #4]
 801c9ea:	440c      	add	r4, r1
 801c9ec:	9907      	ldr	r1, [sp, #28]
 801c9ee:	b351      	cbz	r1, 801ca46 <_dtoa_r+0x4fe>
 801c9f0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801c9f4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801c9f8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c9fc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801ca00:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801ca04:	ee35 7b47 	vsub.f64	d7, d5, d7
 801ca08:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801ca0c:	ee14 1a90 	vmov	r1, s9
 801ca10:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801ca14:	3130      	adds	r1, #48	; 0x30
 801ca16:	ee36 6b45 	vsub.f64	d6, d6, d5
 801ca1a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ca1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca22:	f808 1b01 	strb.w	r1, [r8], #1
 801ca26:	d439      	bmi.n	801ca9c <_dtoa_r+0x554>
 801ca28:	ee32 5b46 	vsub.f64	d5, d2, d6
 801ca2c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801ca30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca34:	d472      	bmi.n	801cb1c <_dtoa_r+0x5d4>
 801ca36:	45a0      	cmp	r8, r4
 801ca38:	f43f af6b 	beq.w	801c912 <_dtoa_r+0x3ca>
 801ca3c:	ee27 7b03 	vmul.f64	d7, d7, d3
 801ca40:	ee26 6b03 	vmul.f64	d6, d6, d3
 801ca44:	e7e0      	b.n	801ca08 <_dtoa_r+0x4c0>
 801ca46:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801ca4a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801ca4e:	4620      	mov	r0, r4
 801ca50:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801ca54:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801ca58:	ee14 1a90 	vmov	r1, s9
 801ca5c:	3130      	adds	r1, #48	; 0x30
 801ca5e:	f808 1b01 	strb.w	r1, [r8], #1
 801ca62:	45a0      	cmp	r8, r4
 801ca64:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801ca68:	ee36 6b45 	vsub.f64	d6, d6, d5
 801ca6c:	d118      	bne.n	801caa0 <_dtoa_r+0x558>
 801ca6e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801ca72:	ee37 4b05 	vadd.f64	d4, d7, d5
 801ca76:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801ca7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca7e:	dc4d      	bgt.n	801cb1c <_dtoa_r+0x5d4>
 801ca80:	ee35 5b47 	vsub.f64	d5, d5, d7
 801ca84:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801ca88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca8c:	f57f af41 	bpl.w	801c912 <_dtoa_r+0x3ca>
 801ca90:	4680      	mov	r8, r0
 801ca92:	3801      	subs	r0, #1
 801ca94:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801ca98:	2b30      	cmp	r3, #48	; 0x30
 801ca9a:	d0f9      	beq.n	801ca90 <_dtoa_r+0x548>
 801ca9c:	4693      	mov	fp, r2
 801ca9e:	e02a      	b.n	801caf6 <_dtoa_r+0x5ae>
 801caa0:	ee26 6b03 	vmul.f64	d6, d6, d3
 801caa4:	e7d6      	b.n	801ca54 <_dtoa_r+0x50c>
 801caa6:	ed9d 7b02 	vldr	d7, [sp, #8]
 801caaa:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801caae:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801cab2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801cab6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801caba:	ee15 3a10 	vmov	r3, s10
 801cabe:	3330      	adds	r3, #48	; 0x30
 801cac0:	f808 3b01 	strb.w	r3, [r8], #1
 801cac4:	9b01      	ldr	r3, [sp, #4]
 801cac6:	eba8 0303 	sub.w	r3, r8, r3
 801caca:	4599      	cmp	r9, r3
 801cacc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801cad0:	eea3 7b46 	vfms.f64	d7, d3, d6
 801cad4:	d133      	bne.n	801cb3e <_dtoa_r+0x5f6>
 801cad6:	ee37 7b07 	vadd.f64	d7, d7, d7
 801cada:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801cade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cae2:	dc1a      	bgt.n	801cb1a <_dtoa_r+0x5d2>
 801cae4:	eeb4 7b46 	vcmp.f64	d7, d6
 801cae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801caec:	d103      	bne.n	801caf6 <_dtoa_r+0x5ae>
 801caee:	ee15 3a10 	vmov	r3, s10
 801caf2:	07d9      	lsls	r1, r3, #31
 801caf4:	d411      	bmi.n	801cb1a <_dtoa_r+0x5d2>
 801caf6:	4629      	mov	r1, r5
 801caf8:	4630      	mov	r0, r6
 801cafa:	f000 fbd1 	bl	801d2a0 <_Bfree>
 801cafe:	2300      	movs	r3, #0
 801cb00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cb02:	f888 3000 	strb.w	r3, [r8]
 801cb06:	f10b 0301 	add.w	r3, fp, #1
 801cb0a:	6013      	str	r3, [r2, #0]
 801cb0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801cb0e:	2b00      	cmp	r3, #0
 801cb10:	f43f ad69 	beq.w	801c5e6 <_dtoa_r+0x9e>
 801cb14:	f8c3 8000 	str.w	r8, [r3]
 801cb18:	e565      	b.n	801c5e6 <_dtoa_r+0x9e>
 801cb1a:	465a      	mov	r2, fp
 801cb1c:	4643      	mov	r3, r8
 801cb1e:	4698      	mov	r8, r3
 801cb20:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 801cb24:	2939      	cmp	r1, #57	; 0x39
 801cb26:	d106      	bne.n	801cb36 <_dtoa_r+0x5ee>
 801cb28:	9901      	ldr	r1, [sp, #4]
 801cb2a:	4299      	cmp	r1, r3
 801cb2c:	d1f7      	bne.n	801cb1e <_dtoa_r+0x5d6>
 801cb2e:	9801      	ldr	r0, [sp, #4]
 801cb30:	2130      	movs	r1, #48	; 0x30
 801cb32:	3201      	adds	r2, #1
 801cb34:	7001      	strb	r1, [r0, #0]
 801cb36:	7819      	ldrb	r1, [r3, #0]
 801cb38:	3101      	adds	r1, #1
 801cb3a:	7019      	strb	r1, [r3, #0]
 801cb3c:	e7ae      	b.n	801ca9c <_dtoa_r+0x554>
 801cb3e:	ee27 7b04 	vmul.f64	d7, d7, d4
 801cb42:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801cb46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb4a:	d1b2      	bne.n	801cab2 <_dtoa_r+0x56a>
 801cb4c:	e7d3      	b.n	801caf6 <_dtoa_r+0x5ae>
 801cb4e:	bf00      	nop
 801cb50:	08020ad0 	.word	0x08020ad0
 801cb54:	08020aa8 	.word	0x08020aa8
 801cb58:	9907      	ldr	r1, [sp, #28]
 801cb5a:	2900      	cmp	r1, #0
 801cb5c:	f000 80d0 	beq.w	801cd00 <_dtoa_r+0x7b8>
 801cb60:	9906      	ldr	r1, [sp, #24]
 801cb62:	2901      	cmp	r1, #1
 801cb64:	f300 80b4 	bgt.w	801ccd0 <_dtoa_r+0x788>
 801cb68:	9909      	ldr	r1, [sp, #36]	; 0x24
 801cb6a:	2900      	cmp	r1, #0
 801cb6c:	f000 80ac 	beq.w	801ccc8 <_dtoa_r+0x780>
 801cb70:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801cb74:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801cb78:	461c      	mov	r4, r3
 801cb7a:	9309      	str	r3, [sp, #36]	; 0x24
 801cb7c:	9b04      	ldr	r3, [sp, #16]
 801cb7e:	4413      	add	r3, r2
 801cb80:	9304      	str	r3, [sp, #16]
 801cb82:	9b05      	ldr	r3, [sp, #20]
 801cb84:	2101      	movs	r1, #1
 801cb86:	4413      	add	r3, r2
 801cb88:	4630      	mov	r0, r6
 801cb8a:	9305      	str	r3, [sp, #20]
 801cb8c:	f000 fc88 	bl	801d4a0 <__i2b>
 801cb90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cb92:	4607      	mov	r7, r0
 801cb94:	f1b8 0f00 	cmp.w	r8, #0
 801cb98:	d00d      	beq.n	801cbb6 <_dtoa_r+0x66e>
 801cb9a:	9a05      	ldr	r2, [sp, #20]
 801cb9c:	2a00      	cmp	r2, #0
 801cb9e:	dd0a      	ble.n	801cbb6 <_dtoa_r+0x66e>
 801cba0:	4542      	cmp	r2, r8
 801cba2:	9904      	ldr	r1, [sp, #16]
 801cba4:	bfa8      	it	ge
 801cba6:	4642      	movge	r2, r8
 801cba8:	1a89      	subs	r1, r1, r2
 801cbaa:	9104      	str	r1, [sp, #16]
 801cbac:	9905      	ldr	r1, [sp, #20]
 801cbae:	eba8 0802 	sub.w	r8, r8, r2
 801cbb2:	1a8a      	subs	r2, r1, r2
 801cbb4:	9205      	str	r2, [sp, #20]
 801cbb6:	b303      	cbz	r3, 801cbfa <_dtoa_r+0x6b2>
 801cbb8:	9a07      	ldr	r2, [sp, #28]
 801cbba:	2a00      	cmp	r2, #0
 801cbbc:	f000 80a5 	beq.w	801cd0a <_dtoa_r+0x7c2>
 801cbc0:	2c00      	cmp	r4, #0
 801cbc2:	dd13      	ble.n	801cbec <_dtoa_r+0x6a4>
 801cbc4:	4639      	mov	r1, r7
 801cbc6:	4622      	mov	r2, r4
 801cbc8:	4630      	mov	r0, r6
 801cbca:	930d      	str	r3, [sp, #52]	; 0x34
 801cbcc:	f000 fd28 	bl	801d620 <__pow5mult>
 801cbd0:	462a      	mov	r2, r5
 801cbd2:	4601      	mov	r1, r0
 801cbd4:	4607      	mov	r7, r0
 801cbd6:	4630      	mov	r0, r6
 801cbd8:	f000 fc78 	bl	801d4cc <__multiply>
 801cbdc:	4629      	mov	r1, r5
 801cbde:	9009      	str	r0, [sp, #36]	; 0x24
 801cbe0:	4630      	mov	r0, r6
 801cbe2:	f000 fb5d 	bl	801d2a0 <_Bfree>
 801cbe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cbe8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cbea:	4615      	mov	r5, r2
 801cbec:	1b1a      	subs	r2, r3, r4
 801cbee:	d004      	beq.n	801cbfa <_dtoa_r+0x6b2>
 801cbf0:	4629      	mov	r1, r5
 801cbf2:	4630      	mov	r0, r6
 801cbf4:	f000 fd14 	bl	801d620 <__pow5mult>
 801cbf8:	4605      	mov	r5, r0
 801cbfa:	2101      	movs	r1, #1
 801cbfc:	4630      	mov	r0, r6
 801cbfe:	f000 fc4f 	bl	801d4a0 <__i2b>
 801cc02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cc04:	2b00      	cmp	r3, #0
 801cc06:	4604      	mov	r4, r0
 801cc08:	f340 8081 	ble.w	801cd0e <_dtoa_r+0x7c6>
 801cc0c:	461a      	mov	r2, r3
 801cc0e:	4601      	mov	r1, r0
 801cc10:	4630      	mov	r0, r6
 801cc12:	f000 fd05 	bl	801d620 <__pow5mult>
 801cc16:	9b06      	ldr	r3, [sp, #24]
 801cc18:	2b01      	cmp	r3, #1
 801cc1a:	4604      	mov	r4, r0
 801cc1c:	dd7a      	ble.n	801cd14 <_dtoa_r+0x7cc>
 801cc1e:	2300      	movs	r3, #0
 801cc20:	9309      	str	r3, [sp, #36]	; 0x24
 801cc22:	6922      	ldr	r2, [r4, #16]
 801cc24:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801cc28:	6910      	ldr	r0, [r2, #16]
 801cc2a:	f000 fbeb 	bl	801d404 <__hi0bits>
 801cc2e:	f1c0 0020 	rsb	r0, r0, #32
 801cc32:	9b05      	ldr	r3, [sp, #20]
 801cc34:	4418      	add	r0, r3
 801cc36:	f010 001f 	ands.w	r0, r0, #31
 801cc3a:	f000 8093 	beq.w	801cd64 <_dtoa_r+0x81c>
 801cc3e:	f1c0 0220 	rsb	r2, r0, #32
 801cc42:	2a04      	cmp	r2, #4
 801cc44:	f340 8085 	ble.w	801cd52 <_dtoa_r+0x80a>
 801cc48:	9b04      	ldr	r3, [sp, #16]
 801cc4a:	f1c0 001c 	rsb	r0, r0, #28
 801cc4e:	4403      	add	r3, r0
 801cc50:	9304      	str	r3, [sp, #16]
 801cc52:	9b05      	ldr	r3, [sp, #20]
 801cc54:	4480      	add	r8, r0
 801cc56:	4403      	add	r3, r0
 801cc58:	9305      	str	r3, [sp, #20]
 801cc5a:	9b04      	ldr	r3, [sp, #16]
 801cc5c:	2b00      	cmp	r3, #0
 801cc5e:	dd05      	ble.n	801cc6c <_dtoa_r+0x724>
 801cc60:	4629      	mov	r1, r5
 801cc62:	461a      	mov	r2, r3
 801cc64:	4630      	mov	r0, r6
 801cc66:	f000 fd35 	bl	801d6d4 <__lshift>
 801cc6a:	4605      	mov	r5, r0
 801cc6c:	9b05      	ldr	r3, [sp, #20]
 801cc6e:	2b00      	cmp	r3, #0
 801cc70:	dd05      	ble.n	801cc7e <_dtoa_r+0x736>
 801cc72:	4621      	mov	r1, r4
 801cc74:	461a      	mov	r2, r3
 801cc76:	4630      	mov	r0, r6
 801cc78:	f000 fd2c 	bl	801d6d4 <__lshift>
 801cc7c:	4604      	mov	r4, r0
 801cc7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cc80:	2b00      	cmp	r3, #0
 801cc82:	d071      	beq.n	801cd68 <_dtoa_r+0x820>
 801cc84:	4621      	mov	r1, r4
 801cc86:	4628      	mov	r0, r5
 801cc88:	f000 fd90 	bl	801d7ac <__mcmp>
 801cc8c:	2800      	cmp	r0, #0
 801cc8e:	da6b      	bge.n	801cd68 <_dtoa_r+0x820>
 801cc90:	2300      	movs	r3, #0
 801cc92:	4629      	mov	r1, r5
 801cc94:	220a      	movs	r2, #10
 801cc96:	4630      	mov	r0, r6
 801cc98:	f000 fb24 	bl	801d2e4 <__multadd>
 801cc9c:	9b07      	ldr	r3, [sp, #28]
 801cc9e:	f10b 3bff 	add.w	fp, fp, #4294967295
 801cca2:	4605      	mov	r5, r0
 801cca4:	2b00      	cmp	r3, #0
 801cca6:	f000 8197 	beq.w	801cfd8 <_dtoa_r+0xa90>
 801ccaa:	4639      	mov	r1, r7
 801ccac:	2300      	movs	r3, #0
 801ccae:	220a      	movs	r2, #10
 801ccb0:	4630      	mov	r0, r6
 801ccb2:	f000 fb17 	bl	801d2e4 <__multadd>
 801ccb6:	f1ba 0f00 	cmp.w	sl, #0
 801ccba:	4607      	mov	r7, r0
 801ccbc:	f300 8093 	bgt.w	801cde6 <_dtoa_r+0x89e>
 801ccc0:	9b06      	ldr	r3, [sp, #24]
 801ccc2:	2b02      	cmp	r3, #2
 801ccc4:	dc57      	bgt.n	801cd76 <_dtoa_r+0x82e>
 801ccc6:	e08e      	b.n	801cde6 <_dtoa_r+0x89e>
 801ccc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ccca:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801ccce:	e751      	b.n	801cb74 <_dtoa_r+0x62c>
 801ccd0:	f109 34ff 	add.w	r4, r9, #4294967295
 801ccd4:	42a3      	cmp	r3, r4
 801ccd6:	bfbf      	itttt	lt
 801ccd8:	1ae2      	sublt	r2, r4, r3
 801ccda:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801ccdc:	189b      	addlt	r3, r3, r2
 801ccde:	930a      	strlt	r3, [sp, #40]	; 0x28
 801cce0:	bfae      	itee	ge
 801cce2:	1b1c      	subge	r4, r3, r4
 801cce4:	4623      	movlt	r3, r4
 801cce6:	2400      	movlt	r4, #0
 801cce8:	f1b9 0f00 	cmp.w	r9, #0
 801ccec:	bfb5      	itete	lt
 801ccee:	9a04      	ldrlt	r2, [sp, #16]
 801ccf0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801ccf4:	eba2 0809 	sublt.w	r8, r2, r9
 801ccf8:	464a      	movge	r2, r9
 801ccfa:	bfb8      	it	lt
 801ccfc:	2200      	movlt	r2, #0
 801ccfe:	e73c      	b.n	801cb7a <_dtoa_r+0x632>
 801cd00:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801cd04:	9f07      	ldr	r7, [sp, #28]
 801cd06:	461c      	mov	r4, r3
 801cd08:	e744      	b.n	801cb94 <_dtoa_r+0x64c>
 801cd0a:	461a      	mov	r2, r3
 801cd0c:	e770      	b.n	801cbf0 <_dtoa_r+0x6a8>
 801cd0e:	9b06      	ldr	r3, [sp, #24]
 801cd10:	2b01      	cmp	r3, #1
 801cd12:	dc18      	bgt.n	801cd46 <_dtoa_r+0x7fe>
 801cd14:	9b02      	ldr	r3, [sp, #8]
 801cd16:	b9b3      	cbnz	r3, 801cd46 <_dtoa_r+0x7fe>
 801cd18:	9b03      	ldr	r3, [sp, #12]
 801cd1a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801cd1e:	b9a2      	cbnz	r2, 801cd4a <_dtoa_r+0x802>
 801cd20:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801cd24:	0d12      	lsrs	r2, r2, #20
 801cd26:	0512      	lsls	r2, r2, #20
 801cd28:	b18a      	cbz	r2, 801cd4e <_dtoa_r+0x806>
 801cd2a:	9b04      	ldr	r3, [sp, #16]
 801cd2c:	3301      	adds	r3, #1
 801cd2e:	9304      	str	r3, [sp, #16]
 801cd30:	9b05      	ldr	r3, [sp, #20]
 801cd32:	3301      	adds	r3, #1
 801cd34:	9305      	str	r3, [sp, #20]
 801cd36:	2301      	movs	r3, #1
 801cd38:	9309      	str	r3, [sp, #36]	; 0x24
 801cd3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cd3c:	2b00      	cmp	r3, #0
 801cd3e:	f47f af70 	bne.w	801cc22 <_dtoa_r+0x6da>
 801cd42:	2001      	movs	r0, #1
 801cd44:	e775      	b.n	801cc32 <_dtoa_r+0x6ea>
 801cd46:	2300      	movs	r3, #0
 801cd48:	e7f6      	b.n	801cd38 <_dtoa_r+0x7f0>
 801cd4a:	9b02      	ldr	r3, [sp, #8]
 801cd4c:	e7f4      	b.n	801cd38 <_dtoa_r+0x7f0>
 801cd4e:	9209      	str	r2, [sp, #36]	; 0x24
 801cd50:	e7f3      	b.n	801cd3a <_dtoa_r+0x7f2>
 801cd52:	d082      	beq.n	801cc5a <_dtoa_r+0x712>
 801cd54:	9b04      	ldr	r3, [sp, #16]
 801cd56:	321c      	adds	r2, #28
 801cd58:	4413      	add	r3, r2
 801cd5a:	9304      	str	r3, [sp, #16]
 801cd5c:	9b05      	ldr	r3, [sp, #20]
 801cd5e:	4490      	add	r8, r2
 801cd60:	4413      	add	r3, r2
 801cd62:	e779      	b.n	801cc58 <_dtoa_r+0x710>
 801cd64:	4602      	mov	r2, r0
 801cd66:	e7f5      	b.n	801cd54 <_dtoa_r+0x80c>
 801cd68:	f1b9 0f00 	cmp.w	r9, #0
 801cd6c:	dc36      	bgt.n	801cddc <_dtoa_r+0x894>
 801cd6e:	9b06      	ldr	r3, [sp, #24]
 801cd70:	2b02      	cmp	r3, #2
 801cd72:	dd33      	ble.n	801cddc <_dtoa_r+0x894>
 801cd74:	46ca      	mov	sl, r9
 801cd76:	f1ba 0f00 	cmp.w	sl, #0
 801cd7a:	d10d      	bne.n	801cd98 <_dtoa_r+0x850>
 801cd7c:	4621      	mov	r1, r4
 801cd7e:	4653      	mov	r3, sl
 801cd80:	2205      	movs	r2, #5
 801cd82:	4630      	mov	r0, r6
 801cd84:	f000 faae 	bl	801d2e4 <__multadd>
 801cd88:	4601      	mov	r1, r0
 801cd8a:	4604      	mov	r4, r0
 801cd8c:	4628      	mov	r0, r5
 801cd8e:	f000 fd0d 	bl	801d7ac <__mcmp>
 801cd92:	2800      	cmp	r0, #0
 801cd94:	f73f ade4 	bgt.w	801c960 <_dtoa_r+0x418>
 801cd98:	9b08      	ldr	r3, [sp, #32]
 801cd9a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801cd9e:	ea6f 0b03 	mvn.w	fp, r3
 801cda2:	f04f 0900 	mov.w	r9, #0
 801cda6:	4621      	mov	r1, r4
 801cda8:	4630      	mov	r0, r6
 801cdaa:	f000 fa79 	bl	801d2a0 <_Bfree>
 801cdae:	2f00      	cmp	r7, #0
 801cdb0:	f43f aea1 	beq.w	801caf6 <_dtoa_r+0x5ae>
 801cdb4:	f1b9 0f00 	cmp.w	r9, #0
 801cdb8:	d005      	beq.n	801cdc6 <_dtoa_r+0x87e>
 801cdba:	45b9      	cmp	r9, r7
 801cdbc:	d003      	beq.n	801cdc6 <_dtoa_r+0x87e>
 801cdbe:	4649      	mov	r1, r9
 801cdc0:	4630      	mov	r0, r6
 801cdc2:	f000 fa6d 	bl	801d2a0 <_Bfree>
 801cdc6:	4639      	mov	r1, r7
 801cdc8:	4630      	mov	r0, r6
 801cdca:	f000 fa69 	bl	801d2a0 <_Bfree>
 801cdce:	e692      	b.n	801caf6 <_dtoa_r+0x5ae>
 801cdd0:	2400      	movs	r4, #0
 801cdd2:	4627      	mov	r7, r4
 801cdd4:	e7e0      	b.n	801cd98 <_dtoa_r+0x850>
 801cdd6:	4693      	mov	fp, r2
 801cdd8:	4627      	mov	r7, r4
 801cdda:	e5c1      	b.n	801c960 <_dtoa_r+0x418>
 801cddc:	9b07      	ldr	r3, [sp, #28]
 801cdde:	46ca      	mov	sl, r9
 801cde0:	2b00      	cmp	r3, #0
 801cde2:	f000 8100 	beq.w	801cfe6 <_dtoa_r+0xa9e>
 801cde6:	f1b8 0f00 	cmp.w	r8, #0
 801cdea:	dd05      	ble.n	801cdf8 <_dtoa_r+0x8b0>
 801cdec:	4639      	mov	r1, r7
 801cdee:	4642      	mov	r2, r8
 801cdf0:	4630      	mov	r0, r6
 801cdf2:	f000 fc6f 	bl	801d6d4 <__lshift>
 801cdf6:	4607      	mov	r7, r0
 801cdf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cdfa:	2b00      	cmp	r3, #0
 801cdfc:	d05d      	beq.n	801ceba <_dtoa_r+0x972>
 801cdfe:	6879      	ldr	r1, [r7, #4]
 801ce00:	4630      	mov	r0, r6
 801ce02:	f000 fa0d 	bl	801d220 <_Balloc>
 801ce06:	4680      	mov	r8, r0
 801ce08:	b928      	cbnz	r0, 801ce16 <_dtoa_r+0x8ce>
 801ce0a:	4b82      	ldr	r3, [pc, #520]	; (801d014 <_dtoa_r+0xacc>)
 801ce0c:	4602      	mov	r2, r0
 801ce0e:	f240 21ef 	movw	r1, #751	; 0x2ef
 801ce12:	f7ff bbb1 	b.w	801c578 <_dtoa_r+0x30>
 801ce16:	693a      	ldr	r2, [r7, #16]
 801ce18:	3202      	adds	r2, #2
 801ce1a:	0092      	lsls	r2, r2, #2
 801ce1c:	f107 010c 	add.w	r1, r7, #12
 801ce20:	300c      	adds	r0, #12
 801ce22:	f7ff faf2 	bl	801c40a <memcpy>
 801ce26:	2201      	movs	r2, #1
 801ce28:	4641      	mov	r1, r8
 801ce2a:	4630      	mov	r0, r6
 801ce2c:	f000 fc52 	bl	801d6d4 <__lshift>
 801ce30:	9b01      	ldr	r3, [sp, #4]
 801ce32:	3301      	adds	r3, #1
 801ce34:	9304      	str	r3, [sp, #16]
 801ce36:	9b01      	ldr	r3, [sp, #4]
 801ce38:	4453      	add	r3, sl
 801ce3a:	9308      	str	r3, [sp, #32]
 801ce3c:	9b02      	ldr	r3, [sp, #8]
 801ce3e:	f003 0301 	and.w	r3, r3, #1
 801ce42:	46b9      	mov	r9, r7
 801ce44:	9307      	str	r3, [sp, #28]
 801ce46:	4607      	mov	r7, r0
 801ce48:	9b04      	ldr	r3, [sp, #16]
 801ce4a:	4621      	mov	r1, r4
 801ce4c:	3b01      	subs	r3, #1
 801ce4e:	4628      	mov	r0, r5
 801ce50:	9302      	str	r3, [sp, #8]
 801ce52:	f7ff faef 	bl	801c434 <quorem>
 801ce56:	4603      	mov	r3, r0
 801ce58:	3330      	adds	r3, #48	; 0x30
 801ce5a:	9005      	str	r0, [sp, #20]
 801ce5c:	4649      	mov	r1, r9
 801ce5e:	4628      	mov	r0, r5
 801ce60:	9309      	str	r3, [sp, #36]	; 0x24
 801ce62:	f000 fca3 	bl	801d7ac <__mcmp>
 801ce66:	463a      	mov	r2, r7
 801ce68:	4682      	mov	sl, r0
 801ce6a:	4621      	mov	r1, r4
 801ce6c:	4630      	mov	r0, r6
 801ce6e:	f000 fcb9 	bl	801d7e4 <__mdiff>
 801ce72:	68c2      	ldr	r2, [r0, #12]
 801ce74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ce76:	4680      	mov	r8, r0
 801ce78:	bb0a      	cbnz	r2, 801cebe <_dtoa_r+0x976>
 801ce7a:	4601      	mov	r1, r0
 801ce7c:	4628      	mov	r0, r5
 801ce7e:	f000 fc95 	bl	801d7ac <__mcmp>
 801ce82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ce84:	4602      	mov	r2, r0
 801ce86:	4641      	mov	r1, r8
 801ce88:	4630      	mov	r0, r6
 801ce8a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801ce8e:	f000 fa07 	bl	801d2a0 <_Bfree>
 801ce92:	9b06      	ldr	r3, [sp, #24]
 801ce94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ce96:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801ce9a:	ea43 0102 	orr.w	r1, r3, r2
 801ce9e:	9b07      	ldr	r3, [sp, #28]
 801cea0:	4319      	orrs	r1, r3
 801cea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cea4:	d10d      	bne.n	801cec2 <_dtoa_r+0x97a>
 801cea6:	2b39      	cmp	r3, #57	; 0x39
 801cea8:	d029      	beq.n	801cefe <_dtoa_r+0x9b6>
 801ceaa:	f1ba 0f00 	cmp.w	sl, #0
 801ceae:	dd01      	ble.n	801ceb4 <_dtoa_r+0x96c>
 801ceb0:	9b05      	ldr	r3, [sp, #20]
 801ceb2:	3331      	adds	r3, #49	; 0x31
 801ceb4:	9a02      	ldr	r2, [sp, #8]
 801ceb6:	7013      	strb	r3, [r2, #0]
 801ceb8:	e775      	b.n	801cda6 <_dtoa_r+0x85e>
 801ceba:	4638      	mov	r0, r7
 801cebc:	e7b8      	b.n	801ce30 <_dtoa_r+0x8e8>
 801cebe:	2201      	movs	r2, #1
 801cec0:	e7e1      	b.n	801ce86 <_dtoa_r+0x93e>
 801cec2:	f1ba 0f00 	cmp.w	sl, #0
 801cec6:	db06      	blt.n	801ced6 <_dtoa_r+0x98e>
 801cec8:	9906      	ldr	r1, [sp, #24]
 801ceca:	ea41 0a0a 	orr.w	sl, r1, sl
 801cece:	9907      	ldr	r1, [sp, #28]
 801ced0:	ea5a 0a01 	orrs.w	sl, sl, r1
 801ced4:	d120      	bne.n	801cf18 <_dtoa_r+0x9d0>
 801ced6:	2a00      	cmp	r2, #0
 801ced8:	ddec      	ble.n	801ceb4 <_dtoa_r+0x96c>
 801ceda:	4629      	mov	r1, r5
 801cedc:	2201      	movs	r2, #1
 801cede:	4630      	mov	r0, r6
 801cee0:	9304      	str	r3, [sp, #16]
 801cee2:	f000 fbf7 	bl	801d6d4 <__lshift>
 801cee6:	4621      	mov	r1, r4
 801cee8:	4605      	mov	r5, r0
 801ceea:	f000 fc5f 	bl	801d7ac <__mcmp>
 801ceee:	2800      	cmp	r0, #0
 801cef0:	9b04      	ldr	r3, [sp, #16]
 801cef2:	dc02      	bgt.n	801cefa <_dtoa_r+0x9b2>
 801cef4:	d1de      	bne.n	801ceb4 <_dtoa_r+0x96c>
 801cef6:	07da      	lsls	r2, r3, #31
 801cef8:	d5dc      	bpl.n	801ceb4 <_dtoa_r+0x96c>
 801cefa:	2b39      	cmp	r3, #57	; 0x39
 801cefc:	d1d8      	bne.n	801ceb0 <_dtoa_r+0x968>
 801cefe:	9a02      	ldr	r2, [sp, #8]
 801cf00:	2339      	movs	r3, #57	; 0x39
 801cf02:	7013      	strb	r3, [r2, #0]
 801cf04:	4643      	mov	r3, r8
 801cf06:	4698      	mov	r8, r3
 801cf08:	3b01      	subs	r3, #1
 801cf0a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801cf0e:	2a39      	cmp	r2, #57	; 0x39
 801cf10:	d051      	beq.n	801cfb6 <_dtoa_r+0xa6e>
 801cf12:	3201      	adds	r2, #1
 801cf14:	701a      	strb	r2, [r3, #0]
 801cf16:	e746      	b.n	801cda6 <_dtoa_r+0x85e>
 801cf18:	2a00      	cmp	r2, #0
 801cf1a:	dd03      	ble.n	801cf24 <_dtoa_r+0x9dc>
 801cf1c:	2b39      	cmp	r3, #57	; 0x39
 801cf1e:	d0ee      	beq.n	801cefe <_dtoa_r+0x9b6>
 801cf20:	3301      	adds	r3, #1
 801cf22:	e7c7      	b.n	801ceb4 <_dtoa_r+0x96c>
 801cf24:	9a04      	ldr	r2, [sp, #16]
 801cf26:	9908      	ldr	r1, [sp, #32]
 801cf28:	f802 3c01 	strb.w	r3, [r2, #-1]
 801cf2c:	428a      	cmp	r2, r1
 801cf2e:	d02b      	beq.n	801cf88 <_dtoa_r+0xa40>
 801cf30:	4629      	mov	r1, r5
 801cf32:	2300      	movs	r3, #0
 801cf34:	220a      	movs	r2, #10
 801cf36:	4630      	mov	r0, r6
 801cf38:	f000 f9d4 	bl	801d2e4 <__multadd>
 801cf3c:	45b9      	cmp	r9, r7
 801cf3e:	4605      	mov	r5, r0
 801cf40:	f04f 0300 	mov.w	r3, #0
 801cf44:	f04f 020a 	mov.w	r2, #10
 801cf48:	4649      	mov	r1, r9
 801cf4a:	4630      	mov	r0, r6
 801cf4c:	d107      	bne.n	801cf5e <_dtoa_r+0xa16>
 801cf4e:	f000 f9c9 	bl	801d2e4 <__multadd>
 801cf52:	4681      	mov	r9, r0
 801cf54:	4607      	mov	r7, r0
 801cf56:	9b04      	ldr	r3, [sp, #16]
 801cf58:	3301      	adds	r3, #1
 801cf5a:	9304      	str	r3, [sp, #16]
 801cf5c:	e774      	b.n	801ce48 <_dtoa_r+0x900>
 801cf5e:	f000 f9c1 	bl	801d2e4 <__multadd>
 801cf62:	4639      	mov	r1, r7
 801cf64:	4681      	mov	r9, r0
 801cf66:	2300      	movs	r3, #0
 801cf68:	220a      	movs	r2, #10
 801cf6a:	4630      	mov	r0, r6
 801cf6c:	f000 f9ba 	bl	801d2e4 <__multadd>
 801cf70:	4607      	mov	r7, r0
 801cf72:	e7f0      	b.n	801cf56 <_dtoa_r+0xa0e>
 801cf74:	f1ba 0f00 	cmp.w	sl, #0
 801cf78:	9a01      	ldr	r2, [sp, #4]
 801cf7a:	bfcc      	ite	gt
 801cf7c:	46d0      	movgt	r8, sl
 801cf7e:	f04f 0801 	movle.w	r8, #1
 801cf82:	4490      	add	r8, r2
 801cf84:	f04f 0900 	mov.w	r9, #0
 801cf88:	4629      	mov	r1, r5
 801cf8a:	2201      	movs	r2, #1
 801cf8c:	4630      	mov	r0, r6
 801cf8e:	9302      	str	r3, [sp, #8]
 801cf90:	f000 fba0 	bl	801d6d4 <__lshift>
 801cf94:	4621      	mov	r1, r4
 801cf96:	4605      	mov	r5, r0
 801cf98:	f000 fc08 	bl	801d7ac <__mcmp>
 801cf9c:	2800      	cmp	r0, #0
 801cf9e:	dcb1      	bgt.n	801cf04 <_dtoa_r+0x9bc>
 801cfa0:	d102      	bne.n	801cfa8 <_dtoa_r+0xa60>
 801cfa2:	9b02      	ldr	r3, [sp, #8]
 801cfa4:	07db      	lsls	r3, r3, #31
 801cfa6:	d4ad      	bmi.n	801cf04 <_dtoa_r+0x9bc>
 801cfa8:	4643      	mov	r3, r8
 801cfaa:	4698      	mov	r8, r3
 801cfac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801cfb0:	2a30      	cmp	r2, #48	; 0x30
 801cfb2:	d0fa      	beq.n	801cfaa <_dtoa_r+0xa62>
 801cfb4:	e6f7      	b.n	801cda6 <_dtoa_r+0x85e>
 801cfb6:	9a01      	ldr	r2, [sp, #4]
 801cfb8:	429a      	cmp	r2, r3
 801cfba:	d1a4      	bne.n	801cf06 <_dtoa_r+0x9be>
 801cfbc:	f10b 0b01 	add.w	fp, fp, #1
 801cfc0:	2331      	movs	r3, #49	; 0x31
 801cfc2:	e778      	b.n	801ceb6 <_dtoa_r+0x96e>
 801cfc4:	4b14      	ldr	r3, [pc, #80]	; (801d018 <_dtoa_r+0xad0>)
 801cfc6:	f7ff bb2a 	b.w	801c61e <_dtoa_r+0xd6>
 801cfca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801cfcc:	2b00      	cmp	r3, #0
 801cfce:	f47f ab05 	bne.w	801c5dc <_dtoa_r+0x94>
 801cfd2:	4b12      	ldr	r3, [pc, #72]	; (801d01c <_dtoa_r+0xad4>)
 801cfd4:	f7ff bb23 	b.w	801c61e <_dtoa_r+0xd6>
 801cfd8:	f1ba 0f00 	cmp.w	sl, #0
 801cfdc:	dc03      	bgt.n	801cfe6 <_dtoa_r+0xa9e>
 801cfde:	9b06      	ldr	r3, [sp, #24]
 801cfe0:	2b02      	cmp	r3, #2
 801cfe2:	f73f aec8 	bgt.w	801cd76 <_dtoa_r+0x82e>
 801cfe6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801cfea:	4621      	mov	r1, r4
 801cfec:	4628      	mov	r0, r5
 801cfee:	f7ff fa21 	bl	801c434 <quorem>
 801cff2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801cff6:	f808 3b01 	strb.w	r3, [r8], #1
 801cffa:	9a01      	ldr	r2, [sp, #4]
 801cffc:	eba8 0202 	sub.w	r2, r8, r2
 801d000:	4592      	cmp	sl, r2
 801d002:	ddb7      	ble.n	801cf74 <_dtoa_r+0xa2c>
 801d004:	4629      	mov	r1, r5
 801d006:	2300      	movs	r3, #0
 801d008:	220a      	movs	r2, #10
 801d00a:	4630      	mov	r0, r6
 801d00c:	f000 f96a 	bl	801d2e4 <__multadd>
 801d010:	4605      	mov	r5, r0
 801d012:	e7ea      	b.n	801cfea <_dtoa_r+0xaa2>
 801d014:	08020a3b 	.word	0x08020a3b
 801d018:	08020d20 	.word	0x08020d20
 801d01c:	080209bf 	.word	0x080209bf

0801d020 <_free_r>:
 801d020:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d022:	2900      	cmp	r1, #0
 801d024:	d044      	beq.n	801d0b0 <_free_r+0x90>
 801d026:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d02a:	9001      	str	r0, [sp, #4]
 801d02c:	2b00      	cmp	r3, #0
 801d02e:	f1a1 0404 	sub.w	r4, r1, #4
 801d032:	bfb8      	it	lt
 801d034:	18e4      	addlt	r4, r4, r3
 801d036:	f000 f8e7 	bl	801d208 <__malloc_lock>
 801d03a:	4a1e      	ldr	r2, [pc, #120]	; (801d0b4 <_free_r+0x94>)
 801d03c:	9801      	ldr	r0, [sp, #4]
 801d03e:	6813      	ldr	r3, [r2, #0]
 801d040:	b933      	cbnz	r3, 801d050 <_free_r+0x30>
 801d042:	6063      	str	r3, [r4, #4]
 801d044:	6014      	str	r4, [r2, #0]
 801d046:	b003      	add	sp, #12
 801d048:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d04c:	f000 b8e2 	b.w	801d214 <__malloc_unlock>
 801d050:	42a3      	cmp	r3, r4
 801d052:	d908      	bls.n	801d066 <_free_r+0x46>
 801d054:	6825      	ldr	r5, [r4, #0]
 801d056:	1961      	adds	r1, r4, r5
 801d058:	428b      	cmp	r3, r1
 801d05a:	bf01      	itttt	eq
 801d05c:	6819      	ldreq	r1, [r3, #0]
 801d05e:	685b      	ldreq	r3, [r3, #4]
 801d060:	1949      	addeq	r1, r1, r5
 801d062:	6021      	streq	r1, [r4, #0]
 801d064:	e7ed      	b.n	801d042 <_free_r+0x22>
 801d066:	461a      	mov	r2, r3
 801d068:	685b      	ldr	r3, [r3, #4]
 801d06a:	b10b      	cbz	r3, 801d070 <_free_r+0x50>
 801d06c:	42a3      	cmp	r3, r4
 801d06e:	d9fa      	bls.n	801d066 <_free_r+0x46>
 801d070:	6811      	ldr	r1, [r2, #0]
 801d072:	1855      	adds	r5, r2, r1
 801d074:	42a5      	cmp	r5, r4
 801d076:	d10b      	bne.n	801d090 <_free_r+0x70>
 801d078:	6824      	ldr	r4, [r4, #0]
 801d07a:	4421      	add	r1, r4
 801d07c:	1854      	adds	r4, r2, r1
 801d07e:	42a3      	cmp	r3, r4
 801d080:	6011      	str	r1, [r2, #0]
 801d082:	d1e0      	bne.n	801d046 <_free_r+0x26>
 801d084:	681c      	ldr	r4, [r3, #0]
 801d086:	685b      	ldr	r3, [r3, #4]
 801d088:	6053      	str	r3, [r2, #4]
 801d08a:	440c      	add	r4, r1
 801d08c:	6014      	str	r4, [r2, #0]
 801d08e:	e7da      	b.n	801d046 <_free_r+0x26>
 801d090:	d902      	bls.n	801d098 <_free_r+0x78>
 801d092:	230c      	movs	r3, #12
 801d094:	6003      	str	r3, [r0, #0]
 801d096:	e7d6      	b.n	801d046 <_free_r+0x26>
 801d098:	6825      	ldr	r5, [r4, #0]
 801d09a:	1961      	adds	r1, r4, r5
 801d09c:	428b      	cmp	r3, r1
 801d09e:	bf04      	itt	eq
 801d0a0:	6819      	ldreq	r1, [r3, #0]
 801d0a2:	685b      	ldreq	r3, [r3, #4]
 801d0a4:	6063      	str	r3, [r4, #4]
 801d0a6:	bf04      	itt	eq
 801d0a8:	1949      	addeq	r1, r1, r5
 801d0aa:	6021      	streq	r1, [r4, #0]
 801d0ac:	6054      	str	r4, [r2, #4]
 801d0ae:	e7ca      	b.n	801d046 <_free_r+0x26>
 801d0b0:	b003      	add	sp, #12
 801d0b2:	bd30      	pop	{r4, r5, pc}
 801d0b4:	2400363c 	.word	0x2400363c

0801d0b8 <malloc>:
 801d0b8:	4b02      	ldr	r3, [pc, #8]	; (801d0c4 <malloc+0xc>)
 801d0ba:	4601      	mov	r1, r0
 801d0bc:	6818      	ldr	r0, [r3, #0]
 801d0be:	f000 b823 	b.w	801d108 <_malloc_r>
 801d0c2:	bf00      	nop
 801d0c4:	24000158 	.word	0x24000158

0801d0c8 <sbrk_aligned>:
 801d0c8:	b570      	push	{r4, r5, r6, lr}
 801d0ca:	4e0e      	ldr	r6, [pc, #56]	; (801d104 <sbrk_aligned+0x3c>)
 801d0cc:	460c      	mov	r4, r1
 801d0ce:	6831      	ldr	r1, [r6, #0]
 801d0d0:	4605      	mov	r5, r0
 801d0d2:	b911      	cbnz	r1, 801d0da <sbrk_aligned+0x12>
 801d0d4:	f002 f96a 	bl	801f3ac <_sbrk_r>
 801d0d8:	6030      	str	r0, [r6, #0]
 801d0da:	4621      	mov	r1, r4
 801d0dc:	4628      	mov	r0, r5
 801d0de:	f002 f965 	bl	801f3ac <_sbrk_r>
 801d0e2:	1c43      	adds	r3, r0, #1
 801d0e4:	d00a      	beq.n	801d0fc <sbrk_aligned+0x34>
 801d0e6:	1cc4      	adds	r4, r0, #3
 801d0e8:	f024 0403 	bic.w	r4, r4, #3
 801d0ec:	42a0      	cmp	r0, r4
 801d0ee:	d007      	beq.n	801d100 <sbrk_aligned+0x38>
 801d0f0:	1a21      	subs	r1, r4, r0
 801d0f2:	4628      	mov	r0, r5
 801d0f4:	f002 f95a 	bl	801f3ac <_sbrk_r>
 801d0f8:	3001      	adds	r0, #1
 801d0fa:	d101      	bne.n	801d100 <sbrk_aligned+0x38>
 801d0fc:	f04f 34ff 	mov.w	r4, #4294967295
 801d100:	4620      	mov	r0, r4
 801d102:	bd70      	pop	{r4, r5, r6, pc}
 801d104:	24003640 	.word	0x24003640

0801d108 <_malloc_r>:
 801d108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d10c:	1ccd      	adds	r5, r1, #3
 801d10e:	f025 0503 	bic.w	r5, r5, #3
 801d112:	3508      	adds	r5, #8
 801d114:	2d0c      	cmp	r5, #12
 801d116:	bf38      	it	cc
 801d118:	250c      	movcc	r5, #12
 801d11a:	2d00      	cmp	r5, #0
 801d11c:	4607      	mov	r7, r0
 801d11e:	db01      	blt.n	801d124 <_malloc_r+0x1c>
 801d120:	42a9      	cmp	r1, r5
 801d122:	d905      	bls.n	801d130 <_malloc_r+0x28>
 801d124:	230c      	movs	r3, #12
 801d126:	603b      	str	r3, [r7, #0]
 801d128:	2600      	movs	r6, #0
 801d12a:	4630      	mov	r0, r6
 801d12c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d130:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801d204 <_malloc_r+0xfc>
 801d134:	f000 f868 	bl	801d208 <__malloc_lock>
 801d138:	f8d8 3000 	ldr.w	r3, [r8]
 801d13c:	461c      	mov	r4, r3
 801d13e:	bb5c      	cbnz	r4, 801d198 <_malloc_r+0x90>
 801d140:	4629      	mov	r1, r5
 801d142:	4638      	mov	r0, r7
 801d144:	f7ff ffc0 	bl	801d0c8 <sbrk_aligned>
 801d148:	1c43      	adds	r3, r0, #1
 801d14a:	4604      	mov	r4, r0
 801d14c:	d155      	bne.n	801d1fa <_malloc_r+0xf2>
 801d14e:	f8d8 4000 	ldr.w	r4, [r8]
 801d152:	4626      	mov	r6, r4
 801d154:	2e00      	cmp	r6, #0
 801d156:	d145      	bne.n	801d1e4 <_malloc_r+0xdc>
 801d158:	2c00      	cmp	r4, #0
 801d15a:	d048      	beq.n	801d1ee <_malloc_r+0xe6>
 801d15c:	6823      	ldr	r3, [r4, #0]
 801d15e:	4631      	mov	r1, r6
 801d160:	4638      	mov	r0, r7
 801d162:	eb04 0903 	add.w	r9, r4, r3
 801d166:	f002 f921 	bl	801f3ac <_sbrk_r>
 801d16a:	4581      	cmp	r9, r0
 801d16c:	d13f      	bne.n	801d1ee <_malloc_r+0xe6>
 801d16e:	6821      	ldr	r1, [r4, #0]
 801d170:	1a6d      	subs	r5, r5, r1
 801d172:	4629      	mov	r1, r5
 801d174:	4638      	mov	r0, r7
 801d176:	f7ff ffa7 	bl	801d0c8 <sbrk_aligned>
 801d17a:	3001      	adds	r0, #1
 801d17c:	d037      	beq.n	801d1ee <_malloc_r+0xe6>
 801d17e:	6823      	ldr	r3, [r4, #0]
 801d180:	442b      	add	r3, r5
 801d182:	6023      	str	r3, [r4, #0]
 801d184:	f8d8 3000 	ldr.w	r3, [r8]
 801d188:	2b00      	cmp	r3, #0
 801d18a:	d038      	beq.n	801d1fe <_malloc_r+0xf6>
 801d18c:	685a      	ldr	r2, [r3, #4]
 801d18e:	42a2      	cmp	r2, r4
 801d190:	d12b      	bne.n	801d1ea <_malloc_r+0xe2>
 801d192:	2200      	movs	r2, #0
 801d194:	605a      	str	r2, [r3, #4]
 801d196:	e00f      	b.n	801d1b8 <_malloc_r+0xb0>
 801d198:	6822      	ldr	r2, [r4, #0]
 801d19a:	1b52      	subs	r2, r2, r5
 801d19c:	d41f      	bmi.n	801d1de <_malloc_r+0xd6>
 801d19e:	2a0b      	cmp	r2, #11
 801d1a0:	d917      	bls.n	801d1d2 <_malloc_r+0xca>
 801d1a2:	1961      	adds	r1, r4, r5
 801d1a4:	42a3      	cmp	r3, r4
 801d1a6:	6025      	str	r5, [r4, #0]
 801d1a8:	bf18      	it	ne
 801d1aa:	6059      	strne	r1, [r3, #4]
 801d1ac:	6863      	ldr	r3, [r4, #4]
 801d1ae:	bf08      	it	eq
 801d1b0:	f8c8 1000 	streq.w	r1, [r8]
 801d1b4:	5162      	str	r2, [r4, r5]
 801d1b6:	604b      	str	r3, [r1, #4]
 801d1b8:	4638      	mov	r0, r7
 801d1ba:	f104 060b 	add.w	r6, r4, #11
 801d1be:	f000 f829 	bl	801d214 <__malloc_unlock>
 801d1c2:	f026 0607 	bic.w	r6, r6, #7
 801d1c6:	1d23      	adds	r3, r4, #4
 801d1c8:	1af2      	subs	r2, r6, r3
 801d1ca:	d0ae      	beq.n	801d12a <_malloc_r+0x22>
 801d1cc:	1b9b      	subs	r3, r3, r6
 801d1ce:	50a3      	str	r3, [r4, r2]
 801d1d0:	e7ab      	b.n	801d12a <_malloc_r+0x22>
 801d1d2:	42a3      	cmp	r3, r4
 801d1d4:	6862      	ldr	r2, [r4, #4]
 801d1d6:	d1dd      	bne.n	801d194 <_malloc_r+0x8c>
 801d1d8:	f8c8 2000 	str.w	r2, [r8]
 801d1dc:	e7ec      	b.n	801d1b8 <_malloc_r+0xb0>
 801d1de:	4623      	mov	r3, r4
 801d1e0:	6864      	ldr	r4, [r4, #4]
 801d1e2:	e7ac      	b.n	801d13e <_malloc_r+0x36>
 801d1e4:	4634      	mov	r4, r6
 801d1e6:	6876      	ldr	r6, [r6, #4]
 801d1e8:	e7b4      	b.n	801d154 <_malloc_r+0x4c>
 801d1ea:	4613      	mov	r3, r2
 801d1ec:	e7cc      	b.n	801d188 <_malloc_r+0x80>
 801d1ee:	230c      	movs	r3, #12
 801d1f0:	603b      	str	r3, [r7, #0]
 801d1f2:	4638      	mov	r0, r7
 801d1f4:	f000 f80e 	bl	801d214 <__malloc_unlock>
 801d1f8:	e797      	b.n	801d12a <_malloc_r+0x22>
 801d1fa:	6025      	str	r5, [r4, #0]
 801d1fc:	e7dc      	b.n	801d1b8 <_malloc_r+0xb0>
 801d1fe:	605b      	str	r3, [r3, #4]
 801d200:	deff      	udf	#255	; 0xff
 801d202:	bf00      	nop
 801d204:	2400363c 	.word	0x2400363c

0801d208 <__malloc_lock>:
 801d208:	4801      	ldr	r0, [pc, #4]	; (801d210 <__malloc_lock+0x8>)
 801d20a:	f7ff b8f4 	b.w	801c3f6 <__retarget_lock_acquire_recursive>
 801d20e:	bf00      	nop
 801d210:	24003638 	.word	0x24003638

0801d214 <__malloc_unlock>:
 801d214:	4801      	ldr	r0, [pc, #4]	; (801d21c <__malloc_unlock+0x8>)
 801d216:	f7ff b8ef 	b.w	801c3f8 <__retarget_lock_release_recursive>
 801d21a:	bf00      	nop
 801d21c:	24003638 	.word	0x24003638

0801d220 <_Balloc>:
 801d220:	b570      	push	{r4, r5, r6, lr}
 801d222:	69c6      	ldr	r6, [r0, #28]
 801d224:	4604      	mov	r4, r0
 801d226:	460d      	mov	r5, r1
 801d228:	b976      	cbnz	r6, 801d248 <_Balloc+0x28>
 801d22a:	2010      	movs	r0, #16
 801d22c:	f7ff ff44 	bl	801d0b8 <malloc>
 801d230:	4602      	mov	r2, r0
 801d232:	61e0      	str	r0, [r4, #28]
 801d234:	b920      	cbnz	r0, 801d240 <_Balloc+0x20>
 801d236:	4b18      	ldr	r3, [pc, #96]	; (801d298 <_Balloc+0x78>)
 801d238:	4818      	ldr	r0, [pc, #96]	; (801d29c <_Balloc+0x7c>)
 801d23a:	216b      	movs	r1, #107	; 0x6b
 801d23c:	f002 f8d0 	bl	801f3e0 <__assert_func>
 801d240:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d244:	6006      	str	r6, [r0, #0]
 801d246:	60c6      	str	r6, [r0, #12]
 801d248:	69e6      	ldr	r6, [r4, #28]
 801d24a:	68f3      	ldr	r3, [r6, #12]
 801d24c:	b183      	cbz	r3, 801d270 <_Balloc+0x50>
 801d24e:	69e3      	ldr	r3, [r4, #28]
 801d250:	68db      	ldr	r3, [r3, #12]
 801d252:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801d256:	b9b8      	cbnz	r0, 801d288 <_Balloc+0x68>
 801d258:	2101      	movs	r1, #1
 801d25a:	fa01 f605 	lsl.w	r6, r1, r5
 801d25e:	1d72      	adds	r2, r6, #5
 801d260:	0092      	lsls	r2, r2, #2
 801d262:	4620      	mov	r0, r4
 801d264:	f002 f8da 	bl	801f41c <_calloc_r>
 801d268:	b160      	cbz	r0, 801d284 <_Balloc+0x64>
 801d26a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801d26e:	e00e      	b.n	801d28e <_Balloc+0x6e>
 801d270:	2221      	movs	r2, #33	; 0x21
 801d272:	2104      	movs	r1, #4
 801d274:	4620      	mov	r0, r4
 801d276:	f002 f8d1 	bl	801f41c <_calloc_r>
 801d27a:	69e3      	ldr	r3, [r4, #28]
 801d27c:	60f0      	str	r0, [r6, #12]
 801d27e:	68db      	ldr	r3, [r3, #12]
 801d280:	2b00      	cmp	r3, #0
 801d282:	d1e4      	bne.n	801d24e <_Balloc+0x2e>
 801d284:	2000      	movs	r0, #0
 801d286:	bd70      	pop	{r4, r5, r6, pc}
 801d288:	6802      	ldr	r2, [r0, #0]
 801d28a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801d28e:	2300      	movs	r3, #0
 801d290:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801d294:	e7f7      	b.n	801d286 <_Balloc+0x66>
 801d296:	bf00      	nop
 801d298:	080209cc 	.word	0x080209cc
 801d29c:	08020a4c 	.word	0x08020a4c

0801d2a0 <_Bfree>:
 801d2a0:	b570      	push	{r4, r5, r6, lr}
 801d2a2:	69c6      	ldr	r6, [r0, #28]
 801d2a4:	4605      	mov	r5, r0
 801d2a6:	460c      	mov	r4, r1
 801d2a8:	b976      	cbnz	r6, 801d2c8 <_Bfree+0x28>
 801d2aa:	2010      	movs	r0, #16
 801d2ac:	f7ff ff04 	bl	801d0b8 <malloc>
 801d2b0:	4602      	mov	r2, r0
 801d2b2:	61e8      	str	r0, [r5, #28]
 801d2b4:	b920      	cbnz	r0, 801d2c0 <_Bfree+0x20>
 801d2b6:	4b09      	ldr	r3, [pc, #36]	; (801d2dc <_Bfree+0x3c>)
 801d2b8:	4809      	ldr	r0, [pc, #36]	; (801d2e0 <_Bfree+0x40>)
 801d2ba:	218f      	movs	r1, #143	; 0x8f
 801d2bc:	f002 f890 	bl	801f3e0 <__assert_func>
 801d2c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d2c4:	6006      	str	r6, [r0, #0]
 801d2c6:	60c6      	str	r6, [r0, #12]
 801d2c8:	b13c      	cbz	r4, 801d2da <_Bfree+0x3a>
 801d2ca:	69eb      	ldr	r3, [r5, #28]
 801d2cc:	6862      	ldr	r2, [r4, #4]
 801d2ce:	68db      	ldr	r3, [r3, #12]
 801d2d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d2d4:	6021      	str	r1, [r4, #0]
 801d2d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801d2da:	bd70      	pop	{r4, r5, r6, pc}
 801d2dc:	080209cc 	.word	0x080209cc
 801d2e0:	08020a4c 	.word	0x08020a4c

0801d2e4 <__multadd>:
 801d2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d2e8:	690d      	ldr	r5, [r1, #16]
 801d2ea:	4607      	mov	r7, r0
 801d2ec:	460c      	mov	r4, r1
 801d2ee:	461e      	mov	r6, r3
 801d2f0:	f101 0c14 	add.w	ip, r1, #20
 801d2f4:	2000      	movs	r0, #0
 801d2f6:	f8dc 3000 	ldr.w	r3, [ip]
 801d2fa:	b299      	uxth	r1, r3
 801d2fc:	fb02 6101 	mla	r1, r2, r1, r6
 801d300:	0c1e      	lsrs	r6, r3, #16
 801d302:	0c0b      	lsrs	r3, r1, #16
 801d304:	fb02 3306 	mla	r3, r2, r6, r3
 801d308:	b289      	uxth	r1, r1
 801d30a:	3001      	adds	r0, #1
 801d30c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801d310:	4285      	cmp	r5, r0
 801d312:	f84c 1b04 	str.w	r1, [ip], #4
 801d316:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801d31a:	dcec      	bgt.n	801d2f6 <__multadd+0x12>
 801d31c:	b30e      	cbz	r6, 801d362 <__multadd+0x7e>
 801d31e:	68a3      	ldr	r3, [r4, #8]
 801d320:	42ab      	cmp	r3, r5
 801d322:	dc19      	bgt.n	801d358 <__multadd+0x74>
 801d324:	6861      	ldr	r1, [r4, #4]
 801d326:	4638      	mov	r0, r7
 801d328:	3101      	adds	r1, #1
 801d32a:	f7ff ff79 	bl	801d220 <_Balloc>
 801d32e:	4680      	mov	r8, r0
 801d330:	b928      	cbnz	r0, 801d33e <__multadd+0x5a>
 801d332:	4602      	mov	r2, r0
 801d334:	4b0c      	ldr	r3, [pc, #48]	; (801d368 <__multadd+0x84>)
 801d336:	480d      	ldr	r0, [pc, #52]	; (801d36c <__multadd+0x88>)
 801d338:	21ba      	movs	r1, #186	; 0xba
 801d33a:	f002 f851 	bl	801f3e0 <__assert_func>
 801d33e:	6922      	ldr	r2, [r4, #16]
 801d340:	3202      	adds	r2, #2
 801d342:	f104 010c 	add.w	r1, r4, #12
 801d346:	0092      	lsls	r2, r2, #2
 801d348:	300c      	adds	r0, #12
 801d34a:	f7ff f85e 	bl	801c40a <memcpy>
 801d34e:	4621      	mov	r1, r4
 801d350:	4638      	mov	r0, r7
 801d352:	f7ff ffa5 	bl	801d2a0 <_Bfree>
 801d356:	4644      	mov	r4, r8
 801d358:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801d35c:	3501      	adds	r5, #1
 801d35e:	615e      	str	r6, [r3, #20]
 801d360:	6125      	str	r5, [r4, #16]
 801d362:	4620      	mov	r0, r4
 801d364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d368:	08020a3b 	.word	0x08020a3b
 801d36c:	08020a4c 	.word	0x08020a4c

0801d370 <__s2b>:
 801d370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d374:	460c      	mov	r4, r1
 801d376:	4615      	mov	r5, r2
 801d378:	461f      	mov	r7, r3
 801d37a:	2209      	movs	r2, #9
 801d37c:	3308      	adds	r3, #8
 801d37e:	4606      	mov	r6, r0
 801d380:	fb93 f3f2 	sdiv	r3, r3, r2
 801d384:	2100      	movs	r1, #0
 801d386:	2201      	movs	r2, #1
 801d388:	429a      	cmp	r2, r3
 801d38a:	db09      	blt.n	801d3a0 <__s2b+0x30>
 801d38c:	4630      	mov	r0, r6
 801d38e:	f7ff ff47 	bl	801d220 <_Balloc>
 801d392:	b940      	cbnz	r0, 801d3a6 <__s2b+0x36>
 801d394:	4602      	mov	r2, r0
 801d396:	4b19      	ldr	r3, [pc, #100]	; (801d3fc <__s2b+0x8c>)
 801d398:	4819      	ldr	r0, [pc, #100]	; (801d400 <__s2b+0x90>)
 801d39a:	21d3      	movs	r1, #211	; 0xd3
 801d39c:	f002 f820 	bl	801f3e0 <__assert_func>
 801d3a0:	0052      	lsls	r2, r2, #1
 801d3a2:	3101      	adds	r1, #1
 801d3a4:	e7f0      	b.n	801d388 <__s2b+0x18>
 801d3a6:	9b08      	ldr	r3, [sp, #32]
 801d3a8:	6143      	str	r3, [r0, #20]
 801d3aa:	2d09      	cmp	r5, #9
 801d3ac:	f04f 0301 	mov.w	r3, #1
 801d3b0:	6103      	str	r3, [r0, #16]
 801d3b2:	dd16      	ble.n	801d3e2 <__s2b+0x72>
 801d3b4:	f104 0909 	add.w	r9, r4, #9
 801d3b8:	46c8      	mov	r8, r9
 801d3ba:	442c      	add	r4, r5
 801d3bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 801d3c0:	4601      	mov	r1, r0
 801d3c2:	3b30      	subs	r3, #48	; 0x30
 801d3c4:	220a      	movs	r2, #10
 801d3c6:	4630      	mov	r0, r6
 801d3c8:	f7ff ff8c 	bl	801d2e4 <__multadd>
 801d3cc:	45a0      	cmp	r8, r4
 801d3ce:	d1f5      	bne.n	801d3bc <__s2b+0x4c>
 801d3d0:	f1a5 0408 	sub.w	r4, r5, #8
 801d3d4:	444c      	add	r4, r9
 801d3d6:	1b2d      	subs	r5, r5, r4
 801d3d8:	1963      	adds	r3, r4, r5
 801d3da:	42bb      	cmp	r3, r7
 801d3dc:	db04      	blt.n	801d3e8 <__s2b+0x78>
 801d3de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d3e2:	340a      	adds	r4, #10
 801d3e4:	2509      	movs	r5, #9
 801d3e6:	e7f6      	b.n	801d3d6 <__s2b+0x66>
 801d3e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d3ec:	4601      	mov	r1, r0
 801d3ee:	3b30      	subs	r3, #48	; 0x30
 801d3f0:	220a      	movs	r2, #10
 801d3f2:	4630      	mov	r0, r6
 801d3f4:	f7ff ff76 	bl	801d2e4 <__multadd>
 801d3f8:	e7ee      	b.n	801d3d8 <__s2b+0x68>
 801d3fa:	bf00      	nop
 801d3fc:	08020a3b 	.word	0x08020a3b
 801d400:	08020a4c 	.word	0x08020a4c

0801d404 <__hi0bits>:
 801d404:	0c03      	lsrs	r3, r0, #16
 801d406:	041b      	lsls	r3, r3, #16
 801d408:	b9d3      	cbnz	r3, 801d440 <__hi0bits+0x3c>
 801d40a:	0400      	lsls	r0, r0, #16
 801d40c:	2310      	movs	r3, #16
 801d40e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801d412:	bf04      	itt	eq
 801d414:	0200      	lsleq	r0, r0, #8
 801d416:	3308      	addeq	r3, #8
 801d418:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801d41c:	bf04      	itt	eq
 801d41e:	0100      	lsleq	r0, r0, #4
 801d420:	3304      	addeq	r3, #4
 801d422:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801d426:	bf04      	itt	eq
 801d428:	0080      	lsleq	r0, r0, #2
 801d42a:	3302      	addeq	r3, #2
 801d42c:	2800      	cmp	r0, #0
 801d42e:	db05      	blt.n	801d43c <__hi0bits+0x38>
 801d430:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801d434:	f103 0301 	add.w	r3, r3, #1
 801d438:	bf08      	it	eq
 801d43a:	2320      	moveq	r3, #32
 801d43c:	4618      	mov	r0, r3
 801d43e:	4770      	bx	lr
 801d440:	2300      	movs	r3, #0
 801d442:	e7e4      	b.n	801d40e <__hi0bits+0xa>

0801d444 <__lo0bits>:
 801d444:	6803      	ldr	r3, [r0, #0]
 801d446:	f013 0207 	ands.w	r2, r3, #7
 801d44a:	d00c      	beq.n	801d466 <__lo0bits+0x22>
 801d44c:	07d9      	lsls	r1, r3, #31
 801d44e:	d422      	bmi.n	801d496 <__lo0bits+0x52>
 801d450:	079a      	lsls	r2, r3, #30
 801d452:	bf49      	itett	mi
 801d454:	085b      	lsrmi	r3, r3, #1
 801d456:	089b      	lsrpl	r3, r3, #2
 801d458:	6003      	strmi	r3, [r0, #0]
 801d45a:	2201      	movmi	r2, #1
 801d45c:	bf5c      	itt	pl
 801d45e:	6003      	strpl	r3, [r0, #0]
 801d460:	2202      	movpl	r2, #2
 801d462:	4610      	mov	r0, r2
 801d464:	4770      	bx	lr
 801d466:	b299      	uxth	r1, r3
 801d468:	b909      	cbnz	r1, 801d46e <__lo0bits+0x2a>
 801d46a:	0c1b      	lsrs	r3, r3, #16
 801d46c:	2210      	movs	r2, #16
 801d46e:	b2d9      	uxtb	r1, r3
 801d470:	b909      	cbnz	r1, 801d476 <__lo0bits+0x32>
 801d472:	3208      	adds	r2, #8
 801d474:	0a1b      	lsrs	r3, r3, #8
 801d476:	0719      	lsls	r1, r3, #28
 801d478:	bf04      	itt	eq
 801d47a:	091b      	lsreq	r3, r3, #4
 801d47c:	3204      	addeq	r2, #4
 801d47e:	0799      	lsls	r1, r3, #30
 801d480:	bf04      	itt	eq
 801d482:	089b      	lsreq	r3, r3, #2
 801d484:	3202      	addeq	r2, #2
 801d486:	07d9      	lsls	r1, r3, #31
 801d488:	d403      	bmi.n	801d492 <__lo0bits+0x4e>
 801d48a:	085b      	lsrs	r3, r3, #1
 801d48c:	f102 0201 	add.w	r2, r2, #1
 801d490:	d003      	beq.n	801d49a <__lo0bits+0x56>
 801d492:	6003      	str	r3, [r0, #0]
 801d494:	e7e5      	b.n	801d462 <__lo0bits+0x1e>
 801d496:	2200      	movs	r2, #0
 801d498:	e7e3      	b.n	801d462 <__lo0bits+0x1e>
 801d49a:	2220      	movs	r2, #32
 801d49c:	e7e1      	b.n	801d462 <__lo0bits+0x1e>
	...

0801d4a0 <__i2b>:
 801d4a0:	b510      	push	{r4, lr}
 801d4a2:	460c      	mov	r4, r1
 801d4a4:	2101      	movs	r1, #1
 801d4a6:	f7ff febb 	bl	801d220 <_Balloc>
 801d4aa:	4602      	mov	r2, r0
 801d4ac:	b928      	cbnz	r0, 801d4ba <__i2b+0x1a>
 801d4ae:	4b05      	ldr	r3, [pc, #20]	; (801d4c4 <__i2b+0x24>)
 801d4b0:	4805      	ldr	r0, [pc, #20]	; (801d4c8 <__i2b+0x28>)
 801d4b2:	f240 1145 	movw	r1, #325	; 0x145
 801d4b6:	f001 ff93 	bl	801f3e0 <__assert_func>
 801d4ba:	2301      	movs	r3, #1
 801d4bc:	6144      	str	r4, [r0, #20]
 801d4be:	6103      	str	r3, [r0, #16]
 801d4c0:	bd10      	pop	{r4, pc}
 801d4c2:	bf00      	nop
 801d4c4:	08020a3b 	.word	0x08020a3b
 801d4c8:	08020a4c 	.word	0x08020a4c

0801d4cc <__multiply>:
 801d4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4d0:	4691      	mov	r9, r2
 801d4d2:	690a      	ldr	r2, [r1, #16]
 801d4d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d4d8:	429a      	cmp	r2, r3
 801d4da:	bfb8      	it	lt
 801d4dc:	460b      	movlt	r3, r1
 801d4de:	460c      	mov	r4, r1
 801d4e0:	bfbc      	itt	lt
 801d4e2:	464c      	movlt	r4, r9
 801d4e4:	4699      	movlt	r9, r3
 801d4e6:	6927      	ldr	r7, [r4, #16]
 801d4e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801d4ec:	68a3      	ldr	r3, [r4, #8]
 801d4ee:	6861      	ldr	r1, [r4, #4]
 801d4f0:	eb07 060a 	add.w	r6, r7, sl
 801d4f4:	42b3      	cmp	r3, r6
 801d4f6:	b085      	sub	sp, #20
 801d4f8:	bfb8      	it	lt
 801d4fa:	3101      	addlt	r1, #1
 801d4fc:	f7ff fe90 	bl	801d220 <_Balloc>
 801d500:	b930      	cbnz	r0, 801d510 <__multiply+0x44>
 801d502:	4602      	mov	r2, r0
 801d504:	4b44      	ldr	r3, [pc, #272]	; (801d618 <__multiply+0x14c>)
 801d506:	4845      	ldr	r0, [pc, #276]	; (801d61c <__multiply+0x150>)
 801d508:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801d50c:	f001 ff68 	bl	801f3e0 <__assert_func>
 801d510:	f100 0514 	add.w	r5, r0, #20
 801d514:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801d518:	462b      	mov	r3, r5
 801d51a:	2200      	movs	r2, #0
 801d51c:	4543      	cmp	r3, r8
 801d51e:	d321      	bcc.n	801d564 <__multiply+0x98>
 801d520:	f104 0314 	add.w	r3, r4, #20
 801d524:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801d528:	f109 0314 	add.w	r3, r9, #20
 801d52c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801d530:	9202      	str	r2, [sp, #8]
 801d532:	1b3a      	subs	r2, r7, r4
 801d534:	3a15      	subs	r2, #21
 801d536:	f022 0203 	bic.w	r2, r2, #3
 801d53a:	3204      	adds	r2, #4
 801d53c:	f104 0115 	add.w	r1, r4, #21
 801d540:	428f      	cmp	r7, r1
 801d542:	bf38      	it	cc
 801d544:	2204      	movcc	r2, #4
 801d546:	9201      	str	r2, [sp, #4]
 801d548:	9a02      	ldr	r2, [sp, #8]
 801d54a:	9303      	str	r3, [sp, #12]
 801d54c:	429a      	cmp	r2, r3
 801d54e:	d80c      	bhi.n	801d56a <__multiply+0x9e>
 801d550:	2e00      	cmp	r6, #0
 801d552:	dd03      	ble.n	801d55c <__multiply+0x90>
 801d554:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801d558:	2b00      	cmp	r3, #0
 801d55a:	d05b      	beq.n	801d614 <__multiply+0x148>
 801d55c:	6106      	str	r6, [r0, #16]
 801d55e:	b005      	add	sp, #20
 801d560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d564:	f843 2b04 	str.w	r2, [r3], #4
 801d568:	e7d8      	b.n	801d51c <__multiply+0x50>
 801d56a:	f8b3 a000 	ldrh.w	sl, [r3]
 801d56e:	f1ba 0f00 	cmp.w	sl, #0
 801d572:	d024      	beq.n	801d5be <__multiply+0xf2>
 801d574:	f104 0e14 	add.w	lr, r4, #20
 801d578:	46a9      	mov	r9, r5
 801d57a:	f04f 0c00 	mov.w	ip, #0
 801d57e:	f85e 2b04 	ldr.w	r2, [lr], #4
 801d582:	f8d9 1000 	ldr.w	r1, [r9]
 801d586:	fa1f fb82 	uxth.w	fp, r2
 801d58a:	b289      	uxth	r1, r1
 801d58c:	fb0a 110b 	mla	r1, sl, fp, r1
 801d590:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801d594:	f8d9 2000 	ldr.w	r2, [r9]
 801d598:	4461      	add	r1, ip
 801d59a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801d59e:	fb0a c20b 	mla	r2, sl, fp, ip
 801d5a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801d5a6:	b289      	uxth	r1, r1
 801d5a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801d5ac:	4577      	cmp	r7, lr
 801d5ae:	f849 1b04 	str.w	r1, [r9], #4
 801d5b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801d5b6:	d8e2      	bhi.n	801d57e <__multiply+0xb2>
 801d5b8:	9a01      	ldr	r2, [sp, #4]
 801d5ba:	f845 c002 	str.w	ip, [r5, r2]
 801d5be:	9a03      	ldr	r2, [sp, #12]
 801d5c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801d5c4:	3304      	adds	r3, #4
 801d5c6:	f1b9 0f00 	cmp.w	r9, #0
 801d5ca:	d021      	beq.n	801d610 <__multiply+0x144>
 801d5cc:	6829      	ldr	r1, [r5, #0]
 801d5ce:	f104 0c14 	add.w	ip, r4, #20
 801d5d2:	46ae      	mov	lr, r5
 801d5d4:	f04f 0a00 	mov.w	sl, #0
 801d5d8:	f8bc b000 	ldrh.w	fp, [ip]
 801d5dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801d5e0:	fb09 220b 	mla	r2, r9, fp, r2
 801d5e4:	4452      	add	r2, sl
 801d5e6:	b289      	uxth	r1, r1
 801d5e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801d5ec:	f84e 1b04 	str.w	r1, [lr], #4
 801d5f0:	f85c 1b04 	ldr.w	r1, [ip], #4
 801d5f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801d5f8:	f8be 1000 	ldrh.w	r1, [lr]
 801d5fc:	fb09 110a 	mla	r1, r9, sl, r1
 801d600:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801d604:	4567      	cmp	r7, ip
 801d606:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801d60a:	d8e5      	bhi.n	801d5d8 <__multiply+0x10c>
 801d60c:	9a01      	ldr	r2, [sp, #4]
 801d60e:	50a9      	str	r1, [r5, r2]
 801d610:	3504      	adds	r5, #4
 801d612:	e799      	b.n	801d548 <__multiply+0x7c>
 801d614:	3e01      	subs	r6, #1
 801d616:	e79b      	b.n	801d550 <__multiply+0x84>
 801d618:	08020a3b 	.word	0x08020a3b
 801d61c:	08020a4c 	.word	0x08020a4c

0801d620 <__pow5mult>:
 801d620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d624:	4615      	mov	r5, r2
 801d626:	f012 0203 	ands.w	r2, r2, #3
 801d62a:	4606      	mov	r6, r0
 801d62c:	460f      	mov	r7, r1
 801d62e:	d007      	beq.n	801d640 <__pow5mult+0x20>
 801d630:	4c25      	ldr	r4, [pc, #148]	; (801d6c8 <__pow5mult+0xa8>)
 801d632:	3a01      	subs	r2, #1
 801d634:	2300      	movs	r3, #0
 801d636:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d63a:	f7ff fe53 	bl	801d2e4 <__multadd>
 801d63e:	4607      	mov	r7, r0
 801d640:	10ad      	asrs	r5, r5, #2
 801d642:	d03d      	beq.n	801d6c0 <__pow5mult+0xa0>
 801d644:	69f4      	ldr	r4, [r6, #28]
 801d646:	b97c      	cbnz	r4, 801d668 <__pow5mult+0x48>
 801d648:	2010      	movs	r0, #16
 801d64a:	f7ff fd35 	bl	801d0b8 <malloc>
 801d64e:	4602      	mov	r2, r0
 801d650:	61f0      	str	r0, [r6, #28]
 801d652:	b928      	cbnz	r0, 801d660 <__pow5mult+0x40>
 801d654:	4b1d      	ldr	r3, [pc, #116]	; (801d6cc <__pow5mult+0xac>)
 801d656:	481e      	ldr	r0, [pc, #120]	; (801d6d0 <__pow5mult+0xb0>)
 801d658:	f240 11b3 	movw	r1, #435	; 0x1b3
 801d65c:	f001 fec0 	bl	801f3e0 <__assert_func>
 801d660:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d664:	6004      	str	r4, [r0, #0]
 801d666:	60c4      	str	r4, [r0, #12]
 801d668:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801d66c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d670:	b94c      	cbnz	r4, 801d686 <__pow5mult+0x66>
 801d672:	f240 2171 	movw	r1, #625	; 0x271
 801d676:	4630      	mov	r0, r6
 801d678:	f7ff ff12 	bl	801d4a0 <__i2b>
 801d67c:	2300      	movs	r3, #0
 801d67e:	f8c8 0008 	str.w	r0, [r8, #8]
 801d682:	4604      	mov	r4, r0
 801d684:	6003      	str	r3, [r0, #0]
 801d686:	f04f 0900 	mov.w	r9, #0
 801d68a:	07eb      	lsls	r3, r5, #31
 801d68c:	d50a      	bpl.n	801d6a4 <__pow5mult+0x84>
 801d68e:	4639      	mov	r1, r7
 801d690:	4622      	mov	r2, r4
 801d692:	4630      	mov	r0, r6
 801d694:	f7ff ff1a 	bl	801d4cc <__multiply>
 801d698:	4639      	mov	r1, r7
 801d69a:	4680      	mov	r8, r0
 801d69c:	4630      	mov	r0, r6
 801d69e:	f7ff fdff 	bl	801d2a0 <_Bfree>
 801d6a2:	4647      	mov	r7, r8
 801d6a4:	106d      	asrs	r5, r5, #1
 801d6a6:	d00b      	beq.n	801d6c0 <__pow5mult+0xa0>
 801d6a8:	6820      	ldr	r0, [r4, #0]
 801d6aa:	b938      	cbnz	r0, 801d6bc <__pow5mult+0x9c>
 801d6ac:	4622      	mov	r2, r4
 801d6ae:	4621      	mov	r1, r4
 801d6b0:	4630      	mov	r0, r6
 801d6b2:	f7ff ff0b 	bl	801d4cc <__multiply>
 801d6b6:	6020      	str	r0, [r4, #0]
 801d6b8:	f8c0 9000 	str.w	r9, [r0]
 801d6bc:	4604      	mov	r4, r0
 801d6be:	e7e4      	b.n	801d68a <__pow5mult+0x6a>
 801d6c0:	4638      	mov	r0, r7
 801d6c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d6c6:	bf00      	nop
 801d6c8:	08020b98 	.word	0x08020b98
 801d6cc:	080209cc 	.word	0x080209cc
 801d6d0:	08020a4c 	.word	0x08020a4c

0801d6d4 <__lshift>:
 801d6d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d6d8:	460c      	mov	r4, r1
 801d6da:	6849      	ldr	r1, [r1, #4]
 801d6dc:	6923      	ldr	r3, [r4, #16]
 801d6de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801d6e2:	68a3      	ldr	r3, [r4, #8]
 801d6e4:	4607      	mov	r7, r0
 801d6e6:	4691      	mov	r9, r2
 801d6e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d6ec:	f108 0601 	add.w	r6, r8, #1
 801d6f0:	42b3      	cmp	r3, r6
 801d6f2:	db0b      	blt.n	801d70c <__lshift+0x38>
 801d6f4:	4638      	mov	r0, r7
 801d6f6:	f7ff fd93 	bl	801d220 <_Balloc>
 801d6fa:	4605      	mov	r5, r0
 801d6fc:	b948      	cbnz	r0, 801d712 <__lshift+0x3e>
 801d6fe:	4602      	mov	r2, r0
 801d700:	4b28      	ldr	r3, [pc, #160]	; (801d7a4 <__lshift+0xd0>)
 801d702:	4829      	ldr	r0, [pc, #164]	; (801d7a8 <__lshift+0xd4>)
 801d704:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801d708:	f001 fe6a 	bl	801f3e0 <__assert_func>
 801d70c:	3101      	adds	r1, #1
 801d70e:	005b      	lsls	r3, r3, #1
 801d710:	e7ee      	b.n	801d6f0 <__lshift+0x1c>
 801d712:	2300      	movs	r3, #0
 801d714:	f100 0114 	add.w	r1, r0, #20
 801d718:	f100 0210 	add.w	r2, r0, #16
 801d71c:	4618      	mov	r0, r3
 801d71e:	4553      	cmp	r3, sl
 801d720:	db33      	blt.n	801d78a <__lshift+0xb6>
 801d722:	6920      	ldr	r0, [r4, #16]
 801d724:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d728:	f104 0314 	add.w	r3, r4, #20
 801d72c:	f019 091f 	ands.w	r9, r9, #31
 801d730:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d734:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801d738:	d02b      	beq.n	801d792 <__lshift+0xbe>
 801d73a:	f1c9 0e20 	rsb	lr, r9, #32
 801d73e:	468a      	mov	sl, r1
 801d740:	2200      	movs	r2, #0
 801d742:	6818      	ldr	r0, [r3, #0]
 801d744:	fa00 f009 	lsl.w	r0, r0, r9
 801d748:	4310      	orrs	r0, r2
 801d74a:	f84a 0b04 	str.w	r0, [sl], #4
 801d74e:	f853 2b04 	ldr.w	r2, [r3], #4
 801d752:	459c      	cmp	ip, r3
 801d754:	fa22 f20e 	lsr.w	r2, r2, lr
 801d758:	d8f3      	bhi.n	801d742 <__lshift+0x6e>
 801d75a:	ebac 0304 	sub.w	r3, ip, r4
 801d75e:	3b15      	subs	r3, #21
 801d760:	f023 0303 	bic.w	r3, r3, #3
 801d764:	3304      	adds	r3, #4
 801d766:	f104 0015 	add.w	r0, r4, #21
 801d76a:	4584      	cmp	ip, r0
 801d76c:	bf38      	it	cc
 801d76e:	2304      	movcc	r3, #4
 801d770:	50ca      	str	r2, [r1, r3]
 801d772:	b10a      	cbz	r2, 801d778 <__lshift+0xa4>
 801d774:	f108 0602 	add.w	r6, r8, #2
 801d778:	3e01      	subs	r6, #1
 801d77a:	4638      	mov	r0, r7
 801d77c:	612e      	str	r6, [r5, #16]
 801d77e:	4621      	mov	r1, r4
 801d780:	f7ff fd8e 	bl	801d2a0 <_Bfree>
 801d784:	4628      	mov	r0, r5
 801d786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d78a:	f842 0f04 	str.w	r0, [r2, #4]!
 801d78e:	3301      	adds	r3, #1
 801d790:	e7c5      	b.n	801d71e <__lshift+0x4a>
 801d792:	3904      	subs	r1, #4
 801d794:	f853 2b04 	ldr.w	r2, [r3], #4
 801d798:	f841 2f04 	str.w	r2, [r1, #4]!
 801d79c:	459c      	cmp	ip, r3
 801d79e:	d8f9      	bhi.n	801d794 <__lshift+0xc0>
 801d7a0:	e7ea      	b.n	801d778 <__lshift+0xa4>
 801d7a2:	bf00      	nop
 801d7a4:	08020a3b 	.word	0x08020a3b
 801d7a8:	08020a4c 	.word	0x08020a4c

0801d7ac <__mcmp>:
 801d7ac:	b530      	push	{r4, r5, lr}
 801d7ae:	6902      	ldr	r2, [r0, #16]
 801d7b0:	690c      	ldr	r4, [r1, #16]
 801d7b2:	1b12      	subs	r2, r2, r4
 801d7b4:	d10e      	bne.n	801d7d4 <__mcmp+0x28>
 801d7b6:	f100 0314 	add.w	r3, r0, #20
 801d7ba:	3114      	adds	r1, #20
 801d7bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801d7c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801d7c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801d7c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801d7cc:	42a5      	cmp	r5, r4
 801d7ce:	d003      	beq.n	801d7d8 <__mcmp+0x2c>
 801d7d0:	d305      	bcc.n	801d7de <__mcmp+0x32>
 801d7d2:	2201      	movs	r2, #1
 801d7d4:	4610      	mov	r0, r2
 801d7d6:	bd30      	pop	{r4, r5, pc}
 801d7d8:	4283      	cmp	r3, r0
 801d7da:	d3f3      	bcc.n	801d7c4 <__mcmp+0x18>
 801d7dc:	e7fa      	b.n	801d7d4 <__mcmp+0x28>
 801d7de:	f04f 32ff 	mov.w	r2, #4294967295
 801d7e2:	e7f7      	b.n	801d7d4 <__mcmp+0x28>

0801d7e4 <__mdiff>:
 801d7e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7e8:	460c      	mov	r4, r1
 801d7ea:	4606      	mov	r6, r0
 801d7ec:	4611      	mov	r1, r2
 801d7ee:	4620      	mov	r0, r4
 801d7f0:	4690      	mov	r8, r2
 801d7f2:	f7ff ffdb 	bl	801d7ac <__mcmp>
 801d7f6:	1e05      	subs	r5, r0, #0
 801d7f8:	d110      	bne.n	801d81c <__mdiff+0x38>
 801d7fa:	4629      	mov	r1, r5
 801d7fc:	4630      	mov	r0, r6
 801d7fe:	f7ff fd0f 	bl	801d220 <_Balloc>
 801d802:	b930      	cbnz	r0, 801d812 <__mdiff+0x2e>
 801d804:	4b3a      	ldr	r3, [pc, #232]	; (801d8f0 <__mdiff+0x10c>)
 801d806:	4602      	mov	r2, r0
 801d808:	f240 2137 	movw	r1, #567	; 0x237
 801d80c:	4839      	ldr	r0, [pc, #228]	; (801d8f4 <__mdiff+0x110>)
 801d80e:	f001 fde7 	bl	801f3e0 <__assert_func>
 801d812:	2301      	movs	r3, #1
 801d814:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d818:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d81c:	bfa4      	itt	ge
 801d81e:	4643      	movge	r3, r8
 801d820:	46a0      	movge	r8, r4
 801d822:	4630      	mov	r0, r6
 801d824:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801d828:	bfa6      	itte	ge
 801d82a:	461c      	movge	r4, r3
 801d82c:	2500      	movge	r5, #0
 801d82e:	2501      	movlt	r5, #1
 801d830:	f7ff fcf6 	bl	801d220 <_Balloc>
 801d834:	b920      	cbnz	r0, 801d840 <__mdiff+0x5c>
 801d836:	4b2e      	ldr	r3, [pc, #184]	; (801d8f0 <__mdiff+0x10c>)
 801d838:	4602      	mov	r2, r0
 801d83a:	f240 2145 	movw	r1, #581	; 0x245
 801d83e:	e7e5      	b.n	801d80c <__mdiff+0x28>
 801d840:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801d844:	6926      	ldr	r6, [r4, #16]
 801d846:	60c5      	str	r5, [r0, #12]
 801d848:	f104 0914 	add.w	r9, r4, #20
 801d84c:	f108 0514 	add.w	r5, r8, #20
 801d850:	f100 0e14 	add.w	lr, r0, #20
 801d854:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801d858:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801d85c:	f108 0210 	add.w	r2, r8, #16
 801d860:	46f2      	mov	sl, lr
 801d862:	2100      	movs	r1, #0
 801d864:	f859 3b04 	ldr.w	r3, [r9], #4
 801d868:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801d86c:	fa11 f88b 	uxtah	r8, r1, fp
 801d870:	b299      	uxth	r1, r3
 801d872:	0c1b      	lsrs	r3, r3, #16
 801d874:	eba8 0801 	sub.w	r8, r8, r1
 801d878:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801d87c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801d880:	fa1f f888 	uxth.w	r8, r8
 801d884:	1419      	asrs	r1, r3, #16
 801d886:	454e      	cmp	r6, r9
 801d888:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801d88c:	f84a 3b04 	str.w	r3, [sl], #4
 801d890:	d8e8      	bhi.n	801d864 <__mdiff+0x80>
 801d892:	1b33      	subs	r3, r6, r4
 801d894:	3b15      	subs	r3, #21
 801d896:	f023 0303 	bic.w	r3, r3, #3
 801d89a:	3304      	adds	r3, #4
 801d89c:	3415      	adds	r4, #21
 801d89e:	42a6      	cmp	r6, r4
 801d8a0:	bf38      	it	cc
 801d8a2:	2304      	movcc	r3, #4
 801d8a4:	441d      	add	r5, r3
 801d8a6:	4473      	add	r3, lr
 801d8a8:	469e      	mov	lr, r3
 801d8aa:	462e      	mov	r6, r5
 801d8ac:	4566      	cmp	r6, ip
 801d8ae:	d30e      	bcc.n	801d8ce <__mdiff+0xea>
 801d8b0:	f10c 0203 	add.w	r2, ip, #3
 801d8b4:	1b52      	subs	r2, r2, r5
 801d8b6:	f022 0203 	bic.w	r2, r2, #3
 801d8ba:	3d03      	subs	r5, #3
 801d8bc:	45ac      	cmp	ip, r5
 801d8be:	bf38      	it	cc
 801d8c0:	2200      	movcc	r2, #0
 801d8c2:	4413      	add	r3, r2
 801d8c4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801d8c8:	b17a      	cbz	r2, 801d8ea <__mdiff+0x106>
 801d8ca:	6107      	str	r7, [r0, #16]
 801d8cc:	e7a4      	b.n	801d818 <__mdiff+0x34>
 801d8ce:	f856 8b04 	ldr.w	r8, [r6], #4
 801d8d2:	fa11 f288 	uxtah	r2, r1, r8
 801d8d6:	1414      	asrs	r4, r2, #16
 801d8d8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801d8dc:	b292      	uxth	r2, r2
 801d8de:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801d8e2:	f84e 2b04 	str.w	r2, [lr], #4
 801d8e6:	1421      	asrs	r1, r4, #16
 801d8e8:	e7e0      	b.n	801d8ac <__mdiff+0xc8>
 801d8ea:	3f01      	subs	r7, #1
 801d8ec:	e7ea      	b.n	801d8c4 <__mdiff+0xe0>
 801d8ee:	bf00      	nop
 801d8f0:	08020a3b 	.word	0x08020a3b
 801d8f4:	08020a4c 	.word	0x08020a4c

0801d8f8 <__ulp>:
 801d8f8:	b082      	sub	sp, #8
 801d8fa:	ed8d 0b00 	vstr	d0, [sp]
 801d8fe:	9a01      	ldr	r2, [sp, #4]
 801d900:	4b0f      	ldr	r3, [pc, #60]	; (801d940 <__ulp+0x48>)
 801d902:	4013      	ands	r3, r2
 801d904:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801d908:	2b00      	cmp	r3, #0
 801d90a:	dc08      	bgt.n	801d91e <__ulp+0x26>
 801d90c:	425b      	negs	r3, r3
 801d90e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801d912:	ea4f 5223 	mov.w	r2, r3, asr #20
 801d916:	da04      	bge.n	801d922 <__ulp+0x2a>
 801d918:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801d91c:	4113      	asrs	r3, r2
 801d91e:	2200      	movs	r2, #0
 801d920:	e008      	b.n	801d934 <__ulp+0x3c>
 801d922:	f1a2 0314 	sub.w	r3, r2, #20
 801d926:	2b1e      	cmp	r3, #30
 801d928:	bfda      	itte	le
 801d92a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801d92e:	40da      	lsrle	r2, r3
 801d930:	2201      	movgt	r2, #1
 801d932:	2300      	movs	r3, #0
 801d934:	4619      	mov	r1, r3
 801d936:	4610      	mov	r0, r2
 801d938:	ec41 0b10 	vmov	d0, r0, r1
 801d93c:	b002      	add	sp, #8
 801d93e:	4770      	bx	lr
 801d940:	7ff00000 	.word	0x7ff00000

0801d944 <__b2d>:
 801d944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d948:	6906      	ldr	r6, [r0, #16]
 801d94a:	f100 0814 	add.w	r8, r0, #20
 801d94e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801d952:	1f37      	subs	r7, r6, #4
 801d954:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801d958:	4610      	mov	r0, r2
 801d95a:	f7ff fd53 	bl	801d404 <__hi0bits>
 801d95e:	f1c0 0320 	rsb	r3, r0, #32
 801d962:	280a      	cmp	r0, #10
 801d964:	600b      	str	r3, [r1, #0]
 801d966:	491b      	ldr	r1, [pc, #108]	; (801d9d4 <__b2d+0x90>)
 801d968:	dc15      	bgt.n	801d996 <__b2d+0x52>
 801d96a:	f1c0 0c0b 	rsb	ip, r0, #11
 801d96e:	fa22 f30c 	lsr.w	r3, r2, ip
 801d972:	45b8      	cmp	r8, r7
 801d974:	ea43 0501 	orr.w	r5, r3, r1
 801d978:	bf34      	ite	cc
 801d97a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d97e:	2300      	movcs	r3, #0
 801d980:	3015      	adds	r0, #21
 801d982:	fa02 f000 	lsl.w	r0, r2, r0
 801d986:	fa23 f30c 	lsr.w	r3, r3, ip
 801d98a:	4303      	orrs	r3, r0
 801d98c:	461c      	mov	r4, r3
 801d98e:	ec45 4b10 	vmov	d0, r4, r5
 801d992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d996:	45b8      	cmp	r8, r7
 801d998:	bf3a      	itte	cc
 801d99a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d99e:	f1a6 0708 	subcc.w	r7, r6, #8
 801d9a2:	2300      	movcs	r3, #0
 801d9a4:	380b      	subs	r0, #11
 801d9a6:	d012      	beq.n	801d9ce <__b2d+0x8a>
 801d9a8:	f1c0 0120 	rsb	r1, r0, #32
 801d9ac:	fa23 f401 	lsr.w	r4, r3, r1
 801d9b0:	4082      	lsls	r2, r0
 801d9b2:	4322      	orrs	r2, r4
 801d9b4:	4547      	cmp	r7, r8
 801d9b6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801d9ba:	bf8c      	ite	hi
 801d9bc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801d9c0:	2200      	movls	r2, #0
 801d9c2:	4083      	lsls	r3, r0
 801d9c4:	40ca      	lsrs	r2, r1
 801d9c6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801d9ca:	4313      	orrs	r3, r2
 801d9cc:	e7de      	b.n	801d98c <__b2d+0x48>
 801d9ce:	ea42 0501 	orr.w	r5, r2, r1
 801d9d2:	e7db      	b.n	801d98c <__b2d+0x48>
 801d9d4:	3ff00000 	.word	0x3ff00000

0801d9d8 <__d2b>:
 801d9d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d9dc:	460f      	mov	r7, r1
 801d9de:	2101      	movs	r1, #1
 801d9e0:	ec59 8b10 	vmov	r8, r9, d0
 801d9e4:	4616      	mov	r6, r2
 801d9e6:	f7ff fc1b 	bl	801d220 <_Balloc>
 801d9ea:	4604      	mov	r4, r0
 801d9ec:	b930      	cbnz	r0, 801d9fc <__d2b+0x24>
 801d9ee:	4602      	mov	r2, r0
 801d9f0:	4b24      	ldr	r3, [pc, #144]	; (801da84 <__d2b+0xac>)
 801d9f2:	4825      	ldr	r0, [pc, #148]	; (801da88 <__d2b+0xb0>)
 801d9f4:	f240 310f 	movw	r1, #783	; 0x30f
 801d9f8:	f001 fcf2 	bl	801f3e0 <__assert_func>
 801d9fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801da00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801da04:	bb2d      	cbnz	r5, 801da52 <__d2b+0x7a>
 801da06:	9301      	str	r3, [sp, #4]
 801da08:	f1b8 0300 	subs.w	r3, r8, #0
 801da0c:	d026      	beq.n	801da5c <__d2b+0x84>
 801da0e:	4668      	mov	r0, sp
 801da10:	9300      	str	r3, [sp, #0]
 801da12:	f7ff fd17 	bl	801d444 <__lo0bits>
 801da16:	e9dd 1200 	ldrd	r1, r2, [sp]
 801da1a:	b1e8      	cbz	r0, 801da58 <__d2b+0x80>
 801da1c:	f1c0 0320 	rsb	r3, r0, #32
 801da20:	fa02 f303 	lsl.w	r3, r2, r3
 801da24:	430b      	orrs	r3, r1
 801da26:	40c2      	lsrs	r2, r0
 801da28:	6163      	str	r3, [r4, #20]
 801da2a:	9201      	str	r2, [sp, #4]
 801da2c:	9b01      	ldr	r3, [sp, #4]
 801da2e:	61a3      	str	r3, [r4, #24]
 801da30:	2b00      	cmp	r3, #0
 801da32:	bf14      	ite	ne
 801da34:	2202      	movne	r2, #2
 801da36:	2201      	moveq	r2, #1
 801da38:	6122      	str	r2, [r4, #16]
 801da3a:	b1bd      	cbz	r5, 801da6c <__d2b+0x94>
 801da3c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801da40:	4405      	add	r5, r0
 801da42:	603d      	str	r5, [r7, #0]
 801da44:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801da48:	6030      	str	r0, [r6, #0]
 801da4a:	4620      	mov	r0, r4
 801da4c:	b003      	add	sp, #12
 801da4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801da52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801da56:	e7d6      	b.n	801da06 <__d2b+0x2e>
 801da58:	6161      	str	r1, [r4, #20]
 801da5a:	e7e7      	b.n	801da2c <__d2b+0x54>
 801da5c:	a801      	add	r0, sp, #4
 801da5e:	f7ff fcf1 	bl	801d444 <__lo0bits>
 801da62:	9b01      	ldr	r3, [sp, #4]
 801da64:	6163      	str	r3, [r4, #20]
 801da66:	3020      	adds	r0, #32
 801da68:	2201      	movs	r2, #1
 801da6a:	e7e5      	b.n	801da38 <__d2b+0x60>
 801da6c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801da70:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801da74:	6038      	str	r0, [r7, #0]
 801da76:	6918      	ldr	r0, [r3, #16]
 801da78:	f7ff fcc4 	bl	801d404 <__hi0bits>
 801da7c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801da80:	e7e2      	b.n	801da48 <__d2b+0x70>
 801da82:	bf00      	nop
 801da84:	08020a3b 	.word	0x08020a3b
 801da88:	08020a4c 	.word	0x08020a4c

0801da8c <__ratio>:
 801da8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da90:	4688      	mov	r8, r1
 801da92:	4669      	mov	r1, sp
 801da94:	4681      	mov	r9, r0
 801da96:	f7ff ff55 	bl	801d944 <__b2d>
 801da9a:	a901      	add	r1, sp, #4
 801da9c:	4640      	mov	r0, r8
 801da9e:	ec55 4b10 	vmov	r4, r5, d0
 801daa2:	ee10 aa10 	vmov	sl, s0
 801daa6:	f7ff ff4d 	bl	801d944 <__b2d>
 801daaa:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801daae:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801dab2:	1ad2      	subs	r2, r2, r3
 801dab4:	e9dd 3100 	ldrd	r3, r1, [sp]
 801dab8:	1a5b      	subs	r3, r3, r1
 801daba:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801dabe:	ec57 6b10 	vmov	r6, r7, d0
 801dac2:	2b00      	cmp	r3, #0
 801dac4:	bfd6      	itet	le
 801dac6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801daca:	462a      	movgt	r2, r5
 801dacc:	463a      	movle	r2, r7
 801dace:	46ab      	mov	fp, r5
 801dad0:	bfd6      	itet	le
 801dad2:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801dad6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801dada:	ee00 3a90 	vmovle	s1, r3
 801dade:	ec4b ab17 	vmov	d7, sl, fp
 801dae2:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801dae6:	b003      	add	sp, #12
 801dae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801daec <__copybits>:
 801daec:	3901      	subs	r1, #1
 801daee:	b570      	push	{r4, r5, r6, lr}
 801daf0:	1149      	asrs	r1, r1, #5
 801daf2:	6914      	ldr	r4, [r2, #16]
 801daf4:	3101      	adds	r1, #1
 801daf6:	f102 0314 	add.w	r3, r2, #20
 801dafa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801dafe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801db02:	1f05      	subs	r5, r0, #4
 801db04:	42a3      	cmp	r3, r4
 801db06:	d30c      	bcc.n	801db22 <__copybits+0x36>
 801db08:	1aa3      	subs	r3, r4, r2
 801db0a:	3b11      	subs	r3, #17
 801db0c:	f023 0303 	bic.w	r3, r3, #3
 801db10:	3211      	adds	r2, #17
 801db12:	42a2      	cmp	r2, r4
 801db14:	bf88      	it	hi
 801db16:	2300      	movhi	r3, #0
 801db18:	4418      	add	r0, r3
 801db1a:	2300      	movs	r3, #0
 801db1c:	4288      	cmp	r0, r1
 801db1e:	d305      	bcc.n	801db2c <__copybits+0x40>
 801db20:	bd70      	pop	{r4, r5, r6, pc}
 801db22:	f853 6b04 	ldr.w	r6, [r3], #4
 801db26:	f845 6f04 	str.w	r6, [r5, #4]!
 801db2a:	e7eb      	b.n	801db04 <__copybits+0x18>
 801db2c:	f840 3b04 	str.w	r3, [r0], #4
 801db30:	e7f4      	b.n	801db1c <__copybits+0x30>

0801db32 <__any_on>:
 801db32:	f100 0214 	add.w	r2, r0, #20
 801db36:	6900      	ldr	r0, [r0, #16]
 801db38:	114b      	asrs	r3, r1, #5
 801db3a:	4298      	cmp	r0, r3
 801db3c:	b510      	push	{r4, lr}
 801db3e:	db11      	blt.n	801db64 <__any_on+0x32>
 801db40:	dd0a      	ble.n	801db58 <__any_on+0x26>
 801db42:	f011 011f 	ands.w	r1, r1, #31
 801db46:	d007      	beq.n	801db58 <__any_on+0x26>
 801db48:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801db4c:	fa24 f001 	lsr.w	r0, r4, r1
 801db50:	fa00 f101 	lsl.w	r1, r0, r1
 801db54:	428c      	cmp	r4, r1
 801db56:	d10b      	bne.n	801db70 <__any_on+0x3e>
 801db58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801db5c:	4293      	cmp	r3, r2
 801db5e:	d803      	bhi.n	801db68 <__any_on+0x36>
 801db60:	2000      	movs	r0, #0
 801db62:	bd10      	pop	{r4, pc}
 801db64:	4603      	mov	r3, r0
 801db66:	e7f7      	b.n	801db58 <__any_on+0x26>
 801db68:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801db6c:	2900      	cmp	r1, #0
 801db6e:	d0f5      	beq.n	801db5c <__any_on+0x2a>
 801db70:	2001      	movs	r0, #1
 801db72:	e7f6      	b.n	801db62 <__any_on+0x30>

0801db74 <sulp>:
 801db74:	b570      	push	{r4, r5, r6, lr}
 801db76:	4604      	mov	r4, r0
 801db78:	460d      	mov	r5, r1
 801db7a:	4616      	mov	r6, r2
 801db7c:	ec45 4b10 	vmov	d0, r4, r5
 801db80:	f7ff feba 	bl	801d8f8 <__ulp>
 801db84:	b17e      	cbz	r6, 801dba6 <sulp+0x32>
 801db86:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801db8a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801db8e:	2b00      	cmp	r3, #0
 801db90:	dd09      	ble.n	801dba6 <sulp+0x32>
 801db92:	051b      	lsls	r3, r3, #20
 801db94:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801db98:	2000      	movs	r0, #0
 801db9a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 801db9e:	ec41 0b17 	vmov	d7, r0, r1
 801dba2:	ee20 0b07 	vmul.f64	d0, d0, d7
 801dba6:	bd70      	pop	{r4, r5, r6, pc}

0801dba8 <_strtod_l>:
 801dba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dbac:	ed2d 8b0e 	vpush	{d8-d14}
 801dbb0:	b097      	sub	sp, #92	; 0x5c
 801dbb2:	4604      	mov	r4, r0
 801dbb4:	920d      	str	r2, [sp, #52]	; 0x34
 801dbb6:	2200      	movs	r2, #0
 801dbb8:	9212      	str	r2, [sp, #72]	; 0x48
 801dbba:	468a      	mov	sl, r1
 801dbbc:	f04f 0800 	mov.w	r8, #0
 801dbc0:	f04f 0900 	mov.w	r9, #0
 801dbc4:	460a      	mov	r2, r1
 801dbc6:	9211      	str	r2, [sp, #68]	; 0x44
 801dbc8:	7811      	ldrb	r1, [r2, #0]
 801dbca:	292b      	cmp	r1, #43	; 0x2b
 801dbcc:	d04c      	beq.n	801dc68 <_strtod_l+0xc0>
 801dbce:	d839      	bhi.n	801dc44 <_strtod_l+0x9c>
 801dbd0:	290d      	cmp	r1, #13
 801dbd2:	d833      	bhi.n	801dc3c <_strtod_l+0x94>
 801dbd4:	2908      	cmp	r1, #8
 801dbd6:	d833      	bhi.n	801dc40 <_strtod_l+0x98>
 801dbd8:	2900      	cmp	r1, #0
 801dbda:	d03c      	beq.n	801dc56 <_strtod_l+0xae>
 801dbdc:	2200      	movs	r2, #0
 801dbde:	9208      	str	r2, [sp, #32]
 801dbe0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801dbe2:	7832      	ldrb	r2, [r6, #0]
 801dbe4:	2a30      	cmp	r2, #48	; 0x30
 801dbe6:	f040 80b8 	bne.w	801dd5a <_strtod_l+0x1b2>
 801dbea:	7872      	ldrb	r2, [r6, #1]
 801dbec:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 801dbf0:	2a58      	cmp	r2, #88	; 0x58
 801dbf2:	d170      	bne.n	801dcd6 <_strtod_l+0x12e>
 801dbf4:	9302      	str	r3, [sp, #8]
 801dbf6:	9b08      	ldr	r3, [sp, #32]
 801dbf8:	9301      	str	r3, [sp, #4]
 801dbfa:	ab12      	add	r3, sp, #72	; 0x48
 801dbfc:	9300      	str	r3, [sp, #0]
 801dbfe:	4a91      	ldr	r2, [pc, #580]	; (801de44 <_strtod_l+0x29c>)
 801dc00:	ab13      	add	r3, sp, #76	; 0x4c
 801dc02:	a911      	add	r1, sp, #68	; 0x44
 801dc04:	4620      	mov	r0, r4
 801dc06:	f001 fc87 	bl	801f518 <__gethex>
 801dc0a:	f010 070f 	ands.w	r7, r0, #15
 801dc0e:	4605      	mov	r5, r0
 801dc10:	d005      	beq.n	801dc1e <_strtod_l+0x76>
 801dc12:	2f06      	cmp	r7, #6
 801dc14:	d12a      	bne.n	801dc6c <_strtod_l+0xc4>
 801dc16:	3601      	adds	r6, #1
 801dc18:	2300      	movs	r3, #0
 801dc1a:	9611      	str	r6, [sp, #68]	; 0x44
 801dc1c:	9308      	str	r3, [sp, #32]
 801dc1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dc20:	2b00      	cmp	r3, #0
 801dc22:	f040 8555 	bne.w	801e6d0 <_strtod_l+0xb28>
 801dc26:	9b08      	ldr	r3, [sp, #32]
 801dc28:	ec49 8b10 	vmov	d0, r8, r9
 801dc2c:	b1cb      	cbz	r3, 801dc62 <_strtod_l+0xba>
 801dc2e:	eeb1 0b40 	vneg.f64	d0, d0
 801dc32:	b017      	add	sp, #92	; 0x5c
 801dc34:	ecbd 8b0e 	vpop	{d8-d14}
 801dc38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc3c:	2920      	cmp	r1, #32
 801dc3e:	d1cd      	bne.n	801dbdc <_strtod_l+0x34>
 801dc40:	3201      	adds	r2, #1
 801dc42:	e7c0      	b.n	801dbc6 <_strtod_l+0x1e>
 801dc44:	292d      	cmp	r1, #45	; 0x2d
 801dc46:	d1c9      	bne.n	801dbdc <_strtod_l+0x34>
 801dc48:	2101      	movs	r1, #1
 801dc4a:	9108      	str	r1, [sp, #32]
 801dc4c:	1c51      	adds	r1, r2, #1
 801dc4e:	9111      	str	r1, [sp, #68]	; 0x44
 801dc50:	7852      	ldrb	r2, [r2, #1]
 801dc52:	2a00      	cmp	r2, #0
 801dc54:	d1c4      	bne.n	801dbe0 <_strtod_l+0x38>
 801dc56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dc58:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 801dc5c:	2b00      	cmp	r3, #0
 801dc5e:	f040 8535 	bne.w	801e6cc <_strtod_l+0xb24>
 801dc62:	ec49 8b10 	vmov	d0, r8, r9
 801dc66:	e7e4      	b.n	801dc32 <_strtod_l+0x8a>
 801dc68:	2100      	movs	r1, #0
 801dc6a:	e7ee      	b.n	801dc4a <_strtod_l+0xa2>
 801dc6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801dc6e:	b13a      	cbz	r2, 801dc80 <_strtod_l+0xd8>
 801dc70:	2135      	movs	r1, #53	; 0x35
 801dc72:	a814      	add	r0, sp, #80	; 0x50
 801dc74:	f7ff ff3a 	bl	801daec <__copybits>
 801dc78:	9912      	ldr	r1, [sp, #72]	; 0x48
 801dc7a:	4620      	mov	r0, r4
 801dc7c:	f7ff fb10 	bl	801d2a0 <_Bfree>
 801dc80:	1e7b      	subs	r3, r7, #1
 801dc82:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801dc84:	2b04      	cmp	r3, #4
 801dc86:	d806      	bhi.n	801dc96 <_strtod_l+0xee>
 801dc88:	e8df f003 	tbb	[pc, r3]
 801dc8c:	201d0314 	.word	0x201d0314
 801dc90:	14          	.byte	0x14
 801dc91:	00          	.byte	0x00
 801dc92:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 801dc96:	05eb      	lsls	r3, r5, #23
 801dc98:	bf48      	it	mi
 801dc9a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801dc9e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801dca2:	0d1b      	lsrs	r3, r3, #20
 801dca4:	051b      	lsls	r3, r3, #20
 801dca6:	2b00      	cmp	r3, #0
 801dca8:	d1b9      	bne.n	801dc1e <_strtod_l+0x76>
 801dcaa:	f7fe fb79 	bl	801c3a0 <__errno>
 801dcae:	2322      	movs	r3, #34	; 0x22
 801dcb0:	6003      	str	r3, [r0, #0]
 801dcb2:	e7b4      	b.n	801dc1e <_strtod_l+0x76>
 801dcb4:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 801dcb8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801dcbc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801dcc0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801dcc4:	e7e7      	b.n	801dc96 <_strtod_l+0xee>
 801dcc6:	f8df 9184 	ldr.w	r9, [pc, #388]	; 801de4c <_strtod_l+0x2a4>
 801dcca:	e7e4      	b.n	801dc96 <_strtod_l+0xee>
 801dccc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801dcd0:	f04f 38ff 	mov.w	r8, #4294967295
 801dcd4:	e7df      	b.n	801dc96 <_strtod_l+0xee>
 801dcd6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801dcd8:	1c5a      	adds	r2, r3, #1
 801dcda:	9211      	str	r2, [sp, #68]	; 0x44
 801dcdc:	785b      	ldrb	r3, [r3, #1]
 801dcde:	2b30      	cmp	r3, #48	; 0x30
 801dce0:	d0f9      	beq.n	801dcd6 <_strtod_l+0x12e>
 801dce2:	2b00      	cmp	r3, #0
 801dce4:	d09b      	beq.n	801dc1e <_strtod_l+0x76>
 801dce6:	2301      	movs	r3, #1
 801dce8:	9306      	str	r3, [sp, #24]
 801dcea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801dcec:	9309      	str	r3, [sp, #36]	; 0x24
 801dcee:	2300      	movs	r3, #0
 801dcf0:	9305      	str	r3, [sp, #20]
 801dcf2:	9307      	str	r3, [sp, #28]
 801dcf4:	461e      	mov	r6, r3
 801dcf6:	220a      	movs	r2, #10
 801dcf8:	9811      	ldr	r0, [sp, #68]	; 0x44
 801dcfa:	7805      	ldrb	r5, [r0, #0]
 801dcfc:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 801dd00:	b2d9      	uxtb	r1, r3
 801dd02:	2909      	cmp	r1, #9
 801dd04:	d92b      	bls.n	801dd5e <_strtod_l+0x1b6>
 801dd06:	4950      	ldr	r1, [pc, #320]	; (801de48 <_strtod_l+0x2a0>)
 801dd08:	2201      	movs	r2, #1
 801dd0a:	f001 fb3c 	bl	801f386 <strncmp>
 801dd0e:	2800      	cmp	r0, #0
 801dd10:	d035      	beq.n	801dd7e <_strtod_l+0x1d6>
 801dd12:	2000      	movs	r0, #0
 801dd14:	462a      	mov	r2, r5
 801dd16:	4633      	mov	r3, r6
 801dd18:	4683      	mov	fp, r0
 801dd1a:	4601      	mov	r1, r0
 801dd1c:	2a65      	cmp	r2, #101	; 0x65
 801dd1e:	d001      	beq.n	801dd24 <_strtod_l+0x17c>
 801dd20:	2a45      	cmp	r2, #69	; 0x45
 801dd22:	d118      	bne.n	801dd56 <_strtod_l+0x1ae>
 801dd24:	b91b      	cbnz	r3, 801dd2e <_strtod_l+0x186>
 801dd26:	9b06      	ldr	r3, [sp, #24]
 801dd28:	4303      	orrs	r3, r0
 801dd2a:	d094      	beq.n	801dc56 <_strtod_l+0xae>
 801dd2c:	2300      	movs	r3, #0
 801dd2e:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 801dd32:	f10a 0201 	add.w	r2, sl, #1
 801dd36:	9211      	str	r2, [sp, #68]	; 0x44
 801dd38:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801dd3c:	2a2b      	cmp	r2, #43	; 0x2b
 801dd3e:	d075      	beq.n	801de2c <_strtod_l+0x284>
 801dd40:	2a2d      	cmp	r2, #45	; 0x2d
 801dd42:	d07b      	beq.n	801de3c <_strtod_l+0x294>
 801dd44:	f04f 0e00 	mov.w	lr, #0
 801dd48:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 801dd4c:	2d09      	cmp	r5, #9
 801dd4e:	f240 8083 	bls.w	801de58 <_strtod_l+0x2b0>
 801dd52:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 801dd56:	2500      	movs	r5, #0
 801dd58:	e09e      	b.n	801de98 <_strtod_l+0x2f0>
 801dd5a:	2300      	movs	r3, #0
 801dd5c:	e7c4      	b.n	801dce8 <_strtod_l+0x140>
 801dd5e:	2e08      	cmp	r6, #8
 801dd60:	bfd5      	itete	le
 801dd62:	9907      	ldrle	r1, [sp, #28]
 801dd64:	9905      	ldrgt	r1, [sp, #20]
 801dd66:	fb02 3301 	mlale	r3, r2, r1, r3
 801dd6a:	fb02 3301 	mlagt	r3, r2, r1, r3
 801dd6e:	f100 0001 	add.w	r0, r0, #1
 801dd72:	bfd4      	ite	le
 801dd74:	9307      	strle	r3, [sp, #28]
 801dd76:	9305      	strgt	r3, [sp, #20]
 801dd78:	3601      	adds	r6, #1
 801dd7a:	9011      	str	r0, [sp, #68]	; 0x44
 801dd7c:	e7bc      	b.n	801dcf8 <_strtod_l+0x150>
 801dd7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801dd80:	1c5a      	adds	r2, r3, #1
 801dd82:	9211      	str	r2, [sp, #68]	; 0x44
 801dd84:	785a      	ldrb	r2, [r3, #1]
 801dd86:	b3ae      	cbz	r6, 801ddf4 <_strtod_l+0x24c>
 801dd88:	4683      	mov	fp, r0
 801dd8a:	4633      	mov	r3, r6
 801dd8c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801dd90:	2909      	cmp	r1, #9
 801dd92:	d912      	bls.n	801ddba <_strtod_l+0x212>
 801dd94:	2101      	movs	r1, #1
 801dd96:	e7c1      	b.n	801dd1c <_strtod_l+0x174>
 801dd98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801dd9a:	1c5a      	adds	r2, r3, #1
 801dd9c:	9211      	str	r2, [sp, #68]	; 0x44
 801dd9e:	785a      	ldrb	r2, [r3, #1]
 801dda0:	3001      	adds	r0, #1
 801dda2:	2a30      	cmp	r2, #48	; 0x30
 801dda4:	d0f8      	beq.n	801dd98 <_strtod_l+0x1f0>
 801dda6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801ddaa:	2b08      	cmp	r3, #8
 801ddac:	f200 8495 	bhi.w	801e6da <_strtod_l+0xb32>
 801ddb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ddb2:	9309      	str	r3, [sp, #36]	; 0x24
 801ddb4:	4683      	mov	fp, r0
 801ddb6:	2000      	movs	r0, #0
 801ddb8:	4603      	mov	r3, r0
 801ddba:	3a30      	subs	r2, #48	; 0x30
 801ddbc:	f100 0101 	add.w	r1, r0, #1
 801ddc0:	d012      	beq.n	801dde8 <_strtod_l+0x240>
 801ddc2:	448b      	add	fp, r1
 801ddc4:	eb00 0c03 	add.w	ip, r0, r3
 801ddc8:	4619      	mov	r1, r3
 801ddca:	250a      	movs	r5, #10
 801ddcc:	4561      	cmp	r1, ip
 801ddce:	d113      	bne.n	801ddf8 <_strtod_l+0x250>
 801ddd0:	1819      	adds	r1, r3, r0
 801ddd2:	2908      	cmp	r1, #8
 801ddd4:	f103 0301 	add.w	r3, r3, #1
 801ddd8:	4403      	add	r3, r0
 801ddda:	dc1b      	bgt.n	801de14 <_strtod_l+0x26c>
 801dddc:	9807      	ldr	r0, [sp, #28]
 801ddde:	210a      	movs	r1, #10
 801dde0:	fb01 2200 	mla	r2, r1, r0, r2
 801dde4:	9207      	str	r2, [sp, #28]
 801dde6:	2100      	movs	r1, #0
 801dde8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ddea:	1c50      	adds	r0, r2, #1
 801ddec:	9011      	str	r0, [sp, #68]	; 0x44
 801ddee:	7852      	ldrb	r2, [r2, #1]
 801ddf0:	4608      	mov	r0, r1
 801ddf2:	e7cb      	b.n	801dd8c <_strtod_l+0x1e4>
 801ddf4:	4630      	mov	r0, r6
 801ddf6:	e7d4      	b.n	801dda2 <_strtod_l+0x1fa>
 801ddf8:	2908      	cmp	r1, #8
 801ddfa:	f101 0101 	add.w	r1, r1, #1
 801ddfe:	dc03      	bgt.n	801de08 <_strtod_l+0x260>
 801de00:	9f07      	ldr	r7, [sp, #28]
 801de02:	436f      	muls	r7, r5
 801de04:	9707      	str	r7, [sp, #28]
 801de06:	e7e1      	b.n	801ddcc <_strtod_l+0x224>
 801de08:	2910      	cmp	r1, #16
 801de0a:	bfde      	ittt	le
 801de0c:	9f05      	ldrle	r7, [sp, #20]
 801de0e:	436f      	mulle	r7, r5
 801de10:	9705      	strle	r7, [sp, #20]
 801de12:	e7db      	b.n	801ddcc <_strtod_l+0x224>
 801de14:	2b10      	cmp	r3, #16
 801de16:	bfdf      	itttt	le
 801de18:	9805      	ldrle	r0, [sp, #20]
 801de1a:	210a      	movle	r1, #10
 801de1c:	fb01 2200 	mlale	r2, r1, r0, r2
 801de20:	9205      	strle	r2, [sp, #20]
 801de22:	e7e0      	b.n	801dde6 <_strtod_l+0x23e>
 801de24:	f04f 0b00 	mov.w	fp, #0
 801de28:	2101      	movs	r1, #1
 801de2a:	e77c      	b.n	801dd26 <_strtod_l+0x17e>
 801de2c:	f04f 0e00 	mov.w	lr, #0
 801de30:	f10a 0202 	add.w	r2, sl, #2
 801de34:	9211      	str	r2, [sp, #68]	; 0x44
 801de36:	f89a 2002 	ldrb.w	r2, [sl, #2]
 801de3a:	e785      	b.n	801dd48 <_strtod_l+0x1a0>
 801de3c:	f04f 0e01 	mov.w	lr, #1
 801de40:	e7f6      	b.n	801de30 <_strtod_l+0x288>
 801de42:	bf00      	nop
 801de44:	08020ba8 	.word	0x08020ba8
 801de48:	08020ba4 	.word	0x08020ba4
 801de4c:	7ff00000 	.word	0x7ff00000
 801de50:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801de52:	1c55      	adds	r5, r2, #1
 801de54:	9511      	str	r5, [sp, #68]	; 0x44
 801de56:	7852      	ldrb	r2, [r2, #1]
 801de58:	2a30      	cmp	r2, #48	; 0x30
 801de5a:	d0f9      	beq.n	801de50 <_strtod_l+0x2a8>
 801de5c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 801de60:	2d08      	cmp	r5, #8
 801de62:	f63f af78 	bhi.w	801dd56 <_strtod_l+0x1ae>
 801de66:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 801de6a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801de6c:	920a      	str	r2, [sp, #40]	; 0x28
 801de6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801de70:	1c55      	adds	r5, r2, #1
 801de72:	9511      	str	r5, [sp, #68]	; 0x44
 801de74:	7852      	ldrb	r2, [r2, #1]
 801de76:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 801de7a:	2f09      	cmp	r7, #9
 801de7c:	d937      	bls.n	801deee <_strtod_l+0x346>
 801de7e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801de80:	1bed      	subs	r5, r5, r7
 801de82:	2d08      	cmp	r5, #8
 801de84:	f644 651f 	movw	r5, #19999	; 0x4e1f
 801de88:	dc02      	bgt.n	801de90 <_strtod_l+0x2e8>
 801de8a:	4565      	cmp	r5, ip
 801de8c:	bfa8      	it	ge
 801de8e:	4665      	movge	r5, ip
 801de90:	f1be 0f00 	cmp.w	lr, #0
 801de94:	d000      	beq.n	801de98 <_strtod_l+0x2f0>
 801de96:	426d      	negs	r5, r5
 801de98:	2b00      	cmp	r3, #0
 801de9a:	d14d      	bne.n	801df38 <_strtod_l+0x390>
 801de9c:	9b06      	ldr	r3, [sp, #24]
 801de9e:	4303      	orrs	r3, r0
 801dea0:	f47f aebd 	bne.w	801dc1e <_strtod_l+0x76>
 801dea4:	2900      	cmp	r1, #0
 801dea6:	f47f aed6 	bne.w	801dc56 <_strtod_l+0xae>
 801deaa:	2a69      	cmp	r2, #105	; 0x69
 801deac:	d027      	beq.n	801defe <_strtod_l+0x356>
 801deae:	dc24      	bgt.n	801defa <_strtod_l+0x352>
 801deb0:	2a49      	cmp	r2, #73	; 0x49
 801deb2:	d024      	beq.n	801defe <_strtod_l+0x356>
 801deb4:	2a4e      	cmp	r2, #78	; 0x4e
 801deb6:	f47f aece 	bne.w	801dc56 <_strtod_l+0xae>
 801deba:	4995      	ldr	r1, [pc, #596]	; (801e110 <_strtod_l+0x568>)
 801debc:	a811      	add	r0, sp, #68	; 0x44
 801debe:	f001 fd6b 	bl	801f998 <__match>
 801dec2:	2800      	cmp	r0, #0
 801dec4:	f43f aec7 	beq.w	801dc56 <_strtod_l+0xae>
 801dec8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801deca:	781b      	ldrb	r3, [r3, #0]
 801decc:	2b28      	cmp	r3, #40	; 0x28
 801dece:	d12d      	bne.n	801df2c <_strtod_l+0x384>
 801ded0:	4990      	ldr	r1, [pc, #576]	; (801e114 <_strtod_l+0x56c>)
 801ded2:	aa14      	add	r2, sp, #80	; 0x50
 801ded4:	a811      	add	r0, sp, #68	; 0x44
 801ded6:	f001 fd73 	bl	801f9c0 <__hexnan>
 801deda:	2805      	cmp	r0, #5
 801dedc:	d126      	bne.n	801df2c <_strtod_l+0x384>
 801dede:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dee0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801dee4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801dee8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801deec:	e697      	b.n	801dc1e <_strtod_l+0x76>
 801deee:	250a      	movs	r5, #10
 801def0:	fb05 2c0c 	mla	ip, r5, ip, r2
 801def4:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 801def8:	e7b9      	b.n	801de6e <_strtod_l+0x2c6>
 801defa:	2a6e      	cmp	r2, #110	; 0x6e
 801defc:	e7db      	b.n	801deb6 <_strtod_l+0x30e>
 801defe:	4986      	ldr	r1, [pc, #536]	; (801e118 <_strtod_l+0x570>)
 801df00:	a811      	add	r0, sp, #68	; 0x44
 801df02:	f001 fd49 	bl	801f998 <__match>
 801df06:	2800      	cmp	r0, #0
 801df08:	f43f aea5 	beq.w	801dc56 <_strtod_l+0xae>
 801df0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801df0e:	4983      	ldr	r1, [pc, #524]	; (801e11c <_strtod_l+0x574>)
 801df10:	3b01      	subs	r3, #1
 801df12:	a811      	add	r0, sp, #68	; 0x44
 801df14:	9311      	str	r3, [sp, #68]	; 0x44
 801df16:	f001 fd3f 	bl	801f998 <__match>
 801df1a:	b910      	cbnz	r0, 801df22 <_strtod_l+0x37a>
 801df1c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801df1e:	3301      	adds	r3, #1
 801df20:	9311      	str	r3, [sp, #68]	; 0x44
 801df22:	f8df 920c 	ldr.w	r9, [pc, #524]	; 801e130 <_strtod_l+0x588>
 801df26:	f04f 0800 	mov.w	r8, #0
 801df2a:	e678      	b.n	801dc1e <_strtod_l+0x76>
 801df2c:	487c      	ldr	r0, [pc, #496]	; (801e120 <_strtod_l+0x578>)
 801df2e:	f001 fa4f 	bl	801f3d0 <nan>
 801df32:	ec59 8b10 	vmov	r8, r9, d0
 801df36:	e672      	b.n	801dc1e <_strtod_l+0x76>
 801df38:	eddd 7a07 	vldr	s15, [sp, #28]
 801df3c:	eba5 020b 	sub.w	r2, r5, fp
 801df40:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801df44:	2e00      	cmp	r6, #0
 801df46:	bf08      	it	eq
 801df48:	461e      	moveq	r6, r3
 801df4a:	2b10      	cmp	r3, #16
 801df4c:	9206      	str	r2, [sp, #24]
 801df4e:	461a      	mov	r2, r3
 801df50:	bfa8      	it	ge
 801df52:	2210      	movge	r2, #16
 801df54:	2b09      	cmp	r3, #9
 801df56:	ec59 8b17 	vmov	r8, r9, d7
 801df5a:	dd0c      	ble.n	801df76 <_strtod_l+0x3ce>
 801df5c:	4971      	ldr	r1, [pc, #452]	; (801e124 <_strtod_l+0x57c>)
 801df5e:	eddd 6a05 	vldr	s13, [sp, #20]
 801df62:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801df66:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 801df6a:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801df6e:	eea7 6b05 	vfma.f64	d6, d7, d5
 801df72:	ec59 8b16 	vmov	r8, r9, d6
 801df76:	2b0f      	cmp	r3, #15
 801df78:	dc37      	bgt.n	801dfea <_strtod_l+0x442>
 801df7a:	9906      	ldr	r1, [sp, #24]
 801df7c:	2900      	cmp	r1, #0
 801df7e:	f43f ae4e 	beq.w	801dc1e <_strtod_l+0x76>
 801df82:	dd23      	ble.n	801dfcc <_strtod_l+0x424>
 801df84:	2916      	cmp	r1, #22
 801df86:	dc0b      	bgt.n	801dfa0 <_strtod_l+0x3f8>
 801df88:	4b66      	ldr	r3, [pc, #408]	; (801e124 <_strtod_l+0x57c>)
 801df8a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801df8e:	ed93 7b00 	vldr	d7, [r3]
 801df92:	ec49 8b16 	vmov	d6, r8, r9
 801df96:	ee27 7b06 	vmul.f64	d7, d7, d6
 801df9a:	ec59 8b17 	vmov	r8, r9, d7
 801df9e:	e63e      	b.n	801dc1e <_strtod_l+0x76>
 801dfa0:	9806      	ldr	r0, [sp, #24]
 801dfa2:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801dfa6:	4281      	cmp	r1, r0
 801dfa8:	db1f      	blt.n	801dfea <_strtod_l+0x442>
 801dfaa:	4a5e      	ldr	r2, [pc, #376]	; (801e124 <_strtod_l+0x57c>)
 801dfac:	f1c3 030f 	rsb	r3, r3, #15
 801dfb0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801dfb4:	ed91 7b00 	vldr	d7, [r1]
 801dfb8:	ec49 8b16 	vmov	d6, r8, r9
 801dfbc:	1ac3      	subs	r3, r0, r3
 801dfbe:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801dfc2:	ee27 7b06 	vmul.f64	d7, d7, d6
 801dfc6:	ed92 6b00 	vldr	d6, [r2]
 801dfca:	e7e4      	b.n	801df96 <_strtod_l+0x3ee>
 801dfcc:	9906      	ldr	r1, [sp, #24]
 801dfce:	3116      	adds	r1, #22
 801dfd0:	db0b      	blt.n	801dfea <_strtod_l+0x442>
 801dfd2:	4b54      	ldr	r3, [pc, #336]	; (801e124 <_strtod_l+0x57c>)
 801dfd4:	ebab 0505 	sub.w	r5, fp, r5
 801dfd8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801dfdc:	ed95 7b00 	vldr	d7, [r5]
 801dfe0:	ec49 8b16 	vmov	d6, r8, r9
 801dfe4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801dfe8:	e7d7      	b.n	801df9a <_strtod_l+0x3f2>
 801dfea:	9906      	ldr	r1, [sp, #24]
 801dfec:	1a9a      	subs	r2, r3, r2
 801dfee:	440a      	add	r2, r1
 801dff0:	2a00      	cmp	r2, #0
 801dff2:	dd6e      	ble.n	801e0d2 <_strtod_l+0x52a>
 801dff4:	f012 000f 	ands.w	r0, r2, #15
 801dff8:	d00a      	beq.n	801e010 <_strtod_l+0x468>
 801dffa:	494a      	ldr	r1, [pc, #296]	; (801e124 <_strtod_l+0x57c>)
 801dffc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801e000:	ed91 7b00 	vldr	d7, [r1]
 801e004:	ec49 8b16 	vmov	d6, r8, r9
 801e008:	ee27 7b06 	vmul.f64	d7, d7, d6
 801e00c:	ec59 8b17 	vmov	r8, r9, d7
 801e010:	f032 020f 	bics.w	r2, r2, #15
 801e014:	d04e      	beq.n	801e0b4 <_strtod_l+0x50c>
 801e016:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801e01a:	dd22      	ble.n	801e062 <_strtod_l+0x4ba>
 801e01c:	2500      	movs	r5, #0
 801e01e:	462e      	mov	r6, r5
 801e020:	9507      	str	r5, [sp, #28]
 801e022:	462f      	mov	r7, r5
 801e024:	2322      	movs	r3, #34	; 0x22
 801e026:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801e130 <_strtod_l+0x588>
 801e02a:	6023      	str	r3, [r4, #0]
 801e02c:	f04f 0800 	mov.w	r8, #0
 801e030:	9b07      	ldr	r3, [sp, #28]
 801e032:	2b00      	cmp	r3, #0
 801e034:	f43f adf3 	beq.w	801dc1e <_strtod_l+0x76>
 801e038:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e03a:	4620      	mov	r0, r4
 801e03c:	f7ff f930 	bl	801d2a0 <_Bfree>
 801e040:	4639      	mov	r1, r7
 801e042:	4620      	mov	r0, r4
 801e044:	f7ff f92c 	bl	801d2a0 <_Bfree>
 801e048:	4631      	mov	r1, r6
 801e04a:	4620      	mov	r0, r4
 801e04c:	f7ff f928 	bl	801d2a0 <_Bfree>
 801e050:	9907      	ldr	r1, [sp, #28]
 801e052:	4620      	mov	r0, r4
 801e054:	f7ff f924 	bl	801d2a0 <_Bfree>
 801e058:	4629      	mov	r1, r5
 801e05a:	4620      	mov	r0, r4
 801e05c:	f7ff f920 	bl	801d2a0 <_Bfree>
 801e060:	e5dd      	b.n	801dc1e <_strtod_l+0x76>
 801e062:	2000      	movs	r0, #0
 801e064:	ec49 8b17 	vmov	d7, r8, r9
 801e068:	4f2f      	ldr	r7, [pc, #188]	; (801e128 <_strtod_l+0x580>)
 801e06a:	1112      	asrs	r2, r2, #4
 801e06c:	4601      	mov	r1, r0
 801e06e:	2a01      	cmp	r2, #1
 801e070:	dc23      	bgt.n	801e0ba <_strtod_l+0x512>
 801e072:	b108      	cbz	r0, 801e078 <_strtod_l+0x4d0>
 801e074:	ec59 8b17 	vmov	r8, r9, d7
 801e078:	4a2b      	ldr	r2, [pc, #172]	; (801e128 <_strtod_l+0x580>)
 801e07a:	482c      	ldr	r0, [pc, #176]	; (801e12c <_strtod_l+0x584>)
 801e07c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801e080:	ed92 7b00 	vldr	d7, [r2]
 801e084:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801e088:	ec49 8b16 	vmov	d6, r8, r9
 801e08c:	4a28      	ldr	r2, [pc, #160]	; (801e130 <_strtod_l+0x588>)
 801e08e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801e092:	ee17 1a90 	vmov	r1, s15
 801e096:	400a      	ands	r2, r1
 801e098:	4282      	cmp	r2, r0
 801e09a:	ec59 8b17 	vmov	r8, r9, d7
 801e09e:	d8bd      	bhi.n	801e01c <_strtod_l+0x474>
 801e0a0:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801e0a4:	4282      	cmp	r2, r0
 801e0a6:	bf86      	itte	hi
 801e0a8:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 801e134 <_strtod_l+0x58c>
 801e0ac:	f04f 38ff 	movhi.w	r8, #4294967295
 801e0b0:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801e0b4:	2200      	movs	r2, #0
 801e0b6:	9205      	str	r2, [sp, #20]
 801e0b8:	e076      	b.n	801e1a8 <_strtod_l+0x600>
 801e0ba:	f012 0f01 	tst.w	r2, #1
 801e0be:	d004      	beq.n	801e0ca <_strtod_l+0x522>
 801e0c0:	ed97 6b00 	vldr	d6, [r7]
 801e0c4:	2001      	movs	r0, #1
 801e0c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801e0ca:	3101      	adds	r1, #1
 801e0cc:	1052      	asrs	r2, r2, #1
 801e0ce:	3708      	adds	r7, #8
 801e0d0:	e7cd      	b.n	801e06e <_strtod_l+0x4c6>
 801e0d2:	d0ef      	beq.n	801e0b4 <_strtod_l+0x50c>
 801e0d4:	4252      	negs	r2, r2
 801e0d6:	f012 000f 	ands.w	r0, r2, #15
 801e0da:	d00a      	beq.n	801e0f2 <_strtod_l+0x54a>
 801e0dc:	4911      	ldr	r1, [pc, #68]	; (801e124 <_strtod_l+0x57c>)
 801e0de:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801e0e2:	ed91 7b00 	vldr	d7, [r1]
 801e0e6:	ec49 8b16 	vmov	d6, r8, r9
 801e0ea:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801e0ee:	ec59 8b17 	vmov	r8, r9, d7
 801e0f2:	1112      	asrs	r2, r2, #4
 801e0f4:	d0de      	beq.n	801e0b4 <_strtod_l+0x50c>
 801e0f6:	2a1f      	cmp	r2, #31
 801e0f8:	dd1e      	ble.n	801e138 <_strtod_l+0x590>
 801e0fa:	2500      	movs	r5, #0
 801e0fc:	462e      	mov	r6, r5
 801e0fe:	9507      	str	r5, [sp, #28]
 801e100:	462f      	mov	r7, r5
 801e102:	2322      	movs	r3, #34	; 0x22
 801e104:	f04f 0800 	mov.w	r8, #0
 801e108:	f04f 0900 	mov.w	r9, #0
 801e10c:	6023      	str	r3, [r4, #0]
 801e10e:	e78f      	b.n	801e030 <_strtod_l+0x488>
 801e110:	08020995 	.word	0x08020995
 801e114:	08020bbc 	.word	0x08020bbc
 801e118:	0802098d 	.word	0x0802098d
 801e11c:	080209c2 	.word	0x080209c2
 801e120:	08020d68 	.word	0x08020d68
 801e124:	08020ad0 	.word	0x08020ad0
 801e128:	08020aa8 	.word	0x08020aa8
 801e12c:	7ca00000 	.word	0x7ca00000
 801e130:	7ff00000 	.word	0x7ff00000
 801e134:	7fefffff 	.word	0x7fefffff
 801e138:	f012 0110 	ands.w	r1, r2, #16
 801e13c:	bf18      	it	ne
 801e13e:	216a      	movne	r1, #106	; 0x6a
 801e140:	9105      	str	r1, [sp, #20]
 801e142:	ec49 8b17 	vmov	d7, r8, r9
 801e146:	49be      	ldr	r1, [pc, #760]	; (801e440 <_strtod_l+0x898>)
 801e148:	2000      	movs	r0, #0
 801e14a:	07d7      	lsls	r7, r2, #31
 801e14c:	d504      	bpl.n	801e158 <_strtod_l+0x5b0>
 801e14e:	ed91 6b00 	vldr	d6, [r1]
 801e152:	2001      	movs	r0, #1
 801e154:	ee27 7b06 	vmul.f64	d7, d7, d6
 801e158:	1052      	asrs	r2, r2, #1
 801e15a:	f101 0108 	add.w	r1, r1, #8
 801e15e:	d1f4      	bne.n	801e14a <_strtod_l+0x5a2>
 801e160:	b108      	cbz	r0, 801e166 <_strtod_l+0x5be>
 801e162:	ec59 8b17 	vmov	r8, r9, d7
 801e166:	9a05      	ldr	r2, [sp, #20]
 801e168:	b1ba      	cbz	r2, 801e19a <_strtod_l+0x5f2>
 801e16a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 801e16e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 801e172:	2a00      	cmp	r2, #0
 801e174:	4648      	mov	r0, r9
 801e176:	dd10      	ble.n	801e19a <_strtod_l+0x5f2>
 801e178:	2a1f      	cmp	r2, #31
 801e17a:	f340 812c 	ble.w	801e3d6 <_strtod_l+0x82e>
 801e17e:	2a34      	cmp	r2, #52	; 0x34
 801e180:	bfde      	ittt	le
 801e182:	f04f 32ff 	movle.w	r2, #4294967295
 801e186:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 801e18a:	408a      	lslle	r2, r1
 801e18c:	f04f 0800 	mov.w	r8, #0
 801e190:	bfcc      	ite	gt
 801e192:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801e196:	ea02 0900 	andle.w	r9, r2, r0
 801e19a:	ec49 8b17 	vmov	d7, r8, r9
 801e19e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e1a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e1a6:	d0a8      	beq.n	801e0fa <_strtod_l+0x552>
 801e1a8:	9a07      	ldr	r2, [sp, #28]
 801e1aa:	9200      	str	r2, [sp, #0]
 801e1ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e1ae:	4632      	mov	r2, r6
 801e1b0:	4620      	mov	r0, r4
 801e1b2:	f7ff f8dd 	bl	801d370 <__s2b>
 801e1b6:	9007      	str	r0, [sp, #28]
 801e1b8:	2800      	cmp	r0, #0
 801e1ba:	f43f af2f 	beq.w	801e01c <_strtod_l+0x474>
 801e1be:	9a06      	ldr	r2, [sp, #24]
 801e1c0:	2a00      	cmp	r2, #0
 801e1c2:	ebab 0305 	sub.w	r3, fp, r5
 801e1c6:	ed9f 9b96 	vldr	d9, [pc, #600]	; 801e420 <_strtod_l+0x878>
 801e1ca:	bfa8      	it	ge
 801e1cc:	2300      	movge	r3, #0
 801e1ce:	ed9f ab96 	vldr	d10, [pc, #600]	; 801e428 <_strtod_l+0x880>
 801e1d2:	ed9f bb97 	vldr	d11, [pc, #604]	; 801e430 <_strtod_l+0x888>
 801e1d6:	9309      	str	r3, [sp, #36]	; 0x24
 801e1d8:	2500      	movs	r5, #0
 801e1da:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801e1de:	930c      	str	r3, [sp, #48]	; 0x30
 801e1e0:	462e      	mov	r6, r5
 801e1e2:	9b07      	ldr	r3, [sp, #28]
 801e1e4:	4620      	mov	r0, r4
 801e1e6:	6859      	ldr	r1, [r3, #4]
 801e1e8:	f7ff f81a 	bl	801d220 <_Balloc>
 801e1ec:	4607      	mov	r7, r0
 801e1ee:	2800      	cmp	r0, #0
 801e1f0:	f43f af18 	beq.w	801e024 <_strtod_l+0x47c>
 801e1f4:	9b07      	ldr	r3, [sp, #28]
 801e1f6:	691a      	ldr	r2, [r3, #16]
 801e1f8:	3202      	adds	r2, #2
 801e1fa:	f103 010c 	add.w	r1, r3, #12
 801e1fe:	0092      	lsls	r2, r2, #2
 801e200:	300c      	adds	r0, #12
 801e202:	f7fe f902 	bl	801c40a <memcpy>
 801e206:	ec49 8b10 	vmov	d0, r8, r9
 801e20a:	aa14      	add	r2, sp, #80	; 0x50
 801e20c:	a913      	add	r1, sp, #76	; 0x4c
 801e20e:	4620      	mov	r0, r4
 801e210:	f7ff fbe2 	bl	801d9d8 <__d2b>
 801e214:	ec49 8b18 	vmov	d8, r8, r9
 801e218:	9012      	str	r0, [sp, #72]	; 0x48
 801e21a:	2800      	cmp	r0, #0
 801e21c:	f43f af02 	beq.w	801e024 <_strtod_l+0x47c>
 801e220:	2101      	movs	r1, #1
 801e222:	4620      	mov	r0, r4
 801e224:	f7ff f93c 	bl	801d4a0 <__i2b>
 801e228:	4606      	mov	r6, r0
 801e22a:	2800      	cmp	r0, #0
 801e22c:	f43f aefa 	beq.w	801e024 <_strtod_l+0x47c>
 801e230:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e232:	9914      	ldr	r1, [sp, #80]	; 0x50
 801e234:	2b00      	cmp	r3, #0
 801e236:	bfab      	itete	ge
 801e238:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 801e23a:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 801e23c:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 801e240:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 801e244:	bfac      	ite	ge
 801e246:	eb03 0b02 	addge.w	fp, r3, r2
 801e24a:	eba2 0a03 	sublt.w	sl, r2, r3
 801e24e:	9a05      	ldr	r2, [sp, #20]
 801e250:	1a9b      	subs	r3, r3, r2
 801e252:	440b      	add	r3, r1
 801e254:	4a7b      	ldr	r2, [pc, #492]	; (801e444 <_strtod_l+0x89c>)
 801e256:	3b01      	subs	r3, #1
 801e258:	4293      	cmp	r3, r2
 801e25a:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 801e25e:	f280 80cd 	bge.w	801e3fc <_strtod_l+0x854>
 801e262:	1ad2      	subs	r2, r2, r3
 801e264:	2a1f      	cmp	r2, #31
 801e266:	eba1 0102 	sub.w	r1, r1, r2
 801e26a:	f04f 0001 	mov.w	r0, #1
 801e26e:	f300 80b9 	bgt.w	801e3e4 <_strtod_l+0x83c>
 801e272:	fa00 f302 	lsl.w	r3, r0, r2
 801e276:	930b      	str	r3, [sp, #44]	; 0x2c
 801e278:	2300      	movs	r3, #0
 801e27a:	930a      	str	r3, [sp, #40]	; 0x28
 801e27c:	eb0b 0301 	add.w	r3, fp, r1
 801e280:	9a05      	ldr	r2, [sp, #20]
 801e282:	459b      	cmp	fp, r3
 801e284:	448a      	add	sl, r1
 801e286:	4492      	add	sl, r2
 801e288:	465a      	mov	r2, fp
 801e28a:	bfa8      	it	ge
 801e28c:	461a      	movge	r2, r3
 801e28e:	4552      	cmp	r2, sl
 801e290:	bfa8      	it	ge
 801e292:	4652      	movge	r2, sl
 801e294:	2a00      	cmp	r2, #0
 801e296:	bfc2      	ittt	gt
 801e298:	1a9b      	subgt	r3, r3, r2
 801e29a:	ebaa 0a02 	subgt.w	sl, sl, r2
 801e29e:	ebab 0b02 	subgt.w	fp, fp, r2
 801e2a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e2a4:	2a00      	cmp	r2, #0
 801e2a6:	dd18      	ble.n	801e2da <_strtod_l+0x732>
 801e2a8:	4631      	mov	r1, r6
 801e2aa:	4620      	mov	r0, r4
 801e2ac:	930f      	str	r3, [sp, #60]	; 0x3c
 801e2ae:	f7ff f9b7 	bl	801d620 <__pow5mult>
 801e2b2:	4606      	mov	r6, r0
 801e2b4:	2800      	cmp	r0, #0
 801e2b6:	f43f aeb5 	beq.w	801e024 <_strtod_l+0x47c>
 801e2ba:	4601      	mov	r1, r0
 801e2bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e2be:	4620      	mov	r0, r4
 801e2c0:	f7ff f904 	bl	801d4cc <__multiply>
 801e2c4:	900e      	str	r0, [sp, #56]	; 0x38
 801e2c6:	2800      	cmp	r0, #0
 801e2c8:	f43f aeac 	beq.w	801e024 <_strtod_l+0x47c>
 801e2cc:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e2ce:	4620      	mov	r0, r4
 801e2d0:	f7fe ffe6 	bl	801d2a0 <_Bfree>
 801e2d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e2d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e2d8:	9212      	str	r2, [sp, #72]	; 0x48
 801e2da:	2b00      	cmp	r3, #0
 801e2dc:	f300 8093 	bgt.w	801e406 <_strtod_l+0x85e>
 801e2e0:	9b06      	ldr	r3, [sp, #24]
 801e2e2:	2b00      	cmp	r3, #0
 801e2e4:	dd08      	ble.n	801e2f8 <_strtod_l+0x750>
 801e2e6:	4639      	mov	r1, r7
 801e2e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e2ea:	4620      	mov	r0, r4
 801e2ec:	f7ff f998 	bl	801d620 <__pow5mult>
 801e2f0:	4607      	mov	r7, r0
 801e2f2:	2800      	cmp	r0, #0
 801e2f4:	f43f ae96 	beq.w	801e024 <_strtod_l+0x47c>
 801e2f8:	f1ba 0f00 	cmp.w	sl, #0
 801e2fc:	dd08      	ble.n	801e310 <_strtod_l+0x768>
 801e2fe:	4639      	mov	r1, r7
 801e300:	4652      	mov	r2, sl
 801e302:	4620      	mov	r0, r4
 801e304:	f7ff f9e6 	bl	801d6d4 <__lshift>
 801e308:	4607      	mov	r7, r0
 801e30a:	2800      	cmp	r0, #0
 801e30c:	f43f ae8a 	beq.w	801e024 <_strtod_l+0x47c>
 801e310:	f1bb 0f00 	cmp.w	fp, #0
 801e314:	dd08      	ble.n	801e328 <_strtod_l+0x780>
 801e316:	4631      	mov	r1, r6
 801e318:	465a      	mov	r2, fp
 801e31a:	4620      	mov	r0, r4
 801e31c:	f7ff f9da 	bl	801d6d4 <__lshift>
 801e320:	4606      	mov	r6, r0
 801e322:	2800      	cmp	r0, #0
 801e324:	f43f ae7e 	beq.w	801e024 <_strtod_l+0x47c>
 801e328:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e32a:	463a      	mov	r2, r7
 801e32c:	4620      	mov	r0, r4
 801e32e:	f7ff fa59 	bl	801d7e4 <__mdiff>
 801e332:	4605      	mov	r5, r0
 801e334:	2800      	cmp	r0, #0
 801e336:	f43f ae75 	beq.w	801e024 <_strtod_l+0x47c>
 801e33a:	2300      	movs	r3, #0
 801e33c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 801e340:	60c3      	str	r3, [r0, #12]
 801e342:	4631      	mov	r1, r6
 801e344:	f7ff fa32 	bl	801d7ac <__mcmp>
 801e348:	2800      	cmp	r0, #0
 801e34a:	da7f      	bge.n	801e44c <_strtod_l+0x8a4>
 801e34c:	ea5a 0a08 	orrs.w	sl, sl, r8
 801e350:	f040 80a5 	bne.w	801e49e <_strtod_l+0x8f6>
 801e354:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e358:	2b00      	cmp	r3, #0
 801e35a:	f040 80a0 	bne.w	801e49e <_strtod_l+0x8f6>
 801e35e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801e362:	0d1b      	lsrs	r3, r3, #20
 801e364:	051b      	lsls	r3, r3, #20
 801e366:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801e36a:	f240 8098 	bls.w	801e49e <_strtod_l+0x8f6>
 801e36e:	696b      	ldr	r3, [r5, #20]
 801e370:	b91b      	cbnz	r3, 801e37a <_strtod_l+0x7d2>
 801e372:	692b      	ldr	r3, [r5, #16]
 801e374:	2b01      	cmp	r3, #1
 801e376:	f340 8092 	ble.w	801e49e <_strtod_l+0x8f6>
 801e37a:	4629      	mov	r1, r5
 801e37c:	2201      	movs	r2, #1
 801e37e:	4620      	mov	r0, r4
 801e380:	f7ff f9a8 	bl	801d6d4 <__lshift>
 801e384:	4631      	mov	r1, r6
 801e386:	4605      	mov	r5, r0
 801e388:	f7ff fa10 	bl	801d7ac <__mcmp>
 801e38c:	2800      	cmp	r0, #0
 801e38e:	f340 8086 	ble.w	801e49e <_strtod_l+0x8f6>
 801e392:	9905      	ldr	r1, [sp, #20]
 801e394:	4a2c      	ldr	r2, [pc, #176]	; (801e448 <_strtod_l+0x8a0>)
 801e396:	464b      	mov	r3, r9
 801e398:	2900      	cmp	r1, #0
 801e39a:	f000 809f 	beq.w	801e4dc <_strtod_l+0x934>
 801e39e:	ea02 0109 	and.w	r1, r2, r9
 801e3a2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801e3a6:	f300 8099 	bgt.w	801e4dc <_strtod_l+0x934>
 801e3aa:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801e3ae:	f77f aea8 	ble.w	801e102 <_strtod_l+0x55a>
 801e3b2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 801e438 <_strtod_l+0x890>
 801e3b6:	ec49 8b16 	vmov	d6, r8, r9
 801e3ba:	4b23      	ldr	r3, [pc, #140]	; (801e448 <_strtod_l+0x8a0>)
 801e3bc:	ee26 7b07 	vmul.f64	d7, d6, d7
 801e3c0:	ee17 2a90 	vmov	r2, s15
 801e3c4:	4013      	ands	r3, r2
 801e3c6:	ec59 8b17 	vmov	r8, r9, d7
 801e3ca:	2b00      	cmp	r3, #0
 801e3cc:	f47f ae34 	bne.w	801e038 <_strtod_l+0x490>
 801e3d0:	2322      	movs	r3, #34	; 0x22
 801e3d2:	6023      	str	r3, [r4, #0]
 801e3d4:	e630      	b.n	801e038 <_strtod_l+0x490>
 801e3d6:	f04f 31ff 	mov.w	r1, #4294967295
 801e3da:	fa01 f202 	lsl.w	r2, r1, r2
 801e3de:	ea02 0808 	and.w	r8, r2, r8
 801e3e2:	e6da      	b.n	801e19a <_strtod_l+0x5f2>
 801e3e4:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 801e3e8:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801e3ec:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801e3f0:	33e2      	adds	r3, #226	; 0xe2
 801e3f2:	fa00 f303 	lsl.w	r3, r0, r3
 801e3f6:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 801e3fa:	e73f      	b.n	801e27c <_strtod_l+0x6d4>
 801e3fc:	2200      	movs	r2, #0
 801e3fe:	2301      	movs	r3, #1
 801e400:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801e404:	e73a      	b.n	801e27c <_strtod_l+0x6d4>
 801e406:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e408:	461a      	mov	r2, r3
 801e40a:	4620      	mov	r0, r4
 801e40c:	f7ff f962 	bl	801d6d4 <__lshift>
 801e410:	9012      	str	r0, [sp, #72]	; 0x48
 801e412:	2800      	cmp	r0, #0
 801e414:	f47f af64 	bne.w	801e2e0 <_strtod_l+0x738>
 801e418:	e604      	b.n	801e024 <_strtod_l+0x47c>
 801e41a:	bf00      	nop
 801e41c:	f3af 8000 	nop.w
 801e420:	94a03595 	.word	0x94a03595
 801e424:	3fcfffff 	.word	0x3fcfffff
 801e428:	94a03595 	.word	0x94a03595
 801e42c:	3fdfffff 	.word	0x3fdfffff
 801e430:	35afe535 	.word	0x35afe535
 801e434:	3fe00000 	.word	0x3fe00000
 801e438:	00000000 	.word	0x00000000
 801e43c:	39500000 	.word	0x39500000
 801e440:	08020bd0 	.word	0x08020bd0
 801e444:	fffffc02 	.word	0xfffffc02
 801e448:	7ff00000 	.word	0x7ff00000
 801e44c:	46cb      	mov	fp, r9
 801e44e:	d15f      	bne.n	801e510 <_strtod_l+0x968>
 801e450:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e454:	f1ba 0f00 	cmp.w	sl, #0
 801e458:	d02a      	beq.n	801e4b0 <_strtod_l+0x908>
 801e45a:	4aa7      	ldr	r2, [pc, #668]	; (801e6f8 <_strtod_l+0xb50>)
 801e45c:	4293      	cmp	r3, r2
 801e45e:	d12b      	bne.n	801e4b8 <_strtod_l+0x910>
 801e460:	9b05      	ldr	r3, [sp, #20]
 801e462:	4642      	mov	r2, r8
 801e464:	b1fb      	cbz	r3, 801e4a6 <_strtod_l+0x8fe>
 801e466:	4ba5      	ldr	r3, [pc, #660]	; (801e6fc <_strtod_l+0xb54>)
 801e468:	ea09 0303 	and.w	r3, r9, r3
 801e46c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801e470:	f04f 31ff 	mov.w	r1, #4294967295
 801e474:	d81a      	bhi.n	801e4ac <_strtod_l+0x904>
 801e476:	0d1b      	lsrs	r3, r3, #20
 801e478:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801e47c:	fa01 f303 	lsl.w	r3, r1, r3
 801e480:	429a      	cmp	r2, r3
 801e482:	d119      	bne.n	801e4b8 <_strtod_l+0x910>
 801e484:	4b9e      	ldr	r3, [pc, #632]	; (801e700 <_strtod_l+0xb58>)
 801e486:	459b      	cmp	fp, r3
 801e488:	d102      	bne.n	801e490 <_strtod_l+0x8e8>
 801e48a:	3201      	adds	r2, #1
 801e48c:	f43f adca 	beq.w	801e024 <_strtod_l+0x47c>
 801e490:	4b9a      	ldr	r3, [pc, #616]	; (801e6fc <_strtod_l+0xb54>)
 801e492:	ea0b 0303 	and.w	r3, fp, r3
 801e496:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801e49a:	f04f 0800 	mov.w	r8, #0
 801e49e:	9b05      	ldr	r3, [sp, #20]
 801e4a0:	2b00      	cmp	r3, #0
 801e4a2:	d186      	bne.n	801e3b2 <_strtod_l+0x80a>
 801e4a4:	e5c8      	b.n	801e038 <_strtod_l+0x490>
 801e4a6:	f04f 33ff 	mov.w	r3, #4294967295
 801e4aa:	e7e9      	b.n	801e480 <_strtod_l+0x8d8>
 801e4ac:	460b      	mov	r3, r1
 801e4ae:	e7e7      	b.n	801e480 <_strtod_l+0x8d8>
 801e4b0:	ea53 0308 	orrs.w	r3, r3, r8
 801e4b4:	f43f af6d 	beq.w	801e392 <_strtod_l+0x7ea>
 801e4b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e4ba:	b1cb      	cbz	r3, 801e4f0 <_strtod_l+0x948>
 801e4bc:	ea13 0f0b 	tst.w	r3, fp
 801e4c0:	d0ed      	beq.n	801e49e <_strtod_l+0x8f6>
 801e4c2:	9a05      	ldr	r2, [sp, #20]
 801e4c4:	4640      	mov	r0, r8
 801e4c6:	4649      	mov	r1, r9
 801e4c8:	f1ba 0f00 	cmp.w	sl, #0
 801e4cc:	d014      	beq.n	801e4f8 <_strtod_l+0x950>
 801e4ce:	f7ff fb51 	bl	801db74 <sulp>
 801e4d2:	ee38 7b00 	vadd.f64	d7, d8, d0
 801e4d6:	ec59 8b17 	vmov	r8, r9, d7
 801e4da:	e7e0      	b.n	801e49e <_strtod_l+0x8f6>
 801e4dc:	4013      	ands	r3, r2
 801e4de:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801e4e2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801e4e6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801e4ea:	f04f 38ff 	mov.w	r8, #4294967295
 801e4ee:	e7d6      	b.n	801e49e <_strtod_l+0x8f6>
 801e4f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e4f2:	ea13 0f08 	tst.w	r3, r8
 801e4f6:	e7e3      	b.n	801e4c0 <_strtod_l+0x918>
 801e4f8:	f7ff fb3c 	bl	801db74 <sulp>
 801e4fc:	ee38 0b40 	vsub.f64	d0, d8, d0
 801e500:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801e504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e508:	ec59 8b10 	vmov	r8, r9, d0
 801e50c:	d1c7      	bne.n	801e49e <_strtod_l+0x8f6>
 801e50e:	e5f8      	b.n	801e102 <_strtod_l+0x55a>
 801e510:	4631      	mov	r1, r6
 801e512:	4628      	mov	r0, r5
 801e514:	f7ff faba 	bl	801da8c <__ratio>
 801e518:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801e51c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801e520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e524:	d85f      	bhi.n	801e5e6 <_strtod_l+0xa3e>
 801e526:	f1ba 0f00 	cmp.w	sl, #0
 801e52a:	d166      	bne.n	801e5fa <_strtod_l+0xa52>
 801e52c:	f1b8 0f00 	cmp.w	r8, #0
 801e530:	d14d      	bne.n	801e5ce <_strtod_l+0xa26>
 801e532:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e536:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801e53a:	2b00      	cmp	r3, #0
 801e53c:	d162      	bne.n	801e604 <_strtod_l+0xa5c>
 801e53e:	eeb4 0bcd 	vcmpe.f64	d0, d13
 801e542:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801e546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e54a:	d401      	bmi.n	801e550 <_strtod_l+0x9a8>
 801e54c:	ee20 db0d 	vmul.f64	d13, d0, d13
 801e550:	eeb1 cb4d 	vneg.f64	d12, d13
 801e554:	4869      	ldr	r0, [pc, #420]	; (801e6fc <_strtod_l+0xb54>)
 801e556:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 801e708 <_strtod_l+0xb60>
 801e55a:	ea0b 0100 	and.w	r1, fp, r0
 801e55e:	4561      	cmp	r1, ip
 801e560:	ec53 2b1c 	vmov	r2, r3, d12
 801e564:	d17a      	bne.n	801e65c <_strtod_l+0xab4>
 801e566:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 801e56a:	ec49 8b10 	vmov	d0, r8, r9
 801e56e:	910a      	str	r1, [sp, #40]	; 0x28
 801e570:	f7ff f9c2 	bl	801d8f8 <__ulp>
 801e574:	ec49 8b1e 	vmov	d14, r8, r9
 801e578:	4860      	ldr	r0, [pc, #384]	; (801e6fc <_strtod_l+0xb54>)
 801e57a:	eea0 eb0c 	vfma.f64	d14, d0, d12
 801e57e:	ee1e 3a90 	vmov	r3, s29
 801e582:	4a60      	ldr	r2, [pc, #384]	; (801e704 <_strtod_l+0xb5c>)
 801e584:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e586:	4018      	ands	r0, r3
 801e588:	4290      	cmp	r0, r2
 801e58a:	ec59 8b1e 	vmov	r8, r9, d14
 801e58e:	d93c      	bls.n	801e60a <_strtod_l+0xa62>
 801e590:	ee18 2a90 	vmov	r2, s17
 801e594:	4b5a      	ldr	r3, [pc, #360]	; (801e700 <_strtod_l+0xb58>)
 801e596:	429a      	cmp	r2, r3
 801e598:	d104      	bne.n	801e5a4 <_strtod_l+0x9fc>
 801e59a:	ee18 3a10 	vmov	r3, s16
 801e59e:	3301      	adds	r3, #1
 801e5a0:	f43f ad40 	beq.w	801e024 <_strtod_l+0x47c>
 801e5a4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 801e700 <_strtod_l+0xb58>
 801e5a8:	f04f 38ff 	mov.w	r8, #4294967295
 801e5ac:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e5ae:	4620      	mov	r0, r4
 801e5b0:	f7fe fe76 	bl	801d2a0 <_Bfree>
 801e5b4:	4639      	mov	r1, r7
 801e5b6:	4620      	mov	r0, r4
 801e5b8:	f7fe fe72 	bl	801d2a0 <_Bfree>
 801e5bc:	4631      	mov	r1, r6
 801e5be:	4620      	mov	r0, r4
 801e5c0:	f7fe fe6e 	bl	801d2a0 <_Bfree>
 801e5c4:	4629      	mov	r1, r5
 801e5c6:	4620      	mov	r0, r4
 801e5c8:	f7fe fe6a 	bl	801d2a0 <_Bfree>
 801e5cc:	e609      	b.n	801e1e2 <_strtod_l+0x63a>
 801e5ce:	f1b8 0f01 	cmp.w	r8, #1
 801e5d2:	d103      	bne.n	801e5dc <_strtod_l+0xa34>
 801e5d4:	f1b9 0f00 	cmp.w	r9, #0
 801e5d8:	f43f ad93 	beq.w	801e102 <_strtod_l+0x55a>
 801e5dc:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 801e5e0:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801e5e4:	e7b6      	b.n	801e554 <_strtod_l+0x9ac>
 801e5e6:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801e5ea:	ee20 db0d 	vmul.f64	d13, d0, d13
 801e5ee:	f1ba 0f00 	cmp.w	sl, #0
 801e5f2:	d0ad      	beq.n	801e550 <_strtod_l+0x9a8>
 801e5f4:	eeb0 cb4d 	vmov.f64	d12, d13
 801e5f8:	e7ac      	b.n	801e554 <_strtod_l+0x9ac>
 801e5fa:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 801e5fe:	eeb0 db4c 	vmov.f64	d13, d12
 801e602:	e7a7      	b.n	801e554 <_strtod_l+0x9ac>
 801e604:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 801e608:	e7a4      	b.n	801e554 <_strtod_l+0x9ac>
 801e60a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801e60e:	9b05      	ldr	r3, [sp, #20]
 801e610:	46cb      	mov	fp, r9
 801e612:	2b00      	cmp	r3, #0
 801e614:	d1ca      	bne.n	801e5ac <_strtod_l+0xa04>
 801e616:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801e61a:	0d1b      	lsrs	r3, r3, #20
 801e61c:	051b      	lsls	r3, r3, #20
 801e61e:	4299      	cmp	r1, r3
 801e620:	d1c4      	bne.n	801e5ac <_strtod_l+0xa04>
 801e622:	ec51 0b1d 	vmov	r0, r1, d13
 801e626:	f7e2 f8af 	bl	8000788 <__aeabi_d2lz>
 801e62a:	f7e2 f867 	bl	80006fc <__aeabi_l2d>
 801e62e:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 801e632:	ec41 0b17 	vmov	d7, r0, r1
 801e636:	ea4b 0b08 	orr.w	fp, fp, r8
 801e63a:	ea5b 0b0a 	orrs.w	fp, fp, sl
 801e63e:	ee3d db47 	vsub.f64	d13, d13, d7
 801e642:	d03c      	beq.n	801e6be <_strtod_l+0xb16>
 801e644:	eeb4 dbca 	vcmpe.f64	d13, d10
 801e648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e64c:	f53f acf4 	bmi.w	801e038 <_strtod_l+0x490>
 801e650:	eeb4 dbcb 	vcmpe.f64	d13, d11
 801e654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e658:	dda8      	ble.n	801e5ac <_strtod_l+0xa04>
 801e65a:	e4ed      	b.n	801e038 <_strtod_l+0x490>
 801e65c:	9805      	ldr	r0, [sp, #20]
 801e65e:	b1f0      	cbz	r0, 801e69e <_strtod_l+0xaf6>
 801e660:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 801e664:	d81b      	bhi.n	801e69e <_strtod_l+0xaf6>
 801e666:	ed9f 7b22 	vldr	d7, [pc, #136]	; 801e6f0 <_strtod_l+0xb48>
 801e66a:	eeb4 dbc7 	vcmpe.f64	d13, d7
 801e66e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e672:	d811      	bhi.n	801e698 <_strtod_l+0xaf0>
 801e674:	eebc dbcd 	vcvt.u32.f64	s26, d13
 801e678:	ee1d 3a10 	vmov	r3, s26
 801e67c:	2b01      	cmp	r3, #1
 801e67e:	bf38      	it	cc
 801e680:	2301      	movcc	r3, #1
 801e682:	ee0d 3a10 	vmov	s26, r3
 801e686:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 801e68a:	f1ba 0f00 	cmp.w	sl, #0
 801e68e:	d113      	bne.n	801e6b8 <_strtod_l+0xb10>
 801e690:	eeb1 7b4d 	vneg.f64	d7, d13
 801e694:	ec53 2b17 	vmov	r2, r3, d7
 801e698:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 801e69c:	1a43      	subs	r3, r0, r1
 801e69e:	eeb0 0b48 	vmov.f64	d0, d8
 801e6a2:	ec43 2b1c 	vmov	d12, r2, r3
 801e6a6:	910a      	str	r1, [sp, #40]	; 0x28
 801e6a8:	f7ff f926 	bl	801d8f8 <__ulp>
 801e6ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e6ae:	eeac 8b00 	vfma.f64	d8, d12, d0
 801e6b2:	ec59 8b18 	vmov	r8, r9, d8
 801e6b6:	e7aa      	b.n	801e60e <_strtod_l+0xa66>
 801e6b8:	eeb0 7b4d 	vmov.f64	d7, d13
 801e6bc:	e7ea      	b.n	801e694 <_strtod_l+0xaec>
 801e6be:	eeb4 dbc9 	vcmpe.f64	d13, d9
 801e6c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e6c6:	f57f af71 	bpl.w	801e5ac <_strtod_l+0xa04>
 801e6ca:	e4b5      	b.n	801e038 <_strtod_l+0x490>
 801e6cc:	2300      	movs	r3, #0
 801e6ce:	9308      	str	r3, [sp, #32]
 801e6d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e6d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e6d4:	6013      	str	r3, [r2, #0]
 801e6d6:	f7ff baa6 	b.w	801dc26 <_strtod_l+0x7e>
 801e6da:	2a65      	cmp	r2, #101	; 0x65
 801e6dc:	f43f aba2 	beq.w	801de24 <_strtod_l+0x27c>
 801e6e0:	2a45      	cmp	r2, #69	; 0x45
 801e6e2:	f43f ab9f 	beq.w	801de24 <_strtod_l+0x27c>
 801e6e6:	2101      	movs	r1, #1
 801e6e8:	f7ff bbd8 	b.w	801de9c <_strtod_l+0x2f4>
 801e6ec:	f3af 8000 	nop.w
 801e6f0:	ffc00000 	.word	0xffc00000
 801e6f4:	41dfffff 	.word	0x41dfffff
 801e6f8:	000fffff 	.word	0x000fffff
 801e6fc:	7ff00000 	.word	0x7ff00000
 801e700:	7fefffff 	.word	0x7fefffff
 801e704:	7c9fffff 	.word	0x7c9fffff
 801e708:	7fe00000 	.word	0x7fe00000

0801e70c <_strtod_r>:
 801e70c:	4b01      	ldr	r3, [pc, #4]	; (801e714 <_strtod_r+0x8>)
 801e70e:	f7ff ba4b 	b.w	801dba8 <_strtod_l>
 801e712:	bf00      	nop
 801e714:	2400015c 	.word	0x2400015c

0801e718 <_strtol_l.constprop.0>:
 801e718:	2b01      	cmp	r3, #1
 801e71a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e71e:	d001      	beq.n	801e724 <_strtol_l.constprop.0+0xc>
 801e720:	2b24      	cmp	r3, #36	; 0x24
 801e722:	d906      	bls.n	801e732 <_strtol_l.constprop.0+0x1a>
 801e724:	f7fd fe3c 	bl	801c3a0 <__errno>
 801e728:	2316      	movs	r3, #22
 801e72a:	6003      	str	r3, [r0, #0]
 801e72c:	2000      	movs	r0, #0
 801e72e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e732:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801e818 <_strtol_l.constprop.0+0x100>
 801e736:	460d      	mov	r5, r1
 801e738:	462e      	mov	r6, r5
 801e73a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e73e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801e742:	f017 0708 	ands.w	r7, r7, #8
 801e746:	d1f7      	bne.n	801e738 <_strtol_l.constprop.0+0x20>
 801e748:	2c2d      	cmp	r4, #45	; 0x2d
 801e74a:	d132      	bne.n	801e7b2 <_strtol_l.constprop.0+0x9a>
 801e74c:	782c      	ldrb	r4, [r5, #0]
 801e74e:	2701      	movs	r7, #1
 801e750:	1cb5      	adds	r5, r6, #2
 801e752:	2b00      	cmp	r3, #0
 801e754:	d05b      	beq.n	801e80e <_strtol_l.constprop.0+0xf6>
 801e756:	2b10      	cmp	r3, #16
 801e758:	d109      	bne.n	801e76e <_strtol_l.constprop.0+0x56>
 801e75a:	2c30      	cmp	r4, #48	; 0x30
 801e75c:	d107      	bne.n	801e76e <_strtol_l.constprop.0+0x56>
 801e75e:	782c      	ldrb	r4, [r5, #0]
 801e760:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801e764:	2c58      	cmp	r4, #88	; 0x58
 801e766:	d14d      	bne.n	801e804 <_strtol_l.constprop.0+0xec>
 801e768:	786c      	ldrb	r4, [r5, #1]
 801e76a:	2310      	movs	r3, #16
 801e76c:	3502      	adds	r5, #2
 801e76e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801e772:	f108 38ff 	add.w	r8, r8, #4294967295
 801e776:	f04f 0e00 	mov.w	lr, #0
 801e77a:	fbb8 f9f3 	udiv	r9, r8, r3
 801e77e:	4676      	mov	r6, lr
 801e780:	fb03 8a19 	mls	sl, r3, r9, r8
 801e784:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801e788:	f1bc 0f09 	cmp.w	ip, #9
 801e78c:	d816      	bhi.n	801e7bc <_strtol_l.constprop.0+0xa4>
 801e78e:	4664      	mov	r4, ip
 801e790:	42a3      	cmp	r3, r4
 801e792:	dd24      	ble.n	801e7de <_strtol_l.constprop.0+0xc6>
 801e794:	f1be 3fff 	cmp.w	lr, #4294967295
 801e798:	d008      	beq.n	801e7ac <_strtol_l.constprop.0+0x94>
 801e79a:	45b1      	cmp	r9, r6
 801e79c:	d31c      	bcc.n	801e7d8 <_strtol_l.constprop.0+0xc0>
 801e79e:	d101      	bne.n	801e7a4 <_strtol_l.constprop.0+0x8c>
 801e7a0:	45a2      	cmp	sl, r4
 801e7a2:	db19      	blt.n	801e7d8 <_strtol_l.constprop.0+0xc0>
 801e7a4:	fb06 4603 	mla	r6, r6, r3, r4
 801e7a8:	f04f 0e01 	mov.w	lr, #1
 801e7ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e7b0:	e7e8      	b.n	801e784 <_strtol_l.constprop.0+0x6c>
 801e7b2:	2c2b      	cmp	r4, #43	; 0x2b
 801e7b4:	bf04      	itt	eq
 801e7b6:	782c      	ldrbeq	r4, [r5, #0]
 801e7b8:	1cb5      	addeq	r5, r6, #2
 801e7ba:	e7ca      	b.n	801e752 <_strtol_l.constprop.0+0x3a>
 801e7bc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801e7c0:	f1bc 0f19 	cmp.w	ip, #25
 801e7c4:	d801      	bhi.n	801e7ca <_strtol_l.constprop.0+0xb2>
 801e7c6:	3c37      	subs	r4, #55	; 0x37
 801e7c8:	e7e2      	b.n	801e790 <_strtol_l.constprop.0+0x78>
 801e7ca:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801e7ce:	f1bc 0f19 	cmp.w	ip, #25
 801e7d2:	d804      	bhi.n	801e7de <_strtol_l.constprop.0+0xc6>
 801e7d4:	3c57      	subs	r4, #87	; 0x57
 801e7d6:	e7db      	b.n	801e790 <_strtol_l.constprop.0+0x78>
 801e7d8:	f04f 3eff 	mov.w	lr, #4294967295
 801e7dc:	e7e6      	b.n	801e7ac <_strtol_l.constprop.0+0x94>
 801e7de:	f1be 3fff 	cmp.w	lr, #4294967295
 801e7e2:	d105      	bne.n	801e7f0 <_strtol_l.constprop.0+0xd8>
 801e7e4:	2322      	movs	r3, #34	; 0x22
 801e7e6:	6003      	str	r3, [r0, #0]
 801e7e8:	4646      	mov	r6, r8
 801e7ea:	b942      	cbnz	r2, 801e7fe <_strtol_l.constprop.0+0xe6>
 801e7ec:	4630      	mov	r0, r6
 801e7ee:	e79e      	b.n	801e72e <_strtol_l.constprop.0+0x16>
 801e7f0:	b107      	cbz	r7, 801e7f4 <_strtol_l.constprop.0+0xdc>
 801e7f2:	4276      	negs	r6, r6
 801e7f4:	2a00      	cmp	r2, #0
 801e7f6:	d0f9      	beq.n	801e7ec <_strtol_l.constprop.0+0xd4>
 801e7f8:	f1be 0f00 	cmp.w	lr, #0
 801e7fc:	d000      	beq.n	801e800 <_strtol_l.constprop.0+0xe8>
 801e7fe:	1e69      	subs	r1, r5, #1
 801e800:	6011      	str	r1, [r2, #0]
 801e802:	e7f3      	b.n	801e7ec <_strtol_l.constprop.0+0xd4>
 801e804:	2430      	movs	r4, #48	; 0x30
 801e806:	2b00      	cmp	r3, #0
 801e808:	d1b1      	bne.n	801e76e <_strtol_l.constprop.0+0x56>
 801e80a:	2308      	movs	r3, #8
 801e80c:	e7af      	b.n	801e76e <_strtol_l.constprop.0+0x56>
 801e80e:	2c30      	cmp	r4, #48	; 0x30
 801e810:	d0a5      	beq.n	801e75e <_strtol_l.constprop.0+0x46>
 801e812:	230a      	movs	r3, #10
 801e814:	e7ab      	b.n	801e76e <_strtol_l.constprop.0+0x56>
 801e816:	bf00      	nop
 801e818:	08020bf9 	.word	0x08020bf9

0801e81c <_strtol_r>:
 801e81c:	f7ff bf7c 	b.w	801e718 <_strtol_l.constprop.0>

0801e820 <__ssputs_r>:
 801e820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e824:	688e      	ldr	r6, [r1, #8]
 801e826:	461f      	mov	r7, r3
 801e828:	42be      	cmp	r6, r7
 801e82a:	680b      	ldr	r3, [r1, #0]
 801e82c:	4682      	mov	sl, r0
 801e82e:	460c      	mov	r4, r1
 801e830:	4690      	mov	r8, r2
 801e832:	d82c      	bhi.n	801e88e <__ssputs_r+0x6e>
 801e834:	898a      	ldrh	r2, [r1, #12]
 801e836:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801e83a:	d026      	beq.n	801e88a <__ssputs_r+0x6a>
 801e83c:	6965      	ldr	r5, [r4, #20]
 801e83e:	6909      	ldr	r1, [r1, #16]
 801e840:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e844:	eba3 0901 	sub.w	r9, r3, r1
 801e848:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e84c:	1c7b      	adds	r3, r7, #1
 801e84e:	444b      	add	r3, r9
 801e850:	106d      	asrs	r5, r5, #1
 801e852:	429d      	cmp	r5, r3
 801e854:	bf38      	it	cc
 801e856:	461d      	movcc	r5, r3
 801e858:	0553      	lsls	r3, r2, #21
 801e85a:	d527      	bpl.n	801e8ac <__ssputs_r+0x8c>
 801e85c:	4629      	mov	r1, r5
 801e85e:	f7fe fc53 	bl	801d108 <_malloc_r>
 801e862:	4606      	mov	r6, r0
 801e864:	b360      	cbz	r0, 801e8c0 <__ssputs_r+0xa0>
 801e866:	6921      	ldr	r1, [r4, #16]
 801e868:	464a      	mov	r2, r9
 801e86a:	f7fd fdce 	bl	801c40a <memcpy>
 801e86e:	89a3      	ldrh	r3, [r4, #12]
 801e870:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801e874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e878:	81a3      	strh	r3, [r4, #12]
 801e87a:	6126      	str	r6, [r4, #16]
 801e87c:	6165      	str	r5, [r4, #20]
 801e87e:	444e      	add	r6, r9
 801e880:	eba5 0509 	sub.w	r5, r5, r9
 801e884:	6026      	str	r6, [r4, #0]
 801e886:	60a5      	str	r5, [r4, #8]
 801e888:	463e      	mov	r6, r7
 801e88a:	42be      	cmp	r6, r7
 801e88c:	d900      	bls.n	801e890 <__ssputs_r+0x70>
 801e88e:	463e      	mov	r6, r7
 801e890:	6820      	ldr	r0, [r4, #0]
 801e892:	4632      	mov	r2, r6
 801e894:	4641      	mov	r1, r8
 801e896:	f000 fd5c 	bl	801f352 <memmove>
 801e89a:	68a3      	ldr	r3, [r4, #8]
 801e89c:	1b9b      	subs	r3, r3, r6
 801e89e:	60a3      	str	r3, [r4, #8]
 801e8a0:	6823      	ldr	r3, [r4, #0]
 801e8a2:	4433      	add	r3, r6
 801e8a4:	6023      	str	r3, [r4, #0]
 801e8a6:	2000      	movs	r0, #0
 801e8a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e8ac:	462a      	mov	r2, r5
 801e8ae:	f001 f934 	bl	801fb1a <_realloc_r>
 801e8b2:	4606      	mov	r6, r0
 801e8b4:	2800      	cmp	r0, #0
 801e8b6:	d1e0      	bne.n	801e87a <__ssputs_r+0x5a>
 801e8b8:	6921      	ldr	r1, [r4, #16]
 801e8ba:	4650      	mov	r0, sl
 801e8bc:	f7fe fbb0 	bl	801d020 <_free_r>
 801e8c0:	230c      	movs	r3, #12
 801e8c2:	f8ca 3000 	str.w	r3, [sl]
 801e8c6:	89a3      	ldrh	r3, [r4, #12]
 801e8c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e8cc:	81a3      	strh	r3, [r4, #12]
 801e8ce:	f04f 30ff 	mov.w	r0, #4294967295
 801e8d2:	e7e9      	b.n	801e8a8 <__ssputs_r+0x88>

0801e8d4 <_svfiprintf_r>:
 801e8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8d8:	4698      	mov	r8, r3
 801e8da:	898b      	ldrh	r3, [r1, #12]
 801e8dc:	061b      	lsls	r3, r3, #24
 801e8de:	b09d      	sub	sp, #116	; 0x74
 801e8e0:	4607      	mov	r7, r0
 801e8e2:	460d      	mov	r5, r1
 801e8e4:	4614      	mov	r4, r2
 801e8e6:	d50e      	bpl.n	801e906 <_svfiprintf_r+0x32>
 801e8e8:	690b      	ldr	r3, [r1, #16]
 801e8ea:	b963      	cbnz	r3, 801e906 <_svfiprintf_r+0x32>
 801e8ec:	2140      	movs	r1, #64	; 0x40
 801e8ee:	f7fe fc0b 	bl	801d108 <_malloc_r>
 801e8f2:	6028      	str	r0, [r5, #0]
 801e8f4:	6128      	str	r0, [r5, #16]
 801e8f6:	b920      	cbnz	r0, 801e902 <_svfiprintf_r+0x2e>
 801e8f8:	230c      	movs	r3, #12
 801e8fa:	603b      	str	r3, [r7, #0]
 801e8fc:	f04f 30ff 	mov.w	r0, #4294967295
 801e900:	e0d0      	b.n	801eaa4 <_svfiprintf_r+0x1d0>
 801e902:	2340      	movs	r3, #64	; 0x40
 801e904:	616b      	str	r3, [r5, #20]
 801e906:	2300      	movs	r3, #0
 801e908:	9309      	str	r3, [sp, #36]	; 0x24
 801e90a:	2320      	movs	r3, #32
 801e90c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e910:	f8cd 800c 	str.w	r8, [sp, #12]
 801e914:	2330      	movs	r3, #48	; 0x30
 801e916:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801eabc <_svfiprintf_r+0x1e8>
 801e91a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e91e:	f04f 0901 	mov.w	r9, #1
 801e922:	4623      	mov	r3, r4
 801e924:	469a      	mov	sl, r3
 801e926:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e92a:	b10a      	cbz	r2, 801e930 <_svfiprintf_r+0x5c>
 801e92c:	2a25      	cmp	r2, #37	; 0x25
 801e92e:	d1f9      	bne.n	801e924 <_svfiprintf_r+0x50>
 801e930:	ebba 0b04 	subs.w	fp, sl, r4
 801e934:	d00b      	beq.n	801e94e <_svfiprintf_r+0x7a>
 801e936:	465b      	mov	r3, fp
 801e938:	4622      	mov	r2, r4
 801e93a:	4629      	mov	r1, r5
 801e93c:	4638      	mov	r0, r7
 801e93e:	f7ff ff6f 	bl	801e820 <__ssputs_r>
 801e942:	3001      	adds	r0, #1
 801e944:	f000 80a9 	beq.w	801ea9a <_svfiprintf_r+0x1c6>
 801e948:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e94a:	445a      	add	r2, fp
 801e94c:	9209      	str	r2, [sp, #36]	; 0x24
 801e94e:	f89a 3000 	ldrb.w	r3, [sl]
 801e952:	2b00      	cmp	r3, #0
 801e954:	f000 80a1 	beq.w	801ea9a <_svfiprintf_r+0x1c6>
 801e958:	2300      	movs	r3, #0
 801e95a:	f04f 32ff 	mov.w	r2, #4294967295
 801e95e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e962:	f10a 0a01 	add.w	sl, sl, #1
 801e966:	9304      	str	r3, [sp, #16]
 801e968:	9307      	str	r3, [sp, #28]
 801e96a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e96e:	931a      	str	r3, [sp, #104]	; 0x68
 801e970:	4654      	mov	r4, sl
 801e972:	2205      	movs	r2, #5
 801e974:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e978:	4850      	ldr	r0, [pc, #320]	; (801eabc <_svfiprintf_r+0x1e8>)
 801e97a:	f7e1 fcd9 	bl	8000330 <memchr>
 801e97e:	9a04      	ldr	r2, [sp, #16]
 801e980:	b9d8      	cbnz	r0, 801e9ba <_svfiprintf_r+0xe6>
 801e982:	06d0      	lsls	r0, r2, #27
 801e984:	bf44      	itt	mi
 801e986:	2320      	movmi	r3, #32
 801e988:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e98c:	0711      	lsls	r1, r2, #28
 801e98e:	bf44      	itt	mi
 801e990:	232b      	movmi	r3, #43	; 0x2b
 801e992:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e996:	f89a 3000 	ldrb.w	r3, [sl]
 801e99a:	2b2a      	cmp	r3, #42	; 0x2a
 801e99c:	d015      	beq.n	801e9ca <_svfiprintf_r+0xf6>
 801e99e:	9a07      	ldr	r2, [sp, #28]
 801e9a0:	4654      	mov	r4, sl
 801e9a2:	2000      	movs	r0, #0
 801e9a4:	f04f 0c0a 	mov.w	ip, #10
 801e9a8:	4621      	mov	r1, r4
 801e9aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e9ae:	3b30      	subs	r3, #48	; 0x30
 801e9b0:	2b09      	cmp	r3, #9
 801e9b2:	d94d      	bls.n	801ea50 <_svfiprintf_r+0x17c>
 801e9b4:	b1b0      	cbz	r0, 801e9e4 <_svfiprintf_r+0x110>
 801e9b6:	9207      	str	r2, [sp, #28]
 801e9b8:	e014      	b.n	801e9e4 <_svfiprintf_r+0x110>
 801e9ba:	eba0 0308 	sub.w	r3, r0, r8
 801e9be:	fa09 f303 	lsl.w	r3, r9, r3
 801e9c2:	4313      	orrs	r3, r2
 801e9c4:	9304      	str	r3, [sp, #16]
 801e9c6:	46a2      	mov	sl, r4
 801e9c8:	e7d2      	b.n	801e970 <_svfiprintf_r+0x9c>
 801e9ca:	9b03      	ldr	r3, [sp, #12]
 801e9cc:	1d19      	adds	r1, r3, #4
 801e9ce:	681b      	ldr	r3, [r3, #0]
 801e9d0:	9103      	str	r1, [sp, #12]
 801e9d2:	2b00      	cmp	r3, #0
 801e9d4:	bfbb      	ittet	lt
 801e9d6:	425b      	neglt	r3, r3
 801e9d8:	f042 0202 	orrlt.w	r2, r2, #2
 801e9dc:	9307      	strge	r3, [sp, #28]
 801e9de:	9307      	strlt	r3, [sp, #28]
 801e9e0:	bfb8      	it	lt
 801e9e2:	9204      	strlt	r2, [sp, #16]
 801e9e4:	7823      	ldrb	r3, [r4, #0]
 801e9e6:	2b2e      	cmp	r3, #46	; 0x2e
 801e9e8:	d10c      	bne.n	801ea04 <_svfiprintf_r+0x130>
 801e9ea:	7863      	ldrb	r3, [r4, #1]
 801e9ec:	2b2a      	cmp	r3, #42	; 0x2a
 801e9ee:	d134      	bne.n	801ea5a <_svfiprintf_r+0x186>
 801e9f0:	9b03      	ldr	r3, [sp, #12]
 801e9f2:	1d1a      	adds	r2, r3, #4
 801e9f4:	681b      	ldr	r3, [r3, #0]
 801e9f6:	9203      	str	r2, [sp, #12]
 801e9f8:	2b00      	cmp	r3, #0
 801e9fa:	bfb8      	it	lt
 801e9fc:	f04f 33ff 	movlt.w	r3, #4294967295
 801ea00:	3402      	adds	r4, #2
 801ea02:	9305      	str	r3, [sp, #20]
 801ea04:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801eacc <_svfiprintf_r+0x1f8>
 801ea08:	7821      	ldrb	r1, [r4, #0]
 801ea0a:	2203      	movs	r2, #3
 801ea0c:	4650      	mov	r0, sl
 801ea0e:	f7e1 fc8f 	bl	8000330 <memchr>
 801ea12:	b138      	cbz	r0, 801ea24 <_svfiprintf_r+0x150>
 801ea14:	9b04      	ldr	r3, [sp, #16]
 801ea16:	eba0 000a 	sub.w	r0, r0, sl
 801ea1a:	2240      	movs	r2, #64	; 0x40
 801ea1c:	4082      	lsls	r2, r0
 801ea1e:	4313      	orrs	r3, r2
 801ea20:	3401      	adds	r4, #1
 801ea22:	9304      	str	r3, [sp, #16]
 801ea24:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ea28:	4825      	ldr	r0, [pc, #148]	; (801eac0 <_svfiprintf_r+0x1ec>)
 801ea2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ea2e:	2206      	movs	r2, #6
 801ea30:	f7e1 fc7e 	bl	8000330 <memchr>
 801ea34:	2800      	cmp	r0, #0
 801ea36:	d038      	beq.n	801eaaa <_svfiprintf_r+0x1d6>
 801ea38:	4b22      	ldr	r3, [pc, #136]	; (801eac4 <_svfiprintf_r+0x1f0>)
 801ea3a:	bb1b      	cbnz	r3, 801ea84 <_svfiprintf_r+0x1b0>
 801ea3c:	9b03      	ldr	r3, [sp, #12]
 801ea3e:	3307      	adds	r3, #7
 801ea40:	f023 0307 	bic.w	r3, r3, #7
 801ea44:	3308      	adds	r3, #8
 801ea46:	9303      	str	r3, [sp, #12]
 801ea48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ea4a:	4433      	add	r3, r6
 801ea4c:	9309      	str	r3, [sp, #36]	; 0x24
 801ea4e:	e768      	b.n	801e922 <_svfiprintf_r+0x4e>
 801ea50:	fb0c 3202 	mla	r2, ip, r2, r3
 801ea54:	460c      	mov	r4, r1
 801ea56:	2001      	movs	r0, #1
 801ea58:	e7a6      	b.n	801e9a8 <_svfiprintf_r+0xd4>
 801ea5a:	2300      	movs	r3, #0
 801ea5c:	3401      	adds	r4, #1
 801ea5e:	9305      	str	r3, [sp, #20]
 801ea60:	4619      	mov	r1, r3
 801ea62:	f04f 0c0a 	mov.w	ip, #10
 801ea66:	4620      	mov	r0, r4
 801ea68:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ea6c:	3a30      	subs	r2, #48	; 0x30
 801ea6e:	2a09      	cmp	r2, #9
 801ea70:	d903      	bls.n	801ea7a <_svfiprintf_r+0x1a6>
 801ea72:	2b00      	cmp	r3, #0
 801ea74:	d0c6      	beq.n	801ea04 <_svfiprintf_r+0x130>
 801ea76:	9105      	str	r1, [sp, #20]
 801ea78:	e7c4      	b.n	801ea04 <_svfiprintf_r+0x130>
 801ea7a:	fb0c 2101 	mla	r1, ip, r1, r2
 801ea7e:	4604      	mov	r4, r0
 801ea80:	2301      	movs	r3, #1
 801ea82:	e7f0      	b.n	801ea66 <_svfiprintf_r+0x192>
 801ea84:	ab03      	add	r3, sp, #12
 801ea86:	9300      	str	r3, [sp, #0]
 801ea88:	462a      	mov	r2, r5
 801ea8a:	4b0f      	ldr	r3, [pc, #60]	; (801eac8 <_svfiprintf_r+0x1f4>)
 801ea8c:	a904      	add	r1, sp, #16
 801ea8e:	4638      	mov	r0, r7
 801ea90:	f7fc fd32 	bl	801b4f8 <_printf_float>
 801ea94:	1c42      	adds	r2, r0, #1
 801ea96:	4606      	mov	r6, r0
 801ea98:	d1d6      	bne.n	801ea48 <_svfiprintf_r+0x174>
 801ea9a:	89ab      	ldrh	r3, [r5, #12]
 801ea9c:	065b      	lsls	r3, r3, #25
 801ea9e:	f53f af2d 	bmi.w	801e8fc <_svfiprintf_r+0x28>
 801eaa2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801eaa4:	b01d      	add	sp, #116	; 0x74
 801eaa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eaaa:	ab03      	add	r3, sp, #12
 801eaac:	9300      	str	r3, [sp, #0]
 801eaae:	462a      	mov	r2, r5
 801eab0:	4b05      	ldr	r3, [pc, #20]	; (801eac8 <_svfiprintf_r+0x1f4>)
 801eab2:	a904      	add	r1, sp, #16
 801eab4:	4638      	mov	r0, r7
 801eab6:	f7fc ffa7 	bl	801ba08 <_printf_i>
 801eaba:	e7eb      	b.n	801ea94 <_svfiprintf_r+0x1c0>
 801eabc:	08020cf9 	.word	0x08020cf9
 801eac0:	08020d03 	.word	0x08020d03
 801eac4:	0801b4f9 	.word	0x0801b4f9
 801eac8:	0801e821 	.word	0x0801e821
 801eacc:	08020cff 	.word	0x08020cff

0801ead0 <_sungetc_r>:
 801ead0:	b538      	push	{r3, r4, r5, lr}
 801ead2:	1c4b      	adds	r3, r1, #1
 801ead4:	4614      	mov	r4, r2
 801ead6:	d103      	bne.n	801eae0 <_sungetc_r+0x10>
 801ead8:	f04f 35ff 	mov.w	r5, #4294967295
 801eadc:	4628      	mov	r0, r5
 801eade:	bd38      	pop	{r3, r4, r5, pc}
 801eae0:	8993      	ldrh	r3, [r2, #12]
 801eae2:	f023 0320 	bic.w	r3, r3, #32
 801eae6:	8193      	strh	r3, [r2, #12]
 801eae8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801eaea:	6852      	ldr	r2, [r2, #4]
 801eaec:	b2cd      	uxtb	r5, r1
 801eaee:	b18b      	cbz	r3, 801eb14 <_sungetc_r+0x44>
 801eaf0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801eaf2:	4293      	cmp	r3, r2
 801eaf4:	dd08      	ble.n	801eb08 <_sungetc_r+0x38>
 801eaf6:	6823      	ldr	r3, [r4, #0]
 801eaf8:	1e5a      	subs	r2, r3, #1
 801eafa:	6022      	str	r2, [r4, #0]
 801eafc:	f803 5c01 	strb.w	r5, [r3, #-1]
 801eb00:	6863      	ldr	r3, [r4, #4]
 801eb02:	3301      	adds	r3, #1
 801eb04:	6063      	str	r3, [r4, #4]
 801eb06:	e7e9      	b.n	801eadc <_sungetc_r+0xc>
 801eb08:	4621      	mov	r1, r4
 801eb0a:	f000 fbe8 	bl	801f2de <__submore>
 801eb0e:	2800      	cmp	r0, #0
 801eb10:	d0f1      	beq.n	801eaf6 <_sungetc_r+0x26>
 801eb12:	e7e1      	b.n	801ead8 <_sungetc_r+0x8>
 801eb14:	6921      	ldr	r1, [r4, #16]
 801eb16:	6823      	ldr	r3, [r4, #0]
 801eb18:	b151      	cbz	r1, 801eb30 <_sungetc_r+0x60>
 801eb1a:	4299      	cmp	r1, r3
 801eb1c:	d208      	bcs.n	801eb30 <_sungetc_r+0x60>
 801eb1e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801eb22:	42a9      	cmp	r1, r5
 801eb24:	d104      	bne.n	801eb30 <_sungetc_r+0x60>
 801eb26:	3b01      	subs	r3, #1
 801eb28:	3201      	adds	r2, #1
 801eb2a:	6023      	str	r3, [r4, #0]
 801eb2c:	6062      	str	r2, [r4, #4]
 801eb2e:	e7d5      	b.n	801eadc <_sungetc_r+0xc>
 801eb30:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801eb34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801eb38:	6363      	str	r3, [r4, #52]	; 0x34
 801eb3a:	2303      	movs	r3, #3
 801eb3c:	63a3      	str	r3, [r4, #56]	; 0x38
 801eb3e:	4623      	mov	r3, r4
 801eb40:	f803 5f46 	strb.w	r5, [r3, #70]!
 801eb44:	6023      	str	r3, [r4, #0]
 801eb46:	2301      	movs	r3, #1
 801eb48:	e7dc      	b.n	801eb04 <_sungetc_r+0x34>

0801eb4a <__ssrefill_r>:
 801eb4a:	b510      	push	{r4, lr}
 801eb4c:	460c      	mov	r4, r1
 801eb4e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801eb50:	b169      	cbz	r1, 801eb6e <__ssrefill_r+0x24>
 801eb52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801eb56:	4299      	cmp	r1, r3
 801eb58:	d001      	beq.n	801eb5e <__ssrefill_r+0x14>
 801eb5a:	f7fe fa61 	bl	801d020 <_free_r>
 801eb5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801eb60:	6063      	str	r3, [r4, #4]
 801eb62:	2000      	movs	r0, #0
 801eb64:	6360      	str	r0, [r4, #52]	; 0x34
 801eb66:	b113      	cbz	r3, 801eb6e <__ssrefill_r+0x24>
 801eb68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801eb6a:	6023      	str	r3, [r4, #0]
 801eb6c:	bd10      	pop	{r4, pc}
 801eb6e:	6923      	ldr	r3, [r4, #16]
 801eb70:	6023      	str	r3, [r4, #0]
 801eb72:	2300      	movs	r3, #0
 801eb74:	6063      	str	r3, [r4, #4]
 801eb76:	89a3      	ldrh	r3, [r4, #12]
 801eb78:	f043 0320 	orr.w	r3, r3, #32
 801eb7c:	81a3      	strh	r3, [r4, #12]
 801eb7e:	f04f 30ff 	mov.w	r0, #4294967295
 801eb82:	e7f3      	b.n	801eb6c <__ssrefill_r+0x22>

0801eb84 <__ssvfiscanf_r>:
 801eb84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eb88:	460c      	mov	r4, r1
 801eb8a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801eb8e:	2100      	movs	r1, #0
 801eb90:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801eb94:	49a6      	ldr	r1, [pc, #664]	; (801ee30 <__ssvfiscanf_r+0x2ac>)
 801eb96:	91a0      	str	r1, [sp, #640]	; 0x280
 801eb98:	f10d 0804 	add.w	r8, sp, #4
 801eb9c:	49a5      	ldr	r1, [pc, #660]	; (801ee34 <__ssvfiscanf_r+0x2b0>)
 801eb9e:	4fa6      	ldr	r7, [pc, #664]	; (801ee38 <__ssvfiscanf_r+0x2b4>)
 801eba0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 801ee3c <__ssvfiscanf_r+0x2b8>
 801eba4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801eba8:	4606      	mov	r6, r0
 801ebaa:	91a1      	str	r1, [sp, #644]	; 0x284
 801ebac:	9300      	str	r3, [sp, #0]
 801ebae:	7813      	ldrb	r3, [r2, #0]
 801ebb0:	2b00      	cmp	r3, #0
 801ebb2:	f000 815a 	beq.w	801ee6a <__ssvfiscanf_r+0x2e6>
 801ebb6:	5cf9      	ldrb	r1, [r7, r3]
 801ebb8:	f011 0108 	ands.w	r1, r1, #8
 801ebbc:	f102 0501 	add.w	r5, r2, #1
 801ebc0:	d019      	beq.n	801ebf6 <__ssvfiscanf_r+0x72>
 801ebc2:	6863      	ldr	r3, [r4, #4]
 801ebc4:	2b00      	cmp	r3, #0
 801ebc6:	dd0f      	ble.n	801ebe8 <__ssvfiscanf_r+0x64>
 801ebc8:	6823      	ldr	r3, [r4, #0]
 801ebca:	781a      	ldrb	r2, [r3, #0]
 801ebcc:	5cba      	ldrb	r2, [r7, r2]
 801ebce:	0712      	lsls	r2, r2, #28
 801ebd0:	d401      	bmi.n	801ebd6 <__ssvfiscanf_r+0x52>
 801ebd2:	462a      	mov	r2, r5
 801ebd4:	e7eb      	b.n	801ebae <__ssvfiscanf_r+0x2a>
 801ebd6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801ebd8:	3201      	adds	r2, #1
 801ebda:	9245      	str	r2, [sp, #276]	; 0x114
 801ebdc:	6862      	ldr	r2, [r4, #4]
 801ebde:	3301      	adds	r3, #1
 801ebe0:	3a01      	subs	r2, #1
 801ebe2:	6062      	str	r2, [r4, #4]
 801ebe4:	6023      	str	r3, [r4, #0]
 801ebe6:	e7ec      	b.n	801ebc2 <__ssvfiscanf_r+0x3e>
 801ebe8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801ebea:	4621      	mov	r1, r4
 801ebec:	4630      	mov	r0, r6
 801ebee:	4798      	blx	r3
 801ebf0:	2800      	cmp	r0, #0
 801ebf2:	d0e9      	beq.n	801ebc8 <__ssvfiscanf_r+0x44>
 801ebf4:	e7ed      	b.n	801ebd2 <__ssvfiscanf_r+0x4e>
 801ebf6:	2b25      	cmp	r3, #37	; 0x25
 801ebf8:	d012      	beq.n	801ec20 <__ssvfiscanf_r+0x9c>
 801ebfa:	469a      	mov	sl, r3
 801ebfc:	6863      	ldr	r3, [r4, #4]
 801ebfe:	2b00      	cmp	r3, #0
 801ec00:	f340 8091 	ble.w	801ed26 <__ssvfiscanf_r+0x1a2>
 801ec04:	6822      	ldr	r2, [r4, #0]
 801ec06:	7813      	ldrb	r3, [r2, #0]
 801ec08:	4553      	cmp	r3, sl
 801ec0a:	f040 812e 	bne.w	801ee6a <__ssvfiscanf_r+0x2e6>
 801ec0e:	6863      	ldr	r3, [r4, #4]
 801ec10:	3b01      	subs	r3, #1
 801ec12:	6063      	str	r3, [r4, #4]
 801ec14:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801ec16:	3201      	adds	r2, #1
 801ec18:	3301      	adds	r3, #1
 801ec1a:	6022      	str	r2, [r4, #0]
 801ec1c:	9345      	str	r3, [sp, #276]	; 0x114
 801ec1e:	e7d8      	b.n	801ebd2 <__ssvfiscanf_r+0x4e>
 801ec20:	9141      	str	r1, [sp, #260]	; 0x104
 801ec22:	9143      	str	r1, [sp, #268]	; 0x10c
 801ec24:	7853      	ldrb	r3, [r2, #1]
 801ec26:	2b2a      	cmp	r3, #42	; 0x2a
 801ec28:	bf02      	ittt	eq
 801ec2a:	2310      	moveq	r3, #16
 801ec2c:	1c95      	addeq	r5, r2, #2
 801ec2e:	9341      	streq	r3, [sp, #260]	; 0x104
 801ec30:	220a      	movs	r2, #10
 801ec32:	46aa      	mov	sl, r5
 801ec34:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801ec38:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801ec3c:	2b09      	cmp	r3, #9
 801ec3e:	d91c      	bls.n	801ec7a <__ssvfiscanf_r+0xf6>
 801ec40:	487e      	ldr	r0, [pc, #504]	; (801ee3c <__ssvfiscanf_r+0x2b8>)
 801ec42:	2203      	movs	r2, #3
 801ec44:	f7e1 fb74 	bl	8000330 <memchr>
 801ec48:	b138      	cbz	r0, 801ec5a <__ssvfiscanf_r+0xd6>
 801ec4a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801ec4c:	eba0 0009 	sub.w	r0, r0, r9
 801ec50:	2301      	movs	r3, #1
 801ec52:	4083      	lsls	r3, r0
 801ec54:	4313      	orrs	r3, r2
 801ec56:	9341      	str	r3, [sp, #260]	; 0x104
 801ec58:	4655      	mov	r5, sl
 801ec5a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801ec5e:	2b78      	cmp	r3, #120	; 0x78
 801ec60:	d806      	bhi.n	801ec70 <__ssvfiscanf_r+0xec>
 801ec62:	2b57      	cmp	r3, #87	; 0x57
 801ec64:	d810      	bhi.n	801ec88 <__ssvfiscanf_r+0x104>
 801ec66:	2b25      	cmp	r3, #37	; 0x25
 801ec68:	d0c7      	beq.n	801ebfa <__ssvfiscanf_r+0x76>
 801ec6a:	d857      	bhi.n	801ed1c <__ssvfiscanf_r+0x198>
 801ec6c:	2b00      	cmp	r3, #0
 801ec6e:	d065      	beq.n	801ed3c <__ssvfiscanf_r+0x1b8>
 801ec70:	2303      	movs	r3, #3
 801ec72:	9347      	str	r3, [sp, #284]	; 0x11c
 801ec74:	230a      	movs	r3, #10
 801ec76:	9342      	str	r3, [sp, #264]	; 0x108
 801ec78:	e076      	b.n	801ed68 <__ssvfiscanf_r+0x1e4>
 801ec7a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801ec7c:	fb02 1103 	mla	r1, r2, r3, r1
 801ec80:	3930      	subs	r1, #48	; 0x30
 801ec82:	9143      	str	r1, [sp, #268]	; 0x10c
 801ec84:	4655      	mov	r5, sl
 801ec86:	e7d4      	b.n	801ec32 <__ssvfiscanf_r+0xae>
 801ec88:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801ec8c:	2a20      	cmp	r2, #32
 801ec8e:	d8ef      	bhi.n	801ec70 <__ssvfiscanf_r+0xec>
 801ec90:	a101      	add	r1, pc, #4	; (adr r1, 801ec98 <__ssvfiscanf_r+0x114>)
 801ec92:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801ec96:	bf00      	nop
 801ec98:	0801ed4b 	.word	0x0801ed4b
 801ec9c:	0801ec71 	.word	0x0801ec71
 801eca0:	0801ec71 	.word	0x0801ec71
 801eca4:	0801eda9 	.word	0x0801eda9
 801eca8:	0801ec71 	.word	0x0801ec71
 801ecac:	0801ec71 	.word	0x0801ec71
 801ecb0:	0801ec71 	.word	0x0801ec71
 801ecb4:	0801ec71 	.word	0x0801ec71
 801ecb8:	0801ec71 	.word	0x0801ec71
 801ecbc:	0801ec71 	.word	0x0801ec71
 801ecc0:	0801ec71 	.word	0x0801ec71
 801ecc4:	0801edbf 	.word	0x0801edbf
 801ecc8:	0801eda5 	.word	0x0801eda5
 801eccc:	0801ed23 	.word	0x0801ed23
 801ecd0:	0801ed23 	.word	0x0801ed23
 801ecd4:	0801ed23 	.word	0x0801ed23
 801ecd8:	0801ec71 	.word	0x0801ec71
 801ecdc:	0801ed61 	.word	0x0801ed61
 801ece0:	0801ec71 	.word	0x0801ec71
 801ece4:	0801ec71 	.word	0x0801ec71
 801ece8:	0801ec71 	.word	0x0801ec71
 801ecec:	0801ec71 	.word	0x0801ec71
 801ecf0:	0801edcf 	.word	0x0801edcf
 801ecf4:	0801ed9d 	.word	0x0801ed9d
 801ecf8:	0801ed43 	.word	0x0801ed43
 801ecfc:	0801ec71 	.word	0x0801ec71
 801ed00:	0801ec71 	.word	0x0801ec71
 801ed04:	0801edcb 	.word	0x0801edcb
 801ed08:	0801ec71 	.word	0x0801ec71
 801ed0c:	0801eda5 	.word	0x0801eda5
 801ed10:	0801ec71 	.word	0x0801ec71
 801ed14:	0801ec71 	.word	0x0801ec71
 801ed18:	0801ed4b 	.word	0x0801ed4b
 801ed1c:	3b45      	subs	r3, #69	; 0x45
 801ed1e:	2b02      	cmp	r3, #2
 801ed20:	d8a6      	bhi.n	801ec70 <__ssvfiscanf_r+0xec>
 801ed22:	2305      	movs	r3, #5
 801ed24:	e01f      	b.n	801ed66 <__ssvfiscanf_r+0x1e2>
 801ed26:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801ed28:	4621      	mov	r1, r4
 801ed2a:	4630      	mov	r0, r6
 801ed2c:	4798      	blx	r3
 801ed2e:	2800      	cmp	r0, #0
 801ed30:	f43f af68 	beq.w	801ec04 <__ssvfiscanf_r+0x80>
 801ed34:	9844      	ldr	r0, [sp, #272]	; 0x110
 801ed36:	2800      	cmp	r0, #0
 801ed38:	f040 808d 	bne.w	801ee56 <__ssvfiscanf_r+0x2d2>
 801ed3c:	f04f 30ff 	mov.w	r0, #4294967295
 801ed40:	e08f      	b.n	801ee62 <__ssvfiscanf_r+0x2de>
 801ed42:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801ed44:	f042 0220 	orr.w	r2, r2, #32
 801ed48:	9241      	str	r2, [sp, #260]	; 0x104
 801ed4a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801ed4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ed50:	9241      	str	r2, [sp, #260]	; 0x104
 801ed52:	2210      	movs	r2, #16
 801ed54:	2b6f      	cmp	r3, #111	; 0x6f
 801ed56:	9242      	str	r2, [sp, #264]	; 0x108
 801ed58:	bf34      	ite	cc
 801ed5a:	2303      	movcc	r3, #3
 801ed5c:	2304      	movcs	r3, #4
 801ed5e:	e002      	b.n	801ed66 <__ssvfiscanf_r+0x1e2>
 801ed60:	2300      	movs	r3, #0
 801ed62:	9342      	str	r3, [sp, #264]	; 0x108
 801ed64:	2303      	movs	r3, #3
 801ed66:	9347      	str	r3, [sp, #284]	; 0x11c
 801ed68:	6863      	ldr	r3, [r4, #4]
 801ed6a:	2b00      	cmp	r3, #0
 801ed6c:	dd3d      	ble.n	801edea <__ssvfiscanf_r+0x266>
 801ed6e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801ed70:	0659      	lsls	r1, r3, #25
 801ed72:	d404      	bmi.n	801ed7e <__ssvfiscanf_r+0x1fa>
 801ed74:	6823      	ldr	r3, [r4, #0]
 801ed76:	781a      	ldrb	r2, [r3, #0]
 801ed78:	5cba      	ldrb	r2, [r7, r2]
 801ed7a:	0712      	lsls	r2, r2, #28
 801ed7c:	d43c      	bmi.n	801edf8 <__ssvfiscanf_r+0x274>
 801ed7e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801ed80:	2b02      	cmp	r3, #2
 801ed82:	dc4b      	bgt.n	801ee1c <__ssvfiscanf_r+0x298>
 801ed84:	466b      	mov	r3, sp
 801ed86:	4622      	mov	r2, r4
 801ed88:	a941      	add	r1, sp, #260	; 0x104
 801ed8a:	4630      	mov	r0, r6
 801ed8c:	f000 f872 	bl	801ee74 <_scanf_chars>
 801ed90:	2801      	cmp	r0, #1
 801ed92:	d06a      	beq.n	801ee6a <__ssvfiscanf_r+0x2e6>
 801ed94:	2802      	cmp	r0, #2
 801ed96:	f47f af1c 	bne.w	801ebd2 <__ssvfiscanf_r+0x4e>
 801ed9a:	e7cb      	b.n	801ed34 <__ssvfiscanf_r+0x1b0>
 801ed9c:	2308      	movs	r3, #8
 801ed9e:	9342      	str	r3, [sp, #264]	; 0x108
 801eda0:	2304      	movs	r3, #4
 801eda2:	e7e0      	b.n	801ed66 <__ssvfiscanf_r+0x1e2>
 801eda4:	220a      	movs	r2, #10
 801eda6:	e7d5      	b.n	801ed54 <__ssvfiscanf_r+0x1d0>
 801eda8:	4629      	mov	r1, r5
 801edaa:	4640      	mov	r0, r8
 801edac:	f000 fa5e 	bl	801f26c <__sccl>
 801edb0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801edb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801edb6:	9341      	str	r3, [sp, #260]	; 0x104
 801edb8:	4605      	mov	r5, r0
 801edba:	2301      	movs	r3, #1
 801edbc:	e7d3      	b.n	801ed66 <__ssvfiscanf_r+0x1e2>
 801edbe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801edc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801edc4:	9341      	str	r3, [sp, #260]	; 0x104
 801edc6:	2300      	movs	r3, #0
 801edc8:	e7cd      	b.n	801ed66 <__ssvfiscanf_r+0x1e2>
 801edca:	2302      	movs	r3, #2
 801edcc:	e7cb      	b.n	801ed66 <__ssvfiscanf_r+0x1e2>
 801edce:	9841      	ldr	r0, [sp, #260]	; 0x104
 801edd0:	06c3      	lsls	r3, r0, #27
 801edd2:	f53f aefe 	bmi.w	801ebd2 <__ssvfiscanf_r+0x4e>
 801edd6:	9b00      	ldr	r3, [sp, #0]
 801edd8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801edda:	1d19      	adds	r1, r3, #4
 801eddc:	9100      	str	r1, [sp, #0]
 801edde:	681b      	ldr	r3, [r3, #0]
 801ede0:	07c0      	lsls	r0, r0, #31
 801ede2:	bf4c      	ite	mi
 801ede4:	801a      	strhmi	r2, [r3, #0]
 801ede6:	601a      	strpl	r2, [r3, #0]
 801ede8:	e6f3      	b.n	801ebd2 <__ssvfiscanf_r+0x4e>
 801edea:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801edec:	4621      	mov	r1, r4
 801edee:	4630      	mov	r0, r6
 801edf0:	4798      	blx	r3
 801edf2:	2800      	cmp	r0, #0
 801edf4:	d0bb      	beq.n	801ed6e <__ssvfiscanf_r+0x1ea>
 801edf6:	e79d      	b.n	801ed34 <__ssvfiscanf_r+0x1b0>
 801edf8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801edfa:	3201      	adds	r2, #1
 801edfc:	9245      	str	r2, [sp, #276]	; 0x114
 801edfe:	6862      	ldr	r2, [r4, #4]
 801ee00:	3a01      	subs	r2, #1
 801ee02:	2a00      	cmp	r2, #0
 801ee04:	6062      	str	r2, [r4, #4]
 801ee06:	dd02      	ble.n	801ee0e <__ssvfiscanf_r+0x28a>
 801ee08:	3301      	adds	r3, #1
 801ee0a:	6023      	str	r3, [r4, #0]
 801ee0c:	e7b2      	b.n	801ed74 <__ssvfiscanf_r+0x1f0>
 801ee0e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801ee10:	4621      	mov	r1, r4
 801ee12:	4630      	mov	r0, r6
 801ee14:	4798      	blx	r3
 801ee16:	2800      	cmp	r0, #0
 801ee18:	d0ac      	beq.n	801ed74 <__ssvfiscanf_r+0x1f0>
 801ee1a:	e78b      	b.n	801ed34 <__ssvfiscanf_r+0x1b0>
 801ee1c:	2b04      	cmp	r3, #4
 801ee1e:	dc0f      	bgt.n	801ee40 <__ssvfiscanf_r+0x2bc>
 801ee20:	466b      	mov	r3, sp
 801ee22:	4622      	mov	r2, r4
 801ee24:	a941      	add	r1, sp, #260	; 0x104
 801ee26:	4630      	mov	r0, r6
 801ee28:	f000 f87e 	bl	801ef28 <_scanf_i>
 801ee2c:	e7b0      	b.n	801ed90 <__ssvfiscanf_r+0x20c>
 801ee2e:	bf00      	nop
 801ee30:	0801ead1 	.word	0x0801ead1
 801ee34:	0801eb4b 	.word	0x0801eb4b
 801ee38:	08020bf9 	.word	0x08020bf9
 801ee3c:	08020cff 	.word	0x08020cff
 801ee40:	4b0b      	ldr	r3, [pc, #44]	; (801ee70 <__ssvfiscanf_r+0x2ec>)
 801ee42:	2b00      	cmp	r3, #0
 801ee44:	f43f aec5 	beq.w	801ebd2 <__ssvfiscanf_r+0x4e>
 801ee48:	466b      	mov	r3, sp
 801ee4a:	4622      	mov	r2, r4
 801ee4c:	a941      	add	r1, sp, #260	; 0x104
 801ee4e:	4630      	mov	r0, r6
 801ee50:	f7fc fefc 	bl	801bc4c <_scanf_float>
 801ee54:	e79c      	b.n	801ed90 <__ssvfiscanf_r+0x20c>
 801ee56:	89a3      	ldrh	r3, [r4, #12]
 801ee58:	f013 0f40 	tst.w	r3, #64	; 0x40
 801ee5c:	bf18      	it	ne
 801ee5e:	f04f 30ff 	movne.w	r0, #4294967295
 801ee62:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801ee66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ee6a:	9844      	ldr	r0, [sp, #272]	; 0x110
 801ee6c:	e7f9      	b.n	801ee62 <__ssvfiscanf_r+0x2de>
 801ee6e:	bf00      	nop
 801ee70:	0801bc4d 	.word	0x0801bc4d

0801ee74 <_scanf_chars>:
 801ee74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ee78:	4615      	mov	r5, r2
 801ee7a:	688a      	ldr	r2, [r1, #8]
 801ee7c:	4680      	mov	r8, r0
 801ee7e:	460c      	mov	r4, r1
 801ee80:	b932      	cbnz	r2, 801ee90 <_scanf_chars+0x1c>
 801ee82:	698a      	ldr	r2, [r1, #24]
 801ee84:	2a00      	cmp	r2, #0
 801ee86:	bf0c      	ite	eq
 801ee88:	2201      	moveq	r2, #1
 801ee8a:	f04f 32ff 	movne.w	r2, #4294967295
 801ee8e:	608a      	str	r2, [r1, #8]
 801ee90:	6822      	ldr	r2, [r4, #0]
 801ee92:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801ef24 <_scanf_chars+0xb0>
 801ee96:	06d1      	lsls	r1, r2, #27
 801ee98:	bf5f      	itttt	pl
 801ee9a:	681a      	ldrpl	r2, [r3, #0]
 801ee9c:	1d11      	addpl	r1, r2, #4
 801ee9e:	6019      	strpl	r1, [r3, #0]
 801eea0:	6816      	ldrpl	r6, [r2, #0]
 801eea2:	2700      	movs	r7, #0
 801eea4:	69a0      	ldr	r0, [r4, #24]
 801eea6:	b188      	cbz	r0, 801eecc <_scanf_chars+0x58>
 801eea8:	2801      	cmp	r0, #1
 801eeaa:	d107      	bne.n	801eebc <_scanf_chars+0x48>
 801eeac:	682a      	ldr	r2, [r5, #0]
 801eeae:	7811      	ldrb	r1, [r2, #0]
 801eeb0:	6962      	ldr	r2, [r4, #20]
 801eeb2:	5c52      	ldrb	r2, [r2, r1]
 801eeb4:	b952      	cbnz	r2, 801eecc <_scanf_chars+0x58>
 801eeb6:	2f00      	cmp	r7, #0
 801eeb8:	d031      	beq.n	801ef1e <_scanf_chars+0xaa>
 801eeba:	e022      	b.n	801ef02 <_scanf_chars+0x8e>
 801eebc:	2802      	cmp	r0, #2
 801eebe:	d120      	bne.n	801ef02 <_scanf_chars+0x8e>
 801eec0:	682b      	ldr	r3, [r5, #0]
 801eec2:	781b      	ldrb	r3, [r3, #0]
 801eec4:	f819 3003 	ldrb.w	r3, [r9, r3]
 801eec8:	071b      	lsls	r3, r3, #28
 801eeca:	d41a      	bmi.n	801ef02 <_scanf_chars+0x8e>
 801eecc:	6823      	ldr	r3, [r4, #0]
 801eece:	06da      	lsls	r2, r3, #27
 801eed0:	bf5e      	ittt	pl
 801eed2:	682b      	ldrpl	r3, [r5, #0]
 801eed4:	781b      	ldrbpl	r3, [r3, #0]
 801eed6:	f806 3b01 	strbpl.w	r3, [r6], #1
 801eeda:	682a      	ldr	r2, [r5, #0]
 801eedc:	686b      	ldr	r3, [r5, #4]
 801eede:	3201      	adds	r2, #1
 801eee0:	602a      	str	r2, [r5, #0]
 801eee2:	68a2      	ldr	r2, [r4, #8]
 801eee4:	3b01      	subs	r3, #1
 801eee6:	3a01      	subs	r2, #1
 801eee8:	606b      	str	r3, [r5, #4]
 801eeea:	3701      	adds	r7, #1
 801eeec:	60a2      	str	r2, [r4, #8]
 801eeee:	b142      	cbz	r2, 801ef02 <_scanf_chars+0x8e>
 801eef0:	2b00      	cmp	r3, #0
 801eef2:	dcd7      	bgt.n	801eea4 <_scanf_chars+0x30>
 801eef4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801eef8:	4629      	mov	r1, r5
 801eefa:	4640      	mov	r0, r8
 801eefc:	4798      	blx	r3
 801eefe:	2800      	cmp	r0, #0
 801ef00:	d0d0      	beq.n	801eea4 <_scanf_chars+0x30>
 801ef02:	6823      	ldr	r3, [r4, #0]
 801ef04:	f013 0310 	ands.w	r3, r3, #16
 801ef08:	d105      	bne.n	801ef16 <_scanf_chars+0xa2>
 801ef0a:	68e2      	ldr	r2, [r4, #12]
 801ef0c:	3201      	adds	r2, #1
 801ef0e:	60e2      	str	r2, [r4, #12]
 801ef10:	69a2      	ldr	r2, [r4, #24]
 801ef12:	b102      	cbz	r2, 801ef16 <_scanf_chars+0xa2>
 801ef14:	7033      	strb	r3, [r6, #0]
 801ef16:	6923      	ldr	r3, [r4, #16]
 801ef18:	443b      	add	r3, r7
 801ef1a:	6123      	str	r3, [r4, #16]
 801ef1c:	2000      	movs	r0, #0
 801ef1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ef22:	bf00      	nop
 801ef24:	08020bf9 	.word	0x08020bf9

0801ef28 <_scanf_i>:
 801ef28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef2c:	4698      	mov	r8, r3
 801ef2e:	4b74      	ldr	r3, [pc, #464]	; (801f100 <_scanf_i+0x1d8>)
 801ef30:	460c      	mov	r4, r1
 801ef32:	4682      	mov	sl, r0
 801ef34:	4616      	mov	r6, r2
 801ef36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801ef3a:	b087      	sub	sp, #28
 801ef3c:	ab03      	add	r3, sp, #12
 801ef3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801ef42:	4b70      	ldr	r3, [pc, #448]	; (801f104 <_scanf_i+0x1dc>)
 801ef44:	69a1      	ldr	r1, [r4, #24]
 801ef46:	4a70      	ldr	r2, [pc, #448]	; (801f108 <_scanf_i+0x1e0>)
 801ef48:	2903      	cmp	r1, #3
 801ef4a:	bf18      	it	ne
 801ef4c:	461a      	movne	r2, r3
 801ef4e:	68a3      	ldr	r3, [r4, #8]
 801ef50:	9201      	str	r2, [sp, #4]
 801ef52:	1e5a      	subs	r2, r3, #1
 801ef54:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801ef58:	bf88      	it	hi
 801ef5a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801ef5e:	4627      	mov	r7, r4
 801ef60:	bf82      	ittt	hi
 801ef62:	eb03 0905 	addhi.w	r9, r3, r5
 801ef66:	f240 135d 	movwhi	r3, #349	; 0x15d
 801ef6a:	60a3      	strhi	r3, [r4, #8]
 801ef6c:	f857 3b1c 	ldr.w	r3, [r7], #28
 801ef70:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801ef74:	bf98      	it	ls
 801ef76:	f04f 0900 	movls.w	r9, #0
 801ef7a:	6023      	str	r3, [r4, #0]
 801ef7c:	463d      	mov	r5, r7
 801ef7e:	f04f 0b00 	mov.w	fp, #0
 801ef82:	6831      	ldr	r1, [r6, #0]
 801ef84:	ab03      	add	r3, sp, #12
 801ef86:	7809      	ldrb	r1, [r1, #0]
 801ef88:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801ef8c:	2202      	movs	r2, #2
 801ef8e:	f7e1 f9cf 	bl	8000330 <memchr>
 801ef92:	b328      	cbz	r0, 801efe0 <_scanf_i+0xb8>
 801ef94:	f1bb 0f01 	cmp.w	fp, #1
 801ef98:	d159      	bne.n	801f04e <_scanf_i+0x126>
 801ef9a:	6862      	ldr	r2, [r4, #4]
 801ef9c:	b92a      	cbnz	r2, 801efaa <_scanf_i+0x82>
 801ef9e:	6822      	ldr	r2, [r4, #0]
 801efa0:	2308      	movs	r3, #8
 801efa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801efa6:	6063      	str	r3, [r4, #4]
 801efa8:	6022      	str	r2, [r4, #0]
 801efaa:	6822      	ldr	r2, [r4, #0]
 801efac:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801efb0:	6022      	str	r2, [r4, #0]
 801efb2:	68a2      	ldr	r2, [r4, #8]
 801efb4:	1e51      	subs	r1, r2, #1
 801efb6:	60a1      	str	r1, [r4, #8]
 801efb8:	b192      	cbz	r2, 801efe0 <_scanf_i+0xb8>
 801efba:	6832      	ldr	r2, [r6, #0]
 801efbc:	1c51      	adds	r1, r2, #1
 801efbe:	6031      	str	r1, [r6, #0]
 801efc0:	7812      	ldrb	r2, [r2, #0]
 801efc2:	f805 2b01 	strb.w	r2, [r5], #1
 801efc6:	6872      	ldr	r2, [r6, #4]
 801efc8:	3a01      	subs	r2, #1
 801efca:	2a00      	cmp	r2, #0
 801efcc:	6072      	str	r2, [r6, #4]
 801efce:	dc07      	bgt.n	801efe0 <_scanf_i+0xb8>
 801efd0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801efd4:	4631      	mov	r1, r6
 801efd6:	4650      	mov	r0, sl
 801efd8:	4790      	blx	r2
 801efda:	2800      	cmp	r0, #0
 801efdc:	f040 8085 	bne.w	801f0ea <_scanf_i+0x1c2>
 801efe0:	f10b 0b01 	add.w	fp, fp, #1
 801efe4:	f1bb 0f03 	cmp.w	fp, #3
 801efe8:	d1cb      	bne.n	801ef82 <_scanf_i+0x5a>
 801efea:	6863      	ldr	r3, [r4, #4]
 801efec:	b90b      	cbnz	r3, 801eff2 <_scanf_i+0xca>
 801efee:	230a      	movs	r3, #10
 801eff0:	6063      	str	r3, [r4, #4]
 801eff2:	6863      	ldr	r3, [r4, #4]
 801eff4:	4945      	ldr	r1, [pc, #276]	; (801f10c <_scanf_i+0x1e4>)
 801eff6:	6960      	ldr	r0, [r4, #20]
 801eff8:	1ac9      	subs	r1, r1, r3
 801effa:	f000 f937 	bl	801f26c <__sccl>
 801effe:	f04f 0b00 	mov.w	fp, #0
 801f002:	68a3      	ldr	r3, [r4, #8]
 801f004:	6822      	ldr	r2, [r4, #0]
 801f006:	2b00      	cmp	r3, #0
 801f008:	d03d      	beq.n	801f086 <_scanf_i+0x15e>
 801f00a:	6831      	ldr	r1, [r6, #0]
 801f00c:	6960      	ldr	r0, [r4, #20]
 801f00e:	f891 c000 	ldrb.w	ip, [r1]
 801f012:	f810 000c 	ldrb.w	r0, [r0, ip]
 801f016:	2800      	cmp	r0, #0
 801f018:	d035      	beq.n	801f086 <_scanf_i+0x15e>
 801f01a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801f01e:	d124      	bne.n	801f06a <_scanf_i+0x142>
 801f020:	0510      	lsls	r0, r2, #20
 801f022:	d522      	bpl.n	801f06a <_scanf_i+0x142>
 801f024:	f10b 0b01 	add.w	fp, fp, #1
 801f028:	f1b9 0f00 	cmp.w	r9, #0
 801f02c:	d003      	beq.n	801f036 <_scanf_i+0x10e>
 801f02e:	3301      	adds	r3, #1
 801f030:	f109 39ff 	add.w	r9, r9, #4294967295
 801f034:	60a3      	str	r3, [r4, #8]
 801f036:	6873      	ldr	r3, [r6, #4]
 801f038:	3b01      	subs	r3, #1
 801f03a:	2b00      	cmp	r3, #0
 801f03c:	6073      	str	r3, [r6, #4]
 801f03e:	dd1b      	ble.n	801f078 <_scanf_i+0x150>
 801f040:	6833      	ldr	r3, [r6, #0]
 801f042:	3301      	adds	r3, #1
 801f044:	6033      	str	r3, [r6, #0]
 801f046:	68a3      	ldr	r3, [r4, #8]
 801f048:	3b01      	subs	r3, #1
 801f04a:	60a3      	str	r3, [r4, #8]
 801f04c:	e7d9      	b.n	801f002 <_scanf_i+0xda>
 801f04e:	f1bb 0f02 	cmp.w	fp, #2
 801f052:	d1ae      	bne.n	801efb2 <_scanf_i+0x8a>
 801f054:	6822      	ldr	r2, [r4, #0]
 801f056:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801f05a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801f05e:	d1bf      	bne.n	801efe0 <_scanf_i+0xb8>
 801f060:	2310      	movs	r3, #16
 801f062:	6063      	str	r3, [r4, #4]
 801f064:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801f068:	e7a2      	b.n	801efb0 <_scanf_i+0x88>
 801f06a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801f06e:	6022      	str	r2, [r4, #0]
 801f070:	780b      	ldrb	r3, [r1, #0]
 801f072:	f805 3b01 	strb.w	r3, [r5], #1
 801f076:	e7de      	b.n	801f036 <_scanf_i+0x10e>
 801f078:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801f07c:	4631      	mov	r1, r6
 801f07e:	4650      	mov	r0, sl
 801f080:	4798      	blx	r3
 801f082:	2800      	cmp	r0, #0
 801f084:	d0df      	beq.n	801f046 <_scanf_i+0x11e>
 801f086:	6823      	ldr	r3, [r4, #0]
 801f088:	05d9      	lsls	r1, r3, #23
 801f08a:	d50d      	bpl.n	801f0a8 <_scanf_i+0x180>
 801f08c:	42bd      	cmp	r5, r7
 801f08e:	d909      	bls.n	801f0a4 <_scanf_i+0x17c>
 801f090:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801f094:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f098:	4632      	mov	r2, r6
 801f09a:	4650      	mov	r0, sl
 801f09c:	4798      	blx	r3
 801f09e:	f105 39ff 	add.w	r9, r5, #4294967295
 801f0a2:	464d      	mov	r5, r9
 801f0a4:	42bd      	cmp	r5, r7
 801f0a6:	d028      	beq.n	801f0fa <_scanf_i+0x1d2>
 801f0a8:	6822      	ldr	r2, [r4, #0]
 801f0aa:	f012 0210 	ands.w	r2, r2, #16
 801f0ae:	d113      	bne.n	801f0d8 <_scanf_i+0x1b0>
 801f0b0:	702a      	strb	r2, [r5, #0]
 801f0b2:	6863      	ldr	r3, [r4, #4]
 801f0b4:	9e01      	ldr	r6, [sp, #4]
 801f0b6:	4639      	mov	r1, r7
 801f0b8:	4650      	mov	r0, sl
 801f0ba:	47b0      	blx	r6
 801f0bc:	f8d8 3000 	ldr.w	r3, [r8]
 801f0c0:	6821      	ldr	r1, [r4, #0]
 801f0c2:	1d1a      	adds	r2, r3, #4
 801f0c4:	f8c8 2000 	str.w	r2, [r8]
 801f0c8:	f011 0f20 	tst.w	r1, #32
 801f0cc:	681b      	ldr	r3, [r3, #0]
 801f0ce:	d00f      	beq.n	801f0f0 <_scanf_i+0x1c8>
 801f0d0:	6018      	str	r0, [r3, #0]
 801f0d2:	68e3      	ldr	r3, [r4, #12]
 801f0d4:	3301      	adds	r3, #1
 801f0d6:	60e3      	str	r3, [r4, #12]
 801f0d8:	6923      	ldr	r3, [r4, #16]
 801f0da:	1bed      	subs	r5, r5, r7
 801f0dc:	445d      	add	r5, fp
 801f0de:	442b      	add	r3, r5
 801f0e0:	6123      	str	r3, [r4, #16]
 801f0e2:	2000      	movs	r0, #0
 801f0e4:	b007      	add	sp, #28
 801f0e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0ea:	f04f 0b00 	mov.w	fp, #0
 801f0ee:	e7ca      	b.n	801f086 <_scanf_i+0x15e>
 801f0f0:	07ca      	lsls	r2, r1, #31
 801f0f2:	bf4c      	ite	mi
 801f0f4:	8018      	strhmi	r0, [r3, #0]
 801f0f6:	6018      	strpl	r0, [r3, #0]
 801f0f8:	e7eb      	b.n	801f0d2 <_scanf_i+0x1aa>
 801f0fa:	2001      	movs	r0, #1
 801f0fc:	e7f2      	b.n	801f0e4 <_scanf_i+0x1bc>
 801f0fe:	bf00      	nop
 801f100:	08020478 	.word	0x08020478
 801f104:	0801fc5d 	.word	0x0801fc5d
 801f108:	0801e81d 	.word	0x0801e81d
 801f10c:	08020d1a 	.word	0x08020d1a

0801f110 <__sflush_r>:
 801f110:	898a      	ldrh	r2, [r1, #12]
 801f112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f116:	4605      	mov	r5, r0
 801f118:	0710      	lsls	r0, r2, #28
 801f11a:	460c      	mov	r4, r1
 801f11c:	d458      	bmi.n	801f1d0 <__sflush_r+0xc0>
 801f11e:	684b      	ldr	r3, [r1, #4]
 801f120:	2b00      	cmp	r3, #0
 801f122:	dc05      	bgt.n	801f130 <__sflush_r+0x20>
 801f124:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801f126:	2b00      	cmp	r3, #0
 801f128:	dc02      	bgt.n	801f130 <__sflush_r+0x20>
 801f12a:	2000      	movs	r0, #0
 801f12c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f130:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f132:	2e00      	cmp	r6, #0
 801f134:	d0f9      	beq.n	801f12a <__sflush_r+0x1a>
 801f136:	2300      	movs	r3, #0
 801f138:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801f13c:	682f      	ldr	r7, [r5, #0]
 801f13e:	6a21      	ldr	r1, [r4, #32]
 801f140:	602b      	str	r3, [r5, #0]
 801f142:	d032      	beq.n	801f1aa <__sflush_r+0x9a>
 801f144:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801f146:	89a3      	ldrh	r3, [r4, #12]
 801f148:	075a      	lsls	r2, r3, #29
 801f14a:	d505      	bpl.n	801f158 <__sflush_r+0x48>
 801f14c:	6863      	ldr	r3, [r4, #4]
 801f14e:	1ac0      	subs	r0, r0, r3
 801f150:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f152:	b10b      	cbz	r3, 801f158 <__sflush_r+0x48>
 801f154:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f156:	1ac0      	subs	r0, r0, r3
 801f158:	2300      	movs	r3, #0
 801f15a:	4602      	mov	r2, r0
 801f15c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f15e:	6a21      	ldr	r1, [r4, #32]
 801f160:	4628      	mov	r0, r5
 801f162:	47b0      	blx	r6
 801f164:	1c43      	adds	r3, r0, #1
 801f166:	89a3      	ldrh	r3, [r4, #12]
 801f168:	d106      	bne.n	801f178 <__sflush_r+0x68>
 801f16a:	6829      	ldr	r1, [r5, #0]
 801f16c:	291d      	cmp	r1, #29
 801f16e:	d82b      	bhi.n	801f1c8 <__sflush_r+0xb8>
 801f170:	4a29      	ldr	r2, [pc, #164]	; (801f218 <__sflush_r+0x108>)
 801f172:	410a      	asrs	r2, r1
 801f174:	07d6      	lsls	r6, r2, #31
 801f176:	d427      	bmi.n	801f1c8 <__sflush_r+0xb8>
 801f178:	2200      	movs	r2, #0
 801f17a:	6062      	str	r2, [r4, #4]
 801f17c:	04d9      	lsls	r1, r3, #19
 801f17e:	6922      	ldr	r2, [r4, #16]
 801f180:	6022      	str	r2, [r4, #0]
 801f182:	d504      	bpl.n	801f18e <__sflush_r+0x7e>
 801f184:	1c42      	adds	r2, r0, #1
 801f186:	d101      	bne.n	801f18c <__sflush_r+0x7c>
 801f188:	682b      	ldr	r3, [r5, #0]
 801f18a:	b903      	cbnz	r3, 801f18e <__sflush_r+0x7e>
 801f18c:	6560      	str	r0, [r4, #84]	; 0x54
 801f18e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f190:	602f      	str	r7, [r5, #0]
 801f192:	2900      	cmp	r1, #0
 801f194:	d0c9      	beq.n	801f12a <__sflush_r+0x1a>
 801f196:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f19a:	4299      	cmp	r1, r3
 801f19c:	d002      	beq.n	801f1a4 <__sflush_r+0x94>
 801f19e:	4628      	mov	r0, r5
 801f1a0:	f7fd ff3e 	bl	801d020 <_free_r>
 801f1a4:	2000      	movs	r0, #0
 801f1a6:	6360      	str	r0, [r4, #52]	; 0x34
 801f1a8:	e7c0      	b.n	801f12c <__sflush_r+0x1c>
 801f1aa:	2301      	movs	r3, #1
 801f1ac:	4628      	mov	r0, r5
 801f1ae:	47b0      	blx	r6
 801f1b0:	1c41      	adds	r1, r0, #1
 801f1b2:	d1c8      	bne.n	801f146 <__sflush_r+0x36>
 801f1b4:	682b      	ldr	r3, [r5, #0]
 801f1b6:	2b00      	cmp	r3, #0
 801f1b8:	d0c5      	beq.n	801f146 <__sflush_r+0x36>
 801f1ba:	2b1d      	cmp	r3, #29
 801f1bc:	d001      	beq.n	801f1c2 <__sflush_r+0xb2>
 801f1be:	2b16      	cmp	r3, #22
 801f1c0:	d101      	bne.n	801f1c6 <__sflush_r+0xb6>
 801f1c2:	602f      	str	r7, [r5, #0]
 801f1c4:	e7b1      	b.n	801f12a <__sflush_r+0x1a>
 801f1c6:	89a3      	ldrh	r3, [r4, #12]
 801f1c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f1cc:	81a3      	strh	r3, [r4, #12]
 801f1ce:	e7ad      	b.n	801f12c <__sflush_r+0x1c>
 801f1d0:	690f      	ldr	r7, [r1, #16]
 801f1d2:	2f00      	cmp	r7, #0
 801f1d4:	d0a9      	beq.n	801f12a <__sflush_r+0x1a>
 801f1d6:	0793      	lsls	r3, r2, #30
 801f1d8:	680e      	ldr	r6, [r1, #0]
 801f1da:	bf08      	it	eq
 801f1dc:	694b      	ldreq	r3, [r1, #20]
 801f1de:	600f      	str	r7, [r1, #0]
 801f1e0:	bf18      	it	ne
 801f1e2:	2300      	movne	r3, #0
 801f1e4:	eba6 0807 	sub.w	r8, r6, r7
 801f1e8:	608b      	str	r3, [r1, #8]
 801f1ea:	f1b8 0f00 	cmp.w	r8, #0
 801f1ee:	dd9c      	ble.n	801f12a <__sflush_r+0x1a>
 801f1f0:	6a21      	ldr	r1, [r4, #32]
 801f1f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801f1f4:	4643      	mov	r3, r8
 801f1f6:	463a      	mov	r2, r7
 801f1f8:	4628      	mov	r0, r5
 801f1fa:	47b0      	blx	r6
 801f1fc:	2800      	cmp	r0, #0
 801f1fe:	dc06      	bgt.n	801f20e <__sflush_r+0xfe>
 801f200:	89a3      	ldrh	r3, [r4, #12]
 801f202:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f206:	81a3      	strh	r3, [r4, #12]
 801f208:	f04f 30ff 	mov.w	r0, #4294967295
 801f20c:	e78e      	b.n	801f12c <__sflush_r+0x1c>
 801f20e:	4407      	add	r7, r0
 801f210:	eba8 0800 	sub.w	r8, r8, r0
 801f214:	e7e9      	b.n	801f1ea <__sflush_r+0xda>
 801f216:	bf00      	nop
 801f218:	dfbffffe 	.word	0xdfbffffe

0801f21c <_fflush_r>:
 801f21c:	b538      	push	{r3, r4, r5, lr}
 801f21e:	690b      	ldr	r3, [r1, #16]
 801f220:	4605      	mov	r5, r0
 801f222:	460c      	mov	r4, r1
 801f224:	b913      	cbnz	r3, 801f22c <_fflush_r+0x10>
 801f226:	2500      	movs	r5, #0
 801f228:	4628      	mov	r0, r5
 801f22a:	bd38      	pop	{r3, r4, r5, pc}
 801f22c:	b118      	cbz	r0, 801f236 <_fflush_r+0x1a>
 801f22e:	6a03      	ldr	r3, [r0, #32]
 801f230:	b90b      	cbnz	r3, 801f236 <_fflush_r+0x1a>
 801f232:	f7fc ff9b 	bl	801c16c <__sinit>
 801f236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f23a:	2b00      	cmp	r3, #0
 801f23c:	d0f3      	beq.n	801f226 <_fflush_r+0xa>
 801f23e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801f240:	07d0      	lsls	r0, r2, #31
 801f242:	d404      	bmi.n	801f24e <_fflush_r+0x32>
 801f244:	0599      	lsls	r1, r3, #22
 801f246:	d402      	bmi.n	801f24e <_fflush_r+0x32>
 801f248:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f24a:	f7fd f8d4 	bl	801c3f6 <__retarget_lock_acquire_recursive>
 801f24e:	4628      	mov	r0, r5
 801f250:	4621      	mov	r1, r4
 801f252:	f7ff ff5d 	bl	801f110 <__sflush_r>
 801f256:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f258:	07da      	lsls	r2, r3, #31
 801f25a:	4605      	mov	r5, r0
 801f25c:	d4e4      	bmi.n	801f228 <_fflush_r+0xc>
 801f25e:	89a3      	ldrh	r3, [r4, #12]
 801f260:	059b      	lsls	r3, r3, #22
 801f262:	d4e1      	bmi.n	801f228 <_fflush_r+0xc>
 801f264:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f266:	f7fd f8c7 	bl	801c3f8 <__retarget_lock_release_recursive>
 801f26a:	e7dd      	b.n	801f228 <_fflush_r+0xc>

0801f26c <__sccl>:
 801f26c:	b570      	push	{r4, r5, r6, lr}
 801f26e:	780b      	ldrb	r3, [r1, #0]
 801f270:	4604      	mov	r4, r0
 801f272:	2b5e      	cmp	r3, #94	; 0x5e
 801f274:	bf0b      	itete	eq
 801f276:	784b      	ldrbeq	r3, [r1, #1]
 801f278:	1c4a      	addne	r2, r1, #1
 801f27a:	1c8a      	addeq	r2, r1, #2
 801f27c:	2100      	movne	r1, #0
 801f27e:	bf08      	it	eq
 801f280:	2101      	moveq	r1, #1
 801f282:	3801      	subs	r0, #1
 801f284:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801f288:	f800 1f01 	strb.w	r1, [r0, #1]!
 801f28c:	42a8      	cmp	r0, r5
 801f28e:	d1fb      	bne.n	801f288 <__sccl+0x1c>
 801f290:	b90b      	cbnz	r3, 801f296 <__sccl+0x2a>
 801f292:	1e50      	subs	r0, r2, #1
 801f294:	bd70      	pop	{r4, r5, r6, pc}
 801f296:	f081 0101 	eor.w	r1, r1, #1
 801f29a:	54e1      	strb	r1, [r4, r3]
 801f29c:	4610      	mov	r0, r2
 801f29e:	4602      	mov	r2, r0
 801f2a0:	f812 5b01 	ldrb.w	r5, [r2], #1
 801f2a4:	2d2d      	cmp	r5, #45	; 0x2d
 801f2a6:	d005      	beq.n	801f2b4 <__sccl+0x48>
 801f2a8:	2d5d      	cmp	r5, #93	; 0x5d
 801f2aa:	d016      	beq.n	801f2da <__sccl+0x6e>
 801f2ac:	2d00      	cmp	r5, #0
 801f2ae:	d0f1      	beq.n	801f294 <__sccl+0x28>
 801f2b0:	462b      	mov	r3, r5
 801f2b2:	e7f2      	b.n	801f29a <__sccl+0x2e>
 801f2b4:	7846      	ldrb	r6, [r0, #1]
 801f2b6:	2e5d      	cmp	r6, #93	; 0x5d
 801f2b8:	d0fa      	beq.n	801f2b0 <__sccl+0x44>
 801f2ba:	42b3      	cmp	r3, r6
 801f2bc:	dcf8      	bgt.n	801f2b0 <__sccl+0x44>
 801f2be:	3002      	adds	r0, #2
 801f2c0:	461a      	mov	r2, r3
 801f2c2:	3201      	adds	r2, #1
 801f2c4:	4296      	cmp	r6, r2
 801f2c6:	54a1      	strb	r1, [r4, r2]
 801f2c8:	dcfb      	bgt.n	801f2c2 <__sccl+0x56>
 801f2ca:	1af2      	subs	r2, r6, r3
 801f2cc:	3a01      	subs	r2, #1
 801f2ce:	1c5d      	adds	r5, r3, #1
 801f2d0:	42b3      	cmp	r3, r6
 801f2d2:	bfa8      	it	ge
 801f2d4:	2200      	movge	r2, #0
 801f2d6:	18ab      	adds	r3, r5, r2
 801f2d8:	e7e1      	b.n	801f29e <__sccl+0x32>
 801f2da:	4610      	mov	r0, r2
 801f2dc:	e7da      	b.n	801f294 <__sccl+0x28>

0801f2de <__submore>:
 801f2de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f2e2:	460c      	mov	r4, r1
 801f2e4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801f2e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f2ea:	4299      	cmp	r1, r3
 801f2ec:	d11d      	bne.n	801f32a <__submore+0x4c>
 801f2ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801f2f2:	f7fd ff09 	bl	801d108 <_malloc_r>
 801f2f6:	b918      	cbnz	r0, 801f300 <__submore+0x22>
 801f2f8:	f04f 30ff 	mov.w	r0, #4294967295
 801f2fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f304:	63a3      	str	r3, [r4, #56]	; 0x38
 801f306:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801f30a:	6360      	str	r0, [r4, #52]	; 0x34
 801f30c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801f310:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801f314:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801f318:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801f31c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801f320:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801f324:	6020      	str	r0, [r4, #0]
 801f326:	2000      	movs	r0, #0
 801f328:	e7e8      	b.n	801f2fc <__submore+0x1e>
 801f32a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801f32c:	0077      	lsls	r7, r6, #1
 801f32e:	463a      	mov	r2, r7
 801f330:	f000 fbf3 	bl	801fb1a <_realloc_r>
 801f334:	4605      	mov	r5, r0
 801f336:	2800      	cmp	r0, #0
 801f338:	d0de      	beq.n	801f2f8 <__submore+0x1a>
 801f33a:	eb00 0806 	add.w	r8, r0, r6
 801f33e:	4601      	mov	r1, r0
 801f340:	4632      	mov	r2, r6
 801f342:	4640      	mov	r0, r8
 801f344:	f7fd f861 	bl	801c40a <memcpy>
 801f348:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801f34c:	f8c4 8000 	str.w	r8, [r4]
 801f350:	e7e9      	b.n	801f326 <__submore+0x48>

0801f352 <memmove>:
 801f352:	4288      	cmp	r0, r1
 801f354:	b510      	push	{r4, lr}
 801f356:	eb01 0402 	add.w	r4, r1, r2
 801f35a:	d902      	bls.n	801f362 <memmove+0x10>
 801f35c:	4284      	cmp	r4, r0
 801f35e:	4623      	mov	r3, r4
 801f360:	d807      	bhi.n	801f372 <memmove+0x20>
 801f362:	1e43      	subs	r3, r0, #1
 801f364:	42a1      	cmp	r1, r4
 801f366:	d008      	beq.n	801f37a <memmove+0x28>
 801f368:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f36c:	f803 2f01 	strb.w	r2, [r3, #1]!
 801f370:	e7f8      	b.n	801f364 <memmove+0x12>
 801f372:	4402      	add	r2, r0
 801f374:	4601      	mov	r1, r0
 801f376:	428a      	cmp	r2, r1
 801f378:	d100      	bne.n	801f37c <memmove+0x2a>
 801f37a:	bd10      	pop	{r4, pc}
 801f37c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801f380:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801f384:	e7f7      	b.n	801f376 <memmove+0x24>

0801f386 <strncmp>:
 801f386:	b510      	push	{r4, lr}
 801f388:	b16a      	cbz	r2, 801f3a6 <strncmp+0x20>
 801f38a:	3901      	subs	r1, #1
 801f38c:	1884      	adds	r4, r0, r2
 801f38e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f392:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801f396:	429a      	cmp	r2, r3
 801f398:	d103      	bne.n	801f3a2 <strncmp+0x1c>
 801f39a:	42a0      	cmp	r0, r4
 801f39c:	d001      	beq.n	801f3a2 <strncmp+0x1c>
 801f39e:	2a00      	cmp	r2, #0
 801f3a0:	d1f5      	bne.n	801f38e <strncmp+0x8>
 801f3a2:	1ad0      	subs	r0, r2, r3
 801f3a4:	bd10      	pop	{r4, pc}
 801f3a6:	4610      	mov	r0, r2
 801f3a8:	e7fc      	b.n	801f3a4 <strncmp+0x1e>
	...

0801f3ac <_sbrk_r>:
 801f3ac:	b538      	push	{r3, r4, r5, lr}
 801f3ae:	4d06      	ldr	r5, [pc, #24]	; (801f3c8 <_sbrk_r+0x1c>)
 801f3b0:	2300      	movs	r3, #0
 801f3b2:	4604      	mov	r4, r0
 801f3b4:	4608      	mov	r0, r1
 801f3b6:	602b      	str	r3, [r5, #0]
 801f3b8:	f7e4 fe50 	bl	800405c <_sbrk>
 801f3bc:	1c43      	adds	r3, r0, #1
 801f3be:	d102      	bne.n	801f3c6 <_sbrk_r+0x1a>
 801f3c0:	682b      	ldr	r3, [r5, #0]
 801f3c2:	b103      	cbz	r3, 801f3c6 <_sbrk_r+0x1a>
 801f3c4:	6023      	str	r3, [r4, #0]
 801f3c6:	bd38      	pop	{r3, r4, r5, pc}
 801f3c8:	24003634 	.word	0x24003634
 801f3cc:	00000000 	.word	0x00000000

0801f3d0 <nan>:
 801f3d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801f3d8 <nan+0x8>
 801f3d4:	4770      	bx	lr
 801f3d6:	bf00      	nop
 801f3d8:	00000000 	.word	0x00000000
 801f3dc:	7ff80000 	.word	0x7ff80000

0801f3e0 <__assert_func>:
 801f3e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f3e2:	4614      	mov	r4, r2
 801f3e4:	461a      	mov	r2, r3
 801f3e6:	4b09      	ldr	r3, [pc, #36]	; (801f40c <__assert_func+0x2c>)
 801f3e8:	681b      	ldr	r3, [r3, #0]
 801f3ea:	4605      	mov	r5, r0
 801f3ec:	68d8      	ldr	r0, [r3, #12]
 801f3ee:	b14c      	cbz	r4, 801f404 <__assert_func+0x24>
 801f3f0:	4b07      	ldr	r3, [pc, #28]	; (801f410 <__assert_func+0x30>)
 801f3f2:	9100      	str	r1, [sp, #0]
 801f3f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801f3f8:	4906      	ldr	r1, [pc, #24]	; (801f414 <__assert_func+0x34>)
 801f3fa:	462b      	mov	r3, r5
 801f3fc:	f000 fc3e 	bl	801fc7c <fiprintf>
 801f400:	f000 fc4e 	bl	801fca0 <abort>
 801f404:	4b04      	ldr	r3, [pc, #16]	; (801f418 <__assert_func+0x38>)
 801f406:	461c      	mov	r4, r3
 801f408:	e7f3      	b.n	801f3f2 <__assert_func+0x12>
 801f40a:	bf00      	nop
 801f40c:	24000158 	.word	0x24000158
 801f410:	08020d2d 	.word	0x08020d2d
 801f414:	08020d3a 	.word	0x08020d3a
 801f418:	08020d68 	.word	0x08020d68

0801f41c <_calloc_r>:
 801f41c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f41e:	fba1 2402 	umull	r2, r4, r1, r2
 801f422:	b94c      	cbnz	r4, 801f438 <_calloc_r+0x1c>
 801f424:	4611      	mov	r1, r2
 801f426:	9201      	str	r2, [sp, #4]
 801f428:	f7fd fe6e 	bl	801d108 <_malloc_r>
 801f42c:	9a01      	ldr	r2, [sp, #4]
 801f42e:	4605      	mov	r5, r0
 801f430:	b930      	cbnz	r0, 801f440 <_calloc_r+0x24>
 801f432:	4628      	mov	r0, r5
 801f434:	b003      	add	sp, #12
 801f436:	bd30      	pop	{r4, r5, pc}
 801f438:	220c      	movs	r2, #12
 801f43a:	6002      	str	r2, [r0, #0]
 801f43c:	2500      	movs	r5, #0
 801f43e:	e7f8      	b.n	801f432 <_calloc_r+0x16>
 801f440:	4621      	mov	r1, r4
 801f442:	f7fc ff5a 	bl	801c2fa <memset>
 801f446:	e7f4      	b.n	801f432 <_calloc_r+0x16>

0801f448 <rshift>:
 801f448:	6903      	ldr	r3, [r0, #16]
 801f44a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801f44e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f452:	ea4f 1261 	mov.w	r2, r1, asr #5
 801f456:	f100 0414 	add.w	r4, r0, #20
 801f45a:	dd45      	ble.n	801f4e8 <rshift+0xa0>
 801f45c:	f011 011f 	ands.w	r1, r1, #31
 801f460:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801f464:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801f468:	d10c      	bne.n	801f484 <rshift+0x3c>
 801f46a:	f100 0710 	add.w	r7, r0, #16
 801f46e:	4629      	mov	r1, r5
 801f470:	42b1      	cmp	r1, r6
 801f472:	d334      	bcc.n	801f4de <rshift+0x96>
 801f474:	1a9b      	subs	r3, r3, r2
 801f476:	009b      	lsls	r3, r3, #2
 801f478:	1eea      	subs	r2, r5, #3
 801f47a:	4296      	cmp	r6, r2
 801f47c:	bf38      	it	cc
 801f47e:	2300      	movcc	r3, #0
 801f480:	4423      	add	r3, r4
 801f482:	e015      	b.n	801f4b0 <rshift+0x68>
 801f484:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801f488:	f1c1 0820 	rsb	r8, r1, #32
 801f48c:	40cf      	lsrs	r7, r1
 801f48e:	f105 0e04 	add.w	lr, r5, #4
 801f492:	46a1      	mov	r9, r4
 801f494:	4576      	cmp	r6, lr
 801f496:	46f4      	mov	ip, lr
 801f498:	d815      	bhi.n	801f4c6 <rshift+0x7e>
 801f49a:	1a9a      	subs	r2, r3, r2
 801f49c:	0092      	lsls	r2, r2, #2
 801f49e:	3a04      	subs	r2, #4
 801f4a0:	3501      	adds	r5, #1
 801f4a2:	42ae      	cmp	r6, r5
 801f4a4:	bf38      	it	cc
 801f4a6:	2200      	movcc	r2, #0
 801f4a8:	18a3      	adds	r3, r4, r2
 801f4aa:	50a7      	str	r7, [r4, r2]
 801f4ac:	b107      	cbz	r7, 801f4b0 <rshift+0x68>
 801f4ae:	3304      	adds	r3, #4
 801f4b0:	1b1a      	subs	r2, r3, r4
 801f4b2:	42a3      	cmp	r3, r4
 801f4b4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801f4b8:	bf08      	it	eq
 801f4ba:	2300      	moveq	r3, #0
 801f4bc:	6102      	str	r2, [r0, #16]
 801f4be:	bf08      	it	eq
 801f4c0:	6143      	streq	r3, [r0, #20]
 801f4c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f4c6:	f8dc c000 	ldr.w	ip, [ip]
 801f4ca:	fa0c fc08 	lsl.w	ip, ip, r8
 801f4ce:	ea4c 0707 	orr.w	r7, ip, r7
 801f4d2:	f849 7b04 	str.w	r7, [r9], #4
 801f4d6:	f85e 7b04 	ldr.w	r7, [lr], #4
 801f4da:	40cf      	lsrs	r7, r1
 801f4dc:	e7da      	b.n	801f494 <rshift+0x4c>
 801f4de:	f851 cb04 	ldr.w	ip, [r1], #4
 801f4e2:	f847 cf04 	str.w	ip, [r7, #4]!
 801f4e6:	e7c3      	b.n	801f470 <rshift+0x28>
 801f4e8:	4623      	mov	r3, r4
 801f4ea:	e7e1      	b.n	801f4b0 <rshift+0x68>

0801f4ec <__hexdig_fun>:
 801f4ec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801f4f0:	2b09      	cmp	r3, #9
 801f4f2:	d802      	bhi.n	801f4fa <__hexdig_fun+0xe>
 801f4f4:	3820      	subs	r0, #32
 801f4f6:	b2c0      	uxtb	r0, r0
 801f4f8:	4770      	bx	lr
 801f4fa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801f4fe:	2b05      	cmp	r3, #5
 801f500:	d801      	bhi.n	801f506 <__hexdig_fun+0x1a>
 801f502:	3847      	subs	r0, #71	; 0x47
 801f504:	e7f7      	b.n	801f4f6 <__hexdig_fun+0xa>
 801f506:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801f50a:	2b05      	cmp	r3, #5
 801f50c:	d801      	bhi.n	801f512 <__hexdig_fun+0x26>
 801f50e:	3827      	subs	r0, #39	; 0x27
 801f510:	e7f1      	b.n	801f4f6 <__hexdig_fun+0xa>
 801f512:	2000      	movs	r0, #0
 801f514:	4770      	bx	lr
	...

0801f518 <__gethex>:
 801f518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f51c:	4617      	mov	r7, r2
 801f51e:	680a      	ldr	r2, [r1, #0]
 801f520:	b085      	sub	sp, #20
 801f522:	f102 0b02 	add.w	fp, r2, #2
 801f526:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801f52a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801f52e:	4681      	mov	r9, r0
 801f530:	468a      	mov	sl, r1
 801f532:	9302      	str	r3, [sp, #8]
 801f534:	32fe      	adds	r2, #254	; 0xfe
 801f536:	eb02 030b 	add.w	r3, r2, fp
 801f53a:	46d8      	mov	r8, fp
 801f53c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801f540:	9301      	str	r3, [sp, #4]
 801f542:	2830      	cmp	r0, #48	; 0x30
 801f544:	d0f7      	beq.n	801f536 <__gethex+0x1e>
 801f546:	f7ff ffd1 	bl	801f4ec <__hexdig_fun>
 801f54a:	4604      	mov	r4, r0
 801f54c:	2800      	cmp	r0, #0
 801f54e:	d138      	bne.n	801f5c2 <__gethex+0xaa>
 801f550:	49a7      	ldr	r1, [pc, #668]	; (801f7f0 <__gethex+0x2d8>)
 801f552:	2201      	movs	r2, #1
 801f554:	4640      	mov	r0, r8
 801f556:	f7ff ff16 	bl	801f386 <strncmp>
 801f55a:	4606      	mov	r6, r0
 801f55c:	2800      	cmp	r0, #0
 801f55e:	d169      	bne.n	801f634 <__gethex+0x11c>
 801f560:	f898 0001 	ldrb.w	r0, [r8, #1]
 801f564:	465d      	mov	r5, fp
 801f566:	f7ff ffc1 	bl	801f4ec <__hexdig_fun>
 801f56a:	2800      	cmp	r0, #0
 801f56c:	d064      	beq.n	801f638 <__gethex+0x120>
 801f56e:	465a      	mov	r2, fp
 801f570:	7810      	ldrb	r0, [r2, #0]
 801f572:	2830      	cmp	r0, #48	; 0x30
 801f574:	4690      	mov	r8, r2
 801f576:	f102 0201 	add.w	r2, r2, #1
 801f57a:	d0f9      	beq.n	801f570 <__gethex+0x58>
 801f57c:	f7ff ffb6 	bl	801f4ec <__hexdig_fun>
 801f580:	2301      	movs	r3, #1
 801f582:	fab0 f480 	clz	r4, r0
 801f586:	0964      	lsrs	r4, r4, #5
 801f588:	465e      	mov	r6, fp
 801f58a:	9301      	str	r3, [sp, #4]
 801f58c:	4642      	mov	r2, r8
 801f58e:	4615      	mov	r5, r2
 801f590:	3201      	adds	r2, #1
 801f592:	7828      	ldrb	r0, [r5, #0]
 801f594:	f7ff ffaa 	bl	801f4ec <__hexdig_fun>
 801f598:	2800      	cmp	r0, #0
 801f59a:	d1f8      	bne.n	801f58e <__gethex+0x76>
 801f59c:	4994      	ldr	r1, [pc, #592]	; (801f7f0 <__gethex+0x2d8>)
 801f59e:	2201      	movs	r2, #1
 801f5a0:	4628      	mov	r0, r5
 801f5a2:	f7ff fef0 	bl	801f386 <strncmp>
 801f5a6:	b978      	cbnz	r0, 801f5c8 <__gethex+0xb0>
 801f5a8:	b946      	cbnz	r6, 801f5bc <__gethex+0xa4>
 801f5aa:	1c6e      	adds	r6, r5, #1
 801f5ac:	4632      	mov	r2, r6
 801f5ae:	4615      	mov	r5, r2
 801f5b0:	3201      	adds	r2, #1
 801f5b2:	7828      	ldrb	r0, [r5, #0]
 801f5b4:	f7ff ff9a 	bl	801f4ec <__hexdig_fun>
 801f5b8:	2800      	cmp	r0, #0
 801f5ba:	d1f8      	bne.n	801f5ae <__gethex+0x96>
 801f5bc:	1b73      	subs	r3, r6, r5
 801f5be:	009e      	lsls	r6, r3, #2
 801f5c0:	e004      	b.n	801f5cc <__gethex+0xb4>
 801f5c2:	2400      	movs	r4, #0
 801f5c4:	4626      	mov	r6, r4
 801f5c6:	e7e1      	b.n	801f58c <__gethex+0x74>
 801f5c8:	2e00      	cmp	r6, #0
 801f5ca:	d1f7      	bne.n	801f5bc <__gethex+0xa4>
 801f5cc:	782b      	ldrb	r3, [r5, #0]
 801f5ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801f5d2:	2b50      	cmp	r3, #80	; 0x50
 801f5d4:	d13d      	bne.n	801f652 <__gethex+0x13a>
 801f5d6:	786b      	ldrb	r3, [r5, #1]
 801f5d8:	2b2b      	cmp	r3, #43	; 0x2b
 801f5da:	d02f      	beq.n	801f63c <__gethex+0x124>
 801f5dc:	2b2d      	cmp	r3, #45	; 0x2d
 801f5de:	d031      	beq.n	801f644 <__gethex+0x12c>
 801f5e0:	1c69      	adds	r1, r5, #1
 801f5e2:	f04f 0b00 	mov.w	fp, #0
 801f5e6:	7808      	ldrb	r0, [r1, #0]
 801f5e8:	f7ff ff80 	bl	801f4ec <__hexdig_fun>
 801f5ec:	1e42      	subs	r2, r0, #1
 801f5ee:	b2d2      	uxtb	r2, r2
 801f5f0:	2a18      	cmp	r2, #24
 801f5f2:	d82e      	bhi.n	801f652 <__gethex+0x13a>
 801f5f4:	f1a0 0210 	sub.w	r2, r0, #16
 801f5f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801f5fc:	f7ff ff76 	bl	801f4ec <__hexdig_fun>
 801f600:	f100 3cff 	add.w	ip, r0, #4294967295
 801f604:	fa5f fc8c 	uxtb.w	ip, ip
 801f608:	f1bc 0f18 	cmp.w	ip, #24
 801f60c:	d91d      	bls.n	801f64a <__gethex+0x132>
 801f60e:	f1bb 0f00 	cmp.w	fp, #0
 801f612:	d000      	beq.n	801f616 <__gethex+0xfe>
 801f614:	4252      	negs	r2, r2
 801f616:	4416      	add	r6, r2
 801f618:	f8ca 1000 	str.w	r1, [sl]
 801f61c:	b1dc      	cbz	r4, 801f656 <__gethex+0x13e>
 801f61e:	9b01      	ldr	r3, [sp, #4]
 801f620:	2b00      	cmp	r3, #0
 801f622:	bf14      	ite	ne
 801f624:	f04f 0800 	movne.w	r8, #0
 801f628:	f04f 0806 	moveq.w	r8, #6
 801f62c:	4640      	mov	r0, r8
 801f62e:	b005      	add	sp, #20
 801f630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f634:	4645      	mov	r5, r8
 801f636:	4626      	mov	r6, r4
 801f638:	2401      	movs	r4, #1
 801f63a:	e7c7      	b.n	801f5cc <__gethex+0xb4>
 801f63c:	f04f 0b00 	mov.w	fp, #0
 801f640:	1ca9      	adds	r1, r5, #2
 801f642:	e7d0      	b.n	801f5e6 <__gethex+0xce>
 801f644:	f04f 0b01 	mov.w	fp, #1
 801f648:	e7fa      	b.n	801f640 <__gethex+0x128>
 801f64a:	230a      	movs	r3, #10
 801f64c:	fb03 0002 	mla	r0, r3, r2, r0
 801f650:	e7d0      	b.n	801f5f4 <__gethex+0xdc>
 801f652:	4629      	mov	r1, r5
 801f654:	e7e0      	b.n	801f618 <__gethex+0x100>
 801f656:	eba5 0308 	sub.w	r3, r5, r8
 801f65a:	3b01      	subs	r3, #1
 801f65c:	4621      	mov	r1, r4
 801f65e:	2b07      	cmp	r3, #7
 801f660:	dc0a      	bgt.n	801f678 <__gethex+0x160>
 801f662:	4648      	mov	r0, r9
 801f664:	f7fd fddc 	bl	801d220 <_Balloc>
 801f668:	4604      	mov	r4, r0
 801f66a:	b940      	cbnz	r0, 801f67e <__gethex+0x166>
 801f66c:	4b61      	ldr	r3, [pc, #388]	; (801f7f4 <__gethex+0x2dc>)
 801f66e:	4602      	mov	r2, r0
 801f670:	21e4      	movs	r1, #228	; 0xe4
 801f672:	4861      	ldr	r0, [pc, #388]	; (801f7f8 <__gethex+0x2e0>)
 801f674:	f7ff feb4 	bl	801f3e0 <__assert_func>
 801f678:	3101      	adds	r1, #1
 801f67a:	105b      	asrs	r3, r3, #1
 801f67c:	e7ef      	b.n	801f65e <__gethex+0x146>
 801f67e:	f100 0a14 	add.w	sl, r0, #20
 801f682:	2300      	movs	r3, #0
 801f684:	495a      	ldr	r1, [pc, #360]	; (801f7f0 <__gethex+0x2d8>)
 801f686:	f8cd a004 	str.w	sl, [sp, #4]
 801f68a:	469b      	mov	fp, r3
 801f68c:	45a8      	cmp	r8, r5
 801f68e:	d342      	bcc.n	801f716 <__gethex+0x1fe>
 801f690:	9801      	ldr	r0, [sp, #4]
 801f692:	f840 bb04 	str.w	fp, [r0], #4
 801f696:	eba0 000a 	sub.w	r0, r0, sl
 801f69a:	1080      	asrs	r0, r0, #2
 801f69c:	6120      	str	r0, [r4, #16]
 801f69e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801f6a2:	4658      	mov	r0, fp
 801f6a4:	f7fd feae 	bl	801d404 <__hi0bits>
 801f6a8:	683d      	ldr	r5, [r7, #0]
 801f6aa:	eba8 0000 	sub.w	r0, r8, r0
 801f6ae:	42a8      	cmp	r0, r5
 801f6b0:	dd59      	ble.n	801f766 <__gethex+0x24e>
 801f6b2:	eba0 0805 	sub.w	r8, r0, r5
 801f6b6:	4641      	mov	r1, r8
 801f6b8:	4620      	mov	r0, r4
 801f6ba:	f7fe fa3a 	bl	801db32 <__any_on>
 801f6be:	4683      	mov	fp, r0
 801f6c0:	b1b8      	cbz	r0, 801f6f2 <__gethex+0x1da>
 801f6c2:	f108 33ff 	add.w	r3, r8, #4294967295
 801f6c6:	1159      	asrs	r1, r3, #5
 801f6c8:	f003 021f 	and.w	r2, r3, #31
 801f6cc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801f6d0:	f04f 0b01 	mov.w	fp, #1
 801f6d4:	fa0b f202 	lsl.w	r2, fp, r2
 801f6d8:	420a      	tst	r2, r1
 801f6da:	d00a      	beq.n	801f6f2 <__gethex+0x1da>
 801f6dc:	455b      	cmp	r3, fp
 801f6de:	dd06      	ble.n	801f6ee <__gethex+0x1d6>
 801f6e0:	f1a8 0102 	sub.w	r1, r8, #2
 801f6e4:	4620      	mov	r0, r4
 801f6e6:	f7fe fa24 	bl	801db32 <__any_on>
 801f6ea:	2800      	cmp	r0, #0
 801f6ec:	d138      	bne.n	801f760 <__gethex+0x248>
 801f6ee:	f04f 0b02 	mov.w	fp, #2
 801f6f2:	4641      	mov	r1, r8
 801f6f4:	4620      	mov	r0, r4
 801f6f6:	f7ff fea7 	bl	801f448 <rshift>
 801f6fa:	4446      	add	r6, r8
 801f6fc:	68bb      	ldr	r3, [r7, #8]
 801f6fe:	42b3      	cmp	r3, r6
 801f700:	da41      	bge.n	801f786 <__gethex+0x26e>
 801f702:	4621      	mov	r1, r4
 801f704:	4648      	mov	r0, r9
 801f706:	f7fd fdcb 	bl	801d2a0 <_Bfree>
 801f70a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f70c:	2300      	movs	r3, #0
 801f70e:	6013      	str	r3, [r2, #0]
 801f710:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801f714:	e78a      	b.n	801f62c <__gethex+0x114>
 801f716:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801f71a:	2a2e      	cmp	r2, #46	; 0x2e
 801f71c:	d014      	beq.n	801f748 <__gethex+0x230>
 801f71e:	2b20      	cmp	r3, #32
 801f720:	d106      	bne.n	801f730 <__gethex+0x218>
 801f722:	9b01      	ldr	r3, [sp, #4]
 801f724:	f843 bb04 	str.w	fp, [r3], #4
 801f728:	f04f 0b00 	mov.w	fp, #0
 801f72c:	9301      	str	r3, [sp, #4]
 801f72e:	465b      	mov	r3, fp
 801f730:	7828      	ldrb	r0, [r5, #0]
 801f732:	9303      	str	r3, [sp, #12]
 801f734:	f7ff feda 	bl	801f4ec <__hexdig_fun>
 801f738:	9b03      	ldr	r3, [sp, #12]
 801f73a:	f000 000f 	and.w	r0, r0, #15
 801f73e:	4098      	lsls	r0, r3
 801f740:	ea4b 0b00 	orr.w	fp, fp, r0
 801f744:	3304      	adds	r3, #4
 801f746:	e7a1      	b.n	801f68c <__gethex+0x174>
 801f748:	45a8      	cmp	r8, r5
 801f74a:	d8e8      	bhi.n	801f71e <__gethex+0x206>
 801f74c:	2201      	movs	r2, #1
 801f74e:	4628      	mov	r0, r5
 801f750:	9303      	str	r3, [sp, #12]
 801f752:	f7ff fe18 	bl	801f386 <strncmp>
 801f756:	4926      	ldr	r1, [pc, #152]	; (801f7f0 <__gethex+0x2d8>)
 801f758:	9b03      	ldr	r3, [sp, #12]
 801f75a:	2800      	cmp	r0, #0
 801f75c:	d1df      	bne.n	801f71e <__gethex+0x206>
 801f75e:	e795      	b.n	801f68c <__gethex+0x174>
 801f760:	f04f 0b03 	mov.w	fp, #3
 801f764:	e7c5      	b.n	801f6f2 <__gethex+0x1da>
 801f766:	da0b      	bge.n	801f780 <__gethex+0x268>
 801f768:	eba5 0800 	sub.w	r8, r5, r0
 801f76c:	4621      	mov	r1, r4
 801f76e:	4642      	mov	r2, r8
 801f770:	4648      	mov	r0, r9
 801f772:	f7fd ffaf 	bl	801d6d4 <__lshift>
 801f776:	eba6 0608 	sub.w	r6, r6, r8
 801f77a:	4604      	mov	r4, r0
 801f77c:	f100 0a14 	add.w	sl, r0, #20
 801f780:	f04f 0b00 	mov.w	fp, #0
 801f784:	e7ba      	b.n	801f6fc <__gethex+0x1e4>
 801f786:	687b      	ldr	r3, [r7, #4]
 801f788:	42b3      	cmp	r3, r6
 801f78a:	dd73      	ble.n	801f874 <__gethex+0x35c>
 801f78c:	1b9e      	subs	r6, r3, r6
 801f78e:	42b5      	cmp	r5, r6
 801f790:	dc34      	bgt.n	801f7fc <__gethex+0x2e4>
 801f792:	68fb      	ldr	r3, [r7, #12]
 801f794:	2b02      	cmp	r3, #2
 801f796:	d023      	beq.n	801f7e0 <__gethex+0x2c8>
 801f798:	2b03      	cmp	r3, #3
 801f79a:	d025      	beq.n	801f7e8 <__gethex+0x2d0>
 801f79c:	2b01      	cmp	r3, #1
 801f79e:	d115      	bne.n	801f7cc <__gethex+0x2b4>
 801f7a0:	42b5      	cmp	r5, r6
 801f7a2:	d113      	bne.n	801f7cc <__gethex+0x2b4>
 801f7a4:	2d01      	cmp	r5, #1
 801f7a6:	d10b      	bne.n	801f7c0 <__gethex+0x2a8>
 801f7a8:	9a02      	ldr	r2, [sp, #8]
 801f7aa:	687b      	ldr	r3, [r7, #4]
 801f7ac:	6013      	str	r3, [r2, #0]
 801f7ae:	2301      	movs	r3, #1
 801f7b0:	6123      	str	r3, [r4, #16]
 801f7b2:	f8ca 3000 	str.w	r3, [sl]
 801f7b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f7b8:	f04f 0862 	mov.w	r8, #98	; 0x62
 801f7bc:	601c      	str	r4, [r3, #0]
 801f7be:	e735      	b.n	801f62c <__gethex+0x114>
 801f7c0:	1e69      	subs	r1, r5, #1
 801f7c2:	4620      	mov	r0, r4
 801f7c4:	f7fe f9b5 	bl	801db32 <__any_on>
 801f7c8:	2800      	cmp	r0, #0
 801f7ca:	d1ed      	bne.n	801f7a8 <__gethex+0x290>
 801f7cc:	4621      	mov	r1, r4
 801f7ce:	4648      	mov	r0, r9
 801f7d0:	f7fd fd66 	bl	801d2a0 <_Bfree>
 801f7d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f7d6:	2300      	movs	r3, #0
 801f7d8:	6013      	str	r3, [r2, #0]
 801f7da:	f04f 0850 	mov.w	r8, #80	; 0x50
 801f7de:	e725      	b.n	801f62c <__gethex+0x114>
 801f7e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f7e2:	2b00      	cmp	r3, #0
 801f7e4:	d1f2      	bne.n	801f7cc <__gethex+0x2b4>
 801f7e6:	e7df      	b.n	801f7a8 <__gethex+0x290>
 801f7e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f7ea:	2b00      	cmp	r3, #0
 801f7ec:	d1dc      	bne.n	801f7a8 <__gethex+0x290>
 801f7ee:	e7ed      	b.n	801f7cc <__gethex+0x2b4>
 801f7f0:	08020ba4 	.word	0x08020ba4
 801f7f4:	08020a3b 	.word	0x08020a3b
 801f7f8:	08020d69 	.word	0x08020d69
 801f7fc:	f106 38ff 	add.w	r8, r6, #4294967295
 801f800:	f1bb 0f00 	cmp.w	fp, #0
 801f804:	d133      	bne.n	801f86e <__gethex+0x356>
 801f806:	f1b8 0f00 	cmp.w	r8, #0
 801f80a:	d004      	beq.n	801f816 <__gethex+0x2fe>
 801f80c:	4641      	mov	r1, r8
 801f80e:	4620      	mov	r0, r4
 801f810:	f7fe f98f 	bl	801db32 <__any_on>
 801f814:	4683      	mov	fp, r0
 801f816:	ea4f 1268 	mov.w	r2, r8, asr #5
 801f81a:	2301      	movs	r3, #1
 801f81c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801f820:	f008 081f 	and.w	r8, r8, #31
 801f824:	fa03 f308 	lsl.w	r3, r3, r8
 801f828:	4213      	tst	r3, r2
 801f82a:	4631      	mov	r1, r6
 801f82c:	4620      	mov	r0, r4
 801f82e:	bf18      	it	ne
 801f830:	f04b 0b02 	orrne.w	fp, fp, #2
 801f834:	1bad      	subs	r5, r5, r6
 801f836:	f7ff fe07 	bl	801f448 <rshift>
 801f83a:	687e      	ldr	r6, [r7, #4]
 801f83c:	f04f 0802 	mov.w	r8, #2
 801f840:	f1bb 0f00 	cmp.w	fp, #0
 801f844:	d04a      	beq.n	801f8dc <__gethex+0x3c4>
 801f846:	68fb      	ldr	r3, [r7, #12]
 801f848:	2b02      	cmp	r3, #2
 801f84a:	d016      	beq.n	801f87a <__gethex+0x362>
 801f84c:	2b03      	cmp	r3, #3
 801f84e:	d018      	beq.n	801f882 <__gethex+0x36a>
 801f850:	2b01      	cmp	r3, #1
 801f852:	d109      	bne.n	801f868 <__gethex+0x350>
 801f854:	f01b 0f02 	tst.w	fp, #2
 801f858:	d006      	beq.n	801f868 <__gethex+0x350>
 801f85a:	f8da 3000 	ldr.w	r3, [sl]
 801f85e:	ea4b 0b03 	orr.w	fp, fp, r3
 801f862:	f01b 0f01 	tst.w	fp, #1
 801f866:	d10f      	bne.n	801f888 <__gethex+0x370>
 801f868:	f048 0810 	orr.w	r8, r8, #16
 801f86c:	e036      	b.n	801f8dc <__gethex+0x3c4>
 801f86e:	f04f 0b01 	mov.w	fp, #1
 801f872:	e7d0      	b.n	801f816 <__gethex+0x2fe>
 801f874:	f04f 0801 	mov.w	r8, #1
 801f878:	e7e2      	b.n	801f840 <__gethex+0x328>
 801f87a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f87c:	f1c3 0301 	rsb	r3, r3, #1
 801f880:	930f      	str	r3, [sp, #60]	; 0x3c
 801f882:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f884:	2b00      	cmp	r3, #0
 801f886:	d0ef      	beq.n	801f868 <__gethex+0x350>
 801f888:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801f88c:	f104 0214 	add.w	r2, r4, #20
 801f890:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801f894:	9301      	str	r3, [sp, #4]
 801f896:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801f89a:	2300      	movs	r3, #0
 801f89c:	4694      	mov	ip, r2
 801f89e:	f852 1b04 	ldr.w	r1, [r2], #4
 801f8a2:	f1b1 3fff 	cmp.w	r1, #4294967295
 801f8a6:	d01e      	beq.n	801f8e6 <__gethex+0x3ce>
 801f8a8:	3101      	adds	r1, #1
 801f8aa:	f8cc 1000 	str.w	r1, [ip]
 801f8ae:	f1b8 0f02 	cmp.w	r8, #2
 801f8b2:	f104 0214 	add.w	r2, r4, #20
 801f8b6:	d13d      	bne.n	801f934 <__gethex+0x41c>
 801f8b8:	683b      	ldr	r3, [r7, #0]
 801f8ba:	3b01      	subs	r3, #1
 801f8bc:	42ab      	cmp	r3, r5
 801f8be:	d10b      	bne.n	801f8d8 <__gethex+0x3c0>
 801f8c0:	1169      	asrs	r1, r5, #5
 801f8c2:	2301      	movs	r3, #1
 801f8c4:	f005 051f 	and.w	r5, r5, #31
 801f8c8:	fa03 f505 	lsl.w	r5, r3, r5
 801f8cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f8d0:	421d      	tst	r5, r3
 801f8d2:	bf18      	it	ne
 801f8d4:	f04f 0801 	movne.w	r8, #1
 801f8d8:	f048 0820 	orr.w	r8, r8, #32
 801f8dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f8de:	601c      	str	r4, [r3, #0]
 801f8e0:	9b02      	ldr	r3, [sp, #8]
 801f8e2:	601e      	str	r6, [r3, #0]
 801f8e4:	e6a2      	b.n	801f62c <__gethex+0x114>
 801f8e6:	4290      	cmp	r0, r2
 801f8e8:	f842 3c04 	str.w	r3, [r2, #-4]
 801f8ec:	d8d6      	bhi.n	801f89c <__gethex+0x384>
 801f8ee:	68a2      	ldr	r2, [r4, #8]
 801f8f0:	4593      	cmp	fp, r2
 801f8f2:	db17      	blt.n	801f924 <__gethex+0x40c>
 801f8f4:	6861      	ldr	r1, [r4, #4]
 801f8f6:	4648      	mov	r0, r9
 801f8f8:	3101      	adds	r1, #1
 801f8fa:	f7fd fc91 	bl	801d220 <_Balloc>
 801f8fe:	4682      	mov	sl, r0
 801f900:	b918      	cbnz	r0, 801f90a <__gethex+0x3f2>
 801f902:	4b1b      	ldr	r3, [pc, #108]	; (801f970 <__gethex+0x458>)
 801f904:	4602      	mov	r2, r0
 801f906:	2184      	movs	r1, #132	; 0x84
 801f908:	e6b3      	b.n	801f672 <__gethex+0x15a>
 801f90a:	6922      	ldr	r2, [r4, #16]
 801f90c:	3202      	adds	r2, #2
 801f90e:	f104 010c 	add.w	r1, r4, #12
 801f912:	0092      	lsls	r2, r2, #2
 801f914:	300c      	adds	r0, #12
 801f916:	f7fc fd78 	bl	801c40a <memcpy>
 801f91a:	4621      	mov	r1, r4
 801f91c:	4648      	mov	r0, r9
 801f91e:	f7fd fcbf 	bl	801d2a0 <_Bfree>
 801f922:	4654      	mov	r4, sl
 801f924:	6922      	ldr	r2, [r4, #16]
 801f926:	1c51      	adds	r1, r2, #1
 801f928:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801f92c:	6121      	str	r1, [r4, #16]
 801f92e:	2101      	movs	r1, #1
 801f930:	6151      	str	r1, [r2, #20]
 801f932:	e7bc      	b.n	801f8ae <__gethex+0x396>
 801f934:	6921      	ldr	r1, [r4, #16]
 801f936:	4559      	cmp	r1, fp
 801f938:	dd0b      	ble.n	801f952 <__gethex+0x43a>
 801f93a:	2101      	movs	r1, #1
 801f93c:	4620      	mov	r0, r4
 801f93e:	f7ff fd83 	bl	801f448 <rshift>
 801f942:	68bb      	ldr	r3, [r7, #8]
 801f944:	3601      	adds	r6, #1
 801f946:	42b3      	cmp	r3, r6
 801f948:	f6ff aedb 	blt.w	801f702 <__gethex+0x1ea>
 801f94c:	f04f 0801 	mov.w	r8, #1
 801f950:	e7c2      	b.n	801f8d8 <__gethex+0x3c0>
 801f952:	f015 051f 	ands.w	r5, r5, #31
 801f956:	d0f9      	beq.n	801f94c <__gethex+0x434>
 801f958:	9b01      	ldr	r3, [sp, #4]
 801f95a:	441a      	add	r2, r3
 801f95c:	f1c5 0520 	rsb	r5, r5, #32
 801f960:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801f964:	f7fd fd4e 	bl	801d404 <__hi0bits>
 801f968:	42a8      	cmp	r0, r5
 801f96a:	dbe6      	blt.n	801f93a <__gethex+0x422>
 801f96c:	e7ee      	b.n	801f94c <__gethex+0x434>
 801f96e:	bf00      	nop
 801f970:	08020a3b 	.word	0x08020a3b

0801f974 <L_shift>:
 801f974:	f1c2 0208 	rsb	r2, r2, #8
 801f978:	0092      	lsls	r2, r2, #2
 801f97a:	b570      	push	{r4, r5, r6, lr}
 801f97c:	f1c2 0620 	rsb	r6, r2, #32
 801f980:	6843      	ldr	r3, [r0, #4]
 801f982:	6804      	ldr	r4, [r0, #0]
 801f984:	fa03 f506 	lsl.w	r5, r3, r6
 801f988:	432c      	orrs	r4, r5
 801f98a:	40d3      	lsrs	r3, r2
 801f98c:	6004      	str	r4, [r0, #0]
 801f98e:	f840 3f04 	str.w	r3, [r0, #4]!
 801f992:	4288      	cmp	r0, r1
 801f994:	d3f4      	bcc.n	801f980 <L_shift+0xc>
 801f996:	bd70      	pop	{r4, r5, r6, pc}

0801f998 <__match>:
 801f998:	b530      	push	{r4, r5, lr}
 801f99a:	6803      	ldr	r3, [r0, #0]
 801f99c:	3301      	adds	r3, #1
 801f99e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f9a2:	b914      	cbnz	r4, 801f9aa <__match+0x12>
 801f9a4:	6003      	str	r3, [r0, #0]
 801f9a6:	2001      	movs	r0, #1
 801f9a8:	bd30      	pop	{r4, r5, pc}
 801f9aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f9ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801f9b2:	2d19      	cmp	r5, #25
 801f9b4:	bf98      	it	ls
 801f9b6:	3220      	addls	r2, #32
 801f9b8:	42a2      	cmp	r2, r4
 801f9ba:	d0f0      	beq.n	801f99e <__match+0x6>
 801f9bc:	2000      	movs	r0, #0
 801f9be:	e7f3      	b.n	801f9a8 <__match+0x10>

0801f9c0 <__hexnan>:
 801f9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f9c4:	680b      	ldr	r3, [r1, #0]
 801f9c6:	6801      	ldr	r1, [r0, #0]
 801f9c8:	115e      	asrs	r6, r3, #5
 801f9ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801f9ce:	f013 031f 	ands.w	r3, r3, #31
 801f9d2:	b087      	sub	sp, #28
 801f9d4:	bf18      	it	ne
 801f9d6:	3604      	addne	r6, #4
 801f9d8:	2500      	movs	r5, #0
 801f9da:	1f37      	subs	r7, r6, #4
 801f9dc:	4682      	mov	sl, r0
 801f9de:	4690      	mov	r8, r2
 801f9e0:	9301      	str	r3, [sp, #4]
 801f9e2:	f846 5c04 	str.w	r5, [r6, #-4]
 801f9e6:	46b9      	mov	r9, r7
 801f9e8:	463c      	mov	r4, r7
 801f9ea:	9502      	str	r5, [sp, #8]
 801f9ec:	46ab      	mov	fp, r5
 801f9ee:	784a      	ldrb	r2, [r1, #1]
 801f9f0:	1c4b      	adds	r3, r1, #1
 801f9f2:	9303      	str	r3, [sp, #12]
 801f9f4:	b342      	cbz	r2, 801fa48 <__hexnan+0x88>
 801f9f6:	4610      	mov	r0, r2
 801f9f8:	9105      	str	r1, [sp, #20]
 801f9fa:	9204      	str	r2, [sp, #16]
 801f9fc:	f7ff fd76 	bl	801f4ec <__hexdig_fun>
 801fa00:	2800      	cmp	r0, #0
 801fa02:	d14f      	bne.n	801faa4 <__hexnan+0xe4>
 801fa04:	9a04      	ldr	r2, [sp, #16]
 801fa06:	9905      	ldr	r1, [sp, #20]
 801fa08:	2a20      	cmp	r2, #32
 801fa0a:	d818      	bhi.n	801fa3e <__hexnan+0x7e>
 801fa0c:	9b02      	ldr	r3, [sp, #8]
 801fa0e:	459b      	cmp	fp, r3
 801fa10:	dd13      	ble.n	801fa3a <__hexnan+0x7a>
 801fa12:	454c      	cmp	r4, r9
 801fa14:	d206      	bcs.n	801fa24 <__hexnan+0x64>
 801fa16:	2d07      	cmp	r5, #7
 801fa18:	dc04      	bgt.n	801fa24 <__hexnan+0x64>
 801fa1a:	462a      	mov	r2, r5
 801fa1c:	4649      	mov	r1, r9
 801fa1e:	4620      	mov	r0, r4
 801fa20:	f7ff ffa8 	bl	801f974 <L_shift>
 801fa24:	4544      	cmp	r4, r8
 801fa26:	d950      	bls.n	801faca <__hexnan+0x10a>
 801fa28:	2300      	movs	r3, #0
 801fa2a:	f1a4 0904 	sub.w	r9, r4, #4
 801fa2e:	f844 3c04 	str.w	r3, [r4, #-4]
 801fa32:	f8cd b008 	str.w	fp, [sp, #8]
 801fa36:	464c      	mov	r4, r9
 801fa38:	461d      	mov	r5, r3
 801fa3a:	9903      	ldr	r1, [sp, #12]
 801fa3c:	e7d7      	b.n	801f9ee <__hexnan+0x2e>
 801fa3e:	2a29      	cmp	r2, #41	; 0x29
 801fa40:	d155      	bne.n	801faee <__hexnan+0x12e>
 801fa42:	3102      	adds	r1, #2
 801fa44:	f8ca 1000 	str.w	r1, [sl]
 801fa48:	f1bb 0f00 	cmp.w	fp, #0
 801fa4c:	d04f      	beq.n	801faee <__hexnan+0x12e>
 801fa4e:	454c      	cmp	r4, r9
 801fa50:	d206      	bcs.n	801fa60 <__hexnan+0xa0>
 801fa52:	2d07      	cmp	r5, #7
 801fa54:	dc04      	bgt.n	801fa60 <__hexnan+0xa0>
 801fa56:	462a      	mov	r2, r5
 801fa58:	4649      	mov	r1, r9
 801fa5a:	4620      	mov	r0, r4
 801fa5c:	f7ff ff8a 	bl	801f974 <L_shift>
 801fa60:	4544      	cmp	r4, r8
 801fa62:	d934      	bls.n	801face <__hexnan+0x10e>
 801fa64:	f1a8 0204 	sub.w	r2, r8, #4
 801fa68:	4623      	mov	r3, r4
 801fa6a:	f853 1b04 	ldr.w	r1, [r3], #4
 801fa6e:	f842 1f04 	str.w	r1, [r2, #4]!
 801fa72:	429f      	cmp	r7, r3
 801fa74:	d2f9      	bcs.n	801fa6a <__hexnan+0xaa>
 801fa76:	1b3b      	subs	r3, r7, r4
 801fa78:	f023 0303 	bic.w	r3, r3, #3
 801fa7c:	3304      	adds	r3, #4
 801fa7e:	3e03      	subs	r6, #3
 801fa80:	3401      	adds	r4, #1
 801fa82:	42a6      	cmp	r6, r4
 801fa84:	bf38      	it	cc
 801fa86:	2304      	movcc	r3, #4
 801fa88:	4443      	add	r3, r8
 801fa8a:	2200      	movs	r2, #0
 801fa8c:	f843 2b04 	str.w	r2, [r3], #4
 801fa90:	429f      	cmp	r7, r3
 801fa92:	d2fb      	bcs.n	801fa8c <__hexnan+0xcc>
 801fa94:	683b      	ldr	r3, [r7, #0]
 801fa96:	b91b      	cbnz	r3, 801faa0 <__hexnan+0xe0>
 801fa98:	4547      	cmp	r7, r8
 801fa9a:	d126      	bne.n	801faea <__hexnan+0x12a>
 801fa9c:	2301      	movs	r3, #1
 801fa9e:	603b      	str	r3, [r7, #0]
 801faa0:	2005      	movs	r0, #5
 801faa2:	e025      	b.n	801faf0 <__hexnan+0x130>
 801faa4:	3501      	adds	r5, #1
 801faa6:	2d08      	cmp	r5, #8
 801faa8:	f10b 0b01 	add.w	fp, fp, #1
 801faac:	dd06      	ble.n	801fabc <__hexnan+0xfc>
 801faae:	4544      	cmp	r4, r8
 801fab0:	d9c3      	bls.n	801fa3a <__hexnan+0x7a>
 801fab2:	2300      	movs	r3, #0
 801fab4:	f844 3c04 	str.w	r3, [r4, #-4]
 801fab8:	2501      	movs	r5, #1
 801faba:	3c04      	subs	r4, #4
 801fabc:	6822      	ldr	r2, [r4, #0]
 801fabe:	f000 000f 	and.w	r0, r0, #15
 801fac2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801fac6:	6020      	str	r0, [r4, #0]
 801fac8:	e7b7      	b.n	801fa3a <__hexnan+0x7a>
 801faca:	2508      	movs	r5, #8
 801facc:	e7b5      	b.n	801fa3a <__hexnan+0x7a>
 801face:	9b01      	ldr	r3, [sp, #4]
 801fad0:	2b00      	cmp	r3, #0
 801fad2:	d0df      	beq.n	801fa94 <__hexnan+0xd4>
 801fad4:	f1c3 0320 	rsb	r3, r3, #32
 801fad8:	f04f 32ff 	mov.w	r2, #4294967295
 801fadc:	40da      	lsrs	r2, r3
 801fade:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801fae2:	4013      	ands	r3, r2
 801fae4:	f846 3c04 	str.w	r3, [r6, #-4]
 801fae8:	e7d4      	b.n	801fa94 <__hexnan+0xd4>
 801faea:	3f04      	subs	r7, #4
 801faec:	e7d2      	b.n	801fa94 <__hexnan+0xd4>
 801faee:	2004      	movs	r0, #4
 801faf0:	b007      	add	sp, #28
 801faf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801faf6 <__ascii_mbtowc>:
 801faf6:	b082      	sub	sp, #8
 801faf8:	b901      	cbnz	r1, 801fafc <__ascii_mbtowc+0x6>
 801fafa:	a901      	add	r1, sp, #4
 801fafc:	b142      	cbz	r2, 801fb10 <__ascii_mbtowc+0x1a>
 801fafe:	b14b      	cbz	r3, 801fb14 <__ascii_mbtowc+0x1e>
 801fb00:	7813      	ldrb	r3, [r2, #0]
 801fb02:	600b      	str	r3, [r1, #0]
 801fb04:	7812      	ldrb	r2, [r2, #0]
 801fb06:	1e10      	subs	r0, r2, #0
 801fb08:	bf18      	it	ne
 801fb0a:	2001      	movne	r0, #1
 801fb0c:	b002      	add	sp, #8
 801fb0e:	4770      	bx	lr
 801fb10:	4610      	mov	r0, r2
 801fb12:	e7fb      	b.n	801fb0c <__ascii_mbtowc+0x16>
 801fb14:	f06f 0001 	mvn.w	r0, #1
 801fb18:	e7f8      	b.n	801fb0c <__ascii_mbtowc+0x16>

0801fb1a <_realloc_r>:
 801fb1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fb1e:	4680      	mov	r8, r0
 801fb20:	4614      	mov	r4, r2
 801fb22:	460e      	mov	r6, r1
 801fb24:	b921      	cbnz	r1, 801fb30 <_realloc_r+0x16>
 801fb26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fb2a:	4611      	mov	r1, r2
 801fb2c:	f7fd baec 	b.w	801d108 <_malloc_r>
 801fb30:	b92a      	cbnz	r2, 801fb3e <_realloc_r+0x24>
 801fb32:	f7fd fa75 	bl	801d020 <_free_r>
 801fb36:	4625      	mov	r5, r4
 801fb38:	4628      	mov	r0, r5
 801fb3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fb3e:	f000 f8b6 	bl	801fcae <_malloc_usable_size_r>
 801fb42:	4284      	cmp	r4, r0
 801fb44:	4607      	mov	r7, r0
 801fb46:	d802      	bhi.n	801fb4e <_realloc_r+0x34>
 801fb48:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801fb4c:	d812      	bhi.n	801fb74 <_realloc_r+0x5a>
 801fb4e:	4621      	mov	r1, r4
 801fb50:	4640      	mov	r0, r8
 801fb52:	f7fd fad9 	bl	801d108 <_malloc_r>
 801fb56:	4605      	mov	r5, r0
 801fb58:	2800      	cmp	r0, #0
 801fb5a:	d0ed      	beq.n	801fb38 <_realloc_r+0x1e>
 801fb5c:	42bc      	cmp	r4, r7
 801fb5e:	4622      	mov	r2, r4
 801fb60:	4631      	mov	r1, r6
 801fb62:	bf28      	it	cs
 801fb64:	463a      	movcs	r2, r7
 801fb66:	f7fc fc50 	bl	801c40a <memcpy>
 801fb6a:	4631      	mov	r1, r6
 801fb6c:	4640      	mov	r0, r8
 801fb6e:	f7fd fa57 	bl	801d020 <_free_r>
 801fb72:	e7e1      	b.n	801fb38 <_realloc_r+0x1e>
 801fb74:	4635      	mov	r5, r6
 801fb76:	e7df      	b.n	801fb38 <_realloc_r+0x1e>

0801fb78 <_strtoul_l.constprop.0>:
 801fb78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fb7c:	4f36      	ldr	r7, [pc, #216]	; (801fc58 <_strtoul_l.constprop.0+0xe0>)
 801fb7e:	4686      	mov	lr, r0
 801fb80:	460d      	mov	r5, r1
 801fb82:	4628      	mov	r0, r5
 801fb84:	f815 4b01 	ldrb.w	r4, [r5], #1
 801fb88:	5d3e      	ldrb	r6, [r7, r4]
 801fb8a:	f016 0608 	ands.w	r6, r6, #8
 801fb8e:	d1f8      	bne.n	801fb82 <_strtoul_l.constprop.0+0xa>
 801fb90:	2c2d      	cmp	r4, #45	; 0x2d
 801fb92:	d130      	bne.n	801fbf6 <_strtoul_l.constprop.0+0x7e>
 801fb94:	782c      	ldrb	r4, [r5, #0]
 801fb96:	2601      	movs	r6, #1
 801fb98:	1c85      	adds	r5, r0, #2
 801fb9a:	2b00      	cmp	r3, #0
 801fb9c:	d057      	beq.n	801fc4e <_strtoul_l.constprop.0+0xd6>
 801fb9e:	2b10      	cmp	r3, #16
 801fba0:	d109      	bne.n	801fbb6 <_strtoul_l.constprop.0+0x3e>
 801fba2:	2c30      	cmp	r4, #48	; 0x30
 801fba4:	d107      	bne.n	801fbb6 <_strtoul_l.constprop.0+0x3e>
 801fba6:	7828      	ldrb	r0, [r5, #0]
 801fba8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801fbac:	2858      	cmp	r0, #88	; 0x58
 801fbae:	d149      	bne.n	801fc44 <_strtoul_l.constprop.0+0xcc>
 801fbb0:	786c      	ldrb	r4, [r5, #1]
 801fbb2:	2310      	movs	r3, #16
 801fbb4:	3502      	adds	r5, #2
 801fbb6:	f04f 38ff 	mov.w	r8, #4294967295
 801fbba:	2700      	movs	r7, #0
 801fbbc:	fbb8 f8f3 	udiv	r8, r8, r3
 801fbc0:	fb03 f908 	mul.w	r9, r3, r8
 801fbc4:	ea6f 0909 	mvn.w	r9, r9
 801fbc8:	4638      	mov	r0, r7
 801fbca:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801fbce:	f1bc 0f09 	cmp.w	ip, #9
 801fbd2:	d815      	bhi.n	801fc00 <_strtoul_l.constprop.0+0x88>
 801fbd4:	4664      	mov	r4, ip
 801fbd6:	42a3      	cmp	r3, r4
 801fbd8:	dd23      	ble.n	801fc22 <_strtoul_l.constprop.0+0xaa>
 801fbda:	f1b7 3fff 	cmp.w	r7, #4294967295
 801fbde:	d007      	beq.n	801fbf0 <_strtoul_l.constprop.0+0x78>
 801fbe0:	4580      	cmp	r8, r0
 801fbe2:	d31b      	bcc.n	801fc1c <_strtoul_l.constprop.0+0xa4>
 801fbe4:	d101      	bne.n	801fbea <_strtoul_l.constprop.0+0x72>
 801fbe6:	45a1      	cmp	r9, r4
 801fbe8:	db18      	blt.n	801fc1c <_strtoul_l.constprop.0+0xa4>
 801fbea:	fb00 4003 	mla	r0, r0, r3, r4
 801fbee:	2701      	movs	r7, #1
 801fbf0:	f815 4b01 	ldrb.w	r4, [r5], #1
 801fbf4:	e7e9      	b.n	801fbca <_strtoul_l.constprop.0+0x52>
 801fbf6:	2c2b      	cmp	r4, #43	; 0x2b
 801fbf8:	bf04      	itt	eq
 801fbfa:	782c      	ldrbeq	r4, [r5, #0]
 801fbfc:	1c85      	addeq	r5, r0, #2
 801fbfe:	e7cc      	b.n	801fb9a <_strtoul_l.constprop.0+0x22>
 801fc00:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801fc04:	f1bc 0f19 	cmp.w	ip, #25
 801fc08:	d801      	bhi.n	801fc0e <_strtoul_l.constprop.0+0x96>
 801fc0a:	3c37      	subs	r4, #55	; 0x37
 801fc0c:	e7e3      	b.n	801fbd6 <_strtoul_l.constprop.0+0x5e>
 801fc0e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801fc12:	f1bc 0f19 	cmp.w	ip, #25
 801fc16:	d804      	bhi.n	801fc22 <_strtoul_l.constprop.0+0xaa>
 801fc18:	3c57      	subs	r4, #87	; 0x57
 801fc1a:	e7dc      	b.n	801fbd6 <_strtoul_l.constprop.0+0x5e>
 801fc1c:	f04f 37ff 	mov.w	r7, #4294967295
 801fc20:	e7e6      	b.n	801fbf0 <_strtoul_l.constprop.0+0x78>
 801fc22:	1c7b      	adds	r3, r7, #1
 801fc24:	d106      	bne.n	801fc34 <_strtoul_l.constprop.0+0xbc>
 801fc26:	2322      	movs	r3, #34	; 0x22
 801fc28:	f8ce 3000 	str.w	r3, [lr]
 801fc2c:	4638      	mov	r0, r7
 801fc2e:	b932      	cbnz	r2, 801fc3e <_strtoul_l.constprop.0+0xc6>
 801fc30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fc34:	b106      	cbz	r6, 801fc38 <_strtoul_l.constprop.0+0xc0>
 801fc36:	4240      	negs	r0, r0
 801fc38:	2a00      	cmp	r2, #0
 801fc3a:	d0f9      	beq.n	801fc30 <_strtoul_l.constprop.0+0xb8>
 801fc3c:	b107      	cbz	r7, 801fc40 <_strtoul_l.constprop.0+0xc8>
 801fc3e:	1e69      	subs	r1, r5, #1
 801fc40:	6011      	str	r1, [r2, #0]
 801fc42:	e7f5      	b.n	801fc30 <_strtoul_l.constprop.0+0xb8>
 801fc44:	2430      	movs	r4, #48	; 0x30
 801fc46:	2b00      	cmp	r3, #0
 801fc48:	d1b5      	bne.n	801fbb6 <_strtoul_l.constprop.0+0x3e>
 801fc4a:	2308      	movs	r3, #8
 801fc4c:	e7b3      	b.n	801fbb6 <_strtoul_l.constprop.0+0x3e>
 801fc4e:	2c30      	cmp	r4, #48	; 0x30
 801fc50:	d0a9      	beq.n	801fba6 <_strtoul_l.constprop.0+0x2e>
 801fc52:	230a      	movs	r3, #10
 801fc54:	e7af      	b.n	801fbb6 <_strtoul_l.constprop.0+0x3e>
 801fc56:	bf00      	nop
 801fc58:	08020bf9 	.word	0x08020bf9

0801fc5c <_strtoul_r>:
 801fc5c:	f7ff bf8c 	b.w	801fb78 <_strtoul_l.constprop.0>

0801fc60 <__ascii_wctomb>:
 801fc60:	b149      	cbz	r1, 801fc76 <__ascii_wctomb+0x16>
 801fc62:	2aff      	cmp	r2, #255	; 0xff
 801fc64:	bf85      	ittet	hi
 801fc66:	238a      	movhi	r3, #138	; 0x8a
 801fc68:	6003      	strhi	r3, [r0, #0]
 801fc6a:	700a      	strbls	r2, [r1, #0]
 801fc6c:	f04f 30ff 	movhi.w	r0, #4294967295
 801fc70:	bf98      	it	ls
 801fc72:	2001      	movls	r0, #1
 801fc74:	4770      	bx	lr
 801fc76:	4608      	mov	r0, r1
 801fc78:	4770      	bx	lr
	...

0801fc7c <fiprintf>:
 801fc7c:	b40e      	push	{r1, r2, r3}
 801fc7e:	b503      	push	{r0, r1, lr}
 801fc80:	4601      	mov	r1, r0
 801fc82:	ab03      	add	r3, sp, #12
 801fc84:	4805      	ldr	r0, [pc, #20]	; (801fc9c <fiprintf+0x20>)
 801fc86:	f853 2b04 	ldr.w	r2, [r3], #4
 801fc8a:	6800      	ldr	r0, [r0, #0]
 801fc8c:	9301      	str	r3, [sp, #4]
 801fc8e:	f000 f83f 	bl	801fd10 <_vfiprintf_r>
 801fc92:	b002      	add	sp, #8
 801fc94:	f85d eb04 	ldr.w	lr, [sp], #4
 801fc98:	b003      	add	sp, #12
 801fc9a:	4770      	bx	lr
 801fc9c:	24000158 	.word	0x24000158

0801fca0 <abort>:
 801fca0:	b508      	push	{r3, lr}
 801fca2:	2006      	movs	r0, #6
 801fca4:	f000 fa0c 	bl	80200c0 <raise>
 801fca8:	2001      	movs	r0, #1
 801fcaa:	f7e4 f95f 	bl	8003f6c <_exit>

0801fcae <_malloc_usable_size_r>:
 801fcae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fcb2:	1f18      	subs	r0, r3, #4
 801fcb4:	2b00      	cmp	r3, #0
 801fcb6:	bfbc      	itt	lt
 801fcb8:	580b      	ldrlt	r3, [r1, r0]
 801fcba:	18c0      	addlt	r0, r0, r3
 801fcbc:	4770      	bx	lr

0801fcbe <__sfputc_r>:
 801fcbe:	6893      	ldr	r3, [r2, #8]
 801fcc0:	3b01      	subs	r3, #1
 801fcc2:	2b00      	cmp	r3, #0
 801fcc4:	b410      	push	{r4}
 801fcc6:	6093      	str	r3, [r2, #8]
 801fcc8:	da08      	bge.n	801fcdc <__sfputc_r+0x1e>
 801fcca:	6994      	ldr	r4, [r2, #24]
 801fccc:	42a3      	cmp	r3, r4
 801fcce:	db01      	blt.n	801fcd4 <__sfputc_r+0x16>
 801fcd0:	290a      	cmp	r1, #10
 801fcd2:	d103      	bne.n	801fcdc <__sfputc_r+0x1e>
 801fcd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fcd8:	f000 b934 	b.w	801ff44 <__swbuf_r>
 801fcdc:	6813      	ldr	r3, [r2, #0]
 801fcde:	1c58      	adds	r0, r3, #1
 801fce0:	6010      	str	r0, [r2, #0]
 801fce2:	7019      	strb	r1, [r3, #0]
 801fce4:	4608      	mov	r0, r1
 801fce6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fcea:	4770      	bx	lr

0801fcec <__sfputs_r>:
 801fcec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fcee:	4606      	mov	r6, r0
 801fcf0:	460f      	mov	r7, r1
 801fcf2:	4614      	mov	r4, r2
 801fcf4:	18d5      	adds	r5, r2, r3
 801fcf6:	42ac      	cmp	r4, r5
 801fcf8:	d101      	bne.n	801fcfe <__sfputs_r+0x12>
 801fcfa:	2000      	movs	r0, #0
 801fcfc:	e007      	b.n	801fd0e <__sfputs_r+0x22>
 801fcfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fd02:	463a      	mov	r2, r7
 801fd04:	4630      	mov	r0, r6
 801fd06:	f7ff ffda 	bl	801fcbe <__sfputc_r>
 801fd0a:	1c43      	adds	r3, r0, #1
 801fd0c:	d1f3      	bne.n	801fcf6 <__sfputs_r+0xa>
 801fd0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801fd10 <_vfiprintf_r>:
 801fd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd14:	460d      	mov	r5, r1
 801fd16:	b09d      	sub	sp, #116	; 0x74
 801fd18:	4614      	mov	r4, r2
 801fd1a:	4698      	mov	r8, r3
 801fd1c:	4606      	mov	r6, r0
 801fd1e:	b118      	cbz	r0, 801fd28 <_vfiprintf_r+0x18>
 801fd20:	6a03      	ldr	r3, [r0, #32]
 801fd22:	b90b      	cbnz	r3, 801fd28 <_vfiprintf_r+0x18>
 801fd24:	f7fc fa22 	bl	801c16c <__sinit>
 801fd28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fd2a:	07d9      	lsls	r1, r3, #31
 801fd2c:	d405      	bmi.n	801fd3a <_vfiprintf_r+0x2a>
 801fd2e:	89ab      	ldrh	r3, [r5, #12]
 801fd30:	059a      	lsls	r2, r3, #22
 801fd32:	d402      	bmi.n	801fd3a <_vfiprintf_r+0x2a>
 801fd34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fd36:	f7fc fb5e 	bl	801c3f6 <__retarget_lock_acquire_recursive>
 801fd3a:	89ab      	ldrh	r3, [r5, #12]
 801fd3c:	071b      	lsls	r3, r3, #28
 801fd3e:	d501      	bpl.n	801fd44 <_vfiprintf_r+0x34>
 801fd40:	692b      	ldr	r3, [r5, #16]
 801fd42:	b99b      	cbnz	r3, 801fd6c <_vfiprintf_r+0x5c>
 801fd44:	4629      	mov	r1, r5
 801fd46:	4630      	mov	r0, r6
 801fd48:	f000 f93a 	bl	801ffc0 <__swsetup_r>
 801fd4c:	b170      	cbz	r0, 801fd6c <_vfiprintf_r+0x5c>
 801fd4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fd50:	07dc      	lsls	r4, r3, #31
 801fd52:	d504      	bpl.n	801fd5e <_vfiprintf_r+0x4e>
 801fd54:	f04f 30ff 	mov.w	r0, #4294967295
 801fd58:	b01d      	add	sp, #116	; 0x74
 801fd5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fd5e:	89ab      	ldrh	r3, [r5, #12]
 801fd60:	0598      	lsls	r0, r3, #22
 801fd62:	d4f7      	bmi.n	801fd54 <_vfiprintf_r+0x44>
 801fd64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fd66:	f7fc fb47 	bl	801c3f8 <__retarget_lock_release_recursive>
 801fd6a:	e7f3      	b.n	801fd54 <_vfiprintf_r+0x44>
 801fd6c:	2300      	movs	r3, #0
 801fd6e:	9309      	str	r3, [sp, #36]	; 0x24
 801fd70:	2320      	movs	r3, #32
 801fd72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801fd76:	f8cd 800c 	str.w	r8, [sp, #12]
 801fd7a:	2330      	movs	r3, #48	; 0x30
 801fd7c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801ff30 <_vfiprintf_r+0x220>
 801fd80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801fd84:	f04f 0901 	mov.w	r9, #1
 801fd88:	4623      	mov	r3, r4
 801fd8a:	469a      	mov	sl, r3
 801fd8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fd90:	b10a      	cbz	r2, 801fd96 <_vfiprintf_r+0x86>
 801fd92:	2a25      	cmp	r2, #37	; 0x25
 801fd94:	d1f9      	bne.n	801fd8a <_vfiprintf_r+0x7a>
 801fd96:	ebba 0b04 	subs.w	fp, sl, r4
 801fd9a:	d00b      	beq.n	801fdb4 <_vfiprintf_r+0xa4>
 801fd9c:	465b      	mov	r3, fp
 801fd9e:	4622      	mov	r2, r4
 801fda0:	4629      	mov	r1, r5
 801fda2:	4630      	mov	r0, r6
 801fda4:	f7ff ffa2 	bl	801fcec <__sfputs_r>
 801fda8:	3001      	adds	r0, #1
 801fdaa:	f000 80a9 	beq.w	801ff00 <_vfiprintf_r+0x1f0>
 801fdae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fdb0:	445a      	add	r2, fp
 801fdb2:	9209      	str	r2, [sp, #36]	; 0x24
 801fdb4:	f89a 3000 	ldrb.w	r3, [sl]
 801fdb8:	2b00      	cmp	r3, #0
 801fdba:	f000 80a1 	beq.w	801ff00 <_vfiprintf_r+0x1f0>
 801fdbe:	2300      	movs	r3, #0
 801fdc0:	f04f 32ff 	mov.w	r2, #4294967295
 801fdc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fdc8:	f10a 0a01 	add.w	sl, sl, #1
 801fdcc:	9304      	str	r3, [sp, #16]
 801fdce:	9307      	str	r3, [sp, #28]
 801fdd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801fdd4:	931a      	str	r3, [sp, #104]	; 0x68
 801fdd6:	4654      	mov	r4, sl
 801fdd8:	2205      	movs	r2, #5
 801fdda:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fdde:	4854      	ldr	r0, [pc, #336]	; (801ff30 <_vfiprintf_r+0x220>)
 801fde0:	f7e0 faa6 	bl	8000330 <memchr>
 801fde4:	9a04      	ldr	r2, [sp, #16]
 801fde6:	b9d8      	cbnz	r0, 801fe20 <_vfiprintf_r+0x110>
 801fde8:	06d1      	lsls	r1, r2, #27
 801fdea:	bf44      	itt	mi
 801fdec:	2320      	movmi	r3, #32
 801fdee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fdf2:	0713      	lsls	r3, r2, #28
 801fdf4:	bf44      	itt	mi
 801fdf6:	232b      	movmi	r3, #43	; 0x2b
 801fdf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fdfc:	f89a 3000 	ldrb.w	r3, [sl]
 801fe00:	2b2a      	cmp	r3, #42	; 0x2a
 801fe02:	d015      	beq.n	801fe30 <_vfiprintf_r+0x120>
 801fe04:	9a07      	ldr	r2, [sp, #28]
 801fe06:	4654      	mov	r4, sl
 801fe08:	2000      	movs	r0, #0
 801fe0a:	f04f 0c0a 	mov.w	ip, #10
 801fe0e:	4621      	mov	r1, r4
 801fe10:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fe14:	3b30      	subs	r3, #48	; 0x30
 801fe16:	2b09      	cmp	r3, #9
 801fe18:	d94d      	bls.n	801feb6 <_vfiprintf_r+0x1a6>
 801fe1a:	b1b0      	cbz	r0, 801fe4a <_vfiprintf_r+0x13a>
 801fe1c:	9207      	str	r2, [sp, #28]
 801fe1e:	e014      	b.n	801fe4a <_vfiprintf_r+0x13a>
 801fe20:	eba0 0308 	sub.w	r3, r0, r8
 801fe24:	fa09 f303 	lsl.w	r3, r9, r3
 801fe28:	4313      	orrs	r3, r2
 801fe2a:	9304      	str	r3, [sp, #16]
 801fe2c:	46a2      	mov	sl, r4
 801fe2e:	e7d2      	b.n	801fdd6 <_vfiprintf_r+0xc6>
 801fe30:	9b03      	ldr	r3, [sp, #12]
 801fe32:	1d19      	adds	r1, r3, #4
 801fe34:	681b      	ldr	r3, [r3, #0]
 801fe36:	9103      	str	r1, [sp, #12]
 801fe38:	2b00      	cmp	r3, #0
 801fe3a:	bfbb      	ittet	lt
 801fe3c:	425b      	neglt	r3, r3
 801fe3e:	f042 0202 	orrlt.w	r2, r2, #2
 801fe42:	9307      	strge	r3, [sp, #28]
 801fe44:	9307      	strlt	r3, [sp, #28]
 801fe46:	bfb8      	it	lt
 801fe48:	9204      	strlt	r2, [sp, #16]
 801fe4a:	7823      	ldrb	r3, [r4, #0]
 801fe4c:	2b2e      	cmp	r3, #46	; 0x2e
 801fe4e:	d10c      	bne.n	801fe6a <_vfiprintf_r+0x15a>
 801fe50:	7863      	ldrb	r3, [r4, #1]
 801fe52:	2b2a      	cmp	r3, #42	; 0x2a
 801fe54:	d134      	bne.n	801fec0 <_vfiprintf_r+0x1b0>
 801fe56:	9b03      	ldr	r3, [sp, #12]
 801fe58:	1d1a      	adds	r2, r3, #4
 801fe5a:	681b      	ldr	r3, [r3, #0]
 801fe5c:	9203      	str	r2, [sp, #12]
 801fe5e:	2b00      	cmp	r3, #0
 801fe60:	bfb8      	it	lt
 801fe62:	f04f 33ff 	movlt.w	r3, #4294967295
 801fe66:	3402      	adds	r4, #2
 801fe68:	9305      	str	r3, [sp, #20]
 801fe6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801ff40 <_vfiprintf_r+0x230>
 801fe6e:	7821      	ldrb	r1, [r4, #0]
 801fe70:	2203      	movs	r2, #3
 801fe72:	4650      	mov	r0, sl
 801fe74:	f7e0 fa5c 	bl	8000330 <memchr>
 801fe78:	b138      	cbz	r0, 801fe8a <_vfiprintf_r+0x17a>
 801fe7a:	9b04      	ldr	r3, [sp, #16]
 801fe7c:	eba0 000a 	sub.w	r0, r0, sl
 801fe80:	2240      	movs	r2, #64	; 0x40
 801fe82:	4082      	lsls	r2, r0
 801fe84:	4313      	orrs	r3, r2
 801fe86:	3401      	adds	r4, #1
 801fe88:	9304      	str	r3, [sp, #16]
 801fe8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fe8e:	4829      	ldr	r0, [pc, #164]	; (801ff34 <_vfiprintf_r+0x224>)
 801fe90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801fe94:	2206      	movs	r2, #6
 801fe96:	f7e0 fa4b 	bl	8000330 <memchr>
 801fe9a:	2800      	cmp	r0, #0
 801fe9c:	d03f      	beq.n	801ff1e <_vfiprintf_r+0x20e>
 801fe9e:	4b26      	ldr	r3, [pc, #152]	; (801ff38 <_vfiprintf_r+0x228>)
 801fea0:	bb1b      	cbnz	r3, 801feea <_vfiprintf_r+0x1da>
 801fea2:	9b03      	ldr	r3, [sp, #12]
 801fea4:	3307      	adds	r3, #7
 801fea6:	f023 0307 	bic.w	r3, r3, #7
 801feaa:	3308      	adds	r3, #8
 801feac:	9303      	str	r3, [sp, #12]
 801feae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801feb0:	443b      	add	r3, r7
 801feb2:	9309      	str	r3, [sp, #36]	; 0x24
 801feb4:	e768      	b.n	801fd88 <_vfiprintf_r+0x78>
 801feb6:	fb0c 3202 	mla	r2, ip, r2, r3
 801feba:	460c      	mov	r4, r1
 801febc:	2001      	movs	r0, #1
 801febe:	e7a6      	b.n	801fe0e <_vfiprintf_r+0xfe>
 801fec0:	2300      	movs	r3, #0
 801fec2:	3401      	adds	r4, #1
 801fec4:	9305      	str	r3, [sp, #20]
 801fec6:	4619      	mov	r1, r3
 801fec8:	f04f 0c0a 	mov.w	ip, #10
 801fecc:	4620      	mov	r0, r4
 801fece:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fed2:	3a30      	subs	r2, #48	; 0x30
 801fed4:	2a09      	cmp	r2, #9
 801fed6:	d903      	bls.n	801fee0 <_vfiprintf_r+0x1d0>
 801fed8:	2b00      	cmp	r3, #0
 801feda:	d0c6      	beq.n	801fe6a <_vfiprintf_r+0x15a>
 801fedc:	9105      	str	r1, [sp, #20]
 801fede:	e7c4      	b.n	801fe6a <_vfiprintf_r+0x15a>
 801fee0:	fb0c 2101 	mla	r1, ip, r1, r2
 801fee4:	4604      	mov	r4, r0
 801fee6:	2301      	movs	r3, #1
 801fee8:	e7f0      	b.n	801fecc <_vfiprintf_r+0x1bc>
 801feea:	ab03      	add	r3, sp, #12
 801feec:	9300      	str	r3, [sp, #0]
 801feee:	462a      	mov	r2, r5
 801fef0:	4b12      	ldr	r3, [pc, #72]	; (801ff3c <_vfiprintf_r+0x22c>)
 801fef2:	a904      	add	r1, sp, #16
 801fef4:	4630      	mov	r0, r6
 801fef6:	f7fb faff 	bl	801b4f8 <_printf_float>
 801fefa:	4607      	mov	r7, r0
 801fefc:	1c78      	adds	r0, r7, #1
 801fefe:	d1d6      	bne.n	801feae <_vfiprintf_r+0x19e>
 801ff00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ff02:	07d9      	lsls	r1, r3, #31
 801ff04:	d405      	bmi.n	801ff12 <_vfiprintf_r+0x202>
 801ff06:	89ab      	ldrh	r3, [r5, #12]
 801ff08:	059a      	lsls	r2, r3, #22
 801ff0a:	d402      	bmi.n	801ff12 <_vfiprintf_r+0x202>
 801ff0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ff0e:	f7fc fa73 	bl	801c3f8 <__retarget_lock_release_recursive>
 801ff12:	89ab      	ldrh	r3, [r5, #12]
 801ff14:	065b      	lsls	r3, r3, #25
 801ff16:	f53f af1d 	bmi.w	801fd54 <_vfiprintf_r+0x44>
 801ff1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ff1c:	e71c      	b.n	801fd58 <_vfiprintf_r+0x48>
 801ff1e:	ab03      	add	r3, sp, #12
 801ff20:	9300      	str	r3, [sp, #0]
 801ff22:	462a      	mov	r2, r5
 801ff24:	4b05      	ldr	r3, [pc, #20]	; (801ff3c <_vfiprintf_r+0x22c>)
 801ff26:	a904      	add	r1, sp, #16
 801ff28:	4630      	mov	r0, r6
 801ff2a:	f7fb fd6d 	bl	801ba08 <_printf_i>
 801ff2e:	e7e4      	b.n	801fefa <_vfiprintf_r+0x1ea>
 801ff30:	08020cf9 	.word	0x08020cf9
 801ff34:	08020d03 	.word	0x08020d03
 801ff38:	0801b4f9 	.word	0x0801b4f9
 801ff3c:	0801fced 	.word	0x0801fced
 801ff40:	08020cff 	.word	0x08020cff

0801ff44 <__swbuf_r>:
 801ff44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ff46:	460e      	mov	r6, r1
 801ff48:	4614      	mov	r4, r2
 801ff4a:	4605      	mov	r5, r0
 801ff4c:	b118      	cbz	r0, 801ff56 <__swbuf_r+0x12>
 801ff4e:	6a03      	ldr	r3, [r0, #32]
 801ff50:	b90b      	cbnz	r3, 801ff56 <__swbuf_r+0x12>
 801ff52:	f7fc f90b 	bl	801c16c <__sinit>
 801ff56:	69a3      	ldr	r3, [r4, #24]
 801ff58:	60a3      	str	r3, [r4, #8]
 801ff5a:	89a3      	ldrh	r3, [r4, #12]
 801ff5c:	071a      	lsls	r2, r3, #28
 801ff5e:	d525      	bpl.n	801ffac <__swbuf_r+0x68>
 801ff60:	6923      	ldr	r3, [r4, #16]
 801ff62:	b31b      	cbz	r3, 801ffac <__swbuf_r+0x68>
 801ff64:	6823      	ldr	r3, [r4, #0]
 801ff66:	6922      	ldr	r2, [r4, #16]
 801ff68:	1a98      	subs	r0, r3, r2
 801ff6a:	6963      	ldr	r3, [r4, #20]
 801ff6c:	b2f6      	uxtb	r6, r6
 801ff6e:	4283      	cmp	r3, r0
 801ff70:	4637      	mov	r7, r6
 801ff72:	dc04      	bgt.n	801ff7e <__swbuf_r+0x3a>
 801ff74:	4621      	mov	r1, r4
 801ff76:	4628      	mov	r0, r5
 801ff78:	f7ff f950 	bl	801f21c <_fflush_r>
 801ff7c:	b9e0      	cbnz	r0, 801ffb8 <__swbuf_r+0x74>
 801ff7e:	68a3      	ldr	r3, [r4, #8]
 801ff80:	3b01      	subs	r3, #1
 801ff82:	60a3      	str	r3, [r4, #8]
 801ff84:	6823      	ldr	r3, [r4, #0]
 801ff86:	1c5a      	adds	r2, r3, #1
 801ff88:	6022      	str	r2, [r4, #0]
 801ff8a:	701e      	strb	r6, [r3, #0]
 801ff8c:	6962      	ldr	r2, [r4, #20]
 801ff8e:	1c43      	adds	r3, r0, #1
 801ff90:	429a      	cmp	r2, r3
 801ff92:	d004      	beq.n	801ff9e <__swbuf_r+0x5a>
 801ff94:	89a3      	ldrh	r3, [r4, #12]
 801ff96:	07db      	lsls	r3, r3, #31
 801ff98:	d506      	bpl.n	801ffa8 <__swbuf_r+0x64>
 801ff9a:	2e0a      	cmp	r6, #10
 801ff9c:	d104      	bne.n	801ffa8 <__swbuf_r+0x64>
 801ff9e:	4621      	mov	r1, r4
 801ffa0:	4628      	mov	r0, r5
 801ffa2:	f7ff f93b 	bl	801f21c <_fflush_r>
 801ffa6:	b938      	cbnz	r0, 801ffb8 <__swbuf_r+0x74>
 801ffa8:	4638      	mov	r0, r7
 801ffaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ffac:	4621      	mov	r1, r4
 801ffae:	4628      	mov	r0, r5
 801ffb0:	f000 f806 	bl	801ffc0 <__swsetup_r>
 801ffb4:	2800      	cmp	r0, #0
 801ffb6:	d0d5      	beq.n	801ff64 <__swbuf_r+0x20>
 801ffb8:	f04f 37ff 	mov.w	r7, #4294967295
 801ffbc:	e7f4      	b.n	801ffa8 <__swbuf_r+0x64>
	...

0801ffc0 <__swsetup_r>:
 801ffc0:	b538      	push	{r3, r4, r5, lr}
 801ffc2:	4b2a      	ldr	r3, [pc, #168]	; (802006c <__swsetup_r+0xac>)
 801ffc4:	4605      	mov	r5, r0
 801ffc6:	6818      	ldr	r0, [r3, #0]
 801ffc8:	460c      	mov	r4, r1
 801ffca:	b118      	cbz	r0, 801ffd4 <__swsetup_r+0x14>
 801ffcc:	6a03      	ldr	r3, [r0, #32]
 801ffce:	b90b      	cbnz	r3, 801ffd4 <__swsetup_r+0x14>
 801ffd0:	f7fc f8cc 	bl	801c16c <__sinit>
 801ffd4:	89a3      	ldrh	r3, [r4, #12]
 801ffd6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ffda:	0718      	lsls	r0, r3, #28
 801ffdc:	d422      	bmi.n	8020024 <__swsetup_r+0x64>
 801ffde:	06d9      	lsls	r1, r3, #27
 801ffe0:	d407      	bmi.n	801fff2 <__swsetup_r+0x32>
 801ffe2:	2309      	movs	r3, #9
 801ffe4:	602b      	str	r3, [r5, #0]
 801ffe6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801ffea:	81a3      	strh	r3, [r4, #12]
 801ffec:	f04f 30ff 	mov.w	r0, #4294967295
 801fff0:	e034      	b.n	802005c <__swsetup_r+0x9c>
 801fff2:	0758      	lsls	r0, r3, #29
 801fff4:	d512      	bpl.n	802001c <__swsetup_r+0x5c>
 801fff6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fff8:	b141      	cbz	r1, 802000c <__swsetup_r+0x4c>
 801fffa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fffe:	4299      	cmp	r1, r3
 8020000:	d002      	beq.n	8020008 <__swsetup_r+0x48>
 8020002:	4628      	mov	r0, r5
 8020004:	f7fd f80c 	bl	801d020 <_free_r>
 8020008:	2300      	movs	r3, #0
 802000a:	6363      	str	r3, [r4, #52]	; 0x34
 802000c:	89a3      	ldrh	r3, [r4, #12]
 802000e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8020012:	81a3      	strh	r3, [r4, #12]
 8020014:	2300      	movs	r3, #0
 8020016:	6063      	str	r3, [r4, #4]
 8020018:	6923      	ldr	r3, [r4, #16]
 802001a:	6023      	str	r3, [r4, #0]
 802001c:	89a3      	ldrh	r3, [r4, #12]
 802001e:	f043 0308 	orr.w	r3, r3, #8
 8020022:	81a3      	strh	r3, [r4, #12]
 8020024:	6923      	ldr	r3, [r4, #16]
 8020026:	b94b      	cbnz	r3, 802003c <__swsetup_r+0x7c>
 8020028:	89a3      	ldrh	r3, [r4, #12]
 802002a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802002e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020032:	d003      	beq.n	802003c <__swsetup_r+0x7c>
 8020034:	4621      	mov	r1, r4
 8020036:	4628      	mov	r0, r5
 8020038:	f000 f884 	bl	8020144 <__smakebuf_r>
 802003c:	89a0      	ldrh	r0, [r4, #12]
 802003e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020042:	f010 0301 	ands.w	r3, r0, #1
 8020046:	d00a      	beq.n	802005e <__swsetup_r+0x9e>
 8020048:	2300      	movs	r3, #0
 802004a:	60a3      	str	r3, [r4, #8]
 802004c:	6963      	ldr	r3, [r4, #20]
 802004e:	425b      	negs	r3, r3
 8020050:	61a3      	str	r3, [r4, #24]
 8020052:	6923      	ldr	r3, [r4, #16]
 8020054:	b943      	cbnz	r3, 8020068 <__swsetup_r+0xa8>
 8020056:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802005a:	d1c4      	bne.n	801ffe6 <__swsetup_r+0x26>
 802005c:	bd38      	pop	{r3, r4, r5, pc}
 802005e:	0781      	lsls	r1, r0, #30
 8020060:	bf58      	it	pl
 8020062:	6963      	ldrpl	r3, [r4, #20]
 8020064:	60a3      	str	r3, [r4, #8]
 8020066:	e7f4      	b.n	8020052 <__swsetup_r+0x92>
 8020068:	2000      	movs	r0, #0
 802006a:	e7f7      	b.n	802005c <__swsetup_r+0x9c>
 802006c:	24000158 	.word	0x24000158

08020070 <_raise_r>:
 8020070:	291f      	cmp	r1, #31
 8020072:	b538      	push	{r3, r4, r5, lr}
 8020074:	4604      	mov	r4, r0
 8020076:	460d      	mov	r5, r1
 8020078:	d904      	bls.n	8020084 <_raise_r+0x14>
 802007a:	2316      	movs	r3, #22
 802007c:	6003      	str	r3, [r0, #0]
 802007e:	f04f 30ff 	mov.w	r0, #4294967295
 8020082:	bd38      	pop	{r3, r4, r5, pc}
 8020084:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8020086:	b112      	cbz	r2, 802008e <_raise_r+0x1e>
 8020088:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802008c:	b94b      	cbnz	r3, 80200a2 <_raise_r+0x32>
 802008e:	4620      	mov	r0, r4
 8020090:	f000 f830 	bl	80200f4 <_getpid_r>
 8020094:	462a      	mov	r2, r5
 8020096:	4601      	mov	r1, r0
 8020098:	4620      	mov	r0, r4
 802009a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802009e:	f000 b817 	b.w	80200d0 <_kill_r>
 80200a2:	2b01      	cmp	r3, #1
 80200a4:	d00a      	beq.n	80200bc <_raise_r+0x4c>
 80200a6:	1c59      	adds	r1, r3, #1
 80200a8:	d103      	bne.n	80200b2 <_raise_r+0x42>
 80200aa:	2316      	movs	r3, #22
 80200ac:	6003      	str	r3, [r0, #0]
 80200ae:	2001      	movs	r0, #1
 80200b0:	e7e7      	b.n	8020082 <_raise_r+0x12>
 80200b2:	2400      	movs	r4, #0
 80200b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80200b8:	4628      	mov	r0, r5
 80200ba:	4798      	blx	r3
 80200bc:	2000      	movs	r0, #0
 80200be:	e7e0      	b.n	8020082 <_raise_r+0x12>

080200c0 <raise>:
 80200c0:	4b02      	ldr	r3, [pc, #8]	; (80200cc <raise+0xc>)
 80200c2:	4601      	mov	r1, r0
 80200c4:	6818      	ldr	r0, [r3, #0]
 80200c6:	f7ff bfd3 	b.w	8020070 <_raise_r>
 80200ca:	bf00      	nop
 80200cc:	24000158 	.word	0x24000158

080200d0 <_kill_r>:
 80200d0:	b538      	push	{r3, r4, r5, lr}
 80200d2:	4d07      	ldr	r5, [pc, #28]	; (80200f0 <_kill_r+0x20>)
 80200d4:	2300      	movs	r3, #0
 80200d6:	4604      	mov	r4, r0
 80200d8:	4608      	mov	r0, r1
 80200da:	4611      	mov	r1, r2
 80200dc:	602b      	str	r3, [r5, #0]
 80200de:	f7e3 ff35 	bl	8003f4c <_kill>
 80200e2:	1c43      	adds	r3, r0, #1
 80200e4:	d102      	bne.n	80200ec <_kill_r+0x1c>
 80200e6:	682b      	ldr	r3, [r5, #0]
 80200e8:	b103      	cbz	r3, 80200ec <_kill_r+0x1c>
 80200ea:	6023      	str	r3, [r4, #0]
 80200ec:	bd38      	pop	{r3, r4, r5, pc}
 80200ee:	bf00      	nop
 80200f0:	24003634 	.word	0x24003634

080200f4 <_getpid_r>:
 80200f4:	f7e3 bf22 	b.w	8003f3c <_getpid>

080200f8 <__swhatbuf_r>:
 80200f8:	b570      	push	{r4, r5, r6, lr}
 80200fa:	460c      	mov	r4, r1
 80200fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020100:	2900      	cmp	r1, #0
 8020102:	b096      	sub	sp, #88	; 0x58
 8020104:	4615      	mov	r5, r2
 8020106:	461e      	mov	r6, r3
 8020108:	da0d      	bge.n	8020126 <__swhatbuf_r+0x2e>
 802010a:	89a3      	ldrh	r3, [r4, #12]
 802010c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8020110:	f04f 0100 	mov.w	r1, #0
 8020114:	bf0c      	ite	eq
 8020116:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 802011a:	2340      	movne	r3, #64	; 0x40
 802011c:	2000      	movs	r0, #0
 802011e:	6031      	str	r1, [r6, #0]
 8020120:	602b      	str	r3, [r5, #0]
 8020122:	b016      	add	sp, #88	; 0x58
 8020124:	bd70      	pop	{r4, r5, r6, pc}
 8020126:	466a      	mov	r2, sp
 8020128:	f000 f848 	bl	80201bc <_fstat_r>
 802012c:	2800      	cmp	r0, #0
 802012e:	dbec      	blt.n	802010a <__swhatbuf_r+0x12>
 8020130:	9901      	ldr	r1, [sp, #4]
 8020132:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8020136:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 802013a:	4259      	negs	r1, r3
 802013c:	4159      	adcs	r1, r3
 802013e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020142:	e7eb      	b.n	802011c <__swhatbuf_r+0x24>

08020144 <__smakebuf_r>:
 8020144:	898b      	ldrh	r3, [r1, #12]
 8020146:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020148:	079d      	lsls	r5, r3, #30
 802014a:	4606      	mov	r6, r0
 802014c:	460c      	mov	r4, r1
 802014e:	d507      	bpl.n	8020160 <__smakebuf_r+0x1c>
 8020150:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8020154:	6023      	str	r3, [r4, #0]
 8020156:	6123      	str	r3, [r4, #16]
 8020158:	2301      	movs	r3, #1
 802015a:	6163      	str	r3, [r4, #20]
 802015c:	b002      	add	sp, #8
 802015e:	bd70      	pop	{r4, r5, r6, pc}
 8020160:	ab01      	add	r3, sp, #4
 8020162:	466a      	mov	r2, sp
 8020164:	f7ff ffc8 	bl	80200f8 <__swhatbuf_r>
 8020168:	9900      	ldr	r1, [sp, #0]
 802016a:	4605      	mov	r5, r0
 802016c:	4630      	mov	r0, r6
 802016e:	f7fc ffcb 	bl	801d108 <_malloc_r>
 8020172:	b948      	cbnz	r0, 8020188 <__smakebuf_r+0x44>
 8020174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020178:	059a      	lsls	r2, r3, #22
 802017a:	d4ef      	bmi.n	802015c <__smakebuf_r+0x18>
 802017c:	f023 0303 	bic.w	r3, r3, #3
 8020180:	f043 0302 	orr.w	r3, r3, #2
 8020184:	81a3      	strh	r3, [r4, #12]
 8020186:	e7e3      	b.n	8020150 <__smakebuf_r+0xc>
 8020188:	89a3      	ldrh	r3, [r4, #12]
 802018a:	6020      	str	r0, [r4, #0]
 802018c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020190:	81a3      	strh	r3, [r4, #12]
 8020192:	9b00      	ldr	r3, [sp, #0]
 8020194:	6163      	str	r3, [r4, #20]
 8020196:	9b01      	ldr	r3, [sp, #4]
 8020198:	6120      	str	r0, [r4, #16]
 802019a:	b15b      	cbz	r3, 80201b4 <__smakebuf_r+0x70>
 802019c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80201a0:	4630      	mov	r0, r6
 80201a2:	f000 f81d 	bl	80201e0 <_isatty_r>
 80201a6:	b128      	cbz	r0, 80201b4 <__smakebuf_r+0x70>
 80201a8:	89a3      	ldrh	r3, [r4, #12]
 80201aa:	f023 0303 	bic.w	r3, r3, #3
 80201ae:	f043 0301 	orr.w	r3, r3, #1
 80201b2:	81a3      	strh	r3, [r4, #12]
 80201b4:	89a3      	ldrh	r3, [r4, #12]
 80201b6:	431d      	orrs	r5, r3
 80201b8:	81a5      	strh	r5, [r4, #12]
 80201ba:	e7cf      	b.n	802015c <__smakebuf_r+0x18>

080201bc <_fstat_r>:
 80201bc:	b538      	push	{r3, r4, r5, lr}
 80201be:	4d07      	ldr	r5, [pc, #28]	; (80201dc <_fstat_r+0x20>)
 80201c0:	2300      	movs	r3, #0
 80201c2:	4604      	mov	r4, r0
 80201c4:	4608      	mov	r0, r1
 80201c6:	4611      	mov	r1, r2
 80201c8:	602b      	str	r3, [r5, #0]
 80201ca:	f7e3 ff1e 	bl	800400a <_fstat>
 80201ce:	1c43      	adds	r3, r0, #1
 80201d0:	d102      	bne.n	80201d8 <_fstat_r+0x1c>
 80201d2:	682b      	ldr	r3, [r5, #0]
 80201d4:	b103      	cbz	r3, 80201d8 <_fstat_r+0x1c>
 80201d6:	6023      	str	r3, [r4, #0]
 80201d8:	bd38      	pop	{r3, r4, r5, pc}
 80201da:	bf00      	nop
 80201dc:	24003634 	.word	0x24003634

080201e0 <_isatty_r>:
 80201e0:	b538      	push	{r3, r4, r5, lr}
 80201e2:	4d06      	ldr	r5, [pc, #24]	; (80201fc <_isatty_r+0x1c>)
 80201e4:	2300      	movs	r3, #0
 80201e6:	4604      	mov	r4, r0
 80201e8:	4608      	mov	r0, r1
 80201ea:	602b      	str	r3, [r5, #0]
 80201ec:	f7e3 ff1d 	bl	800402a <_isatty>
 80201f0:	1c43      	adds	r3, r0, #1
 80201f2:	d102      	bne.n	80201fa <_isatty_r+0x1a>
 80201f4:	682b      	ldr	r3, [r5, #0]
 80201f6:	b103      	cbz	r3, 80201fa <_isatty_r+0x1a>
 80201f8:	6023      	str	r3, [r4, #0]
 80201fa:	bd38      	pop	{r3, r4, r5, pc}
 80201fc:	24003634 	.word	0x24003634

08020200 <_init>:
 8020200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020202:	bf00      	nop
 8020204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020206:	bc08      	pop	{r3}
 8020208:	469e      	mov	lr, r3
 802020a:	4770      	bx	lr

0802020c <_fini>:
 802020c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802020e:	bf00      	nop
 8020210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020212:	bc08      	pop	{r3}
 8020214:	469e      	mov	lr, r3
 8020216:	4770      	bx	lr
